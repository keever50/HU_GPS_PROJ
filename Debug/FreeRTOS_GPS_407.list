
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  08015098  08015098  00016098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f5c  08015f5c  00017424  2**0
                  CONTENTS
  4 .ARM          00000008  08015f5c  08015f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f64  08015f64  00017424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f64  08015f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f68  08015f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08015f6c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000567c  20000428  08016390  00017428  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005aa4  08016390  00017aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed4e  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077b0  00000000  00000000  000461a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025f8  00000000  00000000  0004d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d48  00000000  00000000  0004ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cab6  00000000  00000000  00051c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f50  00000000  00000000  0007e74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4a54  00000000  00000000  000b469e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001990f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3d4  00000000  00000000  00199138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801507c 	.word	0x0801507c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	0801507c 	.word	0x0801507c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <toggle_led+0x30>)
 8000f54:	f003 fa1d 	bl	8004392 <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f00b f97b 	bl	800c254 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <toggle_led+0x30>)
 8000f66:	f003 fa14 	bl	8004392 <HAL_GPIO_TogglePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <ARM_keys_IRQ+0x58>)
 8000f82:	f001 fecf 	bl	8002d24 <UART_puts>
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <ARM_keys_IRQ+0x5c>)
 8000f88:	f001 fecc 	bl	8002d24 <UART_puts>
 8000f8c:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <ARM_keys_IRQ+0x60>)
 8000f8e:	f001 fec9 	bl	8002d24 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <ARM_keys_IRQ+0x64>)
 8000f94:	f00d fa70 	bl	800e478 <xTaskGetHandle>
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <ARM_keys_IRQ+0x68>)
 8000fa2:	f000 fb8d 	bl	80016c0 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <ARM_keys_IRQ+0x6c>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fb8:	f00b fae6 	bl	800c588 <xEventGroupWaitBits>
 8000fbc:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f00e f987 	bl	800f2d8 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fca:	bf00      	nop
 8000fcc:	e7eb      	b.n	8000fa6 <ARM_keys_IRQ+0x2e>
 8000fce:	bf00      	nop
 8000fd0:	08015098 	.word	0x08015098
 8000fd4:	08015a28 	.word	0x08015a28
 8000fd8:	0801509c 	.word	0x0801509c
 8000fdc:	080150a8 	.word	0x080150a8
 8000fe0:	080150b8 	.word	0x080150b8
 8000fe4:	2000059c 	.word	0x2000059c

08000fe8 <waypointcreate>:
vector2d_t waypoints[20];
int waypointteller=0;

void waypointread();
void waypointcreate()
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
    BUZZER_put (500);//check of functie wordt aangeroepen
 8000fee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff2:	f001 fb3b 	bl	800266c <BUZZER_put>
	osDelay(500);
 8000ff6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ffa:	f00b f92b 	bl	800c254 <osDelay>
	if(waypointteller>=sizeof(waypoints))
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <waypointcreate+0x54>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001006:	d215      	bcs.n	8001034 <waypointcreate+0x4c>
		return;
	vector2d_t vec;
	Getglobalvector(&vec);
 8001008:	463b      	mov	r3, r7
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fb00 	bl	8002610 <Getglobalvector>
	waypoints[waypointteller] = vec;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <waypointcreate+0x54>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <waypointcreate+0x58>)
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	461c      	mov	r4, r3
 800101c:	463b      	mov	r3, r7
 800101e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	waypointteller++;
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <waypointcreate+0x54>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <waypointcreate+0x54>)
 800102c:	6013      	str	r3, [r2, #0]
	waypointread();
 800102e:	f000 f809 	bl	8001044 <waypointread>
 8001032:	e000      	b.n	8001036 <waypointcreate+0x4e>
		return;
 8001034:	bf00      	nop
}
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000588 	.word	0x20000588
 8001040:	20000448 	.word	0x20000448

08001044 <waypointread>:

void waypointread()
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b0cb      	sub	sp, #300	@ 0x12c
 8001048:	af04      	add	r7, sp, #16
	for(int i=0;i<waypointteller;i++)
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001050:	e023      	b.n	800109a <waypointread+0x56>
	{
		vector2d_t vec = waypoints[i];
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <waypointread+0x74>)
 8001054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4413      	add	r3, r2
 800105c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8001060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		char msg[256];
		snprintf(msg,sizeof(msg),"waypoint %d. x %f. y %f\n",i, vec.x, vec.y);
 8001066:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800106a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800106e:	463c      	mov	r4, r7
 8001070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001074:	e9cd 2300 	strd	r2, r3, [sp]
 8001078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <waypointread+0x78>)
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4620      	mov	r0, r4
 8001084:	f011 f9ca 	bl	801241c <sniprintf>
		UART_puts(msg);
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fe4a 	bl	8002d24 <UART_puts>
	for(int i=0;i<waypointteller;i++)
 8001090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <waypointread+0x7c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbd5      	blt.n	8001052 <waypointread+0xe>
	}
	UART_puts("\n");
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <waypointread+0x80>)
 80010a8:	f001 fe3c 	bl	8002d24 <UART_puts>
}
 80010ac:	bf00      	nop
 80010ae:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000448 	.word	0x20000448
 80010bc:	080150c8 	.word	0x080150c8
 80010c0:	20000588 	.word	0x20000588
 80010c4:	080150e4 	.word	0x080150e4

080010c8 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	2000      	movs	r0, #0
 80010de:	f00e f89b 	bl	800f218 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <ARM_keys_task+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00c f89c 	bl	800d228 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fdc9 	bl	8002c8c <LED_put>
	    BUZZER_put (500);
 80010fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010fe:	f001 fab5 	bl	800266c <BUZZER_put>
		osDelay(500);
 8001102:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001106:	f00b f8a5 	bl	800c254 <osDelay>
		if(key==1)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <ARM_keys_task+0x4c>
			waypointcreate();
 8001110:	f7ff ff6a 	bl	8000fe8 <waypointcreate>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <ARM_keys_task+0xc4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <ARM_keys_task+0x66>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001120:	481b      	ldr	r0, [pc, #108]	@ (8001190 <ARM_keys_task+0xc8>)
 8001122:	f001 fdff 	bl	8002d24 <UART_puts>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fe17 	bl	8002d5c <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <ARM_keys_task+0xc0>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	f00b fdf4 	bl	800cd24 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e015      	b.n	800116e <ARM_keys_task+0xa6>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <ARM_keys_task+0x92>
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <ARM_keys_task+0x8c>
 800114e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001152:	e004      	b.n	800115e <ARM_keys_task+0x96>
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	e001      	b.n	800115e <ARM_keys_task+0x96>
 800115a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115e:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff feee 	bl	8000f44 <toggle_led>
		for (i=0; i<3; i++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2b02      	cmp	r3, #2
 8001172:	dde6      	ble.n	8001142 <ARM_keys_task+0x7a>
	  	}
     	taskYIELD(); // done, force context switch
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <ARM_keys_task+0xcc>)
 8001176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f3bf 8f4f 	dsb	sy
 8001180:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8001184:	e7a4      	b.n	80010d0 <ARM_keys_task+0x8>
 8001186:	bf00      	nop
 8001188:	20000598 	.word	0x20000598
 800118c:	2000058c 	.word	0x2000058c
 8001190:	080150e8 	.word	0x080150e8
 8001194:	e000ed04 	.word	0xe000ed04

08001198 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 80011a8:	4847      	ldr	r0, [pc, #284]	@ (80012c8 <UART_keys_IRQ+0x130>)
 80011aa:	f001 fdbb 	bl	8002d24 <UART_puts>
 80011ae:	4847      	ldr	r0, [pc, #284]	@ (80012cc <UART_keys_IRQ+0x134>)
 80011b0:	f001 fdb8 	bl	8002d24 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 80011b4:	4846      	ldr	r0, [pc, #280]	@ (80012d0 <UART_keys_IRQ+0x138>)
 80011b6:	f00d f95f 	bl	800e478 <xTaskGetHandle>
 80011ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 80011c2:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <UART_keys_IRQ+0x13c>)
 80011c4:	f000 fa7c 	bl	80016c0 <error_HaltOS>
	while(TRUE)
    {
		// laat de VIC de q vullen, tot LFEED gedrukt is of qsize - 1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80011c8:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <UART_keys_IRQ+0x140>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f107 0218 	add.w	r2, r7, #24
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	4413      	add	r3, r2
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	4619      	mov	r1, r3
 80011da:	f00b ff43 	bl	800d064 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 80011de:	f107 0218 	add.w	r2, r7, #24
 80011e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d06b      	beq.n	80012c4 <UART_keys_IRQ+0x12c>
 80011ec:	f107 0218 	add.w	r2, r7, #24
 80011f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2bff      	cmp	r3, #255	@ 0xff
 80011f8:	d064      	beq.n	80012c4 <UART_keys_IRQ+0x12c>
 80011fa:	f107 0218 	add.w	r2, r7, #24
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b0d      	cmp	r3, #13
 8001206:	d05d      	beq.n	80012c4 <UART_keys_IRQ+0x12c>
 8001208:	f107 0218 	add.w	r2, r7, #24
 800120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b20      	cmp	r3, #32
 8001214:	d056      	beq.n	80012c4 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 8001216:	f107 0218 	add.w	r2, r7, #24
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b0a      	cmp	r3, #10
 8001222:	d108      	bne.n	8001236 <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001224:	f107 0218 	add.w	r2, r7, #24
 8001228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122a:	4413      	add	r3, r2
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001230:	2301      	movs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001234:	e00d      	b.n	8001252 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	2b08      	cmp	r3, #8
 800123a:	d10a      	bne.n	8001252 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 800123c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123e:	3301      	adds	r3, #1
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001242:	f107 0218 	add.w	r2, r7, #24
 8001246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001248:	4413      	add	r3, r2
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001254:	2b00      	cmp	r3, #0
 8001256:	d031      	beq.n	80012bc <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8001258:	f107 0218 	add.w	r2, r7, #24
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f011 fb0b 	bl	801287e <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	220a      	movs	r2, #10
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f011 f9a3 	bl	80125bc <memset>
			finish = FALSE;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2300      	movs	r3, #0
 8001284:	2203      	movs	r2, #3
 8001286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001288:	f00e f826 	bl	800f2d8 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <UART_keys_IRQ+0x144>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d097      	beq.n	80011c8 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001298:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <UART_keys_IRQ+0x148>)
 800129a:	f001 fd43 	bl	8002d24 <UART_puts>
 800129e:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <UART_keys_IRQ+0x130>)
 80012a0:	f001 fd40 	bl	8002d24 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 80012a4:	480f      	ldr	r0, [pc, #60]	@ (80012e4 <UART_keys_IRQ+0x14c>)
 80012a6:	f001 fd3d 	bl	8002d24 <UART_puts>
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fd38 	bl	8002d24 <UART_puts>
				UART_puts("\r\n");
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <UART_keys_IRQ+0x150>)
 80012b6:	f001 fd35 	bl	8002d24 <UART_puts>
 80012ba:	e785      	b.n	80011c8 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 80012bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012be:	3301      	adds	r3, #1
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012c2:	e781      	b.n	80011c8 <UART_keys_IRQ+0x30>
			continue;
 80012c4:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80012c6:	e77f      	b.n	80011c8 <UART_keys_IRQ+0x30>
 80012c8:	08015a38 	.word	0x08015a38
 80012cc:	08015154 	.word	0x08015154
 80012d0:	08015108 	.word	0x08015108
 80012d4:	08015178 	.word	0x08015178
 80012d8:	20000590 	.word	0x20000590
 80012dc:	2000058c 	.word	0x2000058c
 80012e0:	08015138 	.word	0x08015138
 80012e4:	08015188 	.word	0x08015188
 80012e8:	08015150 	.word	0x08015150

080012ec <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 80012f4:	4bab      	ldr	r3, [pc, #684]	@ (80015a4 <UART_menu+0x2b8>)
 80012f6:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80012f8:	48ab      	ldr	r0, [pc, #684]	@ (80015a8 <UART_menu+0x2bc>)
 80012fa:	f001 fd13 	bl	8002d24 <UART_puts>
 80012fe:	48ab      	ldr	r0, [pc, #684]	@ (80015ac <UART_menu+0x2c0>)
 8001300:	f001 fd10 	bl	8002d24 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	2001      	movs	r0, #1
 800130a:	f00d ff39 	bl	800f180 <ulTaskNotifyTake>
 800130e:	4603      	mov	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	75fb      	strb	r3, [r7, #23]
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	3301      	adds	r3, #1
 800131c:	4aa4      	ldr	r2, [pc, #656]	@ (80015b0 <UART_menu+0x2c4>)
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d102      	bne.n	8001330 <UART_menu+0x44>
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	3b20      	subs	r3, #32
 800132e:	e000      	b.n	8001332 <UART_menu+0x46>
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	3b30      	subs	r3, #48	@ 0x30
 8001334:	2b24      	cmp	r3, #36	@ 0x24
 8001336:	d84d      	bhi.n	80013d4 <UART_menu+0xe8>
 8001338:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <UART_menu+0x54>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	080013e3 	.word	0x080013e3
 8001344:	0800141f 	.word	0x0800141f
 8001348:	0800144b 	.word	0x0800144b
 800134c:	08001477 	.word	0x08001477
 8001350:	080014a3 	.word	0x080014a3
 8001354:	080014cf 	.word	0x080014cf
 8001358:	080013d5 	.word	0x080013d5
 800135c:	080013d5 	.word	0x080013d5
 8001360:	080013d5 	.word	0x080013d5
 8001364:	080013d5 	.word	0x080013d5
 8001368:	080013d5 	.word	0x080013d5
 800136c:	080013d5 	.word	0x080013d5
 8001370:	080013d5 	.word	0x080013d5
 8001374:	080013d5 	.word	0x080013d5
 8001378:	080013d5 	.word	0x080013d5
 800137c:	080013d5 	.word	0x080013d5
 8001380:	080013d5 	.word	0x080013d5
 8001384:	080013d5 	.word	0x080013d5
 8001388:	080013d5 	.word	0x080013d5
 800138c:	080013d5 	.word	0x080013d5
 8001390:	080014fb 	.word	0x080014fb
 8001394:	080013d5 	.word	0x080013d5
 8001398:	080013d5 	.word	0x080013d5
 800139c:	080013d5 	.word	0x080013d5
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	080013d5 	.word	0x080013d5
 80013a8:	080013d5 	.word	0x080013d5
 80013ac:	080013d5 	.word	0x080013d5
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	0800151f 	.word	0x0800151f
 80013b8:	080013d5 	.word	0x080013d5
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	0800152b 	.word	0x0800152b
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013d5 	.word	0x080013d5
 80013cc:	0800156f 	.word	0x0800156f
 80013d0:	08001525 	.word	0x08001525
		{
		default:  UART_puts(s);
 80013d4:	69b8      	ldr	r0, [r7, #24]
 80013d6:	f001 fca5 	bl	8002d24 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 80013da:	4876      	ldr	r0, [pc, #472]	@ (80015b4 <UART_menu+0x2c8>)
 80013dc:	f001 fca2 	bl	8002d24 <UART_puts>
				  break;
 80013e0:	e0df      	b.n	80015a2 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 80013e2:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <UART_menu+0x2cc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <UART_menu+0x102>
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <UART_menu+0x104>
 80013ee:	23ff      	movs	r3, #255	@ 0xff
 80013f0:	4a71      	ldr	r2, [pc, #452]	@ (80015b8 <UART_menu+0x2cc>)
 80013f2:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 80013f4:	4871      	ldr	r0, [pc, #452]	@ (80015bc <UART_menu+0x2d0>)
 80013f6:	f001 fc95 	bl	8002d24 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 80013fa:	4b6f      	ldr	r3, [pc, #444]	@ (80015b8 <UART_menu+0x2cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2bff      	cmp	r3, #255	@ 0xff
 8001400:	d101      	bne.n	8001406 <UART_menu+0x11a>
 8001402:	4b6f      	ldr	r3, [pc, #444]	@ (80015c0 <UART_menu+0x2d4>)
 8001404:	e000      	b.n	8001408 <UART_menu+0x11c>
 8001406:	4b6f      	ldr	r3, [pc, #444]	@ (80015c4 <UART_menu+0x2d8>)
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fc8b 	bl	8002d24 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 800140e:	4b6a      	ldr	r3, [pc, #424]	@ (80015b8 <UART_menu+0x2cc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 80c0 	bne.w	8001598 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 8001418:	f000 f944 	bl	80016a4 <DisplayMenu>
				  break;
 800141c:	e0bc      	b.n	8001598 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 800141e:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <UART_menu+0x2cc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	4a64      	ldr	r2, [pc, #400]	@ (80015b8 <UART_menu+0x2cc>)
 8001428:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 800142a:	4867      	ldr	r0, [pc, #412]	@ (80015c8 <UART_menu+0x2dc>)
 800142c:	f001 fc7a 	bl	8002d24 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001430:	4b61      	ldr	r3, [pc, #388]	@ (80015b8 <UART_menu+0x2cc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <UART_menu+0x154>
 800143c:	4b60      	ldr	r3, [pc, #384]	@ (80015c0 <UART_menu+0x2d4>)
 800143e:	e000      	b.n	8001442 <UART_menu+0x156>
 8001440:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <UART_menu+0x2d8>)
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fc6e 	bl	8002d24 <UART_puts>
				  break;
 8001448:	e0ab      	b.n	80015a2 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 800144a:	4b5b      	ldr	r3, [pc, #364]	@ (80015b8 <UART_menu+0x2cc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f083 0302 	eor.w	r3, r3, #2
 8001452:	4a59      	ldr	r2, [pc, #356]	@ (80015b8 <UART_menu+0x2cc>)
 8001454:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 8001456:	485d      	ldr	r0, [pc, #372]	@ (80015cc <UART_menu+0x2e0>)
 8001458:	f001 fc64 	bl	8002d24 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800145c:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <UART_menu+0x2cc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <UART_menu+0x180>
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <UART_menu+0x2d4>)
 800146a:	e000      	b.n	800146e <UART_menu+0x182>
 800146c:	4b55      	ldr	r3, [pc, #340]	@ (80015c4 <UART_menu+0x2d8>)
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fc58 	bl	8002d24 <UART_puts>
				  break;
 8001474:	e095      	b.n	80015a2 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8001476:	4b50      	ldr	r3, [pc, #320]	@ (80015b8 <UART_menu+0x2cc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f083 0304 	eor.w	r3, r3, #4
 800147e:	4a4e      	ldr	r2, [pc, #312]	@ (80015b8 <UART_menu+0x2cc>)
 8001480:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001482:	4853      	ldr	r0, [pc, #332]	@ (80015d0 <UART_menu+0x2e4>)
 8001484:	f001 fc4e 	bl	8002d24 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <UART_menu+0x2cc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <UART_menu+0x1ac>
 8001494:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <UART_menu+0x2d4>)
 8001496:	e000      	b.n	800149a <UART_menu+0x1ae>
 8001498:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <UART_menu+0x2d8>)
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fc42 	bl	8002d24 <UART_puts>
				  break;
 80014a0:	e07f      	b.n	80015a2 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 80014a2:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <UART_menu+0x2cc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f083 0308 	eor.w	r3, r3, #8
 80014aa:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <UART_menu+0x2cc>)
 80014ac:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 80014ae:	4849      	ldr	r0, [pc, #292]	@ (80015d4 <UART_menu+0x2e8>)
 80014b0:	f001 fc38 	bl	8002d24 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80014b4:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <UART_menu+0x2cc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <UART_menu+0x1d8>
 80014c0:	4b3f      	ldr	r3, [pc, #252]	@ (80015c0 <UART_menu+0x2d4>)
 80014c2:	e000      	b.n	80014c6 <UART_menu+0x1da>
 80014c4:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <UART_menu+0x2d8>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fc2c 	bl	8002d24 <UART_puts>
				  break;
 80014cc:	e069      	b.n	80015a2 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 80014ce:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <UART_menu+0x2cc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f083 0310 	eor.w	r3, r3, #16
 80014d6:	4a38      	ldr	r2, [pc, #224]	@ (80015b8 <UART_menu+0x2cc>)
 80014d8:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 80014da:	483f      	ldr	r0, [pc, #252]	@ (80015d8 <UART_menu+0x2ec>)
 80014dc:	f001 fc22 	bl	8002d24 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <UART_menu+0x2cc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <UART_menu+0x204>
 80014ec:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <UART_menu+0x2d4>)
 80014ee:	e000      	b.n	80014f2 <UART_menu+0x206>
 80014f0:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <UART_menu+0x2d8>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fc16 	bl	8002d24 <UART_puts>
				  break;
 80014f8:	e053      	b.n	80015a2 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3302      	adds	r3, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f00f fb1c 	bl	8010b3c <atoi>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <UART_menu+0x2f0>)
 800150a:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 800150c:	4834      	ldr	r0, [pc, #208]	@ (80015e0 <UART_menu+0x2f4>)
 800150e:	f001 fc09 	bl	8002d24 <UART_puts>
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <UART_menu+0x2f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fc20 	bl	8002d5c <UART_putint>
				  break;
 800151c:	e041      	b.n	80015a2 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 800151e:	f000 f8c1 	bl	80016a4 <DisplayMenu>
				  break;
 8001522:	e03e      	b.n	80015a2 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8001524:	f000 fa28 	bl	8001978 <DisplayTaskData>
				  break;
 8001528:	e03b      	b.n	80015a2 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 800152a:	69f9      	ldr	r1, [r7, #28]
 800152c:	69b8      	ldr	r0, [r7, #24]
 800152e:	f011 f86d 	bl	801260c <strtok>
 8001532:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001534:	69f9      	ldr	r1, [r7, #28]
 8001536:	2000      	movs	r0, #0
 8001538:	f011 f868 	bl	801260c <strtok>
 800153c:	61b8      	str	r0, [r7, #24]
 800153e:	69b8      	ldr	r0, [r7, #24]
 8001540:	f00f fafc 	bl	8010b3c <atoi>
 8001544:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 8001546:	69f9      	ldr	r1, [r7, #28]
 8001548:	2000      	movs	r0, #0
 800154a:	f011 f85f 	bl	801260c <strtok>
 800154e:	61b8      	str	r0, [r7, #24]
 8001550:	69b8      	ldr	r0, [r7, #24]
 8001552:	f00f faf3 	bl	8010b3c <atoi>
 8001556:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01e      	beq.n	800159c <UART_menu+0x2b0>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01b      	beq.n	800159c <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	6938      	ldr	r0, [r7, #16]
 8001568:	f000 f982 	bl	8001870 <SetTaskPriority>
				  break;
 800156c:	e016      	b.n	800159c <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 800156e:	69f9      	ldr	r1, [r7, #28]
 8001570:	69b8      	ldr	r0, [r7, #24]
 8001572:	f011 f84b 	bl	801260c <strtok>
 8001576:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001578:	69f9      	ldr	r1, [r7, #28]
 800157a:	2000      	movs	r0, #0
 800157c:	f011 f846 	bl	801260c <strtok>
 8001580:	61b8      	str	r0, [r7, #24]
 8001582:	69b8      	ldr	r0, [r7, #24]
 8001584:	f00f fada 	bl	8010b3c <atoi>
 8001588:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8001590:	6938      	ldr	r0, [r7, #16]
 8001592:	f000 f9a9 	bl	80018e8 <StartStopTask>
				  break;
 8001596:	e003      	b.n	80015a0 <UART_menu+0x2b4>
				  break;
 8001598:	bf00      	nop
 800159a:	e6b3      	b.n	8001304 <UART_menu+0x18>
				  break;
 800159c:	bf00      	nop
 800159e:	e6b1      	b.n	8001304 <UART_menu+0x18>
				  break;
 80015a0:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80015a2:	e6af      	b.n	8001304 <UART_menu+0x18>
 80015a4:	080151a4 	.word	0x080151a4
 80015a8:	08015a48 	.word	0x08015a48
 80015ac:	080151a8 	.word	0x080151a8
 80015b0:	08015b30 	.word	0x08015b30
 80015b4:	080151b4 	.word	0x080151b4
 80015b8:	2000058c 	.word	0x2000058c
 80015bc:	080151c8 	.word	0x080151c8
 80015c0:	080151e0 	.word	0x080151e0
 80015c4:	080151e8 	.word	0x080151e8
 80015c8:	080151f0 	.word	0x080151f0
 80015cc:	08015204 	.word	0x08015204
 80015d0:	08015218 	.word	0x08015218
 80015d4:	0801522c 	.word	0x0801522c
 80015d8:	08015240 	.word	0x08015240
 80015dc:	20000218 	.word	0x20000218
 80015e0:	08015250 	.word	0x08015250

080015e4 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09c      	sub	sp, #112	@ 0x70
 80015e8:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <DisplayVersion+0x98>)
 80015ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (tasks.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 80015ee:	f001 f97f 	bl	80028f0 <LCD_clear>
	LCD_puts(app_nameLCD);
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <DisplayVersion+0x9c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 faa0 	bl	8002b3c <LCD_puts>

	UART_puts(app_name);
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <DisplayVersion+0xa0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fb8f 	bl	8002d24 <UART_puts>
	UART_puts(functionality);
 8001606:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001608:	f001 fb8c 	bl	8002d24 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 800160c:	f107 0108 	add.w	r1, r7, #8
 8001610:	463b      	mov	r3, r7
 8001612:	2264      	movs	r2, #100	@ 0x64
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fd27 	bl	800c068 <osKernelGetInfo>
	UART_puts("\t-----");
 800161a:	481b      	ldr	r0, [pc, #108]	@ (8001688 <DisplayVersion+0xa4>)
 800161c:	f001 fb82 	bl	8002d24 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8001620:	481a      	ldr	r0, [pc, #104]	@ (800168c <DisplayVersion+0xa8>)
 8001622:	f001 fb7f 	bl	8002d24 <UART_puts>
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fb7a 	bl	8002d24 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001630:	4817      	ldr	r0, [pc, #92]	@ (8001690 <DisplayVersion+0xac>)
 8001632:	f001 fb77 	bl	8002d24 <UART_puts>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fb8f 	bl	8002d5c <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 800163e:	4815      	ldr	r0, [pc, #84]	@ (8001694 <DisplayVersion+0xb0>)
 8001640:	f001 fb70 	bl	8002d24 <UART_puts>
 8001644:	f00a fd68 	bl	800c118 <osKernelGetSysTimerFreq>
 8001648:	4603      	mov	r3, r0
 800164a:	4a13      	ldr	r2, [pc, #76]	@ (8001698 <DisplayVersion+0xb4>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fb82 	bl	8002d5c <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8001658:	4810      	ldr	r0, [pc, #64]	@ (800169c <DisplayVersion+0xb8>)
 800165a:	f001 fb63 	bl	8002d24 <UART_puts>
 800165e:	f00a fd51 	bl	800c104 <osKernelGetTickFreq>
 8001662:	4603      	mov	r3, r0
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fb79 	bl	8002d5c <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800166a:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <DisplayVersion+0xbc>)
 800166c:	f001 fb5a 	bl	8002d24 <UART_puts>

    DisplayMenu();
 8001670:	f000 f818 	bl	80016a4 <DisplayMenu>
}
 8001674:	bf00      	nop
 8001676:	3770      	adds	r7, #112	@ 0x70
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	08015324 	.word	0x08015324
 8001680:	20000004 	.word	0x20000004
 8001684:	20000000 	.word	0x20000000
 8001688:	08015494 	.word	0x08015494
 800168c:	0801549c 	.word	0x0801549c
 8001690:	080154a0 	.word	0x080154a0
 8001694:	080154b0 	.word	0x080154b0
 8001698:	431bde83 	.word	0x431bde83
 800169c:	080154cc 	.word	0x080154cc
 80016a0:	080154e4 	.word	0x080154e4

080016a4 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	char *menu =
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <DisplayMenu+0x18>)
 80016ac:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. p,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 fb38 	bl	8002d24 <UART_puts>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	080154f0 	.word	0x080154f0

080016c0 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fa37 	bl	8002b3c <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f001 fb28 	bl	8002d24 <UART_puts>
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <error_HaltOS+0x2c>)
 80016d6:	f001 fb25 	bl	8002d24 <UART_puts>

	BUZZER_put(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016de:	f000 ffc5 	bl	800266c <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 80016e2:	f00c fd9f 	bl	800e224 <vTaskSuspendAll>

	while (TRUE)
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <error_HaltOS+0x26>
 80016ea:	bf00      	nop
 80016ec:	08015730 	.word	0x08015730

080016f0 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 80016f6:	2001      	movs	r0, #1
 80016f8:	f00b fafb 	bl	800ccf2 <xQueueCreateMutex>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a30      	ldr	r2, [pc, #192]	@ (80017c0 <CreateHandles+0xd0>)
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <CreateHandles+0xd0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 800170a:	482e      	ldr	r0, [pc, #184]	@ (80017c4 <CreateHandles+0xd4>)
 800170c:	f7ff ffd8 	bl	80016c0 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8001710:	2200      	movs	r2, #0
 8001712:	2104      	movs	r1, #4
 8001714:	200a      	movs	r0, #10
 8001716:	f00b fa74 	bl	800cc02 <xQueueGenericCreate>
 800171a:	4603      	mov	r3, r0
 800171c:	4a2a      	ldr	r2, [pc, #168]	@ (80017c8 <CreateHandles+0xd8>)
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <CreateHandles+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 8001728:	4828      	ldr	r0, [pc, #160]	@ (80017cc <CreateHandles+0xdc>)
 800172a:	f7ff ffc9 	bl	80016c0 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 800172e:	2200      	movs	r2, #0
 8001730:	2101      	movs	r1, #1
 8001732:	2053      	movs	r0, #83	@ 0x53
 8001734:	f00b fa65 	bl	800cc02 <xQueueGenericCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <CreateHandles+0xe0>)
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <CreateHandles+0xe0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 8001746:	4823      	ldr	r0, [pc, #140]	@ (80017d4 <CreateHandles+0xe4>)
 8001748:	f7ff ffba 	bl	80016c0 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 800174c:	f00a ff02 	bl	800c554 <xEventGroupCreate>
 8001750:	4603      	mov	r3, r0
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <CreateHandles+0xe8>)
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <CreateHandles+0xe8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 800175e:	481f      	ldr	r0, [pc, #124]	@ (80017dc <CreateHandles+0xec>)
 8001760:	f7ff ffae 	bl	80016c0 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <CreateHandles+0xf0>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001770:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <CreateHandles+0xf4>)
 8001772:	f00d ff11 	bl	800f598 <xTimerCreate>
 8001776:	4603      	mov	r3, r0
 8001778:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <CreateHandles+0xf8>)
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <CreateHandles+0xf8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001784:	4819      	ldr	r0, [pc, #100]	@ (80017ec <CreateHandles+0xfc>)
 8001786:	f7ff ff9b 	bl	80016c0 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 800178a:	4819      	ldr	r0, [pc, #100]	@ (80017f0 <CreateHandles+0x100>)
 800178c:	f001 faca 	bl	8002d24 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8001790:	4818      	ldr	r0, [pc, #96]	@ (80017f4 <CreateHandles+0x104>)
 8001792:	f001 fac7 	bl	8002d24 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8001796:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800179a:	f001 fadf 	bl	8002d5c <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <CreateHandles+0xf8>)
 80017a0:	681c      	ldr	r4, [r3, #0]
 80017a2:	f00c fdeb 	bl	800e37c <xTaskGetTickCount>
 80017a6:	4602      	mov	r2, r0
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	4620      	mov	r0, r4
 80017b2:	f00d ff4f 	bl	800f654 <xTimerGenericCommand>
}
 80017b6:	bf00      	nop
 80017b8:	3704      	adds	r7, #4
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000598 	.word	0x20000598
 80017c4:	08015748 	.word	0x08015748
 80017c8:	20000590 	.word	0x20000590
 80017cc:	08015758 	.word	0x08015758
 80017d0:	20000594 	.word	0x20000594
 80017d4:	08015768 	.word	0x08015768
 80017d8:	2000059c 	.word	0x2000059c
 80017dc:	08015778 	.word	0x08015778
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	0801578c 	.word	0x0801578c
 80017e8:	200005a0 	.word	0x200005a0
 80017ec:	08015794 	.word	0x08015794
 80017f0:	080157a4 	.word	0x080157a4
 80017f4:	080157c8 	.word	0x080157c8

080017f8 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 80017fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <Timer1_Handler+0x14>)
 8001802:	f002 fdc6 	bl	8004392 <HAL_GPIO_TogglePin>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020c00 	.word	0x40020c00

08001810 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <CreateTasks+0x58>)
 8001818:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800181a:	f00c fd03 	bl	800e224 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800181e:	e016      	b.n	800184e <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001820:	4812      	ldr	r0, [pc, #72]	@ (800186c <CreateTasks+0x5c>)
 8001822:	f001 fa7f 	bl	8002d24 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fa7a 	bl	8002d24 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3308      	adds	r3, #8
 800183c:	461a      	mov	r2, r3
 800183e:	f00a fc77 	bl	800c130 <osThreadNew>
 8001842:	4602      	mov	r2, r0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3330      	adds	r3, #48	@ 0x30
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e4      	bne.n	8001820 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 8001856:	f00c fcf3 	bl	800e240 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800185a:	f000 f88d 	bl	8001978 <DisplayTaskData>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008
 800186c:	080157dc 	.word	0x080157dc

08001870 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <SetTaskPriority+0x6c>)
 800187c:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 800187e:	2301      	movs	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	e023      	b.n	80018cc <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	d119      	bne.n	80018c0 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f00c faac 	bl	800ddf8 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 80018a0:	480f      	ldr	r0, [pc, #60]	@ (80018e0 <SetTaskPriority+0x70>)
 80018a2:	f001 fa3f 	bl	8002d24 <UART_puts>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fa3a 	bl	8002d24 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <SetTaskPriority+0x74>)
 80018b2:	f001 fa37 	bl	8002d24 <UART_puts>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fa4f 	bl	8002d5c <UART_putint>
			return;
 80018be:	e009      	b.n	80018d4 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3330      	adds	r3, #48	@ 0x30
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1d7      	bne.n	8001884 <SetTaskPriority+0x14>
		}
}
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	080157e8 	.word	0x080157e8
 80018e4:	080157f4 	.word	0x080157f4

080018e8 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	@ 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <StartStopTask+0x80>)
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80018f4:	2301      	movs	r3, #1
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f8:	e02e      	b.n	8001958 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018fe:	429a      	cmp	r2, r3
 8001900:	d124      	bne.n	800194c <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001904:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001906:	f107 010c 	add.w	r1, r7, #12
 800190a:	2305      	movs	r3, #5
 800190c:	2201      	movs	r2, #1
 800190e:	f00d f99d 	bl	800ec4c <vTaskGetInfo>
			UART_puts("\r\n");
 8001912:	4816      	ldr	r0, [pc, #88]	@ (800196c <StartStopTask+0x84>)
 8001914:	f001 fa06 	bl	8002d24 <UART_puts>
			UART_puts(ptd->attr.name);
 8001918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fa01 	bl	8002d24 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d108      	bne.n	800193a <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8001928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192c:	4618      	mov	r0, r3
 800192e:	f00c fba9 	bl	800e084 <vTaskResume>
				UART_puts(" resumed.");
 8001932:	480f      	ldr	r0, [pc, #60]	@ (8001970 <StartStopTask+0x88>)
 8001934:	f001 f9f6 	bl	8002d24 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8001938:	e012      	b.n	8001960 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 800193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	4618      	mov	r0, r3
 8001940:	f00c faf8 	bl	800df34 <vTaskSuspend>
				UART_puts(" suspended.");
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <StartStopTask+0x8c>)
 8001946:	f001 f9ed 	bl	8002d24 <UART_puts>
 800194a:	e009      	b.n	8001960 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 800194c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194e:	3330      	adds	r3, #48	@ 0x30
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
 8001952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001954:	3301      	adds	r3, #1
 8001956:	633b      	str	r3, [r7, #48]	@ 0x30
 8001958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1cc      	bne.n	80018fa <StartStopTask+0x12>
		}
}
 8001960:	3738      	adds	r7, #56	@ 0x38
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	08015808 	.word	0x08015808
 8001970:	0801580c 	.word	0x0801580c
 8001974:	08015818 	.word	0x08015818

08001978 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	@ 0x38
 800197c:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <DisplayTaskData+0xcc>)
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  freespace;
	TaskStatus_t xTaskDetails;
	unsigned int used;
	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001982:	2301      	movs	r3, #1
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
 8001986:	e052      	b.n	8001a2e <DisplayTaskData+0xb6>
	{
		freespace = uxTaskGetStackHighWaterMark(ptd->hTask) * 4; 	// amount of free bytes
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	4618      	mov	r0, r3
 800198e:	f00d f9df 	bl	800ed50 <uxTaskGetStackHighWaterMark>
 8001992:	4603      	mov	r3, r0
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
		used = 100 - (freespace * 100) / ptd->attr.stack_size; 		// in percentage
 8001998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199a:	2264      	movs	r2, #100	@ 0x64
 800199c:	fb03 f202 	mul.w	r2, r3, r2
 80019a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80019ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80019b2:	1d39      	adds	r1, r7, #4
 80019b4:	2305      	movs	r3, #5
 80019b6:	2201      	movs	r2, #1
 80019b8:	f00d f948 	bl	800ec4c <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 80019bc:	4822      	ldr	r0, [pc, #136]	@ (8001a48 <DisplayTaskData+0xd0>)
 80019be:	f001 f9b1 	bl	8002d24 <UART_puts>
 80019c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019c4:	f001 f9ca 	bl	8002d5c <UART_putint>
 80019c8:	4820      	ldr	r0, [pc, #128]	@ (8001a4c <DisplayTaskData+0xd4>)
 80019ca:	f001 f9ab 	bl	8002d24 <UART_puts>
		UART_puts(ptd->attr.name);
 80019ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 f9a6 	bl	8002d24 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 80019d8:	481d      	ldr	r0, [pc, #116]	@ (8001a50 <DisplayTaskData+0xd8>)
 80019da:	f001 f9a3 	bl	8002d24 <UART_puts>
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f9ba 	bl	8002d5c <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size);
 80019e8:	481a      	ldr	r0, [pc, #104]	@ (8001a54 <DisplayTaskData+0xdc>)
 80019ea:	f001 f99b 	bl	8002d24 <UART_puts>
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f9b2 	bl	8002d5c <UART_putint>
		UART_puts("\t used: ");      UART_putint(used); UART_puts("%");
 80019f8:	4817      	ldr	r0, [pc, #92]	@ (8001a58 <DisplayTaskData+0xe0>)
 80019fa:	f001 f993 	bl	8002d24 <UART_puts>
 80019fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a00:	f001 f9ac 	bl	8002d5c <UART_putint>
 8001a04:	4815      	ldr	r0, [pc, #84]	@ (8001a5c <DisplayTaskData+0xe4>)
 8001a06:	f001 f98d 	bl	8002d24 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <DisplayTaskData+0xe8>)
 8001a0c:	f001 f98a 	bl	8002d24 <UART_puts>
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d101      	bne.n	8001a1a <DisplayTaskData+0xa2>
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <DisplayTaskData+0xec>)
 8001a18:	e000      	b.n	8001a1c <DisplayTaskData+0xa4>
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <DisplayTaskData+0xf0>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 f981 	bl	8002d24 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a24:	3330      	adds	r3, #48	@ 0x30
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1a8      	bne.n	8001988 <DisplayTaskData+0x10>
	}
	UART_puts("\r\n");
 8001a36:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <DisplayTaskData+0xf4>)
 8001a38:	f001 f974 	bl	8002d24 <UART_puts>
}
 8001a3c:	bf00      	nop
 8001a3e:	3738      	adds	r7, #56	@ 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000008 	.word	0x20000008
 8001a48:	08015824 	.word	0x08015824
 8001a4c:	0801582c 	.word	0x0801582c
 8001a50:	08015830 	.word	0x08015830
 8001a54:	08015840 	.word	0x08015840
 8001a58:	08015850 	.word	0x08015850
 8001a5c:	0801585c 	.word	0x0801585c
 8001a60:	08015860 	.word	0x08015860
 8001a64:	0801586c 	.word	0x0801586c
 8001a68:	08015878 	.word	0x08015878
 8001a6c:	08015808 	.word	0x08015808

08001a70 <gps_get_GNRMC>:

GNRMC gnrmc; // global struct for GNRMC-messages
SemaphoreHandle_t gps_access_semaphore;

void gps_get_GNRMC(GNRMC *latestgnrmc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <gps_get_GNRMC+0x3c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00b fbd1 	bl	800d228 <xQueueSemaphoreTake>

	memcpy(latestgnrmc, &gnrmc, sizeof(GNRMC));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <gps_get_GNRMC+0x40>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	2347      	movs	r3, #71	@ 0x47
 8001a90:	461a      	mov	r2, r3
 8001a92:	f010 fefc 	bl	801288e <memcpy>

	xSemaphoreGive(gps_access_semaphore);
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <gps_get_GNRMC+0x3c>)
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f00b f940 	bl	800cd24 <xQueueGenericSend>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200005ec 	.word	0x200005ec
 8001ab0:	200005a4 	.word	0x200005a4

08001ab4 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 8001abc:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <fill_GNRMC+0x11c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00b fbaf 	bl	800d228 <xQueueSemaphoreTake>
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 8001aca:	4b42      	ldr	r3, [pc, #264]	@ (8001bd4 <fill_GNRMC+0x120>)
 8001acc:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001ace:	2247      	movs	r2, #71	@ 0x47
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4841      	ldr	r0, [pc, #260]	@ (8001bd8 <fill_GNRMC+0x124>)
 8001ad4:	f010 fd72 	bl	80125bc <memset>

	s = strtok(message, tok); // 0. header;
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f010 fd96 	bl	801260c <strtok>
 8001ae0:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	483c      	ldr	r0, [pc, #240]	@ (8001bd8 <fill_GNRMC+0x124>)
 8001ae6:	f010 feca 	bl	801287e <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	2000      	movs	r0, #0
 8001aee:	f010 fd8d 	bl	801260c <strtok>
 8001af2:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	2000      	movs	r0, #0
 8001af8:	f010 fd88 	bl	801260c <strtok>
 8001afc:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <fill_GNRMC+0x124>)
 8001b04:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f010 fd7f 	bl	801260c <strtok>
 8001b0e:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	4832      	ldr	r0, [pc, #200]	@ (8001bdc <fill_GNRMC+0x128>)
 8001b14:	f010 feb3 	bl	801287e <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f010 fd76 	bl	801260c <strtok>
 8001b20:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	2000      	movs	r0, #0
 8001b26:	f010 fd71 	bl	801260c <strtok>
 8001b2a:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	482c      	ldr	r0, [pc, #176]	@ (8001be0 <fill_GNRMC+0x12c>)
 8001b30:	f010 fea5 	bl	801287e <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	2000      	movs	r0, #0
 8001b38:	f010 fd68 	bl	801260c <strtok>
 8001b3c:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	2000      	movs	r0, #0
 8001b42:	f010 fd63 	bl	801260c <strtok>
 8001b46:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	4826      	ldr	r0, [pc, #152]	@ (8001be4 <fill_GNRMC+0x130>)
 8001b4c:	f010 fe97 	bl	801287e <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	2000      	movs	r0, #0
 8001b54:	f010 fd5a 	bl	801260c <strtok>
 8001b58:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4822      	ldr	r0, [pc, #136]	@ (8001be8 <fill_GNRMC+0x134>)
 8001b5e:	f010 fe8e 	bl	801287e <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <fill_GNRMC+0x138>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d025      	beq.n	8001bba <fill_GNRMC+0x106>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001b6e:	4820      	ldr	r0, [pc, #128]	@ (8001bf0 <fill_GNRMC+0x13c>)
 8001b70:	f001 f8d8 	bl	8002d24 <UART_puts>
 8001b74:	4818      	ldr	r0, [pc, #96]	@ (8001bd8 <fill_GNRMC+0x124>)
 8001b76:	f001 f8d5 	bl	8002d24 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001b7a:	481e      	ldr	r0, [pc, #120]	@ (8001bf4 <fill_GNRMC+0x140>)
 8001b7c:	f001 f8d2 	bl	8002d24 <UART_puts>
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <fill_GNRMC+0x124>)
 8001b82:	7c5b      	ldrb	r3, [r3, #17]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f8bb 	bl	8002d00 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001b8a:	481b      	ldr	r0, [pc, #108]	@ (8001bf8 <fill_GNRMC+0x144>)
 8001b8c:	f001 f8ca 	bl	8002d24 <UART_puts>
 8001b90:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <fill_GNRMC+0x128>)
 8001b92:	f001 f8c7 	bl	8002d24 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001b96:	4819      	ldr	r0, [pc, #100]	@ (8001bfc <fill_GNRMC+0x148>)
 8001b98:	f001 f8c4 	bl	8002d24 <UART_puts>
 8001b9c:	4810      	ldr	r0, [pc, #64]	@ (8001be0 <fill_GNRMC+0x12c>)
 8001b9e:	f001 f8c1 	bl	8002d24 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001ba2:	4817      	ldr	r0, [pc, #92]	@ (8001c00 <fill_GNRMC+0x14c>)
 8001ba4:	f001 f8be 	bl	8002d24 <UART_puts>
 8001ba8:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <fill_GNRMC+0x130>)
 8001baa:	f001 f8bb 	bl	8002d24 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001bae:	4815      	ldr	r0, [pc, #84]	@ (8001c04 <fill_GNRMC+0x150>)
 8001bb0:	f001 f8b8 	bl	8002d24 <UART_puts>
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <fill_GNRMC+0x134>)
 8001bb6:	f001 f8b5 	bl	8002d24 <UART_puts>
	}

	xSemaphoreGive(gps_access_semaphore);
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <fill_GNRMC+0x11c>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f00b f8ae 	bl	800cd24 <xQueueGenericSend>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200005ec 	.word	0x200005ec
 8001bd4:	08015880 	.word	0x08015880
 8001bd8:	200005a4 	.word	0x200005a4
 8001bdc:	200005b6 	.word	0x200005b6
 8001be0:	200005c1 	.word	0x200005c1
 8001be4:	200005cc 	.word	0x200005cc
 8001be8:	200005d2 	.word	0x200005d2
 8001bec:	2000058c 	.word	0x2000058c
 8001bf0:	08015884 	.word	0x08015884
 8001bf4:	08015894 	.word	0x08015894
 8001bf8:	080158a4 	.word	0x080158a4
 8001bfc:	080158b4 	.word	0x080158b4
 8001c00:	080158c4 	.word	0x080158c4
 8001c04:	080158d4 	.word	0x080158d4

08001c08 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0b0      	sub	sp, #192	@ 0xc0
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	gps_access_semaphore=xSemaphoreCreateMutex();
 8001c10:	2001      	movs	r0, #1
 8001c12:	f00b f86e 	bl	800ccf2 <xQueueCreateMutex>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a67      	ldr	r2, [pc, #412]	@ (8001db8 <GPS_getNMEA+0x1b0>)
 8001c1a:	6013      	str	r3, [r2, #0]

    char  Q_buff[GPS_MAXLEN];   // buffer for chars in queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001c2e:	4863      	ldr	r0, [pc, #396]	@ (8001dbc <GPS_getNMEA+0x1b4>)
 8001c30:	f001 f878 	bl	8002d24 <UART_puts>
 8001c34:	4862      	ldr	r0, [pc, #392]	@ (8001dc0 <GPS_getNMEA+0x1b8>)
 8001c36:	f001 f875 	bl	8002d24 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001c3a:	4b62      	ldr	r3, [pc, #392]	@ (8001dc4 <GPS_getNMEA+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00b fa0c 	bl	800d064 <xQueueReceive>

		//UART_putchar(*Q_buff);  // echo, for testing

		if (*Q_buff == '$') // gotcha, new datastring started
 8001c4c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001c50:	2b24      	cmp	r3, #36	@ 0x24
 8001c52:	d10c      	bne.n	8001c6e <GPS_getNMEA+0x66>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2253      	movs	r2, #83	@ 0x53
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f010 fcad 	bl	80125bc <memset>
			pos = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			new_msg = TRUE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 809d 	beq.w	8001db2 <GPS_getNMEA+0x1aa>
			continue;

		MSG_buff[pos] = *Q_buff; // copy char read from Q into the msg-buf
 8001c78:	f897 105c 	ldrb.w	r1, [r7, #92]	@ 0x5c
 8001c7c:	f107 0208 	add.w	r2, r7, #8
 8001c80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c84:	4413      	add	r3, r2
 8001c86:	460a      	mov	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001c8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d136      	bne.n	8001d00 <GPS_getNMEA+0xf8>
		{
			msg_type = 0; // reset
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	4949      	ldr	r1, [pc, #292]	@ (8001dc8 <GPS_getNMEA+0x1c0>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f010 fc9f 	bl	80125e6 <strncmp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <GPS_getNMEA+0xae>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cb4:	e01c      	b.n	8001cf0 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	3301      	adds	r3, #1
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	4943      	ldr	r1, [pc, #268]	@ (8001dcc <GPS_getNMEA+0x1c4>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f010 fc90 	bl	80125e6 <strncmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <GPS_getNMEA+0xcc>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cd2:	e00d      	b.n	8001cf0 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	3301      	adds	r3, #1
 8001cda:	2205      	movs	r2, #5
 8001cdc:	493c      	ldr	r1, [pc, #240]	@ (8001dd0 <GPS_getNMEA+0x1c8>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f010 fc81 	bl	80125e6 <strncmp>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <GPS_getNMEA+0xe8>
 8001cea:	2303      	movs	r3, #3
 8001cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			if (!msg_type) // not an interesting message type
 8001cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <GPS_getNMEA+0xf8>
			{
				new_msg = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				continue;
 8001cfe:	e059      	b.n	8001db4 <GPS_getNMEA+0x1ac>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d04:	2b51      	cmp	r3, #81	@ 0x51
 8001d06:	dd03      	ble.n	8001d10 <GPS_getNMEA+0x108>
		{
			new_msg = FALSE; // ignore it
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001d0e:	e051      	b.n	8001db4 <GPS_getNMEA+0x1ac>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001d10:	f107 0208 	add.w	r2, r7, #8
 8001d14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b0d      	cmp	r3, #13
 8001d1e:	d142      	bne.n	8001da6 <GPS_getNMEA+0x19e>
		{
			MSG_buff[pos] = '\0';          // close string
 8001d20:	f107 0208 	add.w	r2, r7, #8
 8001d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d28:	4413      	add	r3, r2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f89a 	bl	8001e6c <checksum_valid>
 8001d38:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <GPS_getNMEA+0x1cc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d011      	beq.n	8001d6c <GPS_getNMEA+0x164>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001d48:	4823      	ldr	r0, [pc, #140]	@ (8001dd8 <GPS_getNMEA+0x1d0>)
 8001d4a:	f000 ffeb 	bl	8002d24 <UART_puts>
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 ffe6 	bl	8002d24 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001d58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <GPS_getNMEA+0x15c>
 8001d60:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <GPS_getNMEA+0x1d4>)
 8001d62:	e000      	b.n	8001d66 <GPS_getNMEA+0x15e>
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <GPS_getNMEA+0x1d8>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 ffdc 	bl	8002d24 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d014      	beq.n	8001d9e <GPS_getNMEA+0x196>
			{
				switch(msg_type) // extract data from msg into right struct
 8001d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d009      	beq.n	8001d90 <GPS_getNMEA+0x188>
 8001d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dd0b      	ble.n	8001d9c <GPS_getNMEA+0x194>
 8001d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d88:	3b02      	subs	r3, #2
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d806      	bhi.n	8001d9c <GPS_getNMEA+0x194>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001d8e:	e006      	b.n	8001d9e <GPS_getNMEA+0x196>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fe8d 	bl	8001ab4 <fill_GNRMC>
						     break;
 8001d9a:	e000      	b.n	8001d9e <GPS_getNMEA+0x196>
				default:     break;
 8001d9c:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001da4:	e006      	b.n	8001db4 <GPS_getNMEA+0x1ac>
		}
		pos++; // proceed reading next char from the queue
 8001da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001db0:	e743      	b.n	8001c3a <GPS_getNMEA+0x32>
			continue;
 8001db2:	bf00      	nop
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001db4:	e741      	b.n	8001c3a <GPS_getNMEA+0x32>
 8001db6:	bf00      	nop
 8001db8:	200005ec 	.word	0x200005ec
 8001dbc:	08015a54 	.word	0x08015a54
 8001dc0:	080158e4 	.word	0x080158e4
 8001dc4:	20000594 	.word	0x20000594
 8001dc8:	080158f0 	.word	0x080158f0
 8001dcc:	080158f8 	.word	0x080158f8
 8001dd0:	08015900 	.word	0x08015900
 8001dd4:	2000058c 	.word	0x2000058c
 8001dd8:	08015908 	.word	0x08015908
 8001ddc:	08015918 	.word	0x08015918
 8001de0:	08015924 	.word	0x08015924

08001de4 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f813 	bl	8001e1c <hexchar2int>
 8001df6:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f809 	bl	8001e1c <hexchar2int>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

	return value;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <hexchar2int>:


int hexchar2int(char c)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e2a:	d905      	bls.n	8001e38 <hexchar2int+0x1c>
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b39      	cmp	r3, #57	@ 0x39
 8001e30:	d802      	bhi.n	8001e38 <hexchar2int+0x1c>
        return (c - '0');
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	3b30      	subs	r3, #48	@ 0x30
 8001e36:	e013      	b.n	8001e60 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b40      	cmp	r3, #64	@ 0x40
 8001e3c:	d905      	bls.n	8001e4a <hexchar2int+0x2e>
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b46      	cmp	r3, #70	@ 0x46
 8001e42:	d802      	bhi.n	8001e4a <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	3b37      	subs	r3, #55	@ 0x37
 8001e48:	e00a      	b.n	8001e60 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b60      	cmp	r3, #96	@ 0x60
 8001e4e:	d905      	bls.n	8001e5c <hexchar2int+0x40>
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b66      	cmp	r3, #102	@ 0x66
 8001e54:	d802      	bhi.n	8001e5c <hexchar2int+0x40>
        return (c - 'a' + 10);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	3b57      	subs	r3, #87	@ 0x57
 8001e5a:	e001      	b.n	8001e60 <hexchar2int+0x44>
    return (-1);
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001e78:	212a      	movs	r1, #42	@ 0x2a
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f010 fba6 	bl	80125cc <strchr>
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d022      	beq.n	8001ece <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e009      	b.n	8001ea8 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	4053      	eors	r3, r2
 8001ea0:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe f9e1 	bl	8000270 <strlen>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d8ee      	bhi.n	8001e94 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff92 	bl	8001de4 <hex2int>
 8001ec0:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8001ec2:	7cfb      	ldrb	r3, [r7, #19]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d101      	bne.n	8001ece <checksum_valid+0x62>
			return (1);
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <checksum_valid+0x64>
	}

	return (0);
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <lcdout_init>:
char lcdout_buffer[LCDOUT_BUFFER_SIZE];

/* PUBLIC FUNCTIONS */

void lcdout_init()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	_lcdout_semaphore=xSemaphoreCreateMutex();
 8001edc:	2001      	movs	r0, #1
 8001ede:	f00a ff08 	bl	800ccf2 <xQueueCreateMutex>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a01      	ldr	r2, [pc, #4]	@ (8001eec <lcdout_init+0x14>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200005f0 	.word	0x200005f0

08001ef0 <lcdout_printf>:

void lcdout_printf(char* format, ...)
{
 8001ef0:	b40f      	push	{r0, r1, r2, r3}
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
	LCDOUT_SM_TAKE;
 8001ef8:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <lcdout_printf+0x94>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00b f991 	bl	800d228 <xQueueSemaphoreTake>
	va_list args;
	va_start(args, format);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	603b      	str	r3, [r7, #0]

	/* Convert ... arguments to printf like formatting */
	vsnprintf(lcdout_buffer,LCDOUT_BUFFER_SIZE,format, args);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	481d      	ldr	r0, [pc, #116]	@ (8001f88 <lcdout_printf+0x98>)
 8001f14:	f010 fb44 	bl	80125a0 <vsniprintf>

	/* Clear LCD */
	LCD_clear();
 8001f18:	f000 fcea 	bl	80028f0 <LCD_clear>
	uint8_t line=0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

	/* Print out per character */
	for(size_t i=0;i<LCDOUT_BUFFER_SIZE;i++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	e01a      	b.n	8001f5c <lcdout_printf+0x6c>
	{
		char c = lcdout_buffer[i];
 8001f26:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <lcdout_printf+0x98>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
		if(c=='\0') break;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <lcdout_printf+0x74>
		if(c=='\n')
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	d108      	bne.n	8001f4e <lcdout_printf+0x5e>
		{
			LCD_XY(0, ++line);
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	4619      	mov	r1, r3
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 fce2 	bl	8002910 <LCD_XY>
			continue;
 8001f4c:	e003      	b.n	8001f56 <lcdout_printf+0x66>
		}
		LCD_putchar(c);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fda1 	bl	8002a98 <LCD_putchar>
	for(size_t i=0;i<LCDOUT_BUFFER_SIZE;i++)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f60:	d9e1      	bls.n	8001f26 <lcdout_printf+0x36>
 8001f62:	e000      	b.n	8001f66 <lcdout_printf+0x76>
		if(c=='\0') break;
 8001f64:	bf00      	nop
	}

	va_end(args);
	LCDOUT_SM_GIVE;
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <lcdout_printf+0x94>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f00a fed8 	bl	800cd24 <xQueueGenericSend>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f7e:	b004      	add	sp, #16
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200005f0 	.word	0x200005f0
 8001f88:	200005f4 	.word	0x200005f4

08001f8c <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001f94:	4820      	ldr	r0, [pc, #128]	@ (8002018 <LED_Task1+0x8c>)
 8001f96:	f000 fec5 	bl	8002d24 <UART_puts>
 8001f9a:	4820      	ldr	r0, [pc, #128]	@ (800201c <LED_Task1+0x90>)
 8001f9c:	f000 fec2 	bl	8002d24 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <LED_Task1+0x94>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b f93d 	bl	800d228 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e01c      	b.n	8001ff2 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fe65 	bl	8002c8c <LED_put>
           	osDelay(os_delay);
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <LED_Task1+0x98>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a f944 	bl	800c254 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <LED_Task1+0x9c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8001fd8:	4814      	ldr	r0, [pc, #80]	@ (800202c <LED_Task1+0xa0>)
 8001fda:	f000 fea3 	bl	8002d24 <UART_puts>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 febb 	bl	8002d5c <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	105b      	asrs	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	dddf      	ble.n	8001fb8 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <LED_Task1+0x94>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	f00a fe8f 	bl	800cd24 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <LED_Task1+0xa4>)
 8002008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8002016:	e7c3      	b.n	8001fa0 <LED_Task1+0x14>
 8002018:	08015a60 	.word	0x08015a60
 800201c:	08015930 	.word	0x08015930
 8002020:	20000598 	.word	0x20000598
 8002024:	20000218 	.word	0x20000218
 8002028:	2000058c 	.word	0x2000058c
 800202c:	0801593c 	.word	0x0801593c
 8002030:	e000ed04 	.word	0xe000ed04

08002034 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800203c:	4820      	ldr	r0, [pc, #128]	@ (80020c0 <LED_Task2+0x8c>)
 800203e:	f000 fe71 	bl	8002d24 <UART_puts>
 8002042:	4820      	ldr	r0, [pc, #128]	@ (80020c4 <LED_Task2+0x90>)
 8002044:	f000 fe6e 	bl	8002d24 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <LED_Task2+0x94>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	4618      	mov	r0, r3
 8002052:	f00b f8e9 	bl	800d228 <xQueueSemaphoreTake>
		leds = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e01c      	b.n	800209a <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fe11 	bl	8002c8c <LED_put>
          	osDelay(os_delay);
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <LED_Task2+0x98>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f00a f8f0 	bl	800c254 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <LED_Task2+0x9c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8002080:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <LED_Task2+0xa0>)
 8002082:	f000 fe4f 	bl	8002d24 <UART_puts>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fe67 	bl	8002d5c <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b07      	cmp	r3, #7
 800209e:	dddf      	ble.n	8002060 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <LED_Task2+0x94>)
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	2300      	movs	r3, #0
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	f00a fe3b 	bl	800cd24 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <LED_Task2+0xa4>)
 80020b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80020be:	e7c3      	b.n	8002048 <LED_Task2+0x14>
 80020c0:	08015a6c 	.word	0x08015a6c
 80020c4:	08015930 	.word	0x08015930
 80020c8:	20000598 	.word	0x20000598
 80020cc:	20000218 	.word	0x20000218
 80020d0:	2000058c 	.word	0x2000058c
 80020d4:	08015948 	.word	0x08015948
 80020d8:	e000ed04 	.word	0xe000ed04

080020dc <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 80020e4:	4830      	ldr	r0, [pc, #192]	@ (80021a8 <LED_Task3+0xcc>)
 80020e6:	f00c f9c7 	bl	800e478 <xTaskGetHandle>
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 80020f2:	482e      	ldr	r0, [pc, #184]	@ (80021ac <LED_Task3+0xd0>)
 80020f4:	f7ff fae4 	bl	80016c0 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80020f8:	482d      	ldr	r0, [pc, #180]	@ (80021b0 <LED_Task3+0xd4>)
 80020fa:	f000 fe13 	bl	8002d24 <UART_puts>
 80020fe:	482d      	ldr	r0, [pc, #180]	@ (80021b4 <LED_Task3+0xd8>)
 8002100:	f000 fe10 	bl	8002d24 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <LED_Task3+0xdc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	4618      	mov	r0, r3
 800210e:	f00b f88b 	bl	800d228 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e02d      	b.n	8002174 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <LED_Task3+0x48>
 800211e:	2318      	movs	r3, #24
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e00d      	b.n	8002140 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <LED_Task3+0x54>
 800212a:	2324      	movs	r3, #36	@ 0x24
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e007      	b.n	8002140 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d102      	bne.n	800213c <LED_Task3+0x60>
 8002136:	2342      	movs	r3, #66	@ 0x42
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e001      	b.n	8002140 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 800213c:	2381      	movs	r3, #129	@ 0x81
 800213e:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fda1 	bl	8002c8c <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <LED_Task3+0xe0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f00a f880 	bl	800c254 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <LED_Task3+0xe4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8002160:	4818      	ldr	r0, [pc, #96]	@ (80021c4 <LED_Task3+0xe8>)
 8002162:	f000 fddf 	bl	8002d24 <UART_puts>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fdf7 	bl	8002d5c <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b03      	cmp	r3, #3
 8002178:	ddce      	ble.n	8002118 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <LED_Task3+0xdc>)
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	f00a fdce 	bl	800cd24 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 8002188:	2300      	movs	r3, #0
 800218a:	2202      	movs	r2, #2
 800218c:	2100      	movs	r1, #0
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f00d f8a2 	bl	800f2d8 <xTaskGenericNotify>
		osDelay(200);
 8002194:	20c8      	movs	r0, #200	@ 0xc8
 8002196:	f00a f85d 	bl	800c254 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 800219a:	f04f 31ff 	mov.w	r1, #4294967295
 800219e:	2001      	movs	r0, #1
 80021a0:	f00c ffee 	bl	800f180 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80021a4:	e7ae      	b.n	8002104 <LED_Task3+0x28>
 80021a6:	bf00      	nop
 80021a8:	08015954 	.word	0x08015954
 80021ac:	08015960 	.word	0x08015960
 80021b0:	08015a78 	.word	0x08015a78
 80021b4:	08015930 	.word	0x08015930
 80021b8:	20000598 	.word	0x20000598
 80021bc:	20000218 	.word	0x20000218
 80021c0:	2000058c 	.word	0x2000058c
 80021c4:	0801596c 	.word	0x0801596c

080021c8 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 80021d0:	4830      	ldr	r0, [pc, #192]	@ (8002294 <LED_Task4+0xcc>)
 80021d2:	f00c f951 	bl	800e478 <xTaskGetHandle>
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 80021de:	482e      	ldr	r0, [pc, #184]	@ (8002298 <LED_Task4+0xd0>)
 80021e0:	f7ff fa6e 	bl	80016c0 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80021e4:	482d      	ldr	r0, [pc, #180]	@ (800229c <LED_Task4+0xd4>)
 80021e6:	f000 fd9d 	bl	8002d24 <UART_puts>
 80021ea:	482d      	ldr	r0, [pc, #180]	@ (80022a0 <LED_Task4+0xd8>)
 80021ec:	f000 fd9a 	bl	8002d24 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	2001      	movs	r0, #1
 80021f6:	f00c ffc3 	bl	800f180 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 80021fa:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <LED_Task4+0xdc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002202:	4618      	mov	r0, r3
 8002204:	f00b f810 	bl	800d228 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e02d      	b.n	800226a <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <LED_Task4+0x52>
 8002214:	2381      	movs	r3, #129	@ 0x81
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e00d      	b.n	8002236 <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <LED_Task4+0x5e>
 8002220:	2342      	movs	r3, #66	@ 0x42
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	e007      	b.n	8002236 <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d102      	bne.n	8002232 <LED_Task4+0x6a>
 800222c:	2324      	movs	r3, #36	@ 0x24
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e001      	b.n	8002236 <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8002232:	2318      	movs	r3, #24
 8002234:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fd26 	bl	8002c8c <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <LED_Task4+0xe0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f00a f805 	bl	800c254 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <LED_Task4+0xe4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 8002256:	4816      	ldr	r0, [pc, #88]	@ (80022b0 <LED_Task4+0xe8>)
 8002258:	f000 fd64 	bl	8002d24 <UART_puts>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd7c 	bl	8002d5c <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b03      	cmp	r3, #3
 800226e:	ddce      	ble.n	800220e <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <LED_Task4+0xdc>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	f00a fd53 	bl	800cd24 <xQueueGenericSend>
		osDelay(200);
 800227e:	20c8      	movs	r0, #200	@ 0xc8
 8002280:	f009 ffe8 	bl	800c254 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 8002284:	2300      	movs	r3, #0
 8002286:	2202      	movs	r2, #2
 8002288:	2100      	movs	r1, #0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f00d f824 	bl	800f2d8 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002290:	e7ae      	b.n	80021f0 <LED_Task4+0x28>
 8002292:	bf00      	nop
 8002294:	0801597c 	.word	0x0801597c
 8002298:	08015988 	.word	0x08015988
 800229c:	08015a84 	.word	0x08015a84
 80022a0:	08015930 	.word	0x08015930
 80022a4:	20000598 	.word	0x20000598
 80022a8:	20000218 	.word	0x20000218
 80022ac:	2000058c 	.word	0x2000058c
 80022b0:	08015994 	.word	0x08015994

080022b4 <test_gps_coords>:




void test_gps_coords()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b098      	sub	sp, #96	@ 0x60
 80022b8:	af02      	add	r7, sp, #8
	static char last_status='\0';
	GNRMC latestgnrmc;
	gps_get_GNRMC(&latestgnrmc);
 80022ba:	463b      	mov	r3, r7
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fbd7 	bl	8001a70 <gps_get_GNRMC>

	if(latestgnrmc.status!='A')
 80022c2:	7c7b      	ldrb	r3, [r7, #17]
 80022c4:	2b41      	cmp	r3, #65	@ 0x41
 80022c6:	d00c      	beq.n	80022e2 <test_gps_coords+0x2e>
	{
		if(latestgnrmc.status!=last_status)
 80022c8:	7c7a      	ldrb	r2, [r7, #17]
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <test_gps_coords+0x90>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d003      	beq.n	80022da <test_gps_coords+0x26>
			lcdout_printf("NO GPS LOCK %d", 12);
 80022d2:	210c      	movs	r1, #12
 80022d4:	481c      	ldr	r0, [pc, #112]	@ (8002348 <test_gps_coords+0x94>)
 80022d6:	f7ff fe0b 	bl	8001ef0 <lcdout_printf>
		last_status=latestgnrmc.status;
 80022da:	7c7a      	ldrb	r2, [r7, #17]
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <test_gps_coords+0x90>)
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e02d      	b.n	800233e <test_gps_coords+0x8a>
		return;
	}
	last_status=latestgnrmc.status;
 80022e2:	7c7a      	ldrb	r2, [r7, #17]
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <test_gps_coords+0x90>)
 80022e6:	701a      	strb	r2, [r3, #0]

	BUZZER_put(1000);
 80022e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ec:	f000 f9be 	bl	800266c <BUZZER_put>
	double x, y;
	x = lonDMtoM(&latestgnrmc)/60.0;
 80022f0:	463b      	mov	r3, r7
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f87a 	bl	80023ec <lonDMtoM>
 80022f8:	ec51 0b10 	vmov	r0, r1, d0
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <test_gps_coords+0x98>)
 8002302:	f7fe faa3 	bl	800084c <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	y = latDMtoM(&latestgnrmc)/60.0;
 800230e:	463b      	mov	r3, r7
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f8db 	bl	80024cc <latDMtoM>
 8002316:	ec51 0b10 	vmov	r0, r1, d0
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <test_gps_coords+0x98>)
 8002320:	f7fe fa94 	bl	800084c <__aeabi_ddiv>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	lcdout_printf("X: %f\nY: %f\n", x, y);
 800232c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002330:	e9cd 2300 	strd	r2, r3, [sp]
 8002334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002338:	4805      	ldr	r0, [pc, #20]	@ (8002350 <test_gps_coords+0x9c>)
 800233a:	f7ff fdd9 	bl	8001ef0 <lcdout_printf>
}
 800233e:	3758      	adds	r7, #88	@ 0x58
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000068c 	.word	0x2000068c
 8002348:	080159a4 	.word	0x080159a4
 800234c:	404e0000 	.word	0x404e0000
 8002350:	080159b4 	.word	0x080159b4

08002354 <Student_task1>:

void Student_task1 (void *argument)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b098      	sub	sp, #96	@ 0x60
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	student_SemaphoreWaypoints = xSemaphoreCreateMutex();
 800235c:	2001      	movs	r0, #1
 800235e:	f00a fcc8 	bl	800ccf2 <xQueueCreateMutex>
 8002362:	4603      	mov	r3, r0
 8002364:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <Student_task1+0x80>)
 8002366:	6013      	str	r3, [r2, #0]
	lcdout_init();
 8002368:	f7ff fdb6 	bl	8001ed8 <lcdout_init>
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800236c:	481a      	ldr	r0, [pc, #104]	@ (80023d8 <Student_task1+0x84>)
 800236e:	f000 fcd9 	bl	8002d24 <UART_puts>
 8002372:	481a      	ldr	r0, [pc, #104]	@ (80023dc <Student_task1+0x88>)
 8002374:	f000 fcd6 	bl	8002d24 <UART_puts>
	globalVec.x=0;
 8002378:	4919      	ldr	r1, [pc, #100]	@ (80023e0 <Student_task1+0x8c>)
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9c1 2300 	strd	r2, r3, [r1]
	globalVec.y=0;
 8002386:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <Student_task1+0x8c>)
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c1 2302 	strd	r2, r3, [r1, #8]
	char buf[80];
	unsigned int i = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 8002398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800239c:	f009 ff5a 	bl	800c254 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <Student_task1+0x90>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <Student_task1+0x74>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 80023ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80023b2:	f107 000c 	add.w	r0, r7, #12
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <Student_task1+0x84>)
 80023b8:	490b      	ldr	r1, [pc, #44]	@ (80023e8 <Student_task1+0x94>)
 80023ba:	f010 f863 	bl	8012484 <siprintf>
			UART_puts(buf);
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fcae 	bl	8002d24 <UART_puts>
    	}
		test_gps_coords();
 80023c8:	f7ff ff74 	bl	80022b4 <test_gps_coords>
		Setglobalvector();
 80023cc:	f000 f8d8 	bl	8002580 <Setglobalvector>
       	osDelay(1000);
 80023d0:	e7e2      	b.n	8002398 <Student_task1+0x44>
 80023d2:	bf00      	nop
 80023d4:	20000688 	.word	0x20000688
 80023d8:	08015a90 	.word	0x08015a90
 80023dc:	080159c4 	.word	0x080159c4
 80023e0:	20000678 	.word	0x20000678
 80023e4:	2000058c 	.word	0x2000058c
 80023e8:	080159d0 	.word	0x080159d0

080023ec <lonDMtoM>:

	}
}

double lonDMtoM(GNRMC *gnrmc)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	char *lon=gnrmc->longitude;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	331d      	adds	r3, #29
 80023f8:	617b      	str	r3, [r7, #20]
	char lonEW=gnrmc->EW_ind;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002400:	74fb      	strb	r3, [r7, #19]
	double minX=0;
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char* pEnd;
    minX=(*lon-'0')*6000;          //10^2*60
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3b30      	subs	r3, #48	@ 0x30
 8002414:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f881 	bl	8000524 <__aeabi_i2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+1)-'0')*600;      //10^1*60
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	3b30      	subs	r3, #48	@ 0x30
 8002432:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f872 	bl	8000524 <__aeabi_i2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002448:	f7fd ff20 	bl	800028c <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+2)-'0')*60;       //10^0*60
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3302      	adds	r3, #2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f85c 	bl	8000524 <__aeabi_i2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002474:	f7fd ff0a 	bl	800028c <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=strtod(lon+3,&pEnd);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3303      	adds	r3, #3
 8002484:	f107 020c 	add.w	r2, r7, #12
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f00f fa1c 	bl	80118c8 <strtod>
 8002490:	ec53 2b10 	vmov	r2, r3, d0
 8002494:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002498:	f7fd fef8 	bl	800028c <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(lonEW=='W')
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b57      	cmp	r3, #87	@ 0x57
 80024a8:	d105      	bne.n	80024b6 <lonDMtoM+0xca>
    	minX=minX*-1;
 80024aa:	69bc      	ldr	r4, [r7, #24]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80024b2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minX;
 80024b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80024be:	eeb0 0a47 	vmov.f32	s0, s14
 80024c2:	eef0 0a67 	vmov.f32	s1, s15
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}

080024cc <latDMtoM>:

double latDMtoM(GNRMC *gnrmc)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	char *lat=gnrmc->latitude;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3312      	adds	r3, #18
 80024d8:	617b      	str	r3, [r7, #20]
	char latNS=gnrmc->NS_ind;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7f1b      	ldrb	r3, [r3, #28]
 80024de:	74fb      	strb	r3, [r7, #19]
	double minY=0;
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	char* pEnd;
    minY=(*lat-'0')*600;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3b30      	subs	r3, #48	@ 0x30
 80024f2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f812 	bl	8000524 <__aeabi_i2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=(*(lat+1)-'0')*60;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f802 	bl	8000524 <__aeabi_i2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002528:	f7fd feb0 	bl	800028c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=strtod(lat+2,&pEnd);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3302      	adds	r3, #2
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f00f f9c2 	bl	80118c8 <strtod>
 8002544:	ec53 2b10 	vmov	r2, r3, d0
 8002548:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800254c:	f7fd fe9e 	bl	800028c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(latNS=='S')
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b53      	cmp	r3, #83	@ 0x53
 800255c:	d105      	bne.n	800256a <latDMtoM+0x9e>
    	minY=minY*-1;
 800255e:	69bc      	ldr	r4, [r7, #24]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002566:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minY;
 800256a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800256e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002572:	eeb0 0a47 	vmov.f32	s0, s14
 8002576:	eef0 0a67 	vmov.f32	s1, s15
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bdb0      	pop	{r4, r5, r7, pc}

08002580 <Setglobalvector>:
void Setglobalvector()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b096      	sub	sp, #88	@ 0x58
 8002584:	af00      	add	r7, sp, #0
	xSemaphoreTake(student_SemaphoreWaypoints, portMAX_DELAY);
 8002586:	4b1f      	ldr	r3, [pc, #124]	@ (8002604 <Setglobalvector+0x84>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f04f 31ff 	mov.w	r1, #4294967295
 800258e:	4618      	mov	r0, r3
 8002590:	f00a fe4a 	bl	800d228 <xQueueSemaphoreTake>
	GNRMC latestgnrmc;
	gps_get_GNRMC(&latestgnrmc);
 8002594:	463b      	mov	r3, r7
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa6a 	bl	8001a70 <gps_get_GNRMC>
	double x, y;
	x = lonDMtoM(&latestgnrmc)/60.0;
 800259c:	463b      	mov	r3, r7
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff24 	bl	80023ec <lonDMtoM>
 80025a4:	ec51 0b10 	vmov	r0, r1, d0
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <Setglobalvector+0x88>)
 80025ae:	f7fe f94d 	bl	800084c <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	y = latDMtoM(&latestgnrmc)/60.0;
 80025ba:	463b      	mov	r3, r7
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff85 	bl	80024cc <latDMtoM>
 80025c2:	ec51 0b10 	vmov	r0, r1, d0
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <Setglobalvector+0x88>)
 80025cc:	f7fe f93e 	bl	800084c <__aeabi_ddiv>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	globalVec.x= x;
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <Setglobalvector+0x8c>)
 80025da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
	globalVec.y= y;
 80025e2:	490a      	ldr	r1, [pc, #40]	@ (800260c <Setglobalvector+0x8c>)
 80025e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025e8:	e9c1 2302 	strd	r2, r3, [r1, #8]

	xSemaphoreGive(student_SemaphoreWaypoints);
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <Setglobalvector+0x84>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	f00a fb95 	bl	800cd24 <xQueueGenericSend>
}
 80025fa:	bf00      	nop
 80025fc:	3758      	adds	r7, #88	@ 0x58
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000688 	.word	0x20000688
 8002608:	404e0000 	.word	0x404e0000
 800260c:	20000678 	.word	0x20000678

08002610 <Getglobalvector>:

void Getglobalvector(vector2d_t* vec)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(student_SemaphoreWaypoints, portMAX_DELAY);
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <Getglobalvector+0x54>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	4618      	mov	r0, r3
 8002622:	f00a fe01 	bl	800d228 <xQueueSemaphoreTake>
	double x = globalVec.x;
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <Getglobalvector+0x58>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y = globalVec.y;
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <Getglobalvector+0x58>)
 8002632:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002636:	e9c7 2302 	strd	r2, r3, [r7, #8]
	vec->x=x;
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002640:	e9c1 2300 	strd	r2, r3, [r1]
	vec->y=y;
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	xSemaphoreGive(student_SemaphoreWaypoints);
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <Getglobalvector+0x54>)
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	2300      	movs	r3, #0
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	f00a fb64 	bl	800cd24 <xQueueGenericSend>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000688 	.word	0x20000688
 8002668:	20000678 	.word	0x20000678

0800266c <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002678:	e023      	b.n	80026c2 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002680:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <BUZZER_put+0x6c>)
 8002682:	f001 fe6d 	bl	8004360 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e002      	b.n	8002692 <BUZZER_put+0x26>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3301      	adds	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	441a      	add	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	429a      	cmp	r2, r3
 800269c:	d8f6      	bhi.n	800268c <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <BUZZER_put+0x6c>)
 80026a6:	f001 fe5b 	bl	8004360 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e002      	b.n	80026b6 <BUZZER_put+0x4a>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d8f6      	bhi.n	80026b0 <BUZZER_put+0x44>
	while (k++<100)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	60ba      	str	r2, [r7, #8]
 80026c8:	2b63      	cmp	r3, #99	@ 0x63
 80026ca:	d9d6      	bls.n	800267a <BUZZER_put+0xe>
	}
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40020800 	.word	0x40020800

080026dc <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <KEYS_init+0x6c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <KEYS_init+0x6c>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <KEYS_init+0x6c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 800270a:	f640 030e 	movw	r3, #2062	@ 0x80e
 800270e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	480d      	ldr	r0, [pc, #52]	@ (800274c <KEYS_init+0x70>)
 8002716:	f001 fc6f 	bl	8003ff8 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 800271a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800271e:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002724:	2302      	movs	r3, #2
 8002726:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4807      	ldr	r0, [pc, #28]	@ (800274c <KEYS_init+0x70>)
 800272e:	f001 fc63 	bl	8003ff8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002738:	4804      	ldr	r0, [pc, #16]	@ (800274c <KEYS_init+0x70>)
 800273a:	f001 fe11 	bl	8004360 <HAL_GPIO_WritePin>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40020c00 	.word	0x40020c00

08002750 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002762:	480e      	ldr	r0, [pc, #56]	@ (800279c <KEYS_initISR+0x4c>)
 8002764:	f001 fdfc 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	2102      	movs	r1, #2
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <KEYS_initISR+0x4c>)
 8002772:	f001 fdf5 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	2108      	movs	r1, #8
 800277e:	4807      	ldr	r0, [pc, #28]	@ (800279c <KEYS_initISR+0x4c>)
 8002780:	f001 fdee 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	2104      	movs	r1, #4
 800278c:	4803      	ldr	r0, [pc, #12]	@ (800279c <KEYS_initISR+0x4c>)
 800278e:	f001 fde7 	bl	8004360 <HAL_GPIO_WritePin>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40020c00 	.word	0x40020c00

080027a0 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027b4:	4827      	ldr	r0, [pc, #156]	@ (8002854 <KEYS_read+0xb4>)
 80027b6:	f001 fdd3 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2108      	movs	r1, #8
 80027be:	4825      	ldr	r0, [pc, #148]	@ (8002854 <KEYS_read+0xb4>)
 80027c0:	f001 fdce 	bl	8004360 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80027c4:	f000 f848 	bl	8002858 <KEYS_kolom>
 80027c8:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <KEYS_read+0x36>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2108      	movs	r1, #8
 80027da:	481e      	ldr	r0, [pc, #120]	@ (8002854 <KEYS_read+0xb4>)
 80027dc:	f001 fdc0 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2104      	movs	r1, #4
 80027e4:	481b      	ldr	r0, [pc, #108]	@ (8002854 <KEYS_read+0xb4>)
 80027e6:	f001 fdbb 	bl	8004360 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80027ea:	f000 f835 	bl	8002858 <KEYS_kolom>
 80027ee:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <KEYS_read+0x5c>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3308      	adds	r3, #8
 80027fa:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2104      	movs	r1, #4
 8002800:	4814      	ldr	r0, [pc, #80]	@ (8002854 <KEYS_read+0xb4>)
 8002802:	f001 fdad 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8002806:	2201      	movs	r2, #1
 8002808:	2102      	movs	r1, #2
 800280a:	4812      	ldr	r0, [pc, #72]	@ (8002854 <KEYS_read+0xb4>)
 800280c:	f001 fda8 	bl	8004360 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002810:	f000 f822 	bl	8002858 <KEYS_kolom>
 8002814:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <KEYS_read+0x82>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	3304      	adds	r3, #4
 8002820:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2102      	movs	r1, #2
 8002826:	480b      	ldr	r0, [pc, #44]	@ (8002854 <KEYS_read+0xb4>)
 8002828:	f001 fd9a 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002832:	4808      	ldr	r0, [pc, #32]	@ (8002854 <KEYS_read+0xb4>)
 8002834:	f001 fd94 	bl	8004360 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002838:	f000 f80e 	bl	8002858 <KEYS_kolom>
 800283c:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <KEYS_read+0xa8>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	607b      	str	r3, [r7, #4]

	return out;
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40020c00 	.word	0x40020c00

08002858 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8002862:	2140      	movs	r1, #64	@ 0x40
 8002864:	4814      	ldr	r0, [pc, #80]	@ (80028b8 <KEYS_kolom+0x60>)
 8002866:	f001 fd63 	bl	8004330 <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <KEYS_kolom+0x1c>
 8002870:	2301      	movs	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	4810      	ldr	r0, [pc, #64]	@ (80028b8 <KEYS_kolom+0x60>)
 8002878:	f001 fd5a 	bl	8004330 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <KEYS_kolom+0x2e>
 8002882:	2302      	movs	r3, #2
 8002884:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800288a:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <KEYS_kolom+0x60>)
 800288c:	f001 fd50 	bl	8004330 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <KEYS_kolom+0x42>
 8002896:	2303      	movs	r3, #3
 8002898:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 800289a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800289e:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <KEYS_kolom+0x60>)
 80028a0:	f001 fd46 	bl	8004330 <HAL_GPIO_ReadPin>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <KEYS_kolom+0x56>
 80028aa:	2304      	movs	r3, #4
 80028ac:	607b      	str	r3, [r7, #4]
	return key;
 80028ae:	687b      	ldr	r3, [r7, #4]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40020c00 	.word	0x40020c00

080028bc <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2108      	movs	r1, #8
 80028c4:	4809      	ldr	r0, [pc, #36]	@ (80028ec <ClearBits+0x30>)
 80028c6:	f001 fd4b 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2110      	movs	r1, #16
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <ClearBits+0x30>)
 80028d0:	f001 fd46 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2120      	movs	r1, #32
 80028d8:	4804      	ldr	r0, [pc, #16]	@ (80028ec <ClearBits+0x30>)
 80028da:	f001 fd41 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	2140      	movs	r1, #64	@ 0x40
 80028e2:	4802      	ldr	r0, [pc, #8]	@ (80028ec <ClearBits+0x30>)
 80028e4:	f001 fd3c 	bl	8004360 <HAL_GPIO_WritePin>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;
}

void LCD_clear(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 80028f4:	2001      	movs	r0, #1
 80028f6:	f000 f997 	bl	8002c28 <LCD_writecontrol>
   curpos=0;               // reset position
 80028fa:	4b04      	ldr	r3, [pc, #16]	@ (800290c <LCD_clear+0x1c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8002900:	2005      	movs	r0, #5
 8002902:	f001 f9e1 	bl	8003cc8 <HAL_Delay>
//   busyflag();
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000068d 	.word	0x2000068d

08002910 <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d013      	beq.n	8002948 <LCD_XY+0x38>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d815      	bhi.n	8002952 <LCD_XY+0x42>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <LCD_XY+0x24>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <LCD_XY+0x2e>
 8002932:	e00e      	b.n	8002952 <LCD_XY+0x42>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3b80      	subs	r3, #128	@ 0x80
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e00e      	b.n	800295c <LCD_XY+0x4c>
	case 1:  data = (1<<7)+0x40+x; break;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b40      	subs	r3, #64	@ 0x40
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e009      	b.n	800295c <LCD_XY+0x4c>
	case 2:  data = (1<<7)+0x14+x; break;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b6c      	subs	r3, #108	@ 0x6c
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e004      	b.n	800295c <LCD_XY+0x4c>
	default: data = (1<<7)+0x54+x; break;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b2c      	subs	r3, #44	@ 0x2c
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	bf00      	nop
	}
	LCD_writecontrol(data);
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f962 	bl	8002c28 <LCD_writecontrol>
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <LCD_init+0x11c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4a43      	ldr	r2, [pc, #268]	@ (8002a88 <LCD_init+0x11c>)
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	6313      	str	r3, [r2, #48]	@ 0x30
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <LCD_init+0x11c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4b3d      	ldr	r3, [pc, #244]	@ (8002a88 <LCD_init+0x11c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a3c      	ldr	r2, [pc, #240]	@ (8002a88 <LCD_init+0x11c>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <LCD_init+0x11c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <LCD_init+0x11c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a35      	ldr	r2, [pc, #212]	@ (8002a88 <LCD_init+0x11c>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <LCD_init+0x11c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80029d2:	2378      	movs	r3, #120	@ 0x78
 80029d4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	4619      	mov	r1, r3
 80029dc:	482b      	ldr	r0, [pc, #172]	@ (8002a8c <LCD_init+0x120>)
 80029de:	f001 fb0b 	bl	8003ff8 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 80029e2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80029e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	4619      	mov	r1, r3
 80029ee:	4828      	ldr	r0, [pc, #160]	@ (8002a90 <LCD_init+0x124>)
 80029f0:	f001 fb02 	bl	8003ff8 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 80029f4:	2301      	movs	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	4619      	mov	r1, r3
 80029fe:	4825      	ldr	r0, [pc, #148]	@ (8002a94 <LCD_init+0x128>)
 8002a00:	f001 fafa 	bl	8003ff8 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a0a:	4821      	ldr	r0, [pc, #132]	@ (8002a90 <LCD_init+0x124>)
 8002a0c:	f001 fca8 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2101      	movs	r1, #1
 8002a14:	481f      	ldr	r0, [pc, #124]	@ (8002a94 <LCD_init+0x128>)
 8002a16:	f001 fca3 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a20:	481b      	ldr	r0, [pc, #108]	@ (8002a90 <LCD_init+0x124>)
 8002a22:	f001 fc9d 	bl	8004360 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8002a26:	200f      	movs	r0, #15
 8002a28:	f001 f94e 	bl	8003cc8 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8002a2c:	2030      	movs	r0, #48	@ 0x30
 8002a2e:	f000 f8c7 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(70);
 8002a32:	2046      	movs	r0, #70	@ 0x46
 8002a34:	f001 f948 	bl	8003cc8 <HAL_Delay>
    LCD_writebyte(0x30);
 8002a38:	2030      	movs	r0, #48	@ 0x30
 8002a3a:	f000 f8c1 	bl	8002bc0 <LCD_writebyte>
    LCD_writebyte(0x30);
 8002a3e:	2030      	movs	r0, #48	@ 0x30
 8002a40:	f000 f8be 	bl	8002bc0 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f000 f8bb 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(5);
 8002a4a:	2005      	movs	r0, #5
 8002a4c:	f001 f93c 	bl	8003cc8 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8002a50:	202c      	movs	r0, #44	@ 0x2c
 8002a52:	f000 f8b5 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(15);
 8002a56:	200f      	movs	r0, #15
 8002a58:	f001 f936 	bl	8003cc8 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002a5c:	200c      	movs	r0, #12
 8002a5e:	f000 f8af 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(15);
 8002a62:	200f      	movs	r0, #15
 8002a64:	f001 f930 	bl	8003cc8 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f000 f8a9 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(15);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f001 f92a 	bl	8003cc8 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8002a74:	2006      	movs	r0, #6
 8002a76:	f000 f8a3 	bl	8002bc0 <LCD_writebyte>
    HAL_Delay(15);
 8002a7a:	200f      	movs	r0, #15
 8002a7c:	f001 f924 	bl	8003cc8 <HAL_Delay>
}
 8002a80:	bf00      	nop
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00

08002a98 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <LCD_putchar+0x40>)
 8002aaa:	f001 fc59 	bl	8004360 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f885 	bl	8002bc0 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <LCD_putchar+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <LCD_putchar+0x44>)
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <LCD_putchar+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d102      	bne.n	8002ad0 <LCD_putchar+0x38>
    	curpos=0;
 8002aca:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <LCD_putchar+0x44>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	2000068d 	.word	0x2000068d

08002ae0 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	e019      	b.n	8002b22 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <LCD_put+0x58>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d10b      	bne.n	8002b0e <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e005      	b.n	8002b08 <LCD_put+0x28>
 8002afc:	2014      	movs	r0, #20
 8002afe:	f000 f893 	bl	8002c28 <LCD_writecontrol>
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3301      	adds	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b1f      	cmp	r3, #31
 8002b0c:	d9f6      	bls.n	8002afc <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 8002b0e:	7bbb      	ldrb	r3, [r7, #14]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ffbe 	bl	8002a98 <LCD_putchar>
    for (k=0; string[k]; k++)
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73bb      	strb	r3, [r7, #14]
 8002b22:	7bbb      	ldrb	r3, [r7, #14]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1df      	bne.n	8002aee <LCD_put+0xe>
    }

}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000068d 	.word	0x2000068d

08002b3c <LCD_puts>:

void LCD_puts(char *c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffcb 	bl	8002ae0 <LCD_put>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8002b5e:	f7ff fead 	bl	80028bc <ClearBits>

    if (data & 0x01)
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2140      	movs	r1, #64	@ 0x40
 8002b70:	4812      	ldr	r0, [pc, #72]	@ (8002bbc <LCD_writenibble+0x68>)
 8002b72:	f001 fbf5 	bl	8004360 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002b80:	2201      	movs	r2, #1
 8002b82:	2120      	movs	r1, #32
 8002b84:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <LCD_writenibble+0x68>)
 8002b86:	f001 fbeb 	bl	8004360 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002b94:	2201      	movs	r2, #1
 8002b96:	2110      	movs	r1, #16
 8002b98:	4808      	ldr	r0, [pc, #32]	@ (8002bbc <LCD_writenibble+0x68>)
 8002b9a:	f001 fbe1 	bl	8004360 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2108      	movs	r1, #8
 8002bac:	4803      	ldr	r0, [pc, #12]	@ (8002bbc <LCD_writenibble+0x68>)
 8002bae:	f001 fbd7 	bl	8004360 <HAL_GPIO_WritePin>

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	const TickType_t xDelay = 2 / portTICK_PERIOD_MS;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	60fb      	str	r3, [r7, #12]

    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4814      	ldr	r0, [pc, #80]	@ (8002c24 <LCD_writebyte+0x64>)
 8002bd4:	f001 fbc4 	bl	8004360 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ffb8 	bl	8002b54 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2101      	movs	r1, #1
 8002be8:	480e      	ldr	r0, [pc, #56]	@ (8002c24 <LCD_writebyte+0x64>)
 8002bea:	f001 fbb9 	bl	8004360 <HAL_GPIO_WritePin>

    //HAL_Delay(2);
    vTaskDelay(xDelay);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f00b f864 	bl	800dcbc <vTaskDelay>
    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	480a      	ldr	r0, [pc, #40]	@ (8002c24 <LCD_writebyte+0x64>)
 8002bfa:	f001 fbb1 	bl	8004360 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffa4 	bl	8002b54 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4804      	ldr	r0, [pc, #16]	@ (8002c24 <LCD_writebyte+0x64>)
 8002c12:	f001 fba5 	bl	8004360 <HAL_GPIO_WritePin>

    //HAL_Delay(2);
    vTaskDelay(xDelay);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f00b f850 	bl	800dcbc <vTaskDelay>
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40020c00 	.word	0x40020c00

08002c28 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002c32:	2200      	movs	r2, #0
 8002c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <LCD_writecontrol+0x28>)
 8002c3a:	f001 fb91 	bl	8004360 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ffbd 	bl	8002bc0 <LCD_writebyte>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40020800 	.word	0x40020800

08002c54 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c5e:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <LED_init+0x30>)
 8002c60:	f001 fb7e 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002c64:	2200      	movs	r2, #0
 8002c66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c6a:	4807      	ldr	r0, [pc, #28]	@ (8002c88 <LED_init+0x34>)
 8002c6c:	f001 fb78 	bl	8004360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002c70:	2201      	movs	r2, #1
 8002c72:	2102      	movs	r1, #2
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <LED_init+0x34>)
 8002c76:	f001 fb73 	bl	8004360 <HAL_GPIO_WritePin>
    LED_put(0);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f806 	bl	8002c8c <LED_put>
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400

08002c8c <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e01c      	b.n	8002cd6 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cb2:	4811      	ldr	r0, [pc, #68]	@ (8002cf8 <LED_put+0x6c>)
 8002cb4:	f001 fb54 	bl	8004360 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cbe:	480f      	ldr	r0, [pc, #60]	@ (8002cfc <LED_put+0x70>)
 8002cc0:	f001 fb4e 	bl	8004360 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cca:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <LED_put+0x70>)
 8002ccc:	f001 fb48 	bl	8004360 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1df      	bne.n	8002c9c <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4806      	ldr	r0, [pc, #24]	@ (8002cfc <LED_put+0x70>)
 8002ce2:	f001 fb3d 	bl	8004360 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <LED_put+0x70>)
 8002cec:	f001 fb38 	bl	8004360 <HAL_GPIO_WritePin>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400

08002d00 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002d0a:	1df9      	adds	r1, r7, #7
 8002d0c:	2364      	movs	r3, #100	@ 0x64
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4803      	ldr	r0, [pc, #12]	@ (8002d20 <UART_putchar+0x20>)
 8002d12:	f004 fef8 	bl	8007b06 <HAL_UART_Transmit>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200007c8 	.word	0x200007c8

08002d24 <UART_puts>:

void UART_puts(const char *s)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e009      	b.n	8002d46 <UART_puts+0x22>
		UART_putchar(s[i]);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ffe0 	bl	8002d00 <UART_putchar>
	for (i=0; s[i]; i++)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ef      	bne.n	8002d32 <UART_puts+0xe>
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002d64:	210a      	movs	r1, #10
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f804 	bl	8002d74 <UART_putnum>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002d80:	230f      	movs	r3, #15
 8002d82:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d129      	bne.n	8002dde <UART_putnum+0x6a>
    {
        c[i]='0';
 8002d8a:	f107 0208 	add.w	r2, r7, #8
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	2230      	movs	r2, #48	@ 0x30
 8002d94:	701a      	strb	r2, [r3, #0]
        i--;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	e030      	b.n	8002e00 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002da6:	fb01 f202 	mul.w	r2, r1, r2
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002db8:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <UART_putnum+0x9c>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b259      	sxtb	r1, r3
 8002dc2:	f107 0208 	add.w	r2, r7, #8
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]
            i--;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <UART_putnum+0x6a>
                num=0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1dc      	bne.n	8002d9e <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002de4:	e00c      	b.n	8002e00 <UART_putnum+0x8c>
    {
        i++;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002dec:	f107 0208 	add.w	r2, r7, #8
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f993 3000 	ldrsb.w	r3, [r3]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff80 	bl	8002d00 <UART_putchar>
    while(i<15)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0e      	cmp	r3, #14
 8002e04:	ddef      	ble.n	8002de6 <UART_putnum+0x72>
    }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000021c 	.word	0x2000021c

08002e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e18:	f000 ff14 	bl	8003c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e1c:	f000 f830 	bl	8002e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e20:	f000 f980 	bl	8003124 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e24:	f000 f896 	bl	8002f54 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002e28:	f000 f8c2 	bl	8002fb0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002e2c:	f000 f8f0 	bl	8003010 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002e30:	f000 f94e 	bl	80030d0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002e34:	f000 f922 	bl	800307c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002e38:	f7ff fd98 	bl	800296c <LCD_init>
  KEYS_init();
 8002e3c:	f7ff fc4e 	bl	80026dc <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002e40:	2001      	movs	r0, #1
 8002e42:	f7ff fc85 	bl	8002750 <KEYS_initISR>
  LED_init();
 8002e46:	f7ff ff05 	bl	8002c54 <LED_init>

  DisplayVersion();
 8002e4a:	f7fe fbcb 	bl	80015e4 <DisplayVersion>
  osDelay(500); // time to read version
 8002e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e52:	f009 f9ff 	bl	800c254 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e56:	f009 f8e3 	bl	800c020 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002e5a:	4a06      	ldr	r2, [pc, #24]	@ (8002e74 <main+0x60>)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <main+0x64>)
 8002e60:	f009 f966 	bl	800c130 <osThreadNew>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <main+0x68>)
 8002e68:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e6a:	f009 f925 	bl	800c0b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <main+0x5a>
 8002e72:	bf00      	nop
 8002e74:	08015aa0 	.word	0x08015aa0
 8002e78:	0800344d 	.word	0x0800344d
 8002e7c:	2000080c 	.word	0x2000080c

08002e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b094      	sub	sp, #80	@ 0x50
 8002e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	2230      	movs	r2, #48	@ 0x30
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00f fb94 	bl	80125bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	4b28      	ldr	r3, [pc, #160]	@ (8002f4c <SystemClock_Config+0xcc>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <SystemClock_Config+0xcc>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb4:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <SystemClock_Config+0xcc>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <SystemClock_Config+0xd0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <SystemClock_Config+0xd0>)
 8002eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <SystemClock_Config+0xd0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ee0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ef4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002efa:	2302      	movs	r3, #2
 8002efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002efe:	2307      	movs	r3, #7
 8002f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f02:	f107 0320 	add.w	r3, r7, #32
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fc70 	bl	80067ec <HAL_RCC_OscConfig>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f12:	f000 fadf 	bl	80034d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f16:	230f      	movs	r3, #15
 8002f18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	2105      	movs	r1, #5
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fed1 	bl	8006cdc <HAL_RCC_ClockConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002f40:	f000 fac8 	bl	80034d4 <Error_Handler>
  }
}
 8002f44:	bf00      	nop
 8002f46:	3750      	adds	r7, #80	@ 0x50
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000

08002f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f5a:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <MX_I2C1_Init+0x54>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f60:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <MX_I2C1_Init+0x58>)
 8002f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f90:	4804      	ldr	r0, [pc, #16]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f92:	f002 fe47 	bl	8005c24 <HAL_I2C_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f9c:	f000 fa9a 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000690 	.word	0x20000690
 8002fa8:	40005400 	.word	0x40005400
 8002fac:	000186a0 	.word	0x000186a0

08002fb0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002fb4:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fb6:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <MX_I2S3_Init+0x58>)
 8002fb8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800300c <MX_I2S3_Init+0x5c>)
 8002fda:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	@ (8003004 <MX_I2S3_Init+0x54>)
 8002ff0:	f002 ff5c 	bl	8005eac <HAL_I2S_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002ffa:	f000 fa6b 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200006e4 	.word	0x200006e4
 8003008:	40003c00 	.word	0x40003c00
 800300c:	00017700 	.word	0x00017700

08003010 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003014:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003016:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <MX_SPI1_Init+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800301a:	4b16      	ldr	r3, [pc, #88]	@ (8003074 <MX_SPI1_Init+0x64>)
 800301c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003022:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003028:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <MX_SPI1_Init+0x64>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003034:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <MX_SPI1_Init+0x64>)
 800303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <MX_SPI1_Init+0x64>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003054:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003056:	2200      	movs	r2, #0
 8003058:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <MX_SPI1_Init+0x64>)
 800305c:	220a      	movs	r2, #10
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003060:	4804      	ldr	r0, [pc, #16]	@ (8003074 <MX_SPI1_Init+0x64>)
 8003062:	f004 f9cd 	bl	8007400 <HAL_SPI_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800306c:	f000 fa32 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000072c 	.word	0x2000072c
 8003078:	40013000 	.word	0x40013000

0800307c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <MX_UART4_Init+0x4c>)
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <MX_UART4_Init+0x50>)
 8003084:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003086:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <MX_UART4_Init+0x4c>)
 8003088:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800308c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <MX_UART4_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <MX_UART4_Init+0x4c>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <MX_UART4_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <MX_UART4_Init+0x4c>)
 80030a2:	220c      	movs	r2, #12
 80030a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <MX_UART4_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <MX_UART4_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030b2:	4805      	ldr	r0, [pc, #20]	@ (80030c8 <MX_UART4_Init+0x4c>)
 80030b4:	f004 fcda 	bl	8007a6c <HAL_UART_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80030be:	f000 fa09 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000784 	.word	0x20000784
 80030cc:	40004c00 	.word	0x40004c00

080030d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <MX_USART2_UART_Init+0x50>)
 80030d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030f6:	220c      	movs	r2, #12
 80030f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <MX_USART2_UART_Init+0x4c>)
 8003108:	f004 fcb0 	bl	8007a6c <HAL_UART_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003112:	f000 f9df 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200007c8 	.word	0x200007c8
 8003120:	40004400 	.word	0x40004400

08003124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	@ 0x30
 8003128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	4b8e      	ldr	r3, [pc, #568]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a8d      	ldr	r2, [pc, #564]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003144:	f043 0310 	orr.w	r3, r3, #16
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b8b      	ldr	r3, [pc, #556]	@ (8003378 <MX_GPIO_Init+0x254>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	4b87      	ldr	r3, [pc, #540]	@ (8003378 <MX_GPIO_Init+0x254>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a86      	ldr	r2, [pc, #536]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b84      	ldr	r3, [pc, #528]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b80      	ldr	r3, [pc, #512]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a7f      	ldr	r2, [pc, #508]	@ (8003378 <MX_GPIO_Init+0x254>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b7d      	ldr	r3, [pc, #500]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b79      	ldr	r3, [pc, #484]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a78      	ldr	r2, [pc, #480]	@ (8003378 <MX_GPIO_Init+0x254>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b72      	ldr	r3, [pc, #456]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	4a71      	ldr	r2, [pc, #452]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d6:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <MX_GPIO_Init+0x254>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2108      	movs	r1, #8
 80031e6:	4865      	ldr	r0, [pc, #404]	@ (800337c <MX_GPIO_Init+0x258>)
 80031e8:	f001 f8ba 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80031ec:	2201      	movs	r2, #1
 80031ee:	2101      	movs	r1, #1
 80031f0:	4863      	ldr	r0, [pc, #396]	@ (8003380 <MX_GPIO_Init+0x25c>)
 80031f2:	f001 f8b5 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 80031f6:	2200      	movs	r2, #0
 80031f8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80031fc:	4861      	ldr	r0, [pc, #388]	@ (8003384 <MX_GPIO_Init+0x260>)
 80031fe:	f001 f8af 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003202:	2200      	movs	r2, #0
 8003204:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003208:	485f      	ldr	r0, [pc, #380]	@ (8003388 <MX_GPIO_Init+0x264>)
 800320a:	f001 f8a9 	bl	8004360 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800320e:	2200      	movs	r2, #0
 8003210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003214:	485a      	ldr	r0, [pc, #360]	@ (8003380 <MX_GPIO_Init+0x25c>)
 8003216:	f001 f8a3 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 800321a:	2200      	movs	r2, #0
 800321c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003220:	485a      	ldr	r0, [pc, #360]	@ (800338c <MX_GPIO_Init+0x268>)
 8003222:	f001 f89d 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003226:	2308      	movs	r3, #8
 8003228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322a:	2301      	movs	r3, #1
 800322c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	484f      	ldr	r0, [pc, #316]	@ (800337c <MX_GPIO_Init+0x258>)
 800323e:	f000 fedb 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 8003242:	f240 1301 	movw	r3, #257	@ 0x101
 8003246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003248:	2301      	movs	r3, #1
 800324a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4849      	ldr	r0, [pc, #292]	@ (8003380 <MX_GPIO_Init+0x25c>)
 800325c:	f000 fecc 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003260:	2308      	movs	r3, #8
 8003262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003270:	2305      	movs	r3, #5
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	4619      	mov	r1, r3
 800327a:	4841      	ldr	r0, [pc, #260]	@ (8003380 <MX_GPIO_Init+0x25c>)
 800327c:	f000 febc 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	4619      	mov	r1, r3
 8003294:	483b      	ldr	r0, [pc, #236]	@ (8003384 <MX_GPIO_Init+0x260>)
 8003296:	f000 feaf 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 800329a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800329e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	4619      	mov	r1, r3
 80032b2:	4834      	ldr	r0, [pc, #208]	@ (8003384 <MX_GPIO_Init+0x260>)
 80032b4:	f000 fea0 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80032b8:	2304      	movs	r3, #4
 80032ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032bc:	2300      	movs	r3, #0
 80032be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80032c4:	f107 031c 	add.w	r3, r7, #28
 80032c8:	4619      	mov	r1, r3
 80032ca:	482e      	ldr	r0, [pc, #184]	@ (8003384 <MX_GPIO_Init+0x260>)
 80032cc:	f000 fe94 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80032d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032e2:	2305      	movs	r3, #5
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	4619      	mov	r1, r3
 80032ec:	4825      	ldr	r0, [pc, #148]	@ (8003384 <MX_GPIO_Init+0x260>)
 80032ee:	f000 fe83 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80032f2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80032f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	481f      	ldr	r0, [pc, #124]	@ (8003388 <MX_GPIO_Init+0x264>)
 800330c:	f000 fe74 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8003310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	2301      	movs	r3, #1
 8003318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 031c 	add.w	r3, r7, #28
 8003326:	4619      	mov	r1, r3
 8003328:	4818      	ldr	r0, [pc, #96]	@ (800338c <MX_GPIO_Init+0x268>)
 800332a:	f000 fe65 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800332e:	2320      	movs	r3, #32
 8003330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	4811      	ldr	r0, [pc, #68]	@ (8003388 <MX_GPIO_Init+0x264>)
 8003342:	f000 fe59 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003346:	2302      	movs	r3, #2
 8003348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800334a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800334e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4808      	ldr	r0, [pc, #32]	@ (800337c <MX_GPIO_Init+0x258>)
 800335c:	f000 fe4c 	bl	8003ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2105      	movs	r1, #5
 8003364:	2006      	movs	r0, #6
 8003366:	f000 fd8b 	bl	8003e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800336a:	2006      	movs	r0, #6
 800336c:	f000 fda4 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003370:	bf00      	nop
 8003372:	3730      	adds	r7, #48	@ 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	40021000 	.word	0x40021000
 8003380:	40020800 	.word	0x40020800
 8003384:	40020400 	.word	0x40020400
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40020000 	.word	0x40020000

08003390 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a23      	ldr	r2, [pc, #140]	@ (8003430 <HAL_UART_RxCpltCallback+0xa0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d11d      	bne.n	80033e2 <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 80033a6:	f107 030e 	add.w	r3, r7, #14
 80033aa:	2201      	movs	r2, #1
 80033ac:	4619      	mov	r1, r3
 80033ae:	4821      	ldr	r0, [pc, #132]	@ (8003434 <HAL_UART_RxCpltCallback+0xa4>)
 80033b0:	f004 fc3b 	bl	8007c2a <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_UART_RxCpltCallback+0xa8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	f107 0208 	add.w	r2, r7, #8
 80033bc:	f107 010e 	add.w	r1, r7, #14
 80033c0:	2300      	movs	r3, #0
 80033c2:	f009 fdb1 	bl	800cf28 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_UART_RxCpltCallback+0x52>
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_UART_RxCpltCallback+0xac>)
 80033d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <HAL_UART_RxCpltCallback+0xb0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d11d      	bne.n	8003428 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80033ec:	f107 030f 	add.w	r3, r7, #15
 80033f0:	2201      	movs	r2, #1
 80033f2:	4619      	mov	r1, r3
 80033f4:	4813      	ldr	r0, [pc, #76]	@ (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033f6:	f004 fc18 	bl	8007c2a <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_UART_RxCpltCallback+0xb8>)
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f107 0208 	add.w	r2, r7, #8
 8003402:	f107 010f 	add.w	r1, r7, #15
 8003406:	2300      	movs	r3, #0
 8003408:	f009 fd8e 	bl	800cf28 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_UART_RxCpltCallback+0x98>
 8003418:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_UART_RxCpltCallback+0xac>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
	}

}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40004400 	.word	0x40004400
 8003434:	200007c8 	.word	0x200007c8
 8003438:	20000590 	.word	0x20000590
 800343c:	e000ed04 	.word	0xe000ed04
 8003440:	40004c00 	.word	0x40004c00
 8003444:	20000784 	.word	0x20000784
 8003448:	20000594 	.word	0x20000594

0800344c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003454:	f00d f870 	bl	8010538 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8003458:	f7fe f94a 	bl	80016f0 <CreateHandles>
  CreateTasks();
 800345c:	f7fe f9d8 	bl	8001810 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8003460:	f107 030e 	add.w	r3, r7, #14
 8003464:	2201      	movs	r2, #1
 8003466:	4619      	mov	r1, r3
 8003468:	480d      	ldr	r0, [pc, #52]	@ (80034a0 <StartDefaultTask+0x54>)
 800346a:	f004 fbde 	bl	8007c2a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART1 interrupt engine GPS
 800346e:	f107 030f 	add.w	r3, r7, #15
 8003472:	2201      	movs	r2, #1
 8003474:	4619      	mov	r1, r3
 8003476:	480b      	ldr	r0, [pc, #44]	@ (80034a4 <StartDefaultTask+0x58>)
 8003478:	f004 fbd7 	bl	8007c2a <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte is nog een bug.
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fc6c 	bl	8002d5c <UART_putint>
 8003484:	4808      	ldr	r0, [pc, #32]	@ (80034a8 <StartDefaultTask+0x5c>)
 8003486:	f7ff fc4d 	bl	8002d24 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800348a:	2001      	movs	r0, #1
 800348c:	f008 fee2 	bl	800c254 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <StartDefaultTask+0x60>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f00a fb9d 	bl	800dbd4 <vTaskDelete>
    osDelay(1);
 800349a:	bf00      	nop
 800349c:	e7f5      	b.n	800348a <StartDefaultTask+0x3e>
 800349e:	bf00      	nop
 80034a0:	200007c8 	.word	0x200007c8
 80034a4:	20000784 	.word	0x20000784
 80034a8:	080159e8 	.word	0x080159e8
 80034ac:	2000080c 	.word	0x2000080c

080034b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034c2:	f000 fbe1 	bl	8003c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000

080034d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034d8:	b672      	cpsid	i
}
 80034da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <Error_Handler+0x8>

080034e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_MspInit+0x54>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	4a11      	ldr	r2, [pc, #68]	@ (8003534 <HAL_MspInit+0x54>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <HAL_MspInit+0x54>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_MspInit+0x54>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <HAL_MspInit+0x54>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	@ 0x40
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <HAL_MspInit+0x54>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	210f      	movs	r1, #15
 8003522:	f06f 0001 	mvn.w	r0, #1
 8003526:	f000 fcab 	bl	8003e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	@ 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_I2C_MspInit+0x84>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12c      	bne.n	80035b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	4a17      	ldr	r2, [pc, #92]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	@ 0x30
 800356a:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003576:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800357a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357c:	2312      	movs	r3, #18
 800357e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003588:	2304      	movs	r3, #4
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	480c      	ldr	r0, [pc, #48]	@ (80035c4 <HAL_I2C_MspInit+0x8c>)
 8003594:	f000 fd30 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	4a07      	ldr	r2, [pc, #28]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 80035a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_I2C_MspInit+0x88>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035b4:	bf00      	nop
 80035b6:	3728      	adds	r7, #40	@ 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40005400 	.word	0x40005400
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020400 	.word	0x40020400

080035c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	@ 0x38
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <HAL_I2S_MspInit+0xf0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d15a      	bne.n	80036ae <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80035f8:	2301      	movs	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80035fc:	23c0      	movs	r3, #192	@ 0xc0
 80035fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003600:	2302      	movs	r3, #2
 8003602:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fdb9 	bl	8007180 <HAL_RCCEx_PeriphCLKConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003614:	f7ff ff5e 	bl	80034d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 8003622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003626:	6413      	str	r3, [r2, #64]	@ 0x40
 8003628:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6313      	str	r3, [r2, #48]	@ 0x30
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003660:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <HAL_I2S_MspInit+0xf4>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800366c:	2310      	movs	r3, #16
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800367c:	2306      	movs	r3, #6
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	480e      	ldr	r0, [pc, #56]	@ (80036c0 <HAL_I2S_MspInit+0xf8>)
 8003688:	f000 fcb6 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800368c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800369e:	2306      	movs	r3, #6
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a6:	4619      	mov	r1, r3
 80036a8:	4806      	ldr	r0, [pc, #24]	@ (80036c4 <HAL_I2S_MspInit+0xfc>)
 80036aa:	f000 fca5 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3738      	adds	r7, #56	@ 0x38
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40003c00 	.word	0x40003c00
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020800 	.word	0x40020800

080036c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_SPI_MspInit+0x84>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12b      	bne.n	8003742 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	4b18      	ldr	r3, [pc, #96]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 80036f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036fa:	4b15      	ldr	r3, [pc, #84]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4a10      	ldr	r2, [pc, #64]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6313      	str	r3, [r2, #48]	@ 0x30
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <HAL_SPI_MspInit+0x88>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003722:	23e0      	movs	r3, #224	@ 0xe0
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003732:	2305      	movs	r3, #5
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	4805      	ldr	r0, [pc, #20]	@ (8003754 <HAL_SPI_MspInit+0x8c>)
 800373e:	f000 fc5b 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003742:	bf00      	nop
 8003744:	3728      	adds	r7, #40	@ 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40013000 	.word	0x40013000
 8003750:	40023800 	.word	0x40023800
 8003754:	40020000 	.word	0x40020000

08003758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	@ 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3a      	ldr	r2, [pc, #232]	@ (8003860 <HAL_UART_MspInit+0x108>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d134      	bne.n	80037e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	4a38      	ldr	r2, [pc, #224]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 8003784:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003788:	6413      	str	r3, [r2, #64]	@ 0x40
 800378a:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	4a31      	ldr	r2, [pc, #196]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b2:	2303      	movs	r3, #3
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037be:	2303      	movs	r3, #3
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037c2:	2308      	movs	r3, #8
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	4826      	ldr	r0, [pc, #152]	@ (8003868 <HAL_UART_MspInit+0x110>)
 80037ce:	f000 fc13 	bl	8003ff8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2105      	movs	r1, #5
 80037d6:	2034      	movs	r0, #52	@ 0x34
 80037d8:	f000 fb52 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80037dc:	2034      	movs	r0, #52	@ 0x34
 80037de:	f000 fb6b 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037e2:	e038      	b.n	8003856 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a20      	ldr	r2, [pc, #128]	@ (800386c <HAL_UART_MspInit+0x114>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d133      	bne.n	8003856 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037fe:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6313      	str	r3, [r2, #48]	@ 0x30
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_UART_MspInit+0x10c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003826:	230c      	movs	r3, #12
 8003828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003836:	2307      	movs	r3, #7
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 031c 	add.w	r3, r7, #28
 800383e:	4619      	mov	r1, r3
 8003840:	4809      	ldr	r0, [pc, #36]	@ (8003868 <HAL_UART_MspInit+0x110>)
 8003842:	f000 fbd9 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2105      	movs	r1, #5
 800384a:	2026      	movs	r0, #38	@ 0x26
 800384c:	f000 fb18 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003850:	2026      	movs	r0, #38	@ 0x26
 8003852:	f000 fb31 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3730      	adds	r7, #48	@ 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40004c00 	.word	0x40004c00
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40004400 	.word	0x40004400

08003870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <HAL_InitTick+0xd4>)
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	4a2e      	ldr	r2, [pc, #184]	@ (8003944 <HAL_InitTick+0xd4>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003890:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <HAL_InitTick+0xd4>)
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800389c:	f107 020c 	add.w	r2, r7, #12
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 fc38 	bl	800711c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80038ac:	f003 fc22 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 80038b0:	4603      	mov	r3, r0
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <HAL_InitTick+0xd8>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9b      	lsrs	r3, r3, #18
 80038c0:	3b01      	subs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <HAL_InitTick+0xdc>)
 80038c6:	4a22      	ldr	r2, [pc, #136]	@ (8003950 <HAL_InitTick+0xe0>)
 80038c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_InitTick+0xdc>)
 80038cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038d2:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_InitTick+0xdc>)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80038d8:	4b1c      	ldr	r3, [pc, #112]	@ (800394c <HAL_InitTick+0xdc>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_InitTick+0xdc>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_InitTick+0xdc>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80038ea:	4818      	ldr	r0, [pc, #96]	@ (800394c <HAL_InitTick+0xdc>)
 80038ec:	f003 fe11 	bl	8007512 <HAL_TIM_Base_Init>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80038f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11b      	bne.n	8003936 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80038fe:	4813      	ldr	r0, [pc, #76]	@ (800394c <HAL_InitTick+0xdc>)
 8003900:	f003 fe60 	bl	80075c4 <HAL_TIM_Base_Start_IT>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800390a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800390e:	2b00      	cmp	r3, #0
 8003910:	d111      	bne.n	8003936 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003912:	2019      	movs	r0, #25
 8003914:	f000 fad0 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d808      	bhi.n	8003930 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800391e:	2200      	movs	r2, #0
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	2019      	movs	r0, #25
 8003924:	f000 faac 	bl	8003e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003928:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <HAL_InitTick+0xe4>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e002      	b.n	8003936 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800393a:	4618      	mov	r0, r3
 800393c:	3730      	adds	r7, #48	@ 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	431bde83 	.word	0x431bde83
 800394c:	20000810 	.word	0x20000810
 8003950:	40010000 	.word	0x40010000
 8003954:	20000230 	.word	0x20000230

08003958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <NMI_Handler+0x4>

08003960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <HardFault_Handler+0x4>

08003968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <MemManage_Handler+0x4>

08003970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <BusFault_Handler+0x4>

08003978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <UsageFault_Handler+0x4>

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800399a:	2001      	movs	r0, #1
 800399c:	f000 fd14 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 80039a0:	f7fe fefe 	bl	80027a0 <KEYS_read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <EXTI0_IRQHandler+0x58>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	463a      	mov	r2, r7
 80039b0:	4618      	mov	r0, r3
 80039b2:	f008 ff77 	bl	800c8a4 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7fe feca 	bl	8002750 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <EXTI0_IRQHandler+0x48>
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <EXTI0_IRQHandler+0x5c>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 fcf5 	bl	80043c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000059c 	.word	0x2000059c
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039f6:	f003 fe55 	bl	80076a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000810 	.word	0x20000810

08003a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a08:	4802      	ldr	r0, [pc, #8]	@ (8003a14 <USART2_IRQHandler+0x10>)
 8003a0a:	f004 f93f 	bl	8007c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200007c8 	.word	0x200007c8

08003a18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003a1c:	4802      	ldr	r0, [pc, #8]	@ (8003a28 <UART4_IRQHandler+0x10>)
 8003a1e:	f004 f935 	bl	8007c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000784 	.word	0x20000784

08003a2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a30:	4802      	ldr	r0, [pc, #8]	@ (8003a3c <OTG_FS_IRQHandler+0x10>)
 8003a32:	f000 ff57 	bl	80048e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20005654 	.word	0x20005654

08003a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	return 1;
 8003a44:	2301      	movs	r3, #1
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_kill>:

int _kill(int pid, int sig)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a5a:	f00e fee3 	bl	8012824 <__errno>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2216      	movs	r2, #22
 8003a62:	601a      	str	r2, [r3, #0]
	return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_exit>:

void _exit (int status)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ffe7 	bl	8003a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <_exit+0x12>

08003a86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e00a      	b.n	8003aae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a98:	f3af 8000 	nop.w
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	60ba      	str	r2, [r7, #8]
 8003aa4:	b2ca      	uxtb	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	dbf0      	blt.n	8003a98 <_read+0x12>
	}

return len;
 8003ab6:	687b      	ldr	r3, [r7, #4]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e009      	b.n	8003ae6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	60ba      	str	r2, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	dbf1      	blt.n	8003ad2 <_write+0x12>
	}
	return len;
 8003aee:	687b      	ldr	r3, [r7, #4]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_close>:

int _close(int file)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	return -1;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b20:	605a      	str	r2, [r3, #4]
	return 0;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_isatty>:

int _isatty(int file)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	return 1;
 8003b38:	2301      	movs	r3, #1
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
	return 0;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <_sbrk+0x5c>)
 8003b6a:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <_sbrk+0x60>)
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b74:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <_sbrk+0x64>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <_sbrk+0x64>)
 8003b7e:	4a12      	ldr	r2, [pc, #72]	@ (8003bc8 <_sbrk+0x68>)
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <_sbrk+0x64>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d207      	bcs.n	8003ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b90:	f00e fe48 	bl	8012824 <__errno>
 8003b94:	4603      	mov	r3, r0
 8003b96:	220c      	movs	r2, #12
 8003b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	e009      	b.n	8003bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <_sbrk+0x64>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	4a05      	ldr	r2, [pc, #20]	@ (8003bc4 <_sbrk+0x64>)
 8003bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20020000 	.word	0x20020000
 8003bc0:	00000400 	.word	0x00000400
 8003bc4:	20000858 	.word	0x20000858
 8003bc8:	20005aa8 	.word	0x20005aa8

08003bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bd0:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <SystemInit+0x20>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	4a05      	ldr	r2, [pc, #20]	@ (8003bec <SystemInit+0x20>)
 8003bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf4:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf6:	490e      	ldr	r1, [pc, #56]	@ (8003c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bfc:	e002      	b.n	8003c04 <LoopCopyDataInit>

08003bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c02:	3304      	adds	r3, #4

08003c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c08:	d3f9      	bcc.n	8003bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c10:	e001      	b.n	8003c16 <LoopFillZerobss>

08003c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c14:	3204      	adds	r2, #4

08003c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c18:	d3fb      	bcc.n	8003c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c1a:	f7ff ffd7 	bl	8003bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1e:	f00e fe07 	bl	8012830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c22:	f7ff f8f7 	bl	8002e14 <main>
  bx  lr    
 8003c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c30:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8003c34:	08015f6c 	.word	0x08015f6c
  ldr r2, =_sbss
 8003c38:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8003c3c:	20005aa4 	.word	0x20005aa4

08003c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c40:	e7fe      	b.n	8003c40 <ADC_IRQHandler>
	...

08003c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c48:	4b0e      	ldr	r3, [pc, #56]	@ (8003c84 <HAL_Init+0x40>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c84 <HAL_Init+0x40>)
 8003c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <HAL_Init+0x40>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <HAL_Init+0x40>)
 8003c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c60:	4b08      	ldr	r3, [pc, #32]	@ (8003c84 <HAL_Init+0x40>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a07      	ldr	r2, [pc, #28]	@ (8003c84 <HAL_Init+0x40>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f000 f8fc 	bl	8003e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7ff fdfc 	bl	8003870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c78:	f7ff fc32 	bl	80034e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023c00 	.word	0x40023c00

08003c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_IncTick+0x20>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_IncTick+0x24>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <HAL_IncTick+0x24>)
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000234 	.word	0x20000234
 8003cac:	2000085c 	.word	0x2000085c

08003cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_GetTick+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	2000085c 	.word	0x2000085c

08003cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff ffee 	bl	8003cb0 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d005      	beq.n	8003cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <HAL_Delay+0x44>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cee:	bf00      	nop
 8003cf0:	f7ff ffde 	bl	8003cb0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d8f7      	bhi.n	8003cf0 <HAL_Delay+0x28>
  {
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000234 	.word	0x20000234

08003d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__NVIC_GetPriorityGrouping+0x18>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 0307 	and.w	r3, r3, #7
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db0b      	blt.n	8003d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	4907      	ldr	r1, [pc, #28]	@ (8003dac <__NVIC_EnableIRQ+0x38>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e100 	.word	0xe000e100

08003db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db0a      	blt.n	8003dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	490c      	ldr	r1, [pc, #48]	@ (8003dfc <__NVIC_SetPriority+0x4c>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd8:	e00a      	b.n	8003df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4908      	ldr	r1, [pc, #32]	@ (8003e00 <__NVIC_SetPriority+0x50>)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3b04      	subs	r3, #4
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	440b      	add	r3, r1
 8003dee:	761a      	strb	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f1c3 0307 	rsb	r3, r3, #7
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	bf28      	it	cs
 8003e22:	2304      	movcs	r3, #4
 8003e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d902      	bls.n	8003e34 <NVIC_EncodePriority+0x30>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3b03      	subs	r3, #3
 8003e32:	e000      	b.n	8003e36 <NVIC_EncodePriority+0x32>
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	401a      	ands	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	43d9      	mvns	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	4313      	orrs	r3, r2
         );
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ff4c 	bl	8003d10 <__NVIC_SetPriorityGrouping>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e92:	f7ff ff61 	bl	8003d58 <__NVIC_GetPriorityGrouping>
 8003e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f7ff ffb1 	bl	8003e04 <NVIC_EncodePriority>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff80 	bl	8003db0 <__NVIC_SetPriority>
}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff54 	bl	8003d74 <__NVIC_EnableIRQ>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee2:	f7ff fee5 	bl	8003cb0 <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d008      	beq.n	8003f06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e052      	b.n	8003fac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0216 	bic.w	r2, r2, #22
 8003f14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_DMA_Abort+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f56:	e013      	b.n	8003f80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f58:	f7ff feaa 	bl	8003cb0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d90c      	bls.n	8003f80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e015      	b.n	8003fac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e4      	bne.n	8003f58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	223f      	movs	r2, #63	@ 0x3f
 8003f94:	409a      	lsls	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e00c      	b.n	8003fec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e16b      	b.n	80042ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 815a 	bne.w	80042e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004046:	2b02      	cmp	r3, #2
 8004048:	d130      	bne.n	80040ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004080:	2201      	movs	r2, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0201 	and.w	r2, r3, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d017      	beq.n	80040e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d123      	bne.n	800413c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80b4 	beq.w	80042e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b60      	ldr	r3, [pc, #384]	@ (8004304 <HAL_GPIO_Init+0x30c>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	4a5f      	ldr	r2, [pc, #380]	@ (8004304 <HAL_GPIO_Init+0x30c>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800418c:	6453      	str	r3, [r2, #68]	@ 0x44
 800418e:	4b5d      	ldr	r3, [pc, #372]	@ (8004304 <HAL_GPIO_Init+0x30c>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419a:	4a5b      	ldr	r2, [pc, #364]	@ (8004308 <HAL_GPIO_Init+0x310>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a52      	ldr	r2, [pc, #328]	@ (800430c <HAL_GPIO_Init+0x314>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02b      	beq.n	800421e <HAL_GPIO_Init+0x226>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a51      	ldr	r2, [pc, #324]	@ (8004310 <HAL_GPIO_Init+0x318>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d025      	beq.n	800421a <HAL_GPIO_Init+0x222>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a50      	ldr	r2, [pc, #320]	@ (8004314 <HAL_GPIO_Init+0x31c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01f      	beq.n	8004216 <HAL_GPIO_Init+0x21e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004318 <HAL_GPIO_Init+0x320>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <HAL_GPIO_Init+0x21a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4e      	ldr	r2, [pc, #312]	@ (800431c <HAL_GPIO_Init+0x324>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0x216>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004320 <HAL_GPIO_Init+0x328>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00d      	beq.n	800420a <HAL_GPIO_Init+0x212>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004324 <HAL_GPIO_Init+0x32c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x20e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004328 <HAL_GPIO_Init+0x330>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_GPIO_Init+0x20a>
 80041fe:	2307      	movs	r3, #7
 8004200:	e00e      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004202:	2308      	movs	r3, #8
 8004204:	e00c      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004206:	2306      	movs	r3, #6
 8004208:	e00a      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420a:	2305      	movs	r3, #5
 800420c:	e008      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420e:	2304      	movs	r3, #4
 8004210:	e006      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004212:	2303      	movs	r3, #3
 8004214:	e004      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004216:	2302      	movs	r3, #2
 8004218:	e002      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421e:	2300      	movs	r3, #0
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f002 0203 	and.w	r2, r2, #3
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	4093      	lsls	r3, r2
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004230:	4935      	ldr	r1, [pc, #212]	@ (8004308 <HAL_GPIO_Init+0x310>)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423e:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <HAL_GPIO_Init+0x334>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004262:	4a32      	ldr	r2, [pc, #200]	@ (800432c <HAL_GPIO_Init+0x334>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004268:	4b30      	ldr	r3, [pc, #192]	@ (800432c <HAL_GPIO_Init+0x334>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800428c:	4a27      	ldr	r2, [pc, #156]	@ (800432c <HAL_GPIO_Init+0x334>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004292:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_GPIO_Init+0x334>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b6:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <HAL_GPIO_Init+0x334>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_GPIO_Init+0x334>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e0:	4a12      	ldr	r2, [pc, #72]	@ (800432c <HAL_GPIO_Init+0x334>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	f67f ae90 	bls.w	8004014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3724      	adds	r7, #36	@ 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	40013800 	.word	0x40013800
 800430c:	40020000 	.word	0x40020000
 8004310:	40020400 	.word	0x40020400
 8004314:	40020800 	.word	0x40020800
 8004318:	40020c00 	.word	0x40020c00
 800431c:	40021000 	.word	0x40021000
 8004320:	40021400 	.word	0x40021400
 8004324:	40021800 	.word	0x40021800
 8004328:	40021c00 	.word	0x40021c00
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e001      	b.n	8004352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800437c:	e003      	b.n	8004386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	041a      	lsls	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043a4:	887a      	ldrh	r2, [r7, #2]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4013      	ands	r3, r2
 80043aa:	041a      	lsls	r2, r3, #16
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	400b      	ands	r3, r1
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	619a      	str	r2, [r3, #24]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043de:	4a05      	ldr	r2, [pc, #20]	@ (80043f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f806 	bl	80043f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40013c00 	.word	0x40013c00

080043f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800440e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004410:	b08f      	sub	sp, #60	@ 0x3c
 8004412:	af0a      	add	r7, sp, #40	@ 0x28
 8004414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e054      	b.n	80044ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f00c f8d0 	bl	80105e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2203      	movs	r2, #3
 8004444:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fbee 	bl	8008c40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	687e      	ldr	r6, [r7, #4]
 800446c:	466d      	mov	r5, sp
 800446e:	f106 0410 	add.w	r4, r6, #16
 8004472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800447e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004482:	1d33      	adds	r3, r6, #4
 8004484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004486:	6838      	ldr	r0, [r7, #0]
 8004488:	f004 fb68 	bl	8008b5c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f004 fbe5 	bl	8008c62 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	687e      	ldr	r6, [r7, #4]
 80044a0:	466d      	mov	r5, sp
 80044a2:	f106 0410 	add.w	r4, r6, #16
 80044a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80044b6:	1d33      	adds	r3, r6, #4
 80044b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ba:	6838      	ldr	r0, [r7, #0]
 80044bc:	f004 fd6e 	bl	8008f9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80044d2:	b590      	push	{r4, r7, lr}
 80044d4:	b089      	sub	sp, #36	@ 0x24
 80044d6:	af04      	add	r7, sp, #16
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	4608      	mov	r0, r1
 80044dc:	4611      	mov	r1, r2
 80044de:	461a      	mov	r2, r3
 80044e0:	4603      	mov	r3, r0
 80044e2:	70fb      	strb	r3, [r7, #3]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70bb      	strb	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_HCD_HC_Init+0x28>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e076      	b.n	80045e8 <HAL_HCD_HC_Init+0x116>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	212c      	movs	r1, #44	@ 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	333d      	adds	r3, #61	@ 0x3d
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	212c      	movs	r1, #44	@ 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3338      	adds	r3, #56	@ 0x38
 8004522:	787a      	ldrb	r2, [r7, #1]
 8004524:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	212c      	movs	r1, #44	@ 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3340      	adds	r3, #64	@ 0x40
 8004534:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004536:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	212c      	movs	r1, #44	@ 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3339      	adds	r3, #57	@ 0x39
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	212c      	movs	r1, #44	@ 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	333f      	adds	r3, #63	@ 0x3f
 8004558:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800455c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	78ba      	ldrb	r2, [r7, #2]
 8004562:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004566:	b2d0      	uxtb	r0, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	212c      	movs	r1, #44	@ 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	333a      	adds	r3, #58	@ 0x3a
 8004574:	4602      	mov	r2, r0
 8004576:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004578:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da09      	bge.n	8004594 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	212c      	movs	r1, #44	@ 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	333b      	adds	r3, #59	@ 0x3b
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e008      	b.n	80045a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	212c      	movs	r1, #44	@ 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	333b      	adds	r3, #59	@ 0x3b
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	212c      	movs	r1, #44	@ 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	333c      	adds	r3, #60	@ 0x3c
 80045b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80045b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	787c      	ldrb	r4, [r7, #1]
 80045c0:	78ba      	ldrb	r2, [r7, #2]
 80045c2:	78f9      	ldrb	r1, [r7, #3]
 80045c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80045c6:	9302      	str	r3, [sp, #8]
 80045c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	4623      	mov	r3, r4
 80045d6:	f004 fe67 	bl	80092a8 <USB_HC_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}

080045f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_HCD_HC_Halt+0x1e>
 800460a:	2302      	movs	r3, #2
 800460c:	e00f      	b.n	800462e <HAL_HCD_HC_Halt+0x3e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f005 f8b7 	bl	8009792 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	70fb      	strb	r3, [r7, #3]
 800464a:	460b      	mov	r3, r1
 800464c:	70bb      	strb	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	212c      	movs	r1, #44	@ 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	333b      	adds	r3, #59	@ 0x3b
 8004660:	78ba      	ldrb	r2, [r7, #2]
 8004662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	212c      	movs	r1, #44	@ 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	333f      	adds	r3, #63	@ 0x3f
 8004672:	787a      	ldrb	r2, [r7, #1]
 8004674:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004676:	7c3b      	ldrb	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d112      	bne.n	80046a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	212c      	movs	r1, #44	@ 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3342      	adds	r3, #66	@ 0x42
 800468a:	2203      	movs	r2, #3
 800468c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	212c      	movs	r1, #44	@ 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	333d      	adds	r3, #61	@ 0x3d
 800469c:	7f3a      	ldrb	r2, [r7, #28]
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e008      	b.n	80046b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	212c      	movs	r1, #44	@ 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3342      	adds	r3, #66	@ 0x42
 80046b0:	2202      	movs	r2, #2
 80046b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80046b4:	787b      	ldrb	r3, [r7, #1]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	f200 80c6 	bhi.w	8004848 <HAL_HCD_HC_SubmitRequest+0x210>
 80046bc:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	08004835 	.word	0x08004835
 80046cc:	08004739 	.word	0x08004739
 80046d0:	080047b7 	.word	0x080047b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80046d4:	7c3b      	ldrb	r3, [r7, #16]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f040 80b8 	bne.w	800484c <HAL_HCD_HC_SubmitRequest+0x214>
 80046dc:	78bb      	ldrb	r3, [r7, #2]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 80b4 	bne.w	800484c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80046e4:	8b3b      	ldrh	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	212c      	movs	r1, #44	@ 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	3355      	adds	r3, #85	@ 0x55
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	212c      	movs	r1, #44	@ 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3355      	adds	r3, #85	@ 0x55
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	212c      	movs	r1, #44	@ 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3342      	adds	r3, #66	@ 0x42
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004722:	e093      	b.n	800484c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	212c      	movs	r1, #44	@ 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3342      	adds	r3, #66	@ 0x42
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
      break;
 8004736:	e089      	b.n	800484c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004738:	78bb      	ldrb	r3, [r7, #2]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	212c      	movs	r1, #44	@ 0x2c
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	3355      	adds	r3, #85	@ 0x55
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	212c      	movs	r1, #44	@ 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3342      	adds	r3, #66	@ 0x42
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004764:	e073      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	212c      	movs	r1, #44	@ 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3342      	adds	r3, #66	@ 0x42
 8004774:	2202      	movs	r2, #2
 8004776:	701a      	strb	r2, [r3, #0]
      break;
 8004778:	e069      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	212c      	movs	r1, #44	@ 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3354      	adds	r3, #84	@ 0x54
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	212c      	movs	r1, #44	@ 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	3342      	adds	r3, #66	@ 0x42
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
      break;
 80047a0:	e055      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	212c      	movs	r1, #44	@ 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3342      	adds	r3, #66	@ 0x42
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
      break;
 80047b4:	e04b      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80047b6:	78bb      	ldrb	r3, [r7, #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	212c      	movs	r1, #44	@ 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3355      	adds	r3, #85	@ 0x55
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	212c      	movs	r1, #44	@ 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3342      	adds	r3, #66	@ 0x42
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047e2:	e034      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	212c      	movs	r1, #44	@ 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	3342      	adds	r3, #66	@ 0x42
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
      break;
 80047f6:	e02a      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	212c      	movs	r1, #44	@ 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3354      	adds	r3, #84	@ 0x54
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	212c      	movs	r1, #44	@ 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3342      	adds	r3, #66	@ 0x42
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
      break;
 800481e:	e016      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	212c      	movs	r1, #44	@ 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3342      	adds	r3, #66	@ 0x42
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
      break;
 8004832:	e00c      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	212c      	movs	r1, #44	@ 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3342      	adds	r3, #66	@ 0x42
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
      break;
 8004846:	e002      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004848:	bf00      	nop
 800484a:	e000      	b.n	800484e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800484c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	212c      	movs	r1, #44	@ 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3344      	adds	r3, #68	@ 0x44
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	8b3a      	ldrh	r2, [r7, #24]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	202c      	movs	r0, #44	@ 0x2c
 8004868:	fb00 f303 	mul.w	r3, r0, r3
 800486c:	440b      	add	r3, r1
 800486e:	334c      	adds	r3, #76	@ 0x4c
 8004870:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	212c      	movs	r1, #44	@ 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3360      	adds	r3, #96	@ 0x60
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	212c      	movs	r1, #44	@ 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3350      	adds	r3, #80	@ 0x50
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	212c      	movs	r1, #44	@ 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3339      	adds	r3, #57	@ 0x39
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	212c      	movs	r1, #44	@ 0x2c
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	3361      	adds	r3, #97	@ 0x61
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	222c      	movs	r2, #44	@ 0x2c
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	3338      	adds	r3, #56	@ 0x38
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	18d1      	adds	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	f004 fe0a 	bl	80094ec <USB_HC_StartXfer>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop

080048e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f004 fb0b 	bl	8008f16 <USB_GetMode>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	f040 80f6 	bne.w	8004af4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f004 faef 	bl	8008ef0 <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80ec 	beq.w	8004af2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f004 fae6 	bl	8008ef0 <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800492a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800492e:	d104      	bne.n	800493a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004938:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f004 fad6 	bl	8008ef0 <USB_ReadInterrupts>
 8004944:	4603      	mov	r3, r0
 8004946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800494a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494e:	d104      	bne.n	800495a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004958:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fac6 	bl	8008ef0 <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800496a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800496e:	d104      	bne.n	800497a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004978:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f004 fab6 	bl	8008ef0 <USB_ReadInterrupts>
 8004984:	4603      	mov	r3, r0
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d103      	bne.n	8004996 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2202      	movs	r2, #2
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f004 faa8 	bl	8008ef0 <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049aa:	d11c      	bne.n	80049e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80049b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10f      	bne.n	80049e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80049c6:	2110      	movs	r1, #16
 80049c8:	6938      	ldr	r0, [r7, #16]
 80049ca:	f004 f997 	bl	8008cfc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80049ce:	6938      	ldr	r0, [r7, #16]
 80049d0:	f004 f9c8 	bl	8008d64 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 fb9e 	bl	800911c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f00b fe7b 	bl	80106dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 fa80 	bl	8008ef0 <USB_ReadInterrupts>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049fa:	d102      	bne.n	8004a02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f001 f89e 	bl	8005b3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 fa72 	bl	8008ef0 <USB_ReadInterrupts>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d106      	bne.n	8004a24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f00b fe44 	bl	80106a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2208      	movs	r2, #8
 8004a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f004 fa61 	bl	8008ef0 <USB_ReadInterrupts>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d101      	bne.n	8004a3c <HAL_HCD_IRQHandler+0x158>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_HCD_IRQHandler+0x15a>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d012      	beq.n	8004a68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0210 	bic.w	r2, r2, #16
 8004a50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 ffa1 	bl	800599a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0210 	orr.w	r2, r2, #16
 8004a66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 fa3f 	bl	8008ef0 <USB_ReadInterrupts>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a7c:	d13a      	bne.n	8004af4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f004 fe74 	bl	8009770 <USB_HC_ReadInterrupt>
 8004a88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e025      	b.n	8004adc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d018      	beq.n	8004ad6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aba:	d106      	bne.n	8004aca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8ab 	bl	8004c1e <HCD_HC_IN_IRQHandler>
 8004ac8:	e005      	b.n	8004ad6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fbf9 	bl	80052c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3d4      	bcc.n	8004a90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aee:	615a      	str	r2, [r3, #20]
 8004af0:	e000      	b.n	8004af4 <HAL_HCD_IRQHandler+0x210>
      return;
 8004af2:	bf00      	nop
    }
  }
}
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_HCD_Start+0x16>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e013      	b.n	8004b38 <HAL_HCD_Start+0x3e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f004 fb60 	bl	80091e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f004 f878 	bl	8008c1e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_HCD_Stop+0x16>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e00d      	b.n	8004b72 <HAL_HCD_Stop+0x32>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f004 ff4e 	bl	8009a04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 fb02 	bl	8009190 <USB_ResetPort>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	212c      	movs	r1, #44	@ 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3360      	adds	r3, #96	@ 0x60
 8004bb0:	781b      	ldrb	r3, [r3, #0]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	212c      	movs	r1, #44	@ 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3350      	adds	r3, #80	@ 0x50
 8004bd8:	681b      	ldr	r3, [r3, #0]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 fb46 	bl	8009284 <USB_GetCurrentFrame>
 8004bf8:	4603      	mov	r3, r0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f004 fb21 	bl	8009256 <USB_GetHostSpeed>
 8004c14:	4603      	mov	r3, r0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d11a      	bne.n	8004c84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	212c      	movs	r1, #44	@ 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3361      	adds	r3, #97	@ 0x61
 8004c6e:	2206      	movs	r2, #6
 8004c70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f004 fd88 	bl	8009792 <USB_HC_Halt>
 8004c82:	e0af      	b.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9a:	d11b      	bne.n	8004cd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	212c      	movs	r1, #44	@ 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3361      	adds	r3, #97	@ 0x61
 8004cbe:	2207      	movs	r2, #7
 8004cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f004 fd60 	bl	8009792 <USB_HC_Halt>
 8004cd2:	e087      	b.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d109      	bne.n	8004cfe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	6093      	str	r3, [r2, #8]
 8004cfc:	e072      	b.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d11a      	bne.n	8004d4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	2308      	movs	r3, #8
 8004d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	212c      	movs	r1, #44	@ 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3361      	adds	r3, #97	@ 0x61
 8004d34:	2205      	movs	r2, #5
 8004d36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f004 fd25 	bl	8009792 <USB_HC_Halt>
 8004d48:	e04c      	b.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d60:	d11b      	bne.n	8004d9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	212c      	movs	r1, #44	@ 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	3361      	adds	r3, #97	@ 0x61
 8004d84:	2208      	movs	r2, #8
 8004d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 fcfd 	bl	8009792 <USB_HC_Halt>
 8004d98:	e024      	b.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dac:	2b80      	cmp	r3, #128	@ 0x80
 8004dae:	d119      	bne.n	8004de4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	212c      	movs	r1, #44	@ 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3361      	adds	r3, #97	@ 0x61
 8004dd0:	2206      	movs	r2, #6
 8004dd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fcd7 	bl	8009792 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfa:	d112      	bne.n	8004e22 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fcc3 	bl	8009792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e20:	e24e      	b.n	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 80df 	bne.w	8004ff8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d019      	beq.n	8004e76 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	212c      	movs	r1, #44	@ 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3348      	adds	r3, #72	@ 0x48
 8004e50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	0159      	lsls	r1, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	440b      	add	r3, r1
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e64:	1ad2      	subs	r2, r2, r3
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	202c      	movs	r0, #44	@ 0x2c
 8004e6c:	fb00 f303 	mul.w	r3, r0, r3
 8004e70:	440b      	add	r3, r1
 8004e72:	3350      	adds	r3, #80	@ 0x50
 8004e74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	212c      	movs	r1, #44	@ 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3361      	adds	r3, #97	@ 0x61
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	212c      	movs	r1, #44	@ 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	335c      	adds	r3, #92	@ 0x5c
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	212c      	movs	r1, #44	@ 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	333f      	adds	r3, #63	@ 0x3f
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d009      	beq.n	8004ed4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	212c      	movs	r1, #44	@ 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	333f      	adds	r3, #63	@ 0x3f
 8004ece:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d111      	bne.n	8004ef8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 fc57 	bl	8009792 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	6093      	str	r3, [r2, #8]
 8004ef6:	e03a      	b.n	8004f6e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	212c      	movs	r1, #44	@ 0x2c
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	333f      	adds	r3, #63	@ 0x3f
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d009      	beq.n	8004f20 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	212c      	movs	r1, #44	@ 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	333f      	adds	r3, #63	@ 0x3f
 8004f1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d126      	bne.n	8004f6e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	212c      	movs	r1, #44	@ 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3360      	adds	r3, #96	@ 0x60
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	b2d9      	uxtb	r1, r3
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	202c      	movs	r0, #44	@ 0x2c
 8004f5c:	fb00 f303 	mul.w	r3, r0, r3
 8004f60:	4413      	add	r3, r2
 8004f62:	3360      	adds	r3, #96	@ 0x60
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f00b fbc5 	bl	80106f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d12b      	bne.n	8004fce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	212c      	movs	r1, #44	@ 0x2c
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	3348      	adds	r3, #72	@ 0x48
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	202c      	movs	r0, #44	@ 0x2c
 8004f8c:	fb00 f202 	mul.w	r2, r0, r2
 8004f90:	440a      	add	r2, r1
 8004f92:	3240      	adds	r2, #64	@ 0x40
 8004f94:	8812      	ldrh	r2, [r2, #0]
 8004f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 818e 	beq.w	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	212c      	movs	r1, #44	@ 0x2c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3354      	adds	r3, #84	@ 0x54
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	f083 0301 	eor.w	r3, r3, #1
 8004fb8:	b2d8      	uxtb	r0, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	212c      	movs	r1, #44	@ 0x2c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3354      	adds	r3, #84	@ 0x54
 8004fc8:	4602      	mov	r2, r0
 8004fca:	701a      	strb	r2, [r3, #0]
}
 8004fcc:	e178      	b.n	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	212c      	movs	r1, #44	@ 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3354      	adds	r3, #84	@ 0x54
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f083 0301 	eor.w	r3, r3, #1
 8004fe2:	b2d8      	uxtb	r0, r3
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	212c      	movs	r1, #44	@ 0x2c
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3354      	adds	r3, #84	@ 0x54
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	701a      	strb	r2, [r3, #0]
}
 8004ff6:	e163      	b.n	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	f040 80f6 	bne.w	80051fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	212c      	movs	r1, #44	@ 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	3361      	adds	r3, #97	@ 0x61
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d109      	bne.n	8005038 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	212c      	movs	r1, #44	@ 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3360      	adds	r3, #96	@ 0x60
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e0c9      	b.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	212c      	movs	r1, #44	@ 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3361      	adds	r3, #97	@ 0x61
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b05      	cmp	r3, #5
 800504a:	d109      	bne.n	8005060 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	212c      	movs	r1, #44	@ 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3360      	adds	r3, #96	@ 0x60
 800505a:	2205      	movs	r2, #5
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e0b5      	b.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	212c      	movs	r1, #44	@ 0x2c
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3361      	adds	r3, #97	@ 0x61
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b06      	cmp	r3, #6
 8005072:	d009      	beq.n	8005088 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	212c      	movs	r1, #44	@ 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3361      	adds	r3, #97	@ 0x61
 8005082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005084:	2b08      	cmp	r3, #8
 8005086:	d150      	bne.n	800512a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	212c      	movs	r1, #44	@ 0x2c
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	335c      	adds	r3, #92	@ 0x5c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	202c      	movs	r0, #44	@ 0x2c
 80050a0:	fb00 f303 	mul.w	r3, r0, r3
 80050a4:	440b      	add	r3, r1
 80050a6:	335c      	adds	r3, #92	@ 0x5c
 80050a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	212c      	movs	r1, #44	@ 0x2c
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	4413      	add	r3, r2
 80050b6:	335c      	adds	r3, #92	@ 0x5c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d912      	bls.n	80050e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	212c      	movs	r1, #44	@ 0x2c
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	335c      	adds	r3, #92	@ 0x5c
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	212c      	movs	r1, #44	@ 0x2c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	3360      	adds	r3, #96	@ 0x60
 80050de:	2204      	movs	r2, #4
 80050e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050e2:	e073      	b.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	212c      	movs	r1, #44	@ 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	3360      	adds	r3, #96	@ 0x60
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800510c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005114:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005128:	e050      	b.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	212c      	movs	r1, #44	@ 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	3361      	adds	r3, #97	@ 0x61
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d122      	bne.n	8005184 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	212c      	movs	r1, #44	@ 0x2c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	3360      	adds	r3, #96	@ 0x60
 800514c:	2202      	movs	r2, #2
 800514e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005166:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800516e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e023      	b.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	212c      	movs	r1, #44	@ 0x2c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	4413      	add	r3, r2
 8005190:	3361      	adds	r3, #97	@ 0x61
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b07      	cmp	r3, #7
 8005196:	d119      	bne.n	80051cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	212c      	movs	r1, #44	@ 0x2c
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	335c      	adds	r3, #92	@ 0x5c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	202c      	movs	r0, #44	@ 0x2c
 80051b0:	fb00 f303 	mul.w	r3, r0, r3
 80051b4:	440b      	add	r3, r1
 80051b6:	335c      	adds	r3, #92	@ 0x5c
 80051b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	212c      	movs	r1, #44	@ 0x2c
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	4413      	add	r3, r2
 80051c6:	3360      	adds	r3, #96	@ 0x60
 80051c8:	2204      	movs	r2, #4
 80051ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d8:	461a      	mov	r2, r3
 80051da:	2302      	movs	r3, #2
 80051dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	b2d9      	uxtb	r1, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	202c      	movs	r0, #44	@ 0x2c
 80051e8:	fb00 f303 	mul.w	r3, r0, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	3360      	adds	r3, #96	@ 0x60
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f00b fa7f 	bl	80106f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051fa:	e061      	b.n	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d156      	bne.n	80052c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	212c      	movs	r1, #44	@ 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	333f      	adds	r3, #63	@ 0x3f
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d111      	bne.n	800524a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	212c      	movs	r1, #44	@ 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	335c      	adds	r3, #92	@ 0x5c
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f004 faa5 	bl	8009792 <USB_HC_Halt>
 8005248:	e031      	b.n	80052ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	212c      	movs	r1, #44	@ 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	333f      	adds	r3, #63	@ 0x3f
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	212c      	movs	r1, #44	@ 0x2c
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	333f      	adds	r3, #63	@ 0x3f
 800526c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800526e:	2b02      	cmp	r3, #2
 8005270:	d11d      	bne.n	80052ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	212c      	movs	r1, #44	@ 0x2c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	335c      	adds	r3, #92	@ 0x5c
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d110      	bne.n	80052ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	@ 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3361      	adds	r3, #97	@ 0x61
 800529a:	2203      	movs	r2, #3
 800529c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f004 fa72 	bl	8009792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ba:	461a      	mov	r2, r3
 80052bc:	2310      	movs	r3, #16
 80052be:	6093      	str	r3, [r2, #8]
}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d11a      	bne.n	800532e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	2304      	movs	r3, #4
 8005308:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	212c      	movs	r1, #44	@ 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3361      	adds	r3, #97	@ 0x61
 8005318:	2206      	movs	r2, #6
 800531a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f004 fa33 	bl	8009792 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800532c:	e331      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d12e      	bne.n	80053a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005350:	461a      	mov	r2, r3
 8005352:	2320      	movs	r3, #32
 8005354:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	212c      	movs	r1, #44	@ 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	333d      	adds	r3, #61	@ 0x3d
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b01      	cmp	r3, #1
 8005368:	f040 8313 	bne.w	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	212c      	movs	r1, #44	@ 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	333d      	adds	r3, #61	@ 0x3d
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	212c      	movs	r1, #44	@ 0x2c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	3360      	adds	r3, #96	@ 0x60
 800538c:	2202      	movs	r2, #2
 800538e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f004 f9f9 	bl	8009792 <USB_HC_Halt>
}
 80053a0:	e2f7      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b8:	d112      	bne.n	80053e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c6:	461a      	mov	r2, r3
 80053c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 f9da 	bl	8009792 <USB_HC_Halt>
}
 80053de:	e2d8      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d140      	bne.n	8005478 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	212c      	movs	r1, #44	@ 0x2c
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	4413      	add	r3, r2
 8005402:	335c      	adds	r3, #92	@ 0x5c
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d111      	bne.n	8005442 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	212c      	movs	r1, #44	@ 0x2c
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	333d      	adds	r3, #61	@ 0x3d
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800543c:	461a      	mov	r2, r3
 800543e:	2340      	movs	r3, #64	@ 0x40
 8005440:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544e:	461a      	mov	r2, r3
 8005450:	2301      	movs	r3, #1
 8005452:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	212c      	movs	r1, #44	@ 0x2c
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	3361      	adds	r3, #97	@ 0x61
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f004 f98e 	bl	8009792 <USB_HC_Halt>
}
 8005476:	e28c      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	d12c      	bne.n	80054e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	212c      	movs	r1, #44	@ 0x2c
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	3361      	adds	r3, #97	@ 0x61
 800549c:	2204      	movs	r2, #4
 800549e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	212c      	movs	r1, #44	@ 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	333d      	adds	r3, #61	@ 0x3d
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	212c      	movs	r1, #44	@ 0x2c
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	335c      	adds	r3, #92	@ 0x5c
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 f95f 	bl	8009792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e0:	461a      	mov	r2, r3
 80054e2:	2340      	movs	r3, #64	@ 0x40
 80054e4:	6093      	str	r3, [r2, #8]
}
 80054e6:	e254      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d11a      	bne.n	8005534 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550a:	461a      	mov	r2, r3
 800550c:	2308      	movs	r3, #8
 800550e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	212c      	movs	r1, #44	@ 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	3361      	adds	r3, #97	@ 0x61
 800551e:	2205      	movs	r2, #5
 8005520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f004 f930 	bl	8009792 <USB_HC_Halt>
}
 8005532:	e22e      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d140      	bne.n	80055cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	212c      	movs	r1, #44	@ 0x2c
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	4413      	add	r3, r2
 8005556:	335c      	adds	r3, #92	@ 0x5c
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	212c      	movs	r1, #44	@ 0x2c
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	4413      	add	r3, r2
 8005568:	3361      	adds	r3, #97	@ 0x61
 800556a:	2203      	movs	r2, #3
 800556c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	212c      	movs	r1, #44	@ 0x2c
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	333d      	adds	r3, #61	@ 0x3d
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d112      	bne.n	80055a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	212c      	movs	r1, #44	@ 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	333c      	adds	r3, #60	@ 0x3c
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	212c      	movs	r1, #44	@ 0x2c
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	333d      	adds	r3, #61	@ 0x3d
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f004 f8ed 	bl	8009792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c4:	461a      	mov	r2, r3
 80055c6:	2310      	movs	r3, #16
 80055c8:	6093      	str	r3, [r2, #8]
}
 80055ca:	e1e2      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b80      	cmp	r3, #128	@ 0x80
 80055e0:	d164      	bne.n	80056ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d111      	bne.n	800560e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	212c      	movs	r1, #44	@ 0x2c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	3361      	adds	r3, #97	@ 0x61
 80055f8:	2206      	movs	r2, #6
 80055fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f004 f8c3 	bl	8009792 <USB_HC_Halt>
 800560c:	e044      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	212c      	movs	r1, #44	@ 0x2c
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	4413      	add	r3, r2
 800561a:	335c      	adds	r3, #92	@ 0x5c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	202c      	movs	r0, #44	@ 0x2c
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	440b      	add	r3, r1
 800562c:	335c      	adds	r3, #92	@ 0x5c
 800562e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	212c      	movs	r1, #44	@ 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	335c      	adds	r3, #92	@ 0x5c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d920      	bls.n	8005686 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	212c      	movs	r1, #44	@ 0x2c
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	335c      	adds	r3, #92	@ 0x5c
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	212c      	movs	r1, #44	@ 0x2c
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	3360      	adds	r3, #96	@ 0x60
 8005664:	2204      	movs	r2, #4
 8005666:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	b2d9      	uxtb	r1, r3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	202c      	movs	r0, #44	@ 0x2c
 8005672:	fb00 f303 	mul.w	r3, r0, r3
 8005676:	4413      	add	r3, r2
 8005678:	3360      	adds	r3, #96	@ 0x60
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f00b f83a 	bl	80106f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005684:	e008      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	212c      	movs	r1, #44	@ 0x2c
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	3360      	adds	r3, #96	@ 0x60
 8005694:	2202      	movs	r2, #2
 8005696:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a4:	461a      	mov	r2, r3
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	6093      	str	r3, [r2, #8]
}
 80056aa:	e172      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c2:	d11b      	bne.n	80056fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	212c      	movs	r1, #44	@ 0x2c
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	3361      	adds	r3, #97	@ 0x61
 80056d2:	2208      	movs	r2, #8
 80056d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f004 f856 	bl	8009792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056f8:	6093      	str	r3, [r2, #8]
}
 80056fa:	e14a      	b.n	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	f040 813f 	bne.w	8005992 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	212c      	movs	r1, #44	@ 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3361      	adds	r3, #97	@ 0x61
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d17d      	bne.n	8005824 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	212c      	movs	r1, #44	@ 0x2c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	3360      	adds	r3, #96	@ 0x60
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	212c      	movs	r1, #44	@ 0x2c
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	333f      	adds	r3, #63	@ 0x3f
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d00a      	beq.n	8005764 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	212c      	movs	r1, #44	@ 0x2c
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	333f      	adds	r3, #63	@ 0x3f
 800575c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800575e:	2b03      	cmp	r3, #3
 8005760:	f040 8100 	bne.w	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d113      	bne.n	8005794 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	212c      	movs	r1, #44	@ 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	3355      	adds	r3, #85	@ 0x55
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f083 0301 	eor.w	r3, r3, #1
 8005780:	b2d8      	uxtb	r0, r3
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	212c      	movs	r1, #44	@ 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3355      	adds	r3, #85	@ 0x55
 8005790:	4602      	mov	r2, r0
 8005792:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 80e3 	bne.w	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	212c      	movs	r1, #44	@ 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	334c      	adds	r3, #76	@ 0x4c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80d8 	beq.w	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	212c      	movs	r1, #44	@ 0x2c
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	4413      	add	r3, r2
 80057c0:	334c      	adds	r3, #76	@ 0x4c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	202c      	movs	r0, #44	@ 0x2c
 80057ca:	fb00 f202 	mul.w	r2, r0, r2
 80057ce:	440a      	add	r2, r1
 80057d0:	3240      	adds	r2, #64	@ 0x40
 80057d2:	8812      	ldrh	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	3b01      	subs	r3, #1
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	202c      	movs	r0, #44	@ 0x2c
 80057de:	fb00 f202 	mul.w	r2, r0, r2
 80057e2:	440a      	add	r2, r1
 80057e4:	3240      	adds	r2, #64	@ 0x40
 80057e6:	8812      	ldrh	r2, [r2, #0]
 80057e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80b5 	beq.w	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	212c      	movs	r1, #44	@ 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	3355      	adds	r3, #85	@ 0x55
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f083 0301 	eor.w	r3, r3, #1
 800580e:	b2d8      	uxtb	r0, r3
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	212c      	movs	r1, #44	@ 0x2c
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	4413      	add	r3, r2
 800581c:	3355      	adds	r3, #85	@ 0x55
 800581e:	4602      	mov	r2, r0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e09f      	b.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	212c      	movs	r1, #44	@ 0x2c
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	3361      	adds	r3, #97	@ 0x61
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d109      	bne.n	800584c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	212c      	movs	r1, #44	@ 0x2c
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	4413      	add	r3, r2
 8005844:	3360      	adds	r3, #96	@ 0x60
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e08b      	b.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	212c      	movs	r1, #44	@ 0x2c
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	4413      	add	r3, r2
 8005858:	3361      	adds	r3, #97	@ 0x61
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d109      	bne.n	8005874 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	212c      	movs	r1, #44	@ 0x2c
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	3360      	adds	r3, #96	@ 0x60
 800586e:	2202      	movs	r2, #2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e077      	b.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	212c      	movs	r1, #44	@ 0x2c
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3361      	adds	r3, #97	@ 0x61
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d109      	bne.n	800589c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	212c      	movs	r1, #44	@ 0x2c
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	3360      	adds	r3, #96	@ 0x60
 8005896:	2205      	movs	r2, #5
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e063      	b.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	212c      	movs	r1, #44	@ 0x2c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3361      	adds	r3, #97	@ 0x61
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d009      	beq.n	80058c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	212c      	movs	r1, #44	@ 0x2c
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	3361      	adds	r3, #97	@ 0x61
 80058be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d14f      	bne.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	212c      	movs	r1, #44	@ 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	335c      	adds	r3, #92	@ 0x5c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	202c      	movs	r0, #44	@ 0x2c
 80058dc:	fb00 f303 	mul.w	r3, r0, r3
 80058e0:	440b      	add	r3, r1
 80058e2:	335c      	adds	r3, #92	@ 0x5c
 80058e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	212c      	movs	r1, #44	@ 0x2c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	335c      	adds	r3, #92	@ 0x5c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d912      	bls.n	8005920 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	212c      	movs	r1, #44	@ 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	335c      	adds	r3, #92	@ 0x5c
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	212c      	movs	r1, #44	@ 0x2c
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	3360      	adds	r3, #96	@ 0x60
 800591a:	2204      	movs	r2, #4
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e021      	b.n	8005964 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	212c      	movs	r1, #44	@ 0x2c
 8005926:	fb01 f303 	mul.w	r3, r1, r3
 800592a:	4413      	add	r3, r2
 800592c:	3360      	adds	r3, #96	@ 0x60
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005948:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005950:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595e:	461a      	mov	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	2302      	movs	r3, #2
 8005974:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	b2d9      	uxtb	r1, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	202c      	movs	r0, #44	@ 0x2c
 8005980:	fb00 f303 	mul.w	r3, r0, r3
 8005984:	4413      	add	r3, r2
 8005986:	3360      	adds	r3, #96	@ 0x60
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f00a feb3 	bl	80106f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005992:	bf00      	nop
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b08a      	sub	sp, #40	@ 0x28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	0c5b      	lsrs	r3, r3, #17
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d004      	beq.n	80059e0 <HCD_RXQLVL_IRQHandler+0x46>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b05      	cmp	r3, #5
 80059da:	f000 80a9 	beq.w	8005b30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059de:	e0aa      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a6 	beq.w	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	212c      	movs	r1, #44	@ 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	3344      	adds	r3, #68	@ 0x44
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 809b 	beq.w	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	212c      	movs	r1, #44	@ 0x2c
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	3350      	adds	r3, #80	@ 0x50
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	441a      	add	r2, r3
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	202c      	movs	r0, #44	@ 0x2c
 8005a18:	fb00 f303 	mul.w	r3, r0, r3
 8005a1c:	440b      	add	r3, r1
 8005a1e:	334c      	adds	r3, #76	@ 0x4c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d87a      	bhi.n	8005b1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	212c      	movs	r1, #44	@ 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	3344      	adds	r3, #68	@ 0x44
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	b292      	uxth	r2, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f003 f9fe 	bl	8008e40 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	212c      	movs	r1, #44	@ 0x2c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	3344      	adds	r3, #68	@ 0x44
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	441a      	add	r2, r3
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	202c      	movs	r0, #44	@ 0x2c
 8005a5e:	fb00 f303 	mul.w	r3, r0, r3
 8005a62:	440b      	add	r3, r1
 8005a64:	3344      	adds	r3, #68	@ 0x44
 8005a66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	212c      	movs	r1, #44	@ 0x2c
 8005a6e:	fb01 f303 	mul.w	r3, r1, r3
 8005a72:	4413      	add	r3, r2
 8005a74:	3350      	adds	r3, #80	@ 0x50
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	441a      	add	r2, r3
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	202c      	movs	r0, #44	@ 0x2c
 8005a82:	fb00 f303 	mul.w	r3, r0, r3
 8005a86:	440b      	add	r3, r1
 8005a88:	3350      	adds	r3, #80	@ 0x50
 8005a8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	0cdb      	lsrs	r3, r3, #19
 8005a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	212c      	movs	r1, #44	@ 0x2c
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	3340      	adds	r3, #64	@ 0x40
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d13c      	bne.n	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d039      	beq.n	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ad6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ade:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	212c      	movs	r1, #44	@ 0x2c
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	3354      	adds	r3, #84	@ 0x54
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f083 0301 	eor.w	r3, r3, #1
 8005b06:	b2d8      	uxtb	r0, r3
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	212c      	movs	r1, #44	@ 0x2c
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	3354      	adds	r3, #84	@ 0x54
 8005b16:	4602      	mov	r2, r0
 8005b18:	701a      	strb	r2, [r3, #0]
      break;
 8005b1a:	e00b      	b.n	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	212c      	movs	r1, #44	@ 0x2c
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	3360      	adds	r3, #96	@ 0x60
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	e001      	b.n	8005b34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005b34:	bf00      	nop
  }
}
 8005b36:	bf00      	nop
 8005b38:	3728      	adds	r7, #40	@ 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d10b      	bne.n	8005b8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d102      	bne.n	8005b86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f00a fd9d 	bl	80106c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d132      	bne.n	8005bfe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f043 0308 	orr.w	r3, r3, #8
 8005b9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d126      	bne.n	8005bf8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d113      	bne.n	8005bda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005bb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bbc:	d106      	bne.n	8005bcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f003 faa9 	bl	800911c <USB_InitFSLSPClkSel>
 8005bca:	e011      	b.n	8005bf0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f003 faa2 	bl	800911c <USB_InitFSLSPClkSel>
 8005bd8:	e00a      	b.n	8005bf0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d106      	bne.n	8005bf0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005be8:	461a      	mov	r2, r3
 8005bea:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005bee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f00a fd93 	bl	801071c <HAL_HCD_PortEnabled_Callback>
 8005bf6:	e002      	b.n	8005bfe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f00a fd9d 	bl	8010738 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d103      	bne.n	8005c10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f043 0320 	orr.w	r3, r3, #32
 8005c0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6013      	str	r3, [r2, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e12b      	b.n	8005e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fd fc74 	bl	8003538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	@ 0x24
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c88:	f001 fa20 	bl	80070cc <HAL_RCC_GetPCLK1Freq>
 8005c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4a81      	ldr	r2, [pc, #516]	@ (8005e98 <HAL_I2C_Init+0x274>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d807      	bhi.n	8005ca8 <HAL_I2C_Init+0x84>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a80      	ldr	r2, [pc, #512]	@ (8005e9c <HAL_I2C_Init+0x278>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bf94      	ite	ls
 8005ca0:	2301      	movls	r3, #1
 8005ca2:	2300      	movhi	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e006      	b.n	8005cb6 <HAL_I2C_Init+0x92>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ea0 <HAL_I2C_Init+0x27c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bf94      	ite	ls
 8005cb0:	2301      	movls	r3, #1
 8005cb2:	2300      	movhi	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0e7      	b.n	8005e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a78      	ldr	r2, [pc, #480]	@ (8005ea4 <HAL_I2C_Init+0x280>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0c9b      	lsrs	r3, r3, #18
 8005cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a6a      	ldr	r2, [pc, #424]	@ (8005e98 <HAL_I2C_Init+0x274>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d802      	bhi.n	8005cf8 <HAL_I2C_Init+0xd4>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	e009      	b.n	8005d0c <HAL_I2C_Init+0xe8>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	4a69      	ldr	r2, [pc, #420]	@ (8005ea8 <HAL_I2C_Init+0x284>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	099b      	lsrs	r3, r3, #6
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	495c      	ldr	r1, [pc, #368]	@ (8005e98 <HAL_I2C_Init+0x274>)
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	d819      	bhi.n	8005d60 <HAL_I2C_Init+0x13c>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1e59      	subs	r1, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d40:	400b      	ands	r3, r1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_I2C_Init+0x138>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e59      	subs	r1, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	e051      	b.n	8005e00 <HAL_I2C_Init+0x1dc>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	e04f      	b.n	8005e00 <HAL_I2C_Init+0x1dc>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d111      	bne.n	8005d8c <HAL_I2C_Init+0x168>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e58      	subs	r0, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	440b      	add	r3, r1
 8005d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	e012      	b.n	8005db2 <HAL_I2C_Init+0x18e>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1e58      	subs	r0, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6859      	ldr	r1, [r3, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	0099      	lsls	r1, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da2:	3301      	adds	r3, #1
 8005da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Init+0x196>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e022      	b.n	8005e00 <HAL_I2C_Init+0x1dc>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10e      	bne.n	8005de0 <HAL_I2C_Init+0x1bc>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1e58      	subs	r0, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	440b      	add	r3, r1
 8005dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dde:	e00f      	b.n	8005e00 <HAL_I2C_Init+0x1dc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1e58      	subs	r0, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6859      	ldr	r1, [r3, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	0099      	lsls	r1, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	6809      	ldr	r1, [r1, #0]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6911      	ldr	r1, [r2, #16]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68d2      	ldr	r2, [r2, #12]
 8005e3a:	4311      	orrs	r1, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	430b      	orrs	r3, r1
 8005e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	000186a0 	.word	0x000186a0
 8005e9c:	001e847f 	.word	0x001e847f
 8005ea0:	003d08ff 	.word	0x003d08ff
 8005ea4:	431bde83 	.word	0x431bde83
 8005ea8:	10624dd3 	.word	0x10624dd3

08005eac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e128      	b.n	8006110 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a90      	ldr	r2, [pc, #576]	@ (8006118 <HAL_I2S_Init+0x26c>)
 8005ed6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fd fb75 	bl	80035c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ef4:	f023 030f 	bic.w	r3, r3, #15
 8005ef8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2202      	movs	r2, #2
 8005f00:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d060      	beq.n	8005fcc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f12:	2310      	movs	r3, #16
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e001      	b.n	8005f1c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d802      	bhi.n	8005f2a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f001 fa0a 	bl	8007344 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f30:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3a:	d125      	bne.n	8005f88 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	3305      	adds	r3, #5
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	e01f      	b.n	8005fa6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	3305      	adds	r3, #5
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e00e      	b.n	8005fa6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4a5c      	ldr	r2, [pc, #368]	@ (800611c <HAL_I2S_Init+0x270>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	08db      	lsrs	r3, r3, #3
 8005fb0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e003      	b.n	8005fd4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d902      	bls.n	8005fe0 <HAL_I2S_Init+0x134>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2bff      	cmp	r3, #255	@ 0xff
 8005fde:	d907      	bls.n	8005ff0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	f043 0210 	orr.w	r2, r3, #16
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e08f      	b.n	8006110 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	ea42 0103 	orr.w	r1, r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	430a      	orrs	r2, r1
 8006002:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800600e:	f023 030f 	bic.w	r3, r3, #15
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6851      	ldr	r1, [r2, #4]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	4311      	orrs	r1, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68d2      	ldr	r2, [r2, #12]
 8006020:	4311      	orrs	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6992      	ldr	r2, [r2, #24]
 8006026:	430a      	orrs	r2, r1
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006032:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d161      	bne.n	8006100 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a38      	ldr	r2, [pc, #224]	@ (8006120 <HAL_I2S_Init+0x274>)
 8006040:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a37      	ldr	r2, [pc, #220]	@ (8006124 <HAL_I2S_Init+0x278>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d101      	bne.n	8006050 <HAL_I2S_Init+0x1a4>
 800604c:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <HAL_I2S_Init+0x27c>)
 800604e:	e001      	b.n	8006054 <HAL_I2S_Init+0x1a8>
 8006050:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	4932      	ldr	r1, [pc, #200]	@ (8006124 <HAL_I2S_Init+0x278>)
 800605c:	428a      	cmp	r2, r1
 800605e:	d101      	bne.n	8006064 <HAL_I2S_Init+0x1b8>
 8006060:	4a31      	ldr	r2, [pc, #196]	@ (8006128 <HAL_I2S_Init+0x27c>)
 8006062:	e001      	b.n	8006068 <HAL_I2S_Init+0x1bc>
 8006064:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006068:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800606c:	f023 030f 	bic.w	r3, r3, #15
 8006070:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2b      	ldr	r2, [pc, #172]	@ (8006124 <HAL_I2S_Init+0x278>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d101      	bne.n	8006080 <HAL_I2S_Init+0x1d4>
 800607c:	4b2a      	ldr	r3, [pc, #168]	@ (8006128 <HAL_I2S_Init+0x27c>)
 800607e:	e001      	b.n	8006084 <HAL_I2S_Init+0x1d8>
 8006080:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006084:	2202      	movs	r2, #2
 8006086:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a25      	ldr	r2, [pc, #148]	@ (8006124 <HAL_I2S_Init+0x278>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <HAL_I2S_Init+0x1ea>
 8006092:	4b25      	ldr	r3, [pc, #148]	@ (8006128 <HAL_I2S_Init+0x27c>)
 8006094:	e001      	b.n	800609a <HAL_I2S_Init+0x1ee>
 8006096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a6:	d003      	beq.n	80060b0 <HAL_I2S_Init+0x204>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e001      	b.n	80060bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060da:	4313      	orrs	r3, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80060e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006124 <HAL_I2S_Init+0x278>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_I2S_Init+0x24c>
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <HAL_I2S_Init+0x27c>)
 80060f6:	e001      	b.n	80060fc <HAL_I2S_Init+0x250>
 80060f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fc:	897a      	ldrh	r2, [r7, #10]
 80060fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	08006223 	.word	0x08006223
 800611c:	cccccccd 	.word	0xcccccccd
 8006120:	08006339 	.word	0x08006339
 8006124:	40003800 	.word	0x40003800
 8006128:	40003400 	.word	0x40003400

0800612c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	881a      	ldrh	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10e      	bne.n	80061bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ffb8 	bl	800612c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	b292      	uxth	r2, r2
 80061d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10e      	bne.n	800621a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800620a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff93 	bl	8006140 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b04      	cmp	r3, #4
 800623c:	d13a      	bne.n	80062b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d109      	bne.n	800625c <I2S_IRQHandler+0x3a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d102      	bne.n	800625c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ffb4 	bl	80061c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d126      	bne.n	80062b4 <I2S_IRQHandler+0x92>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d11f      	bne.n	80062b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006282:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff ff50 	bl	8006154 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d136      	bne.n	800632e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d109      	bne.n	80062de <I2S_IRQHandler+0xbc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b80      	cmp	r3, #128	@ 0x80
 80062d6:	d102      	bne.n	80062de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff45 	bl	8006168 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d122      	bne.n	800632e <I2S_IRQHandler+0x10c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d11b      	bne.n	800632e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006304:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006320:	f043 0204 	orr.w	r2, r3, #4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff13 	bl	8006154 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800632e:	bf00      	nop
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a92      	ldr	r2, [pc, #584]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006352:	4b92      	ldr	r3, [pc, #584]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006354:	e001      	b.n	800635a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006356:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a8b      	ldr	r2, [pc, #556]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006370:	4b8a      	ldr	r3, [pc, #552]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006372:	e001      	b.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006374:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006384:	d004      	beq.n	8006390 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 8099 	bne.w	80064c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d107      	bne.n	80063aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f925 	bl	80065f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d107      	bne.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9c8 	bl	8006754 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b40      	cmp	r3, #64	@ 0x40
 80063cc:	d13a      	bne.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d035      	beq.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063e2:	4b6e      	ldr	r3, [pc, #440]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063e4:	e001      	b.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4969      	ldr	r1, [pc, #420]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d101      	bne.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063f6:	4b69      	ldr	r3, [pc, #420]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063f8:	e001      	b.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80063fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006402:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006412:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	f043 0202 	orr.w	r2, r3, #2
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fe88 	bl	8006154 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b08      	cmp	r3, #8
 800644c:	f040 80c3 	bne.w	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80bd 	beq.w	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800646a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a49      	ldr	r2, [pc, #292]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d101      	bne.n	800647a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006476:	4b49      	ldr	r3, [pc, #292]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006478:	e001      	b.n	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800647a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4944      	ldr	r1, [pc, #272]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006486:	428b      	cmp	r3, r1
 8006488:	d101      	bne.n	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800648a:	4b44      	ldr	r3, [pc, #272]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800648c:	e001      	b.n	8006492 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800648e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006492:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006496:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006498:	2300      	movs	r3, #0
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f043 0204 	orr.w	r2, r3, #4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe4a 	bl	8006154 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064c0:	e089      	b.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d107      	bne.n	80064dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8be 	bl	8006658 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d107      	bne.n	80064f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8fd 	bl	80066f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d12f      	bne.n	8006560 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02a      	beq.n	8006560 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006518:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006524:	4b1d      	ldr	r3, [pc, #116]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006526:	e001      	b.n	800652c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006528:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4919      	ldr	r1, [pc, #100]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006534:	428b      	cmp	r3, r1
 8006536:	d101      	bne.n	800653c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006538:	4b18      	ldr	r3, [pc, #96]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800653a:	e001      	b.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800653c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006540:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006544:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	f043 0202 	orr.w	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fdfa 	bl	8006154 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b08      	cmp	r3, #8
 8006568:	d136      	bne.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a07      	ldr	r2, [pc, #28]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006580:	e001      	b.n	8006586 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006582:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4902      	ldr	r1, [pc, #8]	@ (8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800658e:	428b      	cmp	r3, r1
 8006590:	d106      	bne.n	80065a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006592:	4b02      	ldr	r3, [pc, #8]	@ (800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006594:	e006      	b.n	80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006596:	bf00      	nop
 8006598:	40003800 	.word	0x40003800
 800659c:	40003400 	.word	0x40003400
 80065a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80065a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff fdc0 	bl	8006154 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065d4:	e000      	b.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065d6:	bf00      	nop
}
 80065d8:	bf00      	nop
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	1c99      	adds	r1, r3, #2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6251      	str	r1, [r2, #36]	@ 0x24
 8006606:	881a      	ldrh	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d113      	bne.n	800664e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006634:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ffc9 	bl	80065e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	1c99      	adds	r1, r3, #2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6251      	str	r1, [r2, #36]	@ 0x24
 800666a:	8819      	ldrh	r1, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <I2SEx_TxISR_I2SExt+0x90>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <I2SEx_TxISR_I2SExt+0x22>
 8006676:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <I2SEx_TxISR_I2SExt+0x94>)
 8006678:	e001      	b.n	800667e <I2SEx_TxISR_I2SExt+0x26>
 800667a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800667e:	460a      	mov	r2, r1
 8006680:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d121      	bne.n	80066de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <I2SEx_TxISR_I2SExt+0x90>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <I2SEx_TxISR_I2SExt+0x50>
 80066a4:	4b11      	ldr	r3, [pc, #68]	@ (80066ec <I2SEx_TxISR_I2SExt+0x94>)
 80066a6:	e001      	b.n	80066ac <I2SEx_TxISR_I2SExt+0x54>
 80066a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	490d      	ldr	r1, [pc, #52]	@ (80066e8 <I2SEx_TxISR_I2SExt+0x90>)
 80066b4:	428b      	cmp	r3, r1
 80066b6:	d101      	bne.n	80066bc <I2SEx_TxISR_I2SExt+0x64>
 80066b8:	4b0c      	ldr	r3, [pc, #48]	@ (80066ec <I2SEx_TxISR_I2SExt+0x94>)
 80066ba:	e001      	b.n	80066c0 <I2SEx_TxISR_I2SExt+0x68>
 80066bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ff81 	bl	80065e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40003800 	.word	0x40003800
 80066ec:	40003400 	.word	0x40003400

080066f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68d8      	ldr	r0, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	1c99      	adds	r1, r3, #2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006708:	b282      	uxth	r2, r0
 800670a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d113      	bne.n	800674c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006732:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ff4a 	bl	80065e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a20      	ldr	r2, [pc, #128]	@ (80067e4 <I2SEx_RxISR_I2SExt+0x90>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <I2SEx_RxISR_I2SExt+0x16>
 8006766:	4b20      	ldr	r3, [pc, #128]	@ (80067e8 <I2SEx_RxISR_I2SExt+0x94>)
 8006768:	e001      	b.n	800676e <I2SEx_RxISR_I2SExt+0x1a>
 800676a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800676e:	68d8      	ldr	r0, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	1c99      	adds	r1, r3, #2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800677a:	b282      	uxth	r2, r0
 800677c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d121      	bne.n	80067da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <I2SEx_RxISR_I2SExt+0x90>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d101      	bne.n	80067a4 <I2SEx_RxISR_I2SExt+0x50>
 80067a0:	4b11      	ldr	r3, [pc, #68]	@ (80067e8 <I2SEx_RxISR_I2SExt+0x94>)
 80067a2:	e001      	b.n	80067a8 <I2SEx_RxISR_I2SExt+0x54>
 80067a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	490d      	ldr	r1, [pc, #52]	@ (80067e4 <I2SEx_RxISR_I2SExt+0x90>)
 80067b0:	428b      	cmp	r3, r1
 80067b2:	d101      	bne.n	80067b8 <I2SEx_RxISR_I2SExt+0x64>
 80067b4:	4b0c      	ldr	r3, [pc, #48]	@ (80067e8 <I2SEx_RxISR_I2SExt+0x94>)
 80067b6:	e001      	b.n	80067bc <I2SEx_RxISR_I2SExt+0x68>
 80067b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff03 	bl	80065e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40003800 	.word	0x40003800
 80067e8:	40003400 	.word	0x40003400

080067ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e267      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d075      	beq.n	80068f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	4b88      	ldr	r3, [pc, #544]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b04      	cmp	r3, #4
 8006814:	d00c      	beq.n	8006830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006816:	4b85      	ldr	r3, [pc, #532]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800681e:	2b08      	cmp	r3, #8
 8006820:	d112      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b82      	ldr	r3, [pc, #520]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800682a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800682e:	d10b      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	4b7e      	ldr	r3, [pc, #504]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05b      	beq.n	80068f4 <HAL_RCC_OscConfig+0x108>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d157      	bne.n	80068f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e242      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006850:	d106      	bne.n	8006860 <HAL_RCC_OscConfig+0x74>
 8006852:	4b76      	ldr	r3, [pc, #472]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a75      	ldr	r2, [pc, #468]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e01d      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x98>
 800686a:	4b70      	ldr	r3, [pc, #448]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b6d      	ldr	r3, [pc, #436]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a6c      	ldr	r2, [pc, #432]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e00b      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006884:	4b69      	ldr	r3, [pc, #420]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a68      	ldr	r2, [pc, #416]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4b66      	ldr	r3, [pc, #408]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a65      	ldr	r2, [pc, #404]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800689a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fd fa04 	bl	8003cb0 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fd fa00 	bl	8003cb0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	@ 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e207      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b5b      	ldr	r3, [pc, #364]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0xc0>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fd f9f0 	bl	8003cb0 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fd f9ec 	bl	8003cb0 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e1f3      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	4b51      	ldr	r3, [pc, #324]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0xe8>
 80068f2:	e000      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	4b4a      	ldr	r3, [pc, #296]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b47      	ldr	r3, [pc, #284]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11c      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b44      	ldr	r3, [pc, #272]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	4b41      	ldr	r3, [pc, #260]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e1c7      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4937      	ldr	r1, [pc, #220]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	e03a      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800695c:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <HAL_RCC_OscConfig+0x244>)
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006962:	f7fd f9a5 	bl	8003cb0 <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696a:	f7fd f9a1 	bl	8003cb0 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e1a8      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006988:	4b28      	ldr	r3, [pc, #160]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4925      	ldr	r1, [pc, #148]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
 800699c:	e015      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699e:	4b24      	ldr	r3, [pc, #144]	@ (8006a30 <HAL_RCC_OscConfig+0x244>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fd f984 	bl	8003cb0 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fd f980 	bl	8003cb0 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e187      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	4b1b      	ldr	r3, [pc, #108]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d036      	beq.n	8006a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069de:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <HAL_RCC_OscConfig+0x248>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fd f964 	bl	8003cb0 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fd f960 	bl	8003cb0 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e167      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <HAL_RCC_OscConfig+0x240>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x200>
 8006a0a:	e01b      	b.n	8006a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0c:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <HAL_RCC_OscConfig+0x248>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a12:	f7fd f94d 	bl	8003cb0 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	e00e      	b.n	8006a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1a:	f7fd f949 	bl	8003cb0 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d907      	bls.n	8006a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e150      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	42470000 	.word	0x42470000
 8006a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a38:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ea      	bne.n	8006a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8097 	beq.w	8006b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a56:	4b81      	ldr	r3, [pc, #516]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	4b7d      	ldr	r3, [pc, #500]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a72:	4b7a      	ldr	r3, [pc, #488]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	4b77      	ldr	r3, [pc, #476]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8e:	4b74      	ldr	r3, [pc, #464]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a73      	ldr	r2, [pc, #460]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a9a:	f7fd f909 	bl	8003cb0 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fd f905 	bl	8003cb0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e10c      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c60 <HAL_RCC_OscConfig+0x474>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x2ea>
 8006ac8:	4b64      	ldr	r3, [pc, #400]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006acc:	4a63      	ldr	r2, [pc, #396]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad4:	e01c      	b.n	8006b10 <HAL_RCC_OscConfig+0x324>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x30c>
 8006ade:	4b5f      	ldr	r3, [pc, #380]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aea:	4b5c      	ldr	r3, [pc, #368]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	4a5b      	ldr	r2, [pc, #364]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0x324>
 8006af8:	4b58      	ldr	r3, [pc, #352]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afc:	4a57      	ldr	r2, [pc, #348]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b04:	4b55      	ldr	r3, [pc, #340]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b08:	4a54      	ldr	r2, [pc, #336]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b0a:	f023 0304 	bic.w	r3, r3, #4
 8006b0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b18:	f7fd f8ca 	bl	8003cb0 <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b20:	f7fd f8c6 	bl	8003cb0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e0cb      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b36:	4b49      	ldr	r3, [pc, #292]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0ee      	beq.n	8006b20 <HAL_RCC_OscConfig+0x334>
 8006b42:	e014      	b.n	8006b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b44:	f7fd f8b4 	bl	8003cb0 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fd f8b0 	bl	8003cb0 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0b5      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b62:	4b3e      	ldr	r3, [pc, #248]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ee      	bne.n	8006b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b74:	4b39      	ldr	r3, [pc, #228]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	4a38      	ldr	r2, [pc, #224]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80a1 	beq.w	8006ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b8a:	4b34      	ldr	r3, [pc, #208]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d05c      	beq.n	8006c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d141      	bne.n	8006c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9e:	4b31      	ldr	r3, [pc, #196]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fd f884 	bl	8003cb0 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fd f880 	bl	8003cb0 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e087      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	4b27      	ldr	r3, [pc, #156]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	491b      	ldr	r1, [pc, #108]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfa:	f7fd f859 	bl	8003cb0 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c02:	f7fd f855 	bl	8003cb0 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e05c      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c14:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x416>
 8006c20:	e054      	b.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c22:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <HAL_RCC_OscConfig+0x478>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fd f842 	bl	8003cb0 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fd f83e 	bl	8003cb0 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e045      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <HAL_RCC_OscConfig+0x470>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x444>
 8006c4e:	e03d      	b.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e038      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40007000 	.word	0x40007000
 8006c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c68:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd8 <HAL_RCC_OscConfig+0x4ec>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d028      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d121      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d11a      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d111      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40023800 	.word	0x40023800

08006cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0cc      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b68      	ldr	r3, [pc, #416]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d90c      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b65      	ldr	r3, [pc, #404]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b63      	ldr	r3, [pc, #396]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0b8      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d020      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d30:	4b59      	ldr	r3, [pc, #356]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	4a58      	ldr	r2, [pc, #352]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d48:	4b53      	ldr	r3, [pc, #332]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a52      	ldr	r2, [pc, #328]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d54:	4b50      	ldr	r3, [pc, #320]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	494d      	ldr	r1, [pc, #308]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d044      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d107      	bne.n	8006d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7a:	4b47      	ldr	r3, [pc, #284]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d119      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e07f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d003      	beq.n	8006d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e06f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006daa:	4b3b      	ldr	r3, [pc, #236]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e067      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4b37      	ldr	r3, [pc, #220]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 0203 	bic.w	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4934      	ldr	r1, [pc, #208]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dcc:	f7fc ff70 	bl	8003cb0 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd4:	f7fc ff6c 	bl	8003cb0 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e04f      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	4b2b      	ldr	r3, [pc, #172]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 020c 	and.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1eb      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b25      	ldr	r3, [pc, #148]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d20c      	bcs.n	8006e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b22      	ldr	r3, [pc, #136]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b20      	ldr	r3, [pc, #128]	@ (8006e94 <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e032      	b.n	8006e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e30:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4916      	ldr	r1, [pc, #88]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	490e      	ldr	r1, [pc, #56]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e62:	f000 f821 	bl	8006ea8 <HAL_RCC_GetSysClockFreq>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	490a      	ldr	r1, [pc, #40]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006e74:	5ccb      	ldrb	r3, [r1, r3]
 8006e76:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fc fcf4 	bl	8003870 <HAL_InitTick>

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40023c00 	.word	0x40023c00
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	08015ac4 	.word	0x08015ac4
 8006ea0:	2000022c 	.word	0x2000022c
 8006ea4:	20000230 	.word	0x20000230

08006ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eac:	b094      	sub	sp, #80	@ 0x50
 8006eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb8:	2300      	movs	r3, #0
 8006eba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec0:	4b79      	ldr	r3, [pc, #484]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d00d      	beq.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	f200 80e1 	bhi.w	8007094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x34>
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006eda:	e0db      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006edc:	4b73      	ldr	r3, [pc, #460]	@ (80070ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006ede:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006ee0:	e0db      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ee2:	4b73      	ldr	r3, [pc, #460]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ee6:	e0d8      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d063      	beq.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efe:	4b6a      	ldr	r3, [pc, #424]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	2200      	movs	r2, #0
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f12:	2300      	movs	r3, #0
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	f04f 0000 	mov.w	r0, #0
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	0159      	lsls	r1, r3, #5
 8006f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f2c:	0150      	lsls	r0, r2, #5
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4621      	mov	r1, r4
 8006f34:	1a51      	subs	r1, r2, r1
 8006f36:	6139      	str	r1, [r7, #16]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	018b      	lsls	r3, r1, #6
 8006f50:	4651      	mov	r1, sl
 8006f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f56:	4651      	mov	r1, sl
 8006f58:	018a      	lsls	r2, r1, #6
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8006f60:	4659      	mov	r1, fp
 8006f62:	eb63 0901 	sbc.w	r9, r3, r1
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f7a:	4690      	mov	r8, r2
 8006f7c:	4699      	mov	r9, r3
 8006f7e:	4623      	mov	r3, r4
 8006f80:	eb18 0303 	adds.w	r3, r8, r3
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	462b      	mov	r3, r5
 8006f88:	eb49 0303 	adc.w	r3, r9, r3
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	024b      	lsls	r3, r1, #9
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	024a      	lsls	r2, r1, #9
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fae:	2200      	movs	r2, #0
 8006fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fb8:	f7f9 fe16 	bl	8000be8 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc4:	e058      	b.n	8007078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fc6:	4b38      	ldr	r3, [pc, #224]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	099b      	lsrs	r3, r3, #6
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fd6:	623b      	str	r3, [r7, #32]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	0159      	lsls	r1, r3, #5
 8006fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ff2:	0150      	lsls	r0, r2, #5
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ffe:	4649      	mov	r1, r9
 8007000:	eb63 0b01 	sbc.w	fp, r3, r1
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007018:	ebb2 040a 	subs.w	r4, r2, sl
 800701c:	eb63 050b 	sbc.w	r5, r3, fp
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	00eb      	lsls	r3, r5, #3
 800702a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800702e:	00e2      	lsls	r2, r4, #3
 8007030:	4614      	mov	r4, r2
 8007032:	461d      	mov	r5, r3
 8007034:	4643      	mov	r3, r8
 8007036:	18e3      	adds	r3, r4, r3
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	464b      	mov	r3, r9
 800703c:	eb45 0303 	adc.w	r3, r5, r3
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800704e:	4629      	mov	r1, r5
 8007050:	028b      	lsls	r3, r1, #10
 8007052:	4621      	mov	r1, r4
 8007054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007058:	4621      	mov	r1, r4
 800705a:	028a      	lsls	r2, r1, #10
 800705c:	4610      	mov	r0, r2
 800705e:	4619      	mov	r1, r3
 8007060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007062:	2200      	movs	r2, #0
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	61fa      	str	r2, [r7, #28]
 8007068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800706c:	f7f9 fdbc 	bl	8000be8 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4613      	mov	r3, r2
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	3301      	adds	r3, #1
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007088:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800708a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007092:	e002      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <HAL_RCC_GetSysClockFreq+0x204>)
 8007096:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800709a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800709c:	4618      	mov	r0, r3
 800709e:	3750      	adds	r7, #80	@ 0x50
 80070a0:	46bd      	mov	sp, r7
 80070a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a6:	bf00      	nop
 80070a8:	40023800 	.word	0x40023800
 80070ac:	00f42400 	.word	0x00f42400
 80070b0:	007a1200 	.word	0x007a1200

080070b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b8:	4b03      	ldr	r3, [pc, #12]	@ (80070c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070ba:	681b      	ldr	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	2000022c 	.word	0x2000022c

080070cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070d0:	f7ff fff0 	bl	80070b4 <HAL_RCC_GetHCLKFreq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	0a9b      	lsrs	r3, r3, #10
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	4903      	ldr	r1, [pc, #12]	@ (80070f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070e2:	5ccb      	ldrb	r3, [r1, r3]
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40023800 	.word	0x40023800
 80070f0:	08015ad4 	.word	0x08015ad4

080070f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070f8:	f7ff ffdc 	bl	80070b4 <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	0b5b      	lsrs	r3, r3, #13
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4903      	ldr	r1, [pc, #12]	@ (8007118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007110:	4618      	mov	r0, r3
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40023800 	.word	0x40023800
 8007118:	08015ad4 	.word	0x08015ad4

0800711c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	220f      	movs	r2, #15
 800712a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800712c:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <HAL_RCC_GetClockConfig+0x5c>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0203 	and.w	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007138:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <HAL_RCC_GetClockConfig+0x5c>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <HAL_RCC_GetClockConfig+0x5c>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007150:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <HAL_RCC_GetClockConfig+0x5c>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800715e:	4b07      	ldr	r3, [pc, #28]	@ (800717c <HAL_RCC_GetClockConfig+0x60>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0207 	and.w	r2, r3, #7
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800
 800717c:	40023c00 	.word	0x40023c00

08007180 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d035      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071a8:	4b62      	ldr	r3, [pc, #392]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ae:	f7fc fd7f 	bl	8003cb0 <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071b6:	f7fc fd7b 	bl	8003cb0 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0b0      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071c8:	4b5b      	ldr	r3, [pc, #364]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f0      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	019a      	lsls	r2, r3, #6
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	071b      	lsls	r3, r3, #28
 80071e0:	4955      	ldr	r1, [pc, #340]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071e8:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ee:	f7fc fd5f 	bl	8003cb0 <HAL_GetTick>
 80071f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071f6:	f7fc fd5b 	bl	8003cb0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e090      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007208:	4b4b      	ldr	r3, [pc, #300]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8083 	beq.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4b44      	ldr	r3, [pc, #272]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	4a43      	ldr	r2, [pc, #268]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800722c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007230:	6413      	str	r3, [r2, #64]	@ 0x40
 8007232:	4b41      	ldr	r3, [pc, #260]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800723e:	4b3f      	ldr	r3, [pc, #252]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3e      	ldr	r2, [pc, #248]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007248:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800724a:	f7fc fd31 	bl	8003cb0 <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007252:	f7fc fd2d 	bl	8003cb0 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e062      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007264:	4b35      	ldr	r3, [pc, #212]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007270:	4b31      	ldr	r3, [pc, #196]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007278:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d02f      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d028      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800728e:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007296:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007298:	4b29      	ldr	r3, [pc, #164]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800729e:	4b28      	ldr	r3, [pc, #160]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072a4:	4a24      	ldr	r2, [pc, #144]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072aa:	4b23      	ldr	r3, [pc, #140]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d114      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072b6:	f7fc fcfb 	bl	8003cb0 <HAL_GetTick>
 80072ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072bc:	e00a      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072be:	f7fc fcf7 	bl	8003cb0 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e02a      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d4:	4b18      	ldr	r3, [pc, #96]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0ee      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ec:	d10d      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072ee:	4b12      	ldr	r3, [pc, #72]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007302:	490d      	ldr	r1, [pc, #52]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]
 8007308:	e005      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4a0a      	ldr	r2, [pc, #40]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007310:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007314:	6093      	str	r3, [r2, #8]
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007318:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007322:	4905      	ldr	r1, [pc, #20]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007324:	4313      	orrs	r3, r2
 8007326:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	42470068 	.word	0x42470068
 8007338:	40023800 	.word	0x40023800
 800733c:	40007000 	.word	0x40007000
 8007340:	42470e40 	.word	0x42470e40

08007344 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d13e      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d12f      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007378:	4b1e      	ldr	r3, [pc, #120]	@ (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800737a:	617b      	str	r3, [r7, #20]
          break;
 800737c:	e02f      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800737e:	4b1c      	ldr	r3, [pc, #112]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800738a:	d108      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800738c:	4b18      	ldr	r3, [pc, #96]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007394:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	e007      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800739e:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a6:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073ae:	4b10      	ldr	r3, [pc, #64]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c8:	0f1b      	lsrs	r3, r3, #28
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	617b      	str	r3, [r7, #20]
          break;
 80073d6:	e002      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
          break;
 80073dc:	bf00      	nop
        }
      }
      break;
 80073de:	bf00      	nop
    }
  }
  return frequency;
 80073e0:	697b      	ldr	r3, [r7, #20]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800
 80073f4:	00bb8000 	.word	0x00bb8000
 80073f8:	007a1200 	.word	0x007a1200
 80073fc:	00f42400 	.word	0x00f42400

08007400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e07b      	b.n	800750a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007422:	d009      	beq.n	8007438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	61da      	str	r2, [r3, #28]
 800742a:	e005      	b.n	8007438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fc f938 	bl	80036c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0104 	and.w	r1, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	f003 0210 	and.w	r2, r3, #16
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e041      	b.n	80075a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d106      	bne.n	800753e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f839 	bl	80075b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f000 f9d7 	bl	8007904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e04e      	b.n	800767a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a23      	ldr	r2, [pc, #140]	@ (8007688 <HAL_TIM_Base_Start_IT+0xc4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d022      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007606:	d01d      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1f      	ldr	r2, [pc, #124]	@ (800768c <HAL_TIM_Base_Start_IT+0xc8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d018      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <HAL_TIM_Base_Start_IT+0xcc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1c      	ldr	r2, [pc, #112]	@ (8007694 <HAL_TIM_Base_Start_IT+0xd0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00e      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <HAL_TIM_Base_Start_IT+0xd4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a19      	ldr	r2, [pc, #100]	@ (800769c <HAL_TIM_Base_Start_IT+0xd8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x80>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d111      	bne.n	8007668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b06      	cmp	r3, #6
 8007654:	d010      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	e007      	b.n	8007678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40001800 	.word	0x40001800

080076a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d122      	bne.n	8007700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d11b      	bne.n	8007700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0202 	mvn.w	r2, #2
 80076d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8ee 	bl	80078c8 <HAL_TIM_IC_CaptureCallback>
 80076ec:	e005      	b.n	80076fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8e0 	bl	80078b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8f1 	bl	80078dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0304 	and.w	r3, r3, #4
 800770a:	2b04      	cmp	r3, #4
 800770c:	d122      	bne.n	8007754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b04      	cmp	r3, #4
 800771a:	d11b      	bne.n	8007754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0204 	mvn.w	r2, #4
 8007724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8c4 	bl	80078c8 <HAL_TIM_IC_CaptureCallback>
 8007740:	e005      	b.n	800774e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f8b6 	bl	80078b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f8c7 	bl	80078dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b08      	cmp	r3, #8
 8007760:	d122      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d11b      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0208 	mvn.w	r2, #8
 8007778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2204      	movs	r2, #4
 800777e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f89a 	bl	80078c8 <HAL_TIM_IC_CaptureCallback>
 8007794:	e005      	b.n	80077a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f88c 	bl	80078b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f89d 	bl	80078dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0310 	and.w	r3, r3, #16
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b10      	cmp	r3, #16
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0210 	mvn.w	r2, #16
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2208      	movs	r2, #8
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f870 	bl	80078c8 <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f862 	bl	80078b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f873 	bl	80078dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b01      	cmp	r3, #1
 8007808:	d10e      	bne.n	8007828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d107      	bne.n	8007828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0201 	mvn.w	r2, #1
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb fe44 	bl	80034b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007832:	2b80      	cmp	r3, #128	@ 0x80
 8007834:	d10e      	bne.n	8007854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007840:	2b80      	cmp	r3, #128	@ 0x80
 8007842:	d107      	bne.n	8007854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800784c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f902 	bl	8007a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785e:	2b40      	cmp	r3, #64	@ 0x40
 8007860:	d10e      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	d107      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f838 	bl	80078f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d10e      	bne.n	80078ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b20      	cmp	r3, #32
 800789a:	d107      	bne.n	80078ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0220 	mvn.w	r2, #32
 80078a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8cc 	bl	8007a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a40      	ldr	r2, [pc, #256]	@ (8007a18 <TIM_Base_SetConfig+0x114>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	d00f      	beq.n	8007944 <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3d      	ldr	r2, [pc, #244]	@ (8007a1c <TIM_Base_SetConfig+0x118>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00b      	beq.n	8007944 <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a20 <TIM_Base_SetConfig+0x11c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d007      	beq.n	8007944 <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a3b      	ldr	r2, [pc, #236]	@ (8007a24 <TIM_Base_SetConfig+0x120>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_Base_SetConfig+0x40>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a3a      	ldr	r2, [pc, #232]	@ (8007a28 <TIM_Base_SetConfig+0x124>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d108      	bne.n	8007956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800794a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <TIM_Base_SetConfig+0x114>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02b      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007964:	d027      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2c      	ldr	r2, [pc, #176]	@ (8007a1c <TIM_Base_SetConfig+0x118>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d023      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a2b      	ldr	r2, [pc, #172]	@ (8007a20 <TIM_Base_SetConfig+0x11c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01f      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a2a      	ldr	r2, [pc, #168]	@ (8007a24 <TIM_Base_SetConfig+0x120>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01b      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a29      	ldr	r2, [pc, #164]	@ (8007a28 <TIM_Base_SetConfig+0x124>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d017      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a28      	ldr	r2, [pc, #160]	@ (8007a2c <TIM_Base_SetConfig+0x128>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d013      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a27      	ldr	r2, [pc, #156]	@ (8007a30 <TIM_Base_SetConfig+0x12c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00f      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a26      	ldr	r2, [pc, #152]	@ (8007a34 <TIM_Base_SetConfig+0x130>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00b      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a25      	ldr	r2, [pc, #148]	@ (8007a38 <TIM_Base_SetConfig+0x134>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d007      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a24      	ldr	r2, [pc, #144]	@ (8007a3c <TIM_Base_SetConfig+0x138>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a23      	ldr	r2, [pc, #140]	@ (8007a40 <TIM_Base_SetConfig+0x13c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d108      	bne.n	80079c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <TIM_Base_SetConfig+0x114>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_Base_SetConfig+0xf8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a28 <TIM_Base_SetConfig+0x124>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d103      	bne.n	8007a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	615a      	str	r2, [r3, #20]
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40000400 	.word	0x40000400
 8007a20:	40000800 	.word	0x40000800
 8007a24:	40000c00 	.word	0x40000c00
 8007a28:	40010400 	.word	0x40010400
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800
 8007a38:	40001800 	.word	0x40001800
 8007a3c:	40001c00 	.word	0x40001c00
 8007a40:	40002000 	.word	0x40002000

08007a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e03f      	b.n	8007afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fb fe60 	bl	8003758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2224      	movs	r2, #36	@ 0x24
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fddf 	bl	8008674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695a      	ldr	r2, [r3, #20]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08a      	sub	sp, #40	@ 0x28
 8007b0a:	af02      	add	r7, sp, #8
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d17c      	bne.n	8007c20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_UART_Transmit+0x2c>
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e075      	b.n	8007c22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UART_Transmit+0x3e>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e06e      	b.n	8007c22 <HAL_UART_Transmit+0x11c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2221      	movs	r2, #33	@ 0x21
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b5a:	f7fc f8a9 	bl	8003cb0 <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	88fa      	ldrh	r2, [r7, #6]
 8007b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b74:	d108      	bne.n	8007b88 <HAL_UART_Transmit+0x82>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	e003      	b.n	8007b90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007b98:	e02a      	b.n	8007bf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	@ 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fb1f 	bl	80081e8 <UART_WaitOnFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e036      	b.n	8007c22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	e007      	b.n	8007be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1cf      	bne.n	8007b9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2200      	movs	r2, #0
 8007c02:	2140      	movs	r1, #64	@ 0x40
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 faef 	bl	80081e8 <UART_WaitOnFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e006      	b.n	8007c22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e000      	b.n	8007c22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c20:	2302      	movs	r3, #2
  }
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d11d      	bne.n	8007c80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_UART_Receive_IT+0x26>
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e016      	b.n	8007c82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Receive_IT+0x38>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e00f      	b.n	8007c82 <HAL_UART_Receive_IT+0x58>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c70:	88fb      	ldrh	r3, [r7, #6]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 fb24 	bl	80082c4 <UART_Start_Receive_IT>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	e000      	b.n	8007c82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10f      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x66>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fc07 	bl	80084fe <UART_Receive_IT>
      return;
 8007cf0:	e256      	b.n	80081a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80de 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x22c>
 8007cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80d1 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <HAL_UART_IRQHandler+0xae>
 8007d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <HAL_UART_IRQHandler+0xd2>
 8007d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	f043 0202 	orr.w	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <HAL_UART_IRQHandler+0xf6>
 8007d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7a:	f043 0204 	orr.w	r2, r3, #4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d011      	beq.n	8007db2 <HAL_UART_IRQHandler+0x126>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	f043 0208 	orr.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 81ed 	beq.w	8008196 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <HAL_UART_IRQHandler+0x14e>
 8007dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fb92 	bl	80084fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <HAL_UART_IRQHandler+0x17a>
 8007dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d04f      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa9a 	bl	8008340 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e16:	2b40      	cmp	r3, #64	@ 0x40
 8007e18:	d141      	bne.n	8007e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1d9      	bne.n	8007e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d013      	beq.n	8007e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	4a7d      	ldr	r2, [pc, #500]	@ (8008068 <HAL_UART_IRQHandler+0x3dc>)
 8007e74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fc f89a 	bl	8003fb4 <HAL_DMA_Abort_IT>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e00e      	b.n	8007eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f990 	bl	80081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	e00a      	b.n	8007eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f98c 	bl	80081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea4:	e006      	b.n	8007eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f988 	bl	80081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007eb2:	e170      	b.n	8008196 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb4:	bf00      	nop
    return;
 8007eb6:	e16e      	b.n	8008196 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	f040 814a 	bne.w	8008156 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8143 	beq.w	8008156 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 813c 	beq.w	8008156 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	f040 80b4 	bne.w	800806c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8140 	beq.w	800819a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f22:	429a      	cmp	r2, r3
 8007f24:	f080 8139 	bcs.w	800819a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3a:	f000 8088 	beq.w	800804e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d9      	bne.n	8007f3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3314      	adds	r3, #20
 8007faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e1      	bne.n	8007f8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3314      	adds	r3, #20
 8007fcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3314      	adds	r3, #20
 8007fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ff0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e3      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800801c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	330c      	adds	r3, #12
 800802c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008030:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008032:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800803e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e3      	bne.n	800800c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	4618      	mov	r0, r3
 800804a:	f7fb ff43 	bl	8003ed4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008056:	b29b      	uxth	r3, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	b29b      	uxth	r3, r3
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8b6 	bl	80081d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008064:	e099      	b.n	800819a <HAL_UART_IRQHandler+0x50e>
 8008066:	bf00      	nop
 8008068:	08008407 	.word	0x08008407
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008074:	b29b      	uxth	r3, r3
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 808b 	beq.w	800819e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8086 	beq.w	800819e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	330c      	adds	r3, #12
 8008098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80080b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80080b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e3      	bne.n	8008092 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3314      	adds	r3, #20
 80080d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	623b      	str	r3, [r7, #32]
   return(result);
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3314      	adds	r3, #20
 80080ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80080f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	330c      	adds	r3, #12
 8008116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0310 	bic.w	r3, r3, #16
 8008126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	330c      	adds	r3, #12
 8008130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008134:	61fa      	str	r2, [r7, #28]
 8008136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e3      	bne.n	8008110 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f83e 	bl	80081d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008154:	e023      	b.n	800819e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <HAL_UART_IRQHandler+0x4ea>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f95d 	bl	800842e <UART_Transmit_IT>
    return;
 8008174:	e014      	b.n	80081a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00e      	beq.n	80081a0 <HAL_UART_IRQHandler+0x514>
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f99d 	bl	80084ce <UART_EndTransmit_IT>
    return;
 8008194:	e004      	b.n	80081a0 <HAL_UART_IRQHandler+0x514>
    return;
 8008196:	bf00      	nop
 8008198:	e002      	b.n	80081a0 <HAL_UART_IRQHandler+0x514>
      return;
 800819a:	bf00      	nop
 800819c:	e000      	b.n	80081a0 <HAL_UART_IRQHandler+0x514>
      return;
 800819e:	bf00      	nop
  }
}
 80081a0:	37e8      	adds	r7, #232	@ 0xe8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop

080081a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b090      	sub	sp, #64	@ 0x40
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f8:	e050      	b.n	800829c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008200:	d04c      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <UART_WaitOnFlagUntilTimeout+0x30>
 8008208:	f7fb fd52 	bl	8003cb0 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008214:	429a      	cmp	r2, r3
 8008216:	d241      	bcs.n	800829c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	330c      	adds	r3, #12
 8008236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008238:	637a      	str	r2, [r7, #52]	@ 0x34
 800823a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800823e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e5      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3314      	adds	r3, #20
 8008252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	613b      	str	r3, [r7, #16]
   return(result);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3314      	adds	r3, #20
 800826a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800826c:	623a      	str	r2, [r7, #32]
 800826e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	61bb      	str	r3, [r7, #24]
   return(result);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e00f      	b.n	80082bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d09f      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3740      	adds	r7, #64	@ 0x40
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	88fa      	ldrh	r2, [r7, #6]
 80082dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2222      	movs	r2, #34	@ 0x22
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008310:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0220 	orr.w	r2, r2, #32
 8008330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b095      	sub	sp, #84	@ 0x54
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	330c      	adds	r3, #12
 8008366:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008368:	643a      	str	r2, [r7, #64]	@ 0x40
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800836e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e5      	bne.n	8008348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	61fb      	str	r3, [r7, #28]
   return(result);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3314      	adds	r3, #20
 800839a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800839c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800839e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e5      	bne.n	800837c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d119      	bne.n	80083ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083d8:	61ba      	str	r2, [r7, #24]
 80083da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6979      	ldr	r1, [r7, #20]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	613b      	str	r3, [r7, #16]
   return(result);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e5      	bne.n	80083b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083fa:	bf00      	nop
 80083fc:	3754      	adds	r7, #84	@ 0x54
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff fecb 	bl	80081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b21      	cmp	r3, #33	@ 0x21
 8008440:	d13e      	bne.n	80084c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800844a:	d114      	bne.n	8008476 <UART_Transmit_IT+0x48>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008468:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	1c9a      	adds	r2, r3, #2
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	621a      	str	r2, [r3, #32]
 8008474:	e008      	b.n	8008488 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	1c59      	adds	r1, r3, #1
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6211      	str	r1, [r2, #32]
 8008480:	781a      	ldrb	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29b      	uxth	r3, r3
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4619      	mov	r1, r3
 8008496:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10f      	bne.n	80084bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	e000      	b.n	80084c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084c0:	2302      	movs	r3, #2
  }
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fe5a 	bl	80081a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b08c      	sub	sp, #48	@ 0x30
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b22      	cmp	r3, #34	@ 0x22
 8008510:	f040 80ab 	bne.w	800866a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851c:	d117      	bne.n	800854e <UART_Receive_IT+0x50>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d113      	bne.n	800854e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800853c:	b29a      	uxth	r2, r3
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008546:	1c9a      	adds	r2, r3, #2
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	629a      	str	r2, [r3, #40]	@ 0x28
 800854c:	e026      	b.n	800859c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008552:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008560:	d007      	beq.n	8008572 <UART_Receive_IT+0x74>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <UART_Receive_IT+0x82>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	b2da      	uxtb	r2, r3
 800857a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e008      	b.n	8008592 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800858c:	b2da      	uxtb	r2, r3
 800858e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008590:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4619      	mov	r1, r3
 80085aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d15a      	bne.n	8008666 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0220 	bic.w	r2, r2, #32
 80085be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d135      	bne.n	800865c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	613b      	str	r3, [r7, #16]
   return(result);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f023 0310 	bic.w	r3, r3, #16
 800860c:	627b      	str	r3, [r7, #36]	@ 0x24
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008616:	623a      	str	r2, [r7, #32]
 8008618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	69f9      	ldr	r1, [r7, #28]
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	61bb      	str	r3, [r7, #24]
   return(result);
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b10      	cmp	r3, #16
 8008636:	d10a      	bne.n	800864e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff fdbb 	bl	80081d0 <HAL_UARTEx_RxEventCallback>
 800865a:	e002      	b.n	8008662 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fa fe97 	bl	8003390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	e002      	b.n	800866c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800866a:	2302      	movs	r3, #2
  }
}
 800866c:	4618      	mov	r0, r3
 800866e:	3730      	adds	r7, #48	@ 0x30
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b0c0      	sub	sp, #256	@ 0x100
 800867a:	af00      	add	r7, sp, #0
 800867c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008690:	68d9      	ldr	r1, [r3, #12]
 8008692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	ea40 0301 	orr.w	r3, r0, r1
 800869c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80086cc:	f021 010c 	bic.w	r1, r1, #12
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086da:	430b      	orrs	r3, r1
 80086dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80086ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ee:	6999      	ldr	r1, [r3, #24]
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	ea40 0301 	orr.w	r3, r0, r1
 80086fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b8f      	ldr	r3, [pc, #572]	@ (8008940 <UART_SetConfig+0x2cc>)
 8008704:	429a      	cmp	r2, r3
 8008706:	d005      	beq.n	8008714 <UART_SetConfig+0xa0>
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b8d      	ldr	r3, [pc, #564]	@ (8008944 <UART_SetConfig+0x2d0>)
 8008710:	429a      	cmp	r2, r3
 8008712:	d104      	bne.n	800871e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008714:	f7fe fcee 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 8008718:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800871c:	e003      	b.n	8008726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800871e:	f7fe fcd5 	bl	80070cc <HAL_RCC_GetPCLK1Freq>
 8008722:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008730:	f040 810c 	bne.w	800894c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008738:	2200      	movs	r2, #0
 800873a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800873e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	1891      	adds	r1, r2, r2
 800874c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800874e:	415b      	adcs	r3, r3
 8008750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008756:	4621      	mov	r1, r4
 8008758:	eb12 0801 	adds.w	r8, r2, r1
 800875c:	4629      	mov	r1, r5
 800875e:	eb43 0901 	adc.w	r9, r3, r1
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800876e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008776:	4690      	mov	r8, r2
 8008778:	4699      	mov	r9, r3
 800877a:	4623      	mov	r3, r4
 800877c:	eb18 0303 	adds.w	r3, r8, r3
 8008780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008784:	462b      	mov	r3, r5
 8008786:	eb49 0303 	adc.w	r3, r9, r3
 800878a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800879a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800879e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087a2:	460b      	mov	r3, r1
 80087a4:	18db      	adds	r3, r3, r3
 80087a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80087a8:	4613      	mov	r3, r2
 80087aa:	eb42 0303 	adc.w	r3, r2, r3
 80087ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80087b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80087b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80087b8:	f7f8 fa16 	bl	8000be8 <__aeabi_uldivmod>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4b61      	ldr	r3, [pc, #388]	@ (8008948 <UART_SetConfig+0x2d4>)
 80087c2:	fba3 2302 	umull	r2, r3, r3, r2
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	011c      	lsls	r4, r3, #4
 80087ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80087d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80087dc:	4642      	mov	r2, r8
 80087de:	464b      	mov	r3, r9
 80087e0:	1891      	adds	r1, r2, r2
 80087e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80087e4:	415b      	adcs	r3, r3
 80087e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80087ec:	4641      	mov	r1, r8
 80087ee:	eb12 0a01 	adds.w	sl, r2, r1
 80087f2:	4649      	mov	r1, r9
 80087f4:	eb43 0b01 	adc.w	fp, r3, r1
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800880c:	4692      	mov	sl, r2
 800880e:	469b      	mov	fp, r3
 8008810:	4643      	mov	r3, r8
 8008812:	eb1a 0303 	adds.w	r3, sl, r3
 8008816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800881a:	464b      	mov	r3, r9
 800881c:	eb4b 0303 	adc.w	r3, fp, r3
 8008820:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008830:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008838:	460b      	mov	r3, r1
 800883a:	18db      	adds	r3, r3, r3
 800883c:	643b      	str	r3, [r7, #64]	@ 0x40
 800883e:	4613      	mov	r3, r2
 8008840:	eb42 0303 	adc.w	r3, r2, r3
 8008844:	647b      	str	r3, [r7, #68]	@ 0x44
 8008846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800884a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800884e:	f7f8 f9cb 	bl	8000be8 <__aeabi_uldivmod>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4611      	mov	r1, r2
 8008858:	4b3b      	ldr	r3, [pc, #236]	@ (8008948 <UART_SetConfig+0x2d4>)
 800885a:	fba3 2301 	umull	r2, r3, r3, r1
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	2264      	movs	r2, #100	@ 0x64
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	1acb      	subs	r3, r1, r3
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800886e:	4b36      	ldr	r3, [pc, #216]	@ (8008948 <UART_SetConfig+0x2d4>)
 8008870:	fba3 2302 	umull	r2, r3, r3, r2
 8008874:	095b      	lsrs	r3, r3, #5
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800887c:	441c      	add	r4, r3
 800887e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008882:	2200      	movs	r2, #0
 8008884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008888:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800888c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	1891      	adds	r1, r2, r2
 8008896:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008898:	415b      	adcs	r3, r3
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088a0:	4641      	mov	r1, r8
 80088a2:	1851      	adds	r1, r2, r1
 80088a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80088a6:	4649      	mov	r1, r9
 80088a8:	414b      	adcs	r3, r1
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80088b8:	4659      	mov	r1, fp
 80088ba:	00cb      	lsls	r3, r1, #3
 80088bc:	4651      	mov	r1, sl
 80088be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088c2:	4651      	mov	r1, sl
 80088c4:	00ca      	lsls	r2, r1, #3
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	4642      	mov	r2, r8
 80088ce:	189b      	adds	r3, r3, r2
 80088d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088d4:	464b      	mov	r3, r9
 80088d6:	460a      	mov	r2, r1
 80088d8:	eb42 0303 	adc.w	r3, r2, r3
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80088f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088f4:	460b      	mov	r3, r1
 80088f6:	18db      	adds	r3, r3, r3
 80088f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088fa:	4613      	mov	r3, r2
 80088fc:	eb42 0303 	adc.w	r3, r2, r3
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800890a:	f7f8 f96d 	bl	8000be8 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <UART_SetConfig+0x2d4>)
 8008914:	fba3 1302 	umull	r1, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	2164      	movs	r1, #100	@ 0x64
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	3332      	adds	r3, #50	@ 0x32
 8008926:	4a08      	ldr	r2, [pc, #32]	@ (8008948 <UART_SetConfig+0x2d4>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	f003 0207 	and.w	r2, r3, #7
 8008932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4422      	add	r2, r4
 800893a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800893c:	e106      	b.n	8008b4c <UART_SetConfig+0x4d8>
 800893e:	bf00      	nop
 8008940:	40011000 	.word	0x40011000
 8008944:	40011400 	.word	0x40011400
 8008948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800894c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008950:	2200      	movs	r2, #0
 8008952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008956:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800895a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800895e:	4642      	mov	r2, r8
 8008960:	464b      	mov	r3, r9
 8008962:	1891      	adds	r1, r2, r2
 8008964:	6239      	str	r1, [r7, #32]
 8008966:	415b      	adcs	r3, r3
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
 800896a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800896e:	4641      	mov	r1, r8
 8008970:	1854      	adds	r4, r2, r1
 8008972:	4649      	mov	r1, r9
 8008974:	eb43 0501 	adc.w	r5, r3, r1
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	f04f 0300 	mov.w	r3, #0
 8008980:	00eb      	lsls	r3, r5, #3
 8008982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008986:	00e2      	lsls	r2, r4, #3
 8008988:	4614      	mov	r4, r2
 800898a:	461d      	mov	r5, r3
 800898c:	4643      	mov	r3, r8
 800898e:	18e3      	adds	r3, r4, r3
 8008990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008994:	464b      	mov	r3, r9
 8008996:	eb45 0303 	adc.w	r3, r5, r3
 800899a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80089ba:	4629      	mov	r1, r5
 80089bc:	008b      	lsls	r3, r1, #2
 80089be:	4621      	mov	r1, r4
 80089c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c4:	4621      	mov	r1, r4
 80089c6:	008a      	lsls	r2, r1, #2
 80089c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80089cc:	f7f8 f90c 	bl	8000be8 <__aeabi_uldivmod>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4b60      	ldr	r3, [pc, #384]	@ (8008b58 <UART_SetConfig+0x4e4>)
 80089d6:	fba3 2302 	umull	r2, r3, r3, r2
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	011c      	lsls	r4, r3, #4
 80089de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80089ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80089f0:	4642      	mov	r2, r8
 80089f2:	464b      	mov	r3, r9
 80089f4:	1891      	adds	r1, r2, r2
 80089f6:	61b9      	str	r1, [r7, #24]
 80089f8:	415b      	adcs	r3, r3
 80089fa:	61fb      	str	r3, [r7, #28]
 80089fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a00:	4641      	mov	r1, r8
 8008a02:	1851      	adds	r1, r2, r1
 8008a04:	6139      	str	r1, [r7, #16]
 8008a06:	4649      	mov	r1, r9
 8008a08:	414b      	adcs	r3, r1
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	f04f 0300 	mov.w	r3, #0
 8008a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a18:	4659      	mov	r1, fp
 8008a1a:	00cb      	lsls	r3, r1, #3
 8008a1c:	4651      	mov	r1, sl
 8008a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a22:	4651      	mov	r1, sl
 8008a24:	00ca      	lsls	r2, r1, #3
 8008a26:	4610      	mov	r0, r2
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	189b      	adds	r3, r3, r2
 8008a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a34:	464b      	mov	r3, r9
 8008a36:	460a      	mov	r2, r1
 8008a38:	eb42 0303 	adc.w	r3, r2, r3
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a58:	4649      	mov	r1, r9
 8008a5a:	008b      	lsls	r3, r1, #2
 8008a5c:	4641      	mov	r1, r8
 8008a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a62:	4641      	mov	r1, r8
 8008a64:	008a      	lsls	r2, r1, #2
 8008a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a6a:	f7f8 f8bd 	bl	8000be8 <__aeabi_uldivmod>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	4b38      	ldr	r3, [pc, #224]	@ (8008b58 <UART_SetConfig+0x4e4>)
 8008a76:	fba3 2301 	umull	r2, r3, r3, r1
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	2264      	movs	r2, #100	@ 0x64
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	1acb      	subs	r3, r1, r3
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	3332      	adds	r3, #50	@ 0x32
 8008a88:	4a33      	ldr	r2, [pc, #204]	@ (8008b58 <UART_SetConfig+0x4e4>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a94:	441c      	add	r4, r3
 8008a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008aa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	464b      	mov	r3, r9
 8008aa8:	1891      	adds	r1, r2, r2
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	415b      	adcs	r3, r3
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	1851      	adds	r1, r2, r1
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	4649      	mov	r1, r9
 8008abc:	414b      	adcs	r3, r1
 8008abe:	607b      	str	r3, [r7, #4]
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008acc:	4659      	mov	r1, fp
 8008ace:	00cb      	lsls	r3, r1, #3
 8008ad0:	4651      	mov	r1, sl
 8008ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ad6:	4651      	mov	r1, sl
 8008ad8:	00ca      	lsls	r2, r1, #3
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	189b      	adds	r3, r3, r2
 8008ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	460a      	mov	r2, r1
 8008aea:	eb42 0303 	adc.w	r3, r2, r3
 8008aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008afa:	667a      	str	r2, [r7, #100]	@ 0x64
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b08:	4649      	mov	r1, r9
 8008b0a:	008b      	lsls	r3, r1, #2
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b12:	4641      	mov	r1, r8
 8008b14:	008a      	lsls	r2, r1, #2
 8008b16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b1a:	f7f8 f865 	bl	8000be8 <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4b0d      	ldr	r3, [pc, #52]	@ (8008b58 <UART_SetConfig+0x4e4>)
 8008b24:	fba3 1302 	umull	r1, r3, r3, r2
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	2164      	movs	r1, #100	@ 0x64
 8008b2c:	fb01 f303 	mul.w	r3, r1, r3
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	3332      	adds	r3, #50	@ 0x32
 8008b36:	4a08      	ldr	r2, [pc, #32]	@ (8008b58 <UART_SetConfig+0x4e4>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	f003 020f 	and.w	r2, r3, #15
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4422      	add	r2, r4
 8008b4a:	609a      	str	r2, [r3, #8]
}
 8008b4c:	bf00      	nop
 8008b4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b52:	46bd      	mov	sp, r7
 8008b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b58:	51eb851f 	.word	0x51eb851f

08008b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	f107 001c 	add.w	r0, r7, #28
 8008b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d122      	bne.n	8008bba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d105      	bne.n	8008bae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f9c0 	bl	8008f34 <USB_CoreReset>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	e01a      	b.n	8008bf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f9b4 	bl	8008f34 <USB_CoreReset>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008be2:	e005      	b.n	8008bf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d10b      	bne.n	8008c0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f043 0206 	orr.w	r2, r3, #6
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f043 0220 	orr.w	r2, r3, #32
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c1a:	b004      	add	sp, #16
 8008c1c:	4770      	bx	lr

08008c1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f043 0201 	orr.w	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f023 0201 	bic.w	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d115      	bne.n	8008cb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7fb f819 	bl	8003cc8 <HAL_Delay>
      ms++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f93a 	bl	8008f16 <USB_GetMode>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d01e      	beq.n	8008ce6 <USB_SetCurrentMode+0x84>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b31      	cmp	r3, #49	@ 0x31
 8008cac:	d9f0      	bls.n	8008c90 <USB_SetCurrentMode+0x2e>
 8008cae:	e01a      	b.n	8008ce6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d115      	bne.n	8008ce2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f7fb f800 	bl	8003cc8 <HAL_Delay>
      ms++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f921 	bl	8008f16 <USB_GetMode>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <USB_SetCurrentMode+0x84>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b31      	cmp	r3, #49	@ 0x31
 8008cde:	d9f0      	bls.n	8008cc2 <USB_SetCurrentMode+0x60>
 8008ce0:	e001      	b.n	8008ce6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e005      	b.n	8008cf2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b32      	cmp	r3, #50	@ 0x32
 8008cea:	d101      	bne.n	8008cf0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e000      	b.n	8008cf2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a13      	ldr	r2, [pc, #76]	@ (8008d60 <USB_FlushTxFifo+0x64>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d901      	bls.n	8008d1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e01b      	b.n	8008d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	daf2      	bge.n	8008d0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	019b      	lsls	r3, r3, #6
 8008d2c:	f043 0220 	orr.w	r2, r3, #32
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4a08      	ldr	r2, [pc, #32]	@ (8008d60 <USB_FlushTxFifo+0x64>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d901      	bls.n	8008d46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e006      	b.n	8008d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d0f0      	beq.n	8008d34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	00030d40 	.word	0x00030d40

08008d64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a11      	ldr	r2, [pc, #68]	@ (8008dc0 <USB_FlushRxFifo+0x5c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d901      	bls.n	8008d82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e018      	b.n	8008db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	daf2      	bge.n	8008d70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2210      	movs	r2, #16
 8008d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3301      	adds	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4a08      	ldr	r2, [pc, #32]	@ (8008dc0 <USB_FlushRxFifo+0x5c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d901      	bls.n	8008da6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e006      	b.n	8008db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d0f0      	beq.n	8008d94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	00030d40 	.word	0x00030d40

08008dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b089      	sub	sp, #36	@ 0x24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	71fb      	strb	r3, [r7, #7]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d123      	bne.n	8008e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dea:	88bb      	ldrh	r3, [r7, #4]
 8008dec:	3303      	adds	r3, #3
 8008dee:	089b      	lsrs	r3, r3, #2
 8008df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e018      	b.n	8008e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	031a      	lsls	r2, r3, #12
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e04:	461a      	mov	r2, r3
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3301      	adds	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d3e2      	bcc.n	8008df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3724      	adds	r7, #36	@ 0x24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b08b      	sub	sp, #44	@ 0x2c
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	623b      	str	r3, [r7, #32]
 8008e6a:	e014      	b.n	8008e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	3301      	adds	r3, #1
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	3301      	adds	r3, #1
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	3301      	adds	r3, #1
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d3e6      	bcc.n	8008e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e9e:	8bfb      	ldrh	r3, [r7, #30]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01e      	beq.n	8008ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ed6:	8bfb      	ldrh	r3, [r7, #30]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008edc:	8bfb      	ldrh	r3, [r7, #30]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1ea      	bne.n	8008eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	372c      	adds	r7, #44	@ 0x2c
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4013      	ands	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0301 	and.w	r3, r3, #1
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a13      	ldr	r2, [pc, #76]	@ (8008f98 <USB_CoreReset+0x64>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e01b      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	daf2      	bge.n	8008f40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <USB_CoreReset+0x64>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d0f0      	beq.n	8008f6a <USB_CoreReset+0x36>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	00030d40 	.word	0x00030d40

08008f9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fde:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d018      	beq.n	8009024 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d10a      	bne.n	800900e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009006:	f043 0304 	orr.w	r3, r3, #4
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	e014      	b.n	8009038 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800901c:	f023 0304 	bic.w	r3, r3, #4
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	e009      	b.n	8009038 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009032:	f023 0304 	bic.w	r3, r3, #4
 8009036:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009038:	2110      	movs	r1, #16
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fe5e 	bl	8008cfc <USB_FlushTxFifo>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fe8a 	bl	8008d64 <USB_FlushRxFifo>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800905a:	2300      	movs	r3, #0
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	e015      	b.n	800908c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906c:	461a      	mov	r2, r3
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009080:	461a      	mov	r2, r3
 8009082:	2300      	movs	r3, #0
 8009084:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d3e5      	bcc.n	8009060 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090b4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a13      	ldr	r2, [pc, #76]	@ (8009108 <USB_HostInit+0x16c>)
 80090ba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a13      	ldr	r2, [pc, #76]	@ (800910c <USB_HostInit+0x170>)
 80090c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80090c4:	e009      	b.n	80090da <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2280      	movs	r2, #128	@ 0x80
 80090ca:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a10      	ldr	r2, [pc, #64]	@ (8009110 <USB_HostInit+0x174>)
 80090d0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a0f      	ldr	r2, [pc, #60]	@ (8009114 <USB_HostInit+0x178>)
 80090d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d105      	bne.n	80090ec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f043 0210 	orr.w	r2, r3, #16
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699a      	ldr	r2, [r3, #24]
 80090f0:	4b09      	ldr	r3, [pc, #36]	@ (8009118 <USB_HostInit+0x17c>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009104:	b004      	add	sp, #16
 8009106:	4770      	bx	lr
 8009108:	01000200 	.word	0x01000200
 800910c:	00e00300 	.word	0x00e00300
 8009110:	00600080 	.word	0x00600080
 8009114:	004000e0 	.word	0x004000e0
 8009118:	a3200008 	.word	0xa3200008

0800911c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009154:	4313      	orrs	r3, r2
 8009156:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d107      	bne.n	800916e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009164:	461a      	mov	r2, r3
 8009166:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800916a:	6053      	str	r3, [r2, #4]
 800916c:	e009      	b.n	8009182 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	2b02      	cmp	r3, #2
 8009172:	d106      	bne.n	8009182 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800917a:	461a      	mov	r2, r3
 800917c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009180:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80091b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80091ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80091c0:	2064      	movs	r0, #100	@ 0x64
 80091c2:	f7fa fd81 	bl	8003cc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80091ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80091d4:	200a      	movs	r0, #10
 80091d6:	f7fa fd77 	bl	8003cc8 <HAL_Delay>

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009208:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d109      	bne.n	8009228 <USB_DriveVbus+0x44>
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d106      	bne.n	8009228 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009222:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009226:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009232:	d109      	bne.n	8009248 <USB_DriveVbus+0x64>
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009246:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	0c5b      	lsrs	r3, r3, #17
 8009274:	f003 0303 	and.w	r3, r3, #3
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	b29b      	uxth	r3, r3
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
	...

080092a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4603      	mov	r3, r0
 80092b8:	70fb      	strb	r3, [r7, #3]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70bb      	strb	r3, [r7, #2]
 80092be:	4613      	mov	r3, r2
 80092c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d6:	461a      	mov	r2, r3
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80092de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d87e      	bhi.n	80093e4 <USB_HC_Init+0x13c>
 80092e6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ec <USB_HC_Init+0x44>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	080093a7 	.word	0x080093a7
 80092f4:	080092fd 	.word	0x080092fd
 80092f8:	08009369 	.word	0x08009369
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	4413      	add	r3, r2
 8009304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009308:	461a      	mov	r2, r3
 800930a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800930e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009314:	2b00      	cmp	r3, #0
 8009316:	da10      	bge.n	800933a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	4413      	add	r3, r2
 8009320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	440a      	add	r2, r1
 800932e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009336:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009338:	e057      	b.n	80093ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d051      	beq.n	80093ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	4413      	add	r3, r2
 800934e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	440a      	add	r2, r1
 800935c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009360:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009364:	60d3      	str	r3, [r2, #12]
      break;
 8009366:	e040      	b.n	80093ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009374:	461a      	mov	r2, r3
 8009376:	f240 639d 	movw	r3, #1693	@ 0x69d
 800937a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800937c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009380:	2b00      	cmp	r3, #0
 8009382:	da34      	bge.n	80093ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	4413      	add	r3, r2
 800938c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	440a      	add	r2, r1
 800939a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800939e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093a4:	e023      	b.n	80093ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b2:	461a      	mov	r2, r3
 80093b4:	f240 2325 	movw	r3, #549	@ 0x225
 80093b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	da17      	bge.n	80093f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093dc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80093e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80093e2:	e006      	b.n	80093f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	77fb      	strb	r3, [r7, #31]
      break;
 80093e8:	e004      	b.n	80093f4 <USB_HC_Init+0x14c>
      break;
 80093ea:	bf00      	nop
 80093ec:	e002      	b.n	80093f4 <USB_HC_Init+0x14c>
      break;
 80093ee:	bf00      	nop
 80093f0:	e000      	b.n	80093f4 <USB_HC_Init+0x14c>
      break;
 80093f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	0151      	lsls	r1, r2, #5
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	440a      	add	r2, r1
 800940a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800941a:	699a      	ldr	r2, [r3, #24]
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	2101      	movs	r1, #1
 8009424:	fa01 f303 	lsl.w	r3, r1, r3
 8009428:	6939      	ldr	r1, [r7, #16]
 800942a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800942e:	4313      	orrs	r3, r2
 8009430:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800943e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009442:	2b00      	cmp	r3, #0
 8009444:	da03      	bge.n	800944e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944a:	61bb      	str	r3, [r7, #24]
 800944c:	e001      	b.n	8009452 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff feff 	bl	8009256 <USB_GetHostSpeed>
 8009458:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800945a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800945e:	2b02      	cmp	r3, #2
 8009460:	d106      	bne.n	8009470 <USB_HC_Init+0x1c8>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b02      	cmp	r3, #2
 8009466:	d003      	beq.n	8009470 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e001      	b.n	8009474 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009474:	787b      	ldrb	r3, [r7, #1]
 8009476:	059b      	lsls	r3, r3, #22
 8009478:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800947c:	78bb      	ldrb	r3, [r7, #2]
 800947e:	02db      	lsls	r3, r3, #11
 8009480:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009484:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009486:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800948a:	049b      	lsls	r3, r3, #18
 800948c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009490:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009492:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009494:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009498:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	0159      	lsls	r1, r3, #5
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	440b      	add	r3, r1
 80094a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80094b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d003      	beq.n	80094c2 <USB_HC_Init+0x21a>
 80094ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d10f      	bne.n	80094e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	78fa      	ldrb	r2, [r7, #3]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80094e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3720      	adds	r7, #32
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08c      	sub	sp, #48	@ 0x30
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009508:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009512:	2b00      	cmp	r3, #0
 8009514:	d02d      	beq.n	8009572 <USB_HC_StartXfer+0x86>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	791b      	ldrb	r3, [r3, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d129      	bne.n	8009572 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d117      	bne.n	8009554 <USB_HC_StartXfer+0x68>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	79db      	ldrb	r3, [r3, #7]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <USB_HC_StartXfer+0x48>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	79db      	ldrb	r3, [r3, #7]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d10f      	bne.n	8009554 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	4413      	add	r3, r2
 800953c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	440a      	add	r2, r1
 800954a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800954e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009552:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10b      	bne.n	8009572 <USB_HC_StartXfer+0x86>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	795b      	ldrb	r3, [r3, #5]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d107      	bne.n	8009572 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	4619      	mov	r1, r3
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fa0f 	bl	800998c <USB_DoPing>
      return HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	e0f8      	b.n	8009764 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	8912      	ldrh	r2, [r2, #8]
 8009582:	4413      	add	r3, r2
 8009584:	3b01      	subs	r3, #1
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	8912      	ldrh	r2, [r2, #8]
 800958a:	fbb3 f3f2 	udiv	r3, r3, r2
 800958e:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8009590:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009592:	8b7b      	ldrh	r3, [r7, #26]
 8009594:	429a      	cmp	r2, r3
 8009596:	d90b      	bls.n	80095b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009598:	8b7b      	ldrh	r3, [r7, #26]
 800959a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800959c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	8912      	ldrh	r2, [r2, #8]
 80095a2:	fb03 f202 	mul.w	r2, r3, r2
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	611a      	str	r2, [r3, #16]
 80095aa:	e001      	b.n	80095b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80095ac:	2301      	movs	r3, #1
 80095ae:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	78db      	ldrb	r3, [r3, #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d007      	beq.n	80095c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	8912      	ldrh	r2, [r2, #8]
 80095be:	fb03 f202 	mul.w	r2, r3, r2
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	611a      	str	r2, [r3, #16]
 80095c6:	e003      	b.n	80095d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	695a      	ldr	r2, [r3, #20]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095da:	04d9      	lsls	r1, r3, #19
 80095dc:	4b63      	ldr	r3, [pc, #396]	@ (800976c <USB_HC_StartXfer+0x280>)
 80095de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	7a9b      	ldrb	r3, [r3, #10]
 80095e6:	075b      	lsls	r3, r3, #29
 80095e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095ec:	69f9      	ldr	r1, [r7, #28]
 80095ee:	0148      	lsls	r0, r1, #5
 80095f0:	6a39      	ldr	r1, [r7, #32]
 80095f2:	4401      	add	r1, r0
 80095f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	68d9      	ldr	r1, [r3, #12]
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	4413      	add	r3, r2
 800960e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009612:	460a      	mov	r2, r1
 8009614:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	4413      	add	r3, r2
 8009636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	0151      	lsls	r1, r2, #5
 8009640:	6a3a      	ldr	r2, [r7, #32]
 8009642:	440a      	add	r2, r1
 8009644:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009648:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800964c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	4413      	add	r3, r2
 8009656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	7e7b      	ldrb	r3, [r7, #25]
 800965e:	075b      	lsls	r3, r3, #29
 8009660:	69f9      	ldr	r1, [r7, #28]
 8009662:	0148      	lsls	r0, r1, #5
 8009664:	6a39      	ldr	r1, [r7, #32]
 8009666:	4401      	add	r1, r0
 8009668:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800966c:	4313      	orrs	r3, r2
 800966e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	4413      	add	r3, r2
 8009678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009686:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	78db      	ldrb	r3, [r3, #3]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	e003      	b.n	80096a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b6:	461a      	mov	r2, r3
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	e04e      	b.n	8009764 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	78db      	ldrb	r3, [r3, #3]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d149      	bne.n	8009762 <USB_HC_StartXfer+0x276>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d045      	beq.n	8009762 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	79db      	ldrb	r3, [r3, #7]
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d830      	bhi.n	8009740 <USB_HC_StartXfer+0x254>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <USB_HC_StartXfer+0x1f8>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	080096f5 	.word	0x080096f5
 80096e8:	08009719 	.word	0x08009719
 80096ec:	080096f5 	.word	0x080096f5
 80096f0:	08009719 	.word	0x08009719
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	3303      	adds	r3, #3
 80096fa:	089b      	lsrs	r3, r3, #2
 80096fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80096fe:	8afa      	ldrh	r2, [r7, #22]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	b29b      	uxth	r3, r3
 8009706:	429a      	cmp	r2, r3
 8009708:	d91c      	bls.n	8009744 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f043 0220 	orr.w	r2, r3, #32
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	619a      	str	r2, [r3, #24]
        }
        break;
 8009716:	e015      	b.n	8009744 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	3303      	adds	r3, #3
 800971e:	089b      	lsrs	r3, r3, #2
 8009720:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009722:	8afa      	ldrh	r2, [r7, #22]
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	b29b      	uxth	r3, r3
 800972e:	429a      	cmp	r2, r3
 8009730:	d90a      	bls.n	8009748 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	619a      	str	r2, [r3, #24]
        }
        break;
 800973e:	e003      	b.n	8009748 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009740:	bf00      	nop
 8009742:	e002      	b.n	800974a <USB_HC_StartXfer+0x25e>
        break;
 8009744:	bf00      	nop
 8009746:	e000      	b.n	800974a <USB_HC_StartXfer+0x25e>
        break;
 8009748:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	68d9      	ldr	r1, [r3, #12]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	785a      	ldrb	r2, [r3, #1]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	b29b      	uxth	r3, r3
 8009758:	2000      	movs	r0, #0
 800975a:	9000      	str	r0, [sp, #0]
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fb31 	bl	8008dc4 <USB_WritePacket>
  }

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3728      	adds	r7, #40	@ 0x28
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	1ff80000 	.word	0x1ff80000

08009770 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	b29b      	uxth	r3, r3
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009792:	b480      	push	{r7}
 8009794:	b089      	sub	sp, #36	@ 0x24
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	0c9b      	lsrs	r3, r3, #18
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	0fdb      	lsrs	r3, r3, #31
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d104      	bne.n	80097ec <USB_HC_Halt+0x5a>
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e0c8      	b.n	800997e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <USB_HC_Halt+0x66>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d163      	bne.n	80098c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	440a      	add	r2, r1
 800980e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009812:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009816:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	f040 80ab 	bne.w	800997c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d133      	bne.n	800989a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	440a      	add	r2, r1
 8009848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800984c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009850:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	4413      	add	r3, r2
 800985a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	440a      	add	r2, r1
 8009868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800986c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009870:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800987e:	d81d      	bhi.n	80098bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009892:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009896:	d0ec      	beq.n	8009872 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009898:	e070      	b.n	800997c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098ba:	e05f      	b.n	800997c <USB_HC_Halt+0x1ea>
            break;
 80098bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098be:	e05d      	b.n	800997c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	0151      	lsls	r1, r2, #5
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	440a      	add	r2, r1
 80098d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d133      	bne.n	8009958 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	440a      	add	r2, r1
 8009906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800990a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800990e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	440a      	add	r2, r1
 8009926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800992a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800992e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800993c:	d81d      	bhi.n	800997a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009954:	d0ec      	beq.n	8009930 <USB_HC_Halt+0x19e>
 8009956:	e011      	b.n	800997c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	440a      	add	r2, r1
 800996e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009972:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	e000      	b.n	800997c <USB_HC_Halt+0x1ea>
          break;
 800997a:	bf00      	nop
    }
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3724      	adds	r7, #36	@ 0x24
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80099a0:	2301      	movs	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	04da      	lsls	r2, r3, #19
 80099a8:	4b15      	ldr	r3, [pc, #84]	@ (8009a00 <USB_DoPing+0x74>)
 80099aa:	4013      	ands	r3, r2
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ea:	461a      	mov	r2, r3
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	1ff80000 	.word	0x1ff80000

08009a04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff f911 	bl	8008c40 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a1e:	2110      	movs	r1, #16
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff f96b 	bl	8008cfc <USB_FlushTxFifo>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff f997 	bl	8008d64 <USB_FlushRxFifo>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e01f      	b.n	8009a86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	3301      	adds	r3, #1
 8009a84:	61bb      	str	r3, [r7, #24]
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b0f      	cmp	r3, #15
 8009a8a:	d9dc      	bls.n	8009a46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	e034      	b.n	8009afc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aa8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ab8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ad8:	d80c      	bhi.n	8009af4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af0:	d0ec      	beq.n	8009acc <USB_StopHost+0xc8>
 8009af2:	e000      	b.n	8009af6 <USB_StopHost+0xf2>
        break;
 8009af4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61bb      	str	r3, [r7, #24]
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b0f      	cmp	r3, #15
 8009b00:	d9c7      	bls.n	8009a92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f04f 32ff 	mov.w	r2, #4294967295
 8009b16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff f880 	bl	8008c1e <USB_EnableGlobalInt>

  return ret;
 8009b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b089      	sub	sp, #36	@ 0x24
 8009b2c:	af04      	add	r7, sp, #16
 8009b2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009b30:	2301      	movs	r3, #1
 8009b32:	2202      	movs	r2, #2
 8009b34:	2102      	movs	r1, #2
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fcb2 	bl	800a4a0 <USBH_FindInterface>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2bff      	cmp	r3, #255	@ 0xff
 8009b44:	d002      	beq.n	8009b4c <USBH_CDC_InterfaceInit+0x24>
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d901      	bls.n	8009b50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e13d      	b.n	8009dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fc87 	bl	800a468 <USBH_SelectInterface>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009b64:	2302      	movs	r3, #2
 8009b66:	e131      	b.n	8009dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009b6e:	2050      	movs	r0, #80	@ 0x50
 8009b70:	f006 ffe8 	bl	8010b44 <malloc>
 8009b74:	4603      	mov	r3, r0
 8009b76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e11f      	b.n	8009dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009b8c:	2250      	movs	r2, #80	@ 0x50
 8009b8e:	2100      	movs	r1, #0
 8009b90:	68b8      	ldr	r0, [r7, #8]
 8009b92:	f008 fd13 	bl	80125bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	211a      	movs	r1, #26
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	b25b      	sxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da15      	bge.n	8009bda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	211a      	movs	r1, #26
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	211a      	movs	r1, #26
 8009bca:	fb01 f303 	mul.w	r3, r1, r3
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009bd4:	881a      	ldrh	r2, [r3, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f002 f976 	bl	800bed2 <USBH_AllocPipe>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	7819      	ldrb	r1, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	7858      	ldrb	r0, [r3, #1]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	8952      	ldrh	r2, [r2, #10]
 8009c06:	9202      	str	r2, [sp, #8]
 8009c08:	2203      	movs	r2, #3
 8009c0a:	9201      	str	r2, [sp, #4]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	4623      	mov	r3, r4
 8009c10:	4602      	mov	r2, r0
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f002 f92e 	bl	800be74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f006 ff07 	bl	8010a34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009c26:	2300      	movs	r3, #0
 8009c28:	2200      	movs	r2, #0
 8009c2a:	210a      	movs	r1, #10
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fc37 	bl	800a4a0 <USBH_FindInterface>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2bff      	cmp	r3, #255	@ 0xff
 8009c3a:	d002      	beq.n	8009c42 <USBH_CDC_InterfaceInit+0x11a>
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d901      	bls.n	8009c46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	e0c2      	b.n	8009dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	211a      	movs	r1, #26
 8009c4c:	fb01 f303 	mul.w	r3, r1, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	b25b      	sxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da16      	bge.n	8009c8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	211a      	movs	r1, #26
 8009c64:	fb01 f303 	mul.w	r3, r1, r3
 8009c68:	4413      	add	r3, r2
 8009c6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c6e:	781a      	ldrb	r2, [r3, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	211a      	movs	r1, #26
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c84:	881a      	ldrh	r2, [r3, #0]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	835a      	strh	r2, [r3, #26]
 8009c8a:	e015      	b.n	8009cb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	211a      	movs	r1, #26
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	211a      	movs	r1, #26
 8009ca8:	fb01 f303 	mul.w	r3, r1, r3
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009cb2:	881a      	ldrh	r2, [r3, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	211a      	movs	r1, #26
 8009cbe:	fb01 f303 	mul.w	r3, r1, r3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b25b      	sxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da16      	bge.n	8009cfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	211a      	movs	r1, #26
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	4413      	add	r3, r2
 8009cdc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ce0:	781a      	ldrb	r2, [r3, #0]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	211a      	movs	r1, #26
 8009cec:	fb01 f303 	mul.w	r3, r1, r3
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009cf6:	881a      	ldrh	r2, [r3, #0]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	835a      	strh	r2, [r3, #26]
 8009cfc:	e015      	b.n	8009d2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	211a      	movs	r1, #26
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009d0e:	781a      	ldrb	r2, [r3, #0]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	211a      	movs	r1, #26
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009d24:	881a      	ldrh	r2, [r3, #0]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	7b9b      	ldrb	r3, [r3, #14]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 f8ce 	bl	800bed2 <USBH_AllocPipe>
 8009d36:	4603      	mov	r3, r0
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	7bdb      	ldrb	r3, [r3, #15]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 f8c4 	bl	800bed2 <USBH_AllocPipe>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	7b59      	ldrb	r1, [r3, #13]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	7b98      	ldrb	r0, [r3, #14]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	8b12      	ldrh	r2, [r2, #24]
 8009d6a:	9202      	str	r2, [sp, #8]
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	9201      	str	r2, [sp, #4]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	4623      	mov	r3, r4
 8009d74:	4602      	mov	r2, r0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f002 f87c 	bl	800be74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	7b19      	ldrb	r1, [r3, #12]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	7bd8      	ldrb	r0, [r3, #15]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	8b52      	ldrh	r2, [r2, #26]
 8009d94:	9202      	str	r2, [sp, #8]
 8009d96:	2202      	movs	r2, #2
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4623      	mov	r3, r4
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f002 f867 	bl	800be74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	7b5b      	ldrb	r3, [r3, #13]
 8009db2:	2200      	movs	r2, #0
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f006 fe3c 	bl	8010a34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	7b1b      	ldrb	r3, [r3, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f006 fe35 	bl	8010a34 <USBH_LL_SetToggle>

  return USBH_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd90      	pop	{r4, r7, pc}

08009dd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00e      	beq.n	8009e0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f002 f85c 	bl	800beb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f002 f887 	bl	800bf14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	7b1b      	ldrb	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00e      	beq.n	8009e32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	7b1b      	ldrb	r3, [r3, #12]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f002 f849 	bl	800beb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	7b1b      	ldrb	r3, [r3, #12]
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f002 f874 	bl	800bf14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	7b5b      	ldrb	r3, [r3, #13]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	7b5b      	ldrb	r3, [r3, #13]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f002 f836 	bl	800beb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	7b5b      	ldrb	r3, [r3, #13]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f861 	bl	800bf14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f006 fe71 	bl	8010b54 <free>
    phost->pActiveClass->pData = 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e78:	2200      	movs	r2, #0
 8009e7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3340      	adds	r3, #64	@ 0x40
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f8b1 	bl	800a006 <GetLineCoding>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d105      	bne.n	8009eba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009eba:	7afb      	ldrb	r3, [r7, #11]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d877      	bhi.n	8009fd8 <USBH_CDC_Process+0x114>
 8009ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <USBH_CDC_Process+0x2c>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f05 	.word	0x08009f05
 8009ef4:	08009f0b 	.word	0x08009f0b
 8009ef8:	08009f3b 	.word	0x08009f3b
 8009efc:	08009faf 	.word	0x08009faf
 8009f00:	08009fbd 	.word	0x08009fbd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]
      break;
 8009f08:	e06d      	b.n	8009fe6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f897 	bl	800a044 <SetLineCoding>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d104      	bne.n	8009f2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f28:	e058      	b.n	8009fdc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d055      	beq.n	8009fdc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2204      	movs	r2, #4
 8009f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f38:	e050      	b.n	8009fdc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	3340      	adds	r3, #64	@ 0x40
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f860 	bl	800a006 <GetLineCoding>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d126      	bne.n	8009f9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f62:	791b      	ldrb	r3, [r3, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d13b      	bne.n	8009fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d133      	bne.n	8009fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d12b      	bne.n	8009fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d124      	bne.n	8009fe0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f982 	bl	800a2a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f9c:	e020      	b.n	8009fe0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d01d      	beq.n	8009fe0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009fac:	e018      	b.n	8009fe0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f867 	bl	800a082 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f8f6 	bl	800a1a6 <CDC_ProcessReception>
      break;
 8009fba:	e014      	b.n	8009fe6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 f951 	bl	800b266 <USBH_ClrFeature>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009fd6:	e005      	b.n	8009fe4 <USBH_CDC_Process+0x120>

    default:
      break;
 8009fd8:	bf00      	nop
 8009fda:	e004      	b.n	8009fe6 <USBH_CDC_Process+0x122>
      break;
 8009fdc:	bf00      	nop
 8009fde:	e002      	b.n	8009fe6 <USBH_CDC_Process+0x122>
      break;
 8009fe0:	bf00      	nop
 8009fe2:	e000      	b.n	8009fe6 <USBH_CDC_Process+0x122>
      break;
 8009fe4:	bf00      	nop

  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	22a1      	movs	r2, #161	@ 0xa1
 800a014:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2221      	movs	r2, #33	@ 0x21
 800a01a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2207      	movs	r2, #7
 800a02c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2207      	movs	r2, #7
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fbdc 	bl	800b7f2 <USBH_CtlReq>
 800a03a:	4603      	mov	r3, r0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2221      	movs	r2, #33	@ 0x21
 800a052:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2220      	movs	r2, #32
 800a058:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2207      	movs	r2, #7
 800a06a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2207      	movs	r2, #7
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fbbd 	bl	800b7f2 <USBH_CtlReq>
 800a078:	4603      	mov	r3, r0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b086      	sub	sp, #24
 800a086:	af02      	add	r7, sp, #8
 800a088:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a094:	2300      	movs	r3, #0
 800a096:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d002      	beq.n	800a0a8 <CDC_ProcessTransmission+0x26>
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d023      	beq.n	800a0ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a0a6:	e07a      	b.n	800a19e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	8b12      	ldrh	r2, [r2, #24]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d90b      	bls.n	800a0cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	69d9      	ldr	r1, [r3, #28]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8b1a      	ldrh	r2, [r3, #24]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	7b5b      	ldrb	r3, [r3, #13]
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	9000      	str	r0, [sp, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f001 fe92 	bl	800bdee <USBH_BulkSendData>
 800a0ca:	e00b      	b.n	800a0e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	7b5b      	ldrb	r3, [r3, #13]
 800a0da:	2001      	movs	r0, #1
 800a0dc:	9000      	str	r0, [sp, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fe85 	bl	800bdee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0ec:	e057      	b.n	800a19e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	7b5b      	ldrb	r3, [r3, #13]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f006 fc73 	bl	80109e0 <USBH_LL_GetURBState>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d136      	bne.n	800a172 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	8b12      	ldrh	r2, [r2, #24]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d90e      	bls.n	800a12e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	8b12      	ldrh	r2, [r2, #24]
 800a118:	1a9a      	subs	r2, r3, r2
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	8b12      	ldrh	r2, [r2, #24]
 800a126:	441a      	add	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	61da      	str	r2, [r3, #28]
 800a12c:	e002      	b.n	800a134 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800a144:	e006      	b.n	800a154 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f892 	bl	800a278 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2204      	movs	r2, #4
 800a158:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a168:	2300      	movs	r3, #0
 800a16a:	2200      	movs	r2, #0
 800a16c:	f002 f900 	bl	800c370 <osMessageQueuePut>
      break;
 800a170:	e014      	b.n	800a19c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a172:	7afb      	ldrb	r3, [r7, #11]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d111      	bne.n	800a19c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2204      	movs	r2, #4
 800a184:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a194:	2300      	movs	r3, #0
 800a196:	2200      	movs	r2, #0
 800a198:	f002 f8ea 	bl	800c370 <osMessageQueuePut>
      break;
 800a19c:	bf00      	nop
  }
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d002      	beq.n	800a1cc <CDC_ProcessReception+0x26>
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d00e      	beq.n	800a1e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a1ca:	e051      	b.n	800a270 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	6a19      	ldr	r1, [r3, #32]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	8b5a      	ldrh	r2, [r3, #26]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	7b1b      	ldrb	r3, [r3, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 fe2d 	bl	800be38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a1e6:	e043      	b.n	800a270 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	7b1b      	ldrb	r3, [r3, #12]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f006 fbf6 	bl	80109e0 <USBH_LL_GetURBState>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a1f8:	7cfb      	ldrb	r3, [r7, #19]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d137      	bne.n	800a26e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	7b1b      	ldrb	r3, [r3, #12]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f006 fb59 	bl	80108bc <USBH_LL_GetLastXferSize>
 800a20a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	429a      	cmp	r2, r3
 800a214:	d016      	beq.n	800a244 <CDC_ProcessReception+0x9e>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	8b5b      	ldrh	r3, [r3, #26]
 800a21a:	461a      	mov	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4293      	cmp	r3, r2
 800a220:	d910      	bls.n	800a244 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1ad2      	subs	r2, r2, r3
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	441a      	add	r2, r3
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2203      	movs	r2, #3
 800a23e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a242:	e006      	b.n	800a252 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f81d 	bl	800a28c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2204      	movs	r2, #4
 800a256:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a266:	2300      	movs	r3, #0
 800a268:	2200      	movs	r2, #0
 800a26a:	f002 f881 	bl	800c370 <osMessageQueuePut>
      break;
 800a26e:	bf00      	nop
  }
}
 800a270:	bf00      	nop
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e044      	b.n	800a356 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	79fa      	ldrb	r2, [r7, #7]
 800a2d0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f841 	bl	800a36c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a318:	2200      	movs	r2, #0
 800a31a:	2104      	movs	r1, #4
 800a31c:	2010      	movs	r0, #16
 800a31e:	f001 ffb4 	bl	800c28a <osMessageQueueNew>
 800a322:	4602      	mov	r2, r0
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a32a:	4b0d      	ldr	r3, [pc, #52]	@ (800a360 <USBH_Init+0xac>)
 800a32c:	4a0d      	ldr	r2, [pc, #52]	@ (800a364 <USBH_Init+0xb0>)
 800a32e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a330:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <USBH_Init+0xac>)
 800a332:	2280      	movs	r2, #128	@ 0x80
 800a334:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a336:	4b0a      	ldr	r3, [pc, #40]	@ (800a360 <USBH_Init+0xac>)
 800a338:	2218      	movs	r2, #24
 800a33a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a33c:	4a08      	ldr	r2, [pc, #32]	@ (800a360 <USBH_Init+0xac>)
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	4809      	ldr	r0, [pc, #36]	@ (800a368 <USBH_Init+0xb4>)
 800a342:	f001 fef5 	bl	800c130 <osThreadNew>
 800a346:	4602      	mov	r2, r0
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f006 fa00 	bl	8010754 <USBH_LL_Init>

  return USBH_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	20000860 	.word	0x20000860
 800a364:	080159f0 	.word	0x080159f0
 800a368:	0800afdd 	.word	0x0800afdd

0800a36c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	e009      	b.n	800a392 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	33e0      	adds	r3, #224	@ 0xe0
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	2200      	movs	r2, #0
 800a38a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b0f      	cmp	r3, #15
 800a396:	d9f2      	bls.n	800a37e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e009      	b.n	800a3b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3b8:	d3f1      	bcc.n	800a39e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2240      	movs	r2, #64	@ 0x40
 800a3de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d016      	beq.n	800a456 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10e      	bne.n	800a450 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a438:	1c59      	adds	r1, r3, #1
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	33de      	adds	r3, #222	@ 0xde
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
 800a44e:	e004      	b.n	800a45a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a450:	2302      	movs	r3, #2
 800a452:	73fb      	strb	r3, [r7, #15]
 800a454:	e001      	b.n	800a45a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a456:	2302      	movs	r3, #2
 800a458:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	429a      	cmp	r2, r3
 800a482:	d204      	bcs.n	800a48e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a48c:	e001      	b.n	800a492 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a48e:	2302      	movs	r3, #2
 800a490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	70fb      	strb	r3, [r7, #3]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70bb      	strb	r3, [r7, #2]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a4c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a4ca:	e025      	b.n	800a518 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	221a      	movs	r2, #26
 800a4d0:	fb02 f303 	mul.w	r3, r2, r3
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	3302      	adds	r3, #2
 800a4dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	795b      	ldrb	r3, [r3, #5]
 800a4e2:	78fa      	ldrb	r2, [r7, #3]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d002      	beq.n	800a4ee <USBH_FindInterface+0x4e>
 800a4e8:	78fb      	ldrb	r3, [r7, #3]
 800a4ea:	2bff      	cmp	r3, #255	@ 0xff
 800a4ec:	d111      	bne.n	800a512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a4f2:	78ba      	ldrb	r2, [r7, #2]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d002      	beq.n	800a4fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4f8:	78bb      	ldrb	r3, [r7, #2]
 800a4fa:	2bff      	cmp	r3, #255	@ 0xff
 800a4fc:	d109      	bne.n	800a512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a502:	787a      	ldrb	r2, [r7, #1]
 800a504:	429a      	cmp	r2, r3
 800a506:	d002      	beq.n	800a50e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a508:	787b      	ldrb	r3, [r7, #1]
 800a50a:	2bff      	cmp	r3, #255	@ 0xff
 800a50c:	d101      	bne.n	800a512 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	e006      	b.n	800a520 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	3301      	adds	r3, #1
 800a516:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d9d6      	bls.n	800a4cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a51e:	23ff      	movs	r3, #255	@ 0xff
}
 800a520:	4618      	mov	r0, r3
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f006 f949 	bl	80107cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a53a:	2101      	movs	r1, #1
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f006 fa62 	bl	8010a06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af04      	add	r7, sp, #16
 800a552:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a554:	2302      	movs	r3, #2
 800a556:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	d102      	bne.n	800a56e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2203      	movs	r2, #3
 800a56c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b0b      	cmp	r3, #11
 800a576:	f200 8244 	bhi.w	800aa02 <USBH_Process+0x4b6>
 800a57a:	a201      	add	r2, pc, #4	@ (adr r2, 800a580 <USBH_Process+0x34>)
 800a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a580:	0800a5b1 	.word	0x0800a5b1
 800a584:	0800a5ff 	.word	0x0800a5ff
 800a588:	0800a683 	.word	0x0800a683
 800a58c:	0800a981 	.word	0x0800a981
 800a590:	0800aa03 	.word	0x0800aa03
 800a594:	0800a73f 	.word	0x0800a73f
 800a598:	0800a90b 	.word	0x0800a90b
 800a59c:	0800a791 	.word	0x0800a791
 800a5a0:	0800a7cd 	.word	0x0800a7cd
 800a5a4:	0800a805 	.word	0x0800a805
 800a5a8:	0800a863 	.word	0x0800a863
 800a5ac:	0800a969 	.word	0x0800a969
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 8224 	beq.w	800aa06 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a5c4:	20c8      	movs	r0, #200	@ 0xc8
 800a5c6:	f006 fa65 	bl	8010a94 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f006 f95b 	bl	8010886 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f001 feba 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a5fc:	e203      	b.n	800aa06 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a604:	2b01      	cmp	r3, #1
 800a606:	d107      	bne.n	800a618 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	e025      	b.n	800a664 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a61e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a622:	d914      	bls.n	800a64e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a62a:	3301      	adds	r3, #1
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d903      	bls.n	800a646 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	220d      	movs	r2, #13
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e00e      	b.n	800a664 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e00a      	b.n	800a664 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a654:	f103 020a 	add.w	r2, r3, #10
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a65e:	200a      	movs	r0, #10
 800a660:	f006 fa18 	bl	8010a94 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a678:	2300      	movs	r3, #0
 800a67a:	2200      	movs	r2, #0
 800a67c:	f001 fe78 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a680:	e1c8      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d005      	beq.n	800a698 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a692:	2104      	movs	r1, #4
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a698:	2064      	movs	r0, #100	@ 0x64
 800a69a:	f006 f9fb 	bl	8010a94 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f006 f8ca 	bl	8010838 <USBH_LL_GetSpeed>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2205      	movs	r2, #5
 800a6b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fc0b 	bl	800bed2 <USBH_AllocPipe>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a6c4:	2180      	movs	r1, #128	@ 0x80
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fc03 	bl	800bed2 <USBH_AllocPipe>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7919      	ldrb	r1, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	9201      	str	r2, [sp, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2280      	movs	r2, #128	@ 0x80
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 fbbd 	bl	800be74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	7959      	ldrb	r1, [r3, #5]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a70e:	9202      	str	r2, [sp, #8]
 800a710:	2200      	movs	r2, #0
 800a712:	9201      	str	r2, [sp, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4603      	mov	r3, r0
 800a718:	2200      	movs	r2, #0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fbaa 	bl	800be74 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	f001 fe1a 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a73c:	e16a      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f96e 	bl	800aa20 <USBH_HandleEnum>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 815c 	bne.w	800aa0a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a760:	2b01      	cmp	r3, #1
 800a762:	d103      	bne.n	800a76c <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2208      	movs	r2, #8
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	e002      	b.n	800a772 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2207      	movs	r2, #7
 800a770:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2205      	movs	r2, #5
 800a776:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a786:	2300      	movs	r3, #0
 800a788:	2200      	movs	r2, #0
 800a78a:	f001 fdf1 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a78e:	e13c      	b.n	800aa0a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 8139 	beq.w	800aa0e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f001 fdd3 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a7ca:	e120      	b.n	800aa0e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fcff 	bl	800b1d8 <USBH_SetCfg>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2209      	movs	r2, #9
 800a7e4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f001 fdb7 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a802:	e107      	b.n	800aa14 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a80a:	f003 0320 	and.w	r3, r3, #32
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d015      	beq.n	800a83e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a812:	2101      	movs	r1, #1
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fd02 	bl	800b21e <USBH_SetFeature>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	220a      	movs	r2, #10
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e00a      	b.n	800a844 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d106      	bne.n	800a844 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	220a      	movs	r2, #10
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	e002      	b.n	800a844 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	220a      	movs	r2, #10
 800a842:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a858:	2300      	movs	r3, #0
 800a85a:	2200      	movs	r2, #0
 800a85c:	f001 fd88 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a860:	e0d8      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d03f      	beq.n	800a8ec <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a874:	2300      	movs	r3, #0
 800a876:	73fb      	strb	r3, [r7, #15]
 800a878:	e016      	b.n	800a8a8 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a87a:	7bfa      	ldrb	r2, [r7, #15]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	32de      	adds	r2, #222	@ 0xde
 800a880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a884:	791a      	ldrb	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d108      	bne.n	800a8a2 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a890:	7bfa      	ldrb	r2, [r7, #15]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	32de      	adds	r2, #222	@ 0xde
 800a896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a8a0:	e005      	b.n	800a8ae <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0e5      	beq.n	800a87a <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d016      	beq.n	800a8e6 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	4798      	blx	r3
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2206      	movs	r2, #6
 800a8ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a8d6:	2103      	movs	r1, #3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
 800a8dc:	e006      	b.n	800a8ec <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	220d      	movs	r2, #13
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e002      	b.n	800a8ec <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	220d      	movs	r2, #13
 800a8ea:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2205      	movs	r2, #5
 800a8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a900:	2300      	movs	r3, #0
 800a902:	2200      	movs	r2, #0
 800a904:	f001 fd34 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a908:	e084      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d017      	beq.n	800a944 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	220b      	movs	r2, #11
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e00a      	b.n	800a94a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d106      	bne.n	800a94a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	220d      	movs	r2, #13
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	e002      	b.n	800a94a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	220d      	movs	r2, #13
 800a948:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2205      	movs	r2, #5
 800a94e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a95e:	2300      	movs	r3, #0
 800a960:	2200      	movs	r2, #0
 800a962:	f001 fd05 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800a966:	e055      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d04f      	beq.n	800aa12 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	4798      	blx	r3
      }
      break;
 800a97e:	e048      	b.n	800aa12 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7ff fcef 	bl	800a36c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d005      	beq.n	800a9c2 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a9bc:	2105      	movs	r1, #5
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d107      	bne.n	800a9de <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fda8 	bl	800a52c <USBH_Start>
 800a9dc:	e002      	b.n	800a9e4 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f005 fef4 	bl	80107cc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f001 fcb8 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      break;
 800aa00:	e008      	b.n	800aa14 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa02:	bf00      	nop
 800aa04:	e006      	b.n	800aa14 <USBH_Process+0x4c8>
      break;
 800aa06:	bf00      	nop
 800aa08:	e004      	b.n	800aa14 <USBH_Process+0x4c8>
      break;
 800aa0a:	bf00      	nop
 800aa0c:	e002      	b.n	800aa14 <USBH_Process+0x4c8>
    break;
 800aa0e:	bf00      	nop
 800aa10:	e000      	b.n	800aa14 <USBH_Process+0x4c8>
      break;
 800aa12:	bf00      	nop
  }
  return USBH_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop

0800aa20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af04      	add	r7, sp, #16
 800aa26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	2b07      	cmp	r3, #7
 800aa36:	f200 8204 	bhi.w	800ae42 <USBH_HandleEnum+0x422>
 800aa3a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <USBH_HandleEnum+0x20>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	0800ab1b 	.word	0x0800ab1b
 800aa48:	0800ab85 	.word	0x0800ab85
 800aa4c:	0800ac0f 	.word	0x0800ac0f
 800aa50:	0800ac79 	.word	0x0800ac79
 800aa54:	0800ace9 	.word	0x0800ace9
 800aa58:	0800ad85 	.word	0x0800ad85
 800aa5c:	0800ae03 	.word	0x0800ae03
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aa60:	2108      	movs	r1, #8
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fae8 	bl	800b038 <USBH_Get_DevDesc>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d12e      	bne.n	800aad0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	7919      	ldrb	r1, [r3, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa96:	9202      	str	r2, [sp, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	9201      	str	r2, [sp, #4]
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2280      	movs	r2, #128	@ 0x80
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 f9e6 	bl	800be74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	7959      	ldrb	r1, [r3, #5]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aabc:	9202      	str	r2, [sp, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	9201      	str	r2, [sp, #4]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	4603      	mov	r3, r0
 800aac6:	2200      	movs	r2, #0
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 f9d3 	bl	800be74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aace:	e1ba      	b.n	800ae46 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	f040 81b7 	bne.w	800ae46 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aade:	3301      	adds	r3, #1
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d903      	bls.n	800aafa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	220d      	movs	r2, #13
 800aaf6:	701a      	strb	r2, [r3, #0]
      break;
 800aaf8:	e1a5      	b.n	800ae46 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 fa07 	bl	800bf14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	791b      	ldrb	r3, [r3, #4]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 fa01 	bl	800bf14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	701a      	strb	r2, [r3, #0]
      break;
 800ab18:	e195      	b.n	800ae46 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab1a:	2112      	movs	r1, #18
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fa8b 	bl	800b038 <USBH_Get_DevDesc>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab32:	e18a      	b.n	800ae4a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	f040 8187 	bne.w	800ae4a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab42:	3301      	adds	r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d903      	bls.n	800ab5e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	220d      	movs	r2, #13
 800ab5a:	701a      	strb	r2, [r3, #0]
      break;
 800ab5c:	e175      	b.n	800ae4a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	795b      	ldrb	r3, [r3, #5]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f9d5 	bl	800bf14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	791b      	ldrb	r3, [r3, #4]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f9cf 	bl	800bf14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
      break;
 800ab82:	e162      	b.n	800ae4a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ab84:	2101      	movs	r1, #1
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fb02 	bl	800b190 <USBH_SetAddress>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d130      	bne.n	800abf8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800ab96:	2002      	movs	r0, #2
 800ab98:	f005 ff7c 	bl	8010a94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2203      	movs	r2, #3
 800aba8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	7919      	ldrb	r1, [r3, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abbe:	9202      	str	r2, [sp, #8]
 800abc0:	2200      	movs	r2, #0
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	4603      	mov	r3, r0
 800abc8:	2280      	movs	r2, #128	@ 0x80
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 f952 	bl	800be74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7959      	ldrb	r1, [r3, #5]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abe4:	9202      	str	r2, [sp, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	9201      	str	r2, [sp, #4]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	2200      	movs	r2, #0
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 f93f 	bl	800be74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800abf6:	e12a      	b.n	800ae4e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	f040 8127 	bne.w	800ae4e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	220d      	movs	r2, #13
 800ac04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	705a      	strb	r2, [r3, #1]
      break;
 800ac0c:	e11f      	b.n	800ae4e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac0e:	2109      	movs	r1, #9
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa39 	bl	800b088 <USBH_Get_CfgDesc>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2204      	movs	r2, #4
 800ac24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac26:	e114      	b.n	800ae52 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f040 8111 	bne.w	800ae52 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac36:	3301      	adds	r3, #1
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d903      	bls.n	800ac52 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	220d      	movs	r2, #13
 800ac4e:	701a      	strb	r2, [r3, #0]
      break;
 800ac50:	e0ff      	b.n	800ae52 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	795b      	ldrb	r3, [r3, #5]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f95b 	bl	800bf14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 f955 	bl	800bf14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
      break;
 800ac76:	e0ec      	b.n	800ae52 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa01 	bl	800b088 <USBH_Get_CfgDesc>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2205      	movs	r2, #5
 800ac94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac96:	e0de      	b.n	800ae56 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	f040 80db 	bne.w	800ae56 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aca6:	3301      	adds	r3, #1
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d903      	bls.n	800acc2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	220d      	movs	r2, #13
 800acbe:	701a      	strb	r2, [r3, #0]
      break;
 800acc0:	e0c9      	b.n	800ae56 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	795b      	ldrb	r3, [r3, #5]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f923 	bl	800bf14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	791b      	ldrb	r3, [r3, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f91d 	bl	800bf14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
      break;
 800ace6:	e0b6      	b.n	800ae56 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d036      	beq.n	800ad60 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800acfe:	23ff      	movs	r3, #255	@ 0xff
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f9e5 	bl	800b0d0 <USBH_Get_StringDesc>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d111      	bne.n	800ad34 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2206      	movs	r2, #6
 800ad14:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2205      	movs	r2, #5
 800ad1a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f001 fb1f 	bl	800c370 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad32:	e092      	b.n	800ae5a <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	f040 808f 	bne.w	800ae5a <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2206      	movs	r2, #6
 800ad40:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2205      	movs	r2, #5
 800ad46:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad56:	2300      	movs	r3, #0
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f001 fb09 	bl	800c370 <osMessageQueuePut>
      break;
 800ad5e:	e07c      	b.n	800ae5a <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2206      	movs	r2, #6
 800ad64:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2205      	movs	r2, #5
 800ad6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f001 faf7 	bl	800c370 <osMessageQueuePut>
      break;
 800ad82:	e06a      	b.n	800ae5a <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d027      	beq.n	800adde <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad9a:	23ff      	movs	r3, #255	@ 0xff
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f997 	bl	800b0d0 <USBH_Get_StringDesc>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2207      	movs	r2, #7
 800adb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800adb2:	e054      	b.n	800ae5e <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d151      	bne.n	800ae5e <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2207      	movs	r2, #7
 800adbe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2205      	movs	r2, #5
 800adc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800add4:	2300      	movs	r3, #0
 800add6:	2200      	movs	r2, #0
 800add8:	f001 faca 	bl	800c370 <osMessageQueuePut>
      break;
 800addc:	e03f      	b.n	800ae5e <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2207      	movs	r2, #7
 800ade2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2205      	movs	r2, #5
 800ade8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800adf8:	2300      	movs	r3, #0
 800adfa:	2200      	movs	r2, #0
 800adfc:	f001 fab8 	bl	800c370 <osMessageQueuePut>
      break;
 800ae00:	e02d      	b.n	800ae5e <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d017      	beq.n	800ae3c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae18:	23ff      	movs	r3, #255	@ 0xff
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f958 	bl	800b0d0 <USBH_Get_StringDesc>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ae2e:	e018      	b.n	800ae62 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d115      	bne.n	800ae62 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3a:	e012      	b.n	800ae62 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae40:	e00f      	b.n	800ae62 <USBH_HandleEnum+0x442>

    default:
      break;
 800ae42:	bf00      	nop
 800ae44:	e00e      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae46:	bf00      	nop
 800ae48:	e00c      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae4a:	bf00      	nop
 800ae4c:	e00a      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae4e:	bf00      	nop
 800ae50:	e008      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae52:	bf00      	nop
 800ae54:	e006      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae56:	bf00      	nop
 800ae58:	e004      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae5a:	bf00      	nop
 800ae5c:	e002      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae5e:	bf00      	nop
 800ae60:	e000      	b.n	800ae64 <USBH_HandleEnum+0x444>
      break;
 800ae62:	bf00      	nop
  }
  return Status;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop

0800ae70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f804 	bl	800aeb2 <USBH_HandleSof>
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b0b      	cmp	r3, #11
 800aec2:	d10a      	bne.n	800aeda <USBH_HandleSof+0x28>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d005      	beq.n	800aeda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
  }
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800af06:	2300      	movs	r3, #0
 800af08:	2200      	movs	r2, #0
 800af0a:	f001 fa31 	bl	800c370 <osMessageQueuePut>
#endif
#endif

  return;
 800af0e:	bf00      	nop
}
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800af26:	bf00      	nop
}
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800af66:	2300      	movs	r3, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	f001 fa01 	bl	800c370 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f005 fc32 	bl	8010802 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	791b      	ldrb	r3, [r3, #4]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 ffb5 	bl	800bf14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	795b      	ldrb	r3, [r3, #5]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 ffaf 	bl	800bf14 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800afca:	2300      	movs	r3, #0
 800afcc:	2200      	movs	r2, #0
 800afce:	f001 f9cf 	bl	800c370 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	2200      	movs	r2, #0
 800aff6:	f001 fa1b 	bl	800c430 <osMessageQueueGet>
 800affa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1f0      	bne.n	800afe4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff faa2 	bl	800a54c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b008:	e7ec      	b.n	800afe4 <USBH_Process_OS+0x8>

0800b00a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b026:	2300      	movs	r3, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	f001 f9a1 	bl	800c370 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	4613      	mov	r3, r2
 800b052:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b056:	2100      	movs	r1, #0
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f864 	bl	800b126 <USBH_GetDescriptor>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	b292      	uxth	r2, r2
 800b078:	4619      	mov	r1, r3
 800b07a:	f000 f919 	bl	800b2b0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	331c      	adds	r3, #28
 800b098:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f83d 	bl	800b126 <USBH_GetDescriptor>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b0b6:	887b      	ldrh	r3, [r7, #2]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f985 	bl	800b3cc <USBH_ParseCfgDesc>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	607a      	str	r2, [r7, #4]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	460b      	mov	r3, r1
 800b0de:	72fb      	strb	r3, [r7, #11]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b0ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b0f4:	893b      	ldrh	r3, [r7, #8]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 f812 	bl	800b126 <USBH_GetDescriptor>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d107      	bne.n	800b11c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b112:	893a      	ldrh	r2, [r7, #8]
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fb1e 	bl	800b758 <USBH_ParseStringDesc>
  }

  return status;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	72fb      	strb	r3, [r7, #11]
 800b134:	4613      	mov	r3, r2
 800b136:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d11c      	bne.n	800b17a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b146:	b2da      	uxtb	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2206      	movs	r2, #6
 800b150:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	893a      	ldrh	r2, [r7, #8]
 800b156:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b158:	893b      	ldrh	r3, [r7, #8]
 800b15a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b162:	d104      	bne.n	800b16e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f240 4209 	movw	r2, #1033	@ 0x409
 800b16a:	829a      	strh	r2, [r3, #20]
 800b16c:	e002      	b.n	800b174 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8b3a      	ldrh	r2, [r7, #24]
 800b178:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b17a:	8b3b      	ldrh	r3, [r7, #24]
 800b17c:	461a      	mov	r2, r3
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fb36 	bl	800b7f2 <USBH_CtlReq>
 800b186:	4603      	mov	r3, r0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	789b      	ldrb	r3, [r3, #2]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d10f      	bne.n	800b1c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fb12 	bl	800b7f2 <USBH_CtlReq>
 800b1ce:	4603      	mov	r3, r0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d10e      	bne.n	800b20a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2209      	movs	r2, #9
 800b1f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	887a      	ldrh	r2, [r7, #2]
 800b1fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b20a:	2200      	movs	r2, #0
 800b20c:	2100      	movs	r1, #0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 faef 	bl	800b7f2 <USBH_CtlReq>
 800b214:	4603      	mov	r3, r0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	789b      	ldrb	r3, [r3, #2]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d10f      	bne.n	800b252 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2203      	movs	r2, #3
 800b23c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 facb 	bl	800b7f2 <USBH_CtlReq>
 800b25c:	4603      	mov	r3, r0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	789b      	ldrb	r3, [r3, #2]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d10f      	bne.n	800b29a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2202      	movs	r2, #2
 800b27e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b29a:	2200      	movs	r2, #0
 800b29c:	2100      	movs	r1, #0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 faa7 	bl	800b7f2 <USBH_CtlReq>
 800b2a4:	4603      	mov	r3, r0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	785a      	ldrb	r2, [r3, #1]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3303      	adds	r3, #3
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	791a      	ldrb	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	795a      	ldrb	r2, [r3, #5]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	799a      	ldrb	r2, [r3, #6]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	79da      	ldrb	r2, [r3, #7]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	79db      	ldrb	r3, [r3, #7]
 800b30c:	2b20      	cmp	r3, #32
 800b30e:	dc0f      	bgt.n	800b330 <USBH_ParseDevDesc+0x80>
 800b310:	2b08      	cmp	r3, #8
 800b312:	db14      	blt.n	800b33e <USBH_ParseDevDesc+0x8e>
 800b314:	3b08      	subs	r3, #8
 800b316:	4a2c      	ldr	r2, [pc, #176]	@ (800b3c8 <USBH_ParseDevDesc+0x118>)
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b00      	cmp	r3, #0
 800b322:	bf14      	ite	ne
 800b324:	2301      	movne	r3, #1
 800b326:	2300      	moveq	r3, #0
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <USBH_ParseDevDesc+0x84>
 800b32e:	e006      	b.n	800b33e <USBH_ParseDevDesc+0x8e>
 800b330:	2b40      	cmp	r3, #64	@ 0x40
 800b332:	d104      	bne.n	800b33e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	79da      	ldrb	r2, [r3, #7]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	71da      	strb	r2, [r3, #7]
      break;
 800b33c:	e003      	b.n	800b346 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2240      	movs	r2, #64	@ 0x40
 800b342:	71da      	strb	r2, [r3, #7]
      break;
 800b344:	bf00      	nop
  }

  if (length > 8U)
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d936      	bls.n	800b3ba <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	3308      	adds	r3, #8
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	3309      	adds	r3, #9
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4313      	orrs	r3, r2
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	330a      	adds	r3, #10
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	330b      	adds	r3, #11
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	b29b      	uxth	r3, r3
 800b378:	4313      	orrs	r3, r2
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	330c      	adds	r3, #12
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	330d      	adds	r3, #13
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	021b      	lsls	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	4313      	orrs	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	7b9a      	ldrb	r2, [r3, #14]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	7bda      	ldrb	r2, [r3, #15]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	7c1a      	ldrb	r2, [r3, #16]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	7c5a      	ldrb	r2, [r3, #17]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	745a      	strb	r2, [r3, #17]
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	01000101 	.word	0x01000101

0800b3cc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08c      	sub	sp, #48	@ 0x30
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b3e0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	785a      	ldrb	r2, [r3, #1]
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	3302      	adds	r3, #2
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	3303      	adds	r3, #3
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	4313      	orrs	r3, r2
 800b420:	b29b      	uxth	r3, r3
 800b422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b426:	bf28      	it	cs
 800b428:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	791a      	ldrb	r2, [r3, #4]
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	795a      	ldrb	r2, [r3, #5]
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	799a      	ldrb	r2, [r3, #6]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	79da      	ldrb	r2, [r3, #7]
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	7a1a      	ldrb	r2, [r3, #8]
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d002      	beq.n	800b468 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	2209      	movs	r2, #9
 800b466:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b468:	88fb      	ldrh	r3, [r7, #6]
 800b46a:	2b09      	cmp	r3, #9
 800b46c:	f240 809d 	bls.w	800b5aa <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800b470:	2309      	movs	r3, #9
 800b472:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b478:	e081      	b.n	800b57e <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b47a:	f107 0316 	add.w	r3, r7, #22
 800b47e:	4619      	mov	r1, r3
 800b480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b482:	f000 f99c 	bl	800b7be <USBH_GetNextDesc>
 800b486:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48a:	785b      	ldrb	r3, [r3, #1]
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d176      	bne.n	800b57e <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b09      	cmp	r3, #9
 800b496:	d002      	beq.n	800b49e <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	2209      	movs	r2, #9
 800b49c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b49e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4a2:	221a      	movs	r2, #26
 800b4a4:	fb02 f303 	mul.w	r3, r2, r3
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	6a3a      	ldr	r2, [r7, #32]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b4b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4b4:	69f8      	ldr	r0, [r7, #28]
 800b4b6:	f000 f87e 	bl	800b5b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4c4:	e043      	b.n	800b54e <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b4c6:	f107 0316 	add.w	r3, r7, #22
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ce:	f000 f976 	bl	800b7be <USBH_GetNextDesc>
 800b4d2:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	2b05      	cmp	r3, #5
 800b4da:	d138      	bne.n	800b54e <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	795b      	ldrb	r3, [r3, #5]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d10f      	bne.n	800b504 <USBH_ParseCfgDesc+0x138>
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	799b      	ldrb	r3, [r3, #6]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d10b      	bne.n	800b504 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	79db      	ldrb	r3, [r3, #7]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10f      	bne.n	800b514 <USBH_ParseCfgDesc+0x148>
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b09      	cmp	r3, #9
 800b4fa:	d00b      	beq.n	800b514 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	2209      	movs	r2, #9
 800b500:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b502:	e007      	b.n	800b514 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b07      	cmp	r3, #7
 800b50a:	d004      	beq.n	800b516 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50e:	2207      	movs	r2, #7
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	e000      	b.n	800b516 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b514:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b51a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b51e:	3201      	adds	r2, #1
 800b520:	00d2      	lsls	r2, r2, #3
 800b522:	211a      	movs	r1, #26
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	4413      	add	r3, r2
 800b52a:	3308      	adds	r3, #8
 800b52c:	6a3a      	ldr	r2, [r7, #32]
 800b52e:	4413      	add	r3, r2
 800b530:	3304      	adds	r3, #4
 800b532:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b536:	69b9      	ldr	r1, [r7, #24]
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 f86b 	bl	800b614 <USBH_ParseEPDesc>
 800b53e:	4603      	mov	r3, r0
 800b540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b544:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b548:	3301      	adds	r3, #1
 800b54a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b556:	429a      	cmp	r2, r3
 800b558:	d204      	bcs.n	800b564 <USBH_ParseCfgDesc+0x198>
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	885a      	ldrh	r2, [r3, #2]
 800b55e:	8afb      	ldrh	r3, [r7, #22]
 800b560:	429a      	cmp	r2, r3
 800b562:	d8b0      	bhi.n	800b4c6 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d201      	bcs.n	800b574 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b570:	2303      	movs	r3, #3
 800b572:	e01c      	b.n	800b5ae <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b578:	3301      	adds	r3, #1
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b57e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b582:	2b01      	cmp	r3, #1
 800b584:	d805      	bhi.n	800b592 <USBH_ParseCfgDesc+0x1c6>
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	885a      	ldrh	r2, [r3, #2]
 800b58a:	8afb      	ldrh	r3, [r7, #22]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	f63f af74 	bhi.w	800b47a <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	791b      	ldrb	r3, [r3, #4]
 800b596:	2b02      	cmp	r3, #2
 800b598:	bf28      	it	cs
 800b59a:	2302      	movcs	r3, #2
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d201      	bcs.n	800b5aa <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e001      	b.n	800b5ae <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b5aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3730      	adds	r7, #48	@ 0x30
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	781a      	ldrb	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	785a      	ldrb	r2, [r3, #1]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	789a      	ldrb	r2, [r3, #2]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	78da      	ldrb	r2, [r3, #3]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	791a      	ldrb	r2, [r3, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	795a      	ldrb	r2, [r3, #5]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	799a      	ldrb	r2, [r3, #6]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	79da      	ldrb	r2, [r3, #7]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	7a1a      	ldrb	r2, [r3, #8]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	721a      	strb	r2, [r3, #8]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	785a      	ldrb	r2, [r3, #1]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	789a      	ldrb	r2, [r3, #2]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	78da      	ldrb	r2, [r3, #3]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3305      	adds	r3, #5
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	b29b      	uxth	r3, r3
 800b656:	4313      	orrs	r3, r2
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	799a      	ldrb	r2, [r3, #6]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	889b      	ldrh	r3, [r3, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d102      	bne.n	800b674 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b66e:	2303      	movs	r3, #3
 800b670:	75fb      	strb	r3, [r7, #23]
 800b672:	e031      	b.n	800b6d8 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	889b      	ldrh	r3, [r3, #4]
 800b678:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b67c:	f023 0307 	bic.w	r3, r3, #7
 800b680:	b29a      	uxth	r2, r3
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	889b      	ldrh	r3, [r3, #4]
 800b68a:	b21a      	sxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3304      	adds	r3, #4
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	4619      	mov	r1, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3305      	adds	r3, #5
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10f      	bne.n	800b6ca <USBH_ParseEPDesc+0xb6>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3305      	adds	r3, #5
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	b21b      	sxth	r3, r3
 800b6c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6c6:	b21b      	sxth	r3, r3
 800b6c8:	e001      	b.n	800b6ce <USBH_ParseEPDesc+0xba>
 800b6ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	b21b      	sxth	r3, r3
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d116      	bne.n	800b710 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	78db      	ldrb	r3, [r3, #3]
 800b6e6:	f003 0303 	and.w	r3, r3, #3
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d005      	beq.n	800b6fa <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	78db      	ldrb	r3, [r3, #3]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d127      	bne.n	800b74a <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	799b      	ldrb	r3, [r3, #6]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <USBH_ParseEPDesc+0xf6>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	799b      	ldrb	r3, [r3, #6]
 800b706:	2b10      	cmp	r3, #16
 800b708:	d91f      	bls.n	800b74a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b70a:	2303      	movs	r3, #3
 800b70c:	75fb      	strb	r3, [r7, #23]
 800b70e:	e01c      	b.n	800b74a <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	78db      	ldrb	r3, [r3, #3]
 800b714:	f003 0303 	and.w	r3, r3, #3
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10a      	bne.n	800b732 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	799b      	ldrb	r3, [r3, #6]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <USBH_ParseEPDesc+0x118>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	799b      	ldrb	r3, [r3, #6]
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d90e      	bls.n	800b74a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b72c:	2303      	movs	r3, #3
 800b72e:	75fb      	strb	r3, [r7, #23]
 800b730:	e00b      	b.n	800b74a <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	78db      	ldrb	r3, [r3, #3]
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d105      	bne.n	800b74a <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	799b      	ldrb	r3, [r3, #6]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b746:	2303      	movs	r3, #3
 800b748:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b03      	cmp	r3, #3
 800b76e:	d120      	bne.n	800b7b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	1e9a      	subs	r2, r3, #2
 800b776:	88fb      	ldrh	r3, [r7, #6]
 800b778:	4293      	cmp	r3, r2
 800b77a:	bf28      	it	cs
 800b77c:	4613      	movcs	r3, r2
 800b77e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3302      	adds	r3, #2
 800b784:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b786:	2300      	movs	r3, #0
 800b788:	82fb      	strh	r3, [r7, #22]
 800b78a:	e00b      	b.n	800b7a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b78c:	8afb      	ldrh	r3, [r7, #22]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4413      	add	r3, r2
 800b792:	781a      	ldrb	r2, [r3, #0]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b79e:	8afb      	ldrh	r3, [r7, #22]
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	82fb      	strh	r3, [r7, #22]
 800b7a4:	8afa      	ldrh	r2, [r7, #22]
 800b7a6:	8abb      	ldrh	r3, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d3ef      	bcc.n	800b78c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	701a      	strb	r2, [r3, #0]
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	7812      	ldrb	r2, [r2, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b800:	2301      	movs	r3, #1
 800b802:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	789b      	ldrb	r3, [r3, #2]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d002      	beq.n	800b812 <USBH_CtlReq+0x20>
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d01d      	beq.n	800b84c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b810:	e043      	b.n	800b89a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	88fa      	ldrh	r2, [r7, #6]
 800b81c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2201      	movs	r2, #1
 800b822:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2202      	movs	r2, #2
 800b828:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b82a:	2301      	movs	r3, #1
 800b82c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2203      	movs	r2, #3
 800b832:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b842:	2300      	movs	r3, #0
 800b844:	2200      	movs	r2, #0
 800b846:	f000 fd93 	bl	800c370 <osMessageQueuePut>
      break;
 800b84a:	e026      	b.n	800b89a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f829 	bl	800b8a4 <USBH_HandleControl>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <USBH_CtlReq+0x70>
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d106      	bne.n	800b870 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	761a      	strb	r2, [r3, #24]
 800b86e:	e005      	b.n	800b87c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	2b02      	cmp	r3, #2
 800b874:	d102      	bne.n	800b87c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2201      	movs	r2, #1
 800b87a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2203      	movs	r2, #3
 800b880:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b890:	2300      	movs	r3, #0
 800b892:	2200      	movs	r2, #0
 800b894:	f000 fd6c 	bl	800c370 <osMessageQueuePut>
      break;
 800b898:	bf00      	nop
  }
  return status;
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af02      	add	r7, sp, #8
 800b8aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7e1b      	ldrb	r3, [r3, #24]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	2b0a      	cmp	r3, #10
 800b8bc:	f200 8229 	bhi.w	800bd12 <USBH_HandleControl+0x46e>
 800b8c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c8 <USBH_HandleControl+0x24>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8f5 	.word	0x0800b8f5
 800b8cc:	0800b90f 	.word	0x0800b90f
 800b8d0:	0800b9b1 	.word	0x0800b9b1
 800b8d4:	0800b9d7 	.word	0x0800b9d7
 800b8d8:	0800ba63 	.word	0x0800ba63
 800b8dc:	0800ba8d 	.word	0x0800ba8d
 800b8e0:	0800bb4f 	.word	0x0800bb4f
 800b8e4:	0800bb71 	.word	0x0800bb71
 800b8e8:	0800bc03 	.word	0x0800bc03
 800b8ec:	0800bc29 	.word	0x0800bc29
 800b8f0:	0800bcbb 	.word	0x0800bcbb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f103 0110 	add.w	r1, r3, #16
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	795b      	ldrb	r3, [r3, #5]
 800b8fe:	461a      	mov	r2, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fa17 	bl	800bd34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2202      	movs	r2, #2
 800b90a:	761a      	strb	r2, [r3, #24]
      break;
 800b90c:	e20c      	b.n	800bd28 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	795b      	ldrb	r3, [r3, #5]
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f005 f863 	bl	80109e0 <USBH_LL_GetURBState>
 800b91a:	4603      	mov	r3, r0
 800b91c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d12c      	bne.n	800b97e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7c1b      	ldrb	r3, [r3, #16]
 800b928:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b92c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8adb      	ldrh	r3, [r3, #22]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b936:	7b7b      	ldrb	r3, [r7, #13]
 800b938:	2b80      	cmp	r3, #128	@ 0x80
 800b93a:	d103      	bne.n	800b944 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2203      	movs	r2, #3
 800b940:	761a      	strb	r2, [r3, #24]
 800b942:	e00d      	b.n	800b960 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2205      	movs	r2, #5
 800b948:	761a      	strb	r2, [r3, #24]
 800b94a:	e009      	b.n	800b960 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b94c:	7b7b      	ldrb	r3, [r7, #13]
 800b94e:	2b80      	cmp	r3, #128	@ 0x80
 800b950:	d103      	bne.n	800b95a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2209      	movs	r2, #9
 800b956:	761a      	strb	r2, [r3, #24]
 800b958:	e002      	b.n	800b960 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2207      	movs	r2, #7
 800b95e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2203      	movs	r2, #3
 800b964:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b974:	2300      	movs	r3, #0
 800b976:	2200      	movs	r2, #0
 800b978:	f000 fcfa 	bl	800c370 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b97c:	e1cb      	b.n	800bd16 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
 800b980:	2b04      	cmp	r3, #4
 800b982:	d003      	beq.n	800b98c <USBH_HandleControl+0xe8>
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b02      	cmp	r3, #2
 800b988:	f040 81c5 	bne.w	800bd16 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	220b      	movs	r2, #11
 800b990:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2203      	movs	r2, #3
 800b996:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f000 fce1 	bl	800c370 <osMessageQueuePut>
      break;
 800b9ae:	e1b2      	b.n	800bd16 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6899      	ldr	r1, [r3, #8]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	899a      	ldrh	r2, [r3, #12]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	791b      	ldrb	r3, [r3, #4]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f9f2 	bl	800bdb2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2204      	movs	r2, #4
 800b9d2:	761a      	strb	r2, [r3, #24]
      break;
 800b9d4:	e1a8      	b.n	800bd28 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	791b      	ldrb	r3, [r3, #4]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f004 ffff 	bl	80109e0 <USBH_LL_GetURBState>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d110      	bne.n	800ba0e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2209      	movs	r2, #9
 800b9f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba06:	2300      	movs	r3, #0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f000 fcb1 	bl	800c370 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	2b05      	cmp	r3, #5
 800ba12:	d110      	bne.n	800ba36 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ba14:	2303      	movs	r3, #3
 800ba16:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2203      	movs	r2, #3
 800ba1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f000 fc9e 	bl	800c370 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba34:	e171      	b.n	800bd1a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	f040 816e 	bne.w	800bd1a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	220b      	movs	r2, #11
 800ba42:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2203      	movs	r2, #3
 800ba48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f000 fc88 	bl	800c370 <osMessageQueuePut>
      break;
 800ba60:	e15b      	b.n	800bd1a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6899      	ldr	r1, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	899a      	ldrh	r2, [r3, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	795b      	ldrb	r3, [r3, #5]
 800ba6e:	2001      	movs	r0, #1
 800ba70:	9000      	str	r0, [sp, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f978 	bl	800bd68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2206      	movs	r2, #6
 800ba88:	761a      	strb	r2, [r3, #24]
      break;
 800ba8a:	e14d      	b.n	800bd28 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	795b      	ldrb	r3, [r3, #5]
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f004 ffa4 	bl	80109e0 <USBH_LL_GetURBState>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d111      	bne.n	800bac6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2207      	movs	r2, #7
 800baa6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2203      	movs	r2, #3
 800baac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800babc:	2300      	movs	r3, #0
 800babe:	2200      	movs	r2, #0
 800bac0:	f000 fc56 	bl	800c370 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bac4:	e12b      	b.n	800bd1e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	2b05      	cmp	r3, #5
 800baca:	d113      	bne.n	800baf4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	220c      	movs	r2, #12
 800bad0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bad2:	2303      	movs	r3, #3
 800bad4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2203      	movs	r2, #3
 800bada:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	f000 fc3f 	bl	800c370 <osMessageQueuePut>
      break;
 800baf2:	e114      	b.n	800bd1e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d111      	bne.n	800bb1e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2205      	movs	r2, #5
 800bafe:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2203      	movs	r2, #3
 800bb04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	f000 fc2a 	bl	800c370 <osMessageQueuePut>
      break;
 800bb1c:	e0ff      	b.n	800bd1e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	f040 80fc 	bne.w	800bd1e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	220b      	movs	r2, #11
 800bb2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb44:	2300      	movs	r3, #0
 800bb46:	2200      	movs	r2, #0
 800bb48:	f000 fc12 	bl	800c370 <osMessageQueuePut>
      break;
 800bb4c:	e0e7      	b.n	800bd1e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	2100      	movs	r1, #0
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f92b 	bl	800bdb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2208      	movs	r2, #8
 800bb6c:	761a      	strb	r2, [r3, #24]

      break;
 800bb6e:	e0db      	b.n	800bd28 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f004 ff32 	bl	80109e0 <USBH_LL_GetURBState>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d113      	bne.n	800bbae <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	220d      	movs	r2, #13
 800bb8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2203      	movs	r2, #3
 800bb94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bba4:	2300      	movs	r3, #0
 800bba6:	2200      	movs	r2, #0
 800bba8:	f000 fbe2 	bl	800c370 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbac:	e0b9      	b.n	800bd22 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d111      	bne.n	800bbd8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	220b      	movs	r2, #11
 800bbb8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f000 fbcd 	bl	800c370 <osMessageQueuePut>
      break;
 800bbd6:	e0a4      	b.n	800bd22 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	f040 80a1 	bne.w	800bd22 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f000 fbb8 	bl	800c370 <osMessageQueuePut>
      break;
 800bc00:	e08f      	b.n	800bd22 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	795b      	ldrb	r3, [r3, #5]
 800bc06:	2201      	movs	r2, #1
 800bc08:	9200      	str	r2, [sp, #0]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f8aa 	bl	800bd68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	220a      	movs	r2, #10
 800bc24:	761a      	strb	r2, [r3, #24]
      break;
 800bc26:	e07f      	b.n	800bd28 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	795b      	ldrb	r3, [r3, #5]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f004 fed6 	bl	80109e0 <USBH_LL_GetURBState>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d113      	bne.n	800bc66 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	220d      	movs	r2, #13
 800bc46:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f000 fb86 	bl	800c370 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc64:	e05f      	b.n	800bd26 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d111      	bne.n	800bc90 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2209      	movs	r2, #9
 800bc70:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2203      	movs	r2, #3
 800bc76:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc86:	2300      	movs	r3, #0
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f000 fb71 	bl	800c370 <osMessageQueuePut>
      break;
 800bc8e:	e04a      	b.n	800bd26 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d147      	bne.n	800bd26 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	220b      	movs	r2, #11
 800bc9a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2203      	movs	r2, #3
 800bca0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f000 fb5c 	bl	800c370 <osMessageQueuePut>
      break;
 800bcb8:	e035      	b.n	800bd26 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7e5b      	ldrb	r3, [r3, #25]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	765a      	strb	r2, [r3, #25]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	7e5b      	ldrb	r3, [r3, #25]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d806      	bhi.n	800bcdc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bcda:	e025      	b.n	800bd28 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bce2:	2106      	movs	r1, #6
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	795b      	ldrb	r3, [r3, #5]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f90d 	bl	800bf14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	791b      	ldrb	r3, [r3, #4]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f907 	bl	800bf14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd10:	e00a      	b.n	800bd28 <USBH_HandleControl+0x484>

    default:
      break;
 800bd12:	bf00      	nop
 800bd14:	e008      	b.n	800bd28 <USBH_HandleControl+0x484>
      break;
 800bd16:	bf00      	nop
 800bd18:	e006      	b.n	800bd28 <USBH_HandleControl+0x484>
      break;
 800bd1a:	bf00      	nop
 800bd1c:	e004      	b.n	800bd28 <USBH_HandleControl+0x484>
      break;
 800bd1e:	bf00      	nop
 800bd20:	e002      	b.n	800bd28 <USBH_HandleControl+0x484>
      break;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <USBH_HandleControl+0x484>
      break;
 800bd26:	bf00      	nop
  }

  return status;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop

0800bd34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af04      	add	r7, sp, #16
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd42:	79f9      	ldrb	r1, [r7, #7]
 800bd44:	2300      	movs	r3, #0
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	2308      	movs	r3, #8
 800bd4a:	9302      	str	r3, [sp, #8]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	2300      	movs	r3, #0
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	2200      	movs	r2, #0
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f004 fe10 	bl	801097e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af04      	add	r7, sp, #16
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4611      	mov	r1, r2
 800bd74:	461a      	mov	r2, r3
 800bd76:	460b      	mov	r3, r1
 800bd78:	80fb      	strh	r3, [r7, #6]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd8c:	7979      	ldrb	r1, [r7, #5]
 800bd8e:	7e3b      	ldrb	r3, [r7, #24]
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	9302      	str	r3, [sp, #8]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2200      	movs	r2, #0
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f004 fdeb 	bl	801097e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b088      	sub	sp, #32
 800bdb6:	af04      	add	r7, sp, #16
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	80fb      	strh	r3, [r7, #6]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bdc8:	7979      	ldrb	r1, [r7, #5]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	88fb      	ldrh	r3, [r7, #6]
 800bdd0:	9302      	str	r3, [sp, #8]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	2300      	movs	r3, #0
 800bddc:	2201      	movs	r2, #1
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f004 fdcd 	bl	801097e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bde4:	2300      	movs	r3, #0

}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b088      	sub	sp, #32
 800bdf2:	af04      	add	r7, sp, #16
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	80fb      	strh	r3, [r7, #6]
 800be00:	4613      	mov	r3, r2
 800be02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be12:	7979      	ldrb	r1, [r7, #5]
 800be14:	7e3b      	ldrb	r3, [r7, #24]
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	9302      	str	r3, [sp, #8]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	2301      	movs	r3, #1
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	2302      	movs	r3, #2
 800be26:	2200      	movs	r2, #0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f004 fda8 	bl	801097e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af04      	add	r7, sp, #16
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	4611      	mov	r1, r2
 800be44:	461a      	mov	r2, r3
 800be46:	460b      	mov	r3, r1
 800be48:	80fb      	strh	r3, [r7, #6]
 800be4a:	4613      	mov	r3, r2
 800be4c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be4e:	7979      	ldrb	r1, [r7, #5]
 800be50:	2300      	movs	r3, #0
 800be52:	9303      	str	r3, [sp, #12]
 800be54:	88fb      	ldrh	r3, [r7, #6]
 800be56:	9302      	str	r3, [sp, #8]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	2301      	movs	r3, #1
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	2302      	movs	r3, #2
 800be62:	2201      	movs	r2, #1
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f004 fd8a 	bl	801097e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af04      	add	r7, sp, #16
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	4608      	mov	r0, r1
 800be7e:	4611      	mov	r1, r2
 800be80:	461a      	mov	r2, r3
 800be82:	4603      	mov	r3, r0
 800be84:	70fb      	strb	r3, [r7, #3]
 800be86:	460b      	mov	r3, r1
 800be88:	70bb      	strb	r3, [r7, #2]
 800be8a:	4613      	mov	r3, r2
 800be8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800be8e:	7878      	ldrb	r0, [r7, #1]
 800be90:	78ba      	ldrb	r2, [r7, #2]
 800be92:	78f9      	ldrb	r1, [r7, #3]
 800be94:	8b3b      	ldrh	r3, [r7, #24]
 800be96:	9302      	str	r3, [sp, #8]
 800be98:	7d3b      	ldrb	r3, [r7, #20]
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	7c3b      	ldrb	r3, [r7, #16]
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	4603      	mov	r3, r0
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f004 fd1d 	bl	80108e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f004 fd3c 	bl	8010940 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	460b      	mov	r3, r1
 800bedc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f836 	bl	800bf50 <USBH_GetFreePipe>
 800bee4:	4603      	mov	r3, r0
 800bee6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bee8:	89fb      	ldrh	r3, [r7, #14]
 800beea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00a      	beq.n	800bf08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bef2:	78fa      	ldrb	r2, [r7, #3]
 800bef4:	89fb      	ldrh	r3, [r7, #14]
 800bef6:	f003 030f 	and.w	r3, r3, #15
 800befa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	33e0      	adds	r3, #224	@ 0xe0
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	440b      	add	r3, r1
 800bf06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf08:	89fb      	ldrh	r3, [r7, #14]
 800bf0a:	b2db      	uxtb	r3, r3
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	2b0f      	cmp	r3, #15
 800bf24:	d80d      	bhi.n	800bf42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	33e0      	adds	r3, #224	@ 0xe0
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	78fb      	ldrb	r3, [r7, #3]
 800bf34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	33e0      	adds	r3, #224	@ 0xe0
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	440b      	add	r3, r1
 800bf40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e00f      	b.n	800bf82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	33e0      	adds	r3, #224	@ 0xe0
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	e007      	b.n	800bf8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	73fb      	strb	r3, [r7, #15]
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	2b0f      	cmp	r3, #15
 800bf86:	d9ec      	bls.n	800bf62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bf88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <__NVIC_SetPriority>:
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	db0a      	blt.n	800bfc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	490c      	ldr	r1, [pc, #48]	@ (800bfe4 <__NVIC_SetPriority+0x4c>)
 800bfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb6:	0112      	lsls	r2, r2, #4
 800bfb8:	b2d2      	uxtb	r2, r2
 800bfba:	440b      	add	r3, r1
 800bfbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bfc0:	e00a      	b.n	800bfd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	4908      	ldr	r1, [pc, #32]	@ (800bfe8 <__NVIC_SetPriority+0x50>)
 800bfc8:	79fb      	ldrb	r3, [r7, #7]
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	3b04      	subs	r3, #4
 800bfd0:	0112      	lsls	r2, r2, #4
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	440b      	add	r3, r1
 800bfd6:	761a      	strb	r2, [r3, #24]
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	e000e100 	.word	0xe000e100
 800bfe8:	e000ed00 	.word	0xe000ed00

0800bfec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bff0:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <SysTick_Handler+0x1c>)
 800bff2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bff4:	f002 ff1e 	bl	800ee34 <xTaskGetSchedulerState>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d001      	beq.n	800c002 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bffe:	f004 f81b 	bl	8010038 <xPortSysTickHandler>
  }
}
 800c002:	bf00      	nop
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	e000e010 	.word	0xe000e010

0800c00c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c010:	2100      	movs	r1, #0
 800c012:	f06f 0004 	mvn.w	r0, #4
 800c016:	f7ff ffbf 	bl	800bf98 <__NVIC_SetPriority>
#endif
}
 800c01a:	bf00      	nop
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c026:	f3ef 8305 	mrs	r3, IPSR
 800c02a:	603b      	str	r3, [r7, #0]
  return(result);
 800c02c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c032:	f06f 0305 	mvn.w	r3, #5
 800c036:	607b      	str	r3, [r7, #4]
 800c038:	e00c      	b.n	800c054 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c03a:	4b0a      	ldr	r3, [pc, #40]	@ (800c064 <osKernelInitialize+0x44>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d105      	bne.n	800c04e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c042:	4b08      	ldr	r3, [pc, #32]	@ (800c064 <osKernelInitialize+0x44>)
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c048:	2300      	movs	r3, #0
 800c04a:	607b      	str	r3, [r7, #4]
 800c04c:	e002      	b.n	800c054 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c04e:	f04f 33ff 	mov.w	r3, #4294967295
 800c052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c054:	687b      	ldr	r3, [r7, #4]
}
 800c056:	4618      	mov	r0, r3
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20000884 	.word	0x20000884

0800c068 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d005      	beq.n	800c086 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	4a0c      	ldr	r2, [pc, #48]	@ (800c0b0 <osKernelGetInfo+0x48>)
 800c07e:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a0b      	ldr	r2, [pc, #44]	@ (800c0b0 <osKernelGetInfo+0x48>)
 800c084:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <osKernelGetInfo+0x3e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d009      	beq.n	800c0a6 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b11      	cmp	r3, #17
 800c096:	d901      	bls.n	800c09c <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800c098:	2311      	movs	r3, #17
 800c09a:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4905      	ldr	r1, [pc, #20]	@ (800c0b4 <osKernelGetInfo+0x4c>)
 800c0a0:	68b8      	ldr	r0, [r7, #8]
 800c0a2:	f006 fbf4 	bl	801288e <memcpy>
  }

  return (osOK);
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	05f5f531 	.word	0x05f5f531
 800c0b4:	080159fc 	.word	0x080159fc

0800c0b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0be:	f3ef 8305 	mrs	r3, IPSR
 800c0c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c0c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c0ca:	f06f 0305 	mvn.w	r3, #5
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e010      	b.n	800c0f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c100 <osKernelStart+0x48>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d109      	bne.n	800c0ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c0da:	f7ff ff97 	bl	800c00c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c0de:	4b08      	ldr	r3, [pc, #32]	@ (800c100 <osKernelStart+0x48>)
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c0e4:	f002 f82e 	bl	800e144 <vTaskStartScheduler>
      stat = osOK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	607b      	str	r3, [r7, #4]
 800c0ec:	e002      	b.n	800c0f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0f4:	687b      	ldr	r3, [r7, #4]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20000884 	.word	0x20000884

0800c104 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800c104:	b480      	push	{r7}
 800c106:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800c108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
	...

0800c118 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800c118:	b480      	push	{r7}
 800c11a:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800c11c:	4b03      	ldr	r3, [pc, #12]	@ (800c12c <osKernelGetSysTimerFreq+0x14>)
 800c11e:	681b      	ldr	r3, [r3, #0]
}
 800c120:	4618      	mov	r0, r3
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	2000022c 	.word	0x2000022c

0800c130 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c130:	b580      	push	{r7, lr}
 800c132:	b08e      	sub	sp, #56	@ 0x38
 800c134:	af04      	add	r7, sp, #16
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c140:	f3ef 8305 	mrs	r3, IPSR
 800c144:	617b      	str	r3, [r7, #20]
  return(result);
 800c146:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d17e      	bne.n	800c24a <osThreadNew+0x11a>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d07b      	beq.n	800c24a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c152:	2380      	movs	r3, #128	@ 0x80
 800c154:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c156:	2318      	movs	r3, #24
 800c158:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c15e:	f04f 33ff 	mov.w	r3, #4294967295
 800c162:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d045      	beq.n	800c1f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <osThreadNew+0x48>
        name = attr->name;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d008      	beq.n	800c19e <osThreadNew+0x6e>
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	2b38      	cmp	r3, #56	@ 0x38
 800c190:	d805      	bhi.n	800c19e <osThreadNew+0x6e>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <osThreadNew+0x72>
        return (NULL);
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e054      	b.n	800c24c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	089b      	lsrs	r3, r3, #2
 800c1b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00e      	beq.n	800c1d8 <osThreadNew+0xa8>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	2ba7      	cmp	r3, #167	@ 0xa7
 800c1c0:	d90a      	bls.n	800c1d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d006      	beq.n	800c1d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d002      	beq.n	800c1d8 <osThreadNew+0xa8>
        mem = 1;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	61bb      	str	r3, [r7, #24]
 800c1d6:	e010      	b.n	800c1fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10c      	bne.n	800c1fa <osThreadNew+0xca>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d108      	bne.n	800c1fa <osThreadNew+0xca>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d104      	bne.n	800c1fa <osThreadNew+0xca>
          mem = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	e001      	b.n	800c1fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d110      	bne.n	800c222 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c208:	9202      	str	r2, [sp, #8]
 800c20a:	9301      	str	r3, [sp, #4]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f001 fb1e 	bl	800d858 <xTaskCreateStatic>
 800c21c:	4603      	mov	r3, r0
 800c21e:	613b      	str	r3, [r7, #16]
 800c220:	e013      	b.n	800c24a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d110      	bne.n	800c24a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	f107 0310 	add.w	r3, r7, #16
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f001 fb6c 	bl	800d918 <xTaskCreate>
 800c240:	4603      	mov	r3, r0
 800c242:	2b01      	cmp	r3, #1
 800c244:	d001      	beq.n	800c24a <osThreadNew+0x11a>
            hTask = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c24a:	693b      	ldr	r3, [r7, #16]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3728      	adds	r7, #40	@ 0x28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c25c:	f3ef 8305 	mrs	r3, IPSR
 800c260:	60bb      	str	r3, [r7, #8]
  return(result);
 800c262:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <osDelay+0x1c>
    stat = osErrorISR;
 800c268:	f06f 0305 	mvn.w	r3, #5
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	e007      	b.n	800c280 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c270:	2300      	movs	r3, #0
 800c272:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f001 fd1e 	bl	800dcbc <vTaskDelay>
    }
  }

  return (stat);
 800c280:	68fb      	ldr	r3, [r7, #12]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b08a      	sub	sp, #40	@ 0x28
 800c28e:	af02      	add	r7, sp, #8
 800c290:	60f8      	str	r0, [r7, #12]
 800c292:	60b9      	str	r1, [r7, #8]
 800c294:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c29a:	f3ef 8305 	mrs	r3, IPSR
 800c29e:	613b      	str	r3, [r7, #16]
  return(result);
 800c2a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d15f      	bne.n	800c366 <osMessageQueueNew+0xdc>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d05c      	beq.n	800c366 <osMessageQueueNew+0xdc>
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d059      	beq.n	800c366 <osMessageQueueNew+0xdc>
    mem = -1;
 800c2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d029      	beq.n	800c312 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d012      	beq.n	800c2ec <osMessageQueueNew+0x62>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	2b4f      	cmp	r3, #79	@ 0x4f
 800c2cc:	d90e      	bls.n	800c2ec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	695a      	ldr	r2, [r3, #20]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	fb01 f303 	mul.w	r3, r1, r3
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d302      	bcc.n	800c2ec <osMessageQueueNew+0x62>
        mem = 1;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	61bb      	str	r3, [r7, #24]
 800c2ea:	e014      	b.n	800c316 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d110      	bne.n	800c316 <osMessageQueueNew+0x8c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10c      	bne.n	800c316 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c300:	2b00      	cmp	r3, #0
 800c302:	d108      	bne.n	800c316 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d104      	bne.n	800c316 <osMessageQueueNew+0x8c>
          mem = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	61bb      	str	r3, [r7, #24]
 800c310:	e001      	b.n	800c316 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d10b      	bne.n	800c334 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691a      	ldr	r2, [r3, #16]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	2100      	movs	r1, #0
 800c326:	9100      	str	r1, [sp, #0]
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f000 fbec 	bl	800cb08 <xQueueGenericCreateStatic>
 800c330:	61f8      	str	r0, [r7, #28]
 800c332:	e008      	b.n	800c346 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d105      	bne.n	800c346 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c33a:	2200      	movs	r2, #0
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fc5f 	bl	800cc02 <xQueueGenericCreate>
 800c344:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00c      	beq.n	800c366 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <osMessageQueueNew+0xd0>
        name = attr->name;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e001      	b.n	800c35e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c35e:	6979      	ldr	r1, [r7, #20]
 800c360:	69f8      	ldr	r0, [r7, #28]
 800c362:	f001 fa1b 	bl	800d79c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c366:	69fb      	ldr	r3, [r7, #28]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c384:	2300      	movs	r3, #0
 800c386:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c388:	f3ef 8305 	mrs	r3, IPSR
 800c38c:	617b      	str	r3, [r7, #20]
  return(result);
 800c38e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c390:	2b00      	cmp	r3, #0
 800c392:	d028      	beq.n	800c3e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d005      	beq.n	800c3a6 <osMessageQueuePut+0x36>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <osMessageQueuePut+0x36>
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c3a6:	f06f 0303 	mvn.w	r3, #3
 800c3aa:	61fb      	str	r3, [r7, #28]
 800c3ac:	e038      	b.n	800c420 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c3b2:	f107 0210 	add.w	r2, r7, #16
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	69b8      	ldr	r0, [r7, #24]
 800c3bc:	f000 fdb4 	bl	800cf28 <xQueueGenericSendFromISR>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c3c6:	f06f 0302 	mvn.w	r3, #2
 800c3ca:	61fb      	str	r3, [r7, #28]
 800c3cc:	e028      	b.n	800c420 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d025      	beq.n	800c420 <osMessageQueuePut+0xb0>
 800c3d4:	4b15      	ldr	r3, [pc, #84]	@ (800c42c <osMessageQueuePut+0xbc>)
 800c3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	e01c      	b.n	800c420 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <osMessageQueuePut+0x82>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d103      	bne.n	800c3fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c3f2:	f06f 0303 	mvn.w	r3, #3
 800c3f6:	61fb      	str	r3, [r7, #28]
 800c3f8:	e012      	b.n	800c420 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	69b8      	ldr	r0, [r7, #24]
 800c402:	f000 fc8f 	bl	800cd24 <xQueueGenericSend>
 800c406:	4603      	mov	r3, r0
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d009      	beq.n	800c420 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c412:	f06f 0301 	mvn.w	r3, #1
 800c416:	61fb      	str	r3, [r7, #28]
 800c418:	e002      	b.n	800c420 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c41a:	f06f 0302 	mvn.w	r3, #2
 800c41e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c420:	69fb      	ldr	r3, [r7, #28]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3720      	adds	r7, #32
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c442:	2300      	movs	r3, #0
 800c444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	617b      	str	r3, [r7, #20]
  return(result);
 800c44c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d028      	beq.n	800c4a4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d005      	beq.n	800c464 <osMessageQueueGet+0x34>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <osMessageQueueGet+0x34>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c464:	f06f 0303 	mvn.w	r3, #3
 800c468:	61fb      	str	r3, [r7, #28]
 800c46a:	e037      	b.n	800c4dc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c470:	f107 0310 	add.w	r3, r7, #16
 800c474:	461a      	mov	r2, r3
 800c476:	68b9      	ldr	r1, [r7, #8]
 800c478:	69b8      	ldr	r0, [r7, #24]
 800c47a:	f000 ffe5 	bl	800d448 <xQueueReceiveFromISR>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b01      	cmp	r3, #1
 800c482:	d003      	beq.n	800c48c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c484:	f06f 0302 	mvn.w	r3, #2
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	e027      	b.n	800c4dc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d024      	beq.n	800c4dc <osMessageQueueGet+0xac>
 800c492:	4b15      	ldr	r3, [pc, #84]	@ (800c4e8 <osMessageQueueGet+0xb8>)
 800c494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	e01b      	b.n	800c4dc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d002      	beq.n	800c4b0 <osMessageQueueGet+0x80>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d103      	bne.n	800c4b8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c4b0:	f06f 0303 	mvn.w	r3, #3
 800c4b4:	61fb      	str	r3, [r7, #28]
 800c4b6:	e011      	b.n	800c4dc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	69b8      	ldr	r0, [r7, #24]
 800c4be:	f000 fdd1 	bl	800d064 <xQueueReceive>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d009      	beq.n	800c4dc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c4ce:	f06f 0301 	mvn.w	r3, #1
 800c4d2:	61fb      	str	r3, [r7, #28]
 800c4d4:	e002      	b.n	800c4dc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c4d6:	f06f 0302 	mvn.w	r3, #2
 800c4da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c4dc:	69fb      	ldr	r3, [r7, #28]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3720      	adds	r7, #32
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	4a07      	ldr	r2, [pc, #28]	@ (800c518 <vApplicationGetIdleTaskMemory+0x2c>)
 800c4fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	4a06      	ldr	r2, [pc, #24]	@ (800c51c <vApplicationGetIdleTaskMemory+0x30>)
 800c502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2280      	movs	r2, #128	@ 0x80
 800c508:	601a      	str	r2, [r3, #0]
}
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	20000888 	.word	0x20000888
 800c51c:	20000930 	.word	0x20000930

0800c520 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4a07      	ldr	r2, [pc, #28]	@ (800c54c <vApplicationGetTimerTaskMemory+0x2c>)
 800c530:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	4a06      	ldr	r2, [pc, #24]	@ (800c550 <vApplicationGetTimerTaskMemory+0x30>)
 800c536:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c53e:	601a      	str	r2, [r3, #0]
}
 800c540:	bf00      	nop
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	20000b30 	.word	0x20000b30
 800c550:	20000bd8 	.word	0x20000bd8

0800c554 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c55a:	2020      	movs	r0, #32
 800c55c:	f003 fdfe 	bl	801015c <pvPortMalloc>
 800c560:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00a      	beq.n	800c57e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3304      	adds	r3, #4
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f9aa 	bl	800c8cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c57e:	687b      	ldr	r3, [r7, #4]
	}
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b090      	sub	sp, #64	@ 0x40
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10b      	bne.n	800c5c0 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	e7fd      	b.n	800c5bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5c6:	d30b      	bcc.n	800c5e0 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	61fb      	str	r3, [r7, #28]
}
 800c5da:	bf00      	nop
 800c5dc:	bf00      	nop
 800c5de:	e7fd      	b.n	800c5dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10b      	bne.n	800c5fe <xEventGroupWaitBits+0x76>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	61bb      	str	r3, [r7, #24]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5fe:	f002 fc19 	bl	800ee34 <xTaskGetSchedulerState>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <xEventGroupWaitBits+0x86>
 800c608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <xEventGroupWaitBits+0x8a>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <xEventGroupWaitBits+0x8c>
 800c612:	2300      	movs	r3, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10b      	bne.n	800c630 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	617b      	str	r3, [r7, #20]
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c630:	f001 fdf8 	bl	800e224 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	68b9      	ldr	r1, [r7, #8]
 800c63e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c640:	f000 f90d 	bl	800c85e <prvTestWaitCondition>
 800c644:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00e      	beq.n	800c66a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c650:	2300      	movs	r3, #0
 800c652:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d028      	beq.n	800c6ac <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	e020      	b.n	800c6ac <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c672:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c674:	2301      	movs	r3, #1
 800c676:	633b      	str	r3, [r7, #48]	@ 0x30
 800c678:	e018      	b.n	800c6ac <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d003      	beq.n	800c688 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c686:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c690:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c694:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c698:	1d18      	adds	r0, r3, #4
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	f002 f894 	bl	800e7d0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c6ac:	f001 fdc8 	bl	800e240 <xTaskResumeAll>
 800c6b0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d031      	beq.n	800c71c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d107      	bne.n	800c6ce <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c6be:	4b1a      	ldr	r3, [pc, #104]	@ (800c728 <xEventGroupWaitBits+0x1a0>)
 800c6c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c6ce:	f002 fd2b 	bl	800f128 <uxTaskResetEventItemValue>
 800c6d2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d11a      	bne.n	800c714 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c6de:	f003 fc1b 	bl	800ff18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c6ee:	f000 f8b6 	bl	800c85e <prvTestWaitCondition>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d009      	beq.n	800c70c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	43db      	mvns	r3, r3
 800c706:	401a      	ands	r2, r3
 800c708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c710:	f003 fc34 	bl	800ff7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c716:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3740      	adds	r7, #64	@ 0x40
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	e000ed04 	.word	0xe000ed04

0800c72c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08e      	sub	sp, #56	@ 0x38
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c736:	2300      	movs	r3, #0
 800c738:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c73e:	2300      	movs	r3, #0
 800c740:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <xEventGroupSetBits+0x34>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	613b      	str	r3, [r7, #16]
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	e7fd      	b.n	800c75c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c766:	d30b      	bcc.n	800c780 <xEventGroupSetBits+0x54>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	60fb      	str	r3, [r7, #12]
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	e7fd      	b.n	800c77c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c782:	3304      	adds	r3, #4
 800c784:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c788:	3308      	adds	r3, #8
 800c78a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c78c:	f001 fd4a 	bl	800e224 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	431a      	orrs	r2, r3
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c7a2:	e03c      	b.n	800c81e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c7ba:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c7c2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d108      	bne.n	800c7e0 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00b      	beq.n	800c7f2 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7de:	e008      	b.n	800c7f2 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d101      	bne.n	800c7f2 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d010      	beq.n	800c81a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	4313      	orrs	r3, r2
 800c808:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c812:	4619      	mov	r1, r3
 800c814:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c816:	f002 f8a9 	bl	800e96c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c81e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	429a      	cmp	r2, r3
 800c824:	d1be      	bne.n	800c7a4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82c:	43db      	mvns	r3, r3
 800c82e:	401a      	ands	r2, r3
 800c830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c832:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c834:	f001 fd04 	bl	800e240 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83a:	681b      	ldr	r3, [r3, #0]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3738      	adds	r7, #56	@ 0x38
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ff6b 	bl	800c72c <xEventGroupSetBits>
}
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c85e:	b480      	push	{r7}
 800c860:	b087      	sub	sp, #28
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d107      	bne.n	800c884 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	4013      	ands	r3, r2
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c87e:	2301      	movs	r3, #1
 800c880:	617b      	str	r3, [r7, #20]
 800c882:	e007      	b.n	800c894 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	4013      	ands	r3, r2
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d101      	bne.n	800c894 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c890:	2301      	movs	r3, #1
 800c892:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c894:	697b      	ldr	r3, [r7, #20]
}
 800c896:	4618      	mov	r0, r3
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	68f9      	ldr	r1, [r7, #12]
 800c8b6:	4804      	ldr	r0, [pc, #16]	@ (800c8c8 <xEventGroupSetBitsFromISR+0x24>)
 800c8b8:	f003 f9dc 	bl	800fc74 <xTimerPendFunctionCallFromISR>
 800c8bc:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c8be:	697b      	ldr	r3, [r7, #20]
	}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	0800c845 	.word	0x0800c845

0800c8cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f103 0208 	add.w	r2, r3, #8
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f103 0208 	add.w	r2, r3, #8
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f103 0208 	add.w	r2, r3, #8
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	601a      	str	r2, [r3, #0]
}
 800c962:	bf00      	nop
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c96e:	b480      	push	{r7}
 800c970:	b085      	sub	sp, #20
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c984:	d103      	bne.n	800c98e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	e00c      	b.n	800c9a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3308      	adds	r3, #8
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <vListInsert+0x2e>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d2f6      	bcs.n	800c996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6892      	ldr	r2, [r2, #8]
 800c9f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	6852      	ldr	r2, [r2, #4]
 800ca00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d103      	bne.n	800ca14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	1e5a      	subs	r2, r3, #1
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10b      	bne.n	800ca60 <xQueueGenericReset+0x2c>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	60bb      	str	r3, [r7, #8]
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	e7fd      	b.n	800ca5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca60:	f003 fa5a 	bl	800ff18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca6c:	68f9      	ldr	r1, [r7, #12]
 800ca6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	441a      	add	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca90:	3b01      	subs	r3, #1
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca96:	fb01 f303 	mul.w	r3, r1, r3
 800ca9a:	441a      	add	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	22ff      	movs	r2, #255	@ 0xff
 800caa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	22ff      	movs	r2, #255	@ 0xff
 800caac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d114      	bne.n	800cae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d01a      	beq.n	800caf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3310      	adds	r3, #16
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 feee 	bl	800e8a4 <xTaskRemoveFromEventList>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d012      	beq.n	800caf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cace:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <xQueueGenericReset+0xd0>)
 800cad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	e009      	b.n	800caf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3310      	adds	r3, #16
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fef1 	bl	800c8cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3324      	adds	r3, #36	@ 0x24
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff feec 	bl	800c8cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800caf4:	f003 fa42 	bl	800ff7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800caf8:	2301      	movs	r3, #1
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08e      	sub	sp, #56	@ 0x38
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10b      	bne.n	800cb52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <xQueueGenericCreateStatic+0x56>
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <xQueueGenericCreateStatic+0x5a>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <xQueueGenericCreateStatic+0x5c>
 800cb62:	2300      	movs	r3, #0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	623b      	str	r3, [r7, #32]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <xQueueGenericCreateStatic+0x84>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <xQueueGenericCreateStatic+0x88>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e000      	b.n	800cb92 <xQueueGenericCreateStatic+0x8a>
 800cb90:	2300      	movs	r3, #0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10b      	bne.n	800cbae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	61fb      	str	r3, [r7, #28]
}
 800cba8:	bf00      	nop
 800cbaa:	bf00      	nop
 800cbac:	e7fd      	b.n	800cbaa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cbae:	2350      	movs	r3, #80	@ 0x50
 800cbb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	2b50      	cmp	r3, #80	@ 0x50
 800cbb6:	d00b      	beq.n	800cbd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	61bb      	str	r3, [r7, #24]
}
 800cbca:	bf00      	nop
 800cbcc:	bf00      	nop
 800cbce:	e7fd      	b.n	800cbcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00d      	beq.n	800cbf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbe4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	4613      	mov	r3, r2
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 f840 	bl	800cc78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3730      	adds	r7, #48	@ 0x30
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b08a      	sub	sp, #40	@ 0x28
 800cc06:	af02      	add	r7, sp, #8
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10b      	bne.n	800cc2e <xQueueGenericCreate+0x2c>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	613b      	str	r3, [r7, #16]
}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	e7fd      	b.n	800cc2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	fb02 f303 	mul.w	r3, r2, r3
 800cc36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	3350      	adds	r3, #80	@ 0x50
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f003 fa8d 	bl	801015c <pvPortMalloc>
 800cc42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d011      	beq.n	800cc6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	3350      	adds	r3, #80	@ 0x50
 800cc52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc5c:	79fa      	ldrb	r2, [r7, #7]
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	4613      	mov	r3, r2
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 f805 	bl	800cc78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc6e:	69bb      	ldr	r3, [r7, #24]
	}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3720      	adds	r7, #32
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	e002      	b.n	800cc9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cca6:	2101      	movs	r1, #1
 800cca8:	69b8      	ldr	r0, [r7, #24]
 800ccaa:	f7ff fec3 	bl	800ca34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	78fa      	ldrb	r2, [r7, #3]
 800ccb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccb6:	bf00      	nop
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00e      	beq.n	800ccea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ccde:	2300      	movs	r3, #0
 800cce0:	2200      	movs	r2, #0
 800cce2:	2100      	movs	r1, #0
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f81d 	bl	800cd24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b086      	sub	sp, #24
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	2300      	movs	r3, #0
 800cd02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	461a      	mov	r2, r3
 800cd08:	6939      	ldr	r1, [r7, #16]
 800cd0a:	6978      	ldr	r0, [r7, #20]
 800cd0c:	f7ff ff79 	bl	800cc02 <xQueueGenericCreate>
 800cd10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f7ff ffd3 	bl	800ccbe <prvInitialiseMutex>

		return xNewQueue;
 800cd18:	68fb      	ldr	r3, [r7, #12]
	}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	@ 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <xQueueGenericSend+0x34>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd52:	bf00      	nop
 800cd54:	bf00      	nop
 800cd56:	e7fd      	b.n	800cd54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <xQueueGenericSend+0x42>
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <xQueueGenericSend+0x46>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <xQueueGenericSend+0x48>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <xQueueGenericSend+0x64>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d103      	bne.n	800cd96 <xQueueGenericSend+0x72>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <xQueueGenericSend+0x76>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <xQueueGenericSend+0x78>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <xQueueGenericSend+0x94>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	623b      	str	r3, [r7, #32]
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	e7fd      	b.n	800cdb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdb8:	f002 f83c 	bl	800ee34 <xTaskGetSchedulerState>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d102      	bne.n	800cdc8 <xQueueGenericSend+0xa4>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <xQueueGenericSend+0xa8>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e000      	b.n	800cdce <xQueueGenericSend+0xaa>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10b      	bne.n	800cdea <xQueueGenericSend+0xc6>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	61fb      	str	r3, [r7, #28]
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdea:	f003 f895 	bl	800ff18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d302      	bcc.n	800ce00 <xQueueGenericSend+0xdc>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d129      	bne.n	800ce54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce06:	f000 fbb9 	bl	800d57c <prvCopyDataToQueue>
 800ce0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d010      	beq.n	800ce36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	3324      	adds	r3, #36	@ 0x24
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f001 fd43 	bl	800e8a4 <xTaskRemoveFromEventList>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d013      	beq.n	800ce4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce24:	4b3f      	ldr	r3, [pc, #252]	@ (800cf24 <xQueueGenericSend+0x200>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	e00a      	b.n	800ce4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce3c:	4b39      	ldr	r3, [pc, #228]	@ (800cf24 <xQueueGenericSend+0x200>)
 800ce3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce4c:	f003 f896 	bl	800ff7c <vPortExitCritical>
				return pdPASS;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e063      	b.n	800cf1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d103      	bne.n	800ce62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce5a:	f003 f88f 	bl	800ff7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e05c      	b.n	800cf1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce68:	f107 0314 	add.w	r3, r7, #20
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f001 fde1 	bl	800ea34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce72:	2301      	movs	r3, #1
 800ce74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce76:	f003 f881 	bl	800ff7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce7a:	f001 f9d3 	bl	800e224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce7e:	f003 f84b 	bl	800ff18 <vPortEnterCritical>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d103      	bne.n	800ce98 <xQueueGenericSend+0x174>
 800ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce9e:	b25b      	sxtb	r3, r3
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea4:	d103      	bne.n	800ceae <xQueueGenericSend+0x18a>
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ceae:	f003 f865 	bl	800ff7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ceb2:	1d3a      	adds	r2, r7, #4
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 fdd0 	bl	800ea60 <xTaskCheckForTimeOut>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d124      	bne.n	800cf10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cec6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cec8:	f000 fc50 	bl	800d76c <prvIsQueueFull>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d018      	beq.n	800cf04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	3310      	adds	r3, #16
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f001 fc52 	bl	800e784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cee2:	f000 fbdb 	bl	800d69c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cee6:	f001 f9ab 	bl	800e240 <xTaskResumeAll>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f47f af7c 	bne.w	800cdea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cef2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <xQueueGenericSend+0x200>)
 800cef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	e772      	b.n	800cdea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf06:	f000 fbc9 	bl	800d69c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf0a:	f001 f999 	bl	800e240 <xTaskResumeAll>
 800cf0e:	e76c      	b.n	800cdea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf12:	f000 fbc3 	bl	800d69c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf16:	f001 f993 	bl	800e240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3738      	adds	r7, #56	@ 0x38
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	e000ed04 	.word	0xe000ed04

0800cf28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b090      	sub	sp, #64	@ 0x40
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <xQueueGenericSendFromISR+0x3e>
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <xQueueGenericSendFromISR+0x42>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e000      	b.n	800cf6c <xQueueGenericSendFromISR+0x44>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10b      	bne.n	800cf88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf82:	bf00      	nop
 800cf84:	bf00      	nop
 800cf86:	e7fd      	b.n	800cf84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d103      	bne.n	800cf96 <xQueueGenericSendFromISR+0x6e>
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d101      	bne.n	800cf9a <xQueueGenericSendFromISR+0x72>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <xQueueGenericSendFromISR+0x74>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10b      	bne.n	800cfb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	623b      	str	r3, [r7, #32]
}
 800cfb2:	bf00      	nop
 800cfb4:	bf00      	nop
 800cfb6:	e7fd      	b.n	800cfb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfb8:	f003 f88e 	bl	80100d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfbc:	f3ef 8211 	mrs	r2, BASEPRI
 800cfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	61fa      	str	r2, [r7, #28]
 800cfd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d302      	bcc.n	800cfea <xQueueGenericSendFromISR+0xc2>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d12f      	bne.n	800d04a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d000:	f000 fabc 	bl	800d57c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d004:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00c:	d112      	bne.n	800d034 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d012:	2b00      	cmp	r3, #0
 800d014:	d016      	beq.n	800d044 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	3324      	adds	r3, #36	@ 0x24
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 fc42 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00e      	beq.n	800d044 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00b      	beq.n	800d044 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	e007      	b.n	800d044 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d034:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d038:	3301      	adds	r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	b25a      	sxtb	r2, r3
 800d03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d044:	2301      	movs	r3, #1
 800d046:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d048:	e001      	b.n	800d04e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d050:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3740      	adds	r7, #64	@ 0x40
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08c      	sub	sp, #48	@ 0x30
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d070:	2300      	movs	r3, #0
 800d072:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10b      	bne.n	800d096 <xQueueReceive+0x32>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	623b      	str	r3, [r7, #32]
}
 800d090:	bf00      	nop
 800d092:	bf00      	nop
 800d094:	e7fd      	b.n	800d092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d103      	bne.n	800d0a4 <xQueueReceive+0x40>
 800d09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <xQueueReceive+0x44>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e000      	b.n	800d0aa <xQueueReceive+0x46>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <xQueueReceive+0x62>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	61fb      	str	r3, [r7, #28]
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	e7fd      	b.n	800d0c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0c6:	f001 feb5 	bl	800ee34 <xTaskGetSchedulerState>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <xQueueReceive+0x72>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <xQueueReceive+0x76>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <xQueueReceive+0x78>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <xQueueReceive+0x94>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	61bb      	str	r3, [r7, #24]
}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	e7fd      	b.n	800d0f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0f8:	f002 ff0e 	bl	800ff18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d100:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d01f      	beq.n	800d148 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d10c:	f000 faa0 	bl	800d650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	1e5a      	subs	r2, r3, #1
 800d114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d116:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00f      	beq.n	800d140 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d122:	3310      	adds	r3, #16
 800d124:	4618      	mov	r0, r3
 800d126:	f001 fbbd 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d130:	4b3c      	ldr	r3, [pc, #240]	@ (800d224 <xQueueReceive+0x1c0>)
 800d132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d140:	f002 ff1c 	bl	800ff7c <vPortExitCritical>
				return pdPASS;
 800d144:	2301      	movs	r3, #1
 800d146:	e069      	b.n	800d21c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d14e:	f002 ff15 	bl	800ff7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d152:	2300      	movs	r3, #0
 800d154:	e062      	b.n	800d21c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d15c:	f107 0310 	add.w	r3, r7, #16
 800d160:	4618      	mov	r0, r3
 800d162:	f001 fc67 	bl	800ea34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d166:	2301      	movs	r3, #1
 800d168:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d16a:	f002 ff07 	bl	800ff7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d16e:	f001 f859 	bl	800e224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d172:	f002 fed1 	bl	800ff18 <vPortEnterCritical>
 800d176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d17c:	b25b      	sxtb	r3, r3
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d103      	bne.n	800d18c <xQueueReceive+0x128>
 800d184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d192:	b25b      	sxtb	r3, r3
 800d194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d198:	d103      	bne.n	800d1a2 <xQueueReceive+0x13e>
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1a2:	f002 feeb 	bl	800ff7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1a6:	1d3a      	adds	r2, r7, #4
 800d1a8:	f107 0310 	add.w	r3, r7, #16
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f001 fc56 	bl	800ea60 <xTaskCheckForTimeOut>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d123      	bne.n	800d202 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1bc:	f000 fac0 	bl	800d740 <prvIsQueueEmpty>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d017      	beq.n	800d1f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c8:	3324      	adds	r3, #36	@ 0x24
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 fad8 	bl	800e784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1d6:	f000 fa61 	bl	800d69c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1da:	f001 f831 	bl	800e240 <xTaskResumeAll>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d189      	bne.n	800d0f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d1e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d224 <xQueueReceive+0x1c0>)
 800d1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	e780      	b.n	800d0f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1f8:	f000 fa50 	bl	800d69c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1fc:	f001 f820 	bl	800e240 <xTaskResumeAll>
 800d200:	e77a      	b.n	800d0f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d204:	f000 fa4a 	bl	800d69c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d208:	f001 f81a 	bl	800e240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d20c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d20e:	f000 fa97 	bl	800d740 <prvIsQueueEmpty>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	f43f af6f 	beq.w	800d0f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d21a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3730      	adds	r7, #48	@ 0x30
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	e000ed04 	.word	0xe000ed04

0800d228 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b08e      	sub	sp, #56	@ 0x38
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d232:	2300      	movs	r3, #0
 800d234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10b      	bne.n	800d25c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	623b      	str	r3, [r7, #32]
}
 800d256:	bf00      	nop
 800d258:	bf00      	nop
 800d25a:	e7fd      	b.n	800d258 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00b      	beq.n	800d27c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	61fb      	str	r3, [r7, #28]
}
 800d276:	bf00      	nop
 800d278:	bf00      	nop
 800d27a:	e7fd      	b.n	800d278 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d27c:	f001 fdda 	bl	800ee34 <xTaskGetSchedulerState>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <xQueueSemaphoreTake+0x64>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d101      	bne.n	800d290 <xQueueSemaphoreTake+0x68>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <xQueueSemaphoreTake+0x6a>
 800d290:	2300      	movs	r3, #0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	61bb      	str	r3, [r7, #24]
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	e7fd      	b.n	800d2aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ae:	f002 fe33 	bl	800ff18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d024      	beq.n	800d308 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c0:	1e5a      	subs	r2, r3, #1
 800d2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d104      	bne.n	800d2d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2ce:	f001 ff43 	bl	800f158 <pvTaskIncrementMutexHeldCount>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00f      	beq.n	800d300 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	3310      	adds	r3, #16
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f001 fadd 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d007      	beq.n	800d300 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2f0:	4b54      	ldr	r3, [pc, #336]	@ (800d444 <xQueueSemaphoreTake+0x21c>)
 800d2f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d300:	f002 fe3c 	bl	800ff7c <vPortExitCritical>
				return pdPASS;
 800d304:	2301      	movs	r3, #1
 800d306:	e098      	b.n	800d43a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d112      	bne.n	800d334 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d318:	f383 8811 	msr	BASEPRI, r3
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	617b      	str	r3, [r7, #20]
}
 800d326:	bf00      	nop
 800d328:	bf00      	nop
 800d32a:	e7fd      	b.n	800d328 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d32c:	f002 fe26 	bl	800ff7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d330:	2300      	movs	r3, #0
 800d332:	e082      	b.n	800d43a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d33a:	f107 030c 	add.w	r3, r7, #12
 800d33e:	4618      	mov	r0, r3
 800d340:	f001 fb78 	bl	800ea34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d344:	2301      	movs	r3, #1
 800d346:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d348:	f002 fe18 	bl	800ff7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d34c:	f000 ff6a 	bl	800e224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d350:	f002 fde2 	bl	800ff18 <vPortEnterCritical>
 800d354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d356:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d35a:	b25b      	sxtb	r3, r3
 800d35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d360:	d103      	bne.n	800d36a <xQueueSemaphoreTake+0x142>
 800d362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d370:	b25b      	sxtb	r3, r3
 800d372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d376:	d103      	bne.n	800d380 <xQueueSemaphoreTake+0x158>
 800d378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d380:	f002 fdfc 	bl	800ff7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d384:	463a      	mov	r2, r7
 800d386:	f107 030c 	add.w	r3, r7, #12
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f001 fb67 	bl	800ea60 <xTaskCheckForTimeOut>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d132      	bne.n	800d3fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d39a:	f000 f9d1 	bl	800d740 <prvIsQueueEmpty>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d026      	beq.n	800d3f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d109      	bne.n	800d3c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d3ac:	f002 fdb4 	bl	800ff18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f001 fd5b 	bl	800ee70 <xTaskPriorityInherit>
 800d3ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d3bc:	f002 fdde 	bl	800ff7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	3324      	adds	r3, #36	@ 0x24
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f001 f9db 	bl	800e784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3d0:	f000 f964 	bl	800d69c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3d4:	f000 ff34 	bl	800e240 <xTaskResumeAll>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f47f af67 	bne.w	800d2ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d3e0:	4b18      	ldr	r3, [pc, #96]	@ (800d444 <xQueueSemaphoreTake+0x21c>)
 800d3e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	e75d      	b.n	800d2ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3f4:	f000 f952 	bl	800d69c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3f8:	f000 ff22 	bl	800e240 <xTaskResumeAll>
 800d3fc:	e757      	b.n	800d2ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d400:	f000 f94c 	bl	800d69c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d404:	f000 ff1c 	bl	800e240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d40a:	f000 f999 	bl	800d740 <prvIsQueueEmpty>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	f43f af4c 	beq.w	800d2ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00d      	beq.n	800d438 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d41c:	f002 fd7c 	bl	800ff18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d420:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d422:	f000 f893 	bl	800d54c <prvGetDisinheritPriorityAfterTimeout>
 800d426:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f001 fdf6 	bl	800f020 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d434:	f002 fda2 	bl	800ff7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d438:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3738      	adds	r7, #56	@ 0x38
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	e000ed04 	.word	0xe000ed04

0800d448 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08e      	sub	sp, #56	@ 0x38
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10b      	bne.n	800d476 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	623b      	str	r3, [r7, #32]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d103      	bne.n	800d484 <xQueueReceiveFromISR+0x3c>
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d480:	2b00      	cmp	r3, #0
 800d482:	d101      	bne.n	800d488 <xQueueReceiveFromISR+0x40>
 800d484:	2301      	movs	r3, #1
 800d486:	e000      	b.n	800d48a <xQueueReceiveFromISR+0x42>
 800d488:	2300      	movs	r3, #0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10b      	bne.n	800d4a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	61fb      	str	r3, [r7, #28]
}
 800d4a0:	bf00      	nop
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4a6:	f002 fe17 	bl	80100d8 <vPortValidateInterruptPriority>
	__asm volatile
 800d4aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	61ba      	str	r2, [r7, #24]
 800d4c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d02f      	beq.n	800d532 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4e0:	f000 f8b6 	bl	800d650 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e6:	1e5a      	subs	r2, r3, #1
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f4:	d112      	bne.n	800d51c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d016      	beq.n	800d52c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	3310      	adds	r3, #16
 800d502:	4618      	mov	r0, r3
 800d504:	f001 f9ce 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00e      	beq.n	800d52c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	e007      	b.n	800d52c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d51c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d520:	3301      	adds	r3, #1
 800d522:	b2db      	uxtb	r3, r3
 800d524:	b25a      	sxtb	r2, r3
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d52c:	2301      	movs	r3, #1
 800d52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d530:	e001      	b.n	800d536 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d532:	2300      	movs	r3, #0
 800d534:	637b      	str	r3, [r7, #52]	@ 0x34
 800d536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d538:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	f383 8811 	msr	BASEPRI, r3
}
 800d540:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d544:	4618      	mov	r0, r3
 800d546:	3738      	adds	r7, #56	@ 0x38
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d006      	beq.n	800d56a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e001      	b.n	800d56e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d56e:	68fb      	ldr	r3, [r7, #12]
	}
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d588:	2300      	movs	r3, #0
 800d58a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10d      	bne.n	800d5b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d14d      	bne.n	800d63e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f001 fcca 	bl	800ef40 <xTaskPriorityDisinherit>
 800d5ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	609a      	str	r2, [r3, #8]
 800d5b4:	e043      	b.n	800d63e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d119      	bne.n	800d5f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6858      	ldr	r0, [r3, #4]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	f005 f961 	bl	801288e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5d4:	441a      	add	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d32b      	bcc.n	800d63e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	605a      	str	r2, [r3, #4]
 800d5ee:	e026      	b.n	800d63e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68d8      	ldr	r0, [r3, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	f005 f947 	bl	801288e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68da      	ldr	r2, [r3, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d608:	425b      	negs	r3, r3
 800d60a:	441a      	add	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d207      	bcs.n	800d62c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	689a      	ldr	r2, [r3, #8]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d624:	425b      	negs	r3, r3
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d105      	bne.n	800d63e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1c5a      	adds	r2, r3, #1
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d646:	697b      	ldr	r3, [r7, #20]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d018      	beq.n	800d694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d66a:	441a      	add	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d303      	bcc.n	800d684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68d9      	ldr	r1, [r3, #12]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68c:	461a      	mov	r2, r3
 800d68e:	6838      	ldr	r0, [r7, #0]
 800d690:	f005 f8fd 	bl	801288e <memcpy>
	}
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6a4:	f002 fc38 	bl	800ff18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6b0:	e011      	b.n	800d6d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d012      	beq.n	800d6e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3324      	adds	r3, #36	@ 0x24
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 f8f0 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6ca:	f001 fa2d 	bl	800eb28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	dce9      	bgt.n	800d6b2 <prvUnlockQueue+0x16>
 800d6de:	e000      	b.n	800d6e2 <prvUnlockQueue+0x46>
					break;
 800d6e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	22ff      	movs	r2, #255	@ 0xff
 800d6e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d6ea:	f002 fc47 	bl	800ff7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6ee:	f002 fc13 	bl	800ff18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6fa:	e011      	b.n	800d720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d012      	beq.n	800d72a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3310      	adds	r3, #16
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 f8cb 	bl	800e8a4 <xTaskRemoveFromEventList>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d714:	f001 fa08 	bl	800eb28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d718:	7bbb      	ldrb	r3, [r7, #14]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dce9      	bgt.n	800d6fc <prvUnlockQueue+0x60>
 800d728:	e000      	b.n	800d72c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d72a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	22ff      	movs	r2, #255	@ 0xff
 800d730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d734:	f002 fc22 	bl	800ff7c <vPortExitCritical>
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d748:	f002 fbe6 	bl	800ff18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d754:	2301      	movs	r3, #1
 800d756:	60fb      	str	r3, [r7, #12]
 800d758:	e001      	b.n	800d75e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d75e:	f002 fc0d 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d774:	f002 fbd0 	bl	800ff18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d780:	429a      	cmp	r2, r3
 800d782:	d102      	bne.n	800d78a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d784:	2301      	movs	r3, #1
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e001      	b.n	800d78e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d78e:	f002 fbf5 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800d792:	68fb      	ldr	r3, [r7, #12]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	e014      	b.n	800d7d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7ac:	4a0f      	ldr	r2, [pc, #60]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10b      	bne.n	800d7d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7b8:	490c      	ldr	r1, [pc, #48]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	4413      	add	r3, r2
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ce:	e006      	b.n	800d7de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	60fb      	str	r3, [r7, #12]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b07      	cmp	r3, #7
 800d7da:	d9e7      	bls.n	800d7ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7dc:	bf00      	nop
 800d7de:	bf00      	nop
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	20000fd8 	.word	0x20000fd8

0800d7f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d800:	f002 fb8a 	bl	800ff18 <vPortEnterCritical>
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d80a:	b25b      	sxtb	r3, r3
 800d80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d810:	d103      	bne.n	800d81a <vQueueWaitForMessageRestricted+0x2a>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d820:	b25b      	sxtb	r3, r3
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d826:	d103      	bne.n	800d830 <vQueueWaitForMessageRestricted+0x40>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d830:	f002 fba4 	bl	800ff7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d106      	bne.n	800d84a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	3324      	adds	r3, #36	@ 0x24
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	68b9      	ldr	r1, [r7, #8]
 800d844:	4618      	mov	r0, r3
 800d846:	f001 f801 	bl	800e84c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d84a:	6978      	ldr	r0, [r7, #20]
 800d84c:	f7ff ff26 	bl	800d69c <prvUnlockQueue>
	}
 800d850:	bf00      	nop
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08e      	sub	sp, #56	@ 0x38
 800d85c:	af04      	add	r7, sp, #16
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10b      	bne.n	800d884 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	623b      	str	r3, [r7, #32]
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	e7fd      	b.n	800d880 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10b      	bne.n	800d8a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	61fb      	str	r3, [r7, #28]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8a2:	23a8      	movs	r3, #168	@ 0xa8
 800d8a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2ba8      	cmp	r3, #168	@ 0xa8
 800d8aa:	d00b      	beq.n	800d8c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	61bb      	str	r3, [r7, #24]
}
 800d8be:	bf00      	nop
 800d8c0:	bf00      	nop
 800d8c2:	e7fd      	b.n	800d8c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01e      	beq.n	800d90a <xTaskCreateStatic+0xb2>
 800d8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d01b      	beq.n	800d90a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ea:	9302      	str	r3, [sp, #8]
 800d8ec:	f107 0314 	add.w	r3, r7, #20
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	68b9      	ldr	r1, [r7, #8]
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 f851 	bl	800d9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d904:	f000 f8f6 	bl	800daf4 <prvAddNewTaskToReadyList>
 800d908:	e001      	b.n	800d90e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d90e:	697b      	ldr	r3, [r7, #20]
	}
 800d910:	4618      	mov	r0, r3
 800d912:	3728      	adds	r7, #40	@ 0x28
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08c      	sub	sp, #48	@ 0x30
 800d91c:	af04      	add	r7, sp, #16
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	603b      	str	r3, [r7, #0]
 800d924:	4613      	mov	r3, r2
 800d926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d928:	88fb      	ldrh	r3, [r7, #6]
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f002 fc15 	bl	801015c <pvPortMalloc>
 800d932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00e      	beq.n	800d958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d93a:	20a8      	movs	r0, #168	@ 0xa8
 800d93c:	f002 fc0e 	bl	801015c <pvPortMalloc>
 800d940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	697a      	ldr	r2, [r7, #20]
 800d94c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d94e:	e005      	b.n	800d95c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d950:	6978      	ldr	r0, [r7, #20]
 800d952:	f002 fcd1 	bl	80102f8 <vPortFree>
 800d956:	e001      	b.n	800d95c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d017      	beq.n	800d992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d96a:	88fa      	ldrh	r2, [r7, #6]
 800d96c:	2300      	movs	r3, #0
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f80f 	bl	800d9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d986:	69f8      	ldr	r0, [r7, #28]
 800d988:	f000 f8b4 	bl	800daf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d98c:	2301      	movs	r3, #1
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	e002      	b.n	800d998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d998:	69bb      	ldr	r3, [r7, #24]
	}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3720      	adds	r7, #32
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	21a5      	movs	r1, #165	@ 0xa5
 800d9be:	f004 fdfd 	bl	80125bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	4413      	add	r3, r2
 800d9d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	f023 0307 	bic.w	r3, r3, #7
 800d9da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00b      	beq.n	800d9fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	617b      	str	r3, [r7, #20]
}
 800d9f8:	bf00      	nop
 800d9fa:	bf00      	nop
 800d9fc:	e7fd      	b.n	800d9fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d01f      	beq.n	800da44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da04:	2300      	movs	r3, #0
 800da06:	61fb      	str	r3, [r7, #28]
 800da08:	e012      	b.n	800da30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	4413      	add	r3, r2
 800da10:	7819      	ldrb	r1, [r3, #0]
 800da12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	4413      	add	r3, r2
 800da18:	3334      	adds	r3, #52	@ 0x34
 800da1a:	460a      	mov	r2, r1
 800da1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	4413      	add	r3, r2
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d006      	beq.n	800da38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	3301      	adds	r3, #1
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	2b0f      	cmp	r3, #15
 800da34:	d9e9      	bls.n	800da0a <prvInitialiseNewTask+0x66>
 800da36:	e000      	b.n	800da3a <prvInitialiseNewTask+0x96>
			{
				break;
 800da38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800da42:	e003      	b.n	800da4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da46:	2200      	movs	r2, #0
 800da48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	2b37      	cmp	r3, #55	@ 0x37
 800da50:	d901      	bls.n	800da56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da52:	2337      	movs	r3, #55	@ 0x37
 800da54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da64:	2200      	movs	r2, #0
 800da66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6a:	3304      	adds	r3, #4
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe ff4d 	bl	800c90c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	3318      	adds	r3, #24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe ff48 	bl	800c90c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da94:	2200      	movs	r2, #0
 800da96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800daa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa4:	3354      	adds	r3, #84	@ 0x54
 800daa6:	224c      	movs	r2, #76	@ 0x4c
 800daa8:	2100      	movs	r1, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f004 fd86 	bl	80125bc <memset>
 800dab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab2:	4a0d      	ldr	r2, [pc, #52]	@ (800dae8 <prvInitialiseNewTask+0x144>)
 800dab4:	659a      	str	r2, [r3, #88]	@ 0x58
 800dab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab8:	4a0c      	ldr	r2, [pc, #48]	@ (800daec <prvInitialiseNewTask+0x148>)
 800daba:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dabe:	4a0c      	ldr	r2, [pc, #48]	@ (800daf0 <prvInitialiseNewTask+0x14c>)
 800dac0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	68f9      	ldr	r1, [r7, #12]
 800dac6:	69b8      	ldr	r0, [r7, #24]
 800dac8:	f002 f8f4 	bl	800fcb4 <pxPortInitialiseStack>
 800dacc:	4602      	mov	r2, r0
 800dace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dadc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dade:	bf00      	nop
 800dae0:	3720      	adds	r7, #32
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20005960 	.word	0x20005960
 800daec:	200059c8 	.word	0x200059c8
 800daf0:	20005a30 	.word	0x20005a30

0800daf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dafc:	f002 fa0c 	bl	800ff18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db00:	4b2d      	ldr	r3, [pc, #180]	@ (800dbb8 <prvAddNewTaskToReadyList+0xc4>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	4a2c      	ldr	r2, [pc, #176]	@ (800dbb8 <prvAddNewTaskToReadyList+0xc4>)
 800db08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db0a:	4b2c      	ldr	r3, [pc, #176]	@ (800dbbc <prvAddNewTaskToReadyList+0xc8>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d109      	bne.n	800db26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db12:	4a2a      	ldr	r2, [pc, #168]	@ (800dbbc <prvAddNewTaskToReadyList+0xc8>)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db18:	4b27      	ldr	r3, [pc, #156]	@ (800dbb8 <prvAddNewTaskToReadyList+0xc4>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d110      	bne.n	800db42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db20:	f001 f826 	bl	800eb70 <prvInitialiseTaskLists>
 800db24:	e00d      	b.n	800db42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db26:	4b26      	ldr	r3, [pc, #152]	@ (800dbc0 <prvAddNewTaskToReadyList+0xcc>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db2e:	4b23      	ldr	r3, [pc, #140]	@ (800dbbc <prvAddNewTaskToReadyList+0xc8>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db38:	429a      	cmp	r2, r3
 800db3a:	d802      	bhi.n	800db42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db3c:	4a1f      	ldr	r2, [pc, #124]	@ (800dbbc <prvAddNewTaskToReadyList+0xc8>)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db42:	4b20      	ldr	r3, [pc, #128]	@ (800dbc4 <prvAddNewTaskToReadyList+0xd0>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	3301      	adds	r3, #1
 800db48:	4a1e      	ldr	r2, [pc, #120]	@ (800dbc4 <prvAddNewTaskToReadyList+0xd0>)
 800db4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db4c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbc4 <prvAddNewTaskToReadyList+0xd0>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db58:	4b1b      	ldr	r3, [pc, #108]	@ (800dbc8 <prvAddNewTaskToReadyList+0xd4>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d903      	bls.n	800db68 <prvAddNewTaskToReadyList+0x74>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db64:	4a18      	ldr	r2, [pc, #96]	@ (800dbc8 <prvAddNewTaskToReadyList+0xd4>)
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4a15      	ldr	r2, [pc, #84]	@ (800dbcc <prvAddNewTaskToReadyList+0xd8>)
 800db76:	441a      	add	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3304      	adds	r3, #4
 800db7c:	4619      	mov	r1, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	f7fe fed1 	bl	800c926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db84:	f002 f9fa 	bl	800ff7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db88:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc0 <prvAddNewTaskToReadyList+0xcc>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00e      	beq.n	800dbae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db90:	4b0a      	ldr	r3, [pc, #40]	@ (800dbbc <prvAddNewTaskToReadyList+0xc8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d207      	bcs.n	800dbae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db9e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <prvAddNewTaskToReadyList+0xdc>)
 800dba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	200014ec 	.word	0x200014ec
 800dbbc:	20001018 	.word	0x20001018
 800dbc0:	200014f8 	.word	0x200014f8
 800dbc4:	20001508 	.word	0x20001508
 800dbc8:	200014f4 	.word	0x200014f4
 800dbcc:	2000101c 	.word	0x2000101c
 800dbd0:	e000ed04 	.word	0xe000ed04

0800dbd4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dbdc:	f002 f99c 	bl	800ff18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d102      	bne.n	800dbec <vTaskDelete+0x18>
 800dbe6:	4b2d      	ldr	r3, [pc, #180]	@ (800dc9c <vTaskDelete+0xc8>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	e000      	b.n	800dbee <vTaskDelete+0x1a>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe fef3 	bl	800c9e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d004      	beq.n	800dc0c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3318      	adds	r3, #24
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe feea 	bl	800c9e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dc0c:	4b24      	ldr	r3, [pc, #144]	@ (800dca0 <vTaskDelete+0xcc>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3301      	adds	r3, #1
 800dc12:	4a23      	ldr	r2, [pc, #140]	@ (800dca0 <vTaskDelete+0xcc>)
 800dc14:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dc16:	4b21      	ldr	r3, [pc, #132]	@ (800dc9c <vTaskDelete+0xc8>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d10b      	bne.n	800dc38 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3304      	adds	r3, #4
 800dc24:	4619      	mov	r1, r3
 800dc26:	481f      	ldr	r0, [pc, #124]	@ (800dca4 <vTaskDelete+0xd0>)
 800dc28:	f7fe fe7d 	bl	800c926 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dc2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dca8 <vTaskDelete+0xd4>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3301      	adds	r3, #1
 800dc32:	4a1d      	ldr	r2, [pc, #116]	@ (800dca8 <vTaskDelete+0xd4>)
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e009      	b.n	800dc4c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800dc38:	4b1c      	ldr	r3, [pc, #112]	@ (800dcac <vTaskDelete+0xd8>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800dcac <vTaskDelete+0xd8>)
 800dc40:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f001 f8a0 	bl	800ed88 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800dc48:	f001 f8d4 	bl	800edf4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800dc4c:	f002 f996 	bl	800ff7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800dc50:	4b17      	ldr	r3, [pc, #92]	@ (800dcb0 <vTaskDelete+0xdc>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d01c      	beq.n	800dc92 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800dc58:	4b10      	ldr	r3, [pc, #64]	@ (800dc9c <vTaskDelete+0xc8>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d117      	bne.n	800dc92 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800dc62:	4b14      	ldr	r3, [pc, #80]	@ (800dcb4 <vTaskDelete+0xe0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00b      	beq.n	800dc82 <vTaskDelete+0xae>
	__asm volatile
 800dc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	60bb      	str	r3, [r7, #8]
}
 800dc7c:	bf00      	nop
 800dc7e:	bf00      	nop
 800dc80:	e7fd      	b.n	800dc7e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800dc82:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb8 <vTaskDelete+0xe4>)
 800dc84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc88:	601a      	str	r2, [r3, #0]
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20001018 	.word	0x20001018
 800dca0:	20001508 	.word	0x20001508
 800dca4:	200014c0 	.word	0x200014c0
 800dca8:	200014d4 	.word	0x200014d4
 800dcac:	200014ec 	.word	0x200014ec
 800dcb0:	200014f8 	.word	0x200014f8
 800dcb4:	20001514 	.word	0x20001514
 800dcb8:	e000ed04 	.word	0xe000ed04

0800dcbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d018      	beq.n	800dd00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcce:	4b14      	ldr	r3, [pc, #80]	@ (800dd20 <vTaskDelay+0x64>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00b      	beq.n	800dcee <vTaskDelay+0x32>
	__asm volatile
 800dcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	60bb      	str	r3, [r7, #8]
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	e7fd      	b.n	800dcea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dcee:	f000 fa99 	bl	800e224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f001 fbb1 	bl	800f45c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dcfa:	f000 faa1 	bl	800e240 <xTaskResumeAll>
 800dcfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d107      	bne.n	800dd16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd06:	4b07      	ldr	r3, [pc, #28]	@ (800dd24 <vTaskDelay+0x68>)
 800dd08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd16:	bf00      	nop
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20001514 	.word	0x20001514
 800dd24:	e000ed04 	.word	0xe000ed04

0800dd28 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b088      	sub	sp, #32
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <eTaskGetState+0x2a>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	60bb      	str	r3, [r7, #8]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800dd52:	4b24      	ldr	r3, [pc, #144]	@ (800dde4 <eTaskGetState+0xbc>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	69ba      	ldr	r2, [r7, #24]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d102      	bne.n	800dd62 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	77fb      	strb	r3, [r7, #31]
 800dd60:	e03a      	b.n	800ddd8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800dd62:	f002 f8d9 	bl	800ff18 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800dd6c:	4b1e      	ldr	r3, [pc, #120]	@ (800dde8 <eTaskGetState+0xc0>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800dd72:	4b1e      	ldr	r3, [pc, #120]	@ (800ddec <eTaskGetState+0xc4>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800dd78:	f002 f900 	bl	800ff7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d003      	beq.n	800dd8c <eTaskGetState+0x64>
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d102      	bne.n	800dd92 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	77fb      	strb	r3, [r7, #31]
 800dd90:	e022      	b.n	800ddd8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	4a16      	ldr	r2, [pc, #88]	@ (800ddf0 <eTaskGetState+0xc8>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d112      	bne.n	800ddc0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10b      	bne.n	800ddba <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d102      	bne.n	800ddb4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800ddae:	2302      	movs	r3, #2
 800ddb0:	77fb      	strb	r3, [r7, #31]
 800ddb2:	e011      	b.n	800ddd8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	77fb      	strb	r3, [r7, #31]
 800ddb8:	e00e      	b.n	800ddd8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	77fb      	strb	r3, [r7, #31]
 800ddbe:	e00b      	b.n	800ddd8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	4a0c      	ldr	r2, [pc, #48]	@ (800ddf4 <eTaskGetState+0xcc>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d002      	beq.n	800ddce <eTaskGetState+0xa6>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d102      	bne.n	800ddd4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ddce:	2304      	movs	r3, #4
 800ddd0:	77fb      	strb	r3, [r7, #31]
 800ddd2:	e001      	b.n	800ddd8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ddd8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ddda:	4618      	mov	r0, r3
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	20001018 	.word	0x20001018
 800dde8:	200014a4 	.word	0x200014a4
 800ddec:	200014a8 	.word	0x200014a8
 800ddf0:	200014d8 	.word	0x200014d8
 800ddf4:	200014c0 	.word	0x200014c0

0800ddf8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800de02:	2300      	movs	r3, #0
 800de04:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b37      	cmp	r3, #55	@ 0x37
 800de0a:	d90b      	bls.n	800de24 <vTaskPrioritySet+0x2c>
	__asm volatile
 800de0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	60fb      	str	r3, [r7, #12]
}
 800de1e:	bf00      	nop
 800de20:	bf00      	nop
 800de22:	e7fd      	b.n	800de20 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	2b37      	cmp	r3, #55	@ 0x37
 800de28:	d901      	bls.n	800de2e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de2a:	2337      	movs	r3, #55	@ 0x37
 800de2c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800de2e:	f002 f873 	bl	800ff18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d102      	bne.n	800de3e <vTaskPrioritySet+0x46>
 800de38:	4b3a      	ldr	r3, [pc, #232]	@ (800df24 <vTaskPrioritySet+0x12c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	e000      	b.n	800de40 <vTaskPrioritySet+0x48>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de46:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d063      	beq.n	800df18 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	429a      	cmp	r2, r3
 800de56:	d90d      	bls.n	800de74 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800de58:	4b32      	ldr	r3, [pc, #200]	@ (800df24 <vTaskPrioritySet+0x12c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	69ba      	ldr	r2, [r7, #24]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d00f      	beq.n	800de82 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800de62:	4b30      	ldr	r3, [pc, #192]	@ (800df24 <vTaskPrioritySet+0x12c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d309      	bcc.n	800de82 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800de6e:	2301      	movs	r3, #1
 800de70:	61fb      	str	r3, [r7, #28]
 800de72:	e006      	b.n	800de82 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800de74:	4b2b      	ldr	r3, [pc, #172]	@ (800df24 <vTaskPrioritySet+0x12c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	69ba      	ldr	r2, [r7, #24]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d101      	bne.n	800de82 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800de7e:	2301      	movs	r3, #1
 800de80:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de86:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de90:	429a      	cmp	r2, r3
 800de92:	d102      	bne.n	800de9a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	db04      	blt.n	800deb2 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	6959      	ldr	r1, [r3, #20]
 800deb6:	693a      	ldr	r2, [r7, #16]
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4a19      	ldr	r2, [pc, #100]	@ (800df28 <vTaskPrioritySet+0x130>)
 800dec2:	4413      	add	r3, r2
 800dec4:	4299      	cmp	r1, r3
 800dec6:	d11c      	bne.n	800df02 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	3304      	adds	r3, #4
 800decc:	4618      	mov	r0, r3
 800dece:	f7fe fd87 	bl	800c9e0 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ded6:	4b15      	ldr	r3, [pc, #84]	@ (800df2c <vTaskPrioritySet+0x134>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d903      	bls.n	800dee6 <vTaskPrioritySet+0xee>
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee2:	4a12      	ldr	r2, [pc, #72]	@ (800df2c <vTaskPrioritySet+0x134>)
 800dee4:	6013      	str	r3, [r2, #0]
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deea:	4613      	mov	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4a0d      	ldr	r2, [pc, #52]	@ (800df28 <vTaskPrioritySet+0x130>)
 800def4:	441a      	add	r2, r3
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	3304      	adds	r3, #4
 800defa:	4619      	mov	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	f7fe fd12 	bl	800c926 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d007      	beq.n	800df18 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800df08:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <vTaskPrioritySet+0x138>)
 800df0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800df18:	f002 f830 	bl	800ff7c <vPortExitCritical>
	}
 800df1c:	bf00      	nop
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	20001018 	.word	0x20001018
 800df28:	2000101c 	.word	0x2000101c
 800df2c:	200014f4 	.word	0x200014f4
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800df3c:	f001 ffec 	bl	800ff18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <vTaskSuspend+0x18>
 800df46:	4b30      	ldr	r3, [pc, #192]	@ (800e008 <vTaskSuspend+0xd4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	e000      	b.n	800df4e <vTaskSuspend+0x1a>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3304      	adds	r3, #4
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe fd43 	bl	800c9e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d004      	beq.n	800df6c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3318      	adds	r3, #24
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe fd3a 	bl	800c9e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	3304      	adds	r3, #4
 800df70:	4619      	mov	r1, r3
 800df72:	4826      	ldr	r0, [pc, #152]	@ (800e00c <vTaskSuspend+0xd8>)
 800df74:	f7fe fcd7 	bl	800c926 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b01      	cmp	r3, #1
 800df82:	d103      	bne.n	800df8c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800df8c:	f001 fff6 	bl	800ff7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800df90:	4b1f      	ldr	r3, [pc, #124]	@ (800e010 <vTaskSuspend+0xdc>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800df98:	f001 ffbe 	bl	800ff18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800df9c:	f000 ff2a 	bl	800edf4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dfa0:	f001 ffec 	bl	800ff7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dfa4:	4b18      	ldr	r3, [pc, #96]	@ (800e008 <vTaskSuspend+0xd4>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d128      	bne.n	800e000 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dfae:	4b18      	ldr	r3, [pc, #96]	@ (800e010 <vTaskSuspend+0xdc>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d018      	beq.n	800dfe8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dfb6:	4b17      	ldr	r3, [pc, #92]	@ (800e014 <vTaskSuspend+0xe0>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00b      	beq.n	800dfd6 <vTaskSuspend+0xa2>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	60bb      	str	r3, [r7, #8]
}
 800dfd0:	bf00      	nop
 800dfd2:	bf00      	nop
 800dfd4:	e7fd      	b.n	800dfd2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dfd6:	4b10      	ldr	r3, [pc, #64]	@ (800e018 <vTaskSuspend+0xe4>)
 800dfd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfe6:	e00b      	b.n	800e000 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dfe8:	4b08      	ldr	r3, [pc, #32]	@ (800e00c <vTaskSuspend+0xd8>)
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	4b0b      	ldr	r3, [pc, #44]	@ (800e01c <vTaskSuspend+0xe8>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d103      	bne.n	800dffc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800dff4:	4b04      	ldr	r3, [pc, #16]	@ (800e008 <vTaskSuspend+0xd4>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
	}
 800dffa:	e001      	b.n	800e000 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800dffc:	f000 fb5c 	bl	800e6b8 <vTaskSwitchContext>
	}
 800e000:	bf00      	nop
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	20001018 	.word	0x20001018
 800e00c:	200014d8 	.word	0x200014d8
 800e010:	200014f8 	.word	0x200014f8
 800e014:	20001514 	.word	0x20001514
 800e018:	e000ed04 	.word	0xe000ed04
 800e01c:	200014ec 	.word	0x200014ec

0800e020 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e020:	b480      	push	{r7}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e028:	2300      	movs	r3, #0
 800e02a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	60fb      	str	r3, [r7, #12]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	4a0a      	ldr	r2, [pc, #40]	@ (800e07c <prvTaskIsTaskSuspended+0x5c>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d10a      	bne.n	800e06e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	4a08      	ldr	r2, [pc, #32]	@ (800e080 <prvTaskIsTaskSuspended+0x60>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d005      	beq.n	800e06e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800e06a:	2301      	movs	r3, #1
 800e06c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e06e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e070:	4618      	mov	r0, r3
 800e072:	371c      	adds	r7, #28
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	200014d8 	.word	0x200014d8
 800e080:	200014ac 	.word	0x200014ac

0800e084 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10b      	bne.n	800e0ae <vTaskResume+0x2a>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	60bb      	str	r3, [r7, #8]
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	e7fd      	b.n	800e0aa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e0ae:	4b21      	ldr	r3, [pc, #132]	@ (800e134 <vTaskResume+0xb0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d038      	beq.n	800e12a <vTaskResume+0xa6>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d035      	beq.n	800e12a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800e0be:	f001 ff2b 	bl	800ff18 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff ffac 	bl	800e020 <prvTaskIsTaskSuspended>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d02b      	beq.n	800e126 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe fc84 	bl	800c9e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0dc:	4b16      	ldr	r3, [pc, #88]	@ (800e138 <vTaskResume+0xb4>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d903      	bls.n	800e0ec <vTaskResume+0x68>
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	4a13      	ldr	r2, [pc, #76]	@ (800e138 <vTaskResume+0xb4>)
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4a10      	ldr	r2, [pc, #64]	@ (800e13c <vTaskResume+0xb8>)
 800e0fa:	441a      	add	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f7fe fc0f 	bl	800c926 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e10c:	4b09      	ldr	r3, [pc, #36]	@ (800e134 <vTaskResume+0xb0>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e112:	429a      	cmp	r2, r3
 800e114:	d307      	bcc.n	800e126 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e116:	4b0a      	ldr	r3, [pc, #40]	@ (800e140 <vTaskResume+0xbc>)
 800e118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e126:	f001 ff29 	bl	800ff7c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e12a:	bf00      	nop
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	20001018 	.word	0x20001018
 800e138:	200014f4 	.word	0x200014f4
 800e13c:	2000101c 	.word	0x2000101c
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b08a      	sub	sp, #40	@ 0x28
 800e148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e14a:	2300      	movs	r3, #0
 800e14c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e14e:	2300      	movs	r3, #0
 800e150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e152:	463a      	mov	r2, r7
 800e154:	1d39      	adds	r1, r7, #4
 800e156:	f107 0308 	add.w	r3, r7, #8
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe f9c6 	bl	800c4ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	9202      	str	r2, [sp, #8]
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	2300      	movs	r3, #0
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	2300      	movs	r3, #0
 800e170:	460a      	mov	r2, r1
 800e172:	4924      	ldr	r1, [pc, #144]	@ (800e204 <vTaskStartScheduler+0xc0>)
 800e174:	4824      	ldr	r0, [pc, #144]	@ (800e208 <vTaskStartScheduler+0xc4>)
 800e176:	f7ff fb6f 	bl	800d858 <xTaskCreateStatic>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4a23      	ldr	r2, [pc, #140]	@ (800e20c <vTaskStartScheduler+0xc8>)
 800e17e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e180:	4b22      	ldr	r3, [pc, #136]	@ (800e20c <vTaskStartScheduler+0xc8>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e188:	2301      	movs	r3, #1
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	e001      	b.n	800e192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e18e:	2300      	movs	r3, #0
 800e190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d102      	bne.n	800e19e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e198:	f001 f9b4 	bl	800f504 <xTimerCreateTimerTask>
 800e19c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d11b      	bne.n	800e1dc <vTaskStartScheduler+0x98>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	613b      	str	r3, [r7, #16]
}
 800e1b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1b8:	4b15      	ldr	r3, [pc, #84]	@ (800e210 <vTaskStartScheduler+0xcc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3354      	adds	r3, #84	@ 0x54
 800e1be:	4a15      	ldr	r2, [pc, #84]	@ (800e214 <vTaskStartScheduler+0xd0>)
 800e1c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c2:	4b15      	ldr	r3, [pc, #84]	@ (800e218 <vTaskStartScheduler+0xd4>)
 800e1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1ca:	4b14      	ldr	r3, [pc, #80]	@ (800e21c <vTaskStartScheduler+0xd8>)
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1d0:	4b13      	ldr	r3, [pc, #76]	@ (800e220 <vTaskStartScheduler+0xdc>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1d6:	f001 fdfb 	bl	800fdd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1da:	e00f      	b.n	800e1fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e2:	d10b      	bne.n	800e1fc <vTaskStartScheduler+0xb8>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	e7fd      	b.n	800e1f8 <vTaskStartScheduler+0xb4>
}
 800e1fc:	bf00      	nop
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	08015a10 	.word	0x08015a10
 800e208:	0800eb41 	.word	0x0800eb41
 800e20c:	20001510 	.word	0x20001510
 800e210:	20001018 	.word	0x20001018
 800e214:	200003d4 	.word	0x200003d4
 800e218:	2000150c 	.word	0x2000150c
 800e21c:	200014f8 	.word	0x200014f8
 800e220:	200014f0 	.word	0x200014f0

0800e224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e224:	b480      	push	{r7}
 800e226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e228:	4b04      	ldr	r3, [pc, #16]	@ (800e23c <vTaskSuspendAll+0x18>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3301      	adds	r3, #1
 800e22e:	4a03      	ldr	r2, [pc, #12]	@ (800e23c <vTaskSuspendAll+0x18>)
 800e230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e232:	bf00      	nop
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	20001514 	.word	0x20001514

0800e240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e246:	2300      	movs	r3, #0
 800e248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e24e:	4b42      	ldr	r3, [pc, #264]	@ (800e358 <xTaskResumeAll+0x118>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10b      	bne.n	800e26e <xTaskResumeAll+0x2e>
	__asm volatile
 800e256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25a:	f383 8811 	msr	BASEPRI, r3
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f3bf 8f4f 	dsb	sy
 800e266:	603b      	str	r3, [r7, #0]
}
 800e268:	bf00      	nop
 800e26a:	bf00      	nop
 800e26c:	e7fd      	b.n	800e26a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e26e:	f001 fe53 	bl	800ff18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e272:	4b39      	ldr	r3, [pc, #228]	@ (800e358 <xTaskResumeAll+0x118>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3b01      	subs	r3, #1
 800e278:	4a37      	ldr	r2, [pc, #220]	@ (800e358 <xTaskResumeAll+0x118>)
 800e27a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e27c:	4b36      	ldr	r3, [pc, #216]	@ (800e358 <xTaskResumeAll+0x118>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d162      	bne.n	800e34a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e284:	4b35      	ldr	r3, [pc, #212]	@ (800e35c <xTaskResumeAll+0x11c>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d05e      	beq.n	800e34a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e28c:	e02f      	b.n	800e2ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e28e:	4b34      	ldr	r3, [pc, #208]	@ (800e360 <xTaskResumeAll+0x120>)
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3318      	adds	r3, #24
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe fba0 	bl	800c9e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	3304      	adds	r3, #4
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fe fb9b 	bl	800c9e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ae:	4b2d      	ldr	r3, [pc, #180]	@ (800e364 <xTaskResumeAll+0x124>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d903      	bls.n	800e2be <xTaskResumeAll+0x7e>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ba:	4a2a      	ldr	r2, [pc, #168]	@ (800e364 <xTaskResumeAll+0x124>)
 800e2bc:	6013      	str	r3, [r2, #0]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4a27      	ldr	r2, [pc, #156]	@ (800e368 <xTaskResumeAll+0x128>)
 800e2cc:	441a      	add	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	f7fe fb26 	bl	800c926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2de:	4b23      	ldr	r3, [pc, #140]	@ (800e36c <xTaskResumeAll+0x12c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d302      	bcc.n	800e2ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e2e8:	4b21      	ldr	r3, [pc, #132]	@ (800e370 <xTaskResumeAll+0x130>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800e360 <xTaskResumeAll+0x120>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1cb      	bne.n	800e28e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2fc:	f000 fd7a 	bl	800edf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e300:	4b1c      	ldr	r3, [pc, #112]	@ (800e374 <xTaskResumeAll+0x134>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d010      	beq.n	800e32e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e30c:	f000 f91a 	bl	800e544 <xTaskIncrementTick>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e316:	4b16      	ldr	r3, [pc, #88]	@ (800e370 <xTaskResumeAll+0x130>)
 800e318:	2201      	movs	r2, #1
 800e31a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3b01      	subs	r3, #1
 800e320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1f1      	bne.n	800e30c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e328:	4b12      	ldr	r3, [pc, #72]	@ (800e374 <xTaskResumeAll+0x134>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e32e:	4b10      	ldr	r3, [pc, #64]	@ (800e370 <xTaskResumeAll+0x130>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e336:	2301      	movs	r3, #1
 800e338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e33a:	4b0f      	ldr	r3, [pc, #60]	@ (800e378 <xTaskResumeAll+0x138>)
 800e33c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e340:	601a      	str	r2, [r3, #0]
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f001 fe17 	bl	800ff7c <vPortExitCritical>

	return xAlreadyYielded;
 800e34e:	68bb      	ldr	r3, [r7, #8]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	20001514 	.word	0x20001514
 800e35c:	200014ec 	.word	0x200014ec
 800e360:	200014ac 	.word	0x200014ac
 800e364:	200014f4 	.word	0x200014f4
 800e368:	2000101c 	.word	0x2000101c
 800e36c:	20001018 	.word	0x20001018
 800e370:	20001500 	.word	0x20001500
 800e374:	200014fc 	.word	0x200014fc
 800e378:	e000ed04 	.word	0xe000ed04

0800e37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e382:	4b05      	ldr	r3, [pc, #20]	@ (800e398 <xTaskGetTickCount+0x1c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e388:	687b      	ldr	r3, [r7, #4]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	200014f0 	.word	0x200014f0

0800e39c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e39c:	b480      	push	{r7}
 800e39e:	b08b      	sub	sp, #44	@ 0x2c
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d05b      	beq.n	800e46a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	61bb      	str	r3, [r7, #24]
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	685a      	ldr	r2, [r3, #4]
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	605a      	str	r2, [r3, #4]
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d104      	bne.n	800e3d6 <prvSearchForNameWithinSingleList+0x3a>
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	605a      	str	r2, [r3, #4]
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	613b      	str	r3, [r7, #16]
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	685a      	ldr	r2, [r3, #4]
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	605a      	str	r2, [r3, #4]
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d104      	bne.n	800e402 <prvSearchForNameWithinSingleList+0x66>
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	685a      	ldr	r2, [r3, #4]
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	605a      	str	r2, [r3, #4]
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e40a:	2300      	movs	r3, #0
 800e40c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e40e:	2300      	movs	r3, #0
 800e410:	623b      	str	r3, [r7, #32]
 800e412:	e01c      	b.n	800e44e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	4413      	add	r3, r2
 800e41a:	3334      	adds	r3, #52	@ 0x34
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	4413      	add	r3, r2
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	7afa      	ldrb	r2, [r7, #11]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d002      	beq.n	800e434 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e42e:	2301      	movs	r3, #1
 800e430:	61fb      	str	r3, [r7, #28]
 800e432:	e006      	b.n	800e442 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e434:	7afb      	ldrb	r3, [r7, #11]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d103      	bne.n	800e442 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e43e:	2301      	movs	r3, #1
 800e440:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d106      	bne.n	800e456 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e448:	6a3b      	ldr	r3, [r7, #32]
 800e44a:	3301      	adds	r3, #1
 800e44c:	623b      	str	r3, [r7, #32]
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	2b0f      	cmp	r3, #15
 800e452:	d9df      	bls.n	800e414 <prvSearchForNameWithinSingleList+0x78>
 800e454:	e000      	b.n	800e458 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e456:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d104      	bne.n	800e468 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	429a      	cmp	r2, r3
 800e464:	d1bb      	bne.n	800e3de <prvSearchForNameWithinSingleList+0x42>
 800e466:	e000      	b.n	800e46a <prvSearchForNameWithinSingleList+0xce>
					break;
 800e468:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e46c:	4618      	mov	r0, r3
 800e46e:	372c      	adds	r7, #44	@ 0x2c
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e480:	2338      	movs	r3, #56	@ 0x38
 800e482:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7f1 fef3 	bl	8000270 <strlen>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b0f      	cmp	r3, #15
 800e48e:	d90b      	bls.n	800e4a8 <xTaskGetHandle+0x30>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	60fb      	str	r3, [r7, #12]
}
 800e4a2:	bf00      	nop
 800e4a4:	bf00      	nop
 800e4a6:	e7fd      	b.n	800e4a4 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e4a8:	f7ff febc 	bl	800e224 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4a1c      	ldr	r2, [pc, #112]	@ (800e530 <xTaskGetHandle+0xb8>)
 800e4be:	4413      	add	r3, r2
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff ff6a 	bl	800e39c <prvSearchForNameWithinSingleList>
 800e4c8:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d103      	bne.n	800e4d8 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1ea      	bne.n	800e4ac <xTaskGetHandle+0x34>
 800e4d6:	e000      	b.n	800e4da <xTaskGetHandle+0x62>
					break;
 800e4d8:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d106      	bne.n	800e4ee <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e4e0:	4b14      	ldr	r3, [pc, #80]	@ (800e534 <xTaskGetHandle+0xbc>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff ff58 	bl	800e39c <prvSearchForNameWithinSingleList>
 800e4ec:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d106      	bne.n	800e502 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e4f4:	4b10      	ldr	r3, [pc, #64]	@ (800e538 <xTaskGetHandle+0xc0>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6879      	ldr	r1, [r7, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ff4e 	bl	800e39c <prvSearchForNameWithinSingleList>
 800e500:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	480c      	ldr	r0, [pc, #48]	@ (800e53c <xTaskGetHandle+0xc4>)
 800e50c:	f7ff ff46 	bl	800e39c <prvSearchForNameWithinSingleList>
 800e510:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d104      	bne.n	800e522 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e518:	6879      	ldr	r1, [r7, #4]
 800e51a:	4809      	ldr	r0, [pc, #36]	@ (800e540 <xTaskGetHandle+0xc8>)
 800e51c:	f7ff ff3e 	bl	800e39c <prvSearchForNameWithinSingleList>
 800e520:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e522:	f7ff fe8d 	bl	800e240 <xTaskResumeAll>

		return pxTCB;
 800e526:	693b      	ldr	r3, [r7, #16]
	}
 800e528:	4618      	mov	r0, r3
 800e52a:	3718      	adds	r7, #24
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	2000101c 	.word	0x2000101c
 800e534:	200014a4 	.word	0x200014a4
 800e538:	200014a8 	.word	0x200014a8
 800e53c:	200014d8 	.word	0x200014d8
 800e540:	200014c0 	.word	0x200014c0

0800e544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e54a:	2300      	movs	r3, #0
 800e54c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54e:	4b4f      	ldr	r3, [pc, #316]	@ (800e68c <xTaskIncrementTick+0x148>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	f040 8090 	bne.w	800e678 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e558:	4b4d      	ldr	r3, [pc, #308]	@ (800e690 <xTaskIncrementTick+0x14c>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3301      	adds	r3, #1
 800e55e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e560:	4a4b      	ldr	r2, [pc, #300]	@ (800e690 <xTaskIncrementTick+0x14c>)
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d121      	bne.n	800e5b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e56c:	4b49      	ldr	r3, [pc, #292]	@ (800e694 <xTaskIncrementTick+0x150>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00b      	beq.n	800e58e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	603b      	str	r3, [r7, #0]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <xTaskIncrementTick+0x46>
 800e58e:	4b41      	ldr	r3, [pc, #260]	@ (800e694 <xTaskIncrementTick+0x150>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	4b40      	ldr	r3, [pc, #256]	@ (800e698 <xTaskIncrementTick+0x154>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a3e      	ldr	r2, [pc, #248]	@ (800e694 <xTaskIncrementTick+0x150>)
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	4a3e      	ldr	r2, [pc, #248]	@ (800e698 <xTaskIncrementTick+0x154>)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	4b3e      	ldr	r3, [pc, #248]	@ (800e69c <xTaskIncrementTick+0x158>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	4a3c      	ldr	r2, [pc, #240]	@ (800e69c <xTaskIncrementTick+0x158>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	f000 fc22 	bl	800edf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800e6a0 <xTaskIncrementTick+0x15c>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d349      	bcc.n	800e64e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ba:	4b36      	ldr	r3, [pc, #216]	@ (800e694 <xTaskIncrementTick+0x150>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d104      	bne.n	800e5ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c4:	4b36      	ldr	r3, [pc, #216]	@ (800e6a0 <xTaskIncrementTick+0x15c>)
 800e5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ca:	601a      	str	r2, [r3, #0]
					break;
 800e5cc:	e03f      	b.n	800e64e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ce:	4b31      	ldr	r3, [pc, #196]	@ (800e694 <xTaskIncrementTick+0x150>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5de:	693a      	ldr	r2, [r7, #16]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d203      	bcs.n	800e5ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5e6:	4a2e      	ldr	r2, [pc, #184]	@ (800e6a0 <xTaskIncrementTick+0x15c>)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5ec:	e02f      	b.n	800e64e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe f9f4 	bl	800c9e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	3318      	adds	r3, #24
 800e604:	4618      	mov	r0, r3
 800e606:	f7fe f9eb 	bl	800c9e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60e:	4b25      	ldr	r3, [pc, #148]	@ (800e6a4 <xTaskIncrementTick+0x160>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d903      	bls.n	800e61e <xTaskIncrementTick+0xda>
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61a:	4a22      	ldr	r2, [pc, #136]	@ (800e6a4 <xTaskIncrementTick+0x160>)
 800e61c:	6013      	str	r3, [r2, #0]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e622:	4613      	mov	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4413      	add	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4a1f      	ldr	r2, [pc, #124]	@ (800e6a8 <xTaskIncrementTick+0x164>)
 800e62c:	441a      	add	r2, r3
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3304      	adds	r3, #4
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe f976 	bl	800c926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e63e:	4b1b      	ldr	r3, [pc, #108]	@ (800e6ac <xTaskIncrementTick+0x168>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e644:	429a      	cmp	r2, r3
 800e646:	d3b8      	bcc.n	800e5ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e64c:	e7b5      	b.n	800e5ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e64e:	4b17      	ldr	r3, [pc, #92]	@ (800e6ac <xTaskIncrementTick+0x168>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e654:	4914      	ldr	r1, [pc, #80]	@ (800e6a8 <xTaskIncrementTick+0x164>)
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	440b      	add	r3, r1
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d901      	bls.n	800e66a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e666:	2301      	movs	r3, #1
 800e668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e66a:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <xTaskIncrementTick+0x16c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d007      	beq.n	800e682 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e672:	2301      	movs	r3, #1
 800e674:	617b      	str	r3, [r7, #20]
 800e676:	e004      	b.n	800e682 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e678:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b4 <xTaskIncrementTick+0x170>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	4a0d      	ldr	r2, [pc, #52]	@ (800e6b4 <xTaskIncrementTick+0x170>)
 800e680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e682:	697b      	ldr	r3, [r7, #20]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20001514 	.word	0x20001514
 800e690:	200014f0 	.word	0x200014f0
 800e694:	200014a4 	.word	0x200014a4
 800e698:	200014a8 	.word	0x200014a8
 800e69c:	20001504 	.word	0x20001504
 800e6a0:	2000150c 	.word	0x2000150c
 800e6a4:	200014f4 	.word	0x200014f4
 800e6a8:	2000101c 	.word	0x2000101c
 800e6ac:	20001018 	.word	0x20001018
 800e6b0:	20001500 	.word	0x20001500
 800e6b4:	200014fc 	.word	0x200014fc

0800e6b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6be:	4b2b      	ldr	r3, [pc, #172]	@ (800e76c <vTaskSwitchContext+0xb4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d003      	beq.n	800e6ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6c6:	4b2a      	ldr	r3, [pc, #168]	@ (800e770 <vTaskSwitchContext+0xb8>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6cc:	e047      	b.n	800e75e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e6ce:	4b28      	ldr	r3, [pc, #160]	@ (800e770 <vTaskSwitchContext+0xb8>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d4:	4b27      	ldr	r3, [pc, #156]	@ (800e774 <vTaskSwitchContext+0xbc>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e011      	b.n	800e700 <vTaskSwitchContext+0x48>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10b      	bne.n	800e6fa <vTaskSwitchContext+0x42>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	607b      	str	r3, [r7, #4]
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
 800e6f8:	e7fd      	b.n	800e6f6 <vTaskSwitchContext+0x3e>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	491d      	ldr	r1, [pc, #116]	@ (800e778 <vTaskSwitchContext+0xc0>)
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	4613      	mov	r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	440b      	add	r3, r1
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0e3      	beq.n	800e6dc <vTaskSwitchContext+0x24>
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4a16      	ldr	r2, [pc, #88]	@ (800e778 <vTaskSwitchContext+0xc0>)
 800e720:	4413      	add	r3, r2
 800e722:	60bb      	str	r3, [r7, #8]
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	605a      	str	r2, [r3, #4]
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	3308      	adds	r3, #8
 800e736:	429a      	cmp	r2, r3
 800e738:	d104      	bne.n	800e744 <vTaskSwitchContext+0x8c>
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	605a      	str	r2, [r3, #4]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	4a0c      	ldr	r2, [pc, #48]	@ (800e77c <vTaskSwitchContext+0xc4>)
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	4a09      	ldr	r2, [pc, #36]	@ (800e774 <vTaskSwitchContext+0xbc>)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e754:	4b09      	ldr	r3, [pc, #36]	@ (800e77c <vTaskSwitchContext+0xc4>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3354      	adds	r3, #84	@ 0x54
 800e75a:	4a09      	ldr	r2, [pc, #36]	@ (800e780 <vTaskSwitchContext+0xc8>)
 800e75c:	6013      	str	r3, [r2, #0]
}
 800e75e:	bf00      	nop
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	20001514 	.word	0x20001514
 800e770:	20001500 	.word	0x20001500
 800e774:	200014f4 	.word	0x200014f4
 800e778:	2000101c 	.word	0x2000101c
 800e77c:	20001018 	.word	0x20001018
 800e780:	200003d4 	.word	0x200003d4

0800e784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d10b      	bne.n	800e7ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	60fb      	str	r3, [r7, #12]
}
 800e7a6:	bf00      	nop
 800e7a8:	bf00      	nop
 800e7aa:	e7fd      	b.n	800e7a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7ac:	4b07      	ldr	r3, [pc, #28]	@ (800e7cc <vTaskPlaceOnEventList+0x48>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	3318      	adds	r3, #24
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7fe f8da 	bl	800c96e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7ba:	2101      	movs	r1, #1
 800e7bc:	6838      	ldr	r0, [r7, #0]
 800e7be:	f000 fe4d 	bl	800f45c <prvAddCurrentTaskToDelayedList>
}
 800e7c2:	bf00      	nop
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20001018 	.word	0x20001018

0800e7d0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10b      	bne.n	800e7fa <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	617b      	str	r3, [r7, #20]
}
 800e7f4:	bf00      	nop
 800e7f6:	bf00      	nop
 800e7f8:	e7fd      	b.n	800e7f6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e7fa:	4b12      	ldr	r3, [pc, #72]	@ (800e844 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10b      	bne.n	800e81a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	613b      	str	r3, [r7, #16]
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop
 800e818:	e7fd      	b.n	800e816 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e81a:	4b0b      	ldr	r3, [pc, #44]	@ (800e848 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e824:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e826:	4b08      	ldr	r3, [pc, #32]	@ (800e848 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3318      	adds	r3, #24
 800e82c:	4619      	mov	r1, r3
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7fe f879 	bl	800c926 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e834:	2101      	movs	r1, #1
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fe10 	bl	800f45c <prvAddCurrentTaskToDelayedList>
}
 800e83c:	bf00      	nop
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	20001514 	.word	0x20001514
 800e848:	20001018 	.word	0x20001018

0800e84c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10b      	bne.n	800e876 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	617b      	str	r3, [r7, #20]
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	e7fd      	b.n	800e872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e876:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3318      	adds	r3, #24
 800e87c:	4619      	mov	r1, r3
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7fe f851 	bl	800c926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e88a:	f04f 33ff 	mov.w	r3, #4294967295
 800e88e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	68b8      	ldr	r0, [r7, #8]
 800e894:	f000 fde2 	bl	800f45c <prvAddCurrentTaskToDelayedList>
	}
 800e898:	bf00      	nop
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	20001018 	.word	0x20001018

0800e8a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10b      	bne.n	800e8d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	60fb      	str	r3, [r7, #12]
}
 800e8cc:	bf00      	nop
 800e8ce:	bf00      	nop
 800e8d0:	e7fd      	b.n	800e8ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	3318      	adds	r3, #24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe f882 	bl	800c9e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e954 <xTaskRemoveFromEventList+0xb0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d11d      	bne.n	800e920 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe f879 	bl	800c9e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f2:	4b19      	ldr	r3, [pc, #100]	@ (800e958 <xTaskRemoveFromEventList+0xb4>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d903      	bls.n	800e902 <xTaskRemoveFromEventList+0x5e>
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fe:	4a16      	ldr	r2, [pc, #88]	@ (800e958 <xTaskRemoveFromEventList+0xb4>)
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e906:	4613      	mov	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4a13      	ldr	r2, [pc, #76]	@ (800e95c <xTaskRemoveFromEventList+0xb8>)
 800e910:	441a      	add	r2, r3
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	3304      	adds	r3, #4
 800e916:	4619      	mov	r1, r3
 800e918:	4610      	mov	r0, r2
 800e91a:	f7fe f804 	bl	800c926 <vListInsertEnd>
 800e91e:	e005      	b.n	800e92c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	3318      	adds	r3, #24
 800e924:	4619      	mov	r1, r3
 800e926:	480e      	ldr	r0, [pc, #56]	@ (800e960 <xTaskRemoveFromEventList+0xbc>)
 800e928:	f7fd fffd 	bl	800c926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e930:	4b0c      	ldr	r3, [pc, #48]	@ (800e964 <xTaskRemoveFromEventList+0xc0>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e936:	429a      	cmp	r2, r3
 800e938:	d905      	bls.n	800e946 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e93a:	2301      	movs	r3, #1
 800e93c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e93e:	4b0a      	ldr	r3, [pc, #40]	@ (800e968 <xTaskRemoveFromEventList+0xc4>)
 800e940:	2201      	movs	r2, #1
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	e001      	b.n	800e94a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e946:	2300      	movs	r3, #0
 800e948:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e94a:	697b      	ldr	r3, [r7, #20]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20001514 	.word	0x20001514
 800e958:	200014f4 	.word	0x200014f4
 800e95c:	2000101c 	.word	0x2000101c
 800e960:	200014ac 	.word	0x200014ac
 800e964:	20001018 	.word	0x20001018
 800e968:	20001500 	.word	0x20001500

0800e96c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e976:	4b2a      	ldr	r3, [pc, #168]	@ (800ea20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10b      	bne.n	800e996 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	613b      	str	r3, [r7, #16]
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	e7fd      	b.n	800e992 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10b      	bne.n	800e9c4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	60fb      	str	r3, [r7, #12]
}
 800e9be:	bf00      	nop
 800e9c0:	bf00      	nop
 800e9c2:	e7fd      	b.n	800e9c0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7fe f80b 	bl	800c9e0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fe f806 	bl	800c9e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d8:	4b12      	ldr	r3, [pc, #72]	@ (800ea24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d903      	bls.n	800e9e8 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9e4:	4a0f      	ldr	r2, [pc, #60]	@ (800ea24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e9e6:	6013      	str	r3, [r2, #0]
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4a0c      	ldr	r2, [pc, #48]	@ (800ea28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e9f6:	441a      	add	r2, r3
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	3304      	adds	r3, #4
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	4610      	mov	r0, r2
 800ea00:	f7fd ff91 	bl	800c926 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea08:	4b08      	ldr	r3, [pc, #32]	@ (800ea2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d902      	bls.n	800ea18 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ea12:	4b07      	ldr	r3, [pc, #28]	@ (800ea30 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800ea14:	2201      	movs	r2, #1
 800ea16:	601a      	str	r2, [r3, #0]
	}
}
 800ea18:	bf00      	nop
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	20001514 	.word	0x20001514
 800ea24:	200014f4 	.word	0x200014f4
 800ea28:	2000101c 	.word	0x2000101c
 800ea2c:	20001018 	.word	0x20001018
 800ea30:	20001500 	.word	0x20001500

0800ea34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea3c:	4b06      	ldr	r3, [pc, #24]	@ (800ea58 <vTaskInternalSetTimeOutState+0x24>)
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea44:	4b05      	ldr	r3, [pc, #20]	@ (800ea5c <vTaskInternalSetTimeOutState+0x28>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	605a      	str	r2, [r3, #4]
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20001504 	.word	0x20001504
 800ea5c:	200014f0 	.word	0x200014f0

0800ea60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b088      	sub	sp, #32
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10b      	bne.n	800ea88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	613b      	str	r3, [r7, #16]
}
 800ea82:	bf00      	nop
 800ea84:	bf00      	nop
 800ea86:	e7fd      	b.n	800ea84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10b      	bne.n	800eaa6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60fb      	str	r3, [r7, #12]
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	e7fd      	b.n	800eaa2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eaa6:	f001 fa37 	bl	800ff18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eaaa:	4b1d      	ldr	r3, [pc, #116]	@ (800eb20 <xTaskCheckForTimeOut+0xc0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	69ba      	ldr	r2, [r7, #24]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	d102      	bne.n	800eaca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eac4:	2300      	movs	r3, #0
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	e023      	b.n	800eb12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	4b15      	ldr	r3, [pc, #84]	@ (800eb24 <xTaskCheckForTimeOut+0xc4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d007      	beq.n	800eae6 <xTaskCheckForTimeOut+0x86>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	69ba      	ldr	r2, [r7, #24]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d302      	bcc.n	800eae6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eae0:	2301      	movs	r3, #1
 800eae2:	61fb      	str	r3, [r7, #28]
 800eae4:	e015      	b.n	800eb12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d20b      	bcs.n	800eb08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	1ad2      	subs	r2, r2, r3
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff ff99 	bl	800ea34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb02:	2300      	movs	r3, #0
 800eb04:	61fb      	str	r3, [r7, #28]
 800eb06:	e004      	b.n	800eb12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb12:	f001 fa33 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800eb16:	69fb      	ldr	r3, [r7, #28]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3720      	adds	r7, #32
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	200014f0 	.word	0x200014f0
 800eb24:	20001504 	.word	0x20001504

0800eb28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb2c:	4b03      	ldr	r3, [pc, #12]	@ (800eb3c <vTaskMissedYield+0x14>)
 800eb2e:	2201      	movs	r2, #1
 800eb30:	601a      	str	r2, [r3, #0]
}
 800eb32:	bf00      	nop
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr
 800eb3c:	20001500 	.word	0x20001500

0800eb40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb48:	f000 f852 	bl	800ebf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb4c:	4b06      	ldr	r3, [pc, #24]	@ (800eb68 <prvIdleTask+0x28>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d9f9      	bls.n	800eb48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb54:	4b05      	ldr	r3, [pc, #20]	@ (800eb6c <prvIdleTask+0x2c>)
 800eb56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb64:	e7f0      	b.n	800eb48 <prvIdleTask+0x8>
 800eb66:	bf00      	nop
 800eb68:	2000101c 	.word	0x2000101c
 800eb6c:	e000ed04 	.word	0xe000ed04

0800eb70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb76:	2300      	movs	r3, #0
 800eb78:	607b      	str	r3, [r7, #4]
 800eb7a:	e00c      	b.n	800eb96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4a12      	ldr	r2, [pc, #72]	@ (800ebd0 <prvInitialiseTaskLists+0x60>)
 800eb88:	4413      	add	r3, r2
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fd fe9e 	bl	800c8cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3301      	adds	r3, #1
 800eb94:	607b      	str	r3, [r7, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b37      	cmp	r3, #55	@ 0x37
 800eb9a:	d9ef      	bls.n	800eb7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb9c:	480d      	ldr	r0, [pc, #52]	@ (800ebd4 <prvInitialiseTaskLists+0x64>)
 800eb9e:	f7fd fe95 	bl	800c8cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eba2:	480d      	ldr	r0, [pc, #52]	@ (800ebd8 <prvInitialiseTaskLists+0x68>)
 800eba4:	f7fd fe92 	bl	800c8cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eba8:	480c      	ldr	r0, [pc, #48]	@ (800ebdc <prvInitialiseTaskLists+0x6c>)
 800ebaa:	f7fd fe8f 	bl	800c8cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebae:	480c      	ldr	r0, [pc, #48]	@ (800ebe0 <prvInitialiseTaskLists+0x70>)
 800ebb0:	f7fd fe8c 	bl	800c8cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebb4:	480b      	ldr	r0, [pc, #44]	@ (800ebe4 <prvInitialiseTaskLists+0x74>)
 800ebb6:	f7fd fe89 	bl	800c8cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebba:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe8 <prvInitialiseTaskLists+0x78>)
 800ebbc:	4a05      	ldr	r2, [pc, #20]	@ (800ebd4 <prvInitialiseTaskLists+0x64>)
 800ebbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ebec <prvInitialiseTaskLists+0x7c>)
 800ebc2:	4a05      	ldr	r2, [pc, #20]	@ (800ebd8 <prvInitialiseTaskLists+0x68>)
 800ebc4:	601a      	str	r2, [r3, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	2000101c 	.word	0x2000101c
 800ebd4:	2000147c 	.word	0x2000147c
 800ebd8:	20001490 	.word	0x20001490
 800ebdc:	200014ac 	.word	0x200014ac
 800ebe0:	200014c0 	.word	0x200014c0
 800ebe4:	200014d8 	.word	0x200014d8
 800ebe8:	200014a4 	.word	0x200014a4
 800ebec:	200014a8 	.word	0x200014a8

0800ebf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebf6:	e019      	b.n	800ec2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebf8:	f001 f98e 	bl	800ff18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfc:	4b10      	ldr	r3, [pc, #64]	@ (800ec40 <prvCheckTasksWaitingTermination+0x50>)
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3304      	adds	r3, #4
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fd fee9 	bl	800c9e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <prvCheckTasksWaitingTermination+0x54>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3b01      	subs	r3, #1
 800ec14:	4a0b      	ldr	r2, [pc, #44]	@ (800ec44 <prvCheckTasksWaitingTermination+0x54>)
 800ec16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec18:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec22:	f001 f9ab 	bl	800ff7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f8ae 	bl	800ed88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec2c:	4b06      	ldr	r3, [pc, #24]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1e1      	bne.n	800ebf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	200014c0 	.word	0x200014c0
 800ec44:	200014ec 	.word	0x200014ec
 800ec48:	200014d4 	.word	0x200014d4

0800ec4c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <vTaskGetInfo+0x1a>
 800ec60:	4b2c      	ldr	r3, [pc, #176]	@ (800ed14 <vTaskGetInfo+0xc8>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	e000      	b.n	800ec68 <vTaskGetInfo+0x1c>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	697a      	ldr	r2, [r7, #20]
 800ec6e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d01a      	beq.n	800ecdc <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800eca6:	4b1b      	ldr	r3, [pc, #108]	@ (800ed14 <vTaskGetInfo+0xc8>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d103      	bne.n	800ecb8 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	731a      	strb	r2, [r3, #12]
 800ecb6:	e018      	b.n	800ecea <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	78fa      	ldrb	r2, [r7, #3]
 800ecbc:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800ecbe:	78fb      	ldrb	r3, [r7, #3]
 800ecc0:	2b03      	cmp	r3, #3
 800ecc2:	d112      	bne.n	800ecea <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800ecc4:	f7ff faae 	bl	800e224 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d002      	beq.n	800ecd6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2202      	movs	r2, #2
 800ecd4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800ecd6:	f7ff fab3 	bl	800e240 <xTaskResumeAll>
 800ecda:	e006      	b.n	800ecea <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800ecdc:	6978      	ldr	r0, [r7, #20]
 800ecde:	f7ff f823 	bl	800dd28 <eTaskGetState>
 800ece2:	4603      	mov	r3, r0
 800ece4:	461a      	mov	r2, r3
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d009      	beq.n	800ed04 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 f80f 	bl	800ed18 <prvTaskCheckFreeStackSpace>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ed02:	e002      	b.n	800ed0a <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	2200      	movs	r2, #0
 800ed08:	841a      	strh	r2, [r3, #32]
	}
 800ed0a:	bf00      	nop
 800ed0c:	3718      	adds	r7, #24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20001018 	.word	0x20001018

0800ed18 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ed20:	2300      	movs	r3, #0
 800ed22:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed24:	e005      	b.n	800ed32 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	2ba5      	cmp	r3, #165	@ 0xa5
 800ed38:	d0f5      	beq.n	800ed26 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	089b      	lsrs	r3, r3, #2
 800ed3e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	b29b      	uxth	r3, r3
	}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d102      	bne.n	800ed64 <uxTaskGetStackHighWaterMark+0x14>
 800ed5e:	4b09      	ldr	r3, [pc, #36]	@ (800ed84 <uxTaskGetStackHighWaterMark+0x34>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	e000      	b.n	800ed66 <uxTaskGetStackHighWaterMark+0x16>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed6c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ed6e:	6938      	ldr	r0, [r7, #16]
 800ed70:	f7ff ffd2 	bl	800ed18 <prvTaskCheckFreeStackSpace>
 800ed74:	4603      	mov	r3, r0
 800ed76:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ed78:	68fb      	ldr	r3, [r7, #12]
	}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	20001018 	.word	0x20001018

0800ed88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	3354      	adds	r3, #84	@ 0x54
 800ed94:	4618      	mov	r0, r3
 800ed96:	f003 fca9 	bl	80126ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d108      	bne.n	800edb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eda8:	4618      	mov	r0, r3
 800edaa:	f001 faa5 	bl	80102f8 <vPortFree>
				vPortFree( pxTCB );
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f001 faa2 	bl	80102f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edb4:	e019      	b.n	800edea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d103      	bne.n	800edc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f001 fa99 	bl	80102f8 <vPortFree>
	}
 800edc6:	e010      	b.n	800edea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edce:	2b02      	cmp	r3, #2
 800edd0:	d00b      	beq.n	800edea <prvDeleteTCB+0x62>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	60fb      	str	r3, [r7, #12]
}
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
 800ede8:	e7fd      	b.n	800ede6 <prvDeleteTCB+0x5e>
	}
 800edea:	bf00      	nop
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ee2c <prvResetNextTaskUnblockTime+0x38>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d104      	bne.n	800ee0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee04:	4b0a      	ldr	r3, [pc, #40]	@ (800ee30 <prvResetNextTaskUnblockTime+0x3c>)
 800ee06:	f04f 32ff 	mov.w	r2, #4294967295
 800ee0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee0c:	e008      	b.n	800ee20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee0e:	4b07      	ldr	r3, [pc, #28]	@ (800ee2c <prvResetNextTaskUnblockTime+0x38>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	4a04      	ldr	r2, [pc, #16]	@ (800ee30 <prvResetNextTaskUnblockTime+0x3c>)
 800ee1e:	6013      	str	r3, [r2, #0]
}
 800ee20:	bf00      	nop
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	200014a4 	.word	0x200014a4
 800ee30:	2000150c 	.word	0x2000150c

0800ee34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee68 <xTaskGetSchedulerState+0x34>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d102      	bne.n	800ee48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee42:	2301      	movs	r3, #1
 800ee44:	607b      	str	r3, [r7, #4]
 800ee46:	e008      	b.n	800ee5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee48:	4b08      	ldr	r3, [pc, #32]	@ (800ee6c <xTaskGetSchedulerState+0x38>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee50:	2302      	movs	r3, #2
 800ee52:	607b      	str	r3, [r7, #4]
 800ee54:	e001      	b.n	800ee5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee56:	2300      	movs	r3, #0
 800ee58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee5a:	687b      	ldr	r3, [r7, #4]
	}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	200014f8 	.word	0x200014f8
 800ee6c:	20001514 	.word	0x20001514

0800ee70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d051      	beq.n	800ef2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ef34 <xTaskPriorityInherit+0xc4>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d241      	bcs.n	800ef18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	db06      	blt.n	800eeaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee9c:	4b25      	ldr	r3, [pc, #148]	@ (800ef34 <xTaskPriorityInherit+0xc4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	6959      	ldr	r1, [r3, #20]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4a1f      	ldr	r2, [pc, #124]	@ (800ef38 <xTaskPriorityInherit+0xc8>)
 800eebc:	4413      	add	r3, r2
 800eebe:	4299      	cmp	r1, r3
 800eec0:	d122      	bne.n	800ef08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	3304      	adds	r3, #4
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fd fd8a 	bl	800c9e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eecc:	4b19      	ldr	r3, [pc, #100]	@ (800ef34 <xTaskPriorityInherit+0xc4>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeda:	4b18      	ldr	r3, [pc, #96]	@ (800ef3c <xTaskPriorityInherit+0xcc>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d903      	bls.n	800eeea <xTaskPriorityInherit+0x7a>
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee6:	4a15      	ldr	r2, [pc, #84]	@ (800ef3c <xTaskPriorityInherit+0xcc>)
 800eee8:	6013      	str	r3, [r2, #0]
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeee:	4613      	mov	r3, r2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4a10      	ldr	r2, [pc, #64]	@ (800ef38 <xTaskPriorityInherit+0xc8>)
 800eef8:	441a      	add	r2, r3
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4619      	mov	r1, r3
 800ef00:	4610      	mov	r0, r2
 800ef02:	f7fd fd10 	bl	800c926 <vListInsertEnd>
 800ef06:	e004      	b.n	800ef12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef08:	4b0a      	ldr	r3, [pc, #40]	@ (800ef34 <xTaskPriorityInherit+0xc4>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef12:	2301      	movs	r3, #1
 800ef14:	60fb      	str	r3, [r7, #12]
 800ef16:	e008      	b.n	800ef2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef1c:	4b05      	ldr	r3, [pc, #20]	@ (800ef34 <xTaskPriorityInherit+0xc4>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d201      	bcs.n	800ef2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef26:	2301      	movs	r3, #1
 800ef28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
	}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	20001018 	.word	0x20001018
 800ef38:	2000101c 	.word	0x2000101c
 800ef3c:	200014f4 	.word	0x200014f4

0800ef40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d058      	beq.n	800f008 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef56:	4b2f      	ldr	r3, [pc, #188]	@ (800f014 <xTaskPriorityDisinherit+0xd4>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	693a      	ldr	r2, [r7, #16]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d00b      	beq.n	800ef78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	60fb      	str	r3, [r7, #12]
}
 800ef72:	bf00      	nop
 800ef74:	bf00      	nop
 800ef76:	e7fd      	b.n	800ef74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10b      	bne.n	800ef98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	60bb      	str	r3, [r7, #8]
}
 800ef92:	bf00      	nop
 800ef94:	bf00      	nop
 800ef96:	e7fd      	b.n	800ef94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef9c:	1e5a      	subs	r2, r3, #1
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efaa:	429a      	cmp	r2, r3
 800efac:	d02c      	beq.n	800f008 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d128      	bne.n	800f008 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	3304      	adds	r3, #4
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fd fd10 	bl	800c9e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd8:	4b0f      	ldr	r3, [pc, #60]	@ (800f018 <xTaskPriorityDisinherit+0xd8>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d903      	bls.n	800efe8 <xTaskPriorityDisinherit+0xa8>
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe4:	4a0c      	ldr	r2, [pc, #48]	@ (800f018 <xTaskPriorityDisinherit+0xd8>)
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efec:	4613      	mov	r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4413      	add	r3, r2
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	4a09      	ldr	r2, [pc, #36]	@ (800f01c <xTaskPriorityDisinherit+0xdc>)
 800eff6:	441a      	add	r2, r3
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	3304      	adds	r3, #4
 800effc:	4619      	mov	r1, r3
 800effe:	4610      	mov	r0, r2
 800f000:	f7fd fc91 	bl	800c926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f004:	2301      	movs	r3, #1
 800f006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f008:	697b      	ldr	r3, [r7, #20]
	}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3718      	adds	r7, #24
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20001018 	.word	0x20001018
 800f018:	200014f4 	.word	0x200014f4
 800f01c:	2000101c 	.word	0x2000101c

0800f020 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f02e:	2301      	movs	r3, #1
 800f030:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d06c      	beq.n	800f112 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10b      	bne.n	800f058 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	60fb      	str	r3, [r7, #12]
}
 800f052:	bf00      	nop
 800f054:	bf00      	nop
 800f056:	e7fd      	b.n	800f054 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d902      	bls.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	61fb      	str	r3, [r7, #28]
 800f066:	e002      	b.n	800f06e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f06c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	429a      	cmp	r2, r3
 800f076:	d04c      	beq.n	800f112 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d147      	bne.n	800f112 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f082:	4b26      	ldr	r3, [pc, #152]	@ (800f11c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	69ba      	ldr	r2, [r7, #24]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d10b      	bne.n	800f0a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	60bb      	str	r3, [r7, #8]
}
 800f09e:	bf00      	nop
 800f0a0:	bf00      	nop
 800f0a2:	e7fd      	b.n	800f0a0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	db04      	blt.n	800f0c2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	6959      	ldr	r1, [r3, #20]
 800f0c6:	693a      	ldr	r2, [r7, #16]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	4413      	add	r3, r2
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	4a13      	ldr	r2, [pc, #76]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f0d2:	4413      	add	r3, r2
 800f0d4:	4299      	cmp	r1, r3
 800f0d6:	d11c      	bne.n	800f112 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	3304      	adds	r3, #4
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7fd fc7f 	bl	800c9e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f124 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d903      	bls.n	800f0f6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f2:	4a0c      	ldr	r2, [pc, #48]	@ (800f124 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4413      	add	r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4a07      	ldr	r2, [pc, #28]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f104:	441a      	add	r2, r3
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	3304      	adds	r3, #4
 800f10a:	4619      	mov	r1, r3
 800f10c:	4610      	mov	r0, r2
 800f10e:	f7fd fc0a 	bl	800c926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f112:	bf00      	nop
 800f114:	3720      	adds	r7, #32
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	20001018 	.word	0x20001018
 800f120:	2000101c 	.word	0x2000101c
 800f124:	200014f4 	.word	0x200014f4

0800f128 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f12e:	4b09      	ldr	r3, [pc, #36]	@ (800f154 <uxTaskResetEventItemValue+0x2c>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	699b      	ldr	r3, [r3, #24]
 800f134:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f136:	4b07      	ldr	r3, [pc, #28]	@ (800f154 <uxTaskResetEventItemValue+0x2c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f13c:	4b05      	ldr	r3, [pc, #20]	@ (800f154 <uxTaskResetEventItemValue+0x2c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f144:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f146:	687b      	ldr	r3, [r7, #4]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	20001018 	.word	0x20001018

0800f158 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f158:	b480      	push	{r7}
 800f15a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f15c:	4b07      	ldr	r3, [pc, #28]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d004      	beq.n	800f16e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f164:	4b05      	ldr	r3, [pc, #20]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f16a:	3201      	adds	r2, #1
 800f16c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f16e:	4b03      	ldr	r3, [pc, #12]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f170:	681b      	ldr	r3, [r3, #0]
	}
 800f172:	4618      	mov	r0, r3
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	20001018 	.word	0x20001018

0800f180 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f18a:	f000 fec5 	bl	800ff18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f18e:	4b20      	ldr	r3, [pc, #128]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d113      	bne.n	800f1c2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f19a:	4b1d      	ldr	r3, [pc, #116]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00b      	beq.n	800f1c2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	6838      	ldr	r0, [r7, #0]
 800f1ae:	f000 f955 	bl	800f45c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f1b2:	4b18      	ldr	r3, [pc, #96]	@ (800f214 <ulTaskNotifyTake+0x94>)
 800f1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f1c2:	f000 fedb 	bl	800ff7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f1c6:	f000 fea7 	bl	800ff18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f1ca:	4b11      	ldr	r3, [pc, #68]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1d2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00e      	beq.n	800f1f8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d005      	beq.n	800f1ec <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f1ea:	e005      	b.n	800f1f8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f1ec:	4b08      	ldr	r3, [pc, #32]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	3a01      	subs	r2, #1
 800f1f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1f8:	4b05      	ldr	r3, [pc, #20]	@ (800f210 <ulTaskNotifyTake+0x90>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f202:	f000 febb 	bl	800ff7c <vPortExitCritical>

		return ulReturn;
 800f206:	68fb      	ldr	r3, [r7, #12]
	}
 800f208:	4618      	mov	r0, r3
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	20001018 	.word	0x20001018
 800f214:	e000ed04 	.word	0xe000ed04

0800f218 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f226:	f000 fe77 	bl	800ff18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f22a:	4b29      	ldr	r3, [pc, #164]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b02      	cmp	r3, #2
 800f236:	d01c      	beq.n	800f272 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f238:	4b25      	ldr	r3, [pc, #148]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	43d2      	mvns	r2, r2
 800f244:	400a      	ands	r2, r1
 800f246:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f24a:	4b21      	ldr	r3, [pc, #132]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00b      	beq.n	800f272 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f25a:	2101      	movs	r1, #1
 800f25c:	6838      	ldr	r0, [r7, #0]
 800f25e:	f000 f8fd 	bl	800f45c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f262:	4b1c      	ldr	r3, [pc, #112]	@ (800f2d4 <xTaskNotifyWait+0xbc>)
 800f264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f272:	f000 fe83 	bl	800ff7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f276:	f000 fe4f 	bl	800ff18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d005      	beq.n	800f28c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f280:	4b13      	ldr	r3, [pc, #76]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f28c:	4b10      	ldr	r3, [pc, #64]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b02      	cmp	r3, #2
 800f298:	d002      	beq.n	800f2a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f29a:	2300      	movs	r3, #0
 800f29c:	617b      	str	r3, [r7, #20]
 800f29e:	e00a      	b.n	800f2b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	43d2      	mvns	r2, r2
 800f2ac:	400a      	ands	r2, r1
 800f2ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f2b6:	4b06      	ldr	r3, [pc, #24]	@ (800f2d0 <xTaskNotifyWait+0xb8>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f2c0:	f000 fe5c 	bl	800ff7c <vPortExitCritical>

		return xReturn;
 800f2c4:	697b      	ldr	r3, [r7, #20]
	}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20001018 	.word	0x20001018
 800f2d4:	e000ed04 	.word	0xe000ed04

0800f2d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	@ 0x28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10b      	bne.n	800f30a <xTaskGenericNotify+0x32>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	61bb      	str	r3, [r7, #24]
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop
 800f308:	e7fd      	b.n	800f306 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f30e:	f000 fe03 	bl	800ff18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d004      	beq.n	800f322 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f328:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	2202      	movs	r2, #2
 800f32e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f332:	79fb      	ldrb	r3, [r7, #7]
 800f334:	2b04      	cmp	r3, #4
 800f336:	d82e      	bhi.n	800f396 <xTaskGenericNotify+0xbe>
 800f338:	a201      	add	r2, pc, #4	@ (adr r2, 800f340 <xTaskGenericNotify+0x68>)
 800f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33e:	bf00      	nop
 800f340:	0800f3bb 	.word	0x0800f3bb
 800f344:	0800f355 	.word	0x0800f355
 800f348:	0800f367 	.word	0x0800f367
 800f34c:	0800f377 	.word	0x0800f377
 800f350:	0800f381 	.word	0x0800f381
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f354:	6a3b      	ldr	r3, [r7, #32]
 800f356:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	431a      	orrs	r2, r3
 800f35e:	6a3b      	ldr	r3, [r7, #32]
 800f360:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f364:	e02c      	b.n	800f3c0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f36c:	1c5a      	adds	r2, r3, #1
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f374:	e024      	b.n	800f3c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f37e:	e01f      	b.n	800f3c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f380:	7ffb      	ldrb	r3, [r7, #31]
 800f382:	2b02      	cmp	r3, #2
 800f384:	d004      	beq.n	800f390 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	68ba      	ldr	r2, [r7, #8]
 800f38a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f38e:	e017      	b.n	800f3c0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f390:	2300      	movs	r3, #0
 800f392:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f394:	e014      	b.n	800f3c0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a0:	d00d      	beq.n	800f3be <xTaskGenericNotify+0xe6>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	617b      	str	r3, [r7, #20]
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop
 800f3b8:	e7fd      	b.n	800f3b6 <xTaskGenericNotify+0xde>
					break;
 800f3ba:	bf00      	nop
 800f3bc:	e000      	b.n	800f3c0 <xTaskGenericNotify+0xe8>

					break;
 800f3be:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f3c0:	7ffb      	ldrb	r3, [r7, #31]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d13b      	bne.n	800f43e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3c6:	6a3b      	ldr	r3, [r7, #32]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fd fb08 	bl	800c9e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f44c <xTaskGenericNotify+0x174>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d903      	bls.n	800f3e4 <xTaskGenericNotify+0x10c>
 800f3dc:	6a3b      	ldr	r3, [r7, #32]
 800f3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e0:	4a1a      	ldr	r2, [pc, #104]	@ (800f44c <xTaskGenericNotify+0x174>)
 800f3e2:	6013      	str	r3, [r2, #0]
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4a17      	ldr	r2, [pc, #92]	@ (800f450 <xTaskGenericNotify+0x178>)
 800f3f2:	441a      	add	r2, r3
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	f7fd fa93 	bl	800c926 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00b      	beq.n	800f420 <xTaskGenericNotify+0x148>
	__asm volatile
 800f408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40c:	f383 8811 	msr	BASEPRI, r3
 800f410:	f3bf 8f6f 	isb	sy
 800f414:	f3bf 8f4f 	dsb	sy
 800f418:	613b      	str	r3, [r7, #16]
}
 800f41a:	bf00      	nop
 800f41c:	bf00      	nop
 800f41e:	e7fd      	b.n	800f41c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f420:	6a3b      	ldr	r3, [r7, #32]
 800f422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f424:	4b0b      	ldr	r3, [pc, #44]	@ (800f454 <xTaskGenericNotify+0x17c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d907      	bls.n	800f43e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f42e:	4b0a      	ldr	r3, [pc, #40]	@ (800f458 <xTaskGenericNotify+0x180>)
 800f430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f43e:	f000 fd9d 	bl	800ff7c <vPortExitCritical>

		return xReturn;
 800f442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f444:	4618      	mov	r0, r3
 800f446:	3728      	adds	r7, #40	@ 0x28
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	200014f4 	.word	0x200014f4
 800f450:	2000101c 	.word	0x2000101c
 800f454:	20001018 	.word	0x20001018
 800f458:	e000ed04 	.word	0xe000ed04

0800f45c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f466:	4b21      	ldr	r3, [pc, #132]	@ (800f4ec <prvAddCurrentTaskToDelayedList+0x90>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f46c:	4b20      	ldr	r3, [pc, #128]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3304      	adds	r3, #4
 800f472:	4618      	mov	r0, r3
 800f474:	f7fd fab4 	bl	800c9e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47e:	d10a      	bne.n	800f496 <prvAddCurrentTaskToDelayedList+0x3a>
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d007      	beq.n	800f496 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f486:	4b1a      	ldr	r3, [pc, #104]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	3304      	adds	r3, #4
 800f48c:	4619      	mov	r1, r3
 800f48e:	4819      	ldr	r0, [pc, #100]	@ (800f4f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f490:	f7fd fa49 	bl	800c926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f494:	e026      	b.n	800f4e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4413      	add	r3, r2
 800f49c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f49e:	4b14      	ldr	r3, [pc, #80]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d209      	bcs.n	800f4c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4ae:	4b12      	ldr	r3, [pc, #72]	@ (800f4f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	f7fd fa57 	bl	800c96e <vListInsert>
}
 800f4c0:	e010      	b.n	800f4e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f4fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f4f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f7fd fa4d 	bl	800c96e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f4d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f500 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d202      	bcs.n	800f4e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f4de:	4a08      	ldr	r2, [pc, #32]	@ (800f500 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	6013      	str	r3, [r2, #0]
}
 800f4e4:	bf00      	nop
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	200014f0 	.word	0x200014f0
 800f4f0:	20001018 	.word	0x20001018
 800f4f4:	200014d8 	.word	0x200014d8
 800f4f8:	200014a8 	.word	0x200014a8
 800f4fc:	200014a4 	.word	0x200014a4
 800f500:	2000150c 	.word	0x2000150c

0800f504 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	@ 0x28
 800f508:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f50e:	f000 fb71 	bl	800fbf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f512:	4b1d      	ldr	r3, [pc, #116]	@ (800f588 <xTimerCreateTimerTask+0x84>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d021      	beq.n	800f55e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f51a:	2300      	movs	r3, #0
 800f51c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f522:	1d3a      	adds	r2, r7, #4
 800f524:	f107 0108 	add.w	r1, r7, #8
 800f528:	f107 030c 	add.w	r3, r7, #12
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fc fff7 	bl	800c520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	9202      	str	r2, [sp, #8]
 800f53a:	9301      	str	r3, [sp, #4]
 800f53c:	2302      	movs	r3, #2
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	2300      	movs	r3, #0
 800f542:	460a      	mov	r2, r1
 800f544:	4911      	ldr	r1, [pc, #68]	@ (800f58c <xTimerCreateTimerTask+0x88>)
 800f546:	4812      	ldr	r0, [pc, #72]	@ (800f590 <xTimerCreateTimerTask+0x8c>)
 800f548:	f7fe f986 	bl	800d858 <xTaskCreateStatic>
 800f54c:	4603      	mov	r3, r0
 800f54e:	4a11      	ldr	r2, [pc, #68]	@ (800f594 <xTimerCreateTimerTask+0x90>)
 800f550:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f552:	4b10      	ldr	r3, [pc, #64]	@ (800f594 <xTimerCreateTimerTask+0x90>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f55a:	2301      	movs	r3, #1
 800f55c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10b      	bne.n	800f57c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	613b      	str	r3, [r7, #16]
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	e7fd      	b.n	800f578 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f57c:	697b      	ldr	r3, [r7, #20]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20001548 	.word	0x20001548
 800f58c:	08015a18 	.word	0x08015a18
 800f590:	0800f78d 	.word	0x0800f78d
 800f594:	2000154c 	.word	0x2000154c

0800f598 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f5a6:	202c      	movs	r0, #44	@ 0x2c
 800f5a8:	f000 fdd8 	bl	801015c <pvPortMalloc>
 800f5ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00d      	beq.n	800f5d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	68b9      	ldr	r1, [r7, #8]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 f805 	bl	800f5da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f5d0:	697b      	ldr	r3, [r7, #20]
	}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3718      	adds	r7, #24
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b086      	sub	sp, #24
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	60b9      	str	r1, [r7, #8]
 800f5e4:	607a      	str	r2, [r7, #4]
 800f5e6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10b      	bne.n	800f606 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	617b      	str	r3, [r7, #20]
}
 800f600:	bf00      	nop
 800f602:	bf00      	nop
 800f604:	e7fd      	b.n	800f602 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01e      	beq.n	800f64a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f60c:	f000 faf2 	bl	800fbf4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f624:	6a3a      	ldr	r2, [r7, #32]
 800f626:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	3304      	adds	r3, #4
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fd f96d 	bl	800c90c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d008      	beq.n	800f64a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f63e:	f043 0304 	orr.w	r3, r3, #4
 800f642:	b2da      	uxtb	r2, r3
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f64a:	bf00      	nop
 800f64c:	3718      	adds	r7, #24
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
	...

0800f654 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08a      	sub	sp, #40	@ 0x28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
 800f660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f662:	2300      	movs	r3, #0
 800f664:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10b      	bne.n	800f684 <xTimerGenericCommand+0x30>
	__asm volatile
 800f66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f670:	f383 8811 	msr	BASEPRI, r3
 800f674:	f3bf 8f6f 	isb	sy
 800f678:	f3bf 8f4f 	dsb	sy
 800f67c:	623b      	str	r3, [r7, #32]
}
 800f67e:	bf00      	nop
 800f680:	bf00      	nop
 800f682:	e7fd      	b.n	800f680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f684:	4b19      	ldr	r3, [pc, #100]	@ (800f6ec <xTimerGenericCommand+0x98>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d02a      	beq.n	800f6e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2b05      	cmp	r3, #5
 800f69c:	dc18      	bgt.n	800f6d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f69e:	f7ff fbc9 	bl	800ee34 <xTaskGetSchedulerState>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d109      	bne.n	800f6bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6a8:	4b10      	ldr	r3, [pc, #64]	@ (800f6ec <xTimerGenericCommand+0x98>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	f107 0110 	add.w	r1, r7, #16
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6b4:	f7fd fb36 	bl	800cd24 <xQueueGenericSend>
 800f6b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f6ba:	e012      	b.n	800f6e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f6ec <xTimerGenericCommand+0x98>)
 800f6be:	6818      	ldr	r0, [r3, #0]
 800f6c0:	f107 0110 	add.w	r1, r7, #16
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f7fd fb2c 	bl	800cd24 <xQueueGenericSend>
 800f6cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800f6ce:	e008      	b.n	800f6e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6d0:	4b06      	ldr	r3, [pc, #24]	@ (800f6ec <xTimerGenericCommand+0x98>)
 800f6d2:	6818      	ldr	r0, [r3, #0]
 800f6d4:	f107 0110 	add.w	r1, r7, #16
 800f6d8:	2300      	movs	r3, #0
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	f7fd fc24 	bl	800cf28 <xQueueGenericSendFromISR>
 800f6e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3728      	adds	r7, #40	@ 0x28
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20001548 	.word	0x20001548

0800f6f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b088      	sub	sp, #32
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6fa:	4b23      	ldr	r3, [pc, #140]	@ (800f788 <prvProcessExpiredTimer+0x98>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	3304      	adds	r3, #4
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fd f969 	bl	800c9e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f714:	f003 0304 	and.w	r3, r3, #4
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d023      	beq.n	800f764 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	699a      	ldr	r2, [r3, #24]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	18d1      	adds	r1, r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	6978      	ldr	r0, [r7, #20]
 800f72a:	f000 f8d5 	bl	800f8d8 <prvInsertTimerInActiveList>
 800f72e:	4603      	mov	r3, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	d020      	beq.n	800f776 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f734:	2300      	movs	r3, #0
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2300      	movs	r3, #0
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	2100      	movs	r1, #0
 800f73e:	6978      	ldr	r0, [r7, #20]
 800f740:	f7ff ff88 	bl	800f654 <xTimerGenericCommand>
 800f744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d114      	bne.n	800f776 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f750:	f383 8811 	msr	BASEPRI, r3
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	f3bf 8f4f 	dsb	sy
 800f75c:	60fb      	str	r3, [r7, #12]
}
 800f75e:	bf00      	nop
 800f760:	bf00      	nop
 800f762:	e7fd      	b.n	800f760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f76a:	f023 0301 	bic.w	r3, r3, #1
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	6a1b      	ldr	r3, [r3, #32]
 800f77a:	6978      	ldr	r0, [r7, #20]
 800f77c:	4798      	blx	r3
}
 800f77e:	bf00      	nop
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20001540 	.word	0x20001540

0800f78c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 f859 	bl	800f850 <prvGetNextExpireTime>
 800f79e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 f805 	bl	800f7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7aa:	f000 f8d7 	bl	800f95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7ae:	bf00      	nop
 800f7b0:	e7f0      	b.n	800f794 <prvTimerTask+0x8>
	...

0800f7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7be:	f7fe fd31 	bl	800e224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c2:	f107 0308 	add.w	r3, r7, #8
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f866 	bl	800f898 <prvSampleTimeNow>
 800f7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d130      	bne.n	800f836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10a      	bne.n	800f7f0 <prvProcessTimerOrBlockTask+0x3c>
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d806      	bhi.n	800f7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7e2:	f7fe fd2d 	bl	800e240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7e6:	68f9      	ldr	r1, [r7, #12]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff ff81 	bl	800f6f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7ee:	e024      	b.n	800f83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7f6:	4b13      	ldr	r3, [pc, #76]	@ (800f844 <prvProcessTimerOrBlockTask+0x90>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <prvProcessTimerOrBlockTask+0x50>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <prvProcessTimerOrBlockTask+0x52>
 800f804:	2300      	movs	r3, #0
 800f806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f808:	4b0f      	ldr	r3, [pc, #60]	@ (800f848 <prvProcessTimerOrBlockTask+0x94>)
 800f80a:	6818      	ldr	r0, [r3, #0]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	4619      	mov	r1, r3
 800f816:	f7fd ffeb 	bl	800d7f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f81a:	f7fe fd11 	bl	800e240 <xTaskResumeAll>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f824:	4b09      	ldr	r3, [pc, #36]	@ (800f84c <prvProcessTimerOrBlockTask+0x98>)
 800f826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	f3bf 8f6f 	isb	sy
}
 800f834:	e001      	b.n	800f83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f836:	f7fe fd03 	bl	800e240 <xTaskResumeAll>
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	20001544 	.word	0x20001544
 800f848:	20001548 	.word	0x20001548
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f858:	4b0e      	ldr	r3, [pc, #56]	@ (800f894 <prvGetNextExpireTime+0x44>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <prvGetNextExpireTime+0x16>
 800f862:	2201      	movs	r2, #1
 800f864:	e000      	b.n	800f868 <prvGetNextExpireTime+0x18>
 800f866:	2200      	movs	r2, #0
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d105      	bne.n	800f880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f874:	4b07      	ldr	r3, [pc, #28]	@ (800f894 <prvGetNextExpireTime+0x44>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	e001      	b.n	800f884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f884:	68fb      	ldr	r3, [r7, #12]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	20001540 	.word	0x20001540

0800f898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8a0:	f7fe fd6c 	bl	800e37c <xTaskGetTickCount>
 800f8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f8d4 <prvSampleTimeNow+0x3c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d205      	bcs.n	800f8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8b0:	f000 f93a 	bl	800fb28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e002      	b.n	800f8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8c2:	4a04      	ldr	r2, [pc, #16]	@ (800f8d4 <prvSampleTimeNow+0x3c>)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	20001550 	.word	0x20001550

0800f8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	68ba      	ldr	r2, [r7, #8]
 800f8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d812      	bhi.n	800f924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	1ad2      	subs	r2, r2, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d302      	bcc.n	800f912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
 800f910:	e01b      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f912:	4b10      	ldr	r3, [pc, #64]	@ (800f954 <prvInsertTimerInActiveList+0x7c>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3304      	adds	r3, #4
 800f91a:	4619      	mov	r1, r3
 800f91c:	4610      	mov	r0, r2
 800f91e:	f7fd f826 	bl	800c96e <vListInsert>
 800f922:	e012      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d206      	bcs.n	800f93a <prvInsertTimerInActiveList+0x62>
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	429a      	cmp	r2, r3
 800f932:	d302      	bcc.n	800f93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f934:	2301      	movs	r3, #1
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	e007      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f93a:	4b07      	ldr	r3, [pc, #28]	@ (800f958 <prvInsertTimerInActiveList+0x80>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	3304      	adds	r3, #4
 800f942:	4619      	mov	r1, r3
 800f944:	4610      	mov	r0, r2
 800f946:	f7fd f812 	bl	800c96e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f94a:	697b      	ldr	r3, [r7, #20]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	20001544 	.word	0x20001544
 800f958:	20001540 	.word	0x20001540

0800f95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b08e      	sub	sp, #56	@ 0x38
 800f960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f962:	e0ce      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	da19      	bge.n	800f99e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f96a:	1d3b      	adds	r3, r7, #4
 800f96c:	3304      	adds	r3, #4
 800f96e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10b      	bne.n	800f98e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	61fb      	str	r3, [r7, #28]
}
 800f988:	bf00      	nop
 800f98a:	bf00      	nop
 800f98c:	e7fd      	b.n	800f98a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f994:	6850      	ldr	r0, [r2, #4]
 800f996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f998:	6892      	ldr	r2, [r2, #8]
 800f99a:	4611      	mov	r1, r2
 800f99c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f2c0 80ae 	blt.w	800fb02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ac:	695b      	ldr	r3, [r3, #20]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d004      	beq.n	800f9bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fd f812 	bl	800c9e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9bc:	463b      	mov	r3, r7
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff ff6a 	bl	800f898 <prvSampleTimeNow>
 800f9c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b09      	cmp	r3, #9
 800f9ca:	f200 8097 	bhi.w	800fafc <prvProcessReceivedCommands+0x1a0>
 800f9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <prvProcessReceivedCommands+0x78>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800f9fd 	.word	0x0800f9fd
 800f9d8:	0800f9fd 	.word	0x0800f9fd
 800f9dc:	0800f9fd 	.word	0x0800f9fd
 800f9e0:	0800fa73 	.word	0x0800fa73
 800f9e4:	0800fa87 	.word	0x0800fa87
 800f9e8:	0800fad3 	.word	0x0800fad3
 800f9ec:	0800f9fd 	.word	0x0800f9fd
 800f9f0:	0800f9fd 	.word	0x0800f9fd
 800f9f4:	0800fa73 	.word	0x0800fa73
 800f9f8:	0800fa87 	.word	0x0800fa87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa02:	f043 0301 	orr.w	r3, r3, #1
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	18d1      	adds	r1, r2, r3
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa1c:	f7ff ff5c 	bl	800f8d8 <prvInsertTimerInActiveList>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d06c      	beq.n	800fb00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa28:	6a1b      	ldr	r3, [r3, #32]
 800fa2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa34:	f003 0304 	and.w	r3, r3, #4
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d061      	beq.n	800fb00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	441a      	add	r2, r3
 800fa44:	2300      	movs	r3, #0
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa4e:	f7ff fe01 	bl	800f654 <xTimerGenericCommand>
 800fa52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d152      	bne.n	800fb00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	61bb      	str	r3, [r7, #24]
}
 800fa6c:	bf00      	nop
 800fa6e:	bf00      	nop
 800fa70:	e7fd      	b.n	800fa6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa78:	f023 0301 	bic.w	r3, r3, #1
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fa84:	e03d      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10b      	bne.n	800fabe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	617b      	str	r3, [r7, #20]
}
 800fab8:	bf00      	nop
 800faba:	bf00      	nop
 800fabc:	e7fd      	b.n	800faba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac0:	699a      	ldr	r2, [r3, #24]
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	18d1      	adds	r1, r2, r3
 800fac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800facc:	f7ff ff04 	bl	800f8d8 <prvInsertTimerInActiveList>
					break;
 800fad0:	e017      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fad8:	f003 0302 	and.w	r3, r3, #2
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d103      	bne.n	800fae8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fae2:	f000 fc09 	bl	80102f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fae6:	e00c      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800faee:	f023 0301 	bic.w	r3, r3, #1
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fafa:	e002      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fafc:	bf00      	nop
 800fafe:	e000      	b.n	800fb02 <prvProcessReceivedCommands+0x1a6>
					break;
 800fb00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb02:	4b08      	ldr	r3, [pc, #32]	@ (800fb24 <prvProcessReceivedCommands+0x1c8>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	1d39      	adds	r1, r7, #4
 800fb08:	2200      	movs	r2, #0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fd faaa 	bl	800d064 <xQueueReceive>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f47f af26 	bne.w	800f964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb18:	bf00      	nop
 800fb1a:	bf00      	nop
 800fb1c:	3730      	adds	r7, #48	@ 0x30
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20001548 	.word	0x20001548

0800fb28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b088      	sub	sp, #32
 800fb2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb2e:	e049      	b.n	800fbc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb30:	4b2e      	ldr	r3, [pc, #184]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb3a:	4b2c      	ldr	r3, [pc, #176]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3304      	adds	r3, #4
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fc ff49 	bl	800c9e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6a1b      	ldr	r3, [r3, #32]
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb5c:	f003 0304 	and.w	r3, r3, #4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d02f      	beq.n	800fbc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	693a      	ldr	r2, [r7, #16]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d90e      	bls.n	800fb94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb82:	4b1a      	ldr	r3, [pc, #104]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3304      	adds	r3, #4
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	f7fc feee 	bl	800c96e <vListInsert>
 800fb92:	e017      	b.n	800fbc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb94:	2300      	movs	r3, #0
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	2300      	movs	r3, #0
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f7ff fd58 	bl	800f654 <xTimerGenericCommand>
 800fba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d10b      	bne.n	800fbc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb0:	f383 8811 	msr	BASEPRI, r3
 800fbb4:	f3bf 8f6f 	isb	sy
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	603b      	str	r3, [r7, #0]
}
 800fbbe:	bf00      	nop
 800fbc0:	bf00      	nop
 800fbc2:	e7fd      	b.n	800fbc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbc4:	4b09      	ldr	r3, [pc, #36]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1b0      	bne.n	800fb30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbce:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbd4:	4b06      	ldr	r3, [pc, #24]	@ (800fbf0 <prvSwitchTimerLists+0xc8>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a04      	ldr	r2, [pc, #16]	@ (800fbec <prvSwitchTimerLists+0xc4>)
 800fbda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbdc:	4a04      	ldr	r2, [pc, #16]	@ (800fbf0 <prvSwitchTimerLists+0xc8>)
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	6013      	str	r3, [r2, #0]
}
 800fbe2:	bf00      	nop
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	20001540 	.word	0x20001540
 800fbf0:	20001544 	.word	0x20001544

0800fbf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbfa:	f000 f98d 	bl	800ff18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbfe:	4b15      	ldr	r3, [pc, #84]	@ (800fc54 <prvCheckForValidListAndQueue+0x60>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d120      	bne.n	800fc48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc06:	4814      	ldr	r0, [pc, #80]	@ (800fc58 <prvCheckForValidListAndQueue+0x64>)
 800fc08:	f7fc fe60 	bl	800c8cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc0c:	4813      	ldr	r0, [pc, #76]	@ (800fc5c <prvCheckForValidListAndQueue+0x68>)
 800fc0e:	f7fc fe5d 	bl	800c8cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc12:	4b13      	ldr	r3, [pc, #76]	@ (800fc60 <prvCheckForValidListAndQueue+0x6c>)
 800fc14:	4a10      	ldr	r2, [pc, #64]	@ (800fc58 <prvCheckForValidListAndQueue+0x64>)
 800fc16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc18:	4b12      	ldr	r3, [pc, #72]	@ (800fc64 <prvCheckForValidListAndQueue+0x70>)
 800fc1a:	4a10      	ldr	r2, [pc, #64]	@ (800fc5c <prvCheckForValidListAndQueue+0x68>)
 800fc1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc1e:	2300      	movs	r3, #0
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	4b11      	ldr	r3, [pc, #68]	@ (800fc68 <prvCheckForValidListAndQueue+0x74>)
 800fc24:	4a11      	ldr	r2, [pc, #68]	@ (800fc6c <prvCheckForValidListAndQueue+0x78>)
 800fc26:	2110      	movs	r1, #16
 800fc28:	200a      	movs	r0, #10
 800fc2a:	f7fc ff6d 	bl	800cb08 <xQueueGenericCreateStatic>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	4a08      	ldr	r2, [pc, #32]	@ (800fc54 <prvCheckForValidListAndQueue+0x60>)
 800fc32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc34:	4b07      	ldr	r3, [pc, #28]	@ (800fc54 <prvCheckForValidListAndQueue+0x60>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d005      	beq.n	800fc48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc3c:	4b05      	ldr	r3, [pc, #20]	@ (800fc54 <prvCheckForValidListAndQueue+0x60>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	490b      	ldr	r1, [pc, #44]	@ (800fc70 <prvCheckForValidListAndQueue+0x7c>)
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fdaa 	bl	800d79c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc48:	f000 f998 	bl	800ff7c <vPortExitCritical>
}
 800fc4c:	bf00      	nop
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	20001548 	.word	0x20001548
 800fc58:	20001518 	.word	0x20001518
 800fc5c:	2000152c 	.word	0x2000152c
 800fc60:	20001540 	.word	0x20001540
 800fc64:	20001544 	.word	0x20001544
 800fc68:	200015f4 	.word	0x200015f4
 800fc6c:	20001554 	.word	0x20001554
 800fc70:	08015a20 	.word	0x08015a20

0800fc74 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b08a      	sub	sp, #40	@ 0x28
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
 800fc80:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fc82:	f06f 0301 	mvn.w	r3, #1
 800fc86:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc94:	4b06      	ldr	r3, [pc, #24]	@ (800fcb0 <xTimerPendFunctionCallFromISR+0x3c>)
 800fc96:	6818      	ldr	r0, [r3, #0]
 800fc98:	f107 0114 	add.w	r1, r7, #20
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	f7fd f942 	bl	800cf28 <xQueueGenericSendFromISR>
 800fca4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3728      	adds	r7, #40	@ 0x28
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20001548 	.word	0x20001548

0800fcb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3b04      	subs	r3, #4
 800fcc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3b04      	subs	r3, #4
 800fcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	f023 0201 	bic.w	r2, r3, #1
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	3b04      	subs	r3, #4
 800fce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fce4:	4a0c      	ldr	r2, [pc, #48]	@ (800fd18 <pxPortInitialiseStack+0x64>)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3b14      	subs	r3, #20
 800fcee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	3b04      	subs	r3, #4
 800fcfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f06f 0202 	mvn.w	r2, #2
 800fd02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	3b20      	subs	r3, #32
 800fd08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3714      	adds	r7, #20
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	0800fd1d 	.word	0x0800fd1d

0800fd1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd26:	4b13      	ldr	r3, [pc, #76]	@ (800fd74 <prvTaskExitError+0x58>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d00b      	beq.n	800fd48 <prvTaskExitError+0x2c>
	__asm volatile
 800fd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd34:	f383 8811 	msr	BASEPRI, r3
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	f3bf 8f4f 	dsb	sy
 800fd40:	60fb      	str	r3, [r7, #12]
}
 800fd42:	bf00      	nop
 800fd44:	bf00      	nop
 800fd46:	e7fd      	b.n	800fd44 <prvTaskExitError+0x28>
	__asm volatile
 800fd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd4c:	f383 8811 	msr	BASEPRI, r3
 800fd50:	f3bf 8f6f 	isb	sy
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	60bb      	str	r3, [r7, #8]
}
 800fd5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd5c:	bf00      	nop
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d0fc      	beq.n	800fd5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd64:	bf00      	nop
 800fd66:	bf00      	nop
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	20000258 	.word	0x20000258
	...

0800fd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd80:	4b07      	ldr	r3, [pc, #28]	@ (800fda0 <pxCurrentTCBConst2>)
 800fd82:	6819      	ldr	r1, [r3, #0]
 800fd84:	6808      	ldr	r0, [r1, #0]
 800fd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8a:	f380 8809 	msr	PSP, r0
 800fd8e:	f3bf 8f6f 	isb	sy
 800fd92:	f04f 0000 	mov.w	r0, #0
 800fd96:	f380 8811 	msr	BASEPRI, r0
 800fd9a:	4770      	bx	lr
 800fd9c:	f3af 8000 	nop.w

0800fda0 <pxCurrentTCBConst2>:
 800fda0:	20001018 	.word	0x20001018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop

0800fda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fda8:	4808      	ldr	r0, [pc, #32]	@ (800fdcc <prvPortStartFirstTask+0x24>)
 800fdaa:	6800      	ldr	r0, [r0, #0]
 800fdac:	6800      	ldr	r0, [r0, #0]
 800fdae:	f380 8808 	msr	MSP, r0
 800fdb2:	f04f 0000 	mov.w	r0, #0
 800fdb6:	f380 8814 	msr	CONTROL, r0
 800fdba:	b662      	cpsie	i
 800fdbc:	b661      	cpsie	f
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	df00      	svc	0
 800fdc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdca:	bf00      	nop
 800fdcc:	e000ed08 	.word	0xe000ed08

0800fdd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdd6:	4b47      	ldr	r3, [pc, #284]	@ (800fef4 <xPortStartScheduler+0x124>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a47      	ldr	r2, [pc, #284]	@ (800fef8 <xPortStartScheduler+0x128>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d10b      	bne.n	800fdf8 <xPortStartScheduler+0x28>
	__asm volatile
 800fde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	613b      	str	r3, [r7, #16]
}
 800fdf2:	bf00      	nop
 800fdf4:	bf00      	nop
 800fdf6:	e7fd      	b.n	800fdf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdf8:	4b3e      	ldr	r3, [pc, #248]	@ (800fef4 <xPortStartScheduler+0x124>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a3f      	ldr	r2, [pc, #252]	@ (800fefc <xPortStartScheduler+0x12c>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d10b      	bne.n	800fe1a <xPortStartScheduler+0x4a>
	__asm volatile
 800fe02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	60fb      	str	r3, [r7, #12]
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	e7fd      	b.n	800fe16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe1a:	4b39      	ldr	r3, [pc, #228]	@ (800ff00 <xPortStartScheduler+0x130>)
 800fe1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	22ff      	movs	r2, #255	@ 0xff
 800fe2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe34:	78fb      	ldrb	r3, [r7, #3]
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	4b31      	ldr	r3, [pc, #196]	@ (800ff04 <xPortStartScheduler+0x134>)
 800fe40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe42:	4b31      	ldr	r3, [pc, #196]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe44:	2207      	movs	r2, #7
 800fe46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe48:	e009      	b.n	800fe5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fe4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	4a2d      	ldr	r2, [pc, #180]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe54:	78fb      	ldrb	r3, [r7, #3]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe5e:	78fb      	ldrb	r3, [r7, #3]
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe66:	2b80      	cmp	r3, #128	@ 0x80
 800fe68:	d0ef      	beq.n	800fe4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe6a:	4b27      	ldr	r3, [pc, #156]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f1c3 0307 	rsb	r3, r3, #7
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	d00b      	beq.n	800fe8e <xPortStartScheduler+0xbe>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	60bb      	str	r3, [r7, #8]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe8e:	4b1e      	ldr	r3, [pc, #120]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	4a1c      	ldr	r2, [pc, #112]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe98:	4b1b      	ldr	r3, [pc, #108]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fea0:	4a19      	ldr	r2, [pc, #100]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800feac:	4b17      	ldr	r3, [pc, #92]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a16      	ldr	r2, [pc, #88]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800feb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800feb8:	4b14      	ldr	r3, [pc, #80]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a13      	ldr	r2, [pc, #76]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800febe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fec4:	f000 f8da 	bl	801007c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fec8:	4b11      	ldr	r3, [pc, #68]	@ (800ff10 <xPortStartScheduler+0x140>)
 800feca:	2200      	movs	r2, #0
 800fecc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fece:	f000 f8f9 	bl	80100c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fed2:	4b10      	ldr	r3, [pc, #64]	@ (800ff14 <xPortStartScheduler+0x144>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4a0f      	ldr	r2, [pc, #60]	@ (800ff14 <xPortStartScheduler+0x144>)
 800fed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fedc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fede:	f7ff ff63 	bl	800fda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fee2:	f7fe fbe9 	bl	800e6b8 <vTaskSwitchContext>
	prvTaskExitError();
 800fee6:	f7ff ff19 	bl	800fd1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	e000ed00 	.word	0xe000ed00
 800fef8:	410fc271 	.word	0x410fc271
 800fefc:	410fc270 	.word	0x410fc270
 800ff00:	e000e400 	.word	0xe000e400
 800ff04:	20001644 	.word	0x20001644
 800ff08:	20001648 	.word	0x20001648
 800ff0c:	e000ed20 	.word	0xe000ed20
 800ff10:	20000258 	.word	0x20000258
 800ff14:	e000ef34 	.word	0xe000ef34

0800ff18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff22:	f383 8811 	msr	BASEPRI, r3
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	607b      	str	r3, [r7, #4]
}
 800ff30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff32:	4b10      	ldr	r3, [pc, #64]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3301      	adds	r3, #1
 800ff38:	4a0e      	ldr	r2, [pc, #56]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d110      	bne.n	800ff66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff44:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <vPortEnterCritical+0x60>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00b      	beq.n	800ff66 <vPortEnterCritical+0x4e>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	603b      	str	r3, [r7, #0]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <vPortEnterCritical+0x4a>
	}
}
 800ff66:	bf00      	nop
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	20000258 	.word	0x20000258
 800ff78:	e000ed04 	.word	0xe000ed04

0800ff7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff82:	4b12      	ldr	r3, [pc, #72]	@ (800ffcc <vPortExitCritical+0x50>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10b      	bne.n	800ffa2 <vPortExitCritical+0x26>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	607b      	str	r3, [r7, #4]
}
 800ff9c:	bf00      	nop
 800ff9e:	bf00      	nop
 800ffa0:	e7fd      	b.n	800ff9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ffa2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	4a08      	ldr	r2, [pc, #32]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffac:	4b07      	ldr	r3, [pc, #28]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d105      	bne.n	800ffc0 <vPortExitCritical+0x44>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	f383 8811 	msr	BASEPRI, r3
}
 800ffbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	20000258 	.word	0x20000258

0800ffd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffd0:	f3ef 8009 	mrs	r0, PSP
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	4b15      	ldr	r3, [pc, #84]	@ (8010030 <pxCurrentTCBConst>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	f01e 0f10 	tst.w	lr, #16
 800ffe0:	bf08      	it	eq
 800ffe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffea:	6010      	str	r0, [r2, #0]
 800ffec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fff4:	f380 8811 	msr	BASEPRI, r0
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f7fe fb5a 	bl	800e6b8 <vTaskSwitchContext>
 8010004:	f04f 0000 	mov.w	r0, #0
 8010008:	f380 8811 	msr	BASEPRI, r0
 801000c:	bc09      	pop	{r0, r3}
 801000e:	6819      	ldr	r1, [r3, #0]
 8010010:	6808      	ldr	r0, [r1, #0]
 8010012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010016:	f01e 0f10 	tst.w	lr, #16
 801001a:	bf08      	it	eq
 801001c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010020:	f380 8809 	msr	PSP, r0
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	f3af 8000 	nop.w

08010030 <pxCurrentTCBConst>:
 8010030:	20001018 	.word	0x20001018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop

08010038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
	__asm volatile
 801003e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	607b      	str	r3, [r7, #4]
}
 8010050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010052:	f7fe fa77 	bl	800e544 <xTaskIncrementTick>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d003      	beq.n	8010064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801005c:	4b06      	ldr	r3, [pc, #24]	@ (8010078 <xPortSysTickHandler+0x40>)
 801005e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	2300      	movs	r3, #0
 8010066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	f383 8811 	msr	BASEPRI, r3
}
 801006e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	e000ed04 	.word	0xe000ed04

0801007c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801007c:	b480      	push	{r7}
 801007e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010080:	4b0b      	ldr	r3, [pc, #44]	@ (80100b0 <vPortSetupTimerInterrupt+0x34>)
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010086:	4b0b      	ldr	r3, [pc, #44]	@ (80100b4 <vPortSetupTimerInterrupt+0x38>)
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801008c:	4b0a      	ldr	r3, [pc, #40]	@ (80100b8 <vPortSetupTimerInterrupt+0x3c>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a0a      	ldr	r2, [pc, #40]	@ (80100bc <vPortSetupTimerInterrupt+0x40>)
 8010092:	fba2 2303 	umull	r2, r3, r2, r3
 8010096:	099b      	lsrs	r3, r3, #6
 8010098:	4a09      	ldr	r2, [pc, #36]	@ (80100c0 <vPortSetupTimerInterrupt+0x44>)
 801009a:	3b01      	subs	r3, #1
 801009c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801009e:	4b04      	ldr	r3, [pc, #16]	@ (80100b0 <vPortSetupTimerInterrupt+0x34>)
 80100a0:	2207      	movs	r2, #7
 80100a2:	601a      	str	r2, [r3, #0]
}
 80100a4:	bf00      	nop
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	e000e010 	.word	0xe000e010
 80100b4:	e000e018 	.word	0xe000e018
 80100b8:	2000022c 	.word	0x2000022c
 80100bc:	10624dd3 	.word	0x10624dd3
 80100c0:	e000e014 	.word	0xe000e014

080100c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80100d4 <vPortEnableVFP+0x10>
 80100c8:	6801      	ldr	r1, [r0, #0]
 80100ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80100ce:	6001      	str	r1, [r0, #0]
 80100d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100d2:	bf00      	nop
 80100d4:	e000ed88 	.word	0xe000ed88

080100d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100de:	f3ef 8305 	mrs	r3, IPSR
 80100e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2b0f      	cmp	r3, #15
 80100e8:	d915      	bls.n	8010116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100ea:	4a18      	ldr	r2, [pc, #96]	@ (801014c <vPortValidateInterruptPriority+0x74>)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4413      	add	r3, r2
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100f4:	4b16      	ldr	r3, [pc, #88]	@ (8010150 <vPortValidateInterruptPriority+0x78>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	7afa      	ldrb	r2, [r7, #11]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d20b      	bcs.n	8010116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80100fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	607b      	str	r3, [r7, #4]
}
 8010110:	bf00      	nop
 8010112:	bf00      	nop
 8010114:	e7fd      	b.n	8010112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010116:	4b0f      	ldr	r3, [pc, #60]	@ (8010154 <vPortValidateInterruptPriority+0x7c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801011e:	4b0e      	ldr	r3, [pc, #56]	@ (8010158 <vPortValidateInterruptPriority+0x80>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d90b      	bls.n	801013e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	603b      	str	r3, [r7, #0]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortValidateInterruptPriority+0x62>
	}
 801013e:	bf00      	nop
 8010140:	3714      	adds	r7, #20
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop
 801014c:	e000e3f0 	.word	0xe000e3f0
 8010150:	20001644 	.word	0x20001644
 8010154:	e000ed0c 	.word	0xe000ed0c
 8010158:	20001648 	.word	0x20001648

0801015c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b08a      	sub	sp, #40	@ 0x28
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010164:	2300      	movs	r3, #0
 8010166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010168:	f7fe f85c 	bl	800e224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801016c:	4b5c      	ldr	r3, [pc, #368]	@ (80102e0 <pvPortMalloc+0x184>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010174:	f000 f924 	bl	80103c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010178:	4b5a      	ldr	r3, [pc, #360]	@ (80102e4 <pvPortMalloc+0x188>)
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4013      	ands	r3, r2
 8010180:	2b00      	cmp	r3, #0
 8010182:	f040 8095 	bne.w	80102b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d01e      	beq.n	80101ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801018c:	2208      	movs	r2, #8
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4413      	add	r3, r2
 8010192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f003 0307 	and.w	r3, r3, #7
 801019a:	2b00      	cmp	r3, #0
 801019c:	d015      	beq.n	80101ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f023 0307 	bic.w	r3, r3, #7
 80101a4:	3308      	adds	r3, #8
 80101a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f003 0307 	and.w	r3, r3, #7
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00b      	beq.n	80101ca <pvPortMalloc+0x6e>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	617b      	str	r3, [r7, #20]
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	e7fd      	b.n	80101c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d06f      	beq.n	80102b0 <pvPortMalloc+0x154>
 80101d0:	4b45      	ldr	r3, [pc, #276]	@ (80102e8 <pvPortMalloc+0x18c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d86a      	bhi.n	80102b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101da:	4b44      	ldr	r3, [pc, #272]	@ (80102ec <pvPortMalloc+0x190>)
 80101dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101de:	4b43      	ldr	r3, [pc, #268]	@ (80102ec <pvPortMalloc+0x190>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101e4:	e004      	b.n	80101f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80101e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d903      	bls.n	8010202 <pvPortMalloc+0xa6>
 80101fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1f1      	bne.n	80101e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010202:	4b37      	ldr	r3, [pc, #220]	@ (80102e0 <pvPortMalloc+0x184>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010208:	429a      	cmp	r2, r3
 801020a:	d051      	beq.n	80102b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2208      	movs	r2, #8
 8010212:	4413      	add	r3, r2
 8010214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801021e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010220:	685a      	ldr	r2, [r3, #4]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	1ad2      	subs	r2, r2, r3
 8010226:	2308      	movs	r3, #8
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	429a      	cmp	r2, r3
 801022c:	d920      	bls.n	8010270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801022e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4413      	add	r3, r2
 8010234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	f003 0307 	and.w	r3, r3, #7
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00b      	beq.n	8010258 <pvPortMalloc+0xfc>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	613b      	str	r3, [r7, #16]
}
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	e7fd      	b.n	8010254 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	1ad2      	subs	r2, r2, r3
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801026a:	69b8      	ldr	r0, [r7, #24]
 801026c:	f000 f90a 	bl	8010484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010270:	4b1d      	ldr	r3, [pc, #116]	@ (80102e8 <pvPortMalloc+0x18c>)
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	4a1b      	ldr	r2, [pc, #108]	@ (80102e8 <pvPortMalloc+0x18c>)
 801027c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801027e:	4b1a      	ldr	r3, [pc, #104]	@ (80102e8 <pvPortMalloc+0x18c>)
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	4b1b      	ldr	r3, [pc, #108]	@ (80102f0 <pvPortMalloc+0x194>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	429a      	cmp	r2, r3
 8010288:	d203      	bcs.n	8010292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801028a:	4b17      	ldr	r3, [pc, #92]	@ (80102e8 <pvPortMalloc+0x18c>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a18      	ldr	r2, [pc, #96]	@ (80102f0 <pvPortMalloc+0x194>)
 8010290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	4b13      	ldr	r3, [pc, #76]	@ (80102e4 <pvPortMalloc+0x188>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	431a      	orrs	r2, r3
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80102a6:	4b13      	ldr	r3, [pc, #76]	@ (80102f4 <pvPortMalloc+0x198>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3301      	adds	r3, #1
 80102ac:	4a11      	ldr	r2, [pc, #68]	@ (80102f4 <pvPortMalloc+0x198>)
 80102ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102b0:	f7fd ffc6 	bl	800e240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00b      	beq.n	80102d6 <pvPortMalloc+0x17a>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	60fb      	str	r3, [r7, #12]
}
 80102d0:	bf00      	nop
 80102d2:	bf00      	nop
 80102d4:	e7fd      	b.n	80102d2 <pvPortMalloc+0x176>
	return pvReturn;
 80102d6:	69fb      	ldr	r3, [r7, #28]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3728      	adds	r7, #40	@ 0x28
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20005254 	.word	0x20005254
 80102e4:	20005268 	.word	0x20005268
 80102e8:	20005258 	.word	0x20005258
 80102ec:	2000524c 	.word	0x2000524c
 80102f0:	2000525c 	.word	0x2000525c
 80102f4:	20005260 	.word	0x20005260

080102f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d04f      	beq.n	80103aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801030a:	2308      	movs	r3, #8
 801030c:	425b      	negs	r3, r3
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	4413      	add	r3, r2
 8010312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	4b25      	ldr	r3, [pc, #148]	@ (80103b4 <vPortFree+0xbc>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4013      	ands	r3, r2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10b      	bne.n	801033e <vPortFree+0x46>
	__asm volatile
 8010326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801032a:	f383 8811 	msr	BASEPRI, r3
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f3bf 8f4f 	dsb	sy
 8010336:	60fb      	str	r3, [r7, #12]
}
 8010338:	bf00      	nop
 801033a:	bf00      	nop
 801033c:	e7fd      	b.n	801033a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00b      	beq.n	801035e <vPortFree+0x66>
	__asm volatile
 8010346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034a:	f383 8811 	msr	BASEPRI, r3
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	60bb      	str	r3, [r7, #8]
}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	e7fd      	b.n	801035a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	4b14      	ldr	r3, [pc, #80]	@ (80103b4 <vPortFree+0xbc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4013      	ands	r3, r2
 8010368:	2b00      	cmp	r3, #0
 801036a:	d01e      	beq.n	80103aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d11a      	bne.n	80103aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	4b0e      	ldr	r3, [pc, #56]	@ (80103b4 <vPortFree+0xbc>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	43db      	mvns	r3, r3
 801037e:	401a      	ands	r2, r3
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010384:	f7fd ff4e 	bl	800e224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	4b0a      	ldr	r3, [pc, #40]	@ (80103b8 <vPortFree+0xc0>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4413      	add	r3, r2
 8010392:	4a09      	ldr	r2, [pc, #36]	@ (80103b8 <vPortFree+0xc0>)
 8010394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010396:	6938      	ldr	r0, [r7, #16]
 8010398:	f000 f874 	bl	8010484 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801039c:	4b07      	ldr	r3, [pc, #28]	@ (80103bc <vPortFree+0xc4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3301      	adds	r3, #1
 80103a2:	4a06      	ldr	r2, [pc, #24]	@ (80103bc <vPortFree+0xc4>)
 80103a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80103a6:	f7fd ff4b 	bl	800e240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80103aa:	bf00      	nop
 80103ac:	3718      	adds	r7, #24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20005268 	.word	0x20005268
 80103b8:	20005258 	.word	0x20005258
 80103bc:	20005264 	.word	0x20005264

080103c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80103ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103cc:	4b27      	ldr	r3, [pc, #156]	@ (801046c <prvHeapInit+0xac>)
 80103ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00c      	beq.n	80103f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3307      	adds	r3, #7
 80103de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f023 0307 	bic.w	r3, r3, #7
 80103e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	4a1f      	ldr	r2, [pc, #124]	@ (801046c <prvHeapInit+0xac>)
 80103f0:	4413      	add	r3, r2
 80103f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010470 <prvHeapInit+0xb0>)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010470 <prvHeapInit+0xb0>)
 8010400:	2200      	movs	r2, #0
 8010402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	4413      	add	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801040c:	2208      	movs	r2, #8
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f023 0307 	bic.w	r3, r3, #7
 801041a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4a15      	ldr	r2, [pc, #84]	@ (8010474 <prvHeapInit+0xb4>)
 8010420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010422:	4b14      	ldr	r3, [pc, #80]	@ (8010474 <prvHeapInit+0xb4>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2200      	movs	r2, #0
 8010428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801042a:	4b12      	ldr	r3, [pc, #72]	@ (8010474 <prvHeapInit+0xb4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2200      	movs	r2, #0
 8010430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	1ad2      	subs	r2, r2, r3
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010440:	4b0c      	ldr	r3, [pc, #48]	@ (8010474 <prvHeapInit+0xb4>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	4a0a      	ldr	r2, [pc, #40]	@ (8010478 <prvHeapInit+0xb8>)
 801044e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4a09      	ldr	r2, [pc, #36]	@ (801047c <prvHeapInit+0xbc>)
 8010456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010458:	4b09      	ldr	r3, [pc, #36]	@ (8010480 <prvHeapInit+0xc0>)
 801045a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801045e:	601a      	str	r2, [r3, #0]
}
 8010460:	bf00      	nop
 8010462:	3714      	adds	r7, #20
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	2000164c 	.word	0x2000164c
 8010470:	2000524c 	.word	0x2000524c
 8010474:	20005254 	.word	0x20005254
 8010478:	2000525c 	.word	0x2000525c
 801047c:	20005258 	.word	0x20005258
 8010480:	20005268 	.word	0x20005268

08010484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801048c:	4b28      	ldr	r3, [pc, #160]	@ (8010530 <prvInsertBlockIntoFreeList+0xac>)
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	e002      	b.n	8010498 <prvInsertBlockIntoFreeList+0x14>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d8f7      	bhi.n	8010492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	4413      	add	r3, r2
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d108      	bne.n	80104c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	685a      	ldr	r2, [r3, #4]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	441a      	add	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	441a      	add	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d118      	bne.n	801050c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	4b15      	ldr	r3, [pc, #84]	@ (8010534 <prvInsertBlockIntoFreeList+0xb0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d00d      	beq.n	8010502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	441a      	add	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	e008      	b.n	8010514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010502:	4b0c      	ldr	r3, [pc, #48]	@ (8010534 <prvInsertBlockIntoFreeList+0xb0>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	e003      	b.n	8010514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	429a      	cmp	r2, r3
 801051a:	d002      	beq.n	8010522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010522:	bf00      	nop
 8010524:	3714      	adds	r7, #20
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	2000524c 	.word	0x2000524c
 8010534:	20005254 	.word	0x20005254

08010538 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801053c:	2201      	movs	r2, #1
 801053e:	490e      	ldr	r1, [pc, #56]	@ (8010578 <MX_USB_HOST_Init+0x40>)
 8010540:	480e      	ldr	r0, [pc, #56]	@ (801057c <MX_USB_HOST_Init+0x44>)
 8010542:	f7f9 feb7 	bl	800a2b4 <USBH_Init>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801054c:	f7f2 ffc2 	bl	80034d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010550:	490b      	ldr	r1, [pc, #44]	@ (8010580 <MX_USB_HOST_Init+0x48>)
 8010552:	480a      	ldr	r0, [pc, #40]	@ (801057c <MX_USB_HOST_Init+0x44>)
 8010554:	f7f9 ff5e 	bl	800a414 <USBH_RegisterClass>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d001      	beq.n	8010562 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801055e:	f7f2 ffb9 	bl	80034d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010562:	4806      	ldr	r0, [pc, #24]	@ (801057c <MX_USB_HOST_Init+0x44>)
 8010564:	f7f9 ffe2 	bl	800a52c <USBH_Start>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801056e:	f7f2 ffb1 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010572:	bf00      	nop
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	08010585 	.word	0x08010585
 801057c:	2000526c 	.word	0x2000526c
 8010580:	20000238 	.word	0x20000238

08010584 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010590:	78fb      	ldrb	r3, [r7, #3]
 8010592:	3b01      	subs	r3, #1
 8010594:	2b04      	cmp	r3, #4
 8010596:	d819      	bhi.n	80105cc <USBH_UserProcess+0x48>
 8010598:	a201      	add	r2, pc, #4	@ (adr r2, 80105a0 <USBH_UserProcess+0x1c>)
 801059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801059e:	bf00      	nop
 80105a0:	080105cd 	.word	0x080105cd
 80105a4:	080105bd 	.word	0x080105bd
 80105a8:	080105cd 	.word	0x080105cd
 80105ac:	080105c5 	.word	0x080105c5
 80105b0:	080105b5 	.word	0x080105b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80105b4:	4b09      	ldr	r3, [pc, #36]	@ (80105dc <USBH_UserProcess+0x58>)
 80105b6:	2203      	movs	r2, #3
 80105b8:	701a      	strb	r2, [r3, #0]
  break;
 80105ba:	e008      	b.n	80105ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80105bc:	4b07      	ldr	r3, [pc, #28]	@ (80105dc <USBH_UserProcess+0x58>)
 80105be:	2202      	movs	r2, #2
 80105c0:	701a      	strb	r2, [r3, #0]
  break;
 80105c2:	e004      	b.n	80105ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80105c4:	4b05      	ldr	r3, [pc, #20]	@ (80105dc <USBH_UserProcess+0x58>)
 80105c6:	2201      	movs	r2, #1
 80105c8:	701a      	strb	r2, [r3, #0]
  break;
 80105ca:	e000      	b.n	80105ce <USBH_UserProcess+0x4a>

  default:
  break;
 80105cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80105ce:	bf00      	nop
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	20005650 	.word	0x20005650

080105e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08a      	sub	sp, #40	@ 0x28
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105e8:	f107 0314 	add.w	r3, r7, #20
 80105ec:	2200      	movs	r2, #0
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	605a      	str	r2, [r3, #4]
 80105f2:	609a      	str	r2, [r3, #8]
 80105f4:	60da      	str	r2, [r3, #12]
 80105f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010600:	d147      	bne.n	8010692 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010602:	2300      	movs	r3, #0
 8010604:	613b      	str	r3, [r7, #16]
 8010606:	4b25      	ldr	r3, [pc, #148]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 8010608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801060a:	4a24      	ldr	r2, [pc, #144]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 801060c:	f043 0301 	orr.w	r3, r3, #1
 8010610:	6313      	str	r3, [r2, #48]	@ 0x30
 8010612:	4b22      	ldr	r3, [pc, #136]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 8010614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	613b      	str	r3, [r7, #16]
 801061c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801061e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010624:	2300      	movs	r3, #0
 8010626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010628:	2300      	movs	r3, #0
 801062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801062c:	f107 0314 	add.w	r3, r7, #20
 8010630:	4619      	mov	r1, r3
 8010632:	481b      	ldr	r0, [pc, #108]	@ (80106a0 <HAL_HCD_MspInit+0xc0>)
 8010634:	f7f3 fce0 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010638:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801063e:	2302      	movs	r3, #2
 8010640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010642:	2300      	movs	r3, #0
 8010644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010646:	2300      	movs	r3, #0
 8010648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801064a:	230a      	movs	r3, #10
 801064c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801064e:	f107 0314 	add.w	r3, r7, #20
 8010652:	4619      	mov	r1, r3
 8010654:	4812      	ldr	r0, [pc, #72]	@ (80106a0 <HAL_HCD_MspInit+0xc0>)
 8010656:	f7f3 fccf 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801065a:	4b10      	ldr	r3, [pc, #64]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 801065c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801065e:	4a0f      	ldr	r2, [pc, #60]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 8010660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010664:	6353      	str	r3, [r2, #52]	@ 0x34
 8010666:	2300      	movs	r3, #0
 8010668:	60fb      	str	r3, [r7, #12]
 801066a:	4b0c      	ldr	r3, [pc, #48]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 801066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801066e:	4a0b      	ldr	r2, [pc, #44]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 8010670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010674:	6453      	str	r3, [r2, #68]	@ 0x44
 8010676:	4b09      	ldr	r3, [pc, #36]	@ (801069c <HAL_HCD_MspInit+0xbc>)
 8010678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801067a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801067e:	60fb      	str	r3, [r7, #12]
 8010680:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010682:	2200      	movs	r2, #0
 8010684:	2105      	movs	r1, #5
 8010686:	2043      	movs	r0, #67	@ 0x43
 8010688:	f7f3 fbfa 	bl	8003e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801068c:	2043      	movs	r0, #67	@ 0x43
 801068e:	f7f3 fc13 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010692:	bf00      	nop
 8010694:	3728      	adds	r7, #40	@ 0x28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	40023800 	.word	0x40023800
 80106a0:	40020000 	.word	0x40020000

080106a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fa fbeb 	bl	800ae8e <USBH_LL_IncTimer>
}
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fa fc2f 	bl	800af32 <USBH_LL_Connect>
}
 80106d4:	bf00      	nop
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fa fc44 	bl	800af78 <USBH_LL_Disconnect>
}
 80106f0:	bf00      	nop
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	460b      	mov	r3, r1
 8010702:	70fb      	strb	r3, [r7, #3]
 8010704:	4613      	mov	r3, r2
 8010706:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801070e:	4618      	mov	r0, r3
 8010710:	f7fa fc7b 	bl	800b00a <USBH_LL_NotifyURBChange>
#endif
}
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801072a:	4618      	mov	r0, r3
 801072c:	f7fa fbd9 	bl	800aee2 <USBH_LL_PortEnabled>
}
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010746:	4618      	mov	r0, r3
 8010748:	f7fa fbe5 	bl	800af16 <USBH_LL_PortDisabled>
}
 801074c:	bf00      	nop
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010762:	2b01      	cmp	r3, #1
 8010764:	d12a      	bne.n	80107bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010766:	4a18      	ldr	r2, [pc, #96]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4a15      	ldr	r2, [pc, #84]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010772:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010776:	4b14      	ldr	r3, [pc, #80]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010778:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801077c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801077e:	4b12      	ldr	r3, [pc, #72]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010780:	2208      	movs	r2, #8
 8010782:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010784:	4b10      	ldr	r3, [pc, #64]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010786:	2201      	movs	r2, #1
 8010788:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801078a:	4b0f      	ldr	r3, [pc, #60]	@ (80107c8 <USBH_LL_Init+0x74>)
 801078c:	2200      	movs	r2, #0
 801078e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010790:	4b0d      	ldr	r3, [pc, #52]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010792:	2202      	movs	r2, #2
 8010794:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010796:	4b0c      	ldr	r3, [pc, #48]	@ (80107c8 <USBH_LL_Init+0x74>)
 8010798:	2200      	movs	r2, #0
 801079a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801079c:	480a      	ldr	r0, [pc, #40]	@ (80107c8 <USBH_LL_Init+0x74>)
 801079e:	f7f3 fe36 	bl	800440e <HAL_HCD_Init>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80107a8:	f7f2 fe94 	bl	80034d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80107ac:	4806      	ldr	r0, [pc, #24]	@ (80107c8 <USBH_LL_Init+0x74>)
 80107ae:	f7f4 fa1a 	bl	8004be6 <HAL_HCD_GetCurrentFrame>
 80107b2:	4603      	mov	r3, r0
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7fa fb5a 	bl	800ae70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	20005654 	.word	0x20005654

080107cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107d4:	2300      	movs	r3, #0
 80107d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107d8:	2300      	movs	r3, #0
 80107da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f4 f989 	bl	8004afa <HAL_HCD_Start>
 80107e8:	4603      	mov	r3, r0
 80107ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f000 f95c 	bl	8010aac <USBH_Get_USB_Status>
 80107f4:	4603      	mov	r3, r0
 80107f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010818:	4618      	mov	r0, r3
 801081a:	f7f4 f991 	bl	8004b40 <HAL_HCD_Stop>
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f941 	bl	8010aac <USBH_Get_USB_Status>
 801082a:	4603      	mov	r3, r0
 801082c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801082e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010840:	2301      	movs	r3, #1
 8010842:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801084a:	4618      	mov	r0, r3
 801084c:	f7f4 f9d9 	bl	8004c02 <HAL_HCD_GetCurrentSpeed>
 8010850:	4603      	mov	r3, r0
 8010852:	2b02      	cmp	r3, #2
 8010854:	d00c      	beq.n	8010870 <USBH_LL_GetSpeed+0x38>
 8010856:	2b02      	cmp	r3, #2
 8010858:	d80d      	bhi.n	8010876 <USBH_LL_GetSpeed+0x3e>
 801085a:	2b00      	cmp	r3, #0
 801085c:	d002      	beq.n	8010864 <USBH_LL_GetSpeed+0x2c>
 801085e:	2b01      	cmp	r3, #1
 8010860:	d003      	beq.n	801086a <USBH_LL_GetSpeed+0x32>
 8010862:	e008      	b.n	8010876 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010864:	2300      	movs	r3, #0
 8010866:	73fb      	strb	r3, [r7, #15]
    break;
 8010868:	e008      	b.n	801087c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801086a:	2301      	movs	r3, #1
 801086c:	73fb      	strb	r3, [r7, #15]
    break;
 801086e:	e005      	b.n	801087c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010870:	2302      	movs	r3, #2
 8010872:	73fb      	strb	r3, [r7, #15]
    break;
 8010874:	e002      	b.n	801087c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010876:	2301      	movs	r3, #1
 8010878:	73fb      	strb	r3, [r7, #15]
    break;
 801087a:	bf00      	nop
  }
  return  speed;
 801087c:	7bfb      	ldrb	r3, [r7, #15]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b084      	sub	sp, #16
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801088e:	2300      	movs	r3, #0
 8010890:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010892:	2300      	movs	r3, #0
 8010894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801089c:	4618      	mov	r0, r3
 801089e:	f7f4 f96c 	bl	8004b7a <HAL_HCD_ResetPort>
 80108a2:	4603      	mov	r3, r0
 80108a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80108a6:	7bfb      	ldrb	r3, [r7, #15]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 f8ff 	bl	8010aac <USBH_Get_USB_Status>
 80108ae:	4603      	mov	r3, r0
 80108b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3710      	adds	r7, #16
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80108ce:	78fa      	ldrb	r2, [r7, #3]
 80108d0:	4611      	mov	r1, r2
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7f4 f973 	bl	8004bbe <HAL_HCD_HC_GetXferCount>
 80108d8:	4603      	mov	r3, r0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80108e2:	b590      	push	{r4, r7, lr}
 80108e4:	b089      	sub	sp, #36	@ 0x24
 80108e6:	af04      	add	r7, sp, #16
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	4608      	mov	r0, r1
 80108ec:	4611      	mov	r1, r2
 80108ee:	461a      	mov	r2, r3
 80108f0:	4603      	mov	r3, r0
 80108f2:	70fb      	strb	r3, [r7, #3]
 80108f4:	460b      	mov	r3, r1
 80108f6:	70bb      	strb	r3, [r7, #2]
 80108f8:	4613      	mov	r3, r2
 80108fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801090a:	787c      	ldrb	r4, [r7, #1]
 801090c:	78ba      	ldrb	r2, [r7, #2]
 801090e:	78f9      	ldrb	r1, [r7, #3]
 8010910:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010912:	9302      	str	r3, [sp, #8]
 8010914:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801091e:	9300      	str	r3, [sp, #0]
 8010920:	4623      	mov	r3, r4
 8010922:	f7f3 fdd6 	bl	80044d2 <HAL_HCD_HC_Init>
 8010926:	4603      	mov	r3, r0
 8010928:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	4618      	mov	r0, r3
 801092e:	f000 f8bd 	bl	8010aac <USBH_Get_USB_Status>
 8010932:	4603      	mov	r3, r0
 8010934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010936:	7bbb      	ldrb	r3, [r7, #14]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3714      	adds	r7, #20
 801093c:	46bd      	mov	sp, r7
 801093e:	bd90      	pop	{r4, r7, pc}

08010940 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010950:	2300      	movs	r3, #0
 8010952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801095a:	78fa      	ldrb	r2, [r7, #3]
 801095c:	4611      	mov	r1, r2
 801095e:	4618      	mov	r0, r3
 8010960:	f7f3 fe46 	bl	80045f0 <HAL_HCD_HC_Halt>
 8010964:	4603      	mov	r3, r0
 8010966:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010968:	7bfb      	ldrb	r3, [r7, #15]
 801096a:	4618      	mov	r0, r3
 801096c:	f000 f89e 	bl	8010aac <USBH_Get_USB_Status>
 8010970:	4603      	mov	r3, r0
 8010972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010974:	7bbb      	ldrb	r3, [r7, #14]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801097e:	b590      	push	{r4, r7, lr}
 8010980:	b089      	sub	sp, #36	@ 0x24
 8010982:	af04      	add	r7, sp, #16
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	4608      	mov	r0, r1
 8010988:	4611      	mov	r1, r2
 801098a:	461a      	mov	r2, r3
 801098c:	4603      	mov	r3, r0
 801098e:	70fb      	strb	r3, [r7, #3]
 8010990:	460b      	mov	r3, r1
 8010992:	70bb      	strb	r3, [r7, #2]
 8010994:	4613      	mov	r3, r2
 8010996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010998:	2300      	movs	r3, #0
 801099a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801099c:	2300      	movs	r3, #0
 801099e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80109a6:	787c      	ldrb	r4, [r7, #1]
 80109a8:	78ba      	ldrb	r2, [r7, #2]
 80109aa:	78f9      	ldrb	r1, [r7, #3]
 80109ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109b0:	9303      	str	r3, [sp, #12]
 80109b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109b4:	9302      	str	r3, [sp, #8]
 80109b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	4623      	mov	r3, r4
 80109c2:	f7f3 fe39 	bl	8004638 <HAL_HCD_HC_SubmitRequest>
 80109c6:	4603      	mov	r3, r0
 80109c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 f86d 	bl	8010aac <USBH_Get_USB_Status>
 80109d2:	4603      	mov	r3, r0
 80109d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}

080109e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	460b      	mov	r3, r1
 80109ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80109f2:	78fa      	ldrb	r2, [r7, #3]
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7f4 f8cd 	bl	8004b96 <HAL_HCD_HC_GetURBState>
 80109fc:	4603      	mov	r3, r0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b082      	sub	sp, #8
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	460b      	mov	r3, r1
 8010a10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d103      	bne.n	8010a24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010a1c:	78fb      	ldrb	r3, [r7, #3]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f000 f870 	bl	8010b04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010a24:	20c8      	movs	r0, #200	@ 0xc8
 8010a26:	f7f3 f94f 	bl	8003cc8 <HAL_Delay>
  return USBH_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
 8010a40:	4613      	mov	r3, r2
 8010a42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010a4c:	78fb      	ldrb	r3, [r7, #3]
 8010a4e:	68fa      	ldr	r2, [r7, #12]
 8010a50:	212c      	movs	r1, #44	@ 0x2c
 8010a52:	fb01 f303 	mul.w	r3, r1, r3
 8010a56:	4413      	add	r3, r2
 8010a58:	333b      	adds	r3, #59	@ 0x3b
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d009      	beq.n	8010a74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010a60:	78fb      	ldrb	r3, [r7, #3]
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	212c      	movs	r1, #44	@ 0x2c
 8010a66:	fb01 f303 	mul.w	r3, r1, r3
 8010a6a:	4413      	add	r3, r2
 8010a6c:	3354      	adds	r3, #84	@ 0x54
 8010a6e:	78ba      	ldrb	r2, [r7, #2]
 8010a70:	701a      	strb	r2, [r3, #0]
 8010a72:	e008      	b.n	8010a86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010a74:	78fb      	ldrb	r3, [r7, #3]
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	212c      	movs	r1, #44	@ 0x2c
 8010a7a:	fb01 f303 	mul.w	r3, r1, r3
 8010a7e:	4413      	add	r3, r2
 8010a80:	3355      	adds	r3, #85	@ 0x55
 8010a82:	78ba      	ldrb	r2, [r7, #2]
 8010a84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010a86:	2300      	movs	r3, #0
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3714      	adds	r7, #20
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f7f3 f913 	bl	8003cc8 <HAL_Delay>
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	2b03      	cmp	r3, #3
 8010abe:	d817      	bhi.n	8010af0 <USBH_Get_USB_Status+0x44>
 8010ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ac8 <USBH_Get_USB_Status+0x1c>)
 8010ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac6:	bf00      	nop
 8010ac8:	08010ad9 	.word	0x08010ad9
 8010acc:	08010adf 	.word	0x08010adf
 8010ad0:	08010ae5 	.word	0x08010ae5
 8010ad4:	08010aeb 	.word	0x08010aeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73fb      	strb	r3, [r7, #15]
    break;
 8010adc:	e00b      	b.n	8010af6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010ade:	2302      	movs	r3, #2
 8010ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae2:	e008      	b.n	8010af6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae8:	e005      	b.n	8010af6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010aea:	2302      	movs	r3, #2
 8010aec:	73fb      	strb	r3, [r7, #15]
    break;
 8010aee:	e002      	b.n	8010af6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010af0:	2302      	movs	r3, #2
 8010af2:	73fb      	strb	r3, [r7, #15]
    break;
 8010af4:	bf00      	nop
  }
  return usb_status;
 8010af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010b0e:	79fb      	ldrb	r3, [r7, #7]
 8010b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010b12:	79fb      	ldrb	r3, [r7, #7]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d102      	bne.n	8010b1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	73fb      	strb	r3, [r7, #15]
 8010b1c:	e001      	b.n	8010b22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010b22:	7bfb      	ldrb	r3, [r7, #15]
 8010b24:	461a      	mov	r2, r3
 8010b26:	2101      	movs	r1, #1
 8010b28:	4803      	ldr	r0, [pc, #12]	@ (8010b38 <MX_DriverVbusFS+0x34>)
 8010b2a:	f7f3 fc19 	bl	8004360 <HAL_GPIO_WritePin>
}
 8010b2e:	bf00      	nop
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	40020800 	.word	0x40020800

08010b3c <atoi>:
 8010b3c:	220a      	movs	r2, #10
 8010b3e:	2100      	movs	r1, #0
 8010b40:	f000 bf48 	b.w	80119d4 <strtol>

08010b44 <malloc>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	@ (8010b50 <malloc+0xc>)
 8010b46:	4601      	mov	r1, r0
 8010b48:	6818      	ldr	r0, [r3, #0]
 8010b4a:	f000 b82d 	b.w	8010ba8 <_malloc_r>
 8010b4e:	bf00      	nop
 8010b50:	200003d4 	.word	0x200003d4

08010b54 <free>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <free+0xc>)
 8010b56:	4601      	mov	r1, r0
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f002 bd1d 	b.w	8013598 <_free_r>
 8010b5e:	bf00      	nop
 8010b60:	200003d4 	.word	0x200003d4

08010b64 <sbrk_aligned>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	4e0f      	ldr	r6, [pc, #60]	@ (8010ba4 <sbrk_aligned+0x40>)
 8010b68:	460c      	mov	r4, r1
 8010b6a:	6831      	ldr	r1, [r6, #0]
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	b911      	cbnz	r1, 8010b76 <sbrk_aligned+0x12>
 8010b70:	f001 fe36 	bl	80127e0 <_sbrk_r>
 8010b74:	6030      	str	r0, [r6, #0]
 8010b76:	4621      	mov	r1, r4
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f001 fe31 	bl	80127e0 <_sbrk_r>
 8010b7e:	1c43      	adds	r3, r0, #1
 8010b80:	d103      	bne.n	8010b8a <sbrk_aligned+0x26>
 8010b82:	f04f 34ff 	mov.w	r4, #4294967295
 8010b86:	4620      	mov	r0, r4
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
 8010b8a:	1cc4      	adds	r4, r0, #3
 8010b8c:	f024 0403 	bic.w	r4, r4, #3
 8010b90:	42a0      	cmp	r0, r4
 8010b92:	d0f8      	beq.n	8010b86 <sbrk_aligned+0x22>
 8010b94:	1a21      	subs	r1, r4, r0
 8010b96:	4628      	mov	r0, r5
 8010b98:	f001 fe22 	bl	80127e0 <_sbrk_r>
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	d1f2      	bne.n	8010b86 <sbrk_aligned+0x22>
 8010ba0:	e7ef      	b.n	8010b82 <sbrk_aligned+0x1e>
 8010ba2:	bf00      	nop
 8010ba4:	20005958 	.word	0x20005958

08010ba8 <_malloc_r>:
 8010ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bac:	1ccd      	adds	r5, r1, #3
 8010bae:	f025 0503 	bic.w	r5, r5, #3
 8010bb2:	3508      	adds	r5, #8
 8010bb4:	2d0c      	cmp	r5, #12
 8010bb6:	bf38      	it	cc
 8010bb8:	250c      	movcc	r5, #12
 8010bba:	2d00      	cmp	r5, #0
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	db01      	blt.n	8010bc4 <_malloc_r+0x1c>
 8010bc0:	42a9      	cmp	r1, r5
 8010bc2:	d904      	bls.n	8010bce <_malloc_r+0x26>
 8010bc4:	230c      	movs	r3, #12
 8010bc6:	6033      	str	r3, [r6, #0]
 8010bc8:	2000      	movs	r0, #0
 8010bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ca4 <_malloc_r+0xfc>
 8010bd2:	f000 f869 	bl	8010ca8 <__malloc_lock>
 8010bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010bda:	461c      	mov	r4, r3
 8010bdc:	bb44      	cbnz	r4, 8010c30 <_malloc_r+0x88>
 8010bde:	4629      	mov	r1, r5
 8010be0:	4630      	mov	r0, r6
 8010be2:	f7ff ffbf 	bl	8010b64 <sbrk_aligned>
 8010be6:	1c43      	adds	r3, r0, #1
 8010be8:	4604      	mov	r4, r0
 8010bea:	d158      	bne.n	8010c9e <_malloc_r+0xf6>
 8010bec:	f8d8 4000 	ldr.w	r4, [r8]
 8010bf0:	4627      	mov	r7, r4
 8010bf2:	2f00      	cmp	r7, #0
 8010bf4:	d143      	bne.n	8010c7e <_malloc_r+0xd6>
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	d04b      	beq.n	8010c92 <_malloc_r+0xea>
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	4639      	mov	r1, r7
 8010bfe:	4630      	mov	r0, r6
 8010c00:	eb04 0903 	add.w	r9, r4, r3
 8010c04:	f001 fdec 	bl	80127e0 <_sbrk_r>
 8010c08:	4581      	cmp	r9, r0
 8010c0a:	d142      	bne.n	8010c92 <_malloc_r+0xea>
 8010c0c:	6821      	ldr	r1, [r4, #0]
 8010c0e:	1a6d      	subs	r5, r5, r1
 8010c10:	4629      	mov	r1, r5
 8010c12:	4630      	mov	r0, r6
 8010c14:	f7ff ffa6 	bl	8010b64 <sbrk_aligned>
 8010c18:	3001      	adds	r0, #1
 8010c1a:	d03a      	beq.n	8010c92 <_malloc_r+0xea>
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	442b      	add	r3, r5
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	f8d8 3000 	ldr.w	r3, [r8]
 8010c26:	685a      	ldr	r2, [r3, #4]
 8010c28:	bb62      	cbnz	r2, 8010c84 <_malloc_r+0xdc>
 8010c2a:	f8c8 7000 	str.w	r7, [r8]
 8010c2e:	e00f      	b.n	8010c50 <_malloc_r+0xa8>
 8010c30:	6822      	ldr	r2, [r4, #0]
 8010c32:	1b52      	subs	r2, r2, r5
 8010c34:	d420      	bmi.n	8010c78 <_malloc_r+0xd0>
 8010c36:	2a0b      	cmp	r2, #11
 8010c38:	d917      	bls.n	8010c6a <_malloc_r+0xc2>
 8010c3a:	1961      	adds	r1, r4, r5
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	6025      	str	r5, [r4, #0]
 8010c40:	bf18      	it	ne
 8010c42:	6059      	strne	r1, [r3, #4]
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	bf08      	it	eq
 8010c48:	f8c8 1000 	streq.w	r1, [r8]
 8010c4c:	5162      	str	r2, [r4, r5]
 8010c4e:	604b      	str	r3, [r1, #4]
 8010c50:	4630      	mov	r0, r6
 8010c52:	f000 f82f 	bl	8010cb4 <__malloc_unlock>
 8010c56:	f104 000b 	add.w	r0, r4, #11
 8010c5a:	1d23      	adds	r3, r4, #4
 8010c5c:	f020 0007 	bic.w	r0, r0, #7
 8010c60:	1ac2      	subs	r2, r0, r3
 8010c62:	bf1c      	itt	ne
 8010c64:	1a1b      	subne	r3, r3, r0
 8010c66:	50a3      	strne	r3, [r4, r2]
 8010c68:	e7af      	b.n	8010bca <_malloc_r+0x22>
 8010c6a:	6862      	ldr	r2, [r4, #4]
 8010c6c:	42a3      	cmp	r3, r4
 8010c6e:	bf0c      	ite	eq
 8010c70:	f8c8 2000 	streq.w	r2, [r8]
 8010c74:	605a      	strne	r2, [r3, #4]
 8010c76:	e7eb      	b.n	8010c50 <_malloc_r+0xa8>
 8010c78:	4623      	mov	r3, r4
 8010c7a:	6864      	ldr	r4, [r4, #4]
 8010c7c:	e7ae      	b.n	8010bdc <_malloc_r+0x34>
 8010c7e:	463c      	mov	r4, r7
 8010c80:	687f      	ldr	r7, [r7, #4]
 8010c82:	e7b6      	b.n	8010bf2 <_malloc_r+0x4a>
 8010c84:	461a      	mov	r2, r3
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	42a3      	cmp	r3, r4
 8010c8a:	d1fb      	bne.n	8010c84 <_malloc_r+0xdc>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	6053      	str	r3, [r2, #4]
 8010c90:	e7de      	b.n	8010c50 <_malloc_r+0xa8>
 8010c92:	230c      	movs	r3, #12
 8010c94:	6033      	str	r3, [r6, #0]
 8010c96:	4630      	mov	r0, r6
 8010c98:	f000 f80c 	bl	8010cb4 <__malloc_unlock>
 8010c9c:	e794      	b.n	8010bc8 <_malloc_r+0x20>
 8010c9e:	6005      	str	r5, [r0, #0]
 8010ca0:	e7d6      	b.n	8010c50 <_malloc_r+0xa8>
 8010ca2:	bf00      	nop
 8010ca4:	2000595c 	.word	0x2000595c

08010ca8 <__malloc_lock>:
 8010ca8:	4801      	ldr	r0, [pc, #4]	@ (8010cb0 <__malloc_lock+0x8>)
 8010caa:	f001 bde6 	b.w	801287a <__retarget_lock_acquire_recursive>
 8010cae:	bf00      	nop
 8010cb0:	20005aa0 	.word	0x20005aa0

08010cb4 <__malloc_unlock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	@ (8010cbc <__malloc_unlock+0x8>)
 8010cb6:	f001 bde1 	b.w	801287c <__retarget_lock_release_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20005aa0 	.word	0x20005aa0

08010cc0 <sulp>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	ec45 4b10 	vmov	d0, r4, r5
 8010cca:	4616      	mov	r6, r2
 8010ccc:	f003 fb6e 	bl	80143ac <__ulp>
 8010cd0:	ec51 0b10 	vmov	r0, r1, d0
 8010cd4:	b17e      	cbz	r6, 8010cf6 <sulp+0x36>
 8010cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	dd09      	ble.n	8010cf6 <sulp+0x36>
 8010ce2:	051b      	lsls	r3, r3, #20
 8010ce4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010ce8:	2400      	movs	r4, #0
 8010cea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010cee:	4622      	mov	r2, r4
 8010cf0:	462b      	mov	r3, r5
 8010cf2:	f7ef fc81 	bl	80005f8 <__aeabi_dmul>
 8010cf6:	ec41 0b10 	vmov	d0, r0, r1
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	0000      	movs	r0, r0
	...

08010d00 <_strtod_l>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	b09f      	sub	sp, #124	@ 0x7c
 8010d06:	460c      	mov	r4, r1
 8010d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010d0e:	9005      	str	r0, [sp, #20]
 8010d10:	f04f 0a00 	mov.w	sl, #0
 8010d14:	f04f 0b00 	mov.w	fp, #0
 8010d18:	460a      	mov	r2, r1
 8010d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d1c:	7811      	ldrb	r1, [r2, #0]
 8010d1e:	292b      	cmp	r1, #43	@ 0x2b
 8010d20:	d04a      	beq.n	8010db8 <_strtod_l+0xb8>
 8010d22:	d838      	bhi.n	8010d96 <_strtod_l+0x96>
 8010d24:	290d      	cmp	r1, #13
 8010d26:	d832      	bhi.n	8010d8e <_strtod_l+0x8e>
 8010d28:	2908      	cmp	r1, #8
 8010d2a:	d832      	bhi.n	8010d92 <_strtod_l+0x92>
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	d03b      	beq.n	8010da8 <_strtod_l+0xa8>
 8010d30:	2200      	movs	r2, #0
 8010d32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010d36:	782a      	ldrb	r2, [r5, #0]
 8010d38:	2a30      	cmp	r2, #48	@ 0x30
 8010d3a:	f040 80b3 	bne.w	8010ea4 <_strtod_l+0x1a4>
 8010d3e:	786a      	ldrb	r2, [r5, #1]
 8010d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d44:	2a58      	cmp	r2, #88	@ 0x58
 8010d46:	d16e      	bne.n	8010e26 <_strtod_l+0x126>
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	4a8e      	ldr	r2, [pc, #568]	@ (8010f8c <_strtod_l+0x28c>)
 8010d54:	9805      	ldr	r0, [sp, #20]
 8010d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010d58:	a919      	add	r1, sp, #100	@ 0x64
 8010d5a:	f002 fccf 	bl	80136fc <__gethex>
 8010d5e:	f010 060f 	ands.w	r6, r0, #15
 8010d62:	4604      	mov	r4, r0
 8010d64:	d005      	beq.n	8010d72 <_strtod_l+0x72>
 8010d66:	2e06      	cmp	r6, #6
 8010d68:	d128      	bne.n	8010dbc <_strtod_l+0xbc>
 8010d6a:	3501      	adds	r5, #1
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f040 858e 	bne.w	8011896 <_strtod_l+0xb96>
 8010d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d7c:	b1cb      	cbz	r3, 8010db2 <_strtod_l+0xb2>
 8010d7e:	4652      	mov	r2, sl
 8010d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010d84:	ec43 2b10 	vmov	d0, r2, r3
 8010d88:	b01f      	add	sp, #124	@ 0x7c
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	2920      	cmp	r1, #32
 8010d90:	d1ce      	bne.n	8010d30 <_strtod_l+0x30>
 8010d92:	3201      	adds	r2, #1
 8010d94:	e7c1      	b.n	8010d1a <_strtod_l+0x1a>
 8010d96:	292d      	cmp	r1, #45	@ 0x2d
 8010d98:	d1ca      	bne.n	8010d30 <_strtod_l+0x30>
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010d9e:	1c51      	adds	r1, r2, #1
 8010da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8010da2:	7852      	ldrb	r2, [r2, #1]
 8010da4:	2a00      	cmp	r2, #0
 8010da6:	d1c5      	bne.n	8010d34 <_strtod_l+0x34>
 8010da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f040 8570 	bne.w	8011892 <_strtod_l+0xb92>
 8010db2:	4652      	mov	r2, sl
 8010db4:	465b      	mov	r3, fp
 8010db6:	e7e5      	b.n	8010d84 <_strtod_l+0x84>
 8010db8:	2100      	movs	r1, #0
 8010dba:	e7ef      	b.n	8010d9c <_strtod_l+0x9c>
 8010dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010dbe:	b13a      	cbz	r2, 8010dd0 <_strtod_l+0xd0>
 8010dc0:	2135      	movs	r1, #53	@ 0x35
 8010dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8010dc4:	f003 fbec 	bl	80145a0 <__copybits>
 8010dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010dca:	9805      	ldr	r0, [sp, #20]
 8010dcc:	f002 ffba 	bl	8013d44 <_Bfree>
 8010dd0:	3e01      	subs	r6, #1
 8010dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010dd4:	2e04      	cmp	r6, #4
 8010dd6:	d806      	bhi.n	8010de6 <_strtod_l+0xe6>
 8010dd8:	e8df f006 	tbb	[pc, r6]
 8010ddc:	201d0314 	.word	0x201d0314
 8010de0:	14          	.byte	0x14
 8010de1:	00          	.byte	0x00
 8010de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010de6:	05e1      	lsls	r1, r4, #23
 8010de8:	bf48      	it	mi
 8010dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010df2:	0d1b      	lsrs	r3, r3, #20
 8010df4:	051b      	lsls	r3, r3, #20
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1bb      	bne.n	8010d72 <_strtod_l+0x72>
 8010dfa:	f001 fd13 	bl	8012824 <__errno>
 8010dfe:	2322      	movs	r3, #34	@ 0x22
 8010e00:	6003      	str	r3, [r0, #0]
 8010e02:	e7b6      	b.n	8010d72 <_strtod_l+0x72>
 8010e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e14:	e7e7      	b.n	8010de6 <_strtod_l+0xe6>
 8010e16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010f94 <_strtod_l+0x294>
 8010e1a:	e7e4      	b.n	8010de6 <_strtod_l+0xe6>
 8010e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010e20:	f04f 3aff 	mov.w	sl, #4294967295
 8010e24:	e7df      	b.n	8010de6 <_strtod_l+0xe6>
 8010e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e28:	1c5a      	adds	r2, r3, #1
 8010e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e2c:	785b      	ldrb	r3, [r3, #1]
 8010e2e:	2b30      	cmp	r3, #48	@ 0x30
 8010e30:	d0f9      	beq.n	8010e26 <_strtod_l+0x126>
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d09d      	beq.n	8010d72 <_strtod_l+0x72>
 8010e36:	2301      	movs	r3, #1
 8010e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9308      	str	r3, [sp, #32]
 8010e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e44:	461f      	mov	r7, r3
 8010e46:	220a      	movs	r2, #10
 8010e48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010e4a:	7805      	ldrb	r5, [r0, #0]
 8010e4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010e50:	b2d9      	uxtb	r1, r3
 8010e52:	2909      	cmp	r1, #9
 8010e54:	d928      	bls.n	8010ea8 <_strtod_l+0x1a8>
 8010e56:	494e      	ldr	r1, [pc, #312]	@ (8010f90 <_strtod_l+0x290>)
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f001 fbc4 	bl	80125e6 <strncmp>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	d032      	beq.n	8010ec8 <_strtod_l+0x1c8>
 8010e62:	2000      	movs	r0, #0
 8010e64:	462a      	mov	r2, r5
 8010e66:	4681      	mov	r9, r0
 8010e68:	463d      	mov	r5, r7
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2a65      	cmp	r2, #101	@ 0x65
 8010e6e:	d001      	beq.n	8010e74 <_strtod_l+0x174>
 8010e70:	2a45      	cmp	r2, #69	@ 0x45
 8010e72:	d114      	bne.n	8010e9e <_strtod_l+0x19e>
 8010e74:	b91d      	cbnz	r5, 8010e7e <_strtod_l+0x17e>
 8010e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e78:	4302      	orrs	r2, r0
 8010e7a:	d095      	beq.n	8010da8 <_strtod_l+0xa8>
 8010e7c:	2500      	movs	r5, #0
 8010e7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010e80:	1c62      	adds	r2, r4, #1
 8010e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e84:	7862      	ldrb	r2, [r4, #1]
 8010e86:	2a2b      	cmp	r2, #43	@ 0x2b
 8010e88:	d077      	beq.n	8010f7a <_strtod_l+0x27a>
 8010e8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010e8c:	d07b      	beq.n	8010f86 <_strtod_l+0x286>
 8010e8e:	f04f 0c00 	mov.w	ip, #0
 8010e92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010e96:	2909      	cmp	r1, #9
 8010e98:	f240 8082 	bls.w	8010fa0 <_strtod_l+0x2a0>
 8010e9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010e9e:	f04f 0800 	mov.w	r8, #0
 8010ea2:	e0a2      	b.n	8010fea <_strtod_l+0x2ea>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e7c7      	b.n	8010e38 <_strtod_l+0x138>
 8010ea8:	2f08      	cmp	r7, #8
 8010eaa:	bfd5      	itete	le
 8010eac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010eae:	9908      	ldrgt	r1, [sp, #32]
 8010eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010eb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010eb8:	f100 0001 	add.w	r0, r0, #1
 8010ebc:	bfd4      	ite	le
 8010ebe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010ec0:	9308      	strgt	r3, [sp, #32]
 8010ec2:	3701      	adds	r7, #1
 8010ec4:	9019      	str	r0, [sp, #100]	@ 0x64
 8010ec6:	e7bf      	b.n	8010e48 <_strtod_l+0x148>
 8010ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ece:	785a      	ldrb	r2, [r3, #1]
 8010ed0:	b37f      	cbz	r7, 8010f32 <_strtod_l+0x232>
 8010ed2:	4681      	mov	r9, r0
 8010ed4:	463d      	mov	r5, r7
 8010ed6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010eda:	2b09      	cmp	r3, #9
 8010edc:	d912      	bls.n	8010f04 <_strtod_l+0x204>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	e7c4      	b.n	8010e6c <_strtod_l+0x16c>
 8010ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ee8:	785a      	ldrb	r2, [r3, #1]
 8010eea:	3001      	adds	r0, #1
 8010eec:	2a30      	cmp	r2, #48	@ 0x30
 8010eee:	d0f8      	beq.n	8010ee2 <_strtod_l+0x1e2>
 8010ef0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010ef4:	2b08      	cmp	r3, #8
 8010ef6:	f200 84d3 	bhi.w	80118a0 <_strtod_l+0xba0>
 8010efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010efe:	4681      	mov	r9, r0
 8010f00:	2000      	movs	r0, #0
 8010f02:	4605      	mov	r5, r0
 8010f04:	3a30      	subs	r2, #48	@ 0x30
 8010f06:	f100 0301 	add.w	r3, r0, #1
 8010f0a:	d02a      	beq.n	8010f62 <_strtod_l+0x262>
 8010f0c:	4499      	add	r9, r3
 8010f0e:	eb00 0c05 	add.w	ip, r0, r5
 8010f12:	462b      	mov	r3, r5
 8010f14:	210a      	movs	r1, #10
 8010f16:	4563      	cmp	r3, ip
 8010f18:	d10d      	bne.n	8010f36 <_strtod_l+0x236>
 8010f1a:	1c69      	adds	r1, r5, #1
 8010f1c:	4401      	add	r1, r0
 8010f1e:	4428      	add	r0, r5
 8010f20:	2808      	cmp	r0, #8
 8010f22:	dc16      	bgt.n	8010f52 <_strtod_l+0x252>
 8010f24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010f26:	230a      	movs	r3, #10
 8010f28:	fb03 2300 	mla	r3, r3, r0, r2
 8010f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e018      	b.n	8010f64 <_strtod_l+0x264>
 8010f32:	4638      	mov	r0, r7
 8010f34:	e7da      	b.n	8010eec <_strtod_l+0x1ec>
 8010f36:	2b08      	cmp	r3, #8
 8010f38:	f103 0301 	add.w	r3, r3, #1
 8010f3c:	dc03      	bgt.n	8010f46 <_strtod_l+0x246>
 8010f3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010f40:	434e      	muls	r6, r1
 8010f42:	960a      	str	r6, [sp, #40]	@ 0x28
 8010f44:	e7e7      	b.n	8010f16 <_strtod_l+0x216>
 8010f46:	2b10      	cmp	r3, #16
 8010f48:	bfde      	ittt	le
 8010f4a:	9e08      	ldrle	r6, [sp, #32]
 8010f4c:	434e      	mulle	r6, r1
 8010f4e:	9608      	strle	r6, [sp, #32]
 8010f50:	e7e1      	b.n	8010f16 <_strtod_l+0x216>
 8010f52:	280f      	cmp	r0, #15
 8010f54:	dceb      	bgt.n	8010f2e <_strtod_l+0x22e>
 8010f56:	9808      	ldr	r0, [sp, #32]
 8010f58:	230a      	movs	r3, #10
 8010f5a:	fb03 2300 	mla	r3, r3, r0, r2
 8010f5e:	9308      	str	r3, [sp, #32]
 8010f60:	e7e5      	b.n	8010f2e <_strtod_l+0x22e>
 8010f62:	4629      	mov	r1, r5
 8010f64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f66:	1c50      	adds	r0, r2, #1
 8010f68:	9019      	str	r0, [sp, #100]	@ 0x64
 8010f6a:	7852      	ldrb	r2, [r2, #1]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	460d      	mov	r5, r1
 8010f70:	e7b1      	b.n	8010ed6 <_strtod_l+0x1d6>
 8010f72:	f04f 0900 	mov.w	r9, #0
 8010f76:	2301      	movs	r3, #1
 8010f78:	e77d      	b.n	8010e76 <_strtod_l+0x176>
 8010f7a:	f04f 0c00 	mov.w	ip, #0
 8010f7e:	1ca2      	adds	r2, r4, #2
 8010f80:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f82:	78a2      	ldrb	r2, [r4, #2]
 8010f84:	e785      	b.n	8010e92 <_strtod_l+0x192>
 8010f86:	f04f 0c01 	mov.w	ip, #1
 8010f8a:	e7f8      	b.n	8010f7e <_strtod_l+0x27e>
 8010f8c:	08015af4 	.word	0x08015af4
 8010f90:	08015adc 	.word	0x08015adc
 8010f94:	7ff00000 	.word	0x7ff00000
 8010f98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f9a:	1c51      	adds	r1, r2, #1
 8010f9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010f9e:	7852      	ldrb	r2, [r2, #1]
 8010fa0:	2a30      	cmp	r2, #48	@ 0x30
 8010fa2:	d0f9      	beq.n	8010f98 <_strtod_l+0x298>
 8010fa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010fa8:	2908      	cmp	r1, #8
 8010faa:	f63f af78 	bhi.w	8010e9e <_strtod_l+0x19e>
 8010fae:	3a30      	subs	r2, #48	@ 0x30
 8010fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010fb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010fb6:	f04f 080a 	mov.w	r8, #10
 8010fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fbc:	1c56      	adds	r6, r2, #1
 8010fbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8010fc0:	7852      	ldrb	r2, [r2, #1]
 8010fc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010fc6:	f1be 0f09 	cmp.w	lr, #9
 8010fca:	d939      	bls.n	8011040 <_strtod_l+0x340>
 8010fcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010fce:	1a76      	subs	r6, r6, r1
 8010fd0:	2e08      	cmp	r6, #8
 8010fd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010fd6:	dc03      	bgt.n	8010fe0 <_strtod_l+0x2e0>
 8010fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010fda:	4588      	cmp	r8, r1
 8010fdc:	bfa8      	it	ge
 8010fde:	4688      	movge	r8, r1
 8010fe0:	f1bc 0f00 	cmp.w	ip, #0
 8010fe4:	d001      	beq.n	8010fea <_strtod_l+0x2ea>
 8010fe6:	f1c8 0800 	rsb	r8, r8, #0
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	d14e      	bne.n	801108c <_strtod_l+0x38c>
 8010fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ff0:	4308      	orrs	r0, r1
 8010ff2:	f47f aebe 	bne.w	8010d72 <_strtod_l+0x72>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f47f aed6 	bne.w	8010da8 <_strtod_l+0xa8>
 8010ffc:	2a69      	cmp	r2, #105	@ 0x69
 8010ffe:	d028      	beq.n	8011052 <_strtod_l+0x352>
 8011000:	dc25      	bgt.n	801104e <_strtod_l+0x34e>
 8011002:	2a49      	cmp	r2, #73	@ 0x49
 8011004:	d025      	beq.n	8011052 <_strtod_l+0x352>
 8011006:	2a4e      	cmp	r2, #78	@ 0x4e
 8011008:	f47f aece 	bne.w	8010da8 <_strtod_l+0xa8>
 801100c:	499b      	ldr	r1, [pc, #620]	@ (801127c <_strtod_l+0x57c>)
 801100e:	a819      	add	r0, sp, #100	@ 0x64
 8011010:	f002 fd96 	bl	8013b40 <__match>
 8011014:	2800      	cmp	r0, #0
 8011016:	f43f aec7 	beq.w	8010da8 <_strtod_l+0xa8>
 801101a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b28      	cmp	r3, #40	@ 0x28
 8011020:	d12e      	bne.n	8011080 <_strtod_l+0x380>
 8011022:	4997      	ldr	r1, [pc, #604]	@ (8011280 <_strtod_l+0x580>)
 8011024:	aa1c      	add	r2, sp, #112	@ 0x70
 8011026:	a819      	add	r0, sp, #100	@ 0x64
 8011028:	f002 fd9e 	bl	8013b68 <__hexnan>
 801102c:	2805      	cmp	r0, #5
 801102e:	d127      	bne.n	8011080 <_strtod_l+0x380>
 8011030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011032:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011036:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801103a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801103e:	e698      	b.n	8010d72 <_strtod_l+0x72>
 8011040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011042:	fb08 2101 	mla	r1, r8, r1, r2
 8011046:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801104a:	920e      	str	r2, [sp, #56]	@ 0x38
 801104c:	e7b5      	b.n	8010fba <_strtod_l+0x2ba>
 801104e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011050:	e7da      	b.n	8011008 <_strtod_l+0x308>
 8011052:	498c      	ldr	r1, [pc, #560]	@ (8011284 <_strtod_l+0x584>)
 8011054:	a819      	add	r0, sp, #100	@ 0x64
 8011056:	f002 fd73 	bl	8013b40 <__match>
 801105a:	2800      	cmp	r0, #0
 801105c:	f43f aea4 	beq.w	8010da8 <_strtod_l+0xa8>
 8011060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011062:	4989      	ldr	r1, [pc, #548]	@ (8011288 <_strtod_l+0x588>)
 8011064:	3b01      	subs	r3, #1
 8011066:	a819      	add	r0, sp, #100	@ 0x64
 8011068:	9319      	str	r3, [sp, #100]	@ 0x64
 801106a:	f002 fd69 	bl	8013b40 <__match>
 801106e:	b910      	cbnz	r0, 8011076 <_strtod_l+0x376>
 8011070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011072:	3301      	adds	r3, #1
 8011074:	9319      	str	r3, [sp, #100]	@ 0x64
 8011076:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011298 <_strtod_l+0x598>
 801107a:	f04f 0a00 	mov.w	sl, #0
 801107e:	e678      	b.n	8010d72 <_strtod_l+0x72>
 8011080:	4882      	ldr	r0, [pc, #520]	@ (801128c <_strtod_l+0x58c>)
 8011082:	f001 fc15 	bl	80128b0 <nan>
 8011086:	ec5b ab10 	vmov	sl, fp, d0
 801108a:	e672      	b.n	8010d72 <_strtod_l+0x72>
 801108c:	eba8 0309 	sub.w	r3, r8, r9
 8011090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011092:	9309      	str	r3, [sp, #36]	@ 0x24
 8011094:	2f00      	cmp	r7, #0
 8011096:	bf08      	it	eq
 8011098:	462f      	moveq	r7, r5
 801109a:	2d10      	cmp	r5, #16
 801109c:	462c      	mov	r4, r5
 801109e:	bfa8      	it	ge
 80110a0:	2410      	movge	r4, #16
 80110a2:	f7ef fa2f 	bl	8000504 <__aeabi_ui2d>
 80110a6:	2d09      	cmp	r5, #9
 80110a8:	4682      	mov	sl, r0
 80110aa:	468b      	mov	fp, r1
 80110ac:	dc13      	bgt.n	80110d6 <_strtod_l+0x3d6>
 80110ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f43f ae5e 	beq.w	8010d72 <_strtod_l+0x72>
 80110b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b8:	dd78      	ble.n	80111ac <_strtod_l+0x4ac>
 80110ba:	2b16      	cmp	r3, #22
 80110bc:	dc5f      	bgt.n	801117e <_strtod_l+0x47e>
 80110be:	4974      	ldr	r1, [pc, #464]	@ (8011290 <_strtod_l+0x590>)
 80110c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c8:	4652      	mov	r2, sl
 80110ca:	465b      	mov	r3, fp
 80110cc:	f7ef fa94 	bl	80005f8 <__aeabi_dmul>
 80110d0:	4682      	mov	sl, r0
 80110d2:	468b      	mov	fp, r1
 80110d4:	e64d      	b.n	8010d72 <_strtod_l+0x72>
 80110d6:	4b6e      	ldr	r3, [pc, #440]	@ (8011290 <_strtod_l+0x590>)
 80110d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80110e0:	f7ef fa8a 	bl	80005f8 <__aeabi_dmul>
 80110e4:	4682      	mov	sl, r0
 80110e6:	9808      	ldr	r0, [sp, #32]
 80110e8:	468b      	mov	fp, r1
 80110ea:	f7ef fa0b 	bl	8000504 <__aeabi_ui2d>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4650      	mov	r0, sl
 80110f4:	4659      	mov	r1, fp
 80110f6:	f7ef f8c9 	bl	800028c <__adddf3>
 80110fa:	2d0f      	cmp	r5, #15
 80110fc:	4682      	mov	sl, r0
 80110fe:	468b      	mov	fp, r1
 8011100:	ddd5      	ble.n	80110ae <_strtod_l+0x3ae>
 8011102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011104:	1b2c      	subs	r4, r5, r4
 8011106:	441c      	add	r4, r3
 8011108:	2c00      	cmp	r4, #0
 801110a:	f340 8096 	ble.w	801123a <_strtod_l+0x53a>
 801110e:	f014 030f 	ands.w	r3, r4, #15
 8011112:	d00a      	beq.n	801112a <_strtod_l+0x42a>
 8011114:	495e      	ldr	r1, [pc, #376]	@ (8011290 <_strtod_l+0x590>)
 8011116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801111a:	4652      	mov	r2, sl
 801111c:	465b      	mov	r3, fp
 801111e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011122:	f7ef fa69 	bl	80005f8 <__aeabi_dmul>
 8011126:	4682      	mov	sl, r0
 8011128:	468b      	mov	fp, r1
 801112a:	f034 040f 	bics.w	r4, r4, #15
 801112e:	d073      	beq.n	8011218 <_strtod_l+0x518>
 8011130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011134:	dd48      	ble.n	80111c8 <_strtod_l+0x4c8>
 8011136:	2400      	movs	r4, #0
 8011138:	46a0      	mov	r8, r4
 801113a:	940a      	str	r4, [sp, #40]	@ 0x28
 801113c:	46a1      	mov	r9, r4
 801113e:	9a05      	ldr	r2, [sp, #20]
 8011140:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011298 <_strtod_l+0x598>
 8011144:	2322      	movs	r3, #34	@ 0x22
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	f04f 0a00 	mov.w	sl, #0
 801114c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801114e:	2b00      	cmp	r3, #0
 8011150:	f43f ae0f 	beq.w	8010d72 <_strtod_l+0x72>
 8011154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011156:	9805      	ldr	r0, [sp, #20]
 8011158:	f002 fdf4 	bl	8013d44 <_Bfree>
 801115c:	9805      	ldr	r0, [sp, #20]
 801115e:	4649      	mov	r1, r9
 8011160:	f002 fdf0 	bl	8013d44 <_Bfree>
 8011164:	9805      	ldr	r0, [sp, #20]
 8011166:	4641      	mov	r1, r8
 8011168:	f002 fdec 	bl	8013d44 <_Bfree>
 801116c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801116e:	9805      	ldr	r0, [sp, #20]
 8011170:	f002 fde8 	bl	8013d44 <_Bfree>
 8011174:	9805      	ldr	r0, [sp, #20]
 8011176:	4621      	mov	r1, r4
 8011178:	f002 fde4 	bl	8013d44 <_Bfree>
 801117c:	e5f9      	b.n	8010d72 <_strtod_l+0x72>
 801117e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011184:	4293      	cmp	r3, r2
 8011186:	dbbc      	blt.n	8011102 <_strtod_l+0x402>
 8011188:	4c41      	ldr	r4, [pc, #260]	@ (8011290 <_strtod_l+0x590>)
 801118a:	f1c5 050f 	rsb	r5, r5, #15
 801118e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011192:	4652      	mov	r2, sl
 8011194:	465b      	mov	r3, fp
 8011196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801119a:	f7ef fa2d 	bl	80005f8 <__aeabi_dmul>
 801119e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a0:	1b5d      	subs	r5, r3, r5
 80111a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80111a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80111aa:	e78f      	b.n	80110cc <_strtod_l+0x3cc>
 80111ac:	3316      	adds	r3, #22
 80111ae:	dba8      	blt.n	8011102 <_strtod_l+0x402>
 80111b0:	4b37      	ldr	r3, [pc, #220]	@ (8011290 <_strtod_l+0x590>)
 80111b2:	eba9 0808 	sub.w	r8, r9, r8
 80111b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80111ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80111be:	4650      	mov	r0, sl
 80111c0:	4659      	mov	r1, fp
 80111c2:	f7ef fb43 	bl	800084c <__aeabi_ddiv>
 80111c6:	e783      	b.n	80110d0 <_strtod_l+0x3d0>
 80111c8:	4b32      	ldr	r3, [pc, #200]	@ (8011294 <_strtod_l+0x594>)
 80111ca:	9308      	str	r3, [sp, #32]
 80111cc:	2300      	movs	r3, #0
 80111ce:	1124      	asrs	r4, r4, #4
 80111d0:	4650      	mov	r0, sl
 80111d2:	4659      	mov	r1, fp
 80111d4:	461e      	mov	r6, r3
 80111d6:	2c01      	cmp	r4, #1
 80111d8:	dc21      	bgt.n	801121e <_strtod_l+0x51e>
 80111da:	b10b      	cbz	r3, 80111e0 <_strtod_l+0x4e0>
 80111dc:	4682      	mov	sl, r0
 80111de:	468b      	mov	fp, r1
 80111e0:	492c      	ldr	r1, [pc, #176]	@ (8011294 <_strtod_l+0x594>)
 80111e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80111e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80111ea:	4652      	mov	r2, sl
 80111ec:	465b      	mov	r3, fp
 80111ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f2:	f7ef fa01 	bl	80005f8 <__aeabi_dmul>
 80111f6:	4b28      	ldr	r3, [pc, #160]	@ (8011298 <_strtod_l+0x598>)
 80111f8:	460a      	mov	r2, r1
 80111fa:	400b      	ands	r3, r1
 80111fc:	4927      	ldr	r1, [pc, #156]	@ (801129c <_strtod_l+0x59c>)
 80111fe:	428b      	cmp	r3, r1
 8011200:	4682      	mov	sl, r0
 8011202:	d898      	bhi.n	8011136 <_strtod_l+0x436>
 8011204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011208:	428b      	cmp	r3, r1
 801120a:	bf86      	itte	hi
 801120c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80112a0 <_strtod_l+0x5a0>
 8011210:	f04f 3aff 	movhi.w	sl, #4294967295
 8011214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011218:	2300      	movs	r3, #0
 801121a:	9308      	str	r3, [sp, #32]
 801121c:	e07a      	b.n	8011314 <_strtod_l+0x614>
 801121e:	07e2      	lsls	r2, r4, #31
 8011220:	d505      	bpl.n	801122e <_strtod_l+0x52e>
 8011222:	9b08      	ldr	r3, [sp, #32]
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	f7ef f9e6 	bl	80005f8 <__aeabi_dmul>
 801122c:	2301      	movs	r3, #1
 801122e:	9a08      	ldr	r2, [sp, #32]
 8011230:	3208      	adds	r2, #8
 8011232:	3601      	adds	r6, #1
 8011234:	1064      	asrs	r4, r4, #1
 8011236:	9208      	str	r2, [sp, #32]
 8011238:	e7cd      	b.n	80111d6 <_strtod_l+0x4d6>
 801123a:	d0ed      	beq.n	8011218 <_strtod_l+0x518>
 801123c:	4264      	negs	r4, r4
 801123e:	f014 020f 	ands.w	r2, r4, #15
 8011242:	d00a      	beq.n	801125a <_strtod_l+0x55a>
 8011244:	4b12      	ldr	r3, [pc, #72]	@ (8011290 <_strtod_l+0x590>)
 8011246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801124a:	4650      	mov	r0, sl
 801124c:	4659      	mov	r1, fp
 801124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011252:	f7ef fafb 	bl	800084c <__aeabi_ddiv>
 8011256:	4682      	mov	sl, r0
 8011258:	468b      	mov	fp, r1
 801125a:	1124      	asrs	r4, r4, #4
 801125c:	d0dc      	beq.n	8011218 <_strtod_l+0x518>
 801125e:	2c1f      	cmp	r4, #31
 8011260:	dd20      	ble.n	80112a4 <_strtod_l+0x5a4>
 8011262:	2400      	movs	r4, #0
 8011264:	46a0      	mov	r8, r4
 8011266:	940a      	str	r4, [sp, #40]	@ 0x28
 8011268:	46a1      	mov	r9, r4
 801126a:	9a05      	ldr	r2, [sp, #20]
 801126c:	2322      	movs	r3, #34	@ 0x22
 801126e:	f04f 0a00 	mov.w	sl, #0
 8011272:	f04f 0b00 	mov.w	fp, #0
 8011276:	6013      	str	r3, [r2, #0]
 8011278:	e768      	b.n	801114c <_strtod_l+0x44c>
 801127a:	bf00      	nop
 801127c:	08015c3e 	.word	0x08015c3e
 8011280:	08015ae0 	.word	0x08015ae0
 8011284:	08015c36 	.word	0x08015c36
 8011288:	08015d1d 	.word	0x08015d1d
 801128c:	08015d19 	.word	0x08015d19
 8011290:	08015e80 	.word	0x08015e80
 8011294:	08015e58 	.word	0x08015e58
 8011298:	7ff00000 	.word	0x7ff00000
 801129c:	7ca00000 	.word	0x7ca00000
 80112a0:	7fefffff 	.word	0x7fefffff
 80112a4:	f014 0310 	ands.w	r3, r4, #16
 80112a8:	bf18      	it	ne
 80112aa:	236a      	movne	r3, #106	@ 0x6a
 80112ac:	4ea9      	ldr	r6, [pc, #676]	@ (8011554 <_strtod_l+0x854>)
 80112ae:	9308      	str	r3, [sp, #32]
 80112b0:	4650      	mov	r0, sl
 80112b2:	4659      	mov	r1, fp
 80112b4:	2300      	movs	r3, #0
 80112b6:	07e2      	lsls	r2, r4, #31
 80112b8:	d504      	bpl.n	80112c4 <_strtod_l+0x5c4>
 80112ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80112be:	f7ef f99b 	bl	80005f8 <__aeabi_dmul>
 80112c2:	2301      	movs	r3, #1
 80112c4:	1064      	asrs	r4, r4, #1
 80112c6:	f106 0608 	add.w	r6, r6, #8
 80112ca:	d1f4      	bne.n	80112b6 <_strtod_l+0x5b6>
 80112cc:	b10b      	cbz	r3, 80112d2 <_strtod_l+0x5d2>
 80112ce:	4682      	mov	sl, r0
 80112d0:	468b      	mov	fp, r1
 80112d2:	9b08      	ldr	r3, [sp, #32]
 80112d4:	b1b3      	cbz	r3, 8011304 <_strtod_l+0x604>
 80112d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80112da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80112de:	2b00      	cmp	r3, #0
 80112e0:	4659      	mov	r1, fp
 80112e2:	dd0f      	ble.n	8011304 <_strtod_l+0x604>
 80112e4:	2b1f      	cmp	r3, #31
 80112e6:	dd55      	ble.n	8011394 <_strtod_l+0x694>
 80112e8:	2b34      	cmp	r3, #52	@ 0x34
 80112ea:	bfde      	ittt	le
 80112ec:	f04f 33ff 	movle.w	r3, #4294967295
 80112f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80112f4:	4093      	lslle	r3, r2
 80112f6:	f04f 0a00 	mov.w	sl, #0
 80112fa:	bfcc      	ite	gt
 80112fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011300:	ea03 0b01 	andle.w	fp, r3, r1
 8011304:	2200      	movs	r2, #0
 8011306:	2300      	movs	r3, #0
 8011308:	4650      	mov	r0, sl
 801130a:	4659      	mov	r1, fp
 801130c:	f7ef fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011310:	2800      	cmp	r0, #0
 8011312:	d1a6      	bne.n	8011262 <_strtod_l+0x562>
 8011314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801131a:	9805      	ldr	r0, [sp, #20]
 801131c:	462b      	mov	r3, r5
 801131e:	463a      	mov	r2, r7
 8011320:	f002 fd78 	bl	8013e14 <__s2b>
 8011324:	900a      	str	r0, [sp, #40]	@ 0x28
 8011326:	2800      	cmp	r0, #0
 8011328:	f43f af05 	beq.w	8011136 <_strtod_l+0x436>
 801132c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801132e:	2a00      	cmp	r2, #0
 8011330:	eba9 0308 	sub.w	r3, r9, r8
 8011334:	bfa8      	it	ge
 8011336:	2300      	movge	r3, #0
 8011338:	9312      	str	r3, [sp, #72]	@ 0x48
 801133a:	2400      	movs	r4, #0
 801133c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011340:	9316      	str	r3, [sp, #88]	@ 0x58
 8011342:	46a0      	mov	r8, r4
 8011344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011346:	9805      	ldr	r0, [sp, #20]
 8011348:	6859      	ldr	r1, [r3, #4]
 801134a:	f002 fcbb 	bl	8013cc4 <_Balloc>
 801134e:	4681      	mov	r9, r0
 8011350:	2800      	cmp	r0, #0
 8011352:	f43f aef4 	beq.w	801113e <_strtod_l+0x43e>
 8011356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011358:	691a      	ldr	r2, [r3, #16]
 801135a:	3202      	adds	r2, #2
 801135c:	f103 010c 	add.w	r1, r3, #12
 8011360:	0092      	lsls	r2, r2, #2
 8011362:	300c      	adds	r0, #12
 8011364:	f001 fa93 	bl	801288e <memcpy>
 8011368:	ec4b ab10 	vmov	d0, sl, fp
 801136c:	9805      	ldr	r0, [sp, #20]
 801136e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011370:	a91b      	add	r1, sp, #108	@ 0x6c
 8011372:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011376:	f003 f889 	bl	801448c <__d2b>
 801137a:	901a      	str	r0, [sp, #104]	@ 0x68
 801137c:	2800      	cmp	r0, #0
 801137e:	f43f aede 	beq.w	801113e <_strtod_l+0x43e>
 8011382:	9805      	ldr	r0, [sp, #20]
 8011384:	2101      	movs	r1, #1
 8011386:	f002 fddb 	bl	8013f40 <__i2b>
 801138a:	4680      	mov	r8, r0
 801138c:	b948      	cbnz	r0, 80113a2 <_strtod_l+0x6a2>
 801138e:	f04f 0800 	mov.w	r8, #0
 8011392:	e6d4      	b.n	801113e <_strtod_l+0x43e>
 8011394:	f04f 32ff 	mov.w	r2, #4294967295
 8011398:	fa02 f303 	lsl.w	r3, r2, r3
 801139c:	ea03 0a0a 	and.w	sl, r3, sl
 80113a0:	e7b0      	b.n	8011304 <_strtod_l+0x604>
 80113a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80113a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80113a6:	2d00      	cmp	r5, #0
 80113a8:	bfab      	itete	ge
 80113aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80113ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80113ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80113b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80113b2:	bfac      	ite	ge
 80113b4:	18ef      	addge	r7, r5, r3
 80113b6:	1b5e      	sublt	r6, r3, r5
 80113b8:	9b08      	ldr	r3, [sp, #32]
 80113ba:	1aed      	subs	r5, r5, r3
 80113bc:	4415      	add	r5, r2
 80113be:	4b66      	ldr	r3, [pc, #408]	@ (8011558 <_strtod_l+0x858>)
 80113c0:	3d01      	subs	r5, #1
 80113c2:	429d      	cmp	r5, r3
 80113c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80113c8:	da50      	bge.n	801146c <_strtod_l+0x76c>
 80113ca:	1b5b      	subs	r3, r3, r5
 80113cc:	2b1f      	cmp	r3, #31
 80113ce:	eba2 0203 	sub.w	r2, r2, r3
 80113d2:	f04f 0101 	mov.w	r1, #1
 80113d6:	dc3d      	bgt.n	8011454 <_strtod_l+0x754>
 80113d8:	fa01 f303 	lsl.w	r3, r1, r3
 80113dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113de:	2300      	movs	r3, #0
 80113e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80113e2:	18bd      	adds	r5, r7, r2
 80113e4:	9b08      	ldr	r3, [sp, #32]
 80113e6:	42af      	cmp	r7, r5
 80113e8:	4416      	add	r6, r2
 80113ea:	441e      	add	r6, r3
 80113ec:	463b      	mov	r3, r7
 80113ee:	bfa8      	it	ge
 80113f0:	462b      	movge	r3, r5
 80113f2:	42b3      	cmp	r3, r6
 80113f4:	bfa8      	it	ge
 80113f6:	4633      	movge	r3, r6
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	bfc2      	ittt	gt
 80113fc:	1aed      	subgt	r5, r5, r3
 80113fe:	1af6      	subgt	r6, r6, r3
 8011400:	1aff      	subgt	r7, r7, r3
 8011402:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011404:	2b00      	cmp	r3, #0
 8011406:	dd16      	ble.n	8011436 <_strtod_l+0x736>
 8011408:	4641      	mov	r1, r8
 801140a:	9805      	ldr	r0, [sp, #20]
 801140c:	461a      	mov	r2, r3
 801140e:	f002 fe57 	bl	80140c0 <__pow5mult>
 8011412:	4680      	mov	r8, r0
 8011414:	2800      	cmp	r0, #0
 8011416:	d0ba      	beq.n	801138e <_strtod_l+0x68e>
 8011418:	4601      	mov	r1, r0
 801141a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801141c:	9805      	ldr	r0, [sp, #20]
 801141e:	f002 fda5 	bl	8013f6c <__multiply>
 8011422:	900e      	str	r0, [sp, #56]	@ 0x38
 8011424:	2800      	cmp	r0, #0
 8011426:	f43f ae8a 	beq.w	801113e <_strtod_l+0x43e>
 801142a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801142c:	9805      	ldr	r0, [sp, #20]
 801142e:	f002 fc89 	bl	8013d44 <_Bfree>
 8011432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011434:	931a      	str	r3, [sp, #104]	@ 0x68
 8011436:	2d00      	cmp	r5, #0
 8011438:	dc1d      	bgt.n	8011476 <_strtod_l+0x776>
 801143a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801143c:	2b00      	cmp	r3, #0
 801143e:	dd23      	ble.n	8011488 <_strtod_l+0x788>
 8011440:	4649      	mov	r1, r9
 8011442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011444:	9805      	ldr	r0, [sp, #20]
 8011446:	f002 fe3b 	bl	80140c0 <__pow5mult>
 801144a:	4681      	mov	r9, r0
 801144c:	b9e0      	cbnz	r0, 8011488 <_strtod_l+0x788>
 801144e:	f04f 0900 	mov.w	r9, #0
 8011452:	e674      	b.n	801113e <_strtod_l+0x43e>
 8011454:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011458:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801145c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011460:	35e2      	adds	r5, #226	@ 0xe2
 8011462:	fa01 f305 	lsl.w	r3, r1, r5
 8011466:	9310      	str	r3, [sp, #64]	@ 0x40
 8011468:	9113      	str	r1, [sp, #76]	@ 0x4c
 801146a:	e7ba      	b.n	80113e2 <_strtod_l+0x6e2>
 801146c:	2300      	movs	r3, #0
 801146e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011470:	2301      	movs	r3, #1
 8011472:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011474:	e7b5      	b.n	80113e2 <_strtod_l+0x6e2>
 8011476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011478:	9805      	ldr	r0, [sp, #20]
 801147a:	462a      	mov	r2, r5
 801147c:	f002 fe7a 	bl	8014174 <__lshift>
 8011480:	901a      	str	r0, [sp, #104]	@ 0x68
 8011482:	2800      	cmp	r0, #0
 8011484:	d1d9      	bne.n	801143a <_strtod_l+0x73a>
 8011486:	e65a      	b.n	801113e <_strtod_l+0x43e>
 8011488:	2e00      	cmp	r6, #0
 801148a:	dd07      	ble.n	801149c <_strtod_l+0x79c>
 801148c:	4649      	mov	r1, r9
 801148e:	9805      	ldr	r0, [sp, #20]
 8011490:	4632      	mov	r2, r6
 8011492:	f002 fe6f 	bl	8014174 <__lshift>
 8011496:	4681      	mov	r9, r0
 8011498:	2800      	cmp	r0, #0
 801149a:	d0d8      	beq.n	801144e <_strtod_l+0x74e>
 801149c:	2f00      	cmp	r7, #0
 801149e:	dd08      	ble.n	80114b2 <_strtod_l+0x7b2>
 80114a0:	4641      	mov	r1, r8
 80114a2:	9805      	ldr	r0, [sp, #20]
 80114a4:	463a      	mov	r2, r7
 80114a6:	f002 fe65 	bl	8014174 <__lshift>
 80114aa:	4680      	mov	r8, r0
 80114ac:	2800      	cmp	r0, #0
 80114ae:	f43f ae46 	beq.w	801113e <_strtod_l+0x43e>
 80114b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114b4:	9805      	ldr	r0, [sp, #20]
 80114b6:	464a      	mov	r2, r9
 80114b8:	f002 fee4 	bl	8014284 <__mdiff>
 80114bc:	4604      	mov	r4, r0
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f ae3d 	beq.w	801113e <_strtod_l+0x43e>
 80114c4:	68c3      	ldr	r3, [r0, #12]
 80114c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80114c8:	2300      	movs	r3, #0
 80114ca:	60c3      	str	r3, [r0, #12]
 80114cc:	4641      	mov	r1, r8
 80114ce:	f002 febd 	bl	801424c <__mcmp>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	da46      	bge.n	8011564 <_strtod_l+0x864>
 80114d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114d8:	ea53 030a 	orrs.w	r3, r3, sl
 80114dc:	d16c      	bne.n	80115b8 <_strtod_l+0x8b8>
 80114de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d168      	bne.n	80115b8 <_strtod_l+0x8b8>
 80114e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80114ea:	0d1b      	lsrs	r3, r3, #20
 80114ec:	051b      	lsls	r3, r3, #20
 80114ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80114f2:	d961      	bls.n	80115b8 <_strtod_l+0x8b8>
 80114f4:	6963      	ldr	r3, [r4, #20]
 80114f6:	b913      	cbnz	r3, 80114fe <_strtod_l+0x7fe>
 80114f8:	6923      	ldr	r3, [r4, #16]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	dd5c      	ble.n	80115b8 <_strtod_l+0x8b8>
 80114fe:	4621      	mov	r1, r4
 8011500:	2201      	movs	r2, #1
 8011502:	9805      	ldr	r0, [sp, #20]
 8011504:	f002 fe36 	bl	8014174 <__lshift>
 8011508:	4641      	mov	r1, r8
 801150a:	4604      	mov	r4, r0
 801150c:	f002 fe9e 	bl	801424c <__mcmp>
 8011510:	2800      	cmp	r0, #0
 8011512:	dd51      	ble.n	80115b8 <_strtod_l+0x8b8>
 8011514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011518:	9a08      	ldr	r2, [sp, #32]
 801151a:	0d1b      	lsrs	r3, r3, #20
 801151c:	051b      	lsls	r3, r3, #20
 801151e:	2a00      	cmp	r2, #0
 8011520:	d06b      	beq.n	80115fa <_strtod_l+0x8fa>
 8011522:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011526:	d868      	bhi.n	80115fa <_strtod_l+0x8fa>
 8011528:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801152c:	f67f ae9d 	bls.w	801126a <_strtod_l+0x56a>
 8011530:	4b0a      	ldr	r3, [pc, #40]	@ (801155c <_strtod_l+0x85c>)
 8011532:	4650      	mov	r0, sl
 8011534:	4659      	mov	r1, fp
 8011536:	2200      	movs	r2, #0
 8011538:	f7ef f85e 	bl	80005f8 <__aeabi_dmul>
 801153c:	4b08      	ldr	r3, [pc, #32]	@ (8011560 <_strtod_l+0x860>)
 801153e:	400b      	ands	r3, r1
 8011540:	4682      	mov	sl, r0
 8011542:	468b      	mov	fp, r1
 8011544:	2b00      	cmp	r3, #0
 8011546:	f47f ae05 	bne.w	8011154 <_strtod_l+0x454>
 801154a:	9a05      	ldr	r2, [sp, #20]
 801154c:	2322      	movs	r3, #34	@ 0x22
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	e600      	b.n	8011154 <_strtod_l+0x454>
 8011552:	bf00      	nop
 8011554:	08015b08 	.word	0x08015b08
 8011558:	fffffc02 	.word	0xfffffc02
 801155c:	39500000 	.word	0x39500000
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011568:	d165      	bne.n	8011636 <_strtod_l+0x936>
 801156a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801156c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011570:	b35a      	cbz	r2, 80115ca <_strtod_l+0x8ca>
 8011572:	4a9f      	ldr	r2, [pc, #636]	@ (80117f0 <_strtod_l+0xaf0>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d12b      	bne.n	80115d0 <_strtod_l+0x8d0>
 8011578:	9b08      	ldr	r3, [sp, #32]
 801157a:	4651      	mov	r1, sl
 801157c:	b303      	cbz	r3, 80115c0 <_strtod_l+0x8c0>
 801157e:	4b9d      	ldr	r3, [pc, #628]	@ (80117f4 <_strtod_l+0xaf4>)
 8011580:	465a      	mov	r2, fp
 8011582:	4013      	ands	r3, r2
 8011584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011588:	f04f 32ff 	mov.w	r2, #4294967295
 801158c:	d81b      	bhi.n	80115c6 <_strtod_l+0x8c6>
 801158e:	0d1b      	lsrs	r3, r3, #20
 8011590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011594:	fa02 f303 	lsl.w	r3, r2, r3
 8011598:	4299      	cmp	r1, r3
 801159a:	d119      	bne.n	80115d0 <_strtod_l+0x8d0>
 801159c:	4b96      	ldr	r3, [pc, #600]	@ (80117f8 <_strtod_l+0xaf8>)
 801159e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d102      	bne.n	80115aa <_strtod_l+0x8aa>
 80115a4:	3101      	adds	r1, #1
 80115a6:	f43f adca 	beq.w	801113e <_strtod_l+0x43e>
 80115aa:	4b92      	ldr	r3, [pc, #584]	@ (80117f4 <_strtod_l+0xaf4>)
 80115ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115ae:	401a      	ands	r2, r3
 80115b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80115b4:	f04f 0a00 	mov.w	sl, #0
 80115b8:	9b08      	ldr	r3, [sp, #32]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1b8      	bne.n	8011530 <_strtod_l+0x830>
 80115be:	e5c9      	b.n	8011154 <_strtod_l+0x454>
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	e7e8      	b.n	8011598 <_strtod_l+0x898>
 80115c6:	4613      	mov	r3, r2
 80115c8:	e7e6      	b.n	8011598 <_strtod_l+0x898>
 80115ca:	ea53 030a 	orrs.w	r3, r3, sl
 80115ce:	d0a1      	beq.n	8011514 <_strtod_l+0x814>
 80115d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115d2:	b1db      	cbz	r3, 801160c <_strtod_l+0x90c>
 80115d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115d6:	4213      	tst	r3, r2
 80115d8:	d0ee      	beq.n	80115b8 <_strtod_l+0x8b8>
 80115da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115dc:	9a08      	ldr	r2, [sp, #32]
 80115de:	4650      	mov	r0, sl
 80115e0:	4659      	mov	r1, fp
 80115e2:	b1bb      	cbz	r3, 8011614 <_strtod_l+0x914>
 80115e4:	f7ff fb6c 	bl	8010cc0 <sulp>
 80115e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80115ec:	ec53 2b10 	vmov	r2, r3, d0
 80115f0:	f7ee fe4c 	bl	800028c <__adddf3>
 80115f4:	4682      	mov	sl, r0
 80115f6:	468b      	mov	fp, r1
 80115f8:	e7de      	b.n	80115b8 <_strtod_l+0x8b8>
 80115fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80115fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011606:	f04f 3aff 	mov.w	sl, #4294967295
 801160a:	e7d5      	b.n	80115b8 <_strtod_l+0x8b8>
 801160c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801160e:	ea13 0f0a 	tst.w	r3, sl
 8011612:	e7e1      	b.n	80115d8 <_strtod_l+0x8d8>
 8011614:	f7ff fb54 	bl	8010cc0 <sulp>
 8011618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801161c:	ec53 2b10 	vmov	r2, r3, d0
 8011620:	f7ee fe32 	bl	8000288 <__aeabi_dsub>
 8011624:	2200      	movs	r2, #0
 8011626:	2300      	movs	r3, #0
 8011628:	4682      	mov	sl, r0
 801162a:	468b      	mov	fp, r1
 801162c:	f7ef fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011630:	2800      	cmp	r0, #0
 8011632:	d0c1      	beq.n	80115b8 <_strtod_l+0x8b8>
 8011634:	e619      	b.n	801126a <_strtod_l+0x56a>
 8011636:	4641      	mov	r1, r8
 8011638:	4620      	mov	r0, r4
 801163a:	f002 ff7f 	bl	801453c <__ratio>
 801163e:	ec57 6b10 	vmov	r6, r7, d0
 8011642:	2200      	movs	r2, #0
 8011644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011648:	4630      	mov	r0, r6
 801164a:	4639      	mov	r1, r7
 801164c:	f7ef fa50 	bl	8000af0 <__aeabi_dcmple>
 8011650:	2800      	cmp	r0, #0
 8011652:	d06f      	beq.n	8011734 <_strtod_l+0xa34>
 8011654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011656:	2b00      	cmp	r3, #0
 8011658:	d17a      	bne.n	8011750 <_strtod_l+0xa50>
 801165a:	f1ba 0f00 	cmp.w	sl, #0
 801165e:	d158      	bne.n	8011712 <_strtod_l+0xa12>
 8011660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011666:	2b00      	cmp	r3, #0
 8011668:	d15a      	bne.n	8011720 <_strtod_l+0xa20>
 801166a:	4b64      	ldr	r3, [pc, #400]	@ (80117fc <_strtod_l+0xafc>)
 801166c:	2200      	movs	r2, #0
 801166e:	4630      	mov	r0, r6
 8011670:	4639      	mov	r1, r7
 8011672:	f7ef fa33 	bl	8000adc <__aeabi_dcmplt>
 8011676:	2800      	cmp	r0, #0
 8011678:	d159      	bne.n	801172e <_strtod_l+0xa2e>
 801167a:	4630      	mov	r0, r6
 801167c:	4639      	mov	r1, r7
 801167e:	4b60      	ldr	r3, [pc, #384]	@ (8011800 <_strtod_l+0xb00>)
 8011680:	2200      	movs	r2, #0
 8011682:	f7ee ffb9 	bl	80005f8 <__aeabi_dmul>
 8011686:	4606      	mov	r6, r0
 8011688:	460f      	mov	r7, r1
 801168a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801168e:	9606      	str	r6, [sp, #24]
 8011690:	9307      	str	r3, [sp, #28]
 8011692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011696:	4d57      	ldr	r5, [pc, #348]	@ (80117f4 <_strtod_l+0xaf4>)
 8011698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801169c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801169e:	401d      	ands	r5, r3
 80116a0:	4b58      	ldr	r3, [pc, #352]	@ (8011804 <_strtod_l+0xb04>)
 80116a2:	429d      	cmp	r5, r3
 80116a4:	f040 80b2 	bne.w	801180c <_strtod_l+0xb0c>
 80116a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80116ae:	ec4b ab10 	vmov	d0, sl, fp
 80116b2:	f002 fe7b 	bl	80143ac <__ulp>
 80116b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116ba:	ec51 0b10 	vmov	r0, r1, d0
 80116be:	f7ee ff9b 	bl	80005f8 <__aeabi_dmul>
 80116c2:	4652      	mov	r2, sl
 80116c4:	465b      	mov	r3, fp
 80116c6:	f7ee fde1 	bl	800028c <__adddf3>
 80116ca:	460b      	mov	r3, r1
 80116cc:	4949      	ldr	r1, [pc, #292]	@ (80117f4 <_strtod_l+0xaf4>)
 80116ce:	4a4e      	ldr	r2, [pc, #312]	@ (8011808 <_strtod_l+0xb08>)
 80116d0:	4019      	ands	r1, r3
 80116d2:	4291      	cmp	r1, r2
 80116d4:	4682      	mov	sl, r0
 80116d6:	d942      	bls.n	801175e <_strtod_l+0xa5e>
 80116d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80116da:	4b47      	ldr	r3, [pc, #284]	@ (80117f8 <_strtod_l+0xaf8>)
 80116dc:	429a      	cmp	r2, r3
 80116de:	d103      	bne.n	80116e8 <_strtod_l+0x9e8>
 80116e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116e2:	3301      	adds	r3, #1
 80116e4:	f43f ad2b 	beq.w	801113e <_strtod_l+0x43e>
 80116e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80117f8 <_strtod_l+0xaf8>
 80116ec:	f04f 3aff 	mov.w	sl, #4294967295
 80116f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116f2:	9805      	ldr	r0, [sp, #20]
 80116f4:	f002 fb26 	bl	8013d44 <_Bfree>
 80116f8:	9805      	ldr	r0, [sp, #20]
 80116fa:	4649      	mov	r1, r9
 80116fc:	f002 fb22 	bl	8013d44 <_Bfree>
 8011700:	9805      	ldr	r0, [sp, #20]
 8011702:	4641      	mov	r1, r8
 8011704:	f002 fb1e 	bl	8013d44 <_Bfree>
 8011708:	9805      	ldr	r0, [sp, #20]
 801170a:	4621      	mov	r1, r4
 801170c:	f002 fb1a 	bl	8013d44 <_Bfree>
 8011710:	e618      	b.n	8011344 <_strtod_l+0x644>
 8011712:	f1ba 0f01 	cmp.w	sl, #1
 8011716:	d103      	bne.n	8011720 <_strtod_l+0xa20>
 8011718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801171a:	2b00      	cmp	r3, #0
 801171c:	f43f ada5 	beq.w	801126a <_strtod_l+0x56a>
 8011720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80117d0 <_strtod_l+0xad0>
 8011724:	4f35      	ldr	r7, [pc, #212]	@ (80117fc <_strtod_l+0xafc>)
 8011726:	ed8d 7b06 	vstr	d7, [sp, #24]
 801172a:	2600      	movs	r6, #0
 801172c:	e7b1      	b.n	8011692 <_strtod_l+0x992>
 801172e:	4f34      	ldr	r7, [pc, #208]	@ (8011800 <_strtod_l+0xb00>)
 8011730:	2600      	movs	r6, #0
 8011732:	e7aa      	b.n	801168a <_strtod_l+0x98a>
 8011734:	4b32      	ldr	r3, [pc, #200]	@ (8011800 <_strtod_l+0xb00>)
 8011736:	4630      	mov	r0, r6
 8011738:	4639      	mov	r1, r7
 801173a:	2200      	movs	r2, #0
 801173c:	f7ee ff5c 	bl	80005f8 <__aeabi_dmul>
 8011740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011742:	4606      	mov	r6, r0
 8011744:	460f      	mov	r7, r1
 8011746:	2b00      	cmp	r3, #0
 8011748:	d09f      	beq.n	801168a <_strtod_l+0x98a>
 801174a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801174e:	e7a0      	b.n	8011692 <_strtod_l+0x992>
 8011750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80117d8 <_strtod_l+0xad8>
 8011754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011758:	ec57 6b17 	vmov	r6, r7, d7
 801175c:	e799      	b.n	8011692 <_strtod_l+0x992>
 801175e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011762:	9b08      	ldr	r3, [sp, #32]
 8011764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1c1      	bne.n	80116f0 <_strtod_l+0x9f0>
 801176c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011770:	0d1b      	lsrs	r3, r3, #20
 8011772:	051b      	lsls	r3, r3, #20
 8011774:	429d      	cmp	r5, r3
 8011776:	d1bb      	bne.n	80116f0 <_strtod_l+0x9f0>
 8011778:	4630      	mov	r0, r6
 801177a:	4639      	mov	r1, r7
 801177c:	f7ef fa4c 	bl	8000c18 <__aeabi_d2lz>
 8011780:	f7ee ff0c 	bl	800059c <__aeabi_l2d>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4630      	mov	r0, r6
 801178a:	4639      	mov	r1, r7
 801178c:	f7ee fd7c 	bl	8000288 <__aeabi_dsub>
 8011790:	460b      	mov	r3, r1
 8011792:	4602      	mov	r2, r0
 8011794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801179c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801179e:	ea46 060a 	orr.w	r6, r6, sl
 80117a2:	431e      	orrs	r6, r3
 80117a4:	d06f      	beq.n	8011886 <_strtod_l+0xb86>
 80117a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80117e0 <_strtod_l+0xae0>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	f7ef f996 	bl	8000adc <__aeabi_dcmplt>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	f47f accf 	bne.w	8011154 <_strtod_l+0x454>
 80117b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80117e8 <_strtod_l+0xae8>)
 80117b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117c0:	f7ef f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d093      	beq.n	80116f0 <_strtod_l+0x9f0>
 80117c8:	e4c4      	b.n	8011154 <_strtod_l+0x454>
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	00000000 	.word	0x00000000
 80117d4:	bff00000 	.word	0xbff00000
 80117d8:	00000000 	.word	0x00000000
 80117dc:	3ff00000 	.word	0x3ff00000
 80117e0:	94a03595 	.word	0x94a03595
 80117e4:	3fdfffff 	.word	0x3fdfffff
 80117e8:	35afe535 	.word	0x35afe535
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	000fffff 	.word	0x000fffff
 80117f4:	7ff00000 	.word	0x7ff00000
 80117f8:	7fefffff 	.word	0x7fefffff
 80117fc:	3ff00000 	.word	0x3ff00000
 8011800:	3fe00000 	.word	0x3fe00000
 8011804:	7fe00000 	.word	0x7fe00000
 8011808:	7c9fffff 	.word	0x7c9fffff
 801180c:	9b08      	ldr	r3, [sp, #32]
 801180e:	b323      	cbz	r3, 801185a <_strtod_l+0xb5a>
 8011810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011814:	d821      	bhi.n	801185a <_strtod_l+0xb5a>
 8011816:	a328      	add	r3, pc, #160	@ (adr r3, 80118b8 <_strtod_l+0xbb8>)
 8011818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181c:	4630      	mov	r0, r6
 801181e:	4639      	mov	r1, r7
 8011820:	f7ef f966 	bl	8000af0 <__aeabi_dcmple>
 8011824:	b1a0      	cbz	r0, 8011850 <_strtod_l+0xb50>
 8011826:	4639      	mov	r1, r7
 8011828:	4630      	mov	r0, r6
 801182a:	f7ef f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 801182e:	2801      	cmp	r0, #1
 8011830:	bf38      	it	cc
 8011832:	2001      	movcc	r0, #1
 8011834:	f7ee fe66 	bl	8000504 <__aeabi_ui2d>
 8011838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801183a:	4606      	mov	r6, r0
 801183c:	460f      	mov	r7, r1
 801183e:	b9fb      	cbnz	r3, 8011880 <_strtod_l+0xb80>
 8011840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011844:	9014      	str	r0, [sp, #80]	@ 0x50
 8011846:	9315      	str	r3, [sp, #84]	@ 0x54
 8011848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801184c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011856:	1b5b      	subs	r3, r3, r5
 8011858:	9311      	str	r3, [sp, #68]	@ 0x44
 801185a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801185e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011862:	f002 fda3 	bl	80143ac <__ulp>
 8011866:	4650      	mov	r0, sl
 8011868:	ec53 2b10 	vmov	r2, r3, d0
 801186c:	4659      	mov	r1, fp
 801186e:	f7ee fec3 	bl	80005f8 <__aeabi_dmul>
 8011872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011876:	f7ee fd09 	bl	800028c <__adddf3>
 801187a:	4682      	mov	sl, r0
 801187c:	468b      	mov	fp, r1
 801187e:	e770      	b.n	8011762 <_strtod_l+0xa62>
 8011880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011884:	e7e0      	b.n	8011848 <_strtod_l+0xb48>
 8011886:	a30e      	add	r3, pc, #56	@ (adr r3, 80118c0 <_strtod_l+0xbc0>)
 8011888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188c:	f7ef f926 	bl	8000adc <__aeabi_dcmplt>
 8011890:	e798      	b.n	80117c4 <_strtod_l+0xac4>
 8011892:	2300      	movs	r3, #0
 8011894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	f7ff ba6d 	b.w	8010d7a <_strtod_l+0x7a>
 80118a0:	2a65      	cmp	r2, #101	@ 0x65
 80118a2:	f43f ab66 	beq.w	8010f72 <_strtod_l+0x272>
 80118a6:	2a45      	cmp	r2, #69	@ 0x45
 80118a8:	f43f ab63 	beq.w	8010f72 <_strtod_l+0x272>
 80118ac:	2301      	movs	r3, #1
 80118ae:	f7ff bb9e 	b.w	8010fee <_strtod_l+0x2ee>
 80118b2:	bf00      	nop
 80118b4:	f3af 8000 	nop.w
 80118b8:	ffc00000 	.word	0xffc00000
 80118bc:	41dfffff 	.word	0x41dfffff
 80118c0:	94a03595 	.word	0x94a03595
 80118c4:	3fcfffff 	.word	0x3fcfffff

080118c8 <strtod>:
 80118c8:	460a      	mov	r2, r1
 80118ca:	4601      	mov	r1, r0
 80118cc:	4802      	ldr	r0, [pc, #8]	@ (80118d8 <strtod+0x10>)
 80118ce:	4b03      	ldr	r3, [pc, #12]	@ (80118dc <strtod+0x14>)
 80118d0:	6800      	ldr	r0, [r0, #0]
 80118d2:	f7ff ba15 	b.w	8010d00 <_strtod_l>
 80118d6:	bf00      	nop
 80118d8:	200003d4 	.word	0x200003d4
 80118dc:	20000268 	.word	0x20000268

080118e0 <_strtol_l.constprop.0>:
 80118e0:	2b24      	cmp	r3, #36	@ 0x24
 80118e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e6:	4686      	mov	lr, r0
 80118e8:	4690      	mov	r8, r2
 80118ea:	d801      	bhi.n	80118f0 <_strtol_l.constprop.0+0x10>
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d106      	bne.n	80118fe <_strtol_l.constprop.0+0x1e>
 80118f0:	f000 ff98 	bl	8012824 <__errno>
 80118f4:	2316      	movs	r3, #22
 80118f6:	6003      	str	r3, [r0, #0]
 80118f8:	2000      	movs	r0, #0
 80118fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118fe:	4834      	ldr	r0, [pc, #208]	@ (80119d0 <_strtol_l.constprop.0+0xf0>)
 8011900:	460d      	mov	r5, r1
 8011902:	462a      	mov	r2, r5
 8011904:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011908:	5d06      	ldrb	r6, [r0, r4]
 801190a:	f016 0608 	ands.w	r6, r6, #8
 801190e:	d1f8      	bne.n	8011902 <_strtol_l.constprop.0+0x22>
 8011910:	2c2d      	cmp	r4, #45	@ 0x2d
 8011912:	d12d      	bne.n	8011970 <_strtol_l.constprop.0+0x90>
 8011914:	782c      	ldrb	r4, [r5, #0]
 8011916:	2601      	movs	r6, #1
 8011918:	1c95      	adds	r5, r2, #2
 801191a:	f033 0210 	bics.w	r2, r3, #16
 801191e:	d109      	bne.n	8011934 <_strtol_l.constprop.0+0x54>
 8011920:	2c30      	cmp	r4, #48	@ 0x30
 8011922:	d12a      	bne.n	801197a <_strtol_l.constprop.0+0x9a>
 8011924:	782a      	ldrb	r2, [r5, #0]
 8011926:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801192a:	2a58      	cmp	r2, #88	@ 0x58
 801192c:	d125      	bne.n	801197a <_strtol_l.constprop.0+0x9a>
 801192e:	786c      	ldrb	r4, [r5, #1]
 8011930:	2310      	movs	r3, #16
 8011932:	3502      	adds	r5, #2
 8011934:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011938:	f10c 3cff 	add.w	ip, ip, #4294967295
 801193c:	2200      	movs	r2, #0
 801193e:	fbbc f9f3 	udiv	r9, ip, r3
 8011942:	4610      	mov	r0, r2
 8011944:	fb03 ca19 	mls	sl, r3, r9, ip
 8011948:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801194c:	2f09      	cmp	r7, #9
 801194e:	d81b      	bhi.n	8011988 <_strtol_l.constprop.0+0xa8>
 8011950:	463c      	mov	r4, r7
 8011952:	42a3      	cmp	r3, r4
 8011954:	dd27      	ble.n	80119a6 <_strtol_l.constprop.0+0xc6>
 8011956:	1c57      	adds	r7, r2, #1
 8011958:	d007      	beq.n	801196a <_strtol_l.constprop.0+0x8a>
 801195a:	4581      	cmp	r9, r0
 801195c:	d320      	bcc.n	80119a0 <_strtol_l.constprop.0+0xc0>
 801195e:	d101      	bne.n	8011964 <_strtol_l.constprop.0+0x84>
 8011960:	45a2      	cmp	sl, r4
 8011962:	db1d      	blt.n	80119a0 <_strtol_l.constprop.0+0xc0>
 8011964:	fb00 4003 	mla	r0, r0, r3, r4
 8011968:	2201      	movs	r2, #1
 801196a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801196e:	e7eb      	b.n	8011948 <_strtol_l.constprop.0+0x68>
 8011970:	2c2b      	cmp	r4, #43	@ 0x2b
 8011972:	bf04      	itt	eq
 8011974:	782c      	ldrbeq	r4, [r5, #0]
 8011976:	1c95      	addeq	r5, r2, #2
 8011978:	e7cf      	b.n	801191a <_strtol_l.constprop.0+0x3a>
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1da      	bne.n	8011934 <_strtol_l.constprop.0+0x54>
 801197e:	2c30      	cmp	r4, #48	@ 0x30
 8011980:	bf0c      	ite	eq
 8011982:	2308      	moveq	r3, #8
 8011984:	230a      	movne	r3, #10
 8011986:	e7d5      	b.n	8011934 <_strtol_l.constprop.0+0x54>
 8011988:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801198c:	2f19      	cmp	r7, #25
 801198e:	d801      	bhi.n	8011994 <_strtol_l.constprop.0+0xb4>
 8011990:	3c37      	subs	r4, #55	@ 0x37
 8011992:	e7de      	b.n	8011952 <_strtol_l.constprop.0+0x72>
 8011994:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011998:	2f19      	cmp	r7, #25
 801199a:	d804      	bhi.n	80119a6 <_strtol_l.constprop.0+0xc6>
 801199c:	3c57      	subs	r4, #87	@ 0x57
 801199e:	e7d8      	b.n	8011952 <_strtol_l.constprop.0+0x72>
 80119a0:	f04f 32ff 	mov.w	r2, #4294967295
 80119a4:	e7e1      	b.n	801196a <_strtol_l.constprop.0+0x8a>
 80119a6:	1c53      	adds	r3, r2, #1
 80119a8:	d108      	bne.n	80119bc <_strtol_l.constprop.0+0xdc>
 80119aa:	2322      	movs	r3, #34	@ 0x22
 80119ac:	f8ce 3000 	str.w	r3, [lr]
 80119b0:	4660      	mov	r0, ip
 80119b2:	f1b8 0f00 	cmp.w	r8, #0
 80119b6:	d0a0      	beq.n	80118fa <_strtol_l.constprop.0+0x1a>
 80119b8:	1e69      	subs	r1, r5, #1
 80119ba:	e006      	b.n	80119ca <_strtol_l.constprop.0+0xea>
 80119bc:	b106      	cbz	r6, 80119c0 <_strtol_l.constprop.0+0xe0>
 80119be:	4240      	negs	r0, r0
 80119c0:	f1b8 0f00 	cmp.w	r8, #0
 80119c4:	d099      	beq.n	80118fa <_strtol_l.constprop.0+0x1a>
 80119c6:	2a00      	cmp	r2, #0
 80119c8:	d1f6      	bne.n	80119b8 <_strtol_l.constprop.0+0xd8>
 80119ca:	f8c8 1000 	str.w	r1, [r8]
 80119ce:	e794      	b.n	80118fa <_strtol_l.constprop.0+0x1a>
 80119d0:	08015b31 	.word	0x08015b31

080119d4 <strtol>:
 80119d4:	4613      	mov	r3, r2
 80119d6:	460a      	mov	r2, r1
 80119d8:	4601      	mov	r1, r0
 80119da:	4802      	ldr	r0, [pc, #8]	@ (80119e4 <strtol+0x10>)
 80119dc:	6800      	ldr	r0, [r0, #0]
 80119de:	f7ff bf7f 	b.w	80118e0 <_strtol_l.constprop.0>
 80119e2:	bf00      	nop
 80119e4:	200003d4 	.word	0x200003d4

080119e8 <__cvt>:
 80119e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119ec:	ec57 6b10 	vmov	r6, r7, d0
 80119f0:	2f00      	cmp	r7, #0
 80119f2:	460c      	mov	r4, r1
 80119f4:	4619      	mov	r1, r3
 80119f6:	463b      	mov	r3, r7
 80119f8:	bfbb      	ittet	lt
 80119fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80119fe:	461f      	movlt	r7, r3
 8011a00:	2300      	movge	r3, #0
 8011a02:	232d      	movlt	r3, #45	@ 0x2d
 8011a04:	700b      	strb	r3, [r1, #0]
 8011a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011a0c:	4691      	mov	r9, r2
 8011a0e:	f023 0820 	bic.w	r8, r3, #32
 8011a12:	bfbc      	itt	lt
 8011a14:	4632      	movlt	r2, r6
 8011a16:	4616      	movlt	r6, r2
 8011a18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011a1c:	d005      	beq.n	8011a2a <__cvt+0x42>
 8011a1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011a22:	d100      	bne.n	8011a26 <__cvt+0x3e>
 8011a24:	3401      	adds	r4, #1
 8011a26:	2102      	movs	r1, #2
 8011a28:	e000      	b.n	8011a2c <__cvt+0x44>
 8011a2a:	2103      	movs	r1, #3
 8011a2c:	ab03      	add	r3, sp, #12
 8011a2e:	9301      	str	r3, [sp, #4]
 8011a30:	ab02      	add	r3, sp, #8
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	ec47 6b10 	vmov	d0, r6, r7
 8011a38:	4653      	mov	r3, sl
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	f000 ffe8 	bl	8012a10 <_dtoa_r>
 8011a40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011a44:	4605      	mov	r5, r0
 8011a46:	d119      	bne.n	8011a7c <__cvt+0x94>
 8011a48:	f019 0f01 	tst.w	r9, #1
 8011a4c:	d00e      	beq.n	8011a6c <__cvt+0x84>
 8011a4e:	eb00 0904 	add.w	r9, r0, r4
 8011a52:	2200      	movs	r2, #0
 8011a54:	2300      	movs	r3, #0
 8011a56:	4630      	mov	r0, r6
 8011a58:	4639      	mov	r1, r7
 8011a5a:	f7ef f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a5e:	b108      	cbz	r0, 8011a64 <__cvt+0x7c>
 8011a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a64:	2230      	movs	r2, #48	@ 0x30
 8011a66:	9b03      	ldr	r3, [sp, #12]
 8011a68:	454b      	cmp	r3, r9
 8011a6a:	d31e      	bcc.n	8011aaa <__cvt+0xc2>
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a70:	1b5b      	subs	r3, r3, r5
 8011a72:	4628      	mov	r0, r5
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	b004      	add	sp, #16
 8011a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011a80:	eb00 0904 	add.w	r9, r0, r4
 8011a84:	d1e5      	bne.n	8011a52 <__cvt+0x6a>
 8011a86:	7803      	ldrb	r3, [r0, #0]
 8011a88:	2b30      	cmp	r3, #48	@ 0x30
 8011a8a:	d10a      	bne.n	8011aa2 <__cvt+0xba>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4630      	mov	r0, r6
 8011a92:	4639      	mov	r1, r7
 8011a94:	f7ef f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a98:	b918      	cbnz	r0, 8011aa2 <__cvt+0xba>
 8011a9a:	f1c4 0401 	rsb	r4, r4, #1
 8011a9e:	f8ca 4000 	str.w	r4, [sl]
 8011aa2:	f8da 3000 	ldr.w	r3, [sl]
 8011aa6:	4499      	add	r9, r3
 8011aa8:	e7d3      	b.n	8011a52 <__cvt+0x6a>
 8011aaa:	1c59      	adds	r1, r3, #1
 8011aac:	9103      	str	r1, [sp, #12]
 8011aae:	701a      	strb	r2, [r3, #0]
 8011ab0:	e7d9      	b.n	8011a66 <__cvt+0x7e>

08011ab2 <__exponent>:
 8011ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ab4:	2900      	cmp	r1, #0
 8011ab6:	bfba      	itte	lt
 8011ab8:	4249      	neglt	r1, r1
 8011aba:	232d      	movlt	r3, #45	@ 0x2d
 8011abc:	232b      	movge	r3, #43	@ 0x2b
 8011abe:	2909      	cmp	r1, #9
 8011ac0:	7002      	strb	r2, [r0, #0]
 8011ac2:	7043      	strb	r3, [r0, #1]
 8011ac4:	dd29      	ble.n	8011b1a <__exponent+0x68>
 8011ac6:	f10d 0307 	add.w	r3, sp, #7
 8011aca:	461d      	mov	r5, r3
 8011acc:	270a      	movs	r7, #10
 8011ace:	461a      	mov	r2, r3
 8011ad0:	fbb1 f6f7 	udiv	r6, r1, r7
 8011ad4:	fb07 1416 	mls	r4, r7, r6, r1
 8011ad8:	3430      	adds	r4, #48	@ 0x30
 8011ada:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011ade:	460c      	mov	r4, r1
 8011ae0:	2c63      	cmp	r4, #99	@ 0x63
 8011ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ae6:	4631      	mov	r1, r6
 8011ae8:	dcf1      	bgt.n	8011ace <__exponent+0x1c>
 8011aea:	3130      	adds	r1, #48	@ 0x30
 8011aec:	1e94      	subs	r4, r2, #2
 8011aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011af2:	1c41      	adds	r1, r0, #1
 8011af4:	4623      	mov	r3, r4
 8011af6:	42ab      	cmp	r3, r5
 8011af8:	d30a      	bcc.n	8011b10 <__exponent+0x5e>
 8011afa:	f10d 0309 	add.w	r3, sp, #9
 8011afe:	1a9b      	subs	r3, r3, r2
 8011b00:	42ac      	cmp	r4, r5
 8011b02:	bf88      	it	hi
 8011b04:	2300      	movhi	r3, #0
 8011b06:	3302      	adds	r3, #2
 8011b08:	4403      	add	r3, r0
 8011b0a:	1a18      	subs	r0, r3, r0
 8011b0c:	b003      	add	sp, #12
 8011b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011b14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011b18:	e7ed      	b.n	8011af6 <__exponent+0x44>
 8011b1a:	2330      	movs	r3, #48	@ 0x30
 8011b1c:	3130      	adds	r1, #48	@ 0x30
 8011b1e:	7083      	strb	r3, [r0, #2]
 8011b20:	70c1      	strb	r1, [r0, #3]
 8011b22:	1d03      	adds	r3, r0, #4
 8011b24:	e7f1      	b.n	8011b0a <__exponent+0x58>
	...

08011b28 <_printf_float>:
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2c:	b08d      	sub	sp, #52	@ 0x34
 8011b2e:	460c      	mov	r4, r1
 8011b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011b34:	4616      	mov	r6, r2
 8011b36:	461f      	mov	r7, r3
 8011b38:	4605      	mov	r5, r0
 8011b3a:	f000 fdc3 	bl	80126c4 <_localeconv_r>
 8011b3e:	6803      	ldr	r3, [r0, #0]
 8011b40:	9304      	str	r3, [sp, #16]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ee fb94 	bl	8000270 <strlen>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8011b50:	9005      	str	r0, [sp, #20]
 8011b52:	3307      	adds	r3, #7
 8011b54:	f023 0307 	bic.w	r3, r3, #7
 8011b58:	f103 0208 	add.w	r2, r3, #8
 8011b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011b60:	f8d4 b000 	ldr.w	fp, [r4]
 8011b64:	f8c8 2000 	str.w	r2, [r8]
 8011b68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011b70:	9307      	str	r3, [sp, #28]
 8011b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8011b76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8011df0 <_printf_float+0x2c8>)
 8011b80:	f04f 32ff 	mov.w	r2, #4294967295
 8011b84:	f7ee ffd2 	bl	8000b2c <__aeabi_dcmpun>
 8011b88:	bb70      	cbnz	r0, 8011be8 <_printf_float+0xc0>
 8011b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b8e:	4b98      	ldr	r3, [pc, #608]	@ (8011df0 <_printf_float+0x2c8>)
 8011b90:	f04f 32ff 	mov.w	r2, #4294967295
 8011b94:	f7ee ffac 	bl	8000af0 <__aeabi_dcmple>
 8011b98:	bb30      	cbnz	r0, 8011be8 <_printf_float+0xc0>
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	4640      	mov	r0, r8
 8011ba0:	4649      	mov	r1, r9
 8011ba2:	f7ee ff9b 	bl	8000adc <__aeabi_dcmplt>
 8011ba6:	b110      	cbz	r0, 8011bae <_printf_float+0x86>
 8011ba8:	232d      	movs	r3, #45	@ 0x2d
 8011baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bae:	4a91      	ldr	r2, [pc, #580]	@ (8011df4 <_printf_float+0x2cc>)
 8011bb0:	4b91      	ldr	r3, [pc, #580]	@ (8011df8 <_printf_float+0x2d0>)
 8011bb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011bb6:	bf94      	ite	ls
 8011bb8:	4690      	movls	r8, r2
 8011bba:	4698      	movhi	r8, r3
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	6123      	str	r3, [r4, #16]
 8011bc0:	f02b 0304 	bic.w	r3, fp, #4
 8011bc4:	6023      	str	r3, [r4, #0]
 8011bc6:	f04f 0900 	mov.w	r9, #0
 8011bca:	9700      	str	r7, [sp, #0]
 8011bcc:	4633      	mov	r3, r6
 8011bce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f000 f9d2 	bl	8011f7c <_printf_common>
 8011bd8:	3001      	adds	r0, #1
 8011bda:	f040 808d 	bne.w	8011cf8 <_printf_float+0x1d0>
 8011bde:	f04f 30ff 	mov.w	r0, #4294967295
 8011be2:	b00d      	add	sp, #52	@ 0x34
 8011be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be8:	4642      	mov	r2, r8
 8011bea:	464b      	mov	r3, r9
 8011bec:	4640      	mov	r0, r8
 8011bee:	4649      	mov	r1, r9
 8011bf0:	f7ee ff9c 	bl	8000b2c <__aeabi_dcmpun>
 8011bf4:	b140      	cbz	r0, 8011c08 <_printf_float+0xe0>
 8011bf6:	464b      	mov	r3, r9
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	bfbc      	itt	lt
 8011bfc:	232d      	movlt	r3, #45	@ 0x2d
 8011bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011c02:	4a7e      	ldr	r2, [pc, #504]	@ (8011dfc <_printf_float+0x2d4>)
 8011c04:	4b7e      	ldr	r3, [pc, #504]	@ (8011e00 <_printf_float+0x2d8>)
 8011c06:	e7d4      	b.n	8011bb2 <_printf_float+0x8a>
 8011c08:	6863      	ldr	r3, [r4, #4]
 8011c0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011c0e:	9206      	str	r2, [sp, #24]
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	d13b      	bne.n	8011c8c <_printf_float+0x164>
 8011c14:	2306      	movs	r3, #6
 8011c16:	6063      	str	r3, [r4, #4]
 8011c18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	6022      	str	r2, [r4, #0]
 8011c20:	9303      	str	r3, [sp, #12]
 8011c22:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011c28:	ab09      	add	r3, sp, #36	@ 0x24
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	6861      	ldr	r1, [r4, #4]
 8011c2e:	ec49 8b10 	vmov	d0, r8, r9
 8011c32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011c36:	4628      	mov	r0, r5
 8011c38:	f7ff fed6 	bl	80119e8 <__cvt>
 8011c3c:	9b06      	ldr	r3, [sp, #24]
 8011c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c40:	2b47      	cmp	r3, #71	@ 0x47
 8011c42:	4680      	mov	r8, r0
 8011c44:	d129      	bne.n	8011c9a <_printf_float+0x172>
 8011c46:	1cc8      	adds	r0, r1, #3
 8011c48:	db02      	blt.n	8011c50 <_printf_float+0x128>
 8011c4a:	6863      	ldr	r3, [r4, #4]
 8011c4c:	4299      	cmp	r1, r3
 8011c4e:	dd41      	ble.n	8011cd4 <_printf_float+0x1ac>
 8011c50:	f1aa 0a02 	sub.w	sl, sl, #2
 8011c54:	fa5f fa8a 	uxtb.w	sl, sl
 8011c58:	3901      	subs	r1, #1
 8011c5a:	4652      	mov	r2, sl
 8011c5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8011c62:	f7ff ff26 	bl	8011ab2 <__exponent>
 8011c66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c68:	1813      	adds	r3, r2, r0
 8011c6a:	2a01      	cmp	r2, #1
 8011c6c:	4681      	mov	r9, r0
 8011c6e:	6123      	str	r3, [r4, #16]
 8011c70:	dc02      	bgt.n	8011c78 <_printf_float+0x150>
 8011c72:	6822      	ldr	r2, [r4, #0]
 8011c74:	07d2      	lsls	r2, r2, #31
 8011c76:	d501      	bpl.n	8011c7c <_printf_float+0x154>
 8011c78:	3301      	adds	r3, #1
 8011c7a:	6123      	str	r3, [r4, #16]
 8011c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d0a2      	beq.n	8011bca <_printf_float+0xa2>
 8011c84:	232d      	movs	r3, #45	@ 0x2d
 8011c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c8a:	e79e      	b.n	8011bca <_printf_float+0xa2>
 8011c8c:	9a06      	ldr	r2, [sp, #24]
 8011c8e:	2a47      	cmp	r2, #71	@ 0x47
 8011c90:	d1c2      	bne.n	8011c18 <_printf_float+0xf0>
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1c0      	bne.n	8011c18 <_printf_float+0xf0>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e7bd      	b.n	8011c16 <_printf_float+0xee>
 8011c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011c9e:	d9db      	bls.n	8011c58 <_printf_float+0x130>
 8011ca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011ca4:	d118      	bne.n	8011cd8 <_printf_float+0x1b0>
 8011ca6:	2900      	cmp	r1, #0
 8011ca8:	6863      	ldr	r3, [r4, #4]
 8011caa:	dd0b      	ble.n	8011cc4 <_printf_float+0x19c>
 8011cac:	6121      	str	r1, [r4, #16]
 8011cae:	b913      	cbnz	r3, 8011cb6 <_printf_float+0x18e>
 8011cb0:	6822      	ldr	r2, [r4, #0]
 8011cb2:	07d0      	lsls	r0, r2, #31
 8011cb4:	d502      	bpl.n	8011cbc <_printf_float+0x194>
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	440b      	add	r3, r1
 8011cba:	6123      	str	r3, [r4, #16]
 8011cbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011cbe:	f04f 0900 	mov.w	r9, #0
 8011cc2:	e7db      	b.n	8011c7c <_printf_float+0x154>
 8011cc4:	b913      	cbnz	r3, 8011ccc <_printf_float+0x1a4>
 8011cc6:	6822      	ldr	r2, [r4, #0]
 8011cc8:	07d2      	lsls	r2, r2, #31
 8011cca:	d501      	bpl.n	8011cd0 <_printf_float+0x1a8>
 8011ccc:	3302      	adds	r3, #2
 8011cce:	e7f4      	b.n	8011cba <_printf_float+0x192>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e7f2      	b.n	8011cba <_printf_float+0x192>
 8011cd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cda:	4299      	cmp	r1, r3
 8011cdc:	db05      	blt.n	8011cea <_printf_float+0x1c2>
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	6121      	str	r1, [r4, #16]
 8011ce2:	07d8      	lsls	r0, r3, #31
 8011ce4:	d5ea      	bpl.n	8011cbc <_printf_float+0x194>
 8011ce6:	1c4b      	adds	r3, r1, #1
 8011ce8:	e7e7      	b.n	8011cba <_printf_float+0x192>
 8011cea:	2900      	cmp	r1, #0
 8011cec:	bfd4      	ite	le
 8011cee:	f1c1 0202 	rsble	r2, r1, #2
 8011cf2:	2201      	movgt	r2, #1
 8011cf4:	4413      	add	r3, r2
 8011cf6:	e7e0      	b.n	8011cba <_printf_float+0x192>
 8011cf8:	6823      	ldr	r3, [r4, #0]
 8011cfa:	055a      	lsls	r2, r3, #21
 8011cfc:	d407      	bmi.n	8011d0e <_printf_float+0x1e6>
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	4642      	mov	r2, r8
 8011d02:	4631      	mov	r1, r6
 8011d04:	4628      	mov	r0, r5
 8011d06:	47b8      	blx	r7
 8011d08:	3001      	adds	r0, #1
 8011d0a:	d12b      	bne.n	8011d64 <_printf_float+0x23c>
 8011d0c:	e767      	b.n	8011bde <_printf_float+0xb6>
 8011d0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011d12:	f240 80dd 	bls.w	8011ed0 <_printf_float+0x3a8>
 8011d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f7ee fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d033      	beq.n	8011d8e <_printf_float+0x266>
 8011d26:	4a37      	ldr	r2, [pc, #220]	@ (8011e04 <_printf_float+0x2dc>)
 8011d28:	2301      	movs	r3, #1
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	47b8      	blx	r7
 8011d30:	3001      	adds	r0, #1
 8011d32:	f43f af54 	beq.w	8011bde <_printf_float+0xb6>
 8011d36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011d3a:	4543      	cmp	r3, r8
 8011d3c:	db02      	blt.n	8011d44 <_printf_float+0x21c>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	07d8      	lsls	r0, r3, #31
 8011d42:	d50f      	bpl.n	8011d64 <_printf_float+0x23c>
 8011d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	47b8      	blx	r7
 8011d4e:	3001      	adds	r0, #1
 8011d50:	f43f af45 	beq.w	8011bde <_printf_float+0xb6>
 8011d54:	f04f 0900 	mov.w	r9, #0
 8011d58:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d5c:	f104 0a1a 	add.w	sl, r4, #26
 8011d60:	45c8      	cmp	r8, r9
 8011d62:	dc09      	bgt.n	8011d78 <_printf_float+0x250>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	079b      	lsls	r3, r3, #30
 8011d68:	f100 8103 	bmi.w	8011f72 <_printf_float+0x44a>
 8011d6c:	68e0      	ldr	r0, [r4, #12]
 8011d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d70:	4298      	cmp	r0, r3
 8011d72:	bfb8      	it	lt
 8011d74:	4618      	movlt	r0, r3
 8011d76:	e734      	b.n	8011be2 <_printf_float+0xba>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	4652      	mov	r2, sl
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4628      	mov	r0, r5
 8011d80:	47b8      	blx	r7
 8011d82:	3001      	adds	r0, #1
 8011d84:	f43f af2b 	beq.w	8011bde <_printf_float+0xb6>
 8011d88:	f109 0901 	add.w	r9, r9, #1
 8011d8c:	e7e8      	b.n	8011d60 <_printf_float+0x238>
 8011d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	dc39      	bgt.n	8011e08 <_printf_float+0x2e0>
 8011d94:	4a1b      	ldr	r2, [pc, #108]	@ (8011e04 <_printf_float+0x2dc>)
 8011d96:	2301      	movs	r3, #1
 8011d98:	4631      	mov	r1, r6
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	47b8      	blx	r7
 8011d9e:	3001      	adds	r0, #1
 8011da0:	f43f af1d 	beq.w	8011bde <_printf_float+0xb6>
 8011da4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011da8:	ea59 0303 	orrs.w	r3, r9, r3
 8011dac:	d102      	bne.n	8011db4 <_printf_float+0x28c>
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	07d9      	lsls	r1, r3, #31
 8011db2:	d5d7      	bpl.n	8011d64 <_printf_float+0x23c>
 8011db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011db8:	4631      	mov	r1, r6
 8011dba:	4628      	mov	r0, r5
 8011dbc:	47b8      	blx	r7
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	f43f af0d 	beq.w	8011bde <_printf_float+0xb6>
 8011dc4:	f04f 0a00 	mov.w	sl, #0
 8011dc8:	f104 0b1a 	add.w	fp, r4, #26
 8011dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dce:	425b      	negs	r3, r3
 8011dd0:	4553      	cmp	r3, sl
 8011dd2:	dc01      	bgt.n	8011dd8 <_printf_float+0x2b0>
 8011dd4:	464b      	mov	r3, r9
 8011dd6:	e793      	b.n	8011d00 <_printf_float+0x1d8>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	465a      	mov	r2, fp
 8011ddc:	4631      	mov	r1, r6
 8011dde:	4628      	mov	r0, r5
 8011de0:	47b8      	blx	r7
 8011de2:	3001      	adds	r0, #1
 8011de4:	f43f aefb 	beq.w	8011bde <_printf_float+0xb6>
 8011de8:	f10a 0a01 	add.w	sl, sl, #1
 8011dec:	e7ee      	b.n	8011dcc <_printf_float+0x2a4>
 8011dee:	bf00      	nop
 8011df0:	7fefffff 	.word	0x7fefffff
 8011df4:	08015c31 	.word	0x08015c31
 8011df8:	08015c35 	.word	0x08015c35
 8011dfc:	08015c39 	.word	0x08015c39
 8011e00:	08015c3d 	.word	0x08015c3d
 8011e04:	08015c41 	.word	0x08015c41
 8011e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011e0e:	4553      	cmp	r3, sl
 8011e10:	bfa8      	it	ge
 8011e12:	4653      	movge	r3, sl
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	4699      	mov	r9, r3
 8011e18:	dc36      	bgt.n	8011e88 <_printf_float+0x360>
 8011e1a:	f04f 0b00 	mov.w	fp, #0
 8011e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e22:	f104 021a 	add.w	r2, r4, #26
 8011e26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e28:	9306      	str	r3, [sp, #24]
 8011e2a:	eba3 0309 	sub.w	r3, r3, r9
 8011e2e:	455b      	cmp	r3, fp
 8011e30:	dc31      	bgt.n	8011e96 <_printf_float+0x36e>
 8011e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e34:	459a      	cmp	sl, r3
 8011e36:	dc3a      	bgt.n	8011eae <_printf_float+0x386>
 8011e38:	6823      	ldr	r3, [r4, #0]
 8011e3a:	07da      	lsls	r2, r3, #31
 8011e3c:	d437      	bmi.n	8011eae <_printf_float+0x386>
 8011e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e40:	ebaa 0903 	sub.w	r9, sl, r3
 8011e44:	9b06      	ldr	r3, [sp, #24]
 8011e46:	ebaa 0303 	sub.w	r3, sl, r3
 8011e4a:	4599      	cmp	r9, r3
 8011e4c:	bfa8      	it	ge
 8011e4e:	4699      	movge	r9, r3
 8011e50:	f1b9 0f00 	cmp.w	r9, #0
 8011e54:	dc33      	bgt.n	8011ebe <_printf_float+0x396>
 8011e56:	f04f 0800 	mov.w	r8, #0
 8011e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e5e:	f104 0b1a 	add.w	fp, r4, #26
 8011e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e64:	ebaa 0303 	sub.w	r3, sl, r3
 8011e68:	eba3 0309 	sub.w	r3, r3, r9
 8011e6c:	4543      	cmp	r3, r8
 8011e6e:	f77f af79 	ble.w	8011d64 <_printf_float+0x23c>
 8011e72:	2301      	movs	r3, #1
 8011e74:	465a      	mov	r2, fp
 8011e76:	4631      	mov	r1, r6
 8011e78:	4628      	mov	r0, r5
 8011e7a:	47b8      	blx	r7
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	f43f aeae 	beq.w	8011bde <_printf_float+0xb6>
 8011e82:	f108 0801 	add.w	r8, r8, #1
 8011e86:	e7ec      	b.n	8011e62 <_printf_float+0x33a>
 8011e88:	4642      	mov	r2, r8
 8011e8a:	4631      	mov	r1, r6
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	47b8      	blx	r7
 8011e90:	3001      	adds	r0, #1
 8011e92:	d1c2      	bne.n	8011e1a <_printf_float+0x2f2>
 8011e94:	e6a3      	b.n	8011bde <_printf_float+0xb6>
 8011e96:	2301      	movs	r3, #1
 8011e98:	4631      	mov	r1, r6
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	9206      	str	r2, [sp, #24]
 8011e9e:	47b8      	blx	r7
 8011ea0:	3001      	adds	r0, #1
 8011ea2:	f43f ae9c 	beq.w	8011bde <_printf_float+0xb6>
 8011ea6:	9a06      	ldr	r2, [sp, #24]
 8011ea8:	f10b 0b01 	add.w	fp, fp, #1
 8011eac:	e7bb      	b.n	8011e26 <_printf_float+0x2fe>
 8011eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b8      	blx	r7
 8011eb8:	3001      	adds	r0, #1
 8011eba:	d1c0      	bne.n	8011e3e <_printf_float+0x316>
 8011ebc:	e68f      	b.n	8011bde <_printf_float+0xb6>
 8011ebe:	9a06      	ldr	r2, [sp, #24]
 8011ec0:	464b      	mov	r3, r9
 8011ec2:	4442      	add	r2, r8
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	4628      	mov	r0, r5
 8011ec8:	47b8      	blx	r7
 8011eca:	3001      	adds	r0, #1
 8011ecc:	d1c3      	bne.n	8011e56 <_printf_float+0x32e>
 8011ece:	e686      	b.n	8011bde <_printf_float+0xb6>
 8011ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011ed4:	f1ba 0f01 	cmp.w	sl, #1
 8011ed8:	dc01      	bgt.n	8011ede <_printf_float+0x3b6>
 8011eda:	07db      	lsls	r3, r3, #31
 8011edc:	d536      	bpl.n	8011f4c <_printf_float+0x424>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	4642      	mov	r2, r8
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	47b8      	blx	r7
 8011ee8:	3001      	adds	r0, #1
 8011eea:	f43f ae78 	beq.w	8011bde <_printf_float+0xb6>
 8011eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ef2:	4631      	mov	r1, r6
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	47b8      	blx	r7
 8011ef8:	3001      	adds	r0, #1
 8011efa:	f43f ae70 	beq.w	8011bde <_printf_float+0xb6>
 8011efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011f02:	2200      	movs	r2, #0
 8011f04:	2300      	movs	r3, #0
 8011f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f0a:	f7ee fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f0e:	b9c0      	cbnz	r0, 8011f42 <_printf_float+0x41a>
 8011f10:	4653      	mov	r3, sl
 8011f12:	f108 0201 	add.w	r2, r8, #1
 8011f16:	4631      	mov	r1, r6
 8011f18:	4628      	mov	r0, r5
 8011f1a:	47b8      	blx	r7
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	d10c      	bne.n	8011f3a <_printf_float+0x412>
 8011f20:	e65d      	b.n	8011bde <_printf_float+0xb6>
 8011f22:	2301      	movs	r3, #1
 8011f24:	465a      	mov	r2, fp
 8011f26:	4631      	mov	r1, r6
 8011f28:	4628      	mov	r0, r5
 8011f2a:	47b8      	blx	r7
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	f43f ae56 	beq.w	8011bde <_printf_float+0xb6>
 8011f32:	f108 0801 	add.w	r8, r8, #1
 8011f36:	45d0      	cmp	r8, sl
 8011f38:	dbf3      	blt.n	8011f22 <_printf_float+0x3fa>
 8011f3a:	464b      	mov	r3, r9
 8011f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011f40:	e6df      	b.n	8011d02 <_printf_float+0x1da>
 8011f42:	f04f 0800 	mov.w	r8, #0
 8011f46:	f104 0b1a 	add.w	fp, r4, #26
 8011f4a:	e7f4      	b.n	8011f36 <_printf_float+0x40e>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	4642      	mov	r2, r8
 8011f50:	e7e1      	b.n	8011f16 <_printf_float+0x3ee>
 8011f52:	2301      	movs	r3, #1
 8011f54:	464a      	mov	r2, r9
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	47b8      	blx	r7
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	f43f ae3e 	beq.w	8011bde <_printf_float+0xb6>
 8011f62:	f108 0801 	add.w	r8, r8, #1
 8011f66:	68e3      	ldr	r3, [r4, #12]
 8011f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011f6a:	1a5b      	subs	r3, r3, r1
 8011f6c:	4543      	cmp	r3, r8
 8011f6e:	dcf0      	bgt.n	8011f52 <_printf_float+0x42a>
 8011f70:	e6fc      	b.n	8011d6c <_printf_float+0x244>
 8011f72:	f04f 0800 	mov.w	r8, #0
 8011f76:	f104 0919 	add.w	r9, r4, #25
 8011f7a:	e7f4      	b.n	8011f66 <_printf_float+0x43e>

08011f7c <_printf_common>:
 8011f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f80:	4616      	mov	r6, r2
 8011f82:	4698      	mov	r8, r3
 8011f84:	688a      	ldr	r2, [r1, #8]
 8011f86:	690b      	ldr	r3, [r1, #16]
 8011f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	bfb8      	it	lt
 8011f90:	4613      	movlt	r3, r2
 8011f92:	6033      	str	r3, [r6, #0]
 8011f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011f98:	4607      	mov	r7, r0
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	b10a      	cbz	r2, 8011fa2 <_printf_common+0x26>
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	6033      	str	r3, [r6, #0]
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	0699      	lsls	r1, r3, #26
 8011fa6:	bf42      	ittt	mi
 8011fa8:	6833      	ldrmi	r3, [r6, #0]
 8011faa:	3302      	addmi	r3, #2
 8011fac:	6033      	strmi	r3, [r6, #0]
 8011fae:	6825      	ldr	r5, [r4, #0]
 8011fb0:	f015 0506 	ands.w	r5, r5, #6
 8011fb4:	d106      	bne.n	8011fc4 <_printf_common+0x48>
 8011fb6:	f104 0a19 	add.w	sl, r4, #25
 8011fba:	68e3      	ldr	r3, [r4, #12]
 8011fbc:	6832      	ldr	r2, [r6, #0]
 8011fbe:	1a9b      	subs	r3, r3, r2
 8011fc0:	42ab      	cmp	r3, r5
 8011fc2:	dc26      	bgt.n	8012012 <_printf_common+0x96>
 8011fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011fc8:	6822      	ldr	r2, [r4, #0]
 8011fca:	3b00      	subs	r3, #0
 8011fcc:	bf18      	it	ne
 8011fce:	2301      	movne	r3, #1
 8011fd0:	0692      	lsls	r2, r2, #26
 8011fd2:	d42b      	bmi.n	801202c <_printf_common+0xb0>
 8011fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011fd8:	4641      	mov	r1, r8
 8011fda:	4638      	mov	r0, r7
 8011fdc:	47c8      	blx	r9
 8011fde:	3001      	adds	r0, #1
 8011fe0:	d01e      	beq.n	8012020 <_printf_common+0xa4>
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	6922      	ldr	r2, [r4, #16]
 8011fe6:	f003 0306 	and.w	r3, r3, #6
 8011fea:	2b04      	cmp	r3, #4
 8011fec:	bf02      	ittt	eq
 8011fee:	68e5      	ldreq	r5, [r4, #12]
 8011ff0:	6833      	ldreq	r3, [r6, #0]
 8011ff2:	1aed      	subeq	r5, r5, r3
 8011ff4:	68a3      	ldr	r3, [r4, #8]
 8011ff6:	bf0c      	ite	eq
 8011ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ffc:	2500      	movne	r5, #0
 8011ffe:	4293      	cmp	r3, r2
 8012000:	bfc4      	itt	gt
 8012002:	1a9b      	subgt	r3, r3, r2
 8012004:	18ed      	addgt	r5, r5, r3
 8012006:	2600      	movs	r6, #0
 8012008:	341a      	adds	r4, #26
 801200a:	42b5      	cmp	r5, r6
 801200c:	d11a      	bne.n	8012044 <_printf_common+0xc8>
 801200e:	2000      	movs	r0, #0
 8012010:	e008      	b.n	8012024 <_printf_common+0xa8>
 8012012:	2301      	movs	r3, #1
 8012014:	4652      	mov	r2, sl
 8012016:	4641      	mov	r1, r8
 8012018:	4638      	mov	r0, r7
 801201a:	47c8      	blx	r9
 801201c:	3001      	adds	r0, #1
 801201e:	d103      	bne.n	8012028 <_printf_common+0xac>
 8012020:	f04f 30ff 	mov.w	r0, #4294967295
 8012024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012028:	3501      	adds	r5, #1
 801202a:	e7c6      	b.n	8011fba <_printf_common+0x3e>
 801202c:	18e1      	adds	r1, r4, r3
 801202e:	1c5a      	adds	r2, r3, #1
 8012030:	2030      	movs	r0, #48	@ 0x30
 8012032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012036:	4422      	add	r2, r4
 8012038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801203c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012040:	3302      	adds	r3, #2
 8012042:	e7c7      	b.n	8011fd4 <_printf_common+0x58>
 8012044:	2301      	movs	r3, #1
 8012046:	4622      	mov	r2, r4
 8012048:	4641      	mov	r1, r8
 801204a:	4638      	mov	r0, r7
 801204c:	47c8      	blx	r9
 801204e:	3001      	adds	r0, #1
 8012050:	d0e6      	beq.n	8012020 <_printf_common+0xa4>
 8012052:	3601      	adds	r6, #1
 8012054:	e7d9      	b.n	801200a <_printf_common+0x8e>
	...

08012058 <_printf_i>:
 8012058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801205c:	7e0f      	ldrb	r7, [r1, #24]
 801205e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012060:	2f78      	cmp	r7, #120	@ 0x78
 8012062:	4691      	mov	r9, r2
 8012064:	4680      	mov	r8, r0
 8012066:	460c      	mov	r4, r1
 8012068:	469a      	mov	sl, r3
 801206a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801206e:	d807      	bhi.n	8012080 <_printf_i+0x28>
 8012070:	2f62      	cmp	r7, #98	@ 0x62
 8012072:	d80a      	bhi.n	801208a <_printf_i+0x32>
 8012074:	2f00      	cmp	r7, #0
 8012076:	f000 80d2 	beq.w	801221e <_printf_i+0x1c6>
 801207a:	2f58      	cmp	r7, #88	@ 0x58
 801207c:	f000 80b9 	beq.w	80121f2 <_printf_i+0x19a>
 8012080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012088:	e03a      	b.n	8012100 <_printf_i+0xa8>
 801208a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801208e:	2b15      	cmp	r3, #21
 8012090:	d8f6      	bhi.n	8012080 <_printf_i+0x28>
 8012092:	a101      	add	r1, pc, #4	@ (adr r1, 8012098 <_printf_i+0x40>)
 8012094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012098:	080120f1 	.word	0x080120f1
 801209c:	08012105 	.word	0x08012105
 80120a0:	08012081 	.word	0x08012081
 80120a4:	08012081 	.word	0x08012081
 80120a8:	08012081 	.word	0x08012081
 80120ac:	08012081 	.word	0x08012081
 80120b0:	08012105 	.word	0x08012105
 80120b4:	08012081 	.word	0x08012081
 80120b8:	08012081 	.word	0x08012081
 80120bc:	08012081 	.word	0x08012081
 80120c0:	08012081 	.word	0x08012081
 80120c4:	08012205 	.word	0x08012205
 80120c8:	0801212f 	.word	0x0801212f
 80120cc:	080121bf 	.word	0x080121bf
 80120d0:	08012081 	.word	0x08012081
 80120d4:	08012081 	.word	0x08012081
 80120d8:	08012227 	.word	0x08012227
 80120dc:	08012081 	.word	0x08012081
 80120e0:	0801212f 	.word	0x0801212f
 80120e4:	08012081 	.word	0x08012081
 80120e8:	08012081 	.word	0x08012081
 80120ec:	080121c7 	.word	0x080121c7
 80120f0:	6833      	ldr	r3, [r6, #0]
 80120f2:	1d1a      	adds	r2, r3, #4
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	6032      	str	r2, [r6, #0]
 80120f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012100:	2301      	movs	r3, #1
 8012102:	e09d      	b.n	8012240 <_printf_i+0x1e8>
 8012104:	6833      	ldr	r3, [r6, #0]
 8012106:	6820      	ldr	r0, [r4, #0]
 8012108:	1d19      	adds	r1, r3, #4
 801210a:	6031      	str	r1, [r6, #0]
 801210c:	0606      	lsls	r6, r0, #24
 801210e:	d501      	bpl.n	8012114 <_printf_i+0xbc>
 8012110:	681d      	ldr	r5, [r3, #0]
 8012112:	e003      	b.n	801211c <_printf_i+0xc4>
 8012114:	0645      	lsls	r5, r0, #25
 8012116:	d5fb      	bpl.n	8012110 <_printf_i+0xb8>
 8012118:	f9b3 5000 	ldrsh.w	r5, [r3]
 801211c:	2d00      	cmp	r5, #0
 801211e:	da03      	bge.n	8012128 <_printf_i+0xd0>
 8012120:	232d      	movs	r3, #45	@ 0x2d
 8012122:	426d      	negs	r5, r5
 8012124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012128:	4859      	ldr	r0, [pc, #356]	@ (8012290 <_printf_i+0x238>)
 801212a:	230a      	movs	r3, #10
 801212c:	e011      	b.n	8012152 <_printf_i+0xfa>
 801212e:	6821      	ldr	r1, [r4, #0]
 8012130:	6833      	ldr	r3, [r6, #0]
 8012132:	0608      	lsls	r0, r1, #24
 8012134:	f853 5b04 	ldr.w	r5, [r3], #4
 8012138:	d402      	bmi.n	8012140 <_printf_i+0xe8>
 801213a:	0649      	lsls	r1, r1, #25
 801213c:	bf48      	it	mi
 801213e:	b2ad      	uxthmi	r5, r5
 8012140:	2f6f      	cmp	r7, #111	@ 0x6f
 8012142:	4853      	ldr	r0, [pc, #332]	@ (8012290 <_printf_i+0x238>)
 8012144:	6033      	str	r3, [r6, #0]
 8012146:	bf14      	ite	ne
 8012148:	230a      	movne	r3, #10
 801214a:	2308      	moveq	r3, #8
 801214c:	2100      	movs	r1, #0
 801214e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012152:	6866      	ldr	r6, [r4, #4]
 8012154:	60a6      	str	r6, [r4, #8]
 8012156:	2e00      	cmp	r6, #0
 8012158:	bfa2      	ittt	ge
 801215a:	6821      	ldrge	r1, [r4, #0]
 801215c:	f021 0104 	bicge.w	r1, r1, #4
 8012160:	6021      	strge	r1, [r4, #0]
 8012162:	b90d      	cbnz	r5, 8012168 <_printf_i+0x110>
 8012164:	2e00      	cmp	r6, #0
 8012166:	d04b      	beq.n	8012200 <_printf_i+0x1a8>
 8012168:	4616      	mov	r6, r2
 801216a:	fbb5 f1f3 	udiv	r1, r5, r3
 801216e:	fb03 5711 	mls	r7, r3, r1, r5
 8012172:	5dc7      	ldrb	r7, [r0, r7]
 8012174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012178:	462f      	mov	r7, r5
 801217a:	42bb      	cmp	r3, r7
 801217c:	460d      	mov	r5, r1
 801217e:	d9f4      	bls.n	801216a <_printf_i+0x112>
 8012180:	2b08      	cmp	r3, #8
 8012182:	d10b      	bne.n	801219c <_printf_i+0x144>
 8012184:	6823      	ldr	r3, [r4, #0]
 8012186:	07df      	lsls	r7, r3, #31
 8012188:	d508      	bpl.n	801219c <_printf_i+0x144>
 801218a:	6923      	ldr	r3, [r4, #16]
 801218c:	6861      	ldr	r1, [r4, #4]
 801218e:	4299      	cmp	r1, r3
 8012190:	bfde      	ittt	le
 8012192:	2330      	movle	r3, #48	@ 0x30
 8012194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012198:	f106 36ff 	addle.w	r6, r6, #4294967295
 801219c:	1b92      	subs	r2, r2, r6
 801219e:	6122      	str	r2, [r4, #16]
 80121a0:	f8cd a000 	str.w	sl, [sp]
 80121a4:	464b      	mov	r3, r9
 80121a6:	aa03      	add	r2, sp, #12
 80121a8:	4621      	mov	r1, r4
 80121aa:	4640      	mov	r0, r8
 80121ac:	f7ff fee6 	bl	8011f7c <_printf_common>
 80121b0:	3001      	adds	r0, #1
 80121b2:	d14a      	bne.n	801224a <_printf_i+0x1f2>
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	b004      	add	sp, #16
 80121ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	f043 0320 	orr.w	r3, r3, #32
 80121c4:	6023      	str	r3, [r4, #0]
 80121c6:	4833      	ldr	r0, [pc, #204]	@ (8012294 <_printf_i+0x23c>)
 80121c8:	2778      	movs	r7, #120	@ 0x78
 80121ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	6831      	ldr	r1, [r6, #0]
 80121d2:	061f      	lsls	r7, r3, #24
 80121d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80121d8:	d402      	bmi.n	80121e0 <_printf_i+0x188>
 80121da:	065f      	lsls	r7, r3, #25
 80121dc:	bf48      	it	mi
 80121de:	b2ad      	uxthmi	r5, r5
 80121e0:	6031      	str	r1, [r6, #0]
 80121e2:	07d9      	lsls	r1, r3, #31
 80121e4:	bf44      	itt	mi
 80121e6:	f043 0320 	orrmi.w	r3, r3, #32
 80121ea:	6023      	strmi	r3, [r4, #0]
 80121ec:	b11d      	cbz	r5, 80121f6 <_printf_i+0x19e>
 80121ee:	2310      	movs	r3, #16
 80121f0:	e7ac      	b.n	801214c <_printf_i+0xf4>
 80121f2:	4827      	ldr	r0, [pc, #156]	@ (8012290 <_printf_i+0x238>)
 80121f4:	e7e9      	b.n	80121ca <_printf_i+0x172>
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	f023 0320 	bic.w	r3, r3, #32
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	e7f6      	b.n	80121ee <_printf_i+0x196>
 8012200:	4616      	mov	r6, r2
 8012202:	e7bd      	b.n	8012180 <_printf_i+0x128>
 8012204:	6833      	ldr	r3, [r6, #0]
 8012206:	6825      	ldr	r5, [r4, #0]
 8012208:	6961      	ldr	r1, [r4, #20]
 801220a:	1d18      	adds	r0, r3, #4
 801220c:	6030      	str	r0, [r6, #0]
 801220e:	062e      	lsls	r6, r5, #24
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	d501      	bpl.n	8012218 <_printf_i+0x1c0>
 8012214:	6019      	str	r1, [r3, #0]
 8012216:	e002      	b.n	801221e <_printf_i+0x1c6>
 8012218:	0668      	lsls	r0, r5, #25
 801221a:	d5fb      	bpl.n	8012214 <_printf_i+0x1bc>
 801221c:	8019      	strh	r1, [r3, #0]
 801221e:	2300      	movs	r3, #0
 8012220:	6123      	str	r3, [r4, #16]
 8012222:	4616      	mov	r6, r2
 8012224:	e7bc      	b.n	80121a0 <_printf_i+0x148>
 8012226:	6833      	ldr	r3, [r6, #0]
 8012228:	1d1a      	adds	r2, r3, #4
 801222a:	6032      	str	r2, [r6, #0]
 801222c:	681e      	ldr	r6, [r3, #0]
 801222e:	6862      	ldr	r2, [r4, #4]
 8012230:	2100      	movs	r1, #0
 8012232:	4630      	mov	r0, r6
 8012234:	f7ed ffcc 	bl	80001d0 <memchr>
 8012238:	b108      	cbz	r0, 801223e <_printf_i+0x1e6>
 801223a:	1b80      	subs	r0, r0, r6
 801223c:	6060      	str	r0, [r4, #4]
 801223e:	6863      	ldr	r3, [r4, #4]
 8012240:	6123      	str	r3, [r4, #16]
 8012242:	2300      	movs	r3, #0
 8012244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012248:	e7aa      	b.n	80121a0 <_printf_i+0x148>
 801224a:	6923      	ldr	r3, [r4, #16]
 801224c:	4632      	mov	r2, r6
 801224e:	4649      	mov	r1, r9
 8012250:	4640      	mov	r0, r8
 8012252:	47d0      	blx	sl
 8012254:	3001      	adds	r0, #1
 8012256:	d0ad      	beq.n	80121b4 <_printf_i+0x15c>
 8012258:	6823      	ldr	r3, [r4, #0]
 801225a:	079b      	lsls	r3, r3, #30
 801225c:	d413      	bmi.n	8012286 <_printf_i+0x22e>
 801225e:	68e0      	ldr	r0, [r4, #12]
 8012260:	9b03      	ldr	r3, [sp, #12]
 8012262:	4298      	cmp	r0, r3
 8012264:	bfb8      	it	lt
 8012266:	4618      	movlt	r0, r3
 8012268:	e7a6      	b.n	80121b8 <_printf_i+0x160>
 801226a:	2301      	movs	r3, #1
 801226c:	4632      	mov	r2, r6
 801226e:	4649      	mov	r1, r9
 8012270:	4640      	mov	r0, r8
 8012272:	47d0      	blx	sl
 8012274:	3001      	adds	r0, #1
 8012276:	d09d      	beq.n	80121b4 <_printf_i+0x15c>
 8012278:	3501      	adds	r5, #1
 801227a:	68e3      	ldr	r3, [r4, #12]
 801227c:	9903      	ldr	r1, [sp, #12]
 801227e:	1a5b      	subs	r3, r3, r1
 8012280:	42ab      	cmp	r3, r5
 8012282:	dcf2      	bgt.n	801226a <_printf_i+0x212>
 8012284:	e7eb      	b.n	801225e <_printf_i+0x206>
 8012286:	2500      	movs	r5, #0
 8012288:	f104 0619 	add.w	r6, r4, #25
 801228c:	e7f5      	b.n	801227a <_printf_i+0x222>
 801228e:	bf00      	nop
 8012290:	08015c43 	.word	0x08015c43
 8012294:	08015c54 	.word	0x08015c54

08012298 <std>:
 8012298:	2300      	movs	r3, #0
 801229a:	b510      	push	{r4, lr}
 801229c:	4604      	mov	r4, r0
 801229e:	e9c0 3300 	strd	r3, r3, [r0]
 80122a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122a6:	6083      	str	r3, [r0, #8]
 80122a8:	8181      	strh	r1, [r0, #12]
 80122aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80122ac:	81c2      	strh	r2, [r0, #14]
 80122ae:	6183      	str	r3, [r0, #24]
 80122b0:	4619      	mov	r1, r3
 80122b2:	2208      	movs	r2, #8
 80122b4:	305c      	adds	r0, #92	@ 0x5c
 80122b6:	f000 f981 	bl	80125bc <memset>
 80122ba:	4b0d      	ldr	r3, [pc, #52]	@ (80122f0 <std+0x58>)
 80122bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80122be:	4b0d      	ldr	r3, [pc, #52]	@ (80122f4 <std+0x5c>)
 80122c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80122c2:	4b0d      	ldr	r3, [pc, #52]	@ (80122f8 <std+0x60>)
 80122c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80122c6:	4b0d      	ldr	r3, [pc, #52]	@ (80122fc <std+0x64>)
 80122c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80122ca:	4b0d      	ldr	r3, [pc, #52]	@ (8012300 <std+0x68>)
 80122cc:	6224      	str	r4, [r4, #32]
 80122ce:	429c      	cmp	r4, r3
 80122d0:	d006      	beq.n	80122e0 <std+0x48>
 80122d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80122d6:	4294      	cmp	r4, r2
 80122d8:	d002      	beq.n	80122e0 <std+0x48>
 80122da:	33d0      	adds	r3, #208	@ 0xd0
 80122dc:	429c      	cmp	r4, r3
 80122de:	d105      	bne.n	80122ec <std+0x54>
 80122e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80122e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122e8:	f000 bac6 	b.w	8012878 <__retarget_lock_init_recursive>
 80122ec:	bd10      	pop	{r4, pc}
 80122ee:	bf00      	nop
 80122f0:	080124c5 	.word	0x080124c5
 80122f4:	080124e7 	.word	0x080124e7
 80122f8:	0801251f 	.word	0x0801251f
 80122fc:	08012543 	.word	0x08012543
 8012300:	20005960 	.word	0x20005960

08012304 <stdio_exit_handler>:
 8012304:	4a02      	ldr	r2, [pc, #8]	@ (8012310 <stdio_exit_handler+0xc>)
 8012306:	4903      	ldr	r1, [pc, #12]	@ (8012314 <stdio_exit_handler+0x10>)
 8012308:	4803      	ldr	r0, [pc, #12]	@ (8012318 <stdio_exit_handler+0x14>)
 801230a:	f000 b869 	b.w	80123e0 <_fwalk_sglue>
 801230e:	bf00      	nop
 8012310:	2000025c 	.word	0x2000025c
 8012314:	080149f9 	.word	0x080149f9
 8012318:	200003d8 	.word	0x200003d8

0801231c <cleanup_stdio>:
 801231c:	6841      	ldr	r1, [r0, #4]
 801231e:	4b0c      	ldr	r3, [pc, #48]	@ (8012350 <cleanup_stdio+0x34>)
 8012320:	4299      	cmp	r1, r3
 8012322:	b510      	push	{r4, lr}
 8012324:	4604      	mov	r4, r0
 8012326:	d001      	beq.n	801232c <cleanup_stdio+0x10>
 8012328:	f002 fb66 	bl	80149f8 <_fflush_r>
 801232c:	68a1      	ldr	r1, [r4, #8]
 801232e:	4b09      	ldr	r3, [pc, #36]	@ (8012354 <cleanup_stdio+0x38>)
 8012330:	4299      	cmp	r1, r3
 8012332:	d002      	beq.n	801233a <cleanup_stdio+0x1e>
 8012334:	4620      	mov	r0, r4
 8012336:	f002 fb5f 	bl	80149f8 <_fflush_r>
 801233a:	68e1      	ldr	r1, [r4, #12]
 801233c:	4b06      	ldr	r3, [pc, #24]	@ (8012358 <cleanup_stdio+0x3c>)
 801233e:	4299      	cmp	r1, r3
 8012340:	d004      	beq.n	801234c <cleanup_stdio+0x30>
 8012342:	4620      	mov	r0, r4
 8012344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012348:	f002 bb56 	b.w	80149f8 <_fflush_r>
 801234c:	bd10      	pop	{r4, pc}
 801234e:	bf00      	nop
 8012350:	20005960 	.word	0x20005960
 8012354:	200059c8 	.word	0x200059c8
 8012358:	20005a30 	.word	0x20005a30

0801235c <global_stdio_init.part.0>:
 801235c:	b510      	push	{r4, lr}
 801235e:	4b0b      	ldr	r3, [pc, #44]	@ (801238c <global_stdio_init.part.0+0x30>)
 8012360:	4c0b      	ldr	r4, [pc, #44]	@ (8012390 <global_stdio_init.part.0+0x34>)
 8012362:	4a0c      	ldr	r2, [pc, #48]	@ (8012394 <global_stdio_init.part.0+0x38>)
 8012364:	601a      	str	r2, [r3, #0]
 8012366:	4620      	mov	r0, r4
 8012368:	2200      	movs	r2, #0
 801236a:	2104      	movs	r1, #4
 801236c:	f7ff ff94 	bl	8012298 <std>
 8012370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012374:	2201      	movs	r2, #1
 8012376:	2109      	movs	r1, #9
 8012378:	f7ff ff8e 	bl	8012298 <std>
 801237c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012380:	2202      	movs	r2, #2
 8012382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012386:	2112      	movs	r1, #18
 8012388:	f7ff bf86 	b.w	8012298 <std>
 801238c:	20005a98 	.word	0x20005a98
 8012390:	20005960 	.word	0x20005960
 8012394:	08012305 	.word	0x08012305

08012398 <__sfp_lock_acquire>:
 8012398:	4801      	ldr	r0, [pc, #4]	@ (80123a0 <__sfp_lock_acquire+0x8>)
 801239a:	f000 ba6e 	b.w	801287a <__retarget_lock_acquire_recursive>
 801239e:	bf00      	nop
 80123a0:	20005aa1 	.word	0x20005aa1

080123a4 <__sfp_lock_release>:
 80123a4:	4801      	ldr	r0, [pc, #4]	@ (80123ac <__sfp_lock_release+0x8>)
 80123a6:	f000 ba69 	b.w	801287c <__retarget_lock_release_recursive>
 80123aa:	bf00      	nop
 80123ac:	20005aa1 	.word	0x20005aa1

080123b0 <__sinit>:
 80123b0:	b510      	push	{r4, lr}
 80123b2:	4604      	mov	r4, r0
 80123b4:	f7ff fff0 	bl	8012398 <__sfp_lock_acquire>
 80123b8:	6a23      	ldr	r3, [r4, #32]
 80123ba:	b11b      	cbz	r3, 80123c4 <__sinit+0x14>
 80123bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123c0:	f7ff bff0 	b.w	80123a4 <__sfp_lock_release>
 80123c4:	4b04      	ldr	r3, [pc, #16]	@ (80123d8 <__sinit+0x28>)
 80123c6:	6223      	str	r3, [r4, #32]
 80123c8:	4b04      	ldr	r3, [pc, #16]	@ (80123dc <__sinit+0x2c>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1f5      	bne.n	80123bc <__sinit+0xc>
 80123d0:	f7ff ffc4 	bl	801235c <global_stdio_init.part.0>
 80123d4:	e7f2      	b.n	80123bc <__sinit+0xc>
 80123d6:	bf00      	nop
 80123d8:	0801231d 	.word	0x0801231d
 80123dc:	20005a98 	.word	0x20005a98

080123e0 <_fwalk_sglue>:
 80123e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e4:	4607      	mov	r7, r0
 80123e6:	4688      	mov	r8, r1
 80123e8:	4614      	mov	r4, r2
 80123ea:	2600      	movs	r6, #0
 80123ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123f0:	f1b9 0901 	subs.w	r9, r9, #1
 80123f4:	d505      	bpl.n	8012402 <_fwalk_sglue+0x22>
 80123f6:	6824      	ldr	r4, [r4, #0]
 80123f8:	2c00      	cmp	r4, #0
 80123fa:	d1f7      	bne.n	80123ec <_fwalk_sglue+0xc>
 80123fc:	4630      	mov	r0, r6
 80123fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012402:	89ab      	ldrh	r3, [r5, #12]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d907      	bls.n	8012418 <_fwalk_sglue+0x38>
 8012408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801240c:	3301      	adds	r3, #1
 801240e:	d003      	beq.n	8012418 <_fwalk_sglue+0x38>
 8012410:	4629      	mov	r1, r5
 8012412:	4638      	mov	r0, r7
 8012414:	47c0      	blx	r8
 8012416:	4306      	orrs	r6, r0
 8012418:	3568      	adds	r5, #104	@ 0x68
 801241a:	e7e9      	b.n	80123f0 <_fwalk_sglue+0x10>

0801241c <sniprintf>:
 801241c:	b40c      	push	{r2, r3}
 801241e:	b530      	push	{r4, r5, lr}
 8012420:	4b17      	ldr	r3, [pc, #92]	@ (8012480 <sniprintf+0x64>)
 8012422:	1e0c      	subs	r4, r1, #0
 8012424:	681d      	ldr	r5, [r3, #0]
 8012426:	b09d      	sub	sp, #116	@ 0x74
 8012428:	da08      	bge.n	801243c <sniprintf+0x20>
 801242a:	238b      	movs	r3, #139	@ 0x8b
 801242c:	602b      	str	r3, [r5, #0]
 801242e:	f04f 30ff 	mov.w	r0, #4294967295
 8012432:	b01d      	add	sp, #116	@ 0x74
 8012434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012438:	b002      	add	sp, #8
 801243a:	4770      	bx	lr
 801243c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012444:	bf14      	ite	ne
 8012446:	f104 33ff 	addne.w	r3, r4, #4294967295
 801244a:	4623      	moveq	r3, r4
 801244c:	9304      	str	r3, [sp, #16]
 801244e:	9307      	str	r3, [sp, #28]
 8012450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012454:	9002      	str	r0, [sp, #8]
 8012456:	9006      	str	r0, [sp, #24]
 8012458:	f8ad 3016 	strh.w	r3, [sp, #22]
 801245c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801245e:	ab21      	add	r3, sp, #132	@ 0x84
 8012460:	a902      	add	r1, sp, #8
 8012462:	4628      	mov	r0, r5
 8012464:	9301      	str	r3, [sp, #4]
 8012466:	f002 f947 	bl	80146f8 <_svfiprintf_r>
 801246a:	1c43      	adds	r3, r0, #1
 801246c:	bfbc      	itt	lt
 801246e:	238b      	movlt	r3, #139	@ 0x8b
 8012470:	602b      	strlt	r3, [r5, #0]
 8012472:	2c00      	cmp	r4, #0
 8012474:	d0dd      	beq.n	8012432 <sniprintf+0x16>
 8012476:	9b02      	ldr	r3, [sp, #8]
 8012478:	2200      	movs	r2, #0
 801247a:	701a      	strb	r2, [r3, #0]
 801247c:	e7d9      	b.n	8012432 <sniprintf+0x16>
 801247e:	bf00      	nop
 8012480:	200003d4 	.word	0x200003d4

08012484 <siprintf>:
 8012484:	b40e      	push	{r1, r2, r3}
 8012486:	b500      	push	{lr}
 8012488:	b09c      	sub	sp, #112	@ 0x70
 801248a:	ab1d      	add	r3, sp, #116	@ 0x74
 801248c:	9002      	str	r0, [sp, #8]
 801248e:	9006      	str	r0, [sp, #24]
 8012490:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012494:	4809      	ldr	r0, [pc, #36]	@ (80124bc <siprintf+0x38>)
 8012496:	9107      	str	r1, [sp, #28]
 8012498:	9104      	str	r1, [sp, #16]
 801249a:	4909      	ldr	r1, [pc, #36]	@ (80124c0 <siprintf+0x3c>)
 801249c:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a0:	9105      	str	r1, [sp, #20]
 80124a2:	6800      	ldr	r0, [r0, #0]
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	a902      	add	r1, sp, #8
 80124a8:	f002 f926 	bl	80146f8 <_svfiprintf_r>
 80124ac:	9b02      	ldr	r3, [sp, #8]
 80124ae:	2200      	movs	r2, #0
 80124b0:	701a      	strb	r2, [r3, #0]
 80124b2:	b01c      	add	sp, #112	@ 0x70
 80124b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80124b8:	b003      	add	sp, #12
 80124ba:	4770      	bx	lr
 80124bc:	200003d4 	.word	0x200003d4
 80124c0:	ffff0208 	.word	0xffff0208

080124c4 <__sread>:
 80124c4:	b510      	push	{r4, lr}
 80124c6:	460c      	mov	r4, r1
 80124c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124cc:	f000 f976 	bl	80127bc <_read_r>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	bfab      	itete	ge
 80124d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80124d6:	89a3      	ldrhlt	r3, [r4, #12]
 80124d8:	181b      	addge	r3, r3, r0
 80124da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80124de:	bfac      	ite	ge
 80124e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80124e2:	81a3      	strhlt	r3, [r4, #12]
 80124e4:	bd10      	pop	{r4, pc}

080124e6 <__swrite>:
 80124e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ea:	461f      	mov	r7, r3
 80124ec:	898b      	ldrh	r3, [r1, #12]
 80124ee:	05db      	lsls	r3, r3, #23
 80124f0:	4605      	mov	r5, r0
 80124f2:	460c      	mov	r4, r1
 80124f4:	4616      	mov	r6, r2
 80124f6:	d505      	bpl.n	8012504 <__swrite+0x1e>
 80124f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124fc:	2302      	movs	r3, #2
 80124fe:	2200      	movs	r2, #0
 8012500:	f000 f94a 	bl	8012798 <_lseek_r>
 8012504:	89a3      	ldrh	r3, [r4, #12]
 8012506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801250a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801250e:	81a3      	strh	r3, [r4, #12]
 8012510:	4632      	mov	r2, r6
 8012512:	463b      	mov	r3, r7
 8012514:	4628      	mov	r0, r5
 8012516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801251a:	f000 b971 	b.w	8012800 <_write_r>

0801251e <__sseek>:
 801251e:	b510      	push	{r4, lr}
 8012520:	460c      	mov	r4, r1
 8012522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012526:	f000 f937 	bl	8012798 <_lseek_r>
 801252a:	1c43      	adds	r3, r0, #1
 801252c:	89a3      	ldrh	r3, [r4, #12]
 801252e:	bf15      	itete	ne
 8012530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801253a:	81a3      	strheq	r3, [r4, #12]
 801253c:	bf18      	it	ne
 801253e:	81a3      	strhne	r3, [r4, #12]
 8012540:	bd10      	pop	{r4, pc}

08012542 <__sclose>:
 8012542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012546:	f000 b8c1 	b.w	80126cc <_close_r>

0801254a <_vsniprintf_r>:
 801254a:	b530      	push	{r4, r5, lr}
 801254c:	4614      	mov	r4, r2
 801254e:	2c00      	cmp	r4, #0
 8012550:	b09b      	sub	sp, #108	@ 0x6c
 8012552:	4605      	mov	r5, r0
 8012554:	461a      	mov	r2, r3
 8012556:	da05      	bge.n	8012564 <_vsniprintf_r+0x1a>
 8012558:	238b      	movs	r3, #139	@ 0x8b
 801255a:	6003      	str	r3, [r0, #0]
 801255c:	f04f 30ff 	mov.w	r0, #4294967295
 8012560:	b01b      	add	sp, #108	@ 0x6c
 8012562:	bd30      	pop	{r4, r5, pc}
 8012564:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012568:	f8ad 300c 	strh.w	r3, [sp, #12]
 801256c:	bf14      	ite	ne
 801256e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012572:	4623      	moveq	r3, r4
 8012574:	9302      	str	r3, [sp, #8]
 8012576:	9305      	str	r3, [sp, #20]
 8012578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801257c:	9100      	str	r1, [sp, #0]
 801257e:	9104      	str	r1, [sp, #16]
 8012580:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012584:	4669      	mov	r1, sp
 8012586:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012588:	f002 f8b6 	bl	80146f8 <_svfiprintf_r>
 801258c:	1c43      	adds	r3, r0, #1
 801258e:	bfbc      	itt	lt
 8012590:	238b      	movlt	r3, #139	@ 0x8b
 8012592:	602b      	strlt	r3, [r5, #0]
 8012594:	2c00      	cmp	r4, #0
 8012596:	d0e3      	beq.n	8012560 <_vsniprintf_r+0x16>
 8012598:	9b00      	ldr	r3, [sp, #0]
 801259a:	2200      	movs	r2, #0
 801259c:	701a      	strb	r2, [r3, #0]
 801259e:	e7df      	b.n	8012560 <_vsniprintf_r+0x16>

080125a0 <vsniprintf>:
 80125a0:	b507      	push	{r0, r1, r2, lr}
 80125a2:	9300      	str	r3, [sp, #0]
 80125a4:	4613      	mov	r3, r2
 80125a6:	460a      	mov	r2, r1
 80125a8:	4601      	mov	r1, r0
 80125aa:	4803      	ldr	r0, [pc, #12]	@ (80125b8 <vsniprintf+0x18>)
 80125ac:	6800      	ldr	r0, [r0, #0]
 80125ae:	f7ff ffcc 	bl	801254a <_vsniprintf_r>
 80125b2:	b003      	add	sp, #12
 80125b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80125b8:	200003d4 	.word	0x200003d4

080125bc <memset>:
 80125bc:	4402      	add	r2, r0
 80125be:	4603      	mov	r3, r0
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d100      	bne.n	80125c6 <memset+0xa>
 80125c4:	4770      	bx	lr
 80125c6:	f803 1b01 	strb.w	r1, [r3], #1
 80125ca:	e7f9      	b.n	80125c0 <memset+0x4>

080125cc <strchr>:
 80125cc:	b2c9      	uxtb	r1, r1
 80125ce:	4603      	mov	r3, r0
 80125d0:	4618      	mov	r0, r3
 80125d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125d6:	b112      	cbz	r2, 80125de <strchr+0x12>
 80125d8:	428a      	cmp	r2, r1
 80125da:	d1f9      	bne.n	80125d0 <strchr+0x4>
 80125dc:	4770      	bx	lr
 80125de:	2900      	cmp	r1, #0
 80125e0:	bf18      	it	ne
 80125e2:	2000      	movne	r0, #0
 80125e4:	4770      	bx	lr

080125e6 <strncmp>:
 80125e6:	b510      	push	{r4, lr}
 80125e8:	b16a      	cbz	r2, 8012606 <strncmp+0x20>
 80125ea:	3901      	subs	r1, #1
 80125ec:	1884      	adds	r4, r0, r2
 80125ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d103      	bne.n	8012602 <strncmp+0x1c>
 80125fa:	42a0      	cmp	r0, r4
 80125fc:	d001      	beq.n	8012602 <strncmp+0x1c>
 80125fe:	2a00      	cmp	r2, #0
 8012600:	d1f5      	bne.n	80125ee <strncmp+0x8>
 8012602:	1ad0      	subs	r0, r2, r3
 8012604:	bd10      	pop	{r4, pc}
 8012606:	4610      	mov	r0, r2
 8012608:	e7fc      	b.n	8012604 <strncmp+0x1e>
	...

0801260c <strtok>:
 801260c:	4b16      	ldr	r3, [pc, #88]	@ (8012668 <strtok+0x5c>)
 801260e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012612:	681f      	ldr	r7, [r3, #0]
 8012614:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8012616:	4605      	mov	r5, r0
 8012618:	460e      	mov	r6, r1
 801261a:	b9ec      	cbnz	r4, 8012658 <strtok+0x4c>
 801261c:	2050      	movs	r0, #80	@ 0x50
 801261e:	f7fe fa91 	bl	8010b44 <malloc>
 8012622:	4602      	mov	r2, r0
 8012624:	6478      	str	r0, [r7, #68]	@ 0x44
 8012626:	b920      	cbnz	r0, 8012632 <strtok+0x26>
 8012628:	4b10      	ldr	r3, [pc, #64]	@ (801266c <strtok+0x60>)
 801262a:	4811      	ldr	r0, [pc, #68]	@ (8012670 <strtok+0x64>)
 801262c:	215b      	movs	r1, #91	@ 0x5b
 801262e:	f000 f947 	bl	80128c0 <__assert_func>
 8012632:	e9c0 4400 	strd	r4, r4, [r0]
 8012636:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801263a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801263e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012642:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8012646:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801264a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801264e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012652:	6184      	str	r4, [r0, #24]
 8012654:	7704      	strb	r4, [r0, #28]
 8012656:	6244      	str	r4, [r0, #36]	@ 0x24
 8012658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801265a:	4631      	mov	r1, r6
 801265c:	4628      	mov	r0, r5
 801265e:	2301      	movs	r3, #1
 8012660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	f000 b806 	b.w	8012674 <__strtok_r>
 8012668:	200003d4 	.word	0x200003d4
 801266c:	08015c65 	.word	0x08015c65
 8012670:	08015c7c 	.word	0x08015c7c

08012674 <__strtok_r>:
 8012674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012676:	4604      	mov	r4, r0
 8012678:	b908      	cbnz	r0, 801267e <__strtok_r+0xa>
 801267a:	6814      	ldr	r4, [r2, #0]
 801267c:	b144      	cbz	r4, 8012690 <__strtok_r+0x1c>
 801267e:	4620      	mov	r0, r4
 8012680:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012684:	460f      	mov	r7, r1
 8012686:	f817 6b01 	ldrb.w	r6, [r7], #1
 801268a:	b91e      	cbnz	r6, 8012694 <__strtok_r+0x20>
 801268c:	b965      	cbnz	r5, 80126a8 <__strtok_r+0x34>
 801268e:	6015      	str	r5, [r2, #0]
 8012690:	2000      	movs	r0, #0
 8012692:	e005      	b.n	80126a0 <__strtok_r+0x2c>
 8012694:	42b5      	cmp	r5, r6
 8012696:	d1f6      	bne.n	8012686 <__strtok_r+0x12>
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1f0      	bne.n	801267e <__strtok_r+0xa>
 801269c:	6014      	str	r4, [r2, #0]
 801269e:	7003      	strb	r3, [r0, #0]
 80126a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126a2:	461c      	mov	r4, r3
 80126a4:	e00c      	b.n	80126c0 <__strtok_r+0x4c>
 80126a6:	b915      	cbnz	r5, 80126ae <__strtok_r+0x3a>
 80126a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126ac:	460e      	mov	r6, r1
 80126ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80126b2:	42ab      	cmp	r3, r5
 80126b4:	d1f7      	bne.n	80126a6 <__strtok_r+0x32>
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d0f3      	beq.n	80126a2 <__strtok_r+0x2e>
 80126ba:	2300      	movs	r3, #0
 80126bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80126c0:	6014      	str	r4, [r2, #0]
 80126c2:	e7ed      	b.n	80126a0 <__strtok_r+0x2c>

080126c4 <_localeconv_r>:
 80126c4:	4800      	ldr	r0, [pc, #0]	@ (80126c8 <_localeconv_r+0x4>)
 80126c6:	4770      	bx	lr
 80126c8:	20000358 	.word	0x20000358

080126cc <_close_r>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4d06      	ldr	r5, [pc, #24]	@ (80126e8 <_close_r+0x1c>)
 80126d0:	2300      	movs	r3, #0
 80126d2:	4604      	mov	r4, r0
 80126d4:	4608      	mov	r0, r1
 80126d6:	602b      	str	r3, [r5, #0]
 80126d8:	f7f1 fa0e 	bl	8003af8 <_close>
 80126dc:	1c43      	adds	r3, r0, #1
 80126de:	d102      	bne.n	80126e6 <_close_r+0x1a>
 80126e0:	682b      	ldr	r3, [r5, #0]
 80126e2:	b103      	cbz	r3, 80126e6 <_close_r+0x1a>
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	bd38      	pop	{r3, r4, r5, pc}
 80126e8:	20005a9c 	.word	0x20005a9c

080126ec <_reclaim_reent>:
 80126ec:	4b29      	ldr	r3, [pc, #164]	@ (8012794 <_reclaim_reent+0xa8>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	4283      	cmp	r3, r0
 80126f2:	b570      	push	{r4, r5, r6, lr}
 80126f4:	4604      	mov	r4, r0
 80126f6:	d04b      	beq.n	8012790 <_reclaim_reent+0xa4>
 80126f8:	69c3      	ldr	r3, [r0, #28]
 80126fa:	b1ab      	cbz	r3, 8012728 <_reclaim_reent+0x3c>
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	b16b      	cbz	r3, 801271c <_reclaim_reent+0x30>
 8012700:	2500      	movs	r5, #0
 8012702:	69e3      	ldr	r3, [r4, #28]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	5959      	ldr	r1, [r3, r5]
 8012708:	2900      	cmp	r1, #0
 801270a:	d13b      	bne.n	8012784 <_reclaim_reent+0x98>
 801270c:	3504      	adds	r5, #4
 801270e:	2d80      	cmp	r5, #128	@ 0x80
 8012710:	d1f7      	bne.n	8012702 <_reclaim_reent+0x16>
 8012712:	69e3      	ldr	r3, [r4, #28]
 8012714:	4620      	mov	r0, r4
 8012716:	68d9      	ldr	r1, [r3, #12]
 8012718:	f000 ff3e 	bl	8013598 <_free_r>
 801271c:	69e3      	ldr	r3, [r4, #28]
 801271e:	6819      	ldr	r1, [r3, #0]
 8012720:	b111      	cbz	r1, 8012728 <_reclaim_reent+0x3c>
 8012722:	4620      	mov	r0, r4
 8012724:	f000 ff38 	bl	8013598 <_free_r>
 8012728:	6961      	ldr	r1, [r4, #20]
 801272a:	b111      	cbz	r1, 8012732 <_reclaim_reent+0x46>
 801272c:	4620      	mov	r0, r4
 801272e:	f000 ff33 	bl	8013598 <_free_r>
 8012732:	69e1      	ldr	r1, [r4, #28]
 8012734:	b111      	cbz	r1, 801273c <_reclaim_reent+0x50>
 8012736:	4620      	mov	r0, r4
 8012738:	f000 ff2e 	bl	8013598 <_free_r>
 801273c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801273e:	b111      	cbz	r1, 8012746 <_reclaim_reent+0x5a>
 8012740:	4620      	mov	r0, r4
 8012742:	f000 ff29 	bl	8013598 <_free_r>
 8012746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012748:	b111      	cbz	r1, 8012750 <_reclaim_reent+0x64>
 801274a:	4620      	mov	r0, r4
 801274c:	f000 ff24 	bl	8013598 <_free_r>
 8012750:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012752:	b111      	cbz	r1, 801275a <_reclaim_reent+0x6e>
 8012754:	4620      	mov	r0, r4
 8012756:	f000 ff1f 	bl	8013598 <_free_r>
 801275a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801275c:	b111      	cbz	r1, 8012764 <_reclaim_reent+0x78>
 801275e:	4620      	mov	r0, r4
 8012760:	f000 ff1a 	bl	8013598 <_free_r>
 8012764:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012766:	b111      	cbz	r1, 801276e <_reclaim_reent+0x82>
 8012768:	4620      	mov	r0, r4
 801276a:	f000 ff15 	bl	8013598 <_free_r>
 801276e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012770:	b111      	cbz	r1, 8012778 <_reclaim_reent+0x8c>
 8012772:	4620      	mov	r0, r4
 8012774:	f000 ff10 	bl	8013598 <_free_r>
 8012778:	6a23      	ldr	r3, [r4, #32]
 801277a:	b14b      	cbz	r3, 8012790 <_reclaim_reent+0xa4>
 801277c:	4620      	mov	r0, r4
 801277e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012782:	4718      	bx	r3
 8012784:	680e      	ldr	r6, [r1, #0]
 8012786:	4620      	mov	r0, r4
 8012788:	f000 ff06 	bl	8013598 <_free_r>
 801278c:	4631      	mov	r1, r6
 801278e:	e7bb      	b.n	8012708 <_reclaim_reent+0x1c>
 8012790:	bd70      	pop	{r4, r5, r6, pc}
 8012792:	bf00      	nop
 8012794:	200003d4 	.word	0x200003d4

08012798 <_lseek_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4d07      	ldr	r5, [pc, #28]	@ (80127b8 <_lseek_r+0x20>)
 801279c:	4604      	mov	r4, r0
 801279e:	4608      	mov	r0, r1
 80127a0:	4611      	mov	r1, r2
 80127a2:	2200      	movs	r2, #0
 80127a4:	602a      	str	r2, [r5, #0]
 80127a6:	461a      	mov	r2, r3
 80127a8:	f7f1 f9cd 	bl	8003b46 <_lseek>
 80127ac:	1c43      	adds	r3, r0, #1
 80127ae:	d102      	bne.n	80127b6 <_lseek_r+0x1e>
 80127b0:	682b      	ldr	r3, [r5, #0]
 80127b2:	b103      	cbz	r3, 80127b6 <_lseek_r+0x1e>
 80127b4:	6023      	str	r3, [r4, #0]
 80127b6:	bd38      	pop	{r3, r4, r5, pc}
 80127b8:	20005a9c 	.word	0x20005a9c

080127bc <_read_r>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	4d07      	ldr	r5, [pc, #28]	@ (80127dc <_read_r+0x20>)
 80127c0:	4604      	mov	r4, r0
 80127c2:	4608      	mov	r0, r1
 80127c4:	4611      	mov	r1, r2
 80127c6:	2200      	movs	r2, #0
 80127c8:	602a      	str	r2, [r5, #0]
 80127ca:	461a      	mov	r2, r3
 80127cc:	f7f1 f95b 	bl	8003a86 <_read>
 80127d0:	1c43      	adds	r3, r0, #1
 80127d2:	d102      	bne.n	80127da <_read_r+0x1e>
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	b103      	cbz	r3, 80127da <_read_r+0x1e>
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	bd38      	pop	{r3, r4, r5, pc}
 80127dc:	20005a9c 	.word	0x20005a9c

080127e0 <_sbrk_r>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	4d06      	ldr	r5, [pc, #24]	@ (80127fc <_sbrk_r+0x1c>)
 80127e4:	2300      	movs	r3, #0
 80127e6:	4604      	mov	r4, r0
 80127e8:	4608      	mov	r0, r1
 80127ea:	602b      	str	r3, [r5, #0]
 80127ec:	f7f1 f9b8 	bl	8003b60 <_sbrk>
 80127f0:	1c43      	adds	r3, r0, #1
 80127f2:	d102      	bne.n	80127fa <_sbrk_r+0x1a>
 80127f4:	682b      	ldr	r3, [r5, #0]
 80127f6:	b103      	cbz	r3, 80127fa <_sbrk_r+0x1a>
 80127f8:	6023      	str	r3, [r4, #0]
 80127fa:	bd38      	pop	{r3, r4, r5, pc}
 80127fc:	20005a9c 	.word	0x20005a9c

08012800 <_write_r>:
 8012800:	b538      	push	{r3, r4, r5, lr}
 8012802:	4d07      	ldr	r5, [pc, #28]	@ (8012820 <_write_r+0x20>)
 8012804:	4604      	mov	r4, r0
 8012806:	4608      	mov	r0, r1
 8012808:	4611      	mov	r1, r2
 801280a:	2200      	movs	r2, #0
 801280c:	602a      	str	r2, [r5, #0]
 801280e:	461a      	mov	r2, r3
 8012810:	f7f1 f956 	bl	8003ac0 <_write>
 8012814:	1c43      	adds	r3, r0, #1
 8012816:	d102      	bne.n	801281e <_write_r+0x1e>
 8012818:	682b      	ldr	r3, [r5, #0]
 801281a:	b103      	cbz	r3, 801281e <_write_r+0x1e>
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	bd38      	pop	{r3, r4, r5, pc}
 8012820:	20005a9c 	.word	0x20005a9c

08012824 <__errno>:
 8012824:	4b01      	ldr	r3, [pc, #4]	@ (801282c <__errno+0x8>)
 8012826:	6818      	ldr	r0, [r3, #0]
 8012828:	4770      	bx	lr
 801282a:	bf00      	nop
 801282c:	200003d4 	.word	0x200003d4

08012830 <__libc_init_array>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	4d0d      	ldr	r5, [pc, #52]	@ (8012868 <__libc_init_array+0x38>)
 8012834:	4c0d      	ldr	r4, [pc, #52]	@ (801286c <__libc_init_array+0x3c>)
 8012836:	1b64      	subs	r4, r4, r5
 8012838:	10a4      	asrs	r4, r4, #2
 801283a:	2600      	movs	r6, #0
 801283c:	42a6      	cmp	r6, r4
 801283e:	d109      	bne.n	8012854 <__libc_init_array+0x24>
 8012840:	4d0b      	ldr	r5, [pc, #44]	@ (8012870 <__libc_init_array+0x40>)
 8012842:	4c0c      	ldr	r4, [pc, #48]	@ (8012874 <__libc_init_array+0x44>)
 8012844:	f002 fc1a 	bl	801507c <_init>
 8012848:	1b64      	subs	r4, r4, r5
 801284a:	10a4      	asrs	r4, r4, #2
 801284c:	2600      	movs	r6, #0
 801284e:	42a6      	cmp	r6, r4
 8012850:	d105      	bne.n	801285e <__libc_init_array+0x2e>
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	f855 3b04 	ldr.w	r3, [r5], #4
 8012858:	4798      	blx	r3
 801285a:	3601      	adds	r6, #1
 801285c:	e7ee      	b.n	801283c <__libc_init_array+0xc>
 801285e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012862:	4798      	blx	r3
 8012864:	3601      	adds	r6, #1
 8012866:	e7f2      	b.n	801284e <__libc_init_array+0x1e>
 8012868:	08015f64 	.word	0x08015f64
 801286c:	08015f64 	.word	0x08015f64
 8012870:	08015f64 	.word	0x08015f64
 8012874:	08015f68 	.word	0x08015f68

08012878 <__retarget_lock_init_recursive>:
 8012878:	4770      	bx	lr

0801287a <__retarget_lock_acquire_recursive>:
 801287a:	4770      	bx	lr

0801287c <__retarget_lock_release_recursive>:
 801287c:	4770      	bx	lr

0801287e <strcpy>:
 801287e:	4603      	mov	r3, r0
 8012880:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012884:	f803 2b01 	strb.w	r2, [r3], #1
 8012888:	2a00      	cmp	r2, #0
 801288a:	d1f9      	bne.n	8012880 <strcpy+0x2>
 801288c:	4770      	bx	lr

0801288e <memcpy>:
 801288e:	440a      	add	r2, r1
 8012890:	4291      	cmp	r1, r2
 8012892:	f100 33ff 	add.w	r3, r0, #4294967295
 8012896:	d100      	bne.n	801289a <memcpy+0xc>
 8012898:	4770      	bx	lr
 801289a:	b510      	push	{r4, lr}
 801289c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128a4:	4291      	cmp	r1, r2
 80128a6:	d1f9      	bne.n	801289c <memcpy+0xe>
 80128a8:	bd10      	pop	{r4, pc}
 80128aa:	0000      	movs	r0, r0
 80128ac:	0000      	movs	r0, r0
	...

080128b0 <nan>:
 80128b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80128b8 <nan+0x8>
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	00000000 	.word	0x00000000
 80128bc:	7ff80000 	.word	0x7ff80000

080128c0 <__assert_func>:
 80128c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128c2:	4614      	mov	r4, r2
 80128c4:	461a      	mov	r2, r3
 80128c6:	4b09      	ldr	r3, [pc, #36]	@ (80128ec <__assert_func+0x2c>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	4605      	mov	r5, r0
 80128cc:	68d8      	ldr	r0, [r3, #12]
 80128ce:	b954      	cbnz	r4, 80128e6 <__assert_func+0x26>
 80128d0:	4b07      	ldr	r3, [pc, #28]	@ (80128f0 <__assert_func+0x30>)
 80128d2:	461c      	mov	r4, r3
 80128d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128d8:	9100      	str	r1, [sp, #0]
 80128da:	462b      	mov	r3, r5
 80128dc:	4905      	ldr	r1, [pc, #20]	@ (80128f4 <__assert_func+0x34>)
 80128de:	f002 f8b3 	bl	8014a48 <fiprintf>
 80128e2:	f002 f8dd 	bl	8014aa0 <abort>
 80128e6:	4b04      	ldr	r3, [pc, #16]	@ (80128f8 <__assert_func+0x38>)
 80128e8:	e7f4      	b.n	80128d4 <__assert_func+0x14>
 80128ea:	bf00      	nop
 80128ec:	200003d4 	.word	0x200003d4
 80128f0:	08015d19 	.word	0x08015d19
 80128f4:	08015ceb 	.word	0x08015ceb
 80128f8:	08015cde 	.word	0x08015cde

080128fc <quorem>:
 80128fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012900:	6903      	ldr	r3, [r0, #16]
 8012902:	690c      	ldr	r4, [r1, #16]
 8012904:	42a3      	cmp	r3, r4
 8012906:	4607      	mov	r7, r0
 8012908:	db7e      	blt.n	8012a08 <quorem+0x10c>
 801290a:	3c01      	subs	r4, #1
 801290c:	f101 0814 	add.w	r8, r1, #20
 8012910:	00a3      	lsls	r3, r4, #2
 8012912:	f100 0514 	add.w	r5, r0, #20
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801291c:	9301      	str	r3, [sp, #4]
 801291e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012926:	3301      	adds	r3, #1
 8012928:	429a      	cmp	r2, r3
 801292a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801292e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012932:	d32e      	bcc.n	8012992 <quorem+0x96>
 8012934:	f04f 0a00 	mov.w	sl, #0
 8012938:	46c4      	mov	ip, r8
 801293a:	46ae      	mov	lr, r5
 801293c:	46d3      	mov	fp, sl
 801293e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012942:	b298      	uxth	r0, r3
 8012944:	fb06 a000 	mla	r0, r6, r0, sl
 8012948:	0c02      	lsrs	r2, r0, #16
 801294a:	0c1b      	lsrs	r3, r3, #16
 801294c:	fb06 2303 	mla	r3, r6, r3, r2
 8012950:	f8de 2000 	ldr.w	r2, [lr]
 8012954:	b280      	uxth	r0, r0
 8012956:	b292      	uxth	r2, r2
 8012958:	1a12      	subs	r2, r2, r0
 801295a:	445a      	add	r2, fp
 801295c:	f8de 0000 	ldr.w	r0, [lr]
 8012960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012964:	b29b      	uxth	r3, r3
 8012966:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801296a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801296e:	b292      	uxth	r2, r2
 8012970:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012974:	45e1      	cmp	r9, ip
 8012976:	f84e 2b04 	str.w	r2, [lr], #4
 801297a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801297e:	d2de      	bcs.n	801293e <quorem+0x42>
 8012980:	9b00      	ldr	r3, [sp, #0]
 8012982:	58eb      	ldr	r3, [r5, r3]
 8012984:	b92b      	cbnz	r3, 8012992 <quorem+0x96>
 8012986:	9b01      	ldr	r3, [sp, #4]
 8012988:	3b04      	subs	r3, #4
 801298a:	429d      	cmp	r5, r3
 801298c:	461a      	mov	r2, r3
 801298e:	d32f      	bcc.n	80129f0 <quorem+0xf4>
 8012990:	613c      	str	r4, [r7, #16]
 8012992:	4638      	mov	r0, r7
 8012994:	f001 fc5a 	bl	801424c <__mcmp>
 8012998:	2800      	cmp	r0, #0
 801299a:	db25      	blt.n	80129e8 <quorem+0xec>
 801299c:	4629      	mov	r1, r5
 801299e:	2000      	movs	r0, #0
 80129a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80129a4:	f8d1 c000 	ldr.w	ip, [r1]
 80129a8:	fa1f fe82 	uxth.w	lr, r2
 80129ac:	fa1f f38c 	uxth.w	r3, ip
 80129b0:	eba3 030e 	sub.w	r3, r3, lr
 80129b4:	4403      	add	r3, r0
 80129b6:	0c12      	lsrs	r2, r2, #16
 80129b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80129bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129c6:	45c1      	cmp	r9, r8
 80129c8:	f841 3b04 	str.w	r3, [r1], #4
 80129cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80129d0:	d2e6      	bcs.n	80129a0 <quorem+0xa4>
 80129d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129da:	b922      	cbnz	r2, 80129e6 <quorem+0xea>
 80129dc:	3b04      	subs	r3, #4
 80129de:	429d      	cmp	r5, r3
 80129e0:	461a      	mov	r2, r3
 80129e2:	d30b      	bcc.n	80129fc <quorem+0x100>
 80129e4:	613c      	str	r4, [r7, #16]
 80129e6:	3601      	adds	r6, #1
 80129e8:	4630      	mov	r0, r6
 80129ea:	b003      	add	sp, #12
 80129ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f0:	6812      	ldr	r2, [r2, #0]
 80129f2:	3b04      	subs	r3, #4
 80129f4:	2a00      	cmp	r2, #0
 80129f6:	d1cb      	bne.n	8012990 <quorem+0x94>
 80129f8:	3c01      	subs	r4, #1
 80129fa:	e7c6      	b.n	801298a <quorem+0x8e>
 80129fc:	6812      	ldr	r2, [r2, #0]
 80129fe:	3b04      	subs	r3, #4
 8012a00:	2a00      	cmp	r2, #0
 8012a02:	d1ef      	bne.n	80129e4 <quorem+0xe8>
 8012a04:	3c01      	subs	r4, #1
 8012a06:	e7ea      	b.n	80129de <quorem+0xe2>
 8012a08:	2000      	movs	r0, #0
 8012a0a:	e7ee      	b.n	80129ea <quorem+0xee>
 8012a0c:	0000      	movs	r0, r0
	...

08012a10 <_dtoa_r>:
 8012a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a14:	69c7      	ldr	r7, [r0, #28]
 8012a16:	b099      	sub	sp, #100	@ 0x64
 8012a18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a1c:	ec55 4b10 	vmov	r4, r5, d0
 8012a20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012a22:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a24:	4683      	mov	fp, r0
 8012a26:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012a2a:	b97f      	cbnz	r7, 8012a4c <_dtoa_r+0x3c>
 8012a2c:	2010      	movs	r0, #16
 8012a2e:	f7fe f889 	bl	8010b44 <malloc>
 8012a32:	4602      	mov	r2, r0
 8012a34:	f8cb 001c 	str.w	r0, [fp, #28]
 8012a38:	b920      	cbnz	r0, 8012a44 <_dtoa_r+0x34>
 8012a3a:	4ba7      	ldr	r3, [pc, #668]	@ (8012cd8 <_dtoa_r+0x2c8>)
 8012a3c:	21ef      	movs	r1, #239	@ 0xef
 8012a3e:	48a7      	ldr	r0, [pc, #668]	@ (8012cdc <_dtoa_r+0x2cc>)
 8012a40:	f7ff ff3e 	bl	80128c0 <__assert_func>
 8012a44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012a48:	6007      	str	r7, [r0, #0]
 8012a4a:	60c7      	str	r7, [r0, #12]
 8012a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a50:	6819      	ldr	r1, [r3, #0]
 8012a52:	b159      	cbz	r1, 8012a6c <_dtoa_r+0x5c>
 8012a54:	685a      	ldr	r2, [r3, #4]
 8012a56:	604a      	str	r2, [r1, #4]
 8012a58:	2301      	movs	r3, #1
 8012a5a:	4093      	lsls	r3, r2
 8012a5c:	608b      	str	r3, [r1, #8]
 8012a5e:	4658      	mov	r0, fp
 8012a60:	f001 f970 	bl	8013d44 <_Bfree>
 8012a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	601a      	str	r2, [r3, #0]
 8012a6c:	1e2b      	subs	r3, r5, #0
 8012a6e:	bfb9      	ittee	lt
 8012a70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012a74:	9303      	strlt	r3, [sp, #12]
 8012a76:	2300      	movge	r3, #0
 8012a78:	6033      	strge	r3, [r6, #0]
 8012a7a:	9f03      	ldr	r7, [sp, #12]
 8012a7c:	4b98      	ldr	r3, [pc, #608]	@ (8012ce0 <_dtoa_r+0x2d0>)
 8012a7e:	bfbc      	itt	lt
 8012a80:	2201      	movlt	r2, #1
 8012a82:	6032      	strlt	r2, [r6, #0]
 8012a84:	43bb      	bics	r3, r7
 8012a86:	d112      	bne.n	8012aae <_dtoa_r+0x9e>
 8012a88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012a8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a94:	4323      	orrs	r3, r4
 8012a96:	f000 854d 	beq.w	8013534 <_dtoa_r+0xb24>
 8012a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012a9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012cf4 <_dtoa_r+0x2e4>
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f000 854f 	beq.w	8013544 <_dtoa_r+0xb34>
 8012aa6:	f10a 0303 	add.w	r3, sl, #3
 8012aaa:	f000 bd49 	b.w	8013540 <_dtoa_r+0xb30>
 8012aae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	ec51 0b17 	vmov	r0, r1, d7
 8012ab8:	2300      	movs	r3, #0
 8012aba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012abe:	f7ee f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ac2:	4680      	mov	r8, r0
 8012ac4:	b158      	cbz	r0, 8012ade <_dtoa_r+0xce>
 8012ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012ac8:	2301      	movs	r3, #1
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ace:	b113      	cbz	r3, 8012ad6 <_dtoa_r+0xc6>
 8012ad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012ad2:	4b84      	ldr	r3, [pc, #528]	@ (8012ce4 <_dtoa_r+0x2d4>)
 8012ad4:	6013      	str	r3, [r2, #0]
 8012ad6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012cf8 <_dtoa_r+0x2e8>
 8012ada:	f000 bd33 	b.w	8013544 <_dtoa_r+0xb34>
 8012ade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012ae2:	aa16      	add	r2, sp, #88	@ 0x58
 8012ae4:	a917      	add	r1, sp, #92	@ 0x5c
 8012ae6:	4658      	mov	r0, fp
 8012ae8:	f001 fcd0 	bl	801448c <__d2b>
 8012aec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012af0:	4681      	mov	r9, r0
 8012af2:	2e00      	cmp	r6, #0
 8012af4:	d077      	beq.n	8012be6 <_dtoa_r+0x1d6>
 8012af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012af8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012b08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012b0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012b10:	4619      	mov	r1, r3
 8012b12:	2200      	movs	r2, #0
 8012b14:	4b74      	ldr	r3, [pc, #464]	@ (8012ce8 <_dtoa_r+0x2d8>)
 8012b16:	f7ed fbb7 	bl	8000288 <__aeabi_dsub>
 8012b1a:	a369      	add	r3, pc, #420	@ (adr r3, 8012cc0 <_dtoa_r+0x2b0>)
 8012b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b20:	f7ed fd6a 	bl	80005f8 <__aeabi_dmul>
 8012b24:	a368      	add	r3, pc, #416	@ (adr r3, 8012cc8 <_dtoa_r+0x2b8>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fbaf 	bl	800028c <__adddf3>
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4630      	mov	r0, r6
 8012b32:	460d      	mov	r5, r1
 8012b34:	f7ed fcf6 	bl	8000524 <__aeabi_i2d>
 8012b38:	a365      	add	r3, pc, #404	@ (adr r3, 8012cd0 <_dtoa_r+0x2c0>)
 8012b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3e:	f7ed fd5b 	bl	80005f8 <__aeabi_dmul>
 8012b42:	4602      	mov	r2, r0
 8012b44:	460b      	mov	r3, r1
 8012b46:	4620      	mov	r0, r4
 8012b48:	4629      	mov	r1, r5
 8012b4a:	f7ed fb9f 	bl	800028c <__adddf3>
 8012b4e:	4604      	mov	r4, r0
 8012b50:	460d      	mov	r5, r1
 8012b52:	f7ee f801 	bl	8000b58 <__aeabi_d2iz>
 8012b56:	2200      	movs	r2, #0
 8012b58:	4607      	mov	r7, r0
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	4629      	mov	r1, r5
 8012b60:	f7ed ffbc 	bl	8000adc <__aeabi_dcmplt>
 8012b64:	b140      	cbz	r0, 8012b78 <_dtoa_r+0x168>
 8012b66:	4638      	mov	r0, r7
 8012b68:	f7ed fcdc 	bl	8000524 <__aeabi_i2d>
 8012b6c:	4622      	mov	r2, r4
 8012b6e:	462b      	mov	r3, r5
 8012b70:	f7ed ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b74:	b900      	cbnz	r0, 8012b78 <_dtoa_r+0x168>
 8012b76:	3f01      	subs	r7, #1
 8012b78:	2f16      	cmp	r7, #22
 8012b7a:	d851      	bhi.n	8012c20 <_dtoa_r+0x210>
 8012b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8012cec <_dtoa_r+0x2dc>)
 8012b7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b8a:	f7ed ffa7 	bl	8000adc <__aeabi_dcmplt>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d048      	beq.n	8012c24 <_dtoa_r+0x214>
 8012b92:	3f01      	subs	r7, #1
 8012b94:	2300      	movs	r3, #0
 8012b96:	9312      	str	r3, [sp, #72]	@ 0x48
 8012b98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012b9a:	1b9b      	subs	r3, r3, r6
 8012b9c:	1e5a      	subs	r2, r3, #1
 8012b9e:	bf44      	itt	mi
 8012ba0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012ba4:	2300      	movmi	r3, #0
 8012ba6:	9208      	str	r2, [sp, #32]
 8012ba8:	bf54      	ite	pl
 8012baa:	f04f 0800 	movpl.w	r8, #0
 8012bae:	9308      	strmi	r3, [sp, #32]
 8012bb0:	2f00      	cmp	r7, #0
 8012bb2:	db39      	blt.n	8012c28 <_dtoa_r+0x218>
 8012bb4:	9b08      	ldr	r3, [sp, #32]
 8012bb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012bb8:	443b      	add	r3, r7
 8012bba:	9308      	str	r3, [sp, #32]
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bc2:	2b09      	cmp	r3, #9
 8012bc4:	d864      	bhi.n	8012c90 <_dtoa_r+0x280>
 8012bc6:	2b05      	cmp	r3, #5
 8012bc8:	bfc4      	itt	gt
 8012bca:	3b04      	subgt	r3, #4
 8012bcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8012bd4:	bfcc      	ite	gt
 8012bd6:	2400      	movgt	r4, #0
 8012bd8:	2401      	movle	r4, #1
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	d863      	bhi.n	8012ca6 <_dtoa_r+0x296>
 8012bde:	e8df f003 	tbb	[pc, r3]
 8012be2:	372a      	.short	0x372a
 8012be4:	5535      	.short	0x5535
 8012be6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012bea:	441e      	add	r6, r3
 8012bec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012bf0:	2b20      	cmp	r3, #32
 8012bf2:	bfc1      	itttt	gt
 8012bf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012bf8:	409f      	lslgt	r7, r3
 8012bfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012bfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012c02:	bfd6      	itet	le
 8012c04:	f1c3 0320 	rsble	r3, r3, #32
 8012c08:	ea47 0003 	orrgt.w	r0, r7, r3
 8012c0c:	fa04 f003 	lslle.w	r0, r4, r3
 8012c10:	f7ed fc78 	bl	8000504 <__aeabi_ui2d>
 8012c14:	2201      	movs	r2, #1
 8012c16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012c1a:	3e01      	subs	r6, #1
 8012c1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012c1e:	e777      	b.n	8012b10 <_dtoa_r+0x100>
 8012c20:	2301      	movs	r3, #1
 8012c22:	e7b8      	b.n	8012b96 <_dtoa_r+0x186>
 8012c24:	9012      	str	r0, [sp, #72]	@ 0x48
 8012c26:	e7b7      	b.n	8012b98 <_dtoa_r+0x188>
 8012c28:	427b      	negs	r3, r7
 8012c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	eba8 0807 	sub.w	r8, r8, r7
 8012c32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c34:	e7c4      	b.n	8012bc0 <_dtoa_r+0x1b0>
 8012c36:	2300      	movs	r3, #0
 8012c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	dc35      	bgt.n	8012cac <_dtoa_r+0x29c>
 8012c40:	2301      	movs	r3, #1
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	9307      	str	r3, [sp, #28]
 8012c46:	461a      	mov	r2, r3
 8012c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8012c4a:	e00b      	b.n	8012c64 <_dtoa_r+0x254>
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	e7f3      	b.n	8012c38 <_dtoa_r+0x228>
 8012c50:	2300      	movs	r3, #0
 8012c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c56:	18fb      	adds	r3, r7, r3
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	9307      	str	r3, [sp, #28]
 8012c60:	bfb8      	it	lt
 8012c62:	2301      	movlt	r3, #1
 8012c64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012c68:	2100      	movs	r1, #0
 8012c6a:	2204      	movs	r2, #4
 8012c6c:	f102 0514 	add.w	r5, r2, #20
 8012c70:	429d      	cmp	r5, r3
 8012c72:	d91f      	bls.n	8012cb4 <_dtoa_r+0x2a4>
 8012c74:	6041      	str	r1, [r0, #4]
 8012c76:	4658      	mov	r0, fp
 8012c78:	f001 f824 	bl	8013cc4 <_Balloc>
 8012c7c:	4682      	mov	sl, r0
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d13c      	bne.n	8012cfc <_dtoa_r+0x2ec>
 8012c82:	4b1b      	ldr	r3, [pc, #108]	@ (8012cf0 <_dtoa_r+0x2e0>)
 8012c84:	4602      	mov	r2, r0
 8012c86:	f240 11af 	movw	r1, #431	@ 0x1af
 8012c8a:	e6d8      	b.n	8012a3e <_dtoa_r+0x2e>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e7e0      	b.n	8012c52 <_dtoa_r+0x242>
 8012c90:	2401      	movs	r4, #1
 8012c92:	2300      	movs	r3, #0
 8012c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012c98:	f04f 33ff 	mov.w	r3, #4294967295
 8012c9c:	9300      	str	r3, [sp, #0]
 8012c9e:	9307      	str	r3, [sp, #28]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	2312      	movs	r3, #18
 8012ca4:	e7d0      	b.n	8012c48 <_dtoa_r+0x238>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012caa:	e7f5      	b.n	8012c98 <_dtoa_r+0x288>
 8012cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	9307      	str	r3, [sp, #28]
 8012cb2:	e7d7      	b.n	8012c64 <_dtoa_r+0x254>
 8012cb4:	3101      	adds	r1, #1
 8012cb6:	0052      	lsls	r2, r2, #1
 8012cb8:	e7d8      	b.n	8012c6c <_dtoa_r+0x25c>
 8012cba:	bf00      	nop
 8012cbc:	f3af 8000 	nop.w
 8012cc0:	636f4361 	.word	0x636f4361
 8012cc4:	3fd287a7 	.word	0x3fd287a7
 8012cc8:	8b60c8b3 	.word	0x8b60c8b3
 8012ccc:	3fc68a28 	.word	0x3fc68a28
 8012cd0:	509f79fb 	.word	0x509f79fb
 8012cd4:	3fd34413 	.word	0x3fd34413
 8012cd8:	08015c65 	.word	0x08015c65
 8012cdc:	08015d27 	.word	0x08015d27
 8012ce0:	7ff00000 	.word	0x7ff00000
 8012ce4:	08015c42 	.word	0x08015c42
 8012ce8:	3ff80000 	.word	0x3ff80000
 8012cec:	08015e80 	.word	0x08015e80
 8012cf0:	08015d7f 	.word	0x08015d7f
 8012cf4:	08015d23 	.word	0x08015d23
 8012cf8:	08015c41 	.word	0x08015c41
 8012cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d00:	6018      	str	r0, [r3, #0]
 8012d02:	9b07      	ldr	r3, [sp, #28]
 8012d04:	2b0e      	cmp	r3, #14
 8012d06:	f200 80a4 	bhi.w	8012e52 <_dtoa_r+0x442>
 8012d0a:	2c00      	cmp	r4, #0
 8012d0c:	f000 80a1 	beq.w	8012e52 <_dtoa_r+0x442>
 8012d10:	2f00      	cmp	r7, #0
 8012d12:	dd33      	ble.n	8012d7c <_dtoa_r+0x36c>
 8012d14:	4bad      	ldr	r3, [pc, #692]	@ (8012fcc <_dtoa_r+0x5bc>)
 8012d16:	f007 020f 	and.w	r2, r7, #15
 8012d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d1e:	ed93 7b00 	vldr	d7, [r3]
 8012d22:	05f8      	lsls	r0, r7, #23
 8012d24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012d2c:	d516      	bpl.n	8012d5c <_dtoa_r+0x34c>
 8012d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8012fd0 <_dtoa_r+0x5c0>)
 8012d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d38:	f7ed fd88 	bl	800084c <__aeabi_ddiv>
 8012d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d40:	f004 040f 	and.w	r4, r4, #15
 8012d44:	2603      	movs	r6, #3
 8012d46:	4da2      	ldr	r5, [pc, #648]	@ (8012fd0 <_dtoa_r+0x5c0>)
 8012d48:	b954      	cbnz	r4, 8012d60 <_dtoa_r+0x350>
 8012d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d52:	f7ed fd7b 	bl	800084c <__aeabi_ddiv>
 8012d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d5a:	e028      	b.n	8012dae <_dtoa_r+0x39e>
 8012d5c:	2602      	movs	r6, #2
 8012d5e:	e7f2      	b.n	8012d46 <_dtoa_r+0x336>
 8012d60:	07e1      	lsls	r1, r4, #31
 8012d62:	d508      	bpl.n	8012d76 <_dtoa_r+0x366>
 8012d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d6c:	f7ed fc44 	bl	80005f8 <__aeabi_dmul>
 8012d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d74:	3601      	adds	r6, #1
 8012d76:	1064      	asrs	r4, r4, #1
 8012d78:	3508      	adds	r5, #8
 8012d7a:	e7e5      	b.n	8012d48 <_dtoa_r+0x338>
 8012d7c:	f000 80d2 	beq.w	8012f24 <_dtoa_r+0x514>
 8012d80:	427c      	negs	r4, r7
 8012d82:	4b92      	ldr	r3, [pc, #584]	@ (8012fcc <_dtoa_r+0x5bc>)
 8012d84:	4d92      	ldr	r5, [pc, #584]	@ (8012fd0 <_dtoa_r+0x5c0>)
 8012d86:	f004 020f 	and.w	r2, r4, #15
 8012d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d96:	f7ed fc2f 	bl	80005f8 <__aeabi_dmul>
 8012d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d9e:	1124      	asrs	r4, r4, #4
 8012da0:	2300      	movs	r3, #0
 8012da2:	2602      	movs	r6, #2
 8012da4:	2c00      	cmp	r4, #0
 8012da6:	f040 80b2 	bne.w	8012f0e <_dtoa_r+0x4fe>
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1d3      	bne.n	8012d56 <_dtoa_r+0x346>
 8012dae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012db0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	f000 80b7 	beq.w	8012f28 <_dtoa_r+0x518>
 8012dba:	4b86      	ldr	r3, [pc, #536]	@ (8012fd4 <_dtoa_r+0x5c4>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	f7ed fe8b 	bl	8000adc <__aeabi_dcmplt>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	f000 80ae 	beq.w	8012f28 <_dtoa_r+0x518>
 8012dcc:	9b07      	ldr	r3, [sp, #28]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f000 80aa 	beq.w	8012f28 <_dtoa_r+0x518>
 8012dd4:	9b00      	ldr	r3, [sp, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	dd37      	ble.n	8012e4a <_dtoa_r+0x43a>
 8012dda:	1e7b      	subs	r3, r7, #1
 8012ddc:	9304      	str	r3, [sp, #16]
 8012dde:	4620      	mov	r0, r4
 8012de0:	4b7d      	ldr	r3, [pc, #500]	@ (8012fd8 <_dtoa_r+0x5c8>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	4629      	mov	r1, r5
 8012de6:	f7ed fc07 	bl	80005f8 <__aeabi_dmul>
 8012dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dee:	9c00      	ldr	r4, [sp, #0]
 8012df0:	3601      	adds	r6, #1
 8012df2:	4630      	mov	r0, r6
 8012df4:	f7ed fb96 	bl	8000524 <__aeabi_i2d>
 8012df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012dfc:	f7ed fbfc 	bl	80005f8 <__aeabi_dmul>
 8012e00:	4b76      	ldr	r3, [pc, #472]	@ (8012fdc <_dtoa_r+0x5cc>)
 8012e02:	2200      	movs	r2, #0
 8012e04:	f7ed fa42 	bl	800028c <__adddf3>
 8012e08:	4605      	mov	r5, r0
 8012e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012e0e:	2c00      	cmp	r4, #0
 8012e10:	f040 808d 	bne.w	8012f2e <_dtoa_r+0x51e>
 8012e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e18:	4b71      	ldr	r3, [pc, #452]	@ (8012fe0 <_dtoa_r+0x5d0>)
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f7ed fa34 	bl	8000288 <__aeabi_dsub>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e28:	462a      	mov	r2, r5
 8012e2a:	4633      	mov	r3, r6
 8012e2c:	f7ed fe74 	bl	8000b18 <__aeabi_dcmpgt>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	f040 828b 	bne.w	801334c <_dtoa_r+0x93c>
 8012e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e3a:	462a      	mov	r2, r5
 8012e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012e40:	f7ed fe4c 	bl	8000adc <__aeabi_dcmplt>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	f040 8128 	bne.w	801309a <_dtoa_r+0x68a>
 8012e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	f2c0 815a 	blt.w	801310e <_dtoa_r+0x6fe>
 8012e5a:	2f0e      	cmp	r7, #14
 8012e5c:	f300 8157 	bgt.w	801310e <_dtoa_r+0x6fe>
 8012e60:	4b5a      	ldr	r3, [pc, #360]	@ (8012fcc <_dtoa_r+0x5bc>)
 8012e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012e66:	ed93 7b00 	vldr	d7, [r3]
 8012e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	ed8d 7b00 	vstr	d7, [sp]
 8012e72:	da03      	bge.n	8012e7c <_dtoa_r+0x46c>
 8012e74:	9b07      	ldr	r3, [sp, #28]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f340 8101 	ble.w	801307e <_dtoa_r+0x66e>
 8012e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012e80:	4656      	mov	r6, sl
 8012e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e86:	4620      	mov	r0, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	f7ed fcdf 	bl	800084c <__aeabi_ddiv>
 8012e8e:	f7ed fe63 	bl	8000b58 <__aeabi_d2iz>
 8012e92:	4680      	mov	r8, r0
 8012e94:	f7ed fb46 	bl	8000524 <__aeabi_i2d>
 8012e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e9c:	f7ed fbac 	bl	80005f8 <__aeabi_dmul>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	4629      	mov	r1, r5
 8012ea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012eac:	f7ed f9ec 	bl	8000288 <__aeabi_dsub>
 8012eb0:	f806 4b01 	strb.w	r4, [r6], #1
 8012eb4:	9d07      	ldr	r5, [sp, #28]
 8012eb6:	eba6 040a 	sub.w	r4, r6, sl
 8012eba:	42a5      	cmp	r5, r4
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	f040 8117 	bne.w	80130f2 <_dtoa_r+0x6e2>
 8012ec4:	f7ed f9e2 	bl	800028c <__adddf3>
 8012ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ecc:	4604      	mov	r4, r0
 8012ece:	460d      	mov	r5, r1
 8012ed0:	f7ed fe22 	bl	8000b18 <__aeabi_dcmpgt>
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	f040 80f9 	bne.w	80130cc <_dtoa_r+0x6bc>
 8012eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	f7ed fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ee6:	b118      	cbz	r0, 8012ef0 <_dtoa_r+0x4e0>
 8012ee8:	f018 0f01 	tst.w	r8, #1
 8012eec:	f040 80ee 	bne.w	80130cc <_dtoa_r+0x6bc>
 8012ef0:	4649      	mov	r1, r9
 8012ef2:	4658      	mov	r0, fp
 8012ef4:	f000 ff26 	bl	8013d44 <_Bfree>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	7033      	strb	r3, [r6, #0]
 8012efc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012efe:	3701      	adds	r7, #1
 8012f00:	601f      	str	r7, [r3, #0]
 8012f02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 831d 	beq.w	8013544 <_dtoa_r+0xb34>
 8012f0a:	601e      	str	r6, [r3, #0]
 8012f0c:	e31a      	b.n	8013544 <_dtoa_r+0xb34>
 8012f0e:	07e2      	lsls	r2, r4, #31
 8012f10:	d505      	bpl.n	8012f1e <_dtoa_r+0x50e>
 8012f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f16:	f7ed fb6f 	bl	80005f8 <__aeabi_dmul>
 8012f1a:	3601      	adds	r6, #1
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	1064      	asrs	r4, r4, #1
 8012f20:	3508      	adds	r5, #8
 8012f22:	e73f      	b.n	8012da4 <_dtoa_r+0x394>
 8012f24:	2602      	movs	r6, #2
 8012f26:	e742      	b.n	8012dae <_dtoa_r+0x39e>
 8012f28:	9c07      	ldr	r4, [sp, #28]
 8012f2a:	9704      	str	r7, [sp, #16]
 8012f2c:	e761      	b.n	8012df2 <_dtoa_r+0x3e2>
 8012f2e:	4b27      	ldr	r3, [pc, #156]	@ (8012fcc <_dtoa_r+0x5bc>)
 8012f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f3a:	4454      	add	r4, sl
 8012f3c:	2900      	cmp	r1, #0
 8012f3e:	d053      	beq.n	8012fe8 <_dtoa_r+0x5d8>
 8012f40:	4928      	ldr	r1, [pc, #160]	@ (8012fe4 <_dtoa_r+0x5d4>)
 8012f42:	2000      	movs	r0, #0
 8012f44:	f7ed fc82 	bl	800084c <__aeabi_ddiv>
 8012f48:	4633      	mov	r3, r6
 8012f4a:	462a      	mov	r2, r5
 8012f4c:	f7ed f99c 	bl	8000288 <__aeabi_dsub>
 8012f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012f54:	4656      	mov	r6, sl
 8012f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f5a:	f7ed fdfd 	bl	8000b58 <__aeabi_d2iz>
 8012f5e:	4605      	mov	r5, r0
 8012f60:	f7ed fae0 	bl	8000524 <__aeabi_i2d>
 8012f64:	4602      	mov	r2, r0
 8012f66:	460b      	mov	r3, r1
 8012f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f6c:	f7ed f98c 	bl	8000288 <__aeabi_dsub>
 8012f70:	3530      	adds	r5, #48	@ 0x30
 8012f72:	4602      	mov	r2, r0
 8012f74:	460b      	mov	r3, r1
 8012f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f7a:	f806 5b01 	strb.w	r5, [r6], #1
 8012f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f82:	f7ed fdab 	bl	8000adc <__aeabi_dcmplt>
 8012f86:	2800      	cmp	r0, #0
 8012f88:	d171      	bne.n	801306e <_dtoa_r+0x65e>
 8012f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f8e:	4911      	ldr	r1, [pc, #68]	@ (8012fd4 <_dtoa_r+0x5c4>)
 8012f90:	2000      	movs	r0, #0
 8012f92:	f7ed f979 	bl	8000288 <__aeabi_dsub>
 8012f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f9a:	f7ed fd9f 	bl	8000adc <__aeabi_dcmplt>
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	f040 8095 	bne.w	80130ce <_dtoa_r+0x6be>
 8012fa4:	42a6      	cmp	r6, r4
 8012fa6:	f43f af50 	beq.w	8012e4a <_dtoa_r+0x43a>
 8012faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012fae:	4b0a      	ldr	r3, [pc, #40]	@ (8012fd8 <_dtoa_r+0x5c8>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f7ed fb21 	bl	80005f8 <__aeabi_dmul>
 8012fb6:	4b08      	ldr	r3, [pc, #32]	@ (8012fd8 <_dtoa_r+0x5c8>)
 8012fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fc2:	f7ed fb19 	bl	80005f8 <__aeabi_dmul>
 8012fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fca:	e7c4      	b.n	8012f56 <_dtoa_r+0x546>
 8012fcc:	08015e80 	.word	0x08015e80
 8012fd0:	08015e58 	.word	0x08015e58
 8012fd4:	3ff00000 	.word	0x3ff00000
 8012fd8:	40240000 	.word	0x40240000
 8012fdc:	401c0000 	.word	0x401c0000
 8012fe0:	40140000 	.word	0x40140000
 8012fe4:	3fe00000 	.word	0x3fe00000
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4628      	mov	r0, r5
 8012fec:	f7ed fb04 	bl	80005f8 <__aeabi_dmul>
 8012ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012ff4:	9415      	str	r4, [sp, #84]	@ 0x54
 8012ff6:	4656      	mov	r6, sl
 8012ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ffc:	f7ed fdac 	bl	8000b58 <__aeabi_d2iz>
 8013000:	4605      	mov	r5, r0
 8013002:	f7ed fa8f 	bl	8000524 <__aeabi_i2d>
 8013006:	4602      	mov	r2, r0
 8013008:	460b      	mov	r3, r1
 801300a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801300e:	f7ed f93b 	bl	8000288 <__aeabi_dsub>
 8013012:	3530      	adds	r5, #48	@ 0x30
 8013014:	f806 5b01 	strb.w	r5, [r6], #1
 8013018:	4602      	mov	r2, r0
 801301a:	460b      	mov	r3, r1
 801301c:	42a6      	cmp	r6, r4
 801301e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013022:	f04f 0200 	mov.w	r2, #0
 8013026:	d124      	bne.n	8013072 <_dtoa_r+0x662>
 8013028:	4bac      	ldr	r3, [pc, #688]	@ (80132dc <_dtoa_r+0x8cc>)
 801302a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801302e:	f7ed f92d 	bl	800028c <__adddf3>
 8013032:	4602      	mov	r2, r0
 8013034:	460b      	mov	r3, r1
 8013036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801303a:	f7ed fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 801303e:	2800      	cmp	r0, #0
 8013040:	d145      	bne.n	80130ce <_dtoa_r+0x6be>
 8013042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013046:	49a5      	ldr	r1, [pc, #660]	@ (80132dc <_dtoa_r+0x8cc>)
 8013048:	2000      	movs	r0, #0
 801304a:	f7ed f91d 	bl	8000288 <__aeabi_dsub>
 801304e:	4602      	mov	r2, r0
 8013050:	460b      	mov	r3, r1
 8013052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013056:	f7ed fd41 	bl	8000adc <__aeabi_dcmplt>
 801305a:	2800      	cmp	r0, #0
 801305c:	f43f aef5 	beq.w	8012e4a <_dtoa_r+0x43a>
 8013060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013062:	1e73      	subs	r3, r6, #1
 8013064:	9315      	str	r3, [sp, #84]	@ 0x54
 8013066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801306a:	2b30      	cmp	r3, #48	@ 0x30
 801306c:	d0f8      	beq.n	8013060 <_dtoa_r+0x650>
 801306e:	9f04      	ldr	r7, [sp, #16]
 8013070:	e73e      	b.n	8012ef0 <_dtoa_r+0x4e0>
 8013072:	4b9b      	ldr	r3, [pc, #620]	@ (80132e0 <_dtoa_r+0x8d0>)
 8013074:	f7ed fac0 	bl	80005f8 <__aeabi_dmul>
 8013078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801307c:	e7bc      	b.n	8012ff8 <_dtoa_r+0x5e8>
 801307e:	d10c      	bne.n	801309a <_dtoa_r+0x68a>
 8013080:	4b98      	ldr	r3, [pc, #608]	@ (80132e4 <_dtoa_r+0x8d4>)
 8013082:	2200      	movs	r2, #0
 8013084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013088:	f7ed fab6 	bl	80005f8 <__aeabi_dmul>
 801308c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013090:	f7ed fd38 	bl	8000b04 <__aeabi_dcmpge>
 8013094:	2800      	cmp	r0, #0
 8013096:	f000 8157 	beq.w	8013348 <_dtoa_r+0x938>
 801309a:	2400      	movs	r4, #0
 801309c:	4625      	mov	r5, r4
 801309e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130a0:	43db      	mvns	r3, r3
 80130a2:	9304      	str	r3, [sp, #16]
 80130a4:	4656      	mov	r6, sl
 80130a6:	2700      	movs	r7, #0
 80130a8:	4621      	mov	r1, r4
 80130aa:	4658      	mov	r0, fp
 80130ac:	f000 fe4a 	bl	8013d44 <_Bfree>
 80130b0:	2d00      	cmp	r5, #0
 80130b2:	d0dc      	beq.n	801306e <_dtoa_r+0x65e>
 80130b4:	b12f      	cbz	r7, 80130c2 <_dtoa_r+0x6b2>
 80130b6:	42af      	cmp	r7, r5
 80130b8:	d003      	beq.n	80130c2 <_dtoa_r+0x6b2>
 80130ba:	4639      	mov	r1, r7
 80130bc:	4658      	mov	r0, fp
 80130be:	f000 fe41 	bl	8013d44 <_Bfree>
 80130c2:	4629      	mov	r1, r5
 80130c4:	4658      	mov	r0, fp
 80130c6:	f000 fe3d 	bl	8013d44 <_Bfree>
 80130ca:	e7d0      	b.n	801306e <_dtoa_r+0x65e>
 80130cc:	9704      	str	r7, [sp, #16]
 80130ce:	4633      	mov	r3, r6
 80130d0:	461e      	mov	r6, r3
 80130d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130d6:	2a39      	cmp	r2, #57	@ 0x39
 80130d8:	d107      	bne.n	80130ea <_dtoa_r+0x6da>
 80130da:	459a      	cmp	sl, r3
 80130dc:	d1f8      	bne.n	80130d0 <_dtoa_r+0x6c0>
 80130de:	9a04      	ldr	r2, [sp, #16]
 80130e0:	3201      	adds	r2, #1
 80130e2:	9204      	str	r2, [sp, #16]
 80130e4:	2230      	movs	r2, #48	@ 0x30
 80130e6:	f88a 2000 	strb.w	r2, [sl]
 80130ea:	781a      	ldrb	r2, [r3, #0]
 80130ec:	3201      	adds	r2, #1
 80130ee:	701a      	strb	r2, [r3, #0]
 80130f0:	e7bd      	b.n	801306e <_dtoa_r+0x65e>
 80130f2:	4b7b      	ldr	r3, [pc, #492]	@ (80132e0 <_dtoa_r+0x8d0>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	f7ed fa7f 	bl	80005f8 <__aeabi_dmul>
 80130fa:	2200      	movs	r2, #0
 80130fc:	2300      	movs	r3, #0
 80130fe:	4604      	mov	r4, r0
 8013100:	460d      	mov	r5, r1
 8013102:	f7ed fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013106:	2800      	cmp	r0, #0
 8013108:	f43f aebb 	beq.w	8012e82 <_dtoa_r+0x472>
 801310c:	e6f0      	b.n	8012ef0 <_dtoa_r+0x4e0>
 801310e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013110:	2a00      	cmp	r2, #0
 8013112:	f000 80db 	beq.w	80132cc <_dtoa_r+0x8bc>
 8013116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013118:	2a01      	cmp	r2, #1
 801311a:	f300 80bf 	bgt.w	801329c <_dtoa_r+0x88c>
 801311e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013120:	2a00      	cmp	r2, #0
 8013122:	f000 80b7 	beq.w	8013294 <_dtoa_r+0x884>
 8013126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801312a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801312c:	4646      	mov	r6, r8
 801312e:	9a08      	ldr	r2, [sp, #32]
 8013130:	2101      	movs	r1, #1
 8013132:	441a      	add	r2, r3
 8013134:	4658      	mov	r0, fp
 8013136:	4498      	add	r8, r3
 8013138:	9208      	str	r2, [sp, #32]
 801313a:	f000 ff01 	bl	8013f40 <__i2b>
 801313e:	4605      	mov	r5, r0
 8013140:	b15e      	cbz	r6, 801315a <_dtoa_r+0x74a>
 8013142:	9b08      	ldr	r3, [sp, #32]
 8013144:	2b00      	cmp	r3, #0
 8013146:	dd08      	ble.n	801315a <_dtoa_r+0x74a>
 8013148:	42b3      	cmp	r3, r6
 801314a:	9a08      	ldr	r2, [sp, #32]
 801314c:	bfa8      	it	ge
 801314e:	4633      	movge	r3, r6
 8013150:	eba8 0803 	sub.w	r8, r8, r3
 8013154:	1af6      	subs	r6, r6, r3
 8013156:	1ad3      	subs	r3, r2, r3
 8013158:	9308      	str	r3, [sp, #32]
 801315a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801315c:	b1f3      	cbz	r3, 801319c <_dtoa_r+0x78c>
 801315e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013160:	2b00      	cmp	r3, #0
 8013162:	f000 80b7 	beq.w	80132d4 <_dtoa_r+0x8c4>
 8013166:	b18c      	cbz	r4, 801318c <_dtoa_r+0x77c>
 8013168:	4629      	mov	r1, r5
 801316a:	4622      	mov	r2, r4
 801316c:	4658      	mov	r0, fp
 801316e:	f000 ffa7 	bl	80140c0 <__pow5mult>
 8013172:	464a      	mov	r2, r9
 8013174:	4601      	mov	r1, r0
 8013176:	4605      	mov	r5, r0
 8013178:	4658      	mov	r0, fp
 801317a:	f000 fef7 	bl	8013f6c <__multiply>
 801317e:	4649      	mov	r1, r9
 8013180:	9004      	str	r0, [sp, #16]
 8013182:	4658      	mov	r0, fp
 8013184:	f000 fdde 	bl	8013d44 <_Bfree>
 8013188:	9b04      	ldr	r3, [sp, #16]
 801318a:	4699      	mov	r9, r3
 801318c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801318e:	1b1a      	subs	r2, r3, r4
 8013190:	d004      	beq.n	801319c <_dtoa_r+0x78c>
 8013192:	4649      	mov	r1, r9
 8013194:	4658      	mov	r0, fp
 8013196:	f000 ff93 	bl	80140c0 <__pow5mult>
 801319a:	4681      	mov	r9, r0
 801319c:	2101      	movs	r1, #1
 801319e:	4658      	mov	r0, fp
 80131a0:	f000 fece 	bl	8013f40 <__i2b>
 80131a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131a6:	4604      	mov	r4, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f000 81cf 	beq.w	801354c <_dtoa_r+0xb3c>
 80131ae:	461a      	mov	r2, r3
 80131b0:	4601      	mov	r1, r0
 80131b2:	4658      	mov	r0, fp
 80131b4:	f000 ff84 	bl	80140c0 <__pow5mult>
 80131b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	4604      	mov	r4, r0
 80131be:	f300 8095 	bgt.w	80132ec <_dtoa_r+0x8dc>
 80131c2:	9b02      	ldr	r3, [sp, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f040 8087 	bne.w	80132d8 <_dtoa_r+0x8c8>
 80131ca:	9b03      	ldr	r3, [sp, #12]
 80131cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f040 8089 	bne.w	80132e8 <_dtoa_r+0x8d8>
 80131d6:	9b03      	ldr	r3, [sp, #12]
 80131d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131dc:	0d1b      	lsrs	r3, r3, #20
 80131de:	051b      	lsls	r3, r3, #20
 80131e0:	b12b      	cbz	r3, 80131ee <_dtoa_r+0x7de>
 80131e2:	9b08      	ldr	r3, [sp, #32]
 80131e4:	3301      	adds	r3, #1
 80131e6:	9308      	str	r3, [sp, #32]
 80131e8:	f108 0801 	add.w	r8, r8, #1
 80131ec:	2301      	movs	r3, #1
 80131ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80131f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f000 81b0 	beq.w	8013558 <_dtoa_r+0xb48>
 80131f8:	6923      	ldr	r3, [r4, #16]
 80131fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80131fe:	6918      	ldr	r0, [r3, #16]
 8013200:	f000 fe52 	bl	8013ea8 <__hi0bits>
 8013204:	f1c0 0020 	rsb	r0, r0, #32
 8013208:	9b08      	ldr	r3, [sp, #32]
 801320a:	4418      	add	r0, r3
 801320c:	f010 001f 	ands.w	r0, r0, #31
 8013210:	d077      	beq.n	8013302 <_dtoa_r+0x8f2>
 8013212:	f1c0 0320 	rsb	r3, r0, #32
 8013216:	2b04      	cmp	r3, #4
 8013218:	dd6b      	ble.n	80132f2 <_dtoa_r+0x8e2>
 801321a:	9b08      	ldr	r3, [sp, #32]
 801321c:	f1c0 001c 	rsb	r0, r0, #28
 8013220:	4403      	add	r3, r0
 8013222:	4480      	add	r8, r0
 8013224:	4406      	add	r6, r0
 8013226:	9308      	str	r3, [sp, #32]
 8013228:	f1b8 0f00 	cmp.w	r8, #0
 801322c:	dd05      	ble.n	801323a <_dtoa_r+0x82a>
 801322e:	4649      	mov	r1, r9
 8013230:	4642      	mov	r2, r8
 8013232:	4658      	mov	r0, fp
 8013234:	f000 ff9e 	bl	8014174 <__lshift>
 8013238:	4681      	mov	r9, r0
 801323a:	9b08      	ldr	r3, [sp, #32]
 801323c:	2b00      	cmp	r3, #0
 801323e:	dd05      	ble.n	801324c <_dtoa_r+0x83c>
 8013240:	4621      	mov	r1, r4
 8013242:	461a      	mov	r2, r3
 8013244:	4658      	mov	r0, fp
 8013246:	f000 ff95 	bl	8014174 <__lshift>
 801324a:	4604      	mov	r4, r0
 801324c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801324e:	2b00      	cmp	r3, #0
 8013250:	d059      	beq.n	8013306 <_dtoa_r+0x8f6>
 8013252:	4621      	mov	r1, r4
 8013254:	4648      	mov	r0, r9
 8013256:	f000 fff9 	bl	801424c <__mcmp>
 801325a:	2800      	cmp	r0, #0
 801325c:	da53      	bge.n	8013306 <_dtoa_r+0x8f6>
 801325e:	1e7b      	subs	r3, r7, #1
 8013260:	9304      	str	r3, [sp, #16]
 8013262:	4649      	mov	r1, r9
 8013264:	2300      	movs	r3, #0
 8013266:	220a      	movs	r2, #10
 8013268:	4658      	mov	r0, fp
 801326a:	f000 fd8d 	bl	8013d88 <__multadd>
 801326e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013270:	4681      	mov	r9, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	f000 8172 	beq.w	801355c <_dtoa_r+0xb4c>
 8013278:	2300      	movs	r3, #0
 801327a:	4629      	mov	r1, r5
 801327c:	220a      	movs	r2, #10
 801327e:	4658      	mov	r0, fp
 8013280:	f000 fd82 	bl	8013d88 <__multadd>
 8013284:	9b00      	ldr	r3, [sp, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	4605      	mov	r5, r0
 801328a:	dc67      	bgt.n	801335c <_dtoa_r+0x94c>
 801328c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801328e:	2b02      	cmp	r3, #2
 8013290:	dc41      	bgt.n	8013316 <_dtoa_r+0x906>
 8013292:	e063      	b.n	801335c <_dtoa_r+0x94c>
 8013294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801329a:	e746      	b.n	801312a <_dtoa_r+0x71a>
 801329c:	9b07      	ldr	r3, [sp, #28]
 801329e:	1e5c      	subs	r4, r3, #1
 80132a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132a2:	42a3      	cmp	r3, r4
 80132a4:	bfbf      	itttt	lt
 80132a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80132a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80132aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80132ac:	1ae3      	sublt	r3, r4, r3
 80132ae:	bfb4      	ite	lt
 80132b0:	18d2      	addlt	r2, r2, r3
 80132b2:	1b1c      	subge	r4, r3, r4
 80132b4:	9b07      	ldr	r3, [sp, #28]
 80132b6:	bfbc      	itt	lt
 80132b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80132ba:	2400      	movlt	r4, #0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	bfb5      	itete	lt
 80132c0:	eba8 0603 	sublt.w	r6, r8, r3
 80132c4:	9b07      	ldrge	r3, [sp, #28]
 80132c6:	2300      	movlt	r3, #0
 80132c8:	4646      	movge	r6, r8
 80132ca:	e730      	b.n	801312e <_dtoa_r+0x71e>
 80132cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80132ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80132d0:	4646      	mov	r6, r8
 80132d2:	e735      	b.n	8013140 <_dtoa_r+0x730>
 80132d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132d6:	e75c      	b.n	8013192 <_dtoa_r+0x782>
 80132d8:	2300      	movs	r3, #0
 80132da:	e788      	b.n	80131ee <_dtoa_r+0x7de>
 80132dc:	3fe00000 	.word	0x3fe00000
 80132e0:	40240000 	.word	0x40240000
 80132e4:	40140000 	.word	0x40140000
 80132e8:	9b02      	ldr	r3, [sp, #8]
 80132ea:	e780      	b.n	80131ee <_dtoa_r+0x7de>
 80132ec:	2300      	movs	r3, #0
 80132ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80132f0:	e782      	b.n	80131f8 <_dtoa_r+0x7e8>
 80132f2:	d099      	beq.n	8013228 <_dtoa_r+0x818>
 80132f4:	9a08      	ldr	r2, [sp, #32]
 80132f6:	331c      	adds	r3, #28
 80132f8:	441a      	add	r2, r3
 80132fa:	4498      	add	r8, r3
 80132fc:	441e      	add	r6, r3
 80132fe:	9208      	str	r2, [sp, #32]
 8013300:	e792      	b.n	8013228 <_dtoa_r+0x818>
 8013302:	4603      	mov	r3, r0
 8013304:	e7f6      	b.n	80132f4 <_dtoa_r+0x8e4>
 8013306:	9b07      	ldr	r3, [sp, #28]
 8013308:	9704      	str	r7, [sp, #16]
 801330a:	2b00      	cmp	r3, #0
 801330c:	dc20      	bgt.n	8013350 <_dtoa_r+0x940>
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013312:	2b02      	cmp	r3, #2
 8013314:	dd1e      	ble.n	8013354 <_dtoa_r+0x944>
 8013316:	9b00      	ldr	r3, [sp, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	f47f aec0 	bne.w	801309e <_dtoa_r+0x68e>
 801331e:	4621      	mov	r1, r4
 8013320:	2205      	movs	r2, #5
 8013322:	4658      	mov	r0, fp
 8013324:	f000 fd30 	bl	8013d88 <__multadd>
 8013328:	4601      	mov	r1, r0
 801332a:	4604      	mov	r4, r0
 801332c:	4648      	mov	r0, r9
 801332e:	f000 ff8d 	bl	801424c <__mcmp>
 8013332:	2800      	cmp	r0, #0
 8013334:	f77f aeb3 	ble.w	801309e <_dtoa_r+0x68e>
 8013338:	4656      	mov	r6, sl
 801333a:	2331      	movs	r3, #49	@ 0x31
 801333c:	f806 3b01 	strb.w	r3, [r6], #1
 8013340:	9b04      	ldr	r3, [sp, #16]
 8013342:	3301      	adds	r3, #1
 8013344:	9304      	str	r3, [sp, #16]
 8013346:	e6ae      	b.n	80130a6 <_dtoa_r+0x696>
 8013348:	9c07      	ldr	r4, [sp, #28]
 801334a:	9704      	str	r7, [sp, #16]
 801334c:	4625      	mov	r5, r4
 801334e:	e7f3      	b.n	8013338 <_dtoa_r+0x928>
 8013350:	9b07      	ldr	r3, [sp, #28]
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013356:	2b00      	cmp	r3, #0
 8013358:	f000 8104 	beq.w	8013564 <_dtoa_r+0xb54>
 801335c:	2e00      	cmp	r6, #0
 801335e:	dd05      	ble.n	801336c <_dtoa_r+0x95c>
 8013360:	4629      	mov	r1, r5
 8013362:	4632      	mov	r2, r6
 8013364:	4658      	mov	r0, fp
 8013366:	f000 ff05 	bl	8014174 <__lshift>
 801336a:	4605      	mov	r5, r0
 801336c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801336e:	2b00      	cmp	r3, #0
 8013370:	d05a      	beq.n	8013428 <_dtoa_r+0xa18>
 8013372:	6869      	ldr	r1, [r5, #4]
 8013374:	4658      	mov	r0, fp
 8013376:	f000 fca5 	bl	8013cc4 <_Balloc>
 801337a:	4606      	mov	r6, r0
 801337c:	b928      	cbnz	r0, 801338a <_dtoa_r+0x97a>
 801337e:	4b84      	ldr	r3, [pc, #528]	@ (8013590 <_dtoa_r+0xb80>)
 8013380:	4602      	mov	r2, r0
 8013382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013386:	f7ff bb5a 	b.w	8012a3e <_dtoa_r+0x2e>
 801338a:	692a      	ldr	r2, [r5, #16]
 801338c:	3202      	adds	r2, #2
 801338e:	0092      	lsls	r2, r2, #2
 8013390:	f105 010c 	add.w	r1, r5, #12
 8013394:	300c      	adds	r0, #12
 8013396:	f7ff fa7a 	bl	801288e <memcpy>
 801339a:	2201      	movs	r2, #1
 801339c:	4631      	mov	r1, r6
 801339e:	4658      	mov	r0, fp
 80133a0:	f000 fee8 	bl	8014174 <__lshift>
 80133a4:	f10a 0301 	add.w	r3, sl, #1
 80133a8:	9307      	str	r3, [sp, #28]
 80133aa:	9b00      	ldr	r3, [sp, #0]
 80133ac:	4453      	add	r3, sl
 80133ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80133b0:	9b02      	ldr	r3, [sp, #8]
 80133b2:	f003 0301 	and.w	r3, r3, #1
 80133b6:	462f      	mov	r7, r5
 80133b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80133ba:	4605      	mov	r5, r0
 80133bc:	9b07      	ldr	r3, [sp, #28]
 80133be:	4621      	mov	r1, r4
 80133c0:	3b01      	subs	r3, #1
 80133c2:	4648      	mov	r0, r9
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	f7ff fa99 	bl	80128fc <quorem>
 80133ca:	4639      	mov	r1, r7
 80133cc:	9002      	str	r0, [sp, #8]
 80133ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80133d2:	4648      	mov	r0, r9
 80133d4:	f000 ff3a 	bl	801424c <__mcmp>
 80133d8:	462a      	mov	r2, r5
 80133da:	9008      	str	r0, [sp, #32]
 80133dc:	4621      	mov	r1, r4
 80133de:	4658      	mov	r0, fp
 80133e0:	f000 ff50 	bl	8014284 <__mdiff>
 80133e4:	68c2      	ldr	r2, [r0, #12]
 80133e6:	4606      	mov	r6, r0
 80133e8:	bb02      	cbnz	r2, 801342c <_dtoa_r+0xa1c>
 80133ea:	4601      	mov	r1, r0
 80133ec:	4648      	mov	r0, r9
 80133ee:	f000 ff2d 	bl	801424c <__mcmp>
 80133f2:	4602      	mov	r2, r0
 80133f4:	4631      	mov	r1, r6
 80133f6:	4658      	mov	r0, fp
 80133f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80133fa:	f000 fca3 	bl	8013d44 <_Bfree>
 80133fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013402:	9e07      	ldr	r6, [sp, #28]
 8013404:	ea43 0102 	orr.w	r1, r3, r2
 8013408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801340a:	4319      	orrs	r1, r3
 801340c:	d110      	bne.n	8013430 <_dtoa_r+0xa20>
 801340e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013412:	d029      	beq.n	8013468 <_dtoa_r+0xa58>
 8013414:	9b08      	ldr	r3, [sp, #32]
 8013416:	2b00      	cmp	r3, #0
 8013418:	dd02      	ble.n	8013420 <_dtoa_r+0xa10>
 801341a:	9b02      	ldr	r3, [sp, #8]
 801341c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013420:	9b00      	ldr	r3, [sp, #0]
 8013422:	f883 8000 	strb.w	r8, [r3]
 8013426:	e63f      	b.n	80130a8 <_dtoa_r+0x698>
 8013428:	4628      	mov	r0, r5
 801342a:	e7bb      	b.n	80133a4 <_dtoa_r+0x994>
 801342c:	2201      	movs	r2, #1
 801342e:	e7e1      	b.n	80133f4 <_dtoa_r+0x9e4>
 8013430:	9b08      	ldr	r3, [sp, #32]
 8013432:	2b00      	cmp	r3, #0
 8013434:	db04      	blt.n	8013440 <_dtoa_r+0xa30>
 8013436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013438:	430b      	orrs	r3, r1
 801343a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801343c:	430b      	orrs	r3, r1
 801343e:	d120      	bne.n	8013482 <_dtoa_r+0xa72>
 8013440:	2a00      	cmp	r2, #0
 8013442:	dded      	ble.n	8013420 <_dtoa_r+0xa10>
 8013444:	4649      	mov	r1, r9
 8013446:	2201      	movs	r2, #1
 8013448:	4658      	mov	r0, fp
 801344a:	f000 fe93 	bl	8014174 <__lshift>
 801344e:	4621      	mov	r1, r4
 8013450:	4681      	mov	r9, r0
 8013452:	f000 fefb 	bl	801424c <__mcmp>
 8013456:	2800      	cmp	r0, #0
 8013458:	dc03      	bgt.n	8013462 <_dtoa_r+0xa52>
 801345a:	d1e1      	bne.n	8013420 <_dtoa_r+0xa10>
 801345c:	f018 0f01 	tst.w	r8, #1
 8013460:	d0de      	beq.n	8013420 <_dtoa_r+0xa10>
 8013462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013466:	d1d8      	bne.n	801341a <_dtoa_r+0xa0a>
 8013468:	9a00      	ldr	r2, [sp, #0]
 801346a:	2339      	movs	r3, #57	@ 0x39
 801346c:	7013      	strb	r3, [r2, #0]
 801346e:	4633      	mov	r3, r6
 8013470:	461e      	mov	r6, r3
 8013472:	3b01      	subs	r3, #1
 8013474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013478:	2a39      	cmp	r2, #57	@ 0x39
 801347a:	d052      	beq.n	8013522 <_dtoa_r+0xb12>
 801347c:	3201      	adds	r2, #1
 801347e:	701a      	strb	r2, [r3, #0]
 8013480:	e612      	b.n	80130a8 <_dtoa_r+0x698>
 8013482:	2a00      	cmp	r2, #0
 8013484:	dd07      	ble.n	8013496 <_dtoa_r+0xa86>
 8013486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801348a:	d0ed      	beq.n	8013468 <_dtoa_r+0xa58>
 801348c:	9a00      	ldr	r2, [sp, #0]
 801348e:	f108 0301 	add.w	r3, r8, #1
 8013492:	7013      	strb	r3, [r2, #0]
 8013494:	e608      	b.n	80130a8 <_dtoa_r+0x698>
 8013496:	9b07      	ldr	r3, [sp, #28]
 8013498:	9a07      	ldr	r2, [sp, #28]
 801349a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801349e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d028      	beq.n	80134f6 <_dtoa_r+0xae6>
 80134a4:	4649      	mov	r1, r9
 80134a6:	2300      	movs	r3, #0
 80134a8:	220a      	movs	r2, #10
 80134aa:	4658      	mov	r0, fp
 80134ac:	f000 fc6c 	bl	8013d88 <__multadd>
 80134b0:	42af      	cmp	r7, r5
 80134b2:	4681      	mov	r9, r0
 80134b4:	f04f 0300 	mov.w	r3, #0
 80134b8:	f04f 020a 	mov.w	r2, #10
 80134bc:	4639      	mov	r1, r7
 80134be:	4658      	mov	r0, fp
 80134c0:	d107      	bne.n	80134d2 <_dtoa_r+0xac2>
 80134c2:	f000 fc61 	bl	8013d88 <__multadd>
 80134c6:	4607      	mov	r7, r0
 80134c8:	4605      	mov	r5, r0
 80134ca:	9b07      	ldr	r3, [sp, #28]
 80134cc:	3301      	adds	r3, #1
 80134ce:	9307      	str	r3, [sp, #28]
 80134d0:	e774      	b.n	80133bc <_dtoa_r+0x9ac>
 80134d2:	f000 fc59 	bl	8013d88 <__multadd>
 80134d6:	4629      	mov	r1, r5
 80134d8:	4607      	mov	r7, r0
 80134da:	2300      	movs	r3, #0
 80134dc:	220a      	movs	r2, #10
 80134de:	4658      	mov	r0, fp
 80134e0:	f000 fc52 	bl	8013d88 <__multadd>
 80134e4:	4605      	mov	r5, r0
 80134e6:	e7f0      	b.n	80134ca <_dtoa_r+0xaba>
 80134e8:	9b00      	ldr	r3, [sp, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	bfcc      	ite	gt
 80134ee:	461e      	movgt	r6, r3
 80134f0:	2601      	movle	r6, #1
 80134f2:	4456      	add	r6, sl
 80134f4:	2700      	movs	r7, #0
 80134f6:	4649      	mov	r1, r9
 80134f8:	2201      	movs	r2, #1
 80134fa:	4658      	mov	r0, fp
 80134fc:	f000 fe3a 	bl	8014174 <__lshift>
 8013500:	4621      	mov	r1, r4
 8013502:	4681      	mov	r9, r0
 8013504:	f000 fea2 	bl	801424c <__mcmp>
 8013508:	2800      	cmp	r0, #0
 801350a:	dcb0      	bgt.n	801346e <_dtoa_r+0xa5e>
 801350c:	d102      	bne.n	8013514 <_dtoa_r+0xb04>
 801350e:	f018 0f01 	tst.w	r8, #1
 8013512:	d1ac      	bne.n	801346e <_dtoa_r+0xa5e>
 8013514:	4633      	mov	r3, r6
 8013516:	461e      	mov	r6, r3
 8013518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801351c:	2a30      	cmp	r2, #48	@ 0x30
 801351e:	d0fa      	beq.n	8013516 <_dtoa_r+0xb06>
 8013520:	e5c2      	b.n	80130a8 <_dtoa_r+0x698>
 8013522:	459a      	cmp	sl, r3
 8013524:	d1a4      	bne.n	8013470 <_dtoa_r+0xa60>
 8013526:	9b04      	ldr	r3, [sp, #16]
 8013528:	3301      	adds	r3, #1
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	2331      	movs	r3, #49	@ 0x31
 801352e:	f88a 3000 	strb.w	r3, [sl]
 8013532:	e5b9      	b.n	80130a8 <_dtoa_r+0x698>
 8013534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013594 <_dtoa_r+0xb84>
 801353a:	b11b      	cbz	r3, 8013544 <_dtoa_r+0xb34>
 801353c:	f10a 0308 	add.w	r3, sl, #8
 8013540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013542:	6013      	str	r3, [r2, #0]
 8013544:	4650      	mov	r0, sl
 8013546:	b019      	add	sp, #100	@ 0x64
 8013548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801354e:	2b01      	cmp	r3, #1
 8013550:	f77f ae37 	ble.w	80131c2 <_dtoa_r+0x7b2>
 8013554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013556:	930a      	str	r3, [sp, #40]	@ 0x28
 8013558:	2001      	movs	r0, #1
 801355a:	e655      	b.n	8013208 <_dtoa_r+0x7f8>
 801355c:	9b00      	ldr	r3, [sp, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	f77f aed6 	ble.w	8013310 <_dtoa_r+0x900>
 8013564:	4656      	mov	r6, sl
 8013566:	4621      	mov	r1, r4
 8013568:	4648      	mov	r0, r9
 801356a:	f7ff f9c7 	bl	80128fc <quorem>
 801356e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013572:	f806 8b01 	strb.w	r8, [r6], #1
 8013576:	9b00      	ldr	r3, [sp, #0]
 8013578:	eba6 020a 	sub.w	r2, r6, sl
 801357c:	4293      	cmp	r3, r2
 801357e:	ddb3      	ble.n	80134e8 <_dtoa_r+0xad8>
 8013580:	4649      	mov	r1, r9
 8013582:	2300      	movs	r3, #0
 8013584:	220a      	movs	r2, #10
 8013586:	4658      	mov	r0, fp
 8013588:	f000 fbfe 	bl	8013d88 <__multadd>
 801358c:	4681      	mov	r9, r0
 801358e:	e7ea      	b.n	8013566 <_dtoa_r+0xb56>
 8013590:	08015d7f 	.word	0x08015d7f
 8013594:	08015d1a 	.word	0x08015d1a

08013598 <_free_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	4605      	mov	r5, r0
 801359c:	2900      	cmp	r1, #0
 801359e:	d041      	beq.n	8013624 <_free_r+0x8c>
 80135a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135a4:	1f0c      	subs	r4, r1, #4
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	bfb8      	it	lt
 80135aa:	18e4      	addlt	r4, r4, r3
 80135ac:	f7fd fb7c 	bl	8010ca8 <__malloc_lock>
 80135b0:	4a1d      	ldr	r2, [pc, #116]	@ (8013628 <_free_r+0x90>)
 80135b2:	6813      	ldr	r3, [r2, #0]
 80135b4:	b933      	cbnz	r3, 80135c4 <_free_r+0x2c>
 80135b6:	6063      	str	r3, [r4, #4]
 80135b8:	6014      	str	r4, [r2, #0]
 80135ba:	4628      	mov	r0, r5
 80135bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135c0:	f7fd bb78 	b.w	8010cb4 <__malloc_unlock>
 80135c4:	42a3      	cmp	r3, r4
 80135c6:	d908      	bls.n	80135da <_free_r+0x42>
 80135c8:	6820      	ldr	r0, [r4, #0]
 80135ca:	1821      	adds	r1, r4, r0
 80135cc:	428b      	cmp	r3, r1
 80135ce:	bf01      	itttt	eq
 80135d0:	6819      	ldreq	r1, [r3, #0]
 80135d2:	685b      	ldreq	r3, [r3, #4]
 80135d4:	1809      	addeq	r1, r1, r0
 80135d6:	6021      	streq	r1, [r4, #0]
 80135d8:	e7ed      	b.n	80135b6 <_free_r+0x1e>
 80135da:	461a      	mov	r2, r3
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	b10b      	cbz	r3, 80135e4 <_free_r+0x4c>
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	d9fa      	bls.n	80135da <_free_r+0x42>
 80135e4:	6811      	ldr	r1, [r2, #0]
 80135e6:	1850      	adds	r0, r2, r1
 80135e8:	42a0      	cmp	r0, r4
 80135ea:	d10b      	bne.n	8013604 <_free_r+0x6c>
 80135ec:	6820      	ldr	r0, [r4, #0]
 80135ee:	4401      	add	r1, r0
 80135f0:	1850      	adds	r0, r2, r1
 80135f2:	4283      	cmp	r3, r0
 80135f4:	6011      	str	r1, [r2, #0]
 80135f6:	d1e0      	bne.n	80135ba <_free_r+0x22>
 80135f8:	6818      	ldr	r0, [r3, #0]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	6053      	str	r3, [r2, #4]
 80135fe:	4408      	add	r0, r1
 8013600:	6010      	str	r0, [r2, #0]
 8013602:	e7da      	b.n	80135ba <_free_r+0x22>
 8013604:	d902      	bls.n	801360c <_free_r+0x74>
 8013606:	230c      	movs	r3, #12
 8013608:	602b      	str	r3, [r5, #0]
 801360a:	e7d6      	b.n	80135ba <_free_r+0x22>
 801360c:	6820      	ldr	r0, [r4, #0]
 801360e:	1821      	adds	r1, r4, r0
 8013610:	428b      	cmp	r3, r1
 8013612:	bf04      	itt	eq
 8013614:	6819      	ldreq	r1, [r3, #0]
 8013616:	685b      	ldreq	r3, [r3, #4]
 8013618:	6063      	str	r3, [r4, #4]
 801361a:	bf04      	itt	eq
 801361c:	1809      	addeq	r1, r1, r0
 801361e:	6021      	streq	r1, [r4, #0]
 8013620:	6054      	str	r4, [r2, #4]
 8013622:	e7ca      	b.n	80135ba <_free_r+0x22>
 8013624:	bd38      	pop	{r3, r4, r5, pc}
 8013626:	bf00      	nop
 8013628:	2000595c 	.word	0x2000595c

0801362c <rshift>:
 801362c:	6903      	ldr	r3, [r0, #16]
 801362e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013636:	ea4f 1261 	mov.w	r2, r1, asr #5
 801363a:	f100 0414 	add.w	r4, r0, #20
 801363e:	dd45      	ble.n	80136cc <rshift+0xa0>
 8013640:	f011 011f 	ands.w	r1, r1, #31
 8013644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801364c:	d10c      	bne.n	8013668 <rshift+0x3c>
 801364e:	f100 0710 	add.w	r7, r0, #16
 8013652:	4629      	mov	r1, r5
 8013654:	42b1      	cmp	r1, r6
 8013656:	d334      	bcc.n	80136c2 <rshift+0x96>
 8013658:	1a9b      	subs	r3, r3, r2
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	1eea      	subs	r2, r5, #3
 801365e:	4296      	cmp	r6, r2
 8013660:	bf38      	it	cc
 8013662:	2300      	movcc	r3, #0
 8013664:	4423      	add	r3, r4
 8013666:	e015      	b.n	8013694 <rshift+0x68>
 8013668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801366c:	f1c1 0820 	rsb	r8, r1, #32
 8013670:	40cf      	lsrs	r7, r1
 8013672:	f105 0e04 	add.w	lr, r5, #4
 8013676:	46a1      	mov	r9, r4
 8013678:	4576      	cmp	r6, lr
 801367a:	46f4      	mov	ip, lr
 801367c:	d815      	bhi.n	80136aa <rshift+0x7e>
 801367e:	1a9a      	subs	r2, r3, r2
 8013680:	0092      	lsls	r2, r2, #2
 8013682:	3a04      	subs	r2, #4
 8013684:	3501      	adds	r5, #1
 8013686:	42ae      	cmp	r6, r5
 8013688:	bf38      	it	cc
 801368a:	2200      	movcc	r2, #0
 801368c:	18a3      	adds	r3, r4, r2
 801368e:	50a7      	str	r7, [r4, r2]
 8013690:	b107      	cbz	r7, 8013694 <rshift+0x68>
 8013692:	3304      	adds	r3, #4
 8013694:	1b1a      	subs	r2, r3, r4
 8013696:	42a3      	cmp	r3, r4
 8013698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801369c:	bf08      	it	eq
 801369e:	2300      	moveq	r3, #0
 80136a0:	6102      	str	r2, [r0, #16]
 80136a2:	bf08      	it	eq
 80136a4:	6143      	streq	r3, [r0, #20]
 80136a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136aa:	f8dc c000 	ldr.w	ip, [ip]
 80136ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80136b2:	ea4c 0707 	orr.w	r7, ip, r7
 80136b6:	f849 7b04 	str.w	r7, [r9], #4
 80136ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136be:	40cf      	lsrs	r7, r1
 80136c0:	e7da      	b.n	8013678 <rshift+0x4c>
 80136c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80136c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80136ca:	e7c3      	b.n	8013654 <rshift+0x28>
 80136cc:	4623      	mov	r3, r4
 80136ce:	e7e1      	b.n	8013694 <rshift+0x68>

080136d0 <__hexdig_fun>:
 80136d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80136d4:	2b09      	cmp	r3, #9
 80136d6:	d802      	bhi.n	80136de <__hexdig_fun+0xe>
 80136d8:	3820      	subs	r0, #32
 80136da:	b2c0      	uxtb	r0, r0
 80136dc:	4770      	bx	lr
 80136de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80136e2:	2b05      	cmp	r3, #5
 80136e4:	d801      	bhi.n	80136ea <__hexdig_fun+0x1a>
 80136e6:	3847      	subs	r0, #71	@ 0x47
 80136e8:	e7f7      	b.n	80136da <__hexdig_fun+0xa>
 80136ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	d801      	bhi.n	80136f6 <__hexdig_fun+0x26>
 80136f2:	3827      	subs	r0, #39	@ 0x27
 80136f4:	e7f1      	b.n	80136da <__hexdig_fun+0xa>
 80136f6:	2000      	movs	r0, #0
 80136f8:	4770      	bx	lr
	...

080136fc <__gethex>:
 80136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	b085      	sub	sp, #20
 8013702:	468a      	mov	sl, r1
 8013704:	9302      	str	r3, [sp, #8]
 8013706:	680b      	ldr	r3, [r1, #0]
 8013708:	9001      	str	r0, [sp, #4]
 801370a:	4690      	mov	r8, r2
 801370c:	1c9c      	adds	r4, r3, #2
 801370e:	46a1      	mov	r9, r4
 8013710:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013714:	2830      	cmp	r0, #48	@ 0x30
 8013716:	d0fa      	beq.n	801370e <__gethex+0x12>
 8013718:	eba9 0303 	sub.w	r3, r9, r3
 801371c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013720:	f7ff ffd6 	bl	80136d0 <__hexdig_fun>
 8013724:	4605      	mov	r5, r0
 8013726:	2800      	cmp	r0, #0
 8013728:	d168      	bne.n	80137fc <__gethex+0x100>
 801372a:	49a0      	ldr	r1, [pc, #640]	@ (80139ac <__gethex+0x2b0>)
 801372c:	2201      	movs	r2, #1
 801372e:	4648      	mov	r0, r9
 8013730:	f7fe ff59 	bl	80125e6 <strncmp>
 8013734:	4607      	mov	r7, r0
 8013736:	2800      	cmp	r0, #0
 8013738:	d167      	bne.n	801380a <__gethex+0x10e>
 801373a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801373e:	4626      	mov	r6, r4
 8013740:	f7ff ffc6 	bl	80136d0 <__hexdig_fun>
 8013744:	2800      	cmp	r0, #0
 8013746:	d062      	beq.n	801380e <__gethex+0x112>
 8013748:	4623      	mov	r3, r4
 801374a:	7818      	ldrb	r0, [r3, #0]
 801374c:	2830      	cmp	r0, #48	@ 0x30
 801374e:	4699      	mov	r9, r3
 8013750:	f103 0301 	add.w	r3, r3, #1
 8013754:	d0f9      	beq.n	801374a <__gethex+0x4e>
 8013756:	f7ff ffbb 	bl	80136d0 <__hexdig_fun>
 801375a:	fab0 f580 	clz	r5, r0
 801375e:	096d      	lsrs	r5, r5, #5
 8013760:	f04f 0b01 	mov.w	fp, #1
 8013764:	464a      	mov	r2, r9
 8013766:	4616      	mov	r6, r2
 8013768:	3201      	adds	r2, #1
 801376a:	7830      	ldrb	r0, [r6, #0]
 801376c:	f7ff ffb0 	bl	80136d0 <__hexdig_fun>
 8013770:	2800      	cmp	r0, #0
 8013772:	d1f8      	bne.n	8013766 <__gethex+0x6a>
 8013774:	498d      	ldr	r1, [pc, #564]	@ (80139ac <__gethex+0x2b0>)
 8013776:	2201      	movs	r2, #1
 8013778:	4630      	mov	r0, r6
 801377a:	f7fe ff34 	bl	80125e6 <strncmp>
 801377e:	2800      	cmp	r0, #0
 8013780:	d13f      	bne.n	8013802 <__gethex+0x106>
 8013782:	b944      	cbnz	r4, 8013796 <__gethex+0x9a>
 8013784:	1c74      	adds	r4, r6, #1
 8013786:	4622      	mov	r2, r4
 8013788:	4616      	mov	r6, r2
 801378a:	3201      	adds	r2, #1
 801378c:	7830      	ldrb	r0, [r6, #0]
 801378e:	f7ff ff9f 	bl	80136d0 <__hexdig_fun>
 8013792:	2800      	cmp	r0, #0
 8013794:	d1f8      	bne.n	8013788 <__gethex+0x8c>
 8013796:	1ba4      	subs	r4, r4, r6
 8013798:	00a7      	lsls	r7, r4, #2
 801379a:	7833      	ldrb	r3, [r6, #0]
 801379c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80137a0:	2b50      	cmp	r3, #80	@ 0x50
 80137a2:	d13e      	bne.n	8013822 <__gethex+0x126>
 80137a4:	7873      	ldrb	r3, [r6, #1]
 80137a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80137a8:	d033      	beq.n	8013812 <__gethex+0x116>
 80137aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80137ac:	d034      	beq.n	8013818 <__gethex+0x11c>
 80137ae:	1c71      	adds	r1, r6, #1
 80137b0:	2400      	movs	r4, #0
 80137b2:	7808      	ldrb	r0, [r1, #0]
 80137b4:	f7ff ff8c 	bl	80136d0 <__hexdig_fun>
 80137b8:	1e43      	subs	r3, r0, #1
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	2b18      	cmp	r3, #24
 80137be:	d830      	bhi.n	8013822 <__gethex+0x126>
 80137c0:	f1a0 0210 	sub.w	r2, r0, #16
 80137c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137c8:	f7ff ff82 	bl	80136d0 <__hexdig_fun>
 80137cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80137d0:	fa5f fc8c 	uxtb.w	ip, ip
 80137d4:	f1bc 0f18 	cmp.w	ip, #24
 80137d8:	f04f 030a 	mov.w	r3, #10
 80137dc:	d91e      	bls.n	801381c <__gethex+0x120>
 80137de:	b104      	cbz	r4, 80137e2 <__gethex+0xe6>
 80137e0:	4252      	negs	r2, r2
 80137e2:	4417      	add	r7, r2
 80137e4:	f8ca 1000 	str.w	r1, [sl]
 80137e8:	b1ed      	cbz	r5, 8013826 <__gethex+0x12a>
 80137ea:	f1bb 0f00 	cmp.w	fp, #0
 80137ee:	bf0c      	ite	eq
 80137f0:	2506      	moveq	r5, #6
 80137f2:	2500      	movne	r5, #0
 80137f4:	4628      	mov	r0, r5
 80137f6:	b005      	add	sp, #20
 80137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fc:	2500      	movs	r5, #0
 80137fe:	462c      	mov	r4, r5
 8013800:	e7b0      	b.n	8013764 <__gethex+0x68>
 8013802:	2c00      	cmp	r4, #0
 8013804:	d1c7      	bne.n	8013796 <__gethex+0x9a>
 8013806:	4627      	mov	r7, r4
 8013808:	e7c7      	b.n	801379a <__gethex+0x9e>
 801380a:	464e      	mov	r6, r9
 801380c:	462f      	mov	r7, r5
 801380e:	2501      	movs	r5, #1
 8013810:	e7c3      	b.n	801379a <__gethex+0x9e>
 8013812:	2400      	movs	r4, #0
 8013814:	1cb1      	adds	r1, r6, #2
 8013816:	e7cc      	b.n	80137b2 <__gethex+0xb6>
 8013818:	2401      	movs	r4, #1
 801381a:	e7fb      	b.n	8013814 <__gethex+0x118>
 801381c:	fb03 0002 	mla	r0, r3, r2, r0
 8013820:	e7ce      	b.n	80137c0 <__gethex+0xc4>
 8013822:	4631      	mov	r1, r6
 8013824:	e7de      	b.n	80137e4 <__gethex+0xe8>
 8013826:	eba6 0309 	sub.w	r3, r6, r9
 801382a:	3b01      	subs	r3, #1
 801382c:	4629      	mov	r1, r5
 801382e:	2b07      	cmp	r3, #7
 8013830:	dc0a      	bgt.n	8013848 <__gethex+0x14c>
 8013832:	9801      	ldr	r0, [sp, #4]
 8013834:	f000 fa46 	bl	8013cc4 <_Balloc>
 8013838:	4604      	mov	r4, r0
 801383a:	b940      	cbnz	r0, 801384e <__gethex+0x152>
 801383c:	4b5c      	ldr	r3, [pc, #368]	@ (80139b0 <__gethex+0x2b4>)
 801383e:	4602      	mov	r2, r0
 8013840:	21e4      	movs	r1, #228	@ 0xe4
 8013842:	485c      	ldr	r0, [pc, #368]	@ (80139b4 <__gethex+0x2b8>)
 8013844:	f7ff f83c 	bl	80128c0 <__assert_func>
 8013848:	3101      	adds	r1, #1
 801384a:	105b      	asrs	r3, r3, #1
 801384c:	e7ef      	b.n	801382e <__gethex+0x132>
 801384e:	f100 0a14 	add.w	sl, r0, #20
 8013852:	2300      	movs	r3, #0
 8013854:	4655      	mov	r5, sl
 8013856:	469b      	mov	fp, r3
 8013858:	45b1      	cmp	r9, r6
 801385a:	d337      	bcc.n	80138cc <__gethex+0x1d0>
 801385c:	f845 bb04 	str.w	fp, [r5], #4
 8013860:	eba5 050a 	sub.w	r5, r5, sl
 8013864:	10ad      	asrs	r5, r5, #2
 8013866:	6125      	str	r5, [r4, #16]
 8013868:	4658      	mov	r0, fp
 801386a:	f000 fb1d 	bl	8013ea8 <__hi0bits>
 801386e:	016d      	lsls	r5, r5, #5
 8013870:	f8d8 6000 	ldr.w	r6, [r8]
 8013874:	1a2d      	subs	r5, r5, r0
 8013876:	42b5      	cmp	r5, r6
 8013878:	dd54      	ble.n	8013924 <__gethex+0x228>
 801387a:	1bad      	subs	r5, r5, r6
 801387c:	4629      	mov	r1, r5
 801387e:	4620      	mov	r0, r4
 8013880:	f000 feb1 	bl	80145e6 <__any_on>
 8013884:	4681      	mov	r9, r0
 8013886:	b178      	cbz	r0, 80138a8 <__gethex+0x1ac>
 8013888:	1e6b      	subs	r3, r5, #1
 801388a:	1159      	asrs	r1, r3, #5
 801388c:	f003 021f 	and.w	r2, r3, #31
 8013890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013894:	f04f 0901 	mov.w	r9, #1
 8013898:	fa09 f202 	lsl.w	r2, r9, r2
 801389c:	420a      	tst	r2, r1
 801389e:	d003      	beq.n	80138a8 <__gethex+0x1ac>
 80138a0:	454b      	cmp	r3, r9
 80138a2:	dc36      	bgt.n	8013912 <__gethex+0x216>
 80138a4:	f04f 0902 	mov.w	r9, #2
 80138a8:	4629      	mov	r1, r5
 80138aa:	4620      	mov	r0, r4
 80138ac:	f7ff febe 	bl	801362c <rshift>
 80138b0:	442f      	add	r7, r5
 80138b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138b6:	42bb      	cmp	r3, r7
 80138b8:	da42      	bge.n	8013940 <__gethex+0x244>
 80138ba:	9801      	ldr	r0, [sp, #4]
 80138bc:	4621      	mov	r1, r4
 80138be:	f000 fa41 	bl	8013d44 <_Bfree>
 80138c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138c4:	2300      	movs	r3, #0
 80138c6:	6013      	str	r3, [r2, #0]
 80138c8:	25a3      	movs	r5, #163	@ 0xa3
 80138ca:	e793      	b.n	80137f4 <__gethex+0xf8>
 80138cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80138d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80138d2:	d012      	beq.n	80138fa <__gethex+0x1fe>
 80138d4:	2b20      	cmp	r3, #32
 80138d6:	d104      	bne.n	80138e2 <__gethex+0x1e6>
 80138d8:	f845 bb04 	str.w	fp, [r5], #4
 80138dc:	f04f 0b00 	mov.w	fp, #0
 80138e0:	465b      	mov	r3, fp
 80138e2:	7830      	ldrb	r0, [r6, #0]
 80138e4:	9303      	str	r3, [sp, #12]
 80138e6:	f7ff fef3 	bl	80136d0 <__hexdig_fun>
 80138ea:	9b03      	ldr	r3, [sp, #12]
 80138ec:	f000 000f 	and.w	r0, r0, #15
 80138f0:	4098      	lsls	r0, r3
 80138f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80138f6:	3304      	adds	r3, #4
 80138f8:	e7ae      	b.n	8013858 <__gethex+0x15c>
 80138fa:	45b1      	cmp	r9, r6
 80138fc:	d8ea      	bhi.n	80138d4 <__gethex+0x1d8>
 80138fe:	492b      	ldr	r1, [pc, #172]	@ (80139ac <__gethex+0x2b0>)
 8013900:	9303      	str	r3, [sp, #12]
 8013902:	2201      	movs	r2, #1
 8013904:	4630      	mov	r0, r6
 8013906:	f7fe fe6e 	bl	80125e6 <strncmp>
 801390a:	9b03      	ldr	r3, [sp, #12]
 801390c:	2800      	cmp	r0, #0
 801390e:	d1e1      	bne.n	80138d4 <__gethex+0x1d8>
 8013910:	e7a2      	b.n	8013858 <__gethex+0x15c>
 8013912:	1ea9      	subs	r1, r5, #2
 8013914:	4620      	mov	r0, r4
 8013916:	f000 fe66 	bl	80145e6 <__any_on>
 801391a:	2800      	cmp	r0, #0
 801391c:	d0c2      	beq.n	80138a4 <__gethex+0x1a8>
 801391e:	f04f 0903 	mov.w	r9, #3
 8013922:	e7c1      	b.n	80138a8 <__gethex+0x1ac>
 8013924:	da09      	bge.n	801393a <__gethex+0x23e>
 8013926:	1b75      	subs	r5, r6, r5
 8013928:	4621      	mov	r1, r4
 801392a:	9801      	ldr	r0, [sp, #4]
 801392c:	462a      	mov	r2, r5
 801392e:	f000 fc21 	bl	8014174 <__lshift>
 8013932:	1b7f      	subs	r7, r7, r5
 8013934:	4604      	mov	r4, r0
 8013936:	f100 0a14 	add.w	sl, r0, #20
 801393a:	f04f 0900 	mov.w	r9, #0
 801393e:	e7b8      	b.n	80138b2 <__gethex+0x1b6>
 8013940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013944:	42bd      	cmp	r5, r7
 8013946:	dd6f      	ble.n	8013a28 <__gethex+0x32c>
 8013948:	1bed      	subs	r5, r5, r7
 801394a:	42ae      	cmp	r6, r5
 801394c:	dc34      	bgt.n	80139b8 <__gethex+0x2bc>
 801394e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013952:	2b02      	cmp	r3, #2
 8013954:	d022      	beq.n	801399c <__gethex+0x2a0>
 8013956:	2b03      	cmp	r3, #3
 8013958:	d024      	beq.n	80139a4 <__gethex+0x2a8>
 801395a:	2b01      	cmp	r3, #1
 801395c:	d115      	bne.n	801398a <__gethex+0x28e>
 801395e:	42ae      	cmp	r6, r5
 8013960:	d113      	bne.n	801398a <__gethex+0x28e>
 8013962:	2e01      	cmp	r6, #1
 8013964:	d10b      	bne.n	801397e <__gethex+0x282>
 8013966:	9a02      	ldr	r2, [sp, #8]
 8013968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801396c:	6013      	str	r3, [r2, #0]
 801396e:	2301      	movs	r3, #1
 8013970:	6123      	str	r3, [r4, #16]
 8013972:	f8ca 3000 	str.w	r3, [sl]
 8013976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013978:	2562      	movs	r5, #98	@ 0x62
 801397a:	601c      	str	r4, [r3, #0]
 801397c:	e73a      	b.n	80137f4 <__gethex+0xf8>
 801397e:	1e71      	subs	r1, r6, #1
 8013980:	4620      	mov	r0, r4
 8013982:	f000 fe30 	bl	80145e6 <__any_on>
 8013986:	2800      	cmp	r0, #0
 8013988:	d1ed      	bne.n	8013966 <__gethex+0x26a>
 801398a:	9801      	ldr	r0, [sp, #4]
 801398c:	4621      	mov	r1, r4
 801398e:	f000 f9d9 	bl	8013d44 <_Bfree>
 8013992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013994:	2300      	movs	r3, #0
 8013996:	6013      	str	r3, [r2, #0]
 8013998:	2550      	movs	r5, #80	@ 0x50
 801399a:	e72b      	b.n	80137f4 <__gethex+0xf8>
 801399c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1f3      	bne.n	801398a <__gethex+0x28e>
 80139a2:	e7e0      	b.n	8013966 <__gethex+0x26a>
 80139a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1dd      	bne.n	8013966 <__gethex+0x26a>
 80139aa:	e7ee      	b.n	801398a <__gethex+0x28e>
 80139ac:	08015adc 	.word	0x08015adc
 80139b0:	08015d7f 	.word	0x08015d7f
 80139b4:	08015d90 	.word	0x08015d90
 80139b8:	1e6f      	subs	r7, r5, #1
 80139ba:	f1b9 0f00 	cmp.w	r9, #0
 80139be:	d130      	bne.n	8013a22 <__gethex+0x326>
 80139c0:	b127      	cbz	r7, 80139cc <__gethex+0x2d0>
 80139c2:	4639      	mov	r1, r7
 80139c4:	4620      	mov	r0, r4
 80139c6:	f000 fe0e 	bl	80145e6 <__any_on>
 80139ca:	4681      	mov	r9, r0
 80139cc:	117a      	asrs	r2, r7, #5
 80139ce:	2301      	movs	r3, #1
 80139d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80139d4:	f007 071f 	and.w	r7, r7, #31
 80139d8:	40bb      	lsls	r3, r7
 80139da:	4213      	tst	r3, r2
 80139dc:	4629      	mov	r1, r5
 80139de:	4620      	mov	r0, r4
 80139e0:	bf18      	it	ne
 80139e2:	f049 0902 	orrne.w	r9, r9, #2
 80139e6:	f7ff fe21 	bl	801362c <rshift>
 80139ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80139ee:	1b76      	subs	r6, r6, r5
 80139f0:	2502      	movs	r5, #2
 80139f2:	f1b9 0f00 	cmp.w	r9, #0
 80139f6:	d047      	beq.n	8013a88 <__gethex+0x38c>
 80139f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139fc:	2b02      	cmp	r3, #2
 80139fe:	d015      	beq.n	8013a2c <__gethex+0x330>
 8013a00:	2b03      	cmp	r3, #3
 8013a02:	d017      	beq.n	8013a34 <__gethex+0x338>
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d109      	bne.n	8013a1c <__gethex+0x320>
 8013a08:	f019 0f02 	tst.w	r9, #2
 8013a0c:	d006      	beq.n	8013a1c <__gethex+0x320>
 8013a0e:	f8da 3000 	ldr.w	r3, [sl]
 8013a12:	ea49 0903 	orr.w	r9, r9, r3
 8013a16:	f019 0f01 	tst.w	r9, #1
 8013a1a:	d10e      	bne.n	8013a3a <__gethex+0x33e>
 8013a1c:	f045 0510 	orr.w	r5, r5, #16
 8013a20:	e032      	b.n	8013a88 <__gethex+0x38c>
 8013a22:	f04f 0901 	mov.w	r9, #1
 8013a26:	e7d1      	b.n	80139cc <__gethex+0x2d0>
 8013a28:	2501      	movs	r5, #1
 8013a2a:	e7e2      	b.n	80139f2 <__gethex+0x2f6>
 8013a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a2e:	f1c3 0301 	rsb	r3, r3, #1
 8013a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d0f0      	beq.n	8013a1c <__gethex+0x320>
 8013a3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a3e:	f104 0314 	add.w	r3, r4, #20
 8013a42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a4a:	f04f 0c00 	mov.w	ip, #0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a58:	d01b      	beq.n	8013a92 <__gethex+0x396>
 8013a5a:	3201      	adds	r2, #1
 8013a5c:	6002      	str	r2, [r0, #0]
 8013a5e:	2d02      	cmp	r5, #2
 8013a60:	f104 0314 	add.w	r3, r4, #20
 8013a64:	d13c      	bne.n	8013ae0 <__gethex+0x3e4>
 8013a66:	f8d8 2000 	ldr.w	r2, [r8]
 8013a6a:	3a01      	subs	r2, #1
 8013a6c:	42b2      	cmp	r2, r6
 8013a6e:	d109      	bne.n	8013a84 <__gethex+0x388>
 8013a70:	1171      	asrs	r1, r6, #5
 8013a72:	2201      	movs	r2, #1
 8013a74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a78:	f006 061f 	and.w	r6, r6, #31
 8013a7c:	fa02 f606 	lsl.w	r6, r2, r6
 8013a80:	421e      	tst	r6, r3
 8013a82:	d13a      	bne.n	8013afa <__gethex+0x3fe>
 8013a84:	f045 0520 	orr.w	r5, r5, #32
 8013a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a8a:	601c      	str	r4, [r3, #0]
 8013a8c:	9b02      	ldr	r3, [sp, #8]
 8013a8e:	601f      	str	r7, [r3, #0]
 8013a90:	e6b0      	b.n	80137f4 <__gethex+0xf8>
 8013a92:	4299      	cmp	r1, r3
 8013a94:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a98:	d8d9      	bhi.n	8013a4e <__gethex+0x352>
 8013a9a:	68a3      	ldr	r3, [r4, #8]
 8013a9c:	459b      	cmp	fp, r3
 8013a9e:	db17      	blt.n	8013ad0 <__gethex+0x3d4>
 8013aa0:	6861      	ldr	r1, [r4, #4]
 8013aa2:	9801      	ldr	r0, [sp, #4]
 8013aa4:	3101      	adds	r1, #1
 8013aa6:	f000 f90d 	bl	8013cc4 <_Balloc>
 8013aaa:	4681      	mov	r9, r0
 8013aac:	b918      	cbnz	r0, 8013ab6 <__gethex+0x3ba>
 8013aae:	4b1a      	ldr	r3, [pc, #104]	@ (8013b18 <__gethex+0x41c>)
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	2184      	movs	r1, #132	@ 0x84
 8013ab4:	e6c5      	b.n	8013842 <__gethex+0x146>
 8013ab6:	6922      	ldr	r2, [r4, #16]
 8013ab8:	3202      	adds	r2, #2
 8013aba:	f104 010c 	add.w	r1, r4, #12
 8013abe:	0092      	lsls	r2, r2, #2
 8013ac0:	300c      	adds	r0, #12
 8013ac2:	f7fe fee4 	bl	801288e <memcpy>
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	9801      	ldr	r0, [sp, #4]
 8013aca:	f000 f93b 	bl	8013d44 <_Bfree>
 8013ace:	464c      	mov	r4, r9
 8013ad0:	6923      	ldr	r3, [r4, #16]
 8013ad2:	1c5a      	adds	r2, r3, #1
 8013ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ad8:	6122      	str	r2, [r4, #16]
 8013ada:	2201      	movs	r2, #1
 8013adc:	615a      	str	r2, [r3, #20]
 8013ade:	e7be      	b.n	8013a5e <__gethex+0x362>
 8013ae0:	6922      	ldr	r2, [r4, #16]
 8013ae2:	455a      	cmp	r2, fp
 8013ae4:	dd0b      	ble.n	8013afe <__gethex+0x402>
 8013ae6:	2101      	movs	r1, #1
 8013ae8:	4620      	mov	r0, r4
 8013aea:	f7ff fd9f 	bl	801362c <rshift>
 8013aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013af2:	3701      	adds	r7, #1
 8013af4:	42bb      	cmp	r3, r7
 8013af6:	f6ff aee0 	blt.w	80138ba <__gethex+0x1be>
 8013afa:	2501      	movs	r5, #1
 8013afc:	e7c2      	b.n	8013a84 <__gethex+0x388>
 8013afe:	f016 061f 	ands.w	r6, r6, #31
 8013b02:	d0fa      	beq.n	8013afa <__gethex+0x3fe>
 8013b04:	4453      	add	r3, sl
 8013b06:	f1c6 0620 	rsb	r6, r6, #32
 8013b0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013b0e:	f000 f9cb 	bl	8013ea8 <__hi0bits>
 8013b12:	42b0      	cmp	r0, r6
 8013b14:	dbe7      	blt.n	8013ae6 <__gethex+0x3ea>
 8013b16:	e7f0      	b.n	8013afa <__gethex+0x3fe>
 8013b18:	08015d7f 	.word	0x08015d7f

08013b1c <L_shift>:
 8013b1c:	f1c2 0208 	rsb	r2, r2, #8
 8013b20:	0092      	lsls	r2, r2, #2
 8013b22:	b570      	push	{r4, r5, r6, lr}
 8013b24:	f1c2 0620 	rsb	r6, r2, #32
 8013b28:	6843      	ldr	r3, [r0, #4]
 8013b2a:	6804      	ldr	r4, [r0, #0]
 8013b2c:	fa03 f506 	lsl.w	r5, r3, r6
 8013b30:	432c      	orrs	r4, r5
 8013b32:	40d3      	lsrs	r3, r2
 8013b34:	6004      	str	r4, [r0, #0]
 8013b36:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b3a:	4288      	cmp	r0, r1
 8013b3c:	d3f4      	bcc.n	8013b28 <L_shift+0xc>
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}

08013b40 <__match>:
 8013b40:	b530      	push	{r4, r5, lr}
 8013b42:	6803      	ldr	r3, [r0, #0]
 8013b44:	3301      	adds	r3, #1
 8013b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b4a:	b914      	cbnz	r4, 8013b52 <__match+0x12>
 8013b4c:	6003      	str	r3, [r0, #0]
 8013b4e:	2001      	movs	r0, #1
 8013b50:	bd30      	pop	{r4, r5, pc}
 8013b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013b5a:	2d19      	cmp	r5, #25
 8013b5c:	bf98      	it	ls
 8013b5e:	3220      	addls	r2, #32
 8013b60:	42a2      	cmp	r2, r4
 8013b62:	d0f0      	beq.n	8013b46 <__match+0x6>
 8013b64:	2000      	movs	r0, #0
 8013b66:	e7f3      	b.n	8013b50 <__match+0x10>

08013b68 <__hexnan>:
 8013b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6c:	680b      	ldr	r3, [r1, #0]
 8013b6e:	6801      	ldr	r1, [r0, #0]
 8013b70:	115e      	asrs	r6, r3, #5
 8013b72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b76:	f013 031f 	ands.w	r3, r3, #31
 8013b7a:	b087      	sub	sp, #28
 8013b7c:	bf18      	it	ne
 8013b7e:	3604      	addne	r6, #4
 8013b80:	2500      	movs	r5, #0
 8013b82:	1f37      	subs	r7, r6, #4
 8013b84:	4682      	mov	sl, r0
 8013b86:	4690      	mov	r8, r2
 8013b88:	9301      	str	r3, [sp, #4]
 8013b8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b8e:	46b9      	mov	r9, r7
 8013b90:	463c      	mov	r4, r7
 8013b92:	9502      	str	r5, [sp, #8]
 8013b94:	46ab      	mov	fp, r5
 8013b96:	784a      	ldrb	r2, [r1, #1]
 8013b98:	1c4b      	adds	r3, r1, #1
 8013b9a:	9303      	str	r3, [sp, #12]
 8013b9c:	b342      	cbz	r2, 8013bf0 <__hexnan+0x88>
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	9105      	str	r1, [sp, #20]
 8013ba2:	9204      	str	r2, [sp, #16]
 8013ba4:	f7ff fd94 	bl	80136d0 <__hexdig_fun>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	d151      	bne.n	8013c50 <__hexnan+0xe8>
 8013bac:	9a04      	ldr	r2, [sp, #16]
 8013bae:	9905      	ldr	r1, [sp, #20]
 8013bb0:	2a20      	cmp	r2, #32
 8013bb2:	d818      	bhi.n	8013be6 <__hexnan+0x7e>
 8013bb4:	9b02      	ldr	r3, [sp, #8]
 8013bb6:	459b      	cmp	fp, r3
 8013bb8:	dd13      	ble.n	8013be2 <__hexnan+0x7a>
 8013bba:	454c      	cmp	r4, r9
 8013bbc:	d206      	bcs.n	8013bcc <__hexnan+0x64>
 8013bbe:	2d07      	cmp	r5, #7
 8013bc0:	dc04      	bgt.n	8013bcc <__hexnan+0x64>
 8013bc2:	462a      	mov	r2, r5
 8013bc4:	4649      	mov	r1, r9
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f7ff ffa8 	bl	8013b1c <L_shift>
 8013bcc:	4544      	cmp	r4, r8
 8013bce:	d952      	bls.n	8013c76 <__hexnan+0x10e>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	f1a4 0904 	sub.w	r9, r4, #4
 8013bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8013bda:	f8cd b008 	str.w	fp, [sp, #8]
 8013bde:	464c      	mov	r4, r9
 8013be0:	461d      	mov	r5, r3
 8013be2:	9903      	ldr	r1, [sp, #12]
 8013be4:	e7d7      	b.n	8013b96 <__hexnan+0x2e>
 8013be6:	2a29      	cmp	r2, #41	@ 0x29
 8013be8:	d157      	bne.n	8013c9a <__hexnan+0x132>
 8013bea:	3102      	adds	r1, #2
 8013bec:	f8ca 1000 	str.w	r1, [sl]
 8013bf0:	f1bb 0f00 	cmp.w	fp, #0
 8013bf4:	d051      	beq.n	8013c9a <__hexnan+0x132>
 8013bf6:	454c      	cmp	r4, r9
 8013bf8:	d206      	bcs.n	8013c08 <__hexnan+0xa0>
 8013bfa:	2d07      	cmp	r5, #7
 8013bfc:	dc04      	bgt.n	8013c08 <__hexnan+0xa0>
 8013bfe:	462a      	mov	r2, r5
 8013c00:	4649      	mov	r1, r9
 8013c02:	4620      	mov	r0, r4
 8013c04:	f7ff ff8a 	bl	8013b1c <L_shift>
 8013c08:	4544      	cmp	r4, r8
 8013c0a:	d936      	bls.n	8013c7a <__hexnan+0x112>
 8013c0c:	f1a8 0204 	sub.w	r2, r8, #4
 8013c10:	4623      	mov	r3, r4
 8013c12:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c16:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c1a:	429f      	cmp	r7, r3
 8013c1c:	d2f9      	bcs.n	8013c12 <__hexnan+0xaa>
 8013c1e:	1b3b      	subs	r3, r7, r4
 8013c20:	f023 0303 	bic.w	r3, r3, #3
 8013c24:	3304      	adds	r3, #4
 8013c26:	3401      	adds	r4, #1
 8013c28:	3e03      	subs	r6, #3
 8013c2a:	42b4      	cmp	r4, r6
 8013c2c:	bf88      	it	hi
 8013c2e:	2304      	movhi	r3, #4
 8013c30:	4443      	add	r3, r8
 8013c32:	2200      	movs	r2, #0
 8013c34:	f843 2b04 	str.w	r2, [r3], #4
 8013c38:	429f      	cmp	r7, r3
 8013c3a:	d2fb      	bcs.n	8013c34 <__hexnan+0xcc>
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	b91b      	cbnz	r3, 8013c48 <__hexnan+0xe0>
 8013c40:	4547      	cmp	r7, r8
 8013c42:	d128      	bne.n	8013c96 <__hexnan+0x12e>
 8013c44:	2301      	movs	r3, #1
 8013c46:	603b      	str	r3, [r7, #0]
 8013c48:	2005      	movs	r0, #5
 8013c4a:	b007      	add	sp, #28
 8013c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c50:	3501      	adds	r5, #1
 8013c52:	2d08      	cmp	r5, #8
 8013c54:	f10b 0b01 	add.w	fp, fp, #1
 8013c58:	dd06      	ble.n	8013c68 <__hexnan+0x100>
 8013c5a:	4544      	cmp	r4, r8
 8013c5c:	d9c1      	bls.n	8013be2 <__hexnan+0x7a>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c64:	2501      	movs	r5, #1
 8013c66:	3c04      	subs	r4, #4
 8013c68:	6822      	ldr	r2, [r4, #0]
 8013c6a:	f000 000f 	and.w	r0, r0, #15
 8013c6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013c72:	6020      	str	r0, [r4, #0]
 8013c74:	e7b5      	b.n	8013be2 <__hexnan+0x7a>
 8013c76:	2508      	movs	r5, #8
 8013c78:	e7b3      	b.n	8013be2 <__hexnan+0x7a>
 8013c7a:	9b01      	ldr	r3, [sp, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0dd      	beq.n	8013c3c <__hexnan+0xd4>
 8013c80:	f1c3 0320 	rsb	r3, r3, #32
 8013c84:	f04f 32ff 	mov.w	r2, #4294967295
 8013c88:	40da      	lsrs	r2, r3
 8013c8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013c8e:	4013      	ands	r3, r2
 8013c90:	f846 3c04 	str.w	r3, [r6, #-4]
 8013c94:	e7d2      	b.n	8013c3c <__hexnan+0xd4>
 8013c96:	3f04      	subs	r7, #4
 8013c98:	e7d0      	b.n	8013c3c <__hexnan+0xd4>
 8013c9a:	2004      	movs	r0, #4
 8013c9c:	e7d5      	b.n	8013c4a <__hexnan+0xe2>

08013c9e <__ascii_mbtowc>:
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	b901      	cbnz	r1, 8013ca4 <__ascii_mbtowc+0x6>
 8013ca2:	a901      	add	r1, sp, #4
 8013ca4:	b142      	cbz	r2, 8013cb8 <__ascii_mbtowc+0x1a>
 8013ca6:	b14b      	cbz	r3, 8013cbc <__ascii_mbtowc+0x1e>
 8013ca8:	7813      	ldrb	r3, [r2, #0]
 8013caa:	600b      	str	r3, [r1, #0]
 8013cac:	7812      	ldrb	r2, [r2, #0]
 8013cae:	1e10      	subs	r0, r2, #0
 8013cb0:	bf18      	it	ne
 8013cb2:	2001      	movne	r0, #1
 8013cb4:	b002      	add	sp, #8
 8013cb6:	4770      	bx	lr
 8013cb8:	4610      	mov	r0, r2
 8013cba:	e7fb      	b.n	8013cb4 <__ascii_mbtowc+0x16>
 8013cbc:	f06f 0001 	mvn.w	r0, #1
 8013cc0:	e7f8      	b.n	8013cb4 <__ascii_mbtowc+0x16>
	...

08013cc4 <_Balloc>:
 8013cc4:	b570      	push	{r4, r5, r6, lr}
 8013cc6:	69c6      	ldr	r6, [r0, #28]
 8013cc8:	4604      	mov	r4, r0
 8013cca:	460d      	mov	r5, r1
 8013ccc:	b976      	cbnz	r6, 8013cec <_Balloc+0x28>
 8013cce:	2010      	movs	r0, #16
 8013cd0:	f7fc ff38 	bl	8010b44 <malloc>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	61e0      	str	r0, [r4, #28]
 8013cd8:	b920      	cbnz	r0, 8013ce4 <_Balloc+0x20>
 8013cda:	4b18      	ldr	r3, [pc, #96]	@ (8013d3c <_Balloc+0x78>)
 8013cdc:	4818      	ldr	r0, [pc, #96]	@ (8013d40 <_Balloc+0x7c>)
 8013cde:	216b      	movs	r1, #107	@ 0x6b
 8013ce0:	f7fe fdee 	bl	80128c0 <__assert_func>
 8013ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ce8:	6006      	str	r6, [r0, #0]
 8013cea:	60c6      	str	r6, [r0, #12]
 8013cec:	69e6      	ldr	r6, [r4, #28]
 8013cee:	68f3      	ldr	r3, [r6, #12]
 8013cf0:	b183      	cbz	r3, 8013d14 <_Balloc+0x50>
 8013cf2:	69e3      	ldr	r3, [r4, #28]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013cfa:	b9b8      	cbnz	r0, 8013d2c <_Balloc+0x68>
 8013cfc:	2101      	movs	r1, #1
 8013cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8013d02:	1d72      	adds	r2, r6, #5
 8013d04:	0092      	lsls	r2, r2, #2
 8013d06:	4620      	mov	r0, r4
 8013d08:	f000 fed1 	bl	8014aae <_calloc_r>
 8013d0c:	b160      	cbz	r0, 8013d28 <_Balloc+0x64>
 8013d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d12:	e00e      	b.n	8013d32 <_Balloc+0x6e>
 8013d14:	2221      	movs	r2, #33	@ 0x21
 8013d16:	2104      	movs	r1, #4
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f000 fec8 	bl	8014aae <_calloc_r>
 8013d1e:	69e3      	ldr	r3, [r4, #28]
 8013d20:	60f0      	str	r0, [r6, #12]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1e4      	bne.n	8013cf2 <_Balloc+0x2e>
 8013d28:	2000      	movs	r0, #0
 8013d2a:	bd70      	pop	{r4, r5, r6, pc}
 8013d2c:	6802      	ldr	r2, [r0, #0]
 8013d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d32:	2300      	movs	r3, #0
 8013d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d38:	e7f7      	b.n	8013d2a <_Balloc+0x66>
 8013d3a:	bf00      	nop
 8013d3c:	08015c65 	.word	0x08015c65
 8013d40:	08015df0 	.word	0x08015df0

08013d44 <_Bfree>:
 8013d44:	b570      	push	{r4, r5, r6, lr}
 8013d46:	69c6      	ldr	r6, [r0, #28]
 8013d48:	4605      	mov	r5, r0
 8013d4a:	460c      	mov	r4, r1
 8013d4c:	b976      	cbnz	r6, 8013d6c <_Bfree+0x28>
 8013d4e:	2010      	movs	r0, #16
 8013d50:	f7fc fef8 	bl	8010b44 <malloc>
 8013d54:	4602      	mov	r2, r0
 8013d56:	61e8      	str	r0, [r5, #28]
 8013d58:	b920      	cbnz	r0, 8013d64 <_Bfree+0x20>
 8013d5a:	4b09      	ldr	r3, [pc, #36]	@ (8013d80 <_Bfree+0x3c>)
 8013d5c:	4809      	ldr	r0, [pc, #36]	@ (8013d84 <_Bfree+0x40>)
 8013d5e:	218f      	movs	r1, #143	@ 0x8f
 8013d60:	f7fe fdae 	bl	80128c0 <__assert_func>
 8013d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d68:	6006      	str	r6, [r0, #0]
 8013d6a:	60c6      	str	r6, [r0, #12]
 8013d6c:	b13c      	cbz	r4, 8013d7e <_Bfree+0x3a>
 8013d6e:	69eb      	ldr	r3, [r5, #28]
 8013d70:	6862      	ldr	r2, [r4, #4]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d78:	6021      	str	r1, [r4, #0]
 8013d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d7e:	bd70      	pop	{r4, r5, r6, pc}
 8013d80:	08015c65 	.word	0x08015c65
 8013d84:	08015df0 	.word	0x08015df0

08013d88 <__multadd>:
 8013d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8c:	690d      	ldr	r5, [r1, #16]
 8013d8e:	4607      	mov	r7, r0
 8013d90:	460c      	mov	r4, r1
 8013d92:	461e      	mov	r6, r3
 8013d94:	f101 0c14 	add.w	ip, r1, #20
 8013d98:	2000      	movs	r0, #0
 8013d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8013d9e:	b299      	uxth	r1, r3
 8013da0:	fb02 6101 	mla	r1, r2, r1, r6
 8013da4:	0c1e      	lsrs	r6, r3, #16
 8013da6:	0c0b      	lsrs	r3, r1, #16
 8013da8:	fb02 3306 	mla	r3, r2, r6, r3
 8013dac:	b289      	uxth	r1, r1
 8013dae:	3001      	adds	r0, #1
 8013db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013db4:	4285      	cmp	r5, r0
 8013db6:	f84c 1b04 	str.w	r1, [ip], #4
 8013dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013dbe:	dcec      	bgt.n	8013d9a <__multadd+0x12>
 8013dc0:	b30e      	cbz	r6, 8013e06 <__multadd+0x7e>
 8013dc2:	68a3      	ldr	r3, [r4, #8]
 8013dc4:	42ab      	cmp	r3, r5
 8013dc6:	dc19      	bgt.n	8013dfc <__multadd+0x74>
 8013dc8:	6861      	ldr	r1, [r4, #4]
 8013dca:	4638      	mov	r0, r7
 8013dcc:	3101      	adds	r1, #1
 8013dce:	f7ff ff79 	bl	8013cc4 <_Balloc>
 8013dd2:	4680      	mov	r8, r0
 8013dd4:	b928      	cbnz	r0, 8013de2 <__multadd+0x5a>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8013e0c <__multadd+0x84>)
 8013dda:	480d      	ldr	r0, [pc, #52]	@ (8013e10 <__multadd+0x88>)
 8013ddc:	21ba      	movs	r1, #186	@ 0xba
 8013dde:	f7fe fd6f 	bl	80128c0 <__assert_func>
 8013de2:	6922      	ldr	r2, [r4, #16]
 8013de4:	3202      	adds	r2, #2
 8013de6:	f104 010c 	add.w	r1, r4, #12
 8013dea:	0092      	lsls	r2, r2, #2
 8013dec:	300c      	adds	r0, #12
 8013dee:	f7fe fd4e 	bl	801288e <memcpy>
 8013df2:	4621      	mov	r1, r4
 8013df4:	4638      	mov	r0, r7
 8013df6:	f7ff ffa5 	bl	8013d44 <_Bfree>
 8013dfa:	4644      	mov	r4, r8
 8013dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e00:	3501      	adds	r5, #1
 8013e02:	615e      	str	r6, [r3, #20]
 8013e04:	6125      	str	r5, [r4, #16]
 8013e06:	4620      	mov	r0, r4
 8013e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0c:	08015d7f 	.word	0x08015d7f
 8013e10:	08015df0 	.word	0x08015df0

08013e14 <__s2b>:
 8013e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e18:	460c      	mov	r4, r1
 8013e1a:	4615      	mov	r5, r2
 8013e1c:	461f      	mov	r7, r3
 8013e1e:	2209      	movs	r2, #9
 8013e20:	3308      	adds	r3, #8
 8013e22:	4606      	mov	r6, r0
 8013e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e28:	2100      	movs	r1, #0
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	db09      	blt.n	8013e44 <__s2b+0x30>
 8013e30:	4630      	mov	r0, r6
 8013e32:	f7ff ff47 	bl	8013cc4 <_Balloc>
 8013e36:	b940      	cbnz	r0, 8013e4a <__s2b+0x36>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	4b19      	ldr	r3, [pc, #100]	@ (8013ea0 <__s2b+0x8c>)
 8013e3c:	4819      	ldr	r0, [pc, #100]	@ (8013ea4 <__s2b+0x90>)
 8013e3e:	21d3      	movs	r1, #211	@ 0xd3
 8013e40:	f7fe fd3e 	bl	80128c0 <__assert_func>
 8013e44:	0052      	lsls	r2, r2, #1
 8013e46:	3101      	adds	r1, #1
 8013e48:	e7f0      	b.n	8013e2c <__s2b+0x18>
 8013e4a:	9b08      	ldr	r3, [sp, #32]
 8013e4c:	6143      	str	r3, [r0, #20]
 8013e4e:	2d09      	cmp	r5, #9
 8013e50:	f04f 0301 	mov.w	r3, #1
 8013e54:	6103      	str	r3, [r0, #16]
 8013e56:	dd16      	ble.n	8013e86 <__s2b+0x72>
 8013e58:	f104 0909 	add.w	r9, r4, #9
 8013e5c:	46c8      	mov	r8, r9
 8013e5e:	442c      	add	r4, r5
 8013e60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013e64:	4601      	mov	r1, r0
 8013e66:	3b30      	subs	r3, #48	@ 0x30
 8013e68:	220a      	movs	r2, #10
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	f7ff ff8c 	bl	8013d88 <__multadd>
 8013e70:	45a0      	cmp	r8, r4
 8013e72:	d1f5      	bne.n	8013e60 <__s2b+0x4c>
 8013e74:	f1a5 0408 	sub.w	r4, r5, #8
 8013e78:	444c      	add	r4, r9
 8013e7a:	1b2d      	subs	r5, r5, r4
 8013e7c:	1963      	adds	r3, r4, r5
 8013e7e:	42bb      	cmp	r3, r7
 8013e80:	db04      	blt.n	8013e8c <__s2b+0x78>
 8013e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e86:	340a      	adds	r4, #10
 8013e88:	2509      	movs	r5, #9
 8013e8a:	e7f6      	b.n	8013e7a <__s2b+0x66>
 8013e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e90:	4601      	mov	r1, r0
 8013e92:	3b30      	subs	r3, #48	@ 0x30
 8013e94:	220a      	movs	r2, #10
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff ff76 	bl	8013d88 <__multadd>
 8013e9c:	e7ee      	b.n	8013e7c <__s2b+0x68>
 8013e9e:	bf00      	nop
 8013ea0:	08015d7f 	.word	0x08015d7f
 8013ea4:	08015df0 	.word	0x08015df0

08013ea8 <__hi0bits>:
 8013ea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013eac:	4603      	mov	r3, r0
 8013eae:	bf36      	itet	cc
 8013eb0:	0403      	lslcc	r3, r0, #16
 8013eb2:	2000      	movcs	r0, #0
 8013eb4:	2010      	movcc	r0, #16
 8013eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013eba:	bf3c      	itt	cc
 8013ebc:	021b      	lslcc	r3, r3, #8
 8013ebe:	3008      	addcc	r0, #8
 8013ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ec4:	bf3c      	itt	cc
 8013ec6:	011b      	lslcc	r3, r3, #4
 8013ec8:	3004      	addcc	r0, #4
 8013eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ece:	bf3c      	itt	cc
 8013ed0:	009b      	lslcc	r3, r3, #2
 8013ed2:	3002      	addcc	r0, #2
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	db05      	blt.n	8013ee4 <__hi0bits+0x3c>
 8013ed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013edc:	f100 0001 	add.w	r0, r0, #1
 8013ee0:	bf08      	it	eq
 8013ee2:	2020      	moveq	r0, #32
 8013ee4:	4770      	bx	lr

08013ee6 <__lo0bits>:
 8013ee6:	6803      	ldr	r3, [r0, #0]
 8013ee8:	4602      	mov	r2, r0
 8013eea:	f013 0007 	ands.w	r0, r3, #7
 8013eee:	d00b      	beq.n	8013f08 <__lo0bits+0x22>
 8013ef0:	07d9      	lsls	r1, r3, #31
 8013ef2:	d421      	bmi.n	8013f38 <__lo0bits+0x52>
 8013ef4:	0798      	lsls	r0, r3, #30
 8013ef6:	bf49      	itett	mi
 8013ef8:	085b      	lsrmi	r3, r3, #1
 8013efa:	089b      	lsrpl	r3, r3, #2
 8013efc:	2001      	movmi	r0, #1
 8013efe:	6013      	strmi	r3, [r2, #0]
 8013f00:	bf5c      	itt	pl
 8013f02:	6013      	strpl	r3, [r2, #0]
 8013f04:	2002      	movpl	r0, #2
 8013f06:	4770      	bx	lr
 8013f08:	b299      	uxth	r1, r3
 8013f0a:	b909      	cbnz	r1, 8013f10 <__lo0bits+0x2a>
 8013f0c:	0c1b      	lsrs	r3, r3, #16
 8013f0e:	2010      	movs	r0, #16
 8013f10:	b2d9      	uxtb	r1, r3
 8013f12:	b909      	cbnz	r1, 8013f18 <__lo0bits+0x32>
 8013f14:	3008      	adds	r0, #8
 8013f16:	0a1b      	lsrs	r3, r3, #8
 8013f18:	0719      	lsls	r1, r3, #28
 8013f1a:	bf04      	itt	eq
 8013f1c:	091b      	lsreq	r3, r3, #4
 8013f1e:	3004      	addeq	r0, #4
 8013f20:	0799      	lsls	r1, r3, #30
 8013f22:	bf04      	itt	eq
 8013f24:	089b      	lsreq	r3, r3, #2
 8013f26:	3002      	addeq	r0, #2
 8013f28:	07d9      	lsls	r1, r3, #31
 8013f2a:	d403      	bmi.n	8013f34 <__lo0bits+0x4e>
 8013f2c:	085b      	lsrs	r3, r3, #1
 8013f2e:	f100 0001 	add.w	r0, r0, #1
 8013f32:	d003      	beq.n	8013f3c <__lo0bits+0x56>
 8013f34:	6013      	str	r3, [r2, #0]
 8013f36:	4770      	bx	lr
 8013f38:	2000      	movs	r0, #0
 8013f3a:	4770      	bx	lr
 8013f3c:	2020      	movs	r0, #32
 8013f3e:	4770      	bx	lr

08013f40 <__i2b>:
 8013f40:	b510      	push	{r4, lr}
 8013f42:	460c      	mov	r4, r1
 8013f44:	2101      	movs	r1, #1
 8013f46:	f7ff febd 	bl	8013cc4 <_Balloc>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	b928      	cbnz	r0, 8013f5a <__i2b+0x1a>
 8013f4e:	4b05      	ldr	r3, [pc, #20]	@ (8013f64 <__i2b+0x24>)
 8013f50:	4805      	ldr	r0, [pc, #20]	@ (8013f68 <__i2b+0x28>)
 8013f52:	f240 1145 	movw	r1, #325	@ 0x145
 8013f56:	f7fe fcb3 	bl	80128c0 <__assert_func>
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	6144      	str	r4, [r0, #20]
 8013f5e:	6103      	str	r3, [r0, #16]
 8013f60:	bd10      	pop	{r4, pc}
 8013f62:	bf00      	nop
 8013f64:	08015d7f 	.word	0x08015d7f
 8013f68:	08015df0 	.word	0x08015df0

08013f6c <__multiply>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	4614      	mov	r4, r2
 8013f72:	690a      	ldr	r2, [r1, #16]
 8013f74:	6923      	ldr	r3, [r4, #16]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	bfa8      	it	ge
 8013f7a:	4623      	movge	r3, r4
 8013f7c:	460f      	mov	r7, r1
 8013f7e:	bfa4      	itt	ge
 8013f80:	460c      	movge	r4, r1
 8013f82:	461f      	movge	r7, r3
 8013f84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013f88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013f8c:	68a3      	ldr	r3, [r4, #8]
 8013f8e:	6861      	ldr	r1, [r4, #4]
 8013f90:	eb0a 0609 	add.w	r6, sl, r9
 8013f94:	42b3      	cmp	r3, r6
 8013f96:	b085      	sub	sp, #20
 8013f98:	bfb8      	it	lt
 8013f9a:	3101      	addlt	r1, #1
 8013f9c:	f7ff fe92 	bl	8013cc4 <_Balloc>
 8013fa0:	b930      	cbnz	r0, 8013fb0 <__multiply+0x44>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	4b44      	ldr	r3, [pc, #272]	@ (80140b8 <__multiply+0x14c>)
 8013fa6:	4845      	ldr	r0, [pc, #276]	@ (80140bc <__multiply+0x150>)
 8013fa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013fac:	f7fe fc88 	bl	80128c0 <__assert_func>
 8013fb0:	f100 0514 	add.w	r5, r0, #20
 8013fb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013fb8:	462b      	mov	r3, r5
 8013fba:	2200      	movs	r2, #0
 8013fbc:	4543      	cmp	r3, r8
 8013fbe:	d321      	bcc.n	8014004 <__multiply+0x98>
 8013fc0:	f107 0114 	add.w	r1, r7, #20
 8013fc4:	f104 0214 	add.w	r2, r4, #20
 8013fc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013fcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013fd0:	9302      	str	r3, [sp, #8]
 8013fd2:	1b13      	subs	r3, r2, r4
 8013fd4:	3b15      	subs	r3, #21
 8013fd6:	f023 0303 	bic.w	r3, r3, #3
 8013fda:	3304      	adds	r3, #4
 8013fdc:	f104 0715 	add.w	r7, r4, #21
 8013fe0:	42ba      	cmp	r2, r7
 8013fe2:	bf38      	it	cc
 8013fe4:	2304      	movcc	r3, #4
 8013fe6:	9301      	str	r3, [sp, #4]
 8013fe8:	9b02      	ldr	r3, [sp, #8]
 8013fea:	9103      	str	r1, [sp, #12]
 8013fec:	428b      	cmp	r3, r1
 8013fee:	d80c      	bhi.n	801400a <__multiply+0x9e>
 8013ff0:	2e00      	cmp	r6, #0
 8013ff2:	dd03      	ble.n	8013ffc <__multiply+0x90>
 8013ff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d05b      	beq.n	80140b4 <__multiply+0x148>
 8013ffc:	6106      	str	r6, [r0, #16]
 8013ffe:	b005      	add	sp, #20
 8014000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014004:	f843 2b04 	str.w	r2, [r3], #4
 8014008:	e7d8      	b.n	8013fbc <__multiply+0x50>
 801400a:	f8b1 a000 	ldrh.w	sl, [r1]
 801400e:	f1ba 0f00 	cmp.w	sl, #0
 8014012:	d024      	beq.n	801405e <__multiply+0xf2>
 8014014:	f104 0e14 	add.w	lr, r4, #20
 8014018:	46a9      	mov	r9, r5
 801401a:	f04f 0c00 	mov.w	ip, #0
 801401e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014022:	f8d9 3000 	ldr.w	r3, [r9]
 8014026:	fa1f fb87 	uxth.w	fp, r7
 801402a:	b29b      	uxth	r3, r3
 801402c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014034:	f8d9 7000 	ldr.w	r7, [r9]
 8014038:	4463      	add	r3, ip
 801403a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801403e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014046:	b29b      	uxth	r3, r3
 8014048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801404c:	4572      	cmp	r2, lr
 801404e:	f849 3b04 	str.w	r3, [r9], #4
 8014052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014056:	d8e2      	bhi.n	801401e <__multiply+0xb2>
 8014058:	9b01      	ldr	r3, [sp, #4]
 801405a:	f845 c003 	str.w	ip, [r5, r3]
 801405e:	9b03      	ldr	r3, [sp, #12]
 8014060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014064:	3104      	adds	r1, #4
 8014066:	f1b9 0f00 	cmp.w	r9, #0
 801406a:	d021      	beq.n	80140b0 <__multiply+0x144>
 801406c:	682b      	ldr	r3, [r5, #0]
 801406e:	f104 0c14 	add.w	ip, r4, #20
 8014072:	46ae      	mov	lr, r5
 8014074:	f04f 0a00 	mov.w	sl, #0
 8014078:	f8bc b000 	ldrh.w	fp, [ip]
 801407c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014080:	fb09 770b 	mla	r7, r9, fp, r7
 8014084:	4457      	add	r7, sl
 8014086:	b29b      	uxth	r3, r3
 8014088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801408c:	f84e 3b04 	str.w	r3, [lr], #4
 8014090:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014098:	f8be 3000 	ldrh.w	r3, [lr]
 801409c:	fb09 330a 	mla	r3, r9, sl, r3
 80140a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80140a4:	4562      	cmp	r2, ip
 80140a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80140aa:	d8e5      	bhi.n	8014078 <__multiply+0x10c>
 80140ac:	9f01      	ldr	r7, [sp, #4]
 80140ae:	51eb      	str	r3, [r5, r7]
 80140b0:	3504      	adds	r5, #4
 80140b2:	e799      	b.n	8013fe8 <__multiply+0x7c>
 80140b4:	3e01      	subs	r6, #1
 80140b6:	e79b      	b.n	8013ff0 <__multiply+0x84>
 80140b8:	08015d7f 	.word	0x08015d7f
 80140bc:	08015df0 	.word	0x08015df0

080140c0 <__pow5mult>:
 80140c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140c4:	4615      	mov	r5, r2
 80140c6:	f012 0203 	ands.w	r2, r2, #3
 80140ca:	4607      	mov	r7, r0
 80140cc:	460e      	mov	r6, r1
 80140ce:	d007      	beq.n	80140e0 <__pow5mult+0x20>
 80140d0:	4c25      	ldr	r4, [pc, #148]	@ (8014168 <__pow5mult+0xa8>)
 80140d2:	3a01      	subs	r2, #1
 80140d4:	2300      	movs	r3, #0
 80140d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140da:	f7ff fe55 	bl	8013d88 <__multadd>
 80140de:	4606      	mov	r6, r0
 80140e0:	10ad      	asrs	r5, r5, #2
 80140e2:	d03d      	beq.n	8014160 <__pow5mult+0xa0>
 80140e4:	69fc      	ldr	r4, [r7, #28]
 80140e6:	b97c      	cbnz	r4, 8014108 <__pow5mult+0x48>
 80140e8:	2010      	movs	r0, #16
 80140ea:	f7fc fd2b 	bl	8010b44 <malloc>
 80140ee:	4602      	mov	r2, r0
 80140f0:	61f8      	str	r0, [r7, #28]
 80140f2:	b928      	cbnz	r0, 8014100 <__pow5mult+0x40>
 80140f4:	4b1d      	ldr	r3, [pc, #116]	@ (801416c <__pow5mult+0xac>)
 80140f6:	481e      	ldr	r0, [pc, #120]	@ (8014170 <__pow5mult+0xb0>)
 80140f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80140fc:	f7fe fbe0 	bl	80128c0 <__assert_func>
 8014100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014104:	6004      	str	r4, [r0, #0]
 8014106:	60c4      	str	r4, [r0, #12]
 8014108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801410c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014110:	b94c      	cbnz	r4, 8014126 <__pow5mult+0x66>
 8014112:	f240 2171 	movw	r1, #625	@ 0x271
 8014116:	4638      	mov	r0, r7
 8014118:	f7ff ff12 	bl	8013f40 <__i2b>
 801411c:	2300      	movs	r3, #0
 801411e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014122:	4604      	mov	r4, r0
 8014124:	6003      	str	r3, [r0, #0]
 8014126:	f04f 0900 	mov.w	r9, #0
 801412a:	07eb      	lsls	r3, r5, #31
 801412c:	d50a      	bpl.n	8014144 <__pow5mult+0x84>
 801412e:	4631      	mov	r1, r6
 8014130:	4622      	mov	r2, r4
 8014132:	4638      	mov	r0, r7
 8014134:	f7ff ff1a 	bl	8013f6c <__multiply>
 8014138:	4631      	mov	r1, r6
 801413a:	4680      	mov	r8, r0
 801413c:	4638      	mov	r0, r7
 801413e:	f7ff fe01 	bl	8013d44 <_Bfree>
 8014142:	4646      	mov	r6, r8
 8014144:	106d      	asrs	r5, r5, #1
 8014146:	d00b      	beq.n	8014160 <__pow5mult+0xa0>
 8014148:	6820      	ldr	r0, [r4, #0]
 801414a:	b938      	cbnz	r0, 801415c <__pow5mult+0x9c>
 801414c:	4622      	mov	r2, r4
 801414e:	4621      	mov	r1, r4
 8014150:	4638      	mov	r0, r7
 8014152:	f7ff ff0b 	bl	8013f6c <__multiply>
 8014156:	6020      	str	r0, [r4, #0]
 8014158:	f8c0 9000 	str.w	r9, [r0]
 801415c:	4604      	mov	r4, r0
 801415e:	e7e4      	b.n	801412a <__pow5mult+0x6a>
 8014160:	4630      	mov	r0, r6
 8014162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014166:	bf00      	nop
 8014168:	08015e4c 	.word	0x08015e4c
 801416c:	08015c65 	.word	0x08015c65
 8014170:	08015df0 	.word	0x08015df0

08014174 <__lshift>:
 8014174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014178:	460c      	mov	r4, r1
 801417a:	6849      	ldr	r1, [r1, #4]
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014182:	68a3      	ldr	r3, [r4, #8]
 8014184:	4607      	mov	r7, r0
 8014186:	4691      	mov	r9, r2
 8014188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801418c:	f108 0601 	add.w	r6, r8, #1
 8014190:	42b3      	cmp	r3, r6
 8014192:	db0b      	blt.n	80141ac <__lshift+0x38>
 8014194:	4638      	mov	r0, r7
 8014196:	f7ff fd95 	bl	8013cc4 <_Balloc>
 801419a:	4605      	mov	r5, r0
 801419c:	b948      	cbnz	r0, 80141b2 <__lshift+0x3e>
 801419e:	4602      	mov	r2, r0
 80141a0:	4b28      	ldr	r3, [pc, #160]	@ (8014244 <__lshift+0xd0>)
 80141a2:	4829      	ldr	r0, [pc, #164]	@ (8014248 <__lshift+0xd4>)
 80141a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80141a8:	f7fe fb8a 	bl	80128c0 <__assert_func>
 80141ac:	3101      	adds	r1, #1
 80141ae:	005b      	lsls	r3, r3, #1
 80141b0:	e7ee      	b.n	8014190 <__lshift+0x1c>
 80141b2:	2300      	movs	r3, #0
 80141b4:	f100 0114 	add.w	r1, r0, #20
 80141b8:	f100 0210 	add.w	r2, r0, #16
 80141bc:	4618      	mov	r0, r3
 80141be:	4553      	cmp	r3, sl
 80141c0:	db33      	blt.n	801422a <__lshift+0xb6>
 80141c2:	6920      	ldr	r0, [r4, #16]
 80141c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141c8:	f104 0314 	add.w	r3, r4, #20
 80141cc:	f019 091f 	ands.w	r9, r9, #31
 80141d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80141d8:	d02b      	beq.n	8014232 <__lshift+0xbe>
 80141da:	f1c9 0e20 	rsb	lr, r9, #32
 80141de:	468a      	mov	sl, r1
 80141e0:	2200      	movs	r2, #0
 80141e2:	6818      	ldr	r0, [r3, #0]
 80141e4:	fa00 f009 	lsl.w	r0, r0, r9
 80141e8:	4310      	orrs	r0, r2
 80141ea:	f84a 0b04 	str.w	r0, [sl], #4
 80141ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80141f2:	459c      	cmp	ip, r3
 80141f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80141f8:	d8f3      	bhi.n	80141e2 <__lshift+0x6e>
 80141fa:	ebac 0304 	sub.w	r3, ip, r4
 80141fe:	3b15      	subs	r3, #21
 8014200:	f023 0303 	bic.w	r3, r3, #3
 8014204:	3304      	adds	r3, #4
 8014206:	f104 0015 	add.w	r0, r4, #21
 801420a:	4584      	cmp	ip, r0
 801420c:	bf38      	it	cc
 801420e:	2304      	movcc	r3, #4
 8014210:	50ca      	str	r2, [r1, r3]
 8014212:	b10a      	cbz	r2, 8014218 <__lshift+0xa4>
 8014214:	f108 0602 	add.w	r6, r8, #2
 8014218:	3e01      	subs	r6, #1
 801421a:	4638      	mov	r0, r7
 801421c:	612e      	str	r6, [r5, #16]
 801421e:	4621      	mov	r1, r4
 8014220:	f7ff fd90 	bl	8013d44 <_Bfree>
 8014224:	4628      	mov	r0, r5
 8014226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801422a:	f842 0f04 	str.w	r0, [r2, #4]!
 801422e:	3301      	adds	r3, #1
 8014230:	e7c5      	b.n	80141be <__lshift+0x4a>
 8014232:	3904      	subs	r1, #4
 8014234:	f853 2b04 	ldr.w	r2, [r3], #4
 8014238:	f841 2f04 	str.w	r2, [r1, #4]!
 801423c:	459c      	cmp	ip, r3
 801423e:	d8f9      	bhi.n	8014234 <__lshift+0xc0>
 8014240:	e7ea      	b.n	8014218 <__lshift+0xa4>
 8014242:	bf00      	nop
 8014244:	08015d7f 	.word	0x08015d7f
 8014248:	08015df0 	.word	0x08015df0

0801424c <__mcmp>:
 801424c:	690a      	ldr	r2, [r1, #16]
 801424e:	4603      	mov	r3, r0
 8014250:	6900      	ldr	r0, [r0, #16]
 8014252:	1a80      	subs	r0, r0, r2
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	d10e      	bne.n	8014276 <__mcmp+0x2a>
 8014258:	3314      	adds	r3, #20
 801425a:	3114      	adds	r1, #20
 801425c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801426c:	4295      	cmp	r5, r2
 801426e:	d003      	beq.n	8014278 <__mcmp+0x2c>
 8014270:	d205      	bcs.n	801427e <__mcmp+0x32>
 8014272:	f04f 30ff 	mov.w	r0, #4294967295
 8014276:	bd30      	pop	{r4, r5, pc}
 8014278:	42a3      	cmp	r3, r4
 801427a:	d3f3      	bcc.n	8014264 <__mcmp+0x18>
 801427c:	e7fb      	b.n	8014276 <__mcmp+0x2a>
 801427e:	2001      	movs	r0, #1
 8014280:	e7f9      	b.n	8014276 <__mcmp+0x2a>
	...

08014284 <__mdiff>:
 8014284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014288:	4689      	mov	r9, r1
 801428a:	4606      	mov	r6, r0
 801428c:	4611      	mov	r1, r2
 801428e:	4648      	mov	r0, r9
 8014290:	4614      	mov	r4, r2
 8014292:	f7ff ffdb 	bl	801424c <__mcmp>
 8014296:	1e05      	subs	r5, r0, #0
 8014298:	d112      	bne.n	80142c0 <__mdiff+0x3c>
 801429a:	4629      	mov	r1, r5
 801429c:	4630      	mov	r0, r6
 801429e:	f7ff fd11 	bl	8013cc4 <_Balloc>
 80142a2:	4602      	mov	r2, r0
 80142a4:	b928      	cbnz	r0, 80142b2 <__mdiff+0x2e>
 80142a6:	4b3f      	ldr	r3, [pc, #252]	@ (80143a4 <__mdiff+0x120>)
 80142a8:	f240 2137 	movw	r1, #567	@ 0x237
 80142ac:	483e      	ldr	r0, [pc, #248]	@ (80143a8 <__mdiff+0x124>)
 80142ae:	f7fe fb07 	bl	80128c0 <__assert_func>
 80142b2:	2301      	movs	r3, #1
 80142b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142b8:	4610      	mov	r0, r2
 80142ba:	b003      	add	sp, #12
 80142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c0:	bfbc      	itt	lt
 80142c2:	464b      	movlt	r3, r9
 80142c4:	46a1      	movlt	r9, r4
 80142c6:	4630      	mov	r0, r6
 80142c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80142cc:	bfba      	itte	lt
 80142ce:	461c      	movlt	r4, r3
 80142d0:	2501      	movlt	r5, #1
 80142d2:	2500      	movge	r5, #0
 80142d4:	f7ff fcf6 	bl	8013cc4 <_Balloc>
 80142d8:	4602      	mov	r2, r0
 80142da:	b918      	cbnz	r0, 80142e4 <__mdiff+0x60>
 80142dc:	4b31      	ldr	r3, [pc, #196]	@ (80143a4 <__mdiff+0x120>)
 80142de:	f240 2145 	movw	r1, #581	@ 0x245
 80142e2:	e7e3      	b.n	80142ac <__mdiff+0x28>
 80142e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80142e8:	6926      	ldr	r6, [r4, #16]
 80142ea:	60c5      	str	r5, [r0, #12]
 80142ec:	f109 0310 	add.w	r3, r9, #16
 80142f0:	f109 0514 	add.w	r5, r9, #20
 80142f4:	f104 0e14 	add.w	lr, r4, #20
 80142f8:	f100 0b14 	add.w	fp, r0, #20
 80142fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014304:	9301      	str	r3, [sp, #4]
 8014306:	46d9      	mov	r9, fp
 8014308:	f04f 0c00 	mov.w	ip, #0
 801430c:	9b01      	ldr	r3, [sp, #4]
 801430e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014312:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	fa1f f38a 	uxth.w	r3, sl
 801431c:	4619      	mov	r1, r3
 801431e:	b283      	uxth	r3, r0
 8014320:	1acb      	subs	r3, r1, r3
 8014322:	0c00      	lsrs	r0, r0, #16
 8014324:	4463      	add	r3, ip
 8014326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801432a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801432e:	b29b      	uxth	r3, r3
 8014330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014334:	4576      	cmp	r6, lr
 8014336:	f849 3b04 	str.w	r3, [r9], #4
 801433a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801433e:	d8e5      	bhi.n	801430c <__mdiff+0x88>
 8014340:	1b33      	subs	r3, r6, r4
 8014342:	3b15      	subs	r3, #21
 8014344:	f023 0303 	bic.w	r3, r3, #3
 8014348:	3415      	adds	r4, #21
 801434a:	3304      	adds	r3, #4
 801434c:	42a6      	cmp	r6, r4
 801434e:	bf38      	it	cc
 8014350:	2304      	movcc	r3, #4
 8014352:	441d      	add	r5, r3
 8014354:	445b      	add	r3, fp
 8014356:	461e      	mov	r6, r3
 8014358:	462c      	mov	r4, r5
 801435a:	4544      	cmp	r4, r8
 801435c:	d30e      	bcc.n	801437c <__mdiff+0xf8>
 801435e:	f108 0103 	add.w	r1, r8, #3
 8014362:	1b49      	subs	r1, r1, r5
 8014364:	f021 0103 	bic.w	r1, r1, #3
 8014368:	3d03      	subs	r5, #3
 801436a:	45a8      	cmp	r8, r5
 801436c:	bf38      	it	cc
 801436e:	2100      	movcc	r1, #0
 8014370:	440b      	add	r3, r1
 8014372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014376:	b191      	cbz	r1, 801439e <__mdiff+0x11a>
 8014378:	6117      	str	r7, [r2, #16]
 801437a:	e79d      	b.n	80142b8 <__mdiff+0x34>
 801437c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014380:	46e6      	mov	lr, ip
 8014382:	0c08      	lsrs	r0, r1, #16
 8014384:	fa1c fc81 	uxtah	ip, ip, r1
 8014388:	4471      	add	r1, lr
 801438a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801438e:	b289      	uxth	r1, r1
 8014390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014394:	f846 1b04 	str.w	r1, [r6], #4
 8014398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801439c:	e7dd      	b.n	801435a <__mdiff+0xd6>
 801439e:	3f01      	subs	r7, #1
 80143a0:	e7e7      	b.n	8014372 <__mdiff+0xee>
 80143a2:	bf00      	nop
 80143a4:	08015d7f 	.word	0x08015d7f
 80143a8:	08015df0 	.word	0x08015df0

080143ac <__ulp>:
 80143ac:	b082      	sub	sp, #8
 80143ae:	ed8d 0b00 	vstr	d0, [sp]
 80143b2:	9a01      	ldr	r2, [sp, #4]
 80143b4:	4b0f      	ldr	r3, [pc, #60]	@ (80143f4 <__ulp+0x48>)
 80143b6:	4013      	ands	r3, r2
 80143b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80143bc:	2b00      	cmp	r3, #0
 80143be:	dc08      	bgt.n	80143d2 <__ulp+0x26>
 80143c0:	425b      	negs	r3, r3
 80143c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80143c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80143ca:	da04      	bge.n	80143d6 <__ulp+0x2a>
 80143cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80143d0:	4113      	asrs	r3, r2
 80143d2:	2200      	movs	r2, #0
 80143d4:	e008      	b.n	80143e8 <__ulp+0x3c>
 80143d6:	f1a2 0314 	sub.w	r3, r2, #20
 80143da:	2b1e      	cmp	r3, #30
 80143dc:	bfda      	itte	le
 80143de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80143e2:	40da      	lsrle	r2, r3
 80143e4:	2201      	movgt	r2, #1
 80143e6:	2300      	movs	r3, #0
 80143e8:	4619      	mov	r1, r3
 80143ea:	4610      	mov	r0, r2
 80143ec:	ec41 0b10 	vmov	d0, r0, r1
 80143f0:	b002      	add	sp, #8
 80143f2:	4770      	bx	lr
 80143f4:	7ff00000 	.word	0x7ff00000

080143f8 <__b2d>:
 80143f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fc:	6906      	ldr	r6, [r0, #16]
 80143fe:	f100 0814 	add.w	r8, r0, #20
 8014402:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014406:	1f37      	subs	r7, r6, #4
 8014408:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801440c:	4610      	mov	r0, r2
 801440e:	f7ff fd4b 	bl	8013ea8 <__hi0bits>
 8014412:	f1c0 0320 	rsb	r3, r0, #32
 8014416:	280a      	cmp	r0, #10
 8014418:	600b      	str	r3, [r1, #0]
 801441a:	491b      	ldr	r1, [pc, #108]	@ (8014488 <__b2d+0x90>)
 801441c:	dc15      	bgt.n	801444a <__b2d+0x52>
 801441e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014422:	fa22 f30c 	lsr.w	r3, r2, ip
 8014426:	45b8      	cmp	r8, r7
 8014428:	ea43 0501 	orr.w	r5, r3, r1
 801442c:	bf34      	ite	cc
 801442e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014432:	2300      	movcs	r3, #0
 8014434:	3015      	adds	r0, #21
 8014436:	fa02 f000 	lsl.w	r0, r2, r0
 801443a:	fa23 f30c 	lsr.w	r3, r3, ip
 801443e:	4303      	orrs	r3, r0
 8014440:	461c      	mov	r4, r3
 8014442:	ec45 4b10 	vmov	d0, r4, r5
 8014446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801444a:	45b8      	cmp	r8, r7
 801444c:	bf3a      	itte	cc
 801444e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014452:	f1a6 0708 	subcc.w	r7, r6, #8
 8014456:	2300      	movcs	r3, #0
 8014458:	380b      	subs	r0, #11
 801445a:	d012      	beq.n	8014482 <__b2d+0x8a>
 801445c:	f1c0 0120 	rsb	r1, r0, #32
 8014460:	fa23 f401 	lsr.w	r4, r3, r1
 8014464:	4082      	lsls	r2, r0
 8014466:	4322      	orrs	r2, r4
 8014468:	4547      	cmp	r7, r8
 801446a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801446e:	bf8c      	ite	hi
 8014470:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014474:	2200      	movls	r2, #0
 8014476:	4083      	lsls	r3, r0
 8014478:	40ca      	lsrs	r2, r1
 801447a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801447e:	4313      	orrs	r3, r2
 8014480:	e7de      	b.n	8014440 <__b2d+0x48>
 8014482:	ea42 0501 	orr.w	r5, r2, r1
 8014486:	e7db      	b.n	8014440 <__b2d+0x48>
 8014488:	3ff00000 	.word	0x3ff00000

0801448c <__d2b>:
 801448c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014490:	460f      	mov	r7, r1
 8014492:	2101      	movs	r1, #1
 8014494:	ec59 8b10 	vmov	r8, r9, d0
 8014498:	4616      	mov	r6, r2
 801449a:	f7ff fc13 	bl	8013cc4 <_Balloc>
 801449e:	4604      	mov	r4, r0
 80144a0:	b930      	cbnz	r0, 80144b0 <__d2b+0x24>
 80144a2:	4602      	mov	r2, r0
 80144a4:	4b23      	ldr	r3, [pc, #140]	@ (8014534 <__d2b+0xa8>)
 80144a6:	4824      	ldr	r0, [pc, #144]	@ (8014538 <__d2b+0xac>)
 80144a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80144ac:	f7fe fa08 	bl	80128c0 <__assert_func>
 80144b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80144b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80144b8:	b10d      	cbz	r5, 80144be <__d2b+0x32>
 80144ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80144be:	9301      	str	r3, [sp, #4]
 80144c0:	f1b8 0300 	subs.w	r3, r8, #0
 80144c4:	d023      	beq.n	801450e <__d2b+0x82>
 80144c6:	4668      	mov	r0, sp
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	f7ff fd0c 	bl	8013ee6 <__lo0bits>
 80144ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80144d2:	b1d0      	cbz	r0, 801450a <__d2b+0x7e>
 80144d4:	f1c0 0320 	rsb	r3, r0, #32
 80144d8:	fa02 f303 	lsl.w	r3, r2, r3
 80144dc:	430b      	orrs	r3, r1
 80144de:	40c2      	lsrs	r2, r0
 80144e0:	6163      	str	r3, [r4, #20]
 80144e2:	9201      	str	r2, [sp, #4]
 80144e4:	9b01      	ldr	r3, [sp, #4]
 80144e6:	61a3      	str	r3, [r4, #24]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	bf0c      	ite	eq
 80144ec:	2201      	moveq	r2, #1
 80144ee:	2202      	movne	r2, #2
 80144f0:	6122      	str	r2, [r4, #16]
 80144f2:	b1a5      	cbz	r5, 801451e <__d2b+0x92>
 80144f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80144f8:	4405      	add	r5, r0
 80144fa:	603d      	str	r5, [r7, #0]
 80144fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014500:	6030      	str	r0, [r6, #0]
 8014502:	4620      	mov	r0, r4
 8014504:	b003      	add	sp, #12
 8014506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801450a:	6161      	str	r1, [r4, #20]
 801450c:	e7ea      	b.n	80144e4 <__d2b+0x58>
 801450e:	a801      	add	r0, sp, #4
 8014510:	f7ff fce9 	bl	8013ee6 <__lo0bits>
 8014514:	9b01      	ldr	r3, [sp, #4]
 8014516:	6163      	str	r3, [r4, #20]
 8014518:	3020      	adds	r0, #32
 801451a:	2201      	movs	r2, #1
 801451c:	e7e8      	b.n	80144f0 <__d2b+0x64>
 801451e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014526:	6038      	str	r0, [r7, #0]
 8014528:	6918      	ldr	r0, [r3, #16]
 801452a:	f7ff fcbd 	bl	8013ea8 <__hi0bits>
 801452e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014532:	e7e5      	b.n	8014500 <__d2b+0x74>
 8014534:	08015d7f 	.word	0x08015d7f
 8014538:	08015df0 	.word	0x08015df0

0801453c <__ratio>:
 801453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014540:	b085      	sub	sp, #20
 8014542:	e9cd 1000 	strd	r1, r0, [sp]
 8014546:	a902      	add	r1, sp, #8
 8014548:	f7ff ff56 	bl	80143f8 <__b2d>
 801454c:	9800      	ldr	r0, [sp, #0]
 801454e:	a903      	add	r1, sp, #12
 8014550:	ec55 4b10 	vmov	r4, r5, d0
 8014554:	f7ff ff50 	bl	80143f8 <__b2d>
 8014558:	9b01      	ldr	r3, [sp, #4]
 801455a:	6919      	ldr	r1, [r3, #16]
 801455c:	9b00      	ldr	r3, [sp, #0]
 801455e:	691b      	ldr	r3, [r3, #16]
 8014560:	1ac9      	subs	r1, r1, r3
 8014562:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014566:	1a9b      	subs	r3, r3, r2
 8014568:	ec5b ab10 	vmov	sl, fp, d0
 801456c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014570:	2b00      	cmp	r3, #0
 8014572:	bfce      	itee	gt
 8014574:	462a      	movgt	r2, r5
 8014576:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801457a:	465a      	movle	r2, fp
 801457c:	462f      	mov	r7, r5
 801457e:	46d9      	mov	r9, fp
 8014580:	bfcc      	ite	gt
 8014582:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014586:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801458a:	464b      	mov	r3, r9
 801458c:	4652      	mov	r2, sl
 801458e:	4620      	mov	r0, r4
 8014590:	4639      	mov	r1, r7
 8014592:	f7ec f95b 	bl	800084c <__aeabi_ddiv>
 8014596:	ec41 0b10 	vmov	d0, r0, r1
 801459a:	b005      	add	sp, #20
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145a0 <__copybits>:
 80145a0:	3901      	subs	r1, #1
 80145a2:	b570      	push	{r4, r5, r6, lr}
 80145a4:	1149      	asrs	r1, r1, #5
 80145a6:	6914      	ldr	r4, [r2, #16]
 80145a8:	3101      	adds	r1, #1
 80145aa:	f102 0314 	add.w	r3, r2, #20
 80145ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80145b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80145b6:	1f05      	subs	r5, r0, #4
 80145b8:	42a3      	cmp	r3, r4
 80145ba:	d30c      	bcc.n	80145d6 <__copybits+0x36>
 80145bc:	1aa3      	subs	r3, r4, r2
 80145be:	3b11      	subs	r3, #17
 80145c0:	f023 0303 	bic.w	r3, r3, #3
 80145c4:	3211      	adds	r2, #17
 80145c6:	42a2      	cmp	r2, r4
 80145c8:	bf88      	it	hi
 80145ca:	2300      	movhi	r3, #0
 80145cc:	4418      	add	r0, r3
 80145ce:	2300      	movs	r3, #0
 80145d0:	4288      	cmp	r0, r1
 80145d2:	d305      	bcc.n	80145e0 <__copybits+0x40>
 80145d4:	bd70      	pop	{r4, r5, r6, pc}
 80145d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80145da:	f845 6f04 	str.w	r6, [r5, #4]!
 80145de:	e7eb      	b.n	80145b8 <__copybits+0x18>
 80145e0:	f840 3b04 	str.w	r3, [r0], #4
 80145e4:	e7f4      	b.n	80145d0 <__copybits+0x30>

080145e6 <__any_on>:
 80145e6:	f100 0214 	add.w	r2, r0, #20
 80145ea:	6900      	ldr	r0, [r0, #16]
 80145ec:	114b      	asrs	r3, r1, #5
 80145ee:	4298      	cmp	r0, r3
 80145f0:	b510      	push	{r4, lr}
 80145f2:	db11      	blt.n	8014618 <__any_on+0x32>
 80145f4:	dd0a      	ble.n	801460c <__any_on+0x26>
 80145f6:	f011 011f 	ands.w	r1, r1, #31
 80145fa:	d007      	beq.n	801460c <__any_on+0x26>
 80145fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014600:	fa24 f001 	lsr.w	r0, r4, r1
 8014604:	fa00 f101 	lsl.w	r1, r0, r1
 8014608:	428c      	cmp	r4, r1
 801460a:	d10b      	bne.n	8014624 <__any_on+0x3e>
 801460c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014610:	4293      	cmp	r3, r2
 8014612:	d803      	bhi.n	801461c <__any_on+0x36>
 8014614:	2000      	movs	r0, #0
 8014616:	bd10      	pop	{r4, pc}
 8014618:	4603      	mov	r3, r0
 801461a:	e7f7      	b.n	801460c <__any_on+0x26>
 801461c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014620:	2900      	cmp	r1, #0
 8014622:	d0f5      	beq.n	8014610 <__any_on+0x2a>
 8014624:	2001      	movs	r0, #1
 8014626:	e7f6      	b.n	8014616 <__any_on+0x30>

08014628 <__ascii_wctomb>:
 8014628:	4603      	mov	r3, r0
 801462a:	4608      	mov	r0, r1
 801462c:	b141      	cbz	r1, 8014640 <__ascii_wctomb+0x18>
 801462e:	2aff      	cmp	r2, #255	@ 0xff
 8014630:	d904      	bls.n	801463c <__ascii_wctomb+0x14>
 8014632:	228a      	movs	r2, #138	@ 0x8a
 8014634:	601a      	str	r2, [r3, #0]
 8014636:	f04f 30ff 	mov.w	r0, #4294967295
 801463a:	4770      	bx	lr
 801463c:	700a      	strb	r2, [r1, #0]
 801463e:	2001      	movs	r0, #1
 8014640:	4770      	bx	lr

08014642 <__ssputs_r>:
 8014642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014646:	688e      	ldr	r6, [r1, #8]
 8014648:	461f      	mov	r7, r3
 801464a:	42be      	cmp	r6, r7
 801464c:	680b      	ldr	r3, [r1, #0]
 801464e:	4682      	mov	sl, r0
 8014650:	460c      	mov	r4, r1
 8014652:	4690      	mov	r8, r2
 8014654:	d82d      	bhi.n	80146b2 <__ssputs_r+0x70>
 8014656:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801465a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801465e:	d026      	beq.n	80146ae <__ssputs_r+0x6c>
 8014660:	6965      	ldr	r5, [r4, #20]
 8014662:	6909      	ldr	r1, [r1, #16]
 8014664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014668:	eba3 0901 	sub.w	r9, r3, r1
 801466c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014670:	1c7b      	adds	r3, r7, #1
 8014672:	444b      	add	r3, r9
 8014674:	106d      	asrs	r5, r5, #1
 8014676:	429d      	cmp	r5, r3
 8014678:	bf38      	it	cc
 801467a:	461d      	movcc	r5, r3
 801467c:	0553      	lsls	r3, r2, #21
 801467e:	d527      	bpl.n	80146d0 <__ssputs_r+0x8e>
 8014680:	4629      	mov	r1, r5
 8014682:	f7fc fa91 	bl	8010ba8 <_malloc_r>
 8014686:	4606      	mov	r6, r0
 8014688:	b360      	cbz	r0, 80146e4 <__ssputs_r+0xa2>
 801468a:	6921      	ldr	r1, [r4, #16]
 801468c:	464a      	mov	r2, r9
 801468e:	f7fe f8fe 	bl	801288e <memcpy>
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801469c:	81a3      	strh	r3, [r4, #12]
 801469e:	6126      	str	r6, [r4, #16]
 80146a0:	6165      	str	r5, [r4, #20]
 80146a2:	444e      	add	r6, r9
 80146a4:	eba5 0509 	sub.w	r5, r5, r9
 80146a8:	6026      	str	r6, [r4, #0]
 80146aa:	60a5      	str	r5, [r4, #8]
 80146ac:	463e      	mov	r6, r7
 80146ae:	42be      	cmp	r6, r7
 80146b0:	d900      	bls.n	80146b4 <__ssputs_r+0x72>
 80146b2:	463e      	mov	r6, r7
 80146b4:	6820      	ldr	r0, [r4, #0]
 80146b6:	4632      	mov	r2, r6
 80146b8:	4641      	mov	r1, r8
 80146ba:	f000 f9d7 	bl	8014a6c <memmove>
 80146be:	68a3      	ldr	r3, [r4, #8]
 80146c0:	1b9b      	subs	r3, r3, r6
 80146c2:	60a3      	str	r3, [r4, #8]
 80146c4:	6823      	ldr	r3, [r4, #0]
 80146c6:	4433      	add	r3, r6
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	2000      	movs	r0, #0
 80146cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d0:	462a      	mov	r2, r5
 80146d2:	f000 fa00 	bl	8014ad6 <_realloc_r>
 80146d6:	4606      	mov	r6, r0
 80146d8:	2800      	cmp	r0, #0
 80146da:	d1e0      	bne.n	801469e <__ssputs_r+0x5c>
 80146dc:	6921      	ldr	r1, [r4, #16]
 80146de:	4650      	mov	r0, sl
 80146e0:	f7fe ff5a 	bl	8013598 <_free_r>
 80146e4:	230c      	movs	r3, #12
 80146e6:	f8ca 3000 	str.w	r3, [sl]
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146f0:	81a3      	strh	r3, [r4, #12]
 80146f2:	f04f 30ff 	mov.w	r0, #4294967295
 80146f6:	e7e9      	b.n	80146cc <__ssputs_r+0x8a>

080146f8 <_svfiprintf_r>:
 80146f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fc:	4698      	mov	r8, r3
 80146fe:	898b      	ldrh	r3, [r1, #12]
 8014700:	061b      	lsls	r3, r3, #24
 8014702:	b09d      	sub	sp, #116	@ 0x74
 8014704:	4607      	mov	r7, r0
 8014706:	460d      	mov	r5, r1
 8014708:	4614      	mov	r4, r2
 801470a:	d510      	bpl.n	801472e <_svfiprintf_r+0x36>
 801470c:	690b      	ldr	r3, [r1, #16]
 801470e:	b973      	cbnz	r3, 801472e <_svfiprintf_r+0x36>
 8014710:	2140      	movs	r1, #64	@ 0x40
 8014712:	f7fc fa49 	bl	8010ba8 <_malloc_r>
 8014716:	6028      	str	r0, [r5, #0]
 8014718:	6128      	str	r0, [r5, #16]
 801471a:	b930      	cbnz	r0, 801472a <_svfiprintf_r+0x32>
 801471c:	230c      	movs	r3, #12
 801471e:	603b      	str	r3, [r7, #0]
 8014720:	f04f 30ff 	mov.w	r0, #4294967295
 8014724:	b01d      	add	sp, #116	@ 0x74
 8014726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801472a:	2340      	movs	r3, #64	@ 0x40
 801472c:	616b      	str	r3, [r5, #20]
 801472e:	2300      	movs	r3, #0
 8014730:	9309      	str	r3, [sp, #36]	@ 0x24
 8014732:	2320      	movs	r3, #32
 8014734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014738:	f8cd 800c 	str.w	r8, [sp, #12]
 801473c:	2330      	movs	r3, #48	@ 0x30
 801473e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80148dc <_svfiprintf_r+0x1e4>
 8014742:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014746:	f04f 0901 	mov.w	r9, #1
 801474a:	4623      	mov	r3, r4
 801474c:	469a      	mov	sl, r3
 801474e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014752:	b10a      	cbz	r2, 8014758 <_svfiprintf_r+0x60>
 8014754:	2a25      	cmp	r2, #37	@ 0x25
 8014756:	d1f9      	bne.n	801474c <_svfiprintf_r+0x54>
 8014758:	ebba 0b04 	subs.w	fp, sl, r4
 801475c:	d00b      	beq.n	8014776 <_svfiprintf_r+0x7e>
 801475e:	465b      	mov	r3, fp
 8014760:	4622      	mov	r2, r4
 8014762:	4629      	mov	r1, r5
 8014764:	4638      	mov	r0, r7
 8014766:	f7ff ff6c 	bl	8014642 <__ssputs_r>
 801476a:	3001      	adds	r0, #1
 801476c:	f000 80a7 	beq.w	80148be <_svfiprintf_r+0x1c6>
 8014770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014772:	445a      	add	r2, fp
 8014774:	9209      	str	r2, [sp, #36]	@ 0x24
 8014776:	f89a 3000 	ldrb.w	r3, [sl]
 801477a:	2b00      	cmp	r3, #0
 801477c:	f000 809f 	beq.w	80148be <_svfiprintf_r+0x1c6>
 8014780:	2300      	movs	r3, #0
 8014782:	f04f 32ff 	mov.w	r2, #4294967295
 8014786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801478a:	f10a 0a01 	add.w	sl, sl, #1
 801478e:	9304      	str	r3, [sp, #16]
 8014790:	9307      	str	r3, [sp, #28]
 8014792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014796:	931a      	str	r3, [sp, #104]	@ 0x68
 8014798:	4654      	mov	r4, sl
 801479a:	2205      	movs	r2, #5
 801479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147a0:	484e      	ldr	r0, [pc, #312]	@ (80148dc <_svfiprintf_r+0x1e4>)
 80147a2:	f7eb fd15 	bl	80001d0 <memchr>
 80147a6:	9a04      	ldr	r2, [sp, #16]
 80147a8:	b9d8      	cbnz	r0, 80147e2 <_svfiprintf_r+0xea>
 80147aa:	06d0      	lsls	r0, r2, #27
 80147ac:	bf44      	itt	mi
 80147ae:	2320      	movmi	r3, #32
 80147b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80147b4:	0711      	lsls	r1, r2, #28
 80147b6:	bf44      	itt	mi
 80147b8:	232b      	movmi	r3, #43	@ 0x2b
 80147ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80147be:	f89a 3000 	ldrb.w	r3, [sl]
 80147c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80147c4:	d015      	beq.n	80147f2 <_svfiprintf_r+0xfa>
 80147c6:	9a07      	ldr	r2, [sp, #28]
 80147c8:	4654      	mov	r4, sl
 80147ca:	2000      	movs	r0, #0
 80147cc:	f04f 0c0a 	mov.w	ip, #10
 80147d0:	4621      	mov	r1, r4
 80147d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147d6:	3b30      	subs	r3, #48	@ 0x30
 80147d8:	2b09      	cmp	r3, #9
 80147da:	d94b      	bls.n	8014874 <_svfiprintf_r+0x17c>
 80147dc:	b1b0      	cbz	r0, 801480c <_svfiprintf_r+0x114>
 80147de:	9207      	str	r2, [sp, #28]
 80147e0:	e014      	b.n	801480c <_svfiprintf_r+0x114>
 80147e2:	eba0 0308 	sub.w	r3, r0, r8
 80147e6:	fa09 f303 	lsl.w	r3, r9, r3
 80147ea:	4313      	orrs	r3, r2
 80147ec:	9304      	str	r3, [sp, #16]
 80147ee:	46a2      	mov	sl, r4
 80147f0:	e7d2      	b.n	8014798 <_svfiprintf_r+0xa0>
 80147f2:	9b03      	ldr	r3, [sp, #12]
 80147f4:	1d19      	adds	r1, r3, #4
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	9103      	str	r1, [sp, #12]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	bfbb      	ittet	lt
 80147fe:	425b      	neglt	r3, r3
 8014800:	f042 0202 	orrlt.w	r2, r2, #2
 8014804:	9307      	strge	r3, [sp, #28]
 8014806:	9307      	strlt	r3, [sp, #28]
 8014808:	bfb8      	it	lt
 801480a:	9204      	strlt	r2, [sp, #16]
 801480c:	7823      	ldrb	r3, [r4, #0]
 801480e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014810:	d10a      	bne.n	8014828 <_svfiprintf_r+0x130>
 8014812:	7863      	ldrb	r3, [r4, #1]
 8014814:	2b2a      	cmp	r3, #42	@ 0x2a
 8014816:	d132      	bne.n	801487e <_svfiprintf_r+0x186>
 8014818:	9b03      	ldr	r3, [sp, #12]
 801481a:	1d1a      	adds	r2, r3, #4
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	9203      	str	r2, [sp, #12]
 8014820:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014824:	3402      	adds	r4, #2
 8014826:	9305      	str	r3, [sp, #20]
 8014828:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80148ec <_svfiprintf_r+0x1f4>
 801482c:	7821      	ldrb	r1, [r4, #0]
 801482e:	2203      	movs	r2, #3
 8014830:	4650      	mov	r0, sl
 8014832:	f7eb fccd 	bl	80001d0 <memchr>
 8014836:	b138      	cbz	r0, 8014848 <_svfiprintf_r+0x150>
 8014838:	9b04      	ldr	r3, [sp, #16]
 801483a:	eba0 000a 	sub.w	r0, r0, sl
 801483e:	2240      	movs	r2, #64	@ 0x40
 8014840:	4082      	lsls	r2, r0
 8014842:	4313      	orrs	r3, r2
 8014844:	3401      	adds	r4, #1
 8014846:	9304      	str	r3, [sp, #16]
 8014848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801484c:	4824      	ldr	r0, [pc, #144]	@ (80148e0 <_svfiprintf_r+0x1e8>)
 801484e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014852:	2206      	movs	r2, #6
 8014854:	f7eb fcbc 	bl	80001d0 <memchr>
 8014858:	2800      	cmp	r0, #0
 801485a:	d036      	beq.n	80148ca <_svfiprintf_r+0x1d2>
 801485c:	4b21      	ldr	r3, [pc, #132]	@ (80148e4 <_svfiprintf_r+0x1ec>)
 801485e:	bb1b      	cbnz	r3, 80148a8 <_svfiprintf_r+0x1b0>
 8014860:	9b03      	ldr	r3, [sp, #12]
 8014862:	3307      	adds	r3, #7
 8014864:	f023 0307 	bic.w	r3, r3, #7
 8014868:	3308      	adds	r3, #8
 801486a:	9303      	str	r3, [sp, #12]
 801486c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801486e:	4433      	add	r3, r6
 8014870:	9309      	str	r3, [sp, #36]	@ 0x24
 8014872:	e76a      	b.n	801474a <_svfiprintf_r+0x52>
 8014874:	fb0c 3202 	mla	r2, ip, r2, r3
 8014878:	460c      	mov	r4, r1
 801487a:	2001      	movs	r0, #1
 801487c:	e7a8      	b.n	80147d0 <_svfiprintf_r+0xd8>
 801487e:	2300      	movs	r3, #0
 8014880:	3401      	adds	r4, #1
 8014882:	9305      	str	r3, [sp, #20]
 8014884:	4619      	mov	r1, r3
 8014886:	f04f 0c0a 	mov.w	ip, #10
 801488a:	4620      	mov	r0, r4
 801488c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014890:	3a30      	subs	r2, #48	@ 0x30
 8014892:	2a09      	cmp	r2, #9
 8014894:	d903      	bls.n	801489e <_svfiprintf_r+0x1a6>
 8014896:	2b00      	cmp	r3, #0
 8014898:	d0c6      	beq.n	8014828 <_svfiprintf_r+0x130>
 801489a:	9105      	str	r1, [sp, #20]
 801489c:	e7c4      	b.n	8014828 <_svfiprintf_r+0x130>
 801489e:	fb0c 2101 	mla	r1, ip, r1, r2
 80148a2:	4604      	mov	r4, r0
 80148a4:	2301      	movs	r3, #1
 80148a6:	e7f0      	b.n	801488a <_svfiprintf_r+0x192>
 80148a8:	ab03      	add	r3, sp, #12
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	462a      	mov	r2, r5
 80148ae:	4b0e      	ldr	r3, [pc, #56]	@ (80148e8 <_svfiprintf_r+0x1f0>)
 80148b0:	a904      	add	r1, sp, #16
 80148b2:	4638      	mov	r0, r7
 80148b4:	f7fd f938 	bl	8011b28 <_printf_float>
 80148b8:	1c42      	adds	r2, r0, #1
 80148ba:	4606      	mov	r6, r0
 80148bc:	d1d6      	bne.n	801486c <_svfiprintf_r+0x174>
 80148be:	89ab      	ldrh	r3, [r5, #12]
 80148c0:	065b      	lsls	r3, r3, #25
 80148c2:	f53f af2d 	bmi.w	8014720 <_svfiprintf_r+0x28>
 80148c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80148c8:	e72c      	b.n	8014724 <_svfiprintf_r+0x2c>
 80148ca:	ab03      	add	r3, sp, #12
 80148cc:	9300      	str	r3, [sp, #0]
 80148ce:	462a      	mov	r2, r5
 80148d0:	4b05      	ldr	r3, [pc, #20]	@ (80148e8 <_svfiprintf_r+0x1f0>)
 80148d2:	a904      	add	r1, sp, #16
 80148d4:	4638      	mov	r0, r7
 80148d6:	f7fd fbbf 	bl	8012058 <_printf_i>
 80148da:	e7ed      	b.n	80148b8 <_svfiprintf_r+0x1c0>
 80148dc:	08015f48 	.word	0x08015f48
 80148e0:	08015f52 	.word	0x08015f52
 80148e4:	08011b29 	.word	0x08011b29
 80148e8:	08014643 	.word	0x08014643
 80148ec:	08015f4e 	.word	0x08015f4e

080148f0 <__sflush_r>:
 80148f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80148f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f8:	0716      	lsls	r6, r2, #28
 80148fa:	4605      	mov	r5, r0
 80148fc:	460c      	mov	r4, r1
 80148fe:	d454      	bmi.n	80149aa <__sflush_r+0xba>
 8014900:	684b      	ldr	r3, [r1, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	dc02      	bgt.n	801490c <__sflush_r+0x1c>
 8014906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014908:	2b00      	cmp	r3, #0
 801490a:	dd48      	ble.n	801499e <__sflush_r+0xae>
 801490c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801490e:	2e00      	cmp	r6, #0
 8014910:	d045      	beq.n	801499e <__sflush_r+0xae>
 8014912:	2300      	movs	r3, #0
 8014914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014918:	682f      	ldr	r7, [r5, #0]
 801491a:	6a21      	ldr	r1, [r4, #32]
 801491c:	602b      	str	r3, [r5, #0]
 801491e:	d030      	beq.n	8014982 <__sflush_r+0x92>
 8014920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014922:	89a3      	ldrh	r3, [r4, #12]
 8014924:	0759      	lsls	r1, r3, #29
 8014926:	d505      	bpl.n	8014934 <__sflush_r+0x44>
 8014928:	6863      	ldr	r3, [r4, #4]
 801492a:	1ad2      	subs	r2, r2, r3
 801492c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801492e:	b10b      	cbz	r3, 8014934 <__sflush_r+0x44>
 8014930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014932:	1ad2      	subs	r2, r2, r3
 8014934:	2300      	movs	r3, #0
 8014936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014938:	6a21      	ldr	r1, [r4, #32]
 801493a:	4628      	mov	r0, r5
 801493c:	47b0      	blx	r6
 801493e:	1c43      	adds	r3, r0, #1
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	d106      	bne.n	8014952 <__sflush_r+0x62>
 8014944:	6829      	ldr	r1, [r5, #0]
 8014946:	291d      	cmp	r1, #29
 8014948:	d82b      	bhi.n	80149a2 <__sflush_r+0xb2>
 801494a:	4a2a      	ldr	r2, [pc, #168]	@ (80149f4 <__sflush_r+0x104>)
 801494c:	410a      	asrs	r2, r1
 801494e:	07d6      	lsls	r6, r2, #31
 8014950:	d427      	bmi.n	80149a2 <__sflush_r+0xb2>
 8014952:	2200      	movs	r2, #0
 8014954:	6062      	str	r2, [r4, #4]
 8014956:	04d9      	lsls	r1, r3, #19
 8014958:	6922      	ldr	r2, [r4, #16]
 801495a:	6022      	str	r2, [r4, #0]
 801495c:	d504      	bpl.n	8014968 <__sflush_r+0x78>
 801495e:	1c42      	adds	r2, r0, #1
 8014960:	d101      	bne.n	8014966 <__sflush_r+0x76>
 8014962:	682b      	ldr	r3, [r5, #0]
 8014964:	b903      	cbnz	r3, 8014968 <__sflush_r+0x78>
 8014966:	6560      	str	r0, [r4, #84]	@ 0x54
 8014968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801496a:	602f      	str	r7, [r5, #0]
 801496c:	b1b9      	cbz	r1, 801499e <__sflush_r+0xae>
 801496e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014972:	4299      	cmp	r1, r3
 8014974:	d002      	beq.n	801497c <__sflush_r+0x8c>
 8014976:	4628      	mov	r0, r5
 8014978:	f7fe fe0e 	bl	8013598 <_free_r>
 801497c:	2300      	movs	r3, #0
 801497e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014980:	e00d      	b.n	801499e <__sflush_r+0xae>
 8014982:	2301      	movs	r3, #1
 8014984:	4628      	mov	r0, r5
 8014986:	47b0      	blx	r6
 8014988:	4602      	mov	r2, r0
 801498a:	1c50      	adds	r0, r2, #1
 801498c:	d1c9      	bne.n	8014922 <__sflush_r+0x32>
 801498e:	682b      	ldr	r3, [r5, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d0c6      	beq.n	8014922 <__sflush_r+0x32>
 8014994:	2b1d      	cmp	r3, #29
 8014996:	d001      	beq.n	801499c <__sflush_r+0xac>
 8014998:	2b16      	cmp	r3, #22
 801499a:	d11e      	bne.n	80149da <__sflush_r+0xea>
 801499c:	602f      	str	r7, [r5, #0]
 801499e:	2000      	movs	r0, #0
 80149a0:	e022      	b.n	80149e8 <__sflush_r+0xf8>
 80149a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149a6:	b21b      	sxth	r3, r3
 80149a8:	e01b      	b.n	80149e2 <__sflush_r+0xf2>
 80149aa:	690f      	ldr	r7, [r1, #16]
 80149ac:	2f00      	cmp	r7, #0
 80149ae:	d0f6      	beq.n	801499e <__sflush_r+0xae>
 80149b0:	0793      	lsls	r3, r2, #30
 80149b2:	680e      	ldr	r6, [r1, #0]
 80149b4:	bf08      	it	eq
 80149b6:	694b      	ldreq	r3, [r1, #20]
 80149b8:	600f      	str	r7, [r1, #0]
 80149ba:	bf18      	it	ne
 80149bc:	2300      	movne	r3, #0
 80149be:	eba6 0807 	sub.w	r8, r6, r7
 80149c2:	608b      	str	r3, [r1, #8]
 80149c4:	f1b8 0f00 	cmp.w	r8, #0
 80149c8:	dde9      	ble.n	801499e <__sflush_r+0xae>
 80149ca:	6a21      	ldr	r1, [r4, #32]
 80149cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80149ce:	4643      	mov	r3, r8
 80149d0:	463a      	mov	r2, r7
 80149d2:	4628      	mov	r0, r5
 80149d4:	47b0      	blx	r6
 80149d6:	2800      	cmp	r0, #0
 80149d8:	dc08      	bgt.n	80149ec <__sflush_r+0xfc>
 80149da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149e2:	81a3      	strh	r3, [r4, #12]
 80149e4:	f04f 30ff 	mov.w	r0, #4294967295
 80149e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ec:	4407      	add	r7, r0
 80149ee:	eba8 0800 	sub.w	r8, r8, r0
 80149f2:	e7e7      	b.n	80149c4 <__sflush_r+0xd4>
 80149f4:	dfbffffe 	.word	0xdfbffffe

080149f8 <_fflush_r>:
 80149f8:	b538      	push	{r3, r4, r5, lr}
 80149fa:	690b      	ldr	r3, [r1, #16]
 80149fc:	4605      	mov	r5, r0
 80149fe:	460c      	mov	r4, r1
 8014a00:	b913      	cbnz	r3, 8014a08 <_fflush_r+0x10>
 8014a02:	2500      	movs	r5, #0
 8014a04:	4628      	mov	r0, r5
 8014a06:	bd38      	pop	{r3, r4, r5, pc}
 8014a08:	b118      	cbz	r0, 8014a12 <_fflush_r+0x1a>
 8014a0a:	6a03      	ldr	r3, [r0, #32]
 8014a0c:	b90b      	cbnz	r3, 8014a12 <_fflush_r+0x1a>
 8014a0e:	f7fd fccf 	bl	80123b0 <__sinit>
 8014a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d0f3      	beq.n	8014a02 <_fflush_r+0xa>
 8014a1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a1c:	07d0      	lsls	r0, r2, #31
 8014a1e:	d404      	bmi.n	8014a2a <_fflush_r+0x32>
 8014a20:	0599      	lsls	r1, r3, #22
 8014a22:	d402      	bmi.n	8014a2a <_fflush_r+0x32>
 8014a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a26:	f7fd ff28 	bl	801287a <__retarget_lock_acquire_recursive>
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	4621      	mov	r1, r4
 8014a2e:	f7ff ff5f 	bl	80148f0 <__sflush_r>
 8014a32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a34:	07da      	lsls	r2, r3, #31
 8014a36:	4605      	mov	r5, r0
 8014a38:	d4e4      	bmi.n	8014a04 <_fflush_r+0xc>
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	059b      	lsls	r3, r3, #22
 8014a3e:	d4e1      	bmi.n	8014a04 <_fflush_r+0xc>
 8014a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a42:	f7fd ff1b 	bl	801287c <__retarget_lock_release_recursive>
 8014a46:	e7dd      	b.n	8014a04 <_fflush_r+0xc>

08014a48 <fiprintf>:
 8014a48:	b40e      	push	{r1, r2, r3}
 8014a4a:	b503      	push	{r0, r1, lr}
 8014a4c:	4601      	mov	r1, r0
 8014a4e:	ab03      	add	r3, sp, #12
 8014a50:	4805      	ldr	r0, [pc, #20]	@ (8014a68 <fiprintf+0x20>)
 8014a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a56:	6800      	ldr	r0, [r0, #0]
 8014a58:	9301      	str	r3, [sp, #4]
 8014a5a:	f000 f893 	bl	8014b84 <_vfiprintf_r>
 8014a5e:	b002      	add	sp, #8
 8014a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a64:	b003      	add	sp, #12
 8014a66:	4770      	bx	lr
 8014a68:	200003d4 	.word	0x200003d4

08014a6c <memmove>:
 8014a6c:	4288      	cmp	r0, r1
 8014a6e:	b510      	push	{r4, lr}
 8014a70:	eb01 0402 	add.w	r4, r1, r2
 8014a74:	d902      	bls.n	8014a7c <memmove+0x10>
 8014a76:	4284      	cmp	r4, r0
 8014a78:	4623      	mov	r3, r4
 8014a7a:	d807      	bhi.n	8014a8c <memmove+0x20>
 8014a7c:	1e43      	subs	r3, r0, #1
 8014a7e:	42a1      	cmp	r1, r4
 8014a80:	d008      	beq.n	8014a94 <memmove+0x28>
 8014a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a8a:	e7f8      	b.n	8014a7e <memmove+0x12>
 8014a8c:	4402      	add	r2, r0
 8014a8e:	4601      	mov	r1, r0
 8014a90:	428a      	cmp	r2, r1
 8014a92:	d100      	bne.n	8014a96 <memmove+0x2a>
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a9e:	e7f7      	b.n	8014a90 <memmove+0x24>

08014aa0 <abort>:
 8014aa0:	b508      	push	{r3, lr}
 8014aa2:	2006      	movs	r0, #6
 8014aa4:	f000 fa42 	bl	8014f2c <raise>
 8014aa8:	2001      	movs	r0, #1
 8014aaa:	f7ee ffe1 	bl	8003a70 <_exit>

08014aae <_calloc_r>:
 8014aae:	b570      	push	{r4, r5, r6, lr}
 8014ab0:	fba1 5402 	umull	r5, r4, r1, r2
 8014ab4:	b93c      	cbnz	r4, 8014ac6 <_calloc_r+0x18>
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	f7fc f876 	bl	8010ba8 <_malloc_r>
 8014abc:	4606      	mov	r6, r0
 8014abe:	b928      	cbnz	r0, 8014acc <_calloc_r+0x1e>
 8014ac0:	2600      	movs	r6, #0
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	bd70      	pop	{r4, r5, r6, pc}
 8014ac6:	220c      	movs	r2, #12
 8014ac8:	6002      	str	r2, [r0, #0]
 8014aca:	e7f9      	b.n	8014ac0 <_calloc_r+0x12>
 8014acc:	462a      	mov	r2, r5
 8014ace:	4621      	mov	r1, r4
 8014ad0:	f7fd fd74 	bl	80125bc <memset>
 8014ad4:	e7f5      	b.n	8014ac2 <_calloc_r+0x14>

08014ad6 <_realloc_r>:
 8014ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ada:	4680      	mov	r8, r0
 8014adc:	4615      	mov	r5, r2
 8014ade:	460c      	mov	r4, r1
 8014ae0:	b921      	cbnz	r1, 8014aec <_realloc_r+0x16>
 8014ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	f7fc b85e 	b.w	8010ba8 <_malloc_r>
 8014aec:	b92a      	cbnz	r2, 8014afa <_realloc_r+0x24>
 8014aee:	f7fe fd53 	bl	8013598 <_free_r>
 8014af2:	2400      	movs	r4, #0
 8014af4:	4620      	mov	r0, r4
 8014af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014afa:	f000 fa33 	bl	8014f64 <_malloc_usable_size_r>
 8014afe:	4285      	cmp	r5, r0
 8014b00:	4606      	mov	r6, r0
 8014b02:	d802      	bhi.n	8014b0a <_realloc_r+0x34>
 8014b04:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014b08:	d8f4      	bhi.n	8014af4 <_realloc_r+0x1e>
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	4640      	mov	r0, r8
 8014b0e:	f7fc f84b 	bl	8010ba8 <_malloc_r>
 8014b12:	4607      	mov	r7, r0
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d0ec      	beq.n	8014af2 <_realloc_r+0x1c>
 8014b18:	42b5      	cmp	r5, r6
 8014b1a:	462a      	mov	r2, r5
 8014b1c:	4621      	mov	r1, r4
 8014b1e:	bf28      	it	cs
 8014b20:	4632      	movcs	r2, r6
 8014b22:	f7fd feb4 	bl	801288e <memcpy>
 8014b26:	4621      	mov	r1, r4
 8014b28:	4640      	mov	r0, r8
 8014b2a:	f7fe fd35 	bl	8013598 <_free_r>
 8014b2e:	463c      	mov	r4, r7
 8014b30:	e7e0      	b.n	8014af4 <_realloc_r+0x1e>

08014b32 <__sfputc_r>:
 8014b32:	6893      	ldr	r3, [r2, #8]
 8014b34:	3b01      	subs	r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	b410      	push	{r4}
 8014b3a:	6093      	str	r3, [r2, #8]
 8014b3c:	da08      	bge.n	8014b50 <__sfputc_r+0x1e>
 8014b3e:	6994      	ldr	r4, [r2, #24]
 8014b40:	42a3      	cmp	r3, r4
 8014b42:	db01      	blt.n	8014b48 <__sfputc_r+0x16>
 8014b44:	290a      	cmp	r1, #10
 8014b46:	d103      	bne.n	8014b50 <__sfputc_r+0x1e>
 8014b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b4c:	f000 b932 	b.w	8014db4 <__swbuf_r>
 8014b50:	6813      	ldr	r3, [r2, #0]
 8014b52:	1c58      	adds	r0, r3, #1
 8014b54:	6010      	str	r0, [r2, #0]
 8014b56:	7019      	strb	r1, [r3, #0]
 8014b58:	4608      	mov	r0, r1
 8014b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b5e:	4770      	bx	lr

08014b60 <__sfputs_r>:
 8014b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b62:	4606      	mov	r6, r0
 8014b64:	460f      	mov	r7, r1
 8014b66:	4614      	mov	r4, r2
 8014b68:	18d5      	adds	r5, r2, r3
 8014b6a:	42ac      	cmp	r4, r5
 8014b6c:	d101      	bne.n	8014b72 <__sfputs_r+0x12>
 8014b6e:	2000      	movs	r0, #0
 8014b70:	e007      	b.n	8014b82 <__sfputs_r+0x22>
 8014b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b76:	463a      	mov	r2, r7
 8014b78:	4630      	mov	r0, r6
 8014b7a:	f7ff ffda 	bl	8014b32 <__sfputc_r>
 8014b7e:	1c43      	adds	r3, r0, #1
 8014b80:	d1f3      	bne.n	8014b6a <__sfputs_r+0xa>
 8014b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014b84 <_vfiprintf_r>:
 8014b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b88:	460d      	mov	r5, r1
 8014b8a:	b09d      	sub	sp, #116	@ 0x74
 8014b8c:	4614      	mov	r4, r2
 8014b8e:	4698      	mov	r8, r3
 8014b90:	4606      	mov	r6, r0
 8014b92:	b118      	cbz	r0, 8014b9c <_vfiprintf_r+0x18>
 8014b94:	6a03      	ldr	r3, [r0, #32]
 8014b96:	b90b      	cbnz	r3, 8014b9c <_vfiprintf_r+0x18>
 8014b98:	f7fd fc0a 	bl	80123b0 <__sinit>
 8014b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b9e:	07d9      	lsls	r1, r3, #31
 8014ba0:	d405      	bmi.n	8014bae <_vfiprintf_r+0x2a>
 8014ba2:	89ab      	ldrh	r3, [r5, #12]
 8014ba4:	059a      	lsls	r2, r3, #22
 8014ba6:	d402      	bmi.n	8014bae <_vfiprintf_r+0x2a>
 8014ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014baa:	f7fd fe66 	bl	801287a <__retarget_lock_acquire_recursive>
 8014bae:	89ab      	ldrh	r3, [r5, #12]
 8014bb0:	071b      	lsls	r3, r3, #28
 8014bb2:	d501      	bpl.n	8014bb8 <_vfiprintf_r+0x34>
 8014bb4:	692b      	ldr	r3, [r5, #16]
 8014bb6:	b99b      	cbnz	r3, 8014be0 <_vfiprintf_r+0x5c>
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4630      	mov	r0, r6
 8014bbc:	f000 f938 	bl	8014e30 <__swsetup_r>
 8014bc0:	b170      	cbz	r0, 8014be0 <_vfiprintf_r+0x5c>
 8014bc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bc4:	07dc      	lsls	r4, r3, #31
 8014bc6:	d504      	bpl.n	8014bd2 <_vfiprintf_r+0x4e>
 8014bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bcc:	b01d      	add	sp, #116	@ 0x74
 8014bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bd2:	89ab      	ldrh	r3, [r5, #12]
 8014bd4:	0598      	lsls	r0, r3, #22
 8014bd6:	d4f7      	bmi.n	8014bc8 <_vfiprintf_r+0x44>
 8014bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bda:	f7fd fe4f 	bl	801287c <__retarget_lock_release_recursive>
 8014bde:	e7f3      	b.n	8014bc8 <_vfiprintf_r+0x44>
 8014be0:	2300      	movs	r3, #0
 8014be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014be4:	2320      	movs	r3, #32
 8014be6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bee:	2330      	movs	r3, #48	@ 0x30
 8014bf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014da0 <_vfiprintf_r+0x21c>
 8014bf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014bf8:	f04f 0901 	mov.w	r9, #1
 8014bfc:	4623      	mov	r3, r4
 8014bfe:	469a      	mov	sl, r3
 8014c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c04:	b10a      	cbz	r2, 8014c0a <_vfiprintf_r+0x86>
 8014c06:	2a25      	cmp	r2, #37	@ 0x25
 8014c08:	d1f9      	bne.n	8014bfe <_vfiprintf_r+0x7a>
 8014c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8014c0e:	d00b      	beq.n	8014c28 <_vfiprintf_r+0xa4>
 8014c10:	465b      	mov	r3, fp
 8014c12:	4622      	mov	r2, r4
 8014c14:	4629      	mov	r1, r5
 8014c16:	4630      	mov	r0, r6
 8014c18:	f7ff ffa2 	bl	8014b60 <__sfputs_r>
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	f000 80a7 	beq.w	8014d70 <_vfiprintf_r+0x1ec>
 8014c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c24:	445a      	add	r2, fp
 8014c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c28:	f89a 3000 	ldrb.w	r3, [sl]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f000 809f 	beq.w	8014d70 <_vfiprintf_r+0x1ec>
 8014c32:	2300      	movs	r3, #0
 8014c34:	f04f 32ff 	mov.w	r2, #4294967295
 8014c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c3c:	f10a 0a01 	add.w	sl, sl, #1
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	9307      	str	r3, [sp, #28]
 8014c44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c48:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c4a:	4654      	mov	r4, sl
 8014c4c:	2205      	movs	r2, #5
 8014c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c52:	4853      	ldr	r0, [pc, #332]	@ (8014da0 <_vfiprintf_r+0x21c>)
 8014c54:	f7eb fabc 	bl	80001d0 <memchr>
 8014c58:	9a04      	ldr	r2, [sp, #16]
 8014c5a:	b9d8      	cbnz	r0, 8014c94 <_vfiprintf_r+0x110>
 8014c5c:	06d1      	lsls	r1, r2, #27
 8014c5e:	bf44      	itt	mi
 8014c60:	2320      	movmi	r3, #32
 8014c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c66:	0713      	lsls	r3, r2, #28
 8014c68:	bf44      	itt	mi
 8014c6a:	232b      	movmi	r3, #43	@ 0x2b
 8014c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c70:	f89a 3000 	ldrb.w	r3, [sl]
 8014c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c76:	d015      	beq.n	8014ca4 <_vfiprintf_r+0x120>
 8014c78:	9a07      	ldr	r2, [sp, #28]
 8014c7a:	4654      	mov	r4, sl
 8014c7c:	2000      	movs	r0, #0
 8014c7e:	f04f 0c0a 	mov.w	ip, #10
 8014c82:	4621      	mov	r1, r4
 8014c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c88:	3b30      	subs	r3, #48	@ 0x30
 8014c8a:	2b09      	cmp	r3, #9
 8014c8c:	d94b      	bls.n	8014d26 <_vfiprintf_r+0x1a2>
 8014c8e:	b1b0      	cbz	r0, 8014cbe <_vfiprintf_r+0x13a>
 8014c90:	9207      	str	r2, [sp, #28]
 8014c92:	e014      	b.n	8014cbe <_vfiprintf_r+0x13a>
 8014c94:	eba0 0308 	sub.w	r3, r0, r8
 8014c98:	fa09 f303 	lsl.w	r3, r9, r3
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	9304      	str	r3, [sp, #16]
 8014ca0:	46a2      	mov	sl, r4
 8014ca2:	e7d2      	b.n	8014c4a <_vfiprintf_r+0xc6>
 8014ca4:	9b03      	ldr	r3, [sp, #12]
 8014ca6:	1d19      	adds	r1, r3, #4
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	9103      	str	r1, [sp, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	bfbb      	ittet	lt
 8014cb0:	425b      	neglt	r3, r3
 8014cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8014cb6:	9307      	strge	r3, [sp, #28]
 8014cb8:	9307      	strlt	r3, [sp, #28]
 8014cba:	bfb8      	it	lt
 8014cbc:	9204      	strlt	r2, [sp, #16]
 8014cbe:	7823      	ldrb	r3, [r4, #0]
 8014cc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8014cc2:	d10a      	bne.n	8014cda <_vfiprintf_r+0x156>
 8014cc4:	7863      	ldrb	r3, [r4, #1]
 8014cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cc8:	d132      	bne.n	8014d30 <_vfiprintf_r+0x1ac>
 8014cca:	9b03      	ldr	r3, [sp, #12]
 8014ccc:	1d1a      	adds	r2, r3, #4
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	9203      	str	r2, [sp, #12]
 8014cd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014cd6:	3402      	adds	r4, #2
 8014cd8:	9305      	str	r3, [sp, #20]
 8014cda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014db0 <_vfiprintf_r+0x22c>
 8014cde:	7821      	ldrb	r1, [r4, #0]
 8014ce0:	2203      	movs	r2, #3
 8014ce2:	4650      	mov	r0, sl
 8014ce4:	f7eb fa74 	bl	80001d0 <memchr>
 8014ce8:	b138      	cbz	r0, 8014cfa <_vfiprintf_r+0x176>
 8014cea:	9b04      	ldr	r3, [sp, #16]
 8014cec:	eba0 000a 	sub.w	r0, r0, sl
 8014cf0:	2240      	movs	r2, #64	@ 0x40
 8014cf2:	4082      	lsls	r2, r0
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	3401      	adds	r4, #1
 8014cf8:	9304      	str	r3, [sp, #16]
 8014cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cfe:	4829      	ldr	r0, [pc, #164]	@ (8014da4 <_vfiprintf_r+0x220>)
 8014d00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d04:	2206      	movs	r2, #6
 8014d06:	f7eb fa63 	bl	80001d0 <memchr>
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d03f      	beq.n	8014d8e <_vfiprintf_r+0x20a>
 8014d0e:	4b26      	ldr	r3, [pc, #152]	@ (8014da8 <_vfiprintf_r+0x224>)
 8014d10:	bb1b      	cbnz	r3, 8014d5a <_vfiprintf_r+0x1d6>
 8014d12:	9b03      	ldr	r3, [sp, #12]
 8014d14:	3307      	adds	r3, #7
 8014d16:	f023 0307 	bic.w	r3, r3, #7
 8014d1a:	3308      	adds	r3, #8
 8014d1c:	9303      	str	r3, [sp, #12]
 8014d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d20:	443b      	add	r3, r7
 8014d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d24:	e76a      	b.n	8014bfc <_vfiprintf_r+0x78>
 8014d26:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	2001      	movs	r0, #1
 8014d2e:	e7a8      	b.n	8014c82 <_vfiprintf_r+0xfe>
 8014d30:	2300      	movs	r3, #0
 8014d32:	3401      	adds	r4, #1
 8014d34:	9305      	str	r3, [sp, #20]
 8014d36:	4619      	mov	r1, r3
 8014d38:	f04f 0c0a 	mov.w	ip, #10
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d42:	3a30      	subs	r2, #48	@ 0x30
 8014d44:	2a09      	cmp	r2, #9
 8014d46:	d903      	bls.n	8014d50 <_vfiprintf_r+0x1cc>
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d0c6      	beq.n	8014cda <_vfiprintf_r+0x156>
 8014d4c:	9105      	str	r1, [sp, #20]
 8014d4e:	e7c4      	b.n	8014cda <_vfiprintf_r+0x156>
 8014d50:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d54:	4604      	mov	r4, r0
 8014d56:	2301      	movs	r3, #1
 8014d58:	e7f0      	b.n	8014d3c <_vfiprintf_r+0x1b8>
 8014d5a:	ab03      	add	r3, sp, #12
 8014d5c:	9300      	str	r3, [sp, #0]
 8014d5e:	462a      	mov	r2, r5
 8014d60:	4b12      	ldr	r3, [pc, #72]	@ (8014dac <_vfiprintf_r+0x228>)
 8014d62:	a904      	add	r1, sp, #16
 8014d64:	4630      	mov	r0, r6
 8014d66:	f7fc fedf 	bl	8011b28 <_printf_float>
 8014d6a:	4607      	mov	r7, r0
 8014d6c:	1c78      	adds	r0, r7, #1
 8014d6e:	d1d6      	bne.n	8014d1e <_vfiprintf_r+0x19a>
 8014d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d72:	07d9      	lsls	r1, r3, #31
 8014d74:	d405      	bmi.n	8014d82 <_vfiprintf_r+0x1fe>
 8014d76:	89ab      	ldrh	r3, [r5, #12]
 8014d78:	059a      	lsls	r2, r3, #22
 8014d7a:	d402      	bmi.n	8014d82 <_vfiprintf_r+0x1fe>
 8014d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d7e:	f7fd fd7d 	bl	801287c <__retarget_lock_release_recursive>
 8014d82:	89ab      	ldrh	r3, [r5, #12]
 8014d84:	065b      	lsls	r3, r3, #25
 8014d86:	f53f af1f 	bmi.w	8014bc8 <_vfiprintf_r+0x44>
 8014d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d8c:	e71e      	b.n	8014bcc <_vfiprintf_r+0x48>
 8014d8e:	ab03      	add	r3, sp, #12
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	462a      	mov	r2, r5
 8014d94:	4b05      	ldr	r3, [pc, #20]	@ (8014dac <_vfiprintf_r+0x228>)
 8014d96:	a904      	add	r1, sp, #16
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f7fd f95d 	bl	8012058 <_printf_i>
 8014d9e:	e7e4      	b.n	8014d6a <_vfiprintf_r+0x1e6>
 8014da0:	08015f48 	.word	0x08015f48
 8014da4:	08015f52 	.word	0x08015f52
 8014da8:	08011b29 	.word	0x08011b29
 8014dac:	08014b61 	.word	0x08014b61
 8014db0:	08015f4e 	.word	0x08015f4e

08014db4 <__swbuf_r>:
 8014db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db6:	460e      	mov	r6, r1
 8014db8:	4614      	mov	r4, r2
 8014dba:	4605      	mov	r5, r0
 8014dbc:	b118      	cbz	r0, 8014dc6 <__swbuf_r+0x12>
 8014dbe:	6a03      	ldr	r3, [r0, #32]
 8014dc0:	b90b      	cbnz	r3, 8014dc6 <__swbuf_r+0x12>
 8014dc2:	f7fd faf5 	bl	80123b0 <__sinit>
 8014dc6:	69a3      	ldr	r3, [r4, #24]
 8014dc8:	60a3      	str	r3, [r4, #8]
 8014dca:	89a3      	ldrh	r3, [r4, #12]
 8014dcc:	071a      	lsls	r2, r3, #28
 8014dce:	d501      	bpl.n	8014dd4 <__swbuf_r+0x20>
 8014dd0:	6923      	ldr	r3, [r4, #16]
 8014dd2:	b943      	cbnz	r3, 8014de6 <__swbuf_r+0x32>
 8014dd4:	4621      	mov	r1, r4
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	f000 f82a 	bl	8014e30 <__swsetup_r>
 8014ddc:	b118      	cbz	r0, 8014de6 <__swbuf_r+0x32>
 8014dde:	f04f 37ff 	mov.w	r7, #4294967295
 8014de2:	4638      	mov	r0, r7
 8014de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de6:	6823      	ldr	r3, [r4, #0]
 8014de8:	6922      	ldr	r2, [r4, #16]
 8014dea:	1a98      	subs	r0, r3, r2
 8014dec:	6963      	ldr	r3, [r4, #20]
 8014dee:	b2f6      	uxtb	r6, r6
 8014df0:	4283      	cmp	r3, r0
 8014df2:	4637      	mov	r7, r6
 8014df4:	dc05      	bgt.n	8014e02 <__swbuf_r+0x4e>
 8014df6:	4621      	mov	r1, r4
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f7ff fdfd 	bl	80149f8 <_fflush_r>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d1ed      	bne.n	8014dde <__swbuf_r+0x2a>
 8014e02:	68a3      	ldr	r3, [r4, #8]
 8014e04:	3b01      	subs	r3, #1
 8014e06:	60a3      	str	r3, [r4, #8]
 8014e08:	6823      	ldr	r3, [r4, #0]
 8014e0a:	1c5a      	adds	r2, r3, #1
 8014e0c:	6022      	str	r2, [r4, #0]
 8014e0e:	701e      	strb	r6, [r3, #0]
 8014e10:	6962      	ldr	r2, [r4, #20]
 8014e12:	1c43      	adds	r3, r0, #1
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d004      	beq.n	8014e22 <__swbuf_r+0x6e>
 8014e18:	89a3      	ldrh	r3, [r4, #12]
 8014e1a:	07db      	lsls	r3, r3, #31
 8014e1c:	d5e1      	bpl.n	8014de2 <__swbuf_r+0x2e>
 8014e1e:	2e0a      	cmp	r6, #10
 8014e20:	d1df      	bne.n	8014de2 <__swbuf_r+0x2e>
 8014e22:	4621      	mov	r1, r4
 8014e24:	4628      	mov	r0, r5
 8014e26:	f7ff fde7 	bl	80149f8 <_fflush_r>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d0d9      	beq.n	8014de2 <__swbuf_r+0x2e>
 8014e2e:	e7d6      	b.n	8014dde <__swbuf_r+0x2a>

08014e30 <__swsetup_r>:
 8014e30:	b538      	push	{r3, r4, r5, lr}
 8014e32:	4b29      	ldr	r3, [pc, #164]	@ (8014ed8 <__swsetup_r+0xa8>)
 8014e34:	4605      	mov	r5, r0
 8014e36:	6818      	ldr	r0, [r3, #0]
 8014e38:	460c      	mov	r4, r1
 8014e3a:	b118      	cbz	r0, 8014e44 <__swsetup_r+0x14>
 8014e3c:	6a03      	ldr	r3, [r0, #32]
 8014e3e:	b90b      	cbnz	r3, 8014e44 <__swsetup_r+0x14>
 8014e40:	f7fd fab6 	bl	80123b0 <__sinit>
 8014e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e48:	0719      	lsls	r1, r3, #28
 8014e4a:	d422      	bmi.n	8014e92 <__swsetup_r+0x62>
 8014e4c:	06da      	lsls	r2, r3, #27
 8014e4e:	d407      	bmi.n	8014e60 <__swsetup_r+0x30>
 8014e50:	2209      	movs	r2, #9
 8014e52:	602a      	str	r2, [r5, #0]
 8014e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e58:	81a3      	strh	r3, [r4, #12]
 8014e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e5e:	e033      	b.n	8014ec8 <__swsetup_r+0x98>
 8014e60:	0758      	lsls	r0, r3, #29
 8014e62:	d512      	bpl.n	8014e8a <__swsetup_r+0x5a>
 8014e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e66:	b141      	cbz	r1, 8014e7a <__swsetup_r+0x4a>
 8014e68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e6c:	4299      	cmp	r1, r3
 8014e6e:	d002      	beq.n	8014e76 <__swsetup_r+0x46>
 8014e70:	4628      	mov	r0, r5
 8014e72:	f7fe fb91 	bl	8013598 <_free_r>
 8014e76:	2300      	movs	r3, #0
 8014e78:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e7a:	89a3      	ldrh	r3, [r4, #12]
 8014e7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e80:	81a3      	strh	r3, [r4, #12]
 8014e82:	2300      	movs	r3, #0
 8014e84:	6063      	str	r3, [r4, #4]
 8014e86:	6923      	ldr	r3, [r4, #16]
 8014e88:	6023      	str	r3, [r4, #0]
 8014e8a:	89a3      	ldrh	r3, [r4, #12]
 8014e8c:	f043 0308 	orr.w	r3, r3, #8
 8014e90:	81a3      	strh	r3, [r4, #12]
 8014e92:	6923      	ldr	r3, [r4, #16]
 8014e94:	b94b      	cbnz	r3, 8014eaa <__swsetup_r+0x7a>
 8014e96:	89a3      	ldrh	r3, [r4, #12]
 8014e98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ea0:	d003      	beq.n	8014eaa <__swsetup_r+0x7a>
 8014ea2:	4621      	mov	r1, r4
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	f000 f88b 	bl	8014fc0 <__smakebuf_r>
 8014eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eae:	f013 0201 	ands.w	r2, r3, #1
 8014eb2:	d00a      	beq.n	8014eca <__swsetup_r+0x9a>
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	60a2      	str	r2, [r4, #8]
 8014eb8:	6962      	ldr	r2, [r4, #20]
 8014eba:	4252      	negs	r2, r2
 8014ebc:	61a2      	str	r2, [r4, #24]
 8014ebe:	6922      	ldr	r2, [r4, #16]
 8014ec0:	b942      	cbnz	r2, 8014ed4 <__swsetup_r+0xa4>
 8014ec2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014ec6:	d1c5      	bne.n	8014e54 <__swsetup_r+0x24>
 8014ec8:	bd38      	pop	{r3, r4, r5, pc}
 8014eca:	0799      	lsls	r1, r3, #30
 8014ecc:	bf58      	it	pl
 8014ece:	6962      	ldrpl	r2, [r4, #20]
 8014ed0:	60a2      	str	r2, [r4, #8]
 8014ed2:	e7f4      	b.n	8014ebe <__swsetup_r+0x8e>
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	e7f7      	b.n	8014ec8 <__swsetup_r+0x98>
 8014ed8:	200003d4 	.word	0x200003d4

08014edc <_raise_r>:
 8014edc:	291f      	cmp	r1, #31
 8014ede:	b538      	push	{r3, r4, r5, lr}
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	460c      	mov	r4, r1
 8014ee4:	d904      	bls.n	8014ef0 <_raise_r+0x14>
 8014ee6:	2316      	movs	r3, #22
 8014ee8:	6003      	str	r3, [r0, #0]
 8014eea:	f04f 30ff 	mov.w	r0, #4294967295
 8014eee:	bd38      	pop	{r3, r4, r5, pc}
 8014ef0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014ef2:	b112      	cbz	r2, 8014efa <_raise_r+0x1e>
 8014ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ef8:	b94b      	cbnz	r3, 8014f0e <_raise_r+0x32>
 8014efa:	4628      	mov	r0, r5
 8014efc:	f000 f830 	bl	8014f60 <_getpid_r>
 8014f00:	4622      	mov	r2, r4
 8014f02:	4601      	mov	r1, r0
 8014f04:	4628      	mov	r0, r5
 8014f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f0a:	f000 b817 	b.w	8014f3c <_kill_r>
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d00a      	beq.n	8014f28 <_raise_r+0x4c>
 8014f12:	1c59      	adds	r1, r3, #1
 8014f14:	d103      	bne.n	8014f1e <_raise_r+0x42>
 8014f16:	2316      	movs	r3, #22
 8014f18:	6003      	str	r3, [r0, #0]
 8014f1a:	2001      	movs	r0, #1
 8014f1c:	e7e7      	b.n	8014eee <_raise_r+0x12>
 8014f1e:	2100      	movs	r1, #0
 8014f20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014f24:	4620      	mov	r0, r4
 8014f26:	4798      	blx	r3
 8014f28:	2000      	movs	r0, #0
 8014f2a:	e7e0      	b.n	8014eee <_raise_r+0x12>

08014f2c <raise>:
 8014f2c:	4b02      	ldr	r3, [pc, #8]	@ (8014f38 <raise+0xc>)
 8014f2e:	4601      	mov	r1, r0
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	f7ff bfd3 	b.w	8014edc <_raise_r>
 8014f36:	bf00      	nop
 8014f38:	200003d4 	.word	0x200003d4

08014f3c <_kill_r>:
 8014f3c:	b538      	push	{r3, r4, r5, lr}
 8014f3e:	4d07      	ldr	r5, [pc, #28]	@ (8014f5c <_kill_r+0x20>)
 8014f40:	2300      	movs	r3, #0
 8014f42:	4604      	mov	r4, r0
 8014f44:	4608      	mov	r0, r1
 8014f46:	4611      	mov	r1, r2
 8014f48:	602b      	str	r3, [r5, #0]
 8014f4a:	f7ee fd81 	bl	8003a50 <_kill>
 8014f4e:	1c43      	adds	r3, r0, #1
 8014f50:	d102      	bne.n	8014f58 <_kill_r+0x1c>
 8014f52:	682b      	ldr	r3, [r5, #0]
 8014f54:	b103      	cbz	r3, 8014f58 <_kill_r+0x1c>
 8014f56:	6023      	str	r3, [r4, #0]
 8014f58:	bd38      	pop	{r3, r4, r5, pc}
 8014f5a:	bf00      	nop
 8014f5c:	20005a9c 	.word	0x20005a9c

08014f60 <_getpid_r>:
 8014f60:	f7ee bd6e 	b.w	8003a40 <_getpid>

08014f64 <_malloc_usable_size_r>:
 8014f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f68:	1f18      	subs	r0, r3, #4
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	bfbc      	itt	lt
 8014f6e:	580b      	ldrlt	r3, [r1, r0]
 8014f70:	18c0      	addlt	r0, r0, r3
 8014f72:	4770      	bx	lr

08014f74 <__swhatbuf_r>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	460c      	mov	r4, r1
 8014f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7c:	2900      	cmp	r1, #0
 8014f7e:	b096      	sub	sp, #88	@ 0x58
 8014f80:	4615      	mov	r5, r2
 8014f82:	461e      	mov	r6, r3
 8014f84:	da0d      	bge.n	8014fa2 <__swhatbuf_r+0x2e>
 8014f86:	89a3      	ldrh	r3, [r4, #12]
 8014f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014f8c:	f04f 0100 	mov.w	r1, #0
 8014f90:	bf14      	ite	ne
 8014f92:	2340      	movne	r3, #64	@ 0x40
 8014f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014f98:	2000      	movs	r0, #0
 8014f9a:	6031      	str	r1, [r6, #0]
 8014f9c:	602b      	str	r3, [r5, #0]
 8014f9e:	b016      	add	sp, #88	@ 0x58
 8014fa0:	bd70      	pop	{r4, r5, r6, pc}
 8014fa2:	466a      	mov	r2, sp
 8014fa4:	f000 f848 	bl	8015038 <_fstat_r>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	dbec      	blt.n	8014f86 <__swhatbuf_r+0x12>
 8014fac:	9901      	ldr	r1, [sp, #4]
 8014fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014fb6:	4259      	negs	r1, r3
 8014fb8:	4159      	adcs	r1, r3
 8014fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014fbe:	e7eb      	b.n	8014f98 <__swhatbuf_r+0x24>

08014fc0 <__smakebuf_r>:
 8014fc0:	898b      	ldrh	r3, [r1, #12]
 8014fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fc4:	079d      	lsls	r5, r3, #30
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460c      	mov	r4, r1
 8014fca:	d507      	bpl.n	8014fdc <__smakebuf_r+0x1c>
 8014fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014fd0:	6023      	str	r3, [r4, #0]
 8014fd2:	6123      	str	r3, [r4, #16]
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	6163      	str	r3, [r4, #20]
 8014fd8:	b003      	add	sp, #12
 8014fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fdc:	ab01      	add	r3, sp, #4
 8014fde:	466a      	mov	r2, sp
 8014fe0:	f7ff ffc8 	bl	8014f74 <__swhatbuf_r>
 8014fe4:	9f00      	ldr	r7, [sp, #0]
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	4639      	mov	r1, r7
 8014fea:	4630      	mov	r0, r6
 8014fec:	f7fb fddc 	bl	8010ba8 <_malloc_r>
 8014ff0:	b948      	cbnz	r0, 8015006 <__smakebuf_r+0x46>
 8014ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff6:	059a      	lsls	r2, r3, #22
 8014ff8:	d4ee      	bmi.n	8014fd8 <__smakebuf_r+0x18>
 8014ffa:	f023 0303 	bic.w	r3, r3, #3
 8014ffe:	f043 0302 	orr.w	r3, r3, #2
 8015002:	81a3      	strh	r3, [r4, #12]
 8015004:	e7e2      	b.n	8014fcc <__smakebuf_r+0xc>
 8015006:	89a3      	ldrh	r3, [r4, #12]
 8015008:	6020      	str	r0, [r4, #0]
 801500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801500e:	81a3      	strh	r3, [r4, #12]
 8015010:	9b01      	ldr	r3, [sp, #4]
 8015012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015016:	b15b      	cbz	r3, 8015030 <__smakebuf_r+0x70>
 8015018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801501c:	4630      	mov	r0, r6
 801501e:	f000 f81d 	bl	801505c <_isatty_r>
 8015022:	b128      	cbz	r0, 8015030 <__smakebuf_r+0x70>
 8015024:	89a3      	ldrh	r3, [r4, #12]
 8015026:	f023 0303 	bic.w	r3, r3, #3
 801502a:	f043 0301 	orr.w	r3, r3, #1
 801502e:	81a3      	strh	r3, [r4, #12]
 8015030:	89a3      	ldrh	r3, [r4, #12]
 8015032:	431d      	orrs	r5, r3
 8015034:	81a5      	strh	r5, [r4, #12]
 8015036:	e7cf      	b.n	8014fd8 <__smakebuf_r+0x18>

08015038 <_fstat_r>:
 8015038:	b538      	push	{r3, r4, r5, lr}
 801503a:	4d07      	ldr	r5, [pc, #28]	@ (8015058 <_fstat_r+0x20>)
 801503c:	2300      	movs	r3, #0
 801503e:	4604      	mov	r4, r0
 8015040:	4608      	mov	r0, r1
 8015042:	4611      	mov	r1, r2
 8015044:	602b      	str	r3, [r5, #0]
 8015046:	f7ee fd63 	bl	8003b10 <_fstat>
 801504a:	1c43      	adds	r3, r0, #1
 801504c:	d102      	bne.n	8015054 <_fstat_r+0x1c>
 801504e:	682b      	ldr	r3, [r5, #0]
 8015050:	b103      	cbz	r3, 8015054 <_fstat_r+0x1c>
 8015052:	6023      	str	r3, [r4, #0]
 8015054:	bd38      	pop	{r3, r4, r5, pc}
 8015056:	bf00      	nop
 8015058:	20005a9c 	.word	0x20005a9c

0801505c <_isatty_r>:
 801505c:	b538      	push	{r3, r4, r5, lr}
 801505e:	4d06      	ldr	r5, [pc, #24]	@ (8015078 <_isatty_r+0x1c>)
 8015060:	2300      	movs	r3, #0
 8015062:	4604      	mov	r4, r0
 8015064:	4608      	mov	r0, r1
 8015066:	602b      	str	r3, [r5, #0]
 8015068:	f7ee fd62 	bl	8003b30 <_isatty>
 801506c:	1c43      	adds	r3, r0, #1
 801506e:	d102      	bne.n	8015076 <_isatty_r+0x1a>
 8015070:	682b      	ldr	r3, [r5, #0]
 8015072:	b103      	cbz	r3, 8015076 <_isatty_r+0x1a>
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	bd38      	pop	{r3, r4, r5, pc}
 8015078:	20005a9c 	.word	0x20005a9c

0801507c <_init>:
 801507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507e:	bf00      	nop
 8015080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015082:	bc08      	pop	{r3}
 8015084:	469e      	mov	lr, r3
 8015086:	4770      	bx	lr

08015088 <_fini>:
 8015088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801508a:	bf00      	nop
 801508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801508e:	bc08      	pop	{r3}
 8015090:	469e      	mov	lr, r3
 8015092:	4770      	bx	lr
