
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea4  08014db8  08014db8  00015db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c5c  08015c5c  00017424  2**0
                  CONTENTS
  4 .ARM          00000008  08015c5c  08015c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c64  08015c64  00017424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c64  08015c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c68  08015c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08015c6c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055ec  20000428  08016090  00017428  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005a14  08016090  00017a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ea16  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075f3  00000000  00000000  00045e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  0004d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2b  00000000  00000000  0004fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7be  00000000  00000000  0005175b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035627  00000000  00000000  0007df19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4938  00000000  00000000  000b3540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b29c  00000000  00000000  00197ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a3158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d9c 	.word	0x08014d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	08014d9c 	.word	0x08014d9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <toggle_led+0x30>)
 8000f54:	f003 f921 	bl	800419a <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f00b f87f 	bl	800c05c <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <toggle_led+0x30>)
 8000f66:	f003 f918 	bl	800419a <HAL_GPIO_TogglePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <ARM_keys_IRQ+0x58>)
 8000f82:	f001 fdd3 	bl	8002b2c <UART_puts>
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <ARM_keys_IRQ+0x5c>)
 8000f88:	f001 fdd0 	bl	8002b2c <UART_puts>
 8000f8c:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <ARM_keys_IRQ+0x60>)
 8000f8e:	f001 fdcd 	bl	8002b2c <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <ARM_keys_IRQ+0x64>)
 8000f94:	f00d f974 	bl	800e280 <xTaskGetHandle>
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <ARM_keys_IRQ+0x68>)
 8000fa2:	f000 fb17 	bl	80015d4 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <ARM_keys_IRQ+0x6c>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fb8:	f00b f9ea 	bl	800c390 <xEventGroupWaitBits>
 8000fbc:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f00e f88b 	bl	800f0e0 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fca:	bf00      	nop
 8000fcc:	e7eb      	b.n	8000fa6 <ARM_keys_IRQ+0x2e>
 8000fce:	bf00      	nop
 8000fd0:	08014db8 	.word	0x08014db8
 8000fd4:	08015724 	.word	0x08015724
 8000fd8:	08014dbc 	.word	0x08014dbc
 8000fdc:	08014dc8 	.word	0x08014dc8
 8000fe0:	08014dd8 	.word	0x08014dd8
 8000fe4:	20000454 	.word	0x20000454

08000fe8 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f00e f80f 	bl	800f020 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <ARM_keys_task+0xb4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	4618      	mov	r0, r3
 800100c:	f00c f810 	bl	800d030 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fd3d 	bl	8002a94 <LED_put>
	    BUZZER_put (500);
 800101a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800101e:	f001 fa2b 	bl	8002478 <BUZZER_put>
		osDelay(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001026:	f00b f819 	bl	800c05c <osDelay>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <ARM_keys_task+0xb8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <ARM_keys_task+0x5c>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001036:	481b      	ldr	r0, [pc, #108]	@ (80010a4 <ARM_keys_task+0xbc>)
 8001038:	f001 fd78 	bl	8002b2c <UART_puts>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fd90 	bl	8002b64 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <ARM_keys_task+0xb4>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	f00b fd6d 	bl	800cb2c <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e015      	b.n	8001084 <ARM_keys_task+0x9c>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <ARM_keys_task+0x88>
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <ARM_keys_task+0x82>
 8001064:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001068:	e004      	b.n	8001074 <ARM_keys_task+0x8c>
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	e001      	b.n	8001074 <ARM_keys_task+0x8c>
 8001070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001074:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff63 	bl	8000f44 <toggle_led>
		for (i=0; i<3; i++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b02      	cmp	r3, #2
 8001088:	dde6      	ble.n	8001058 <ARM_keys_task+0x70>
	  	}
     	taskYIELD(); // done, force context switch
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <ARM_keys_task+0xc0>)
 800108c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	f3bf 8f4f 	dsb	sy
 8001096:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800109a:	e7a9      	b.n	8000ff0 <ARM_keys_task+0x8>
 800109c:	20000450 	.word	0x20000450
 80010a0:	20000444 	.word	0x20000444
 80010a4:	08014de8 	.word	0x08014de8
 80010a8:	e000ed04 	.word	0xe000ed04

080010ac <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 80010bc:	4847      	ldr	r0, [pc, #284]	@ (80011dc <UART_keys_IRQ+0x130>)
 80010be:	f001 fd35 	bl	8002b2c <UART_puts>
 80010c2:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <UART_keys_IRQ+0x134>)
 80010c4:	f001 fd32 	bl	8002b2c <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 80010c8:	4846      	ldr	r0, [pc, #280]	@ (80011e4 <UART_keys_IRQ+0x138>)
 80010ca:	f00d f8d9 	bl	800e280 <xTaskGetHandle>
 80010ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 80010d6:	4844      	ldr	r0, [pc, #272]	@ (80011e8 <UART_keys_IRQ+0x13c>)
 80010d8:	f000 fa7c 	bl	80015d4 <error_HaltOS>
	while(TRUE)
    {
		// laat de VIC de q vullen, tot LFEED gedrukt is of qsize - 1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80010dc:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <UART_keys_IRQ+0x140>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f107 0218 	add.w	r2, r7, #24
 80010e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e6:	4413      	add	r3, r2
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	4619      	mov	r1, r3
 80010ee:	f00b febd 	bl	800ce6c <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 80010f2:	f107 0218 	add.w	r2, r7, #24
 80010f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d06b      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 8001100:	f107 0218 	add.w	r2, r7, #24
 8001104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2bff      	cmp	r3, #255	@ 0xff
 800110c:	d064      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 800110e:	f107 0218 	add.w	r2, r7, #24
 8001112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b0d      	cmp	r3, #13
 800111a:	d05d      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 800111c:	f107 0218 	add.w	r2, r7, #24
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b20      	cmp	r3, #32
 8001128:	d056      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 800112a:	f107 0218 	add.w	r2, r7, #24
 800112e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d108      	bne.n	800114a <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001138:	f107 0218 	add.w	r2, r7, #24
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001148:	e00d      	b.n	8001166 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 800114a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114c:	2b08      	cmp	r3, #8
 800114e:	d10a      	bne.n	8001166 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001152:	3301      	adds	r3, #1
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001156:	f107 0218 	add.w	r2, r7, #24
 800115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115c:	4413      	add	r3, r2
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	2b00      	cmp	r3, #0
 800116a:	d031      	beq.n	80011d0 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 800116c:	f107 0218 	add.w	r2, r7, #24
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f011 fa13 	bl	80125a2 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	220a      	movs	r2, #10
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f011 f8ac 	bl	80122e2 <memset>
			finish = FALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	2300      	movs	r3, #0
 8001198:	2203      	movs	r2, #3
 800119a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800119c:	f00d ffa0 	bl	800f0e0 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <UART_keys_IRQ+0x144>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d097      	beq.n	80010dc <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 80011ac:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <UART_keys_IRQ+0x148>)
 80011ae:	f001 fcbd 	bl	8002b2c <UART_puts>
 80011b2:	480a      	ldr	r0, [pc, #40]	@ (80011dc <UART_keys_IRQ+0x130>)
 80011b4:	f001 fcba 	bl	8002b2c <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 80011b8:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <UART_keys_IRQ+0x14c>)
 80011ba:	f001 fcb7 	bl	8002b2c <UART_puts>
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fcb2 	bl	8002b2c <UART_puts>
				UART_puts("\r\n");
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <UART_keys_IRQ+0x150>)
 80011ca:	f001 fcaf 	bl	8002b2c <UART_puts>
 80011ce:	e785      	b.n	80010dc <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	3301      	adds	r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d6:	e781      	b.n	80010dc <UART_keys_IRQ+0x30>
			continue;
 80011d8:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80011da:	e77f      	b.n	80010dc <UART_keys_IRQ+0x30>
 80011dc:	08015734 	.word	0x08015734
 80011e0:	08014e54 	.word	0x08014e54
 80011e4:	08014e08 	.word	0x08014e08
 80011e8:	08014e78 	.word	0x08014e78
 80011ec:	20000448 	.word	0x20000448
 80011f0:	20000444 	.word	0x20000444
 80011f4:	08014e38 	.word	0x08014e38
 80011f8:	08014e88 	.word	0x08014e88
 80011fc:	08014e50 	.word	0x08014e50

08001200 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001208:	4bab      	ldr	r3, [pc, #684]	@ (80014b8 <UART_menu+0x2b8>)
 800120a:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 800120c:	48ab      	ldr	r0, [pc, #684]	@ (80014bc <UART_menu+0x2bc>)
 800120e:	f001 fc8d 	bl	8002b2c <UART_puts>
 8001212:	48ab      	ldr	r0, [pc, #684]	@ (80014c0 <UART_menu+0x2c0>)
 8001214:	f001 fc8a 	bl	8002b2c <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	2001      	movs	r0, #1
 800121e:	f00d feb3 	bl	800ef88 <ulTaskNotifyTake>
 8001222:	4603      	mov	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	75fb      	strb	r3, [r7, #23]
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	3301      	adds	r3, #1
 8001230:	4aa4      	ldr	r2, [pc, #656]	@ (80014c4 <UART_menu+0x2c4>)
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d102      	bne.n	8001244 <UART_menu+0x44>
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	3b20      	subs	r3, #32
 8001242:	e000      	b.n	8001246 <UART_menu+0x46>
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	3b30      	subs	r3, #48	@ 0x30
 8001248:	2b24      	cmp	r3, #36	@ 0x24
 800124a:	d84d      	bhi.n	80012e8 <UART_menu+0xe8>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <UART_menu+0x54>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	080012f7 	.word	0x080012f7
 8001258:	08001333 	.word	0x08001333
 800125c:	0800135f 	.word	0x0800135f
 8001260:	0800138b 	.word	0x0800138b
 8001264:	080013b7 	.word	0x080013b7
 8001268:	080013e3 	.word	0x080013e3
 800126c:	080012e9 	.word	0x080012e9
 8001270:	080012e9 	.word	0x080012e9
 8001274:	080012e9 	.word	0x080012e9
 8001278:	080012e9 	.word	0x080012e9
 800127c:	080012e9 	.word	0x080012e9
 8001280:	080012e9 	.word	0x080012e9
 8001284:	080012e9 	.word	0x080012e9
 8001288:	080012e9 	.word	0x080012e9
 800128c:	080012e9 	.word	0x080012e9
 8001290:	080012e9 	.word	0x080012e9
 8001294:	080012e9 	.word	0x080012e9
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012e9 	.word	0x080012e9
 80012a0:	080012e9 	.word	0x080012e9
 80012a4:	0800140f 	.word	0x0800140f
 80012a8:	080012e9 	.word	0x080012e9
 80012ac:	080012e9 	.word	0x080012e9
 80012b0:	080012e9 	.word	0x080012e9
 80012b4:	080012e9 	.word	0x080012e9
 80012b8:	080012e9 	.word	0x080012e9
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	080012e9 	.word	0x080012e9
 80012c8:	08001433 	.word	0x08001433
 80012cc:	080012e9 	.word	0x080012e9
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	0800143f 	.word	0x0800143f
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012e9 	.word	0x080012e9
 80012e0:	08001483 	.word	0x08001483
 80012e4:	08001439 	.word	0x08001439
		{
		default:  UART_puts(s);
 80012e8:	69b8      	ldr	r0, [r7, #24]
 80012ea:	f001 fc1f 	bl	8002b2c <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 80012ee:	4876      	ldr	r0, [pc, #472]	@ (80014c8 <UART_menu+0x2c8>)
 80012f0:	f001 fc1c 	bl	8002b2c <UART_puts>
				  break;
 80012f4:	e0df      	b.n	80014b6 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 80012f6:	4b75      	ldr	r3, [pc, #468]	@ (80014cc <UART_menu+0x2cc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <UART_menu+0x102>
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <UART_menu+0x104>
 8001302:	23ff      	movs	r3, #255	@ 0xff
 8001304:	4a71      	ldr	r2, [pc, #452]	@ (80014cc <UART_menu+0x2cc>)
 8001306:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001308:	4871      	ldr	r0, [pc, #452]	@ (80014d0 <UART_menu+0x2d0>)
 800130a:	f001 fc0f 	bl	8002b2c <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 800130e:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <UART_menu+0x2cc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2bff      	cmp	r3, #255	@ 0xff
 8001314:	d101      	bne.n	800131a <UART_menu+0x11a>
 8001316:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <UART_menu+0x2d4>)
 8001318:	e000      	b.n	800131c <UART_menu+0x11c>
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <UART_menu+0x2d8>)
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fc05 	bl	8002b2c <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 8001322:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <UART_menu+0x2cc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80c0 	bne.w	80014ac <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 800132c:	f000 f944 	bl	80015b8 <DisplayMenu>
				  break;
 8001330:	e0bc      	b.n	80014ac <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 8001332:	4b66      	ldr	r3, [pc, #408]	@ (80014cc <UART_menu+0x2cc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f083 0301 	eor.w	r3, r3, #1
 800133a:	4a64      	ldr	r2, [pc, #400]	@ (80014cc <UART_menu+0x2cc>)
 800133c:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 800133e:	4867      	ldr	r0, [pc, #412]	@ (80014dc <UART_menu+0x2dc>)
 8001340:	f001 fbf4 	bl	8002b2c <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001344:	4b61      	ldr	r3, [pc, #388]	@ (80014cc <UART_menu+0x2cc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <UART_menu+0x154>
 8001350:	4b60      	ldr	r3, [pc, #384]	@ (80014d4 <UART_menu+0x2d4>)
 8001352:	e000      	b.n	8001356 <UART_menu+0x156>
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <UART_menu+0x2d8>)
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fbe8 	bl	8002b2c <UART_puts>
				  break;
 800135c:	e0ab      	b.n	80014b6 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 800135e:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <UART_menu+0x2cc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f083 0302 	eor.w	r3, r3, #2
 8001366:	4a59      	ldr	r2, [pc, #356]	@ (80014cc <UART_menu+0x2cc>)
 8001368:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 800136a:	485d      	ldr	r0, [pc, #372]	@ (80014e0 <UART_menu+0x2e0>)
 800136c:	f001 fbde 	bl	8002b2c <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001370:	4b56      	ldr	r3, [pc, #344]	@ (80014cc <UART_menu+0x2cc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <UART_menu+0x180>
 800137c:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <UART_menu+0x2d4>)
 800137e:	e000      	b.n	8001382 <UART_menu+0x182>
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <UART_menu+0x2d8>)
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fbd2 	bl	8002b2c <UART_puts>
				  break;
 8001388:	e095      	b.n	80014b6 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 800138a:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <UART_menu+0x2cc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f083 0304 	eor.w	r3, r3, #4
 8001392:	4a4e      	ldr	r2, [pc, #312]	@ (80014cc <UART_menu+0x2cc>)
 8001394:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001396:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <UART_menu+0x2e4>)
 8001398:	f001 fbc8 	bl	8002b2c <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800139c:	4b4b      	ldr	r3, [pc, #300]	@ (80014cc <UART_menu+0x2cc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <UART_menu+0x1ac>
 80013a8:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <UART_menu+0x2d4>)
 80013aa:	e000      	b.n	80013ae <UART_menu+0x1ae>
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <UART_menu+0x2d8>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fbbc 	bl	8002b2c <UART_puts>
				  break;
 80013b4:	e07f      	b.n	80014b6 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 80013b6:	4b45      	ldr	r3, [pc, #276]	@ (80014cc <UART_menu+0x2cc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f083 0308 	eor.w	r3, r3, #8
 80013be:	4a43      	ldr	r2, [pc, #268]	@ (80014cc <UART_menu+0x2cc>)
 80013c0:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 80013c2:	4849      	ldr	r0, [pc, #292]	@ (80014e8 <UART_menu+0x2e8>)
 80013c4:	f001 fbb2 	bl	8002b2c <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013c8:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <UART_menu+0x2cc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <UART_menu+0x1d8>
 80013d4:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <UART_menu+0x2d4>)
 80013d6:	e000      	b.n	80013da <UART_menu+0x1da>
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <UART_menu+0x2d8>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fba6 	bl	8002b2c <UART_puts>
				  break;
 80013e0:	e069      	b.n	80014b6 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 80013e2:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <UART_menu+0x2cc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f083 0310 	eor.w	r3, r3, #16
 80013ea:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <UART_menu+0x2cc>)
 80013ec:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 80013ee:	483f      	ldr	r0, [pc, #252]	@ (80014ec <UART_menu+0x2ec>)
 80013f0:	f001 fb9c 	bl	8002b2c <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <UART_menu+0x2cc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <UART_menu+0x204>
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <UART_menu+0x2d4>)
 8001402:	e000      	b.n	8001406 <UART_menu+0x206>
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <UART_menu+0x2d8>)
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fb90 	bl	8002b2c <UART_puts>
				  break;
 800140c:	e053      	b.n	80014b6 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3302      	adds	r3, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f00f fa92 	bl	801093c <atoi>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <UART_menu+0x2f0>)
 800141e:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8001420:	4834      	ldr	r0, [pc, #208]	@ (80014f4 <UART_menu+0x2f4>)
 8001422:	f001 fb83 	bl	8002b2c <UART_puts>
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <UART_menu+0x2f0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fb9a 	bl	8002b64 <UART_putint>
				  break;
 8001430:	e041      	b.n	80014b6 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8001432:	f000 f8c1 	bl	80015b8 <DisplayMenu>
				  break;
 8001436:	e03e      	b.n	80014b6 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8001438:	f000 fa28 	bl	800188c <DisplayTaskData>
				  break;
 800143c:	e03b      	b.n	80014b6 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 800143e:	69f9      	ldr	r1, [r7, #28]
 8001440:	69b8      	ldr	r0, [r7, #24]
 8001442:	f010 ff75 	bl	8012330 <strtok>
 8001446:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001448:	69f9      	ldr	r1, [r7, #28]
 800144a:	2000      	movs	r0, #0
 800144c:	f010 ff70 	bl	8012330 <strtok>
 8001450:	61b8      	str	r0, [r7, #24]
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f00f fa72 	bl	801093c <atoi>
 8001458:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 800145a:	69f9      	ldr	r1, [r7, #28]
 800145c:	2000      	movs	r0, #0
 800145e:	f010 ff67 	bl	8012330 <strtok>
 8001462:	61b8      	str	r0, [r7, #24]
 8001464:	69b8      	ldr	r0, [r7, #24]
 8001466:	f00f fa69 	bl	801093c <atoi>
 800146a:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01e      	beq.n	80014b0 <UART_menu+0x2b0>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f000 f982 	bl	8001784 <SetTaskPriority>
				  break;
 8001480:	e016      	b.n	80014b0 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001482:	69f9      	ldr	r1, [r7, #28]
 8001484:	69b8      	ldr	r0, [r7, #24]
 8001486:	f010 ff53 	bl	8012330 <strtok>
 800148a:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 800148c:	69f9      	ldr	r1, [r7, #28]
 800148e:	2000      	movs	r0, #0
 8001490:	f010 ff4e 	bl	8012330 <strtok>
 8001494:	61b8      	str	r0, [r7, #24]
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f00f fa50 	bl	801093c <atoi>
 800149c:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <UART_menu+0x2b4>
					  StartStopTask(val1);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f000 f9a9 	bl	80017fc <StartStopTask>
				  break;
 80014aa:	e003      	b.n	80014b4 <UART_menu+0x2b4>
				  break;
 80014ac:	bf00      	nop
 80014ae:	e6b3      	b.n	8001218 <UART_menu+0x18>
				  break;
 80014b0:	bf00      	nop
 80014b2:	e6b1      	b.n	8001218 <UART_menu+0x18>
				  break;
 80014b4:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80014b6:	e6af      	b.n	8001218 <UART_menu+0x18>
 80014b8:	08014ea4 	.word	0x08014ea4
 80014bc:	08015744 	.word	0x08015744
 80014c0:	08014ea8 	.word	0x08014ea8
 80014c4:	08015830 	.word	0x08015830
 80014c8:	08014eb4 	.word	0x08014eb4
 80014cc:	20000444 	.word	0x20000444
 80014d0:	08014ec8 	.word	0x08014ec8
 80014d4:	08014ee0 	.word	0x08014ee0
 80014d8:	08014ee8 	.word	0x08014ee8
 80014dc:	08014ef0 	.word	0x08014ef0
 80014e0:	08014f04 	.word	0x08014f04
 80014e4:	08014f18 	.word	0x08014f18
 80014e8:	08014f2c 	.word	0x08014f2c
 80014ec:	08014f40 	.word	0x08014f40
 80014f0:	20000218 	.word	0x20000218
 80014f4:	08014f50 	.word	0x08014f50

080014f8 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	@ 0x70
 80014fc:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <DisplayVersion+0x98>)
 8001500:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (tasks.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8001502:	f001 f8fb 	bl	80026fc <LCD_clear>
	LCD_puts(app_nameLCD);
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <DisplayVersion+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fa1c 	bl	8002948 <LCD_puts>

	UART_puts(app_name);
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <DisplayVersion+0xa0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fb09 	bl	8002b2c <UART_puts>
	UART_puts(functionality);
 800151a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800151c:	f001 fb06 	bl	8002b2c <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8001520:	f107 0108 	add.w	r1, r7, #8
 8001524:	463b      	mov	r3, r7
 8001526:	2264      	movs	r2, #100	@ 0x64
 8001528:	4618      	mov	r0, r3
 800152a:	f00a fca1 	bl	800be70 <osKernelGetInfo>
	UART_puts("\t-----");
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <DisplayVersion+0xa4>)
 8001530:	f001 fafc 	bl	8002b2c <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8001534:	481a      	ldr	r0, [pc, #104]	@ (80015a0 <DisplayVersion+0xa8>)
 8001536:	f001 faf9 	bl	8002b2c <UART_puts>
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f001 faf4 	bl	8002b2c <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001544:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <DisplayVersion+0xac>)
 8001546:	f001 faf1 	bl	8002b2c <UART_puts>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fb09 	bl	8002b64 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <DisplayVersion+0xb0>)
 8001554:	f001 faea 	bl	8002b2c <UART_puts>
 8001558:	f00a fce2 	bl	800bf20 <osKernelGetSysTimerFreq>
 800155c:	4603      	mov	r3, r0
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <DisplayVersion+0xb4>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fafc 	bl	8002b64 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <DisplayVersion+0xb8>)
 800156e:	f001 fadd 	bl	8002b2c <UART_puts>
 8001572:	f00a fccb 	bl	800bf0c <osKernelGetTickFreq>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f001 faf3 	bl	8002b64 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <DisplayVersion+0xbc>)
 8001580:	f001 fad4 	bl	8002b2c <UART_puts>

    DisplayMenu();
 8001584:	f000 f818 	bl	80015b8 <DisplayMenu>
}
 8001588:	bf00      	nop
 800158a:	3770      	adds	r7, #112	@ 0x70
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	08015024 	.word	0x08015024
 8001594:	20000004 	.word	0x20000004
 8001598:	20000000 	.word	0x20000000
 800159c:	08015194 	.word	0x08015194
 80015a0:	0801519c 	.word	0x0801519c
 80015a4:	080151a0 	.word	0x080151a0
 80015a8:	080151b0 	.word	0x080151b0
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	080151cc 	.word	0x080151cc
 80015b4:	080151e4 	.word	0x080151e4

080015b8 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	char *menu =
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <DisplayMenu+0x18>)
 80015c0:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. p,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f001 fab2 	bl	8002b2c <UART_puts>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	080151f0 	.word	0x080151f0

080015d4 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f001 f9b3 	bl	8002948 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 faa2 	bl	8002b2c <UART_puts>
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <error_HaltOS+0x2c>)
 80015ea:	f001 fa9f 	bl	8002b2c <UART_puts>

	BUZZER_put(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f2:	f000 ff41 	bl	8002478 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 80015f6:	f00c fd19 	bl	800e02c <vTaskSuspendAll>

	while (TRUE)
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <error_HaltOS+0x26>
 80015fe:	bf00      	nop
 8001600:	08015430 	.word	0x08015430

08001604 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 800160a:	2001      	movs	r0, #1
 800160c:	f00b fa75 	bl	800cafa <xQueueCreateMutex>
 8001610:	4603      	mov	r3, r0
 8001612:	4a30      	ldr	r2, [pc, #192]	@ (80016d4 <CreateHandles+0xd0>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b2f      	ldr	r3, [pc, #188]	@ (80016d4 <CreateHandles+0xd0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 800161e:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <CreateHandles+0xd4>)
 8001620:	f7ff ffd8 	bl	80015d4 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	200a      	movs	r0, #10
 800162a:	f00b f9ee 	bl	800ca0a <xQueueGenericCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a2a      	ldr	r2, [pc, #168]	@ (80016dc <CreateHandles+0xd8>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <CreateHandles+0xd8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 800163c:	4828      	ldr	r0, [pc, #160]	@ (80016e0 <CreateHandles+0xdc>)
 800163e:	f7ff ffc9 	bl	80015d4 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8001642:	2200      	movs	r2, #0
 8001644:	2101      	movs	r1, #1
 8001646:	2053      	movs	r0, #83	@ 0x53
 8001648:	f00b f9df 	bl	800ca0a <xQueueGenericCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a25      	ldr	r2, [pc, #148]	@ (80016e4 <CreateHandles+0xe0>)
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <CreateHandles+0xe0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <CreateHandles+0xe4>)
 800165c:	f7ff ffba 	bl	80015d4 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8001660:	f00a fe7c 	bl	800c35c <xEventGroupCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a21      	ldr	r2, [pc, #132]	@ (80016ec <CreateHandles+0xe8>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <CreateHandles+0xe8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8001672:	481f      	ldr	r0, [pc, #124]	@ (80016f0 <CreateHandles+0xec>)
 8001674:	f7ff ffae 	bl	80015d4 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <CreateHandles+0xf0>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001684:	481c      	ldr	r0, [pc, #112]	@ (80016f8 <CreateHandles+0xf4>)
 8001686:	f00d fe8b 	bl	800f3a0 <xTimerCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <CreateHandles+0xf8>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <CreateHandles+0xf8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001698:	4819      	ldr	r0, [pc, #100]	@ (8001700 <CreateHandles+0xfc>)
 800169a:	f7ff ff9b 	bl	80015d4 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 800169e:	4819      	ldr	r0, [pc, #100]	@ (8001704 <CreateHandles+0x100>)
 80016a0:	f001 fa44 	bl	8002b2c <UART_puts>

	UART_puts("\n\rTimer set to: ");
 80016a4:	4818      	ldr	r0, [pc, #96]	@ (8001708 <CreateHandles+0x104>)
 80016a6:	f001 fa41 	bl	8002b2c <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 80016aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ae:	f001 fa59 	bl	8002b64 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <CreateHandles+0xf8>)
 80016b4:	681c      	ldr	r4, [r3, #0]
 80016b6:	f00c fd65 	bl	800e184 <xTaskGetTickCount>
 80016ba:	4602      	mov	r2, r0
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2101      	movs	r1, #1
 80016c4:	4620      	mov	r0, r4
 80016c6:	f00d fec9 	bl	800f45c <xTimerGenericCommand>
}
 80016ca:	bf00      	nop
 80016cc:	3704      	adds	r7, #4
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000450 	.word	0x20000450
 80016d8:	08015448 	.word	0x08015448
 80016dc:	20000448 	.word	0x20000448
 80016e0:	08015458 	.word	0x08015458
 80016e4:	2000044c 	.word	0x2000044c
 80016e8:	08015468 	.word	0x08015468
 80016ec:	20000454 	.word	0x20000454
 80016f0:	08015478 	.word	0x08015478
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	0801548c 	.word	0x0801548c
 80016fc:	20000458 	.word	0x20000458
 8001700:	08015494 	.word	0x08015494
 8001704:	080154a4 	.word	0x080154a4
 8001708:	080154c8 	.word	0x080154c8

0800170c <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <Timer1_Handler+0x14>)
 8001716:	f002 fd40 	bl	800419a <HAL_GPIO_TogglePin>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020c00 	.word	0x40020c00

08001724 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <CreateTasks+0x58>)
 800172c:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800172e:	f00c fc7d 	bl	800e02c <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001732:	e016      	b.n	8001762 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <CreateTasks+0x5c>)
 8001736:	f001 f9f9 	bl	8002b2c <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f9f4 	bl	8002b2c <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	461a      	mov	r2, r3
 8001752:	f00a fbf1 	bl	800bf38 <osThreadNew>
 8001756:	4602      	mov	r2, r0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3330      	adds	r3, #48	@ 0x30
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800176a:	f00c fc6d 	bl	800e048 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800176e:	f000 f88d 	bl	800188c <DisplayTaskData>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	080154dc 	.word	0x080154dc

08001784 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <SetTaskPriority+0x6c>)
 8001790:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001792:	2301      	movs	r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	e023      	b.n	80017e0 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d119      	bne.n	80017d4 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00c fa26 	bl	800dc00 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 80017b4:	480f      	ldr	r0, [pc, #60]	@ (80017f4 <SetTaskPriority+0x70>)
 80017b6:	f001 f9b9 	bl	8002b2c <UART_puts>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f9b4 	bl	8002b2c <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <SetTaskPriority+0x74>)
 80017c6:	f001 f9b1 	bl	8002b2c <UART_puts>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 f9c9 	bl	8002b64 <UART_putint>
			return;
 80017d2:	e009      	b.n	80017e8 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3330      	adds	r3, #48	@ 0x30
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1d7      	bne.n	8001798 <SetTaskPriority+0x14>
		}
}
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	080154e8 	.word	0x080154e8
 80017f8:	080154f4 	.word	0x080154f4

080017fc <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	@ 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <StartStopTask+0x80>)
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
 800180c:	e02e      	b.n	800186c <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001812:	429a      	cmp	r2, r3
 8001814:	d124      	bne.n	8001860 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001818:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800181a:	f107 010c 	add.w	r1, r7, #12
 800181e:	2305      	movs	r3, #5
 8001820:	2201      	movs	r2, #1
 8001822:	f00d f917 	bl	800ea54 <vTaskGetInfo>
			UART_puts("\r\n");
 8001826:	4816      	ldr	r0, [pc, #88]	@ (8001880 <StartStopTask+0x84>)
 8001828:	f001 f980 	bl	8002b2c <UART_puts>
			UART_puts(ptd->attr.name);
 800182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f97b 	bl	8002b2c <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001836:	7e3b      	ldrb	r3, [r7, #24]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d108      	bne.n	800184e <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 800183c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	4618      	mov	r0, r3
 8001842:	f00c fb23 	bl	800de8c <vTaskResume>
				UART_puts(" resumed.");
 8001846:	480f      	ldr	r0, [pc, #60]	@ (8001884 <StartStopTask+0x88>)
 8001848:	f001 f970 	bl	8002b2c <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 800184c:	e012      	b.n	8001874 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 800184e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	4618      	mov	r0, r3
 8001854:	f00c fa72 	bl	800dd3c <vTaskSuspend>
				UART_puts(" suspended.");
 8001858:	480b      	ldr	r0, [pc, #44]	@ (8001888 <StartStopTask+0x8c>)
 800185a:	f001 f967 	bl	8002b2c <UART_puts>
 800185e:	e009      	b.n	8001874 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	3330      	adds	r3, #48	@ 0x30
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
 8001866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001868:	3301      	adds	r3, #1
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1cc      	bne.n	800180e <StartStopTask+0x12>
		}
}
 8001874:	3738      	adds	r7, #56	@ 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008
 8001880:	08015508 	.word	0x08015508
 8001884:	0801550c 	.word	0x0801550c
 8001888:	08015518 	.word	0x08015518

0800188c <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	@ 0x38
 8001890:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <DisplayTaskData+0xcc>)
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  freespace;
	TaskStatus_t xTaskDetails;
	unsigned int used;
	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001896:	2301      	movs	r3, #1
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
 800189a:	e052      	b.n	8001942 <DisplayTaskData+0xb6>
	{
		freespace = uxTaskGetStackHighWaterMark(ptd->hTask) * 4; 	// amount of free bytes
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00d f959 	bl	800eb58 <uxTaskGetStackHighWaterMark>
 80018a6:	4603      	mov	r3, r0
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		used = 100 - (freespace * 100) / ptd->attr.stack_size; 		// in percentage
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	2264      	movs	r2, #100	@ 0x64
 80018b0:	fb03 f202 	mul.w	r2, r3, r2
 80018b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80018c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80018c6:	1d39      	adds	r1, r7, #4
 80018c8:	2305      	movs	r3, #5
 80018ca:	2201      	movs	r2, #1
 80018cc:	f00d f8c2 	bl	800ea54 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 80018d0:	4822      	ldr	r0, [pc, #136]	@ (800195c <DisplayTaskData+0xd0>)
 80018d2:	f001 f92b 	bl	8002b2c <UART_puts>
 80018d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018d8:	f001 f944 	bl	8002b64 <UART_putint>
 80018dc:	4820      	ldr	r0, [pc, #128]	@ (8001960 <DisplayTaskData+0xd4>)
 80018de:	f001 f925 	bl	8002b2c <UART_puts>
		UART_puts(ptd->attr.name);
 80018e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f920 	bl	8002b2c <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 80018ec:	481d      	ldr	r0, [pc, #116]	@ (8001964 <DisplayTaskData+0xd8>)
 80018ee:	f001 f91d 	bl	8002b2c <UART_puts>
 80018f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f934 	bl	8002b64 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size);
 80018fc:	481a      	ldr	r0, [pc, #104]	@ (8001968 <DisplayTaskData+0xdc>)
 80018fe:	f001 f915 	bl	8002b2c <UART_puts>
 8001902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f92c 	bl	8002b64 <UART_putint>
		UART_puts("\t used: ");      UART_putint(used); UART_puts("%");
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <DisplayTaskData+0xe0>)
 800190e:	f001 f90d 	bl	8002b2c <UART_puts>
 8001912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001914:	f001 f926 	bl	8002b64 <UART_putint>
 8001918:	4815      	ldr	r0, [pc, #84]	@ (8001970 <DisplayTaskData+0xe4>)
 800191a:	f001 f907 	bl	8002b2c <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <DisplayTaskData+0xe8>)
 8001920:	f001 f904 	bl	8002b2c <UART_puts>
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d101      	bne.n	800192e <DisplayTaskData+0xa2>
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <DisplayTaskData+0xec>)
 800192c:	e000      	b.n	8001930 <DisplayTaskData+0xa4>
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <DisplayTaskData+0xf0>)
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f8fb 	bl	8002b2c <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001938:	3330      	adds	r3, #48	@ 0x30
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
 800193c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193e:	3301      	adds	r3, #1
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
 8001942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1a8      	bne.n	800189c <DisplayTaskData+0x10>
	}
	UART_puts("\r\n");
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <DisplayTaskData+0xf4>)
 800194c:	f001 f8ee 	bl	8002b2c <UART_puts>
}
 8001950:	bf00      	nop
 8001952:	3738      	adds	r7, #56	@ 0x38
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000008 	.word	0x20000008
 800195c:	08015524 	.word	0x08015524
 8001960:	0801552c 	.word	0x0801552c
 8001964:	08015530 	.word	0x08015530
 8001968:	08015540 	.word	0x08015540
 800196c:	08015550 	.word	0x08015550
 8001970:	0801555c 	.word	0x0801555c
 8001974:	08015560 	.word	0x08015560
 8001978:	0801556c 	.word	0x0801556c
 800197c:	08015578 	.word	0x08015578
 8001980:	08015508 	.word	0x08015508

08001984 <gps_get_GNRMC>:

GNRMC gnrmc; // global struct for GNRMC-messages
SemaphoreHandle_t gps_access_semaphore;

void gps_get_GNRMC(GNRMC *latestgnrmc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <gps_get_GNRMC+0x3c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	4618      	mov	r0, r3
 8001996:	f00b fb4b 	bl	800d030 <xQueueSemaphoreTake>

	memcpy(latestgnrmc, &gnrmc, sizeof(GNRMC));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <gps_get_GNRMC+0x40>)
 800199e:	4618      	mov	r0, r3
 80019a0:	4611      	mov	r1, r2
 80019a2:	2347      	movs	r3, #71	@ 0x47
 80019a4:	461a      	mov	r2, r3
 80019a6:	f010 fe04 	bl	80125b2 <memcpy>

	xSemaphoreGive(gps_access_semaphore);
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <gps_get_GNRMC+0x3c>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	f00b f8ba 	bl	800cb2c <xQueueGenericSend>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200004a4 	.word	0x200004a4
 80019c4:	2000045c 	.word	0x2000045c

080019c8 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 80019d0:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <fill_GNRMC+0x11c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	4618      	mov	r0, r3
 80019da:	f00b fb29 	bl	800d030 <xQueueSemaphoreTake>
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <fill_GNRMC+0x120>)
 80019e0:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 80019e2:	2247      	movs	r2, #71	@ 0x47
 80019e4:	2100      	movs	r1, #0
 80019e6:	4841      	ldr	r0, [pc, #260]	@ (8001aec <fill_GNRMC+0x124>)
 80019e8:	f010 fc7b 	bl	80122e2 <memset>

	s = strtok(message, tok); // 0. header;
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f010 fc9e 	bl	8012330 <strtok>
 80019f4:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	483c      	ldr	r0, [pc, #240]	@ (8001aec <fill_GNRMC+0x124>)
 80019fa:	f010 fdd2 	bl	80125a2 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	2000      	movs	r0, #0
 8001a02:	f010 fc95 	bl	8012330 <strtok>
 8001a06:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f010 fc90 	bl	8012330 <strtok>
 8001a10:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <fill_GNRMC+0x124>)
 8001a18:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f010 fc87 	bl	8012330 <strtok>
 8001a22:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	4832      	ldr	r0, [pc, #200]	@ (8001af0 <fill_GNRMC+0x128>)
 8001a28:	f010 fdbb 	bl	80125a2 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f010 fc7e 	bl	8012330 <strtok>
 8001a34:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f010 fc79 	bl	8012330 <strtok>
 8001a3e:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	482c      	ldr	r0, [pc, #176]	@ (8001af4 <fill_GNRMC+0x12c>)
 8001a44:	f010 fdad 	bl	80125a2 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f010 fc70 	bl	8012330 <strtok>
 8001a50:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	2000      	movs	r0, #0
 8001a56:	f010 fc6b 	bl	8012330 <strtok>
 8001a5a:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4826      	ldr	r0, [pc, #152]	@ (8001af8 <fill_GNRMC+0x130>)
 8001a60:	f010 fd9f 	bl	80125a2 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	2000      	movs	r0, #0
 8001a68:	f010 fc62 	bl	8012330 <strtok>
 8001a6c:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	4822      	ldr	r0, [pc, #136]	@ (8001afc <fill_GNRMC+0x134>)
 8001a72:	f010 fd96 	bl	80125a2 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <fill_GNRMC+0x138>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d025      	beq.n	8001ace <fill_GNRMC+0x106>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001a82:	4820      	ldr	r0, [pc, #128]	@ (8001b04 <fill_GNRMC+0x13c>)
 8001a84:	f001 f852 	bl	8002b2c <UART_puts>
 8001a88:	4818      	ldr	r0, [pc, #96]	@ (8001aec <fill_GNRMC+0x124>)
 8001a8a:	f001 f84f 	bl	8002b2c <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001a8e:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <fill_GNRMC+0x140>)
 8001a90:	f001 f84c 	bl	8002b2c <UART_puts>
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <fill_GNRMC+0x124>)
 8001a96:	7c5b      	ldrb	r3, [r3, #17]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 f835 	bl	8002b08 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001a9e:	481b      	ldr	r0, [pc, #108]	@ (8001b0c <fill_GNRMC+0x144>)
 8001aa0:	f001 f844 	bl	8002b2c <UART_puts>
 8001aa4:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <fill_GNRMC+0x128>)
 8001aa6:	f001 f841 	bl	8002b2c <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001aaa:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <fill_GNRMC+0x148>)
 8001aac:	f001 f83e 	bl	8002b2c <UART_puts>
 8001ab0:	4810      	ldr	r0, [pc, #64]	@ (8001af4 <fill_GNRMC+0x12c>)
 8001ab2:	f001 f83b 	bl	8002b2c <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001ab6:	4817      	ldr	r0, [pc, #92]	@ (8001b14 <fill_GNRMC+0x14c>)
 8001ab8:	f001 f838 	bl	8002b2c <UART_puts>
 8001abc:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <fill_GNRMC+0x130>)
 8001abe:	f001 f835 	bl	8002b2c <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <fill_GNRMC+0x150>)
 8001ac4:	f001 f832 	bl	8002b2c <UART_puts>
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <fill_GNRMC+0x134>)
 8001aca:	f001 f82f 	bl	8002b2c <UART_puts>
	}

	xSemaphoreGive(gps_access_semaphore);
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <fill_GNRMC+0x11c>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f00b f828 	bl	800cb2c <xQueueGenericSend>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200004a4 	.word	0x200004a4
 8001ae8:	08015580 	.word	0x08015580
 8001aec:	2000045c 	.word	0x2000045c
 8001af0:	2000046e 	.word	0x2000046e
 8001af4:	20000479 	.word	0x20000479
 8001af8:	20000484 	.word	0x20000484
 8001afc:	2000048a 	.word	0x2000048a
 8001b00:	20000444 	.word	0x20000444
 8001b04:	08015584 	.word	0x08015584
 8001b08:	08015594 	.word	0x08015594
 8001b0c:	080155a4 	.word	0x080155a4
 8001b10:	080155b4 	.word	0x080155b4
 8001b14:	080155c4 	.word	0x080155c4
 8001b18:	080155d4 	.word	0x080155d4

08001b1c <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	gps_access_semaphore=xSemaphoreCreateMutex();
 8001b24:	2001      	movs	r0, #1
 8001b26:	f00a ffe8 	bl	800cafa <xQueueCreateMutex>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a67      	ldr	r2, [pc, #412]	@ (8001ccc <GPS_getNMEA+0x1b0>)
 8001b2e:	6013      	str	r3, [r2, #0]

    char  Q_buff[GPS_MAXLEN];   // buffer for chars in queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001b42:	4863      	ldr	r0, [pc, #396]	@ (8001cd0 <GPS_getNMEA+0x1b4>)
 8001b44:	f000 fff2 	bl	8002b2c <UART_puts>
 8001b48:	4862      	ldr	r0, [pc, #392]	@ (8001cd4 <GPS_getNMEA+0x1b8>)
 8001b4a:	f000 ffef 	bl	8002b2c <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001b4e:	4b62      	ldr	r3, [pc, #392]	@ (8001cd8 <GPS_getNMEA+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00b f986 	bl	800ce6c <xQueueReceive>

		//UART_putchar(*Q_buff);  // echo, for testing

		if (*Q_buff == '$') // gotcha, new datastring started
 8001b60:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001b64:	2b24      	cmp	r3, #36	@ 0x24
 8001b66:	d10c      	bne.n	8001b82 <GPS_getNMEA+0x66>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	2253      	movs	r2, #83	@ 0x53
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 fbb6 	bl	80122e2 <memset>
			pos = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			new_msg = TRUE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 809d 	beq.w	8001cc6 <GPS_getNMEA+0x1aa>
			continue;

		MSG_buff[pos] = *Q_buff; // copy char read from Q into the msg-buf
 8001b8c:	f897 105c 	ldrb.w	r1, [r7, #92]	@ 0x5c
 8001b90:	f107 0208 	add.w	r2, r7, #8
 8001b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d136      	bne.n	8001c14 <GPS_getNMEA+0xf8>
		{
			msg_type = 0; // reset
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	4949      	ldr	r1, [pc, #292]	@ (8001cdc <GPS_getNMEA+0x1c0>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f010 fba8 	bl	801230c <strncmp>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <GPS_getNMEA+0xae>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bc8:	e01c      	b.n	8001c04 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	4943      	ldr	r1, [pc, #268]	@ (8001ce0 <GPS_getNMEA+0x1c4>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f010 fb99 	bl	801230c <strncmp>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <GPS_getNMEA+0xcc>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001be6:	e00d      	b.n	8001c04 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	3301      	adds	r3, #1
 8001bee:	2205      	movs	r2, #5
 8001bf0:	493c      	ldr	r1, [pc, #240]	@ (8001ce4 <GPS_getNMEA+0x1c8>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f010 fb8a 	bl	801230c <strncmp>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <GPS_getNMEA+0xe8>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			if (!msg_type) // not an interesting message type
 8001c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <GPS_getNMEA+0xf8>
			{
				new_msg = FALSE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				continue;
 8001c12:	e059      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c18:	2b51      	cmp	r3, #81	@ 0x51
 8001c1a:	dd03      	ble.n	8001c24 <GPS_getNMEA+0x108>
		{
			new_msg = FALSE; // ignore it
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001c22:	e051      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001c24:	f107 0208 	add.w	r2, r7, #8
 8001c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0d      	cmp	r3, #13
 8001c32:	d142      	bne.n	8001cba <GPS_getNMEA+0x19e>
		{
			MSG_buff[pos] = '\0';          // close string
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f89a 	bl	8001d80 <checksum_valid>
 8001c4c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <GPS_getNMEA+0x1cc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d011      	beq.n	8001c80 <GPS_getNMEA+0x164>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001c5c:	4823      	ldr	r0, [pc, #140]	@ (8001cec <GPS_getNMEA+0x1d0>)
 8001c5e:	f000 ff65 	bl	8002b2c <UART_puts>
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 ff60 	bl	8002b2c <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <GPS_getNMEA+0x15c>
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <GPS_getNMEA+0x1d4>)
 8001c76:	e000      	b.n	8001c7a <GPS_getNMEA+0x15e>
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <GPS_getNMEA+0x1d8>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 ff56 	bl	8002b2c <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <GPS_getNMEA+0x196>
			{
				switch(msg_type) // extract data from msg into right struct
 8001c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d009      	beq.n	8001ca4 <GPS_getNMEA+0x188>
 8001c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dd0b      	ble.n	8001cb0 <GPS_getNMEA+0x194>
 8001c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c9c:	3b02      	subs	r3, #2
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d806      	bhi.n	8001cb0 <GPS_getNMEA+0x194>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001ca2:	e006      	b.n	8001cb2 <GPS_getNMEA+0x196>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe8d 	bl	80019c8 <fill_GNRMC>
						     break;
 8001cae:	e000      	b.n	8001cb2 <GPS_getNMEA+0x196>
				default:     break;
 8001cb0:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001cb8:	e006      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
		}
		pos++; // proceed reading next char from the queue
 8001cba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001cc4:	e743      	b.n	8001b4e <GPS_getNMEA+0x32>
			continue;
 8001cc6:	bf00      	nop
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001cc8:	e741      	b.n	8001b4e <GPS_getNMEA+0x32>
 8001cca:	bf00      	nop
 8001ccc:	200004a4 	.word	0x200004a4
 8001cd0:	08015750 	.word	0x08015750
 8001cd4:	080155e4 	.word	0x080155e4
 8001cd8:	2000044c 	.word	0x2000044c
 8001cdc:	080155f0 	.word	0x080155f0
 8001ce0:	080155f8 	.word	0x080155f8
 8001ce4:	08015600 	.word	0x08015600
 8001ce8:	20000444 	.word	0x20000444
 8001cec:	08015608 	.word	0x08015608
 8001cf0:	08015618 	.word	0x08015618
 8001cf4:	08015624 	.word	0x08015624

08001cf8 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f813 	bl	8001d30 <hexchar2int>
 8001d0a:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3301      	adds	r3, #1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f809 	bl	8001d30 <hexchar2int>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

	return value;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <hexchar2int>:


int hexchar2int(char c)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d3e:	d905      	bls.n	8001d4c <hexchar2int+0x1c>
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b39      	cmp	r3, #57	@ 0x39
 8001d44:	d802      	bhi.n	8001d4c <hexchar2int+0x1c>
        return (c - '0');
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	3b30      	subs	r3, #48	@ 0x30
 8001d4a:	e013      	b.n	8001d74 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b40      	cmp	r3, #64	@ 0x40
 8001d50:	d905      	bls.n	8001d5e <hexchar2int+0x2e>
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b46      	cmp	r3, #70	@ 0x46
 8001d56:	d802      	bhi.n	8001d5e <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	3b37      	subs	r3, #55	@ 0x37
 8001d5c:	e00a      	b.n	8001d74 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b60      	cmp	r3, #96	@ 0x60
 8001d62:	d905      	bls.n	8001d70 <hexchar2int+0x40>
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2b66      	cmp	r3, #102	@ 0x66
 8001d68:	d802      	bhi.n	8001d70 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	3b57      	subs	r3, #87	@ 0x57
 8001d6e:	e001      	b.n	8001d74 <hexchar2int+0x44>
    return (-1);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001d8c:	212a      	movs	r1, #42	@ 0x2a
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f010 faaf 	bl	80122f2 <strchr>
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	4053      	eors	r3, r2
 8001db4:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fa57 	bl	8000270 <strlen>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8ee      	bhi.n	8001da8 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff92 	bl	8001cf8 <hex2int>
 8001dd4:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d101      	bne.n	8001de2 <checksum_valid+0x62>
			return (1);
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <checksum_valid+0x64>
	}

	return (0);
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001df4:	4820      	ldr	r0, [pc, #128]	@ (8001e78 <LED_Task1+0x8c>)
 8001df6:	f000 fe99 	bl	8002b2c <UART_puts>
 8001dfa:	4820      	ldr	r0, [pc, #128]	@ (8001e7c <LED_Task1+0x90>)
 8001dfc:	f000 fe96 	bl	8002b2c <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <LED_Task1+0x94>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00b f911 	bl	800d030 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e01c      	b.n	8001e52 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fe39 	bl	8002a94 <LED_put>
           	osDelay(os_delay);
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <LED_Task1+0x98>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00a f918 	bl	800c05c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001e2c:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <LED_Task1+0x9c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8001e38:	4814      	ldr	r0, [pc, #80]	@ (8001e8c <LED_Task1+0xa0>)
 8001e3a:	f000 fe77 	bl	8002b2c <UART_puts>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fe8f 	bl	8002b64 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	105b      	asrs	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	dddf      	ble.n	8001e18 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <LED_Task1+0x94>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	f00a fe63 	bl	800cb2c <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <LED_Task1+0xa4>)
 8001e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001e76:	e7c3      	b.n	8001e00 <LED_Task1+0x14>
 8001e78:	0801575c 	.word	0x0801575c
 8001e7c:	08015630 	.word	0x08015630
 8001e80:	20000450 	.word	0x20000450
 8001e84:	20000218 	.word	0x20000218
 8001e88:	20000444 	.word	0x20000444
 8001e8c:	0801563c 	.word	0x0801563c
 8001e90:	e000ed04 	.word	0xe000ed04

08001e94 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001e9c:	4820      	ldr	r0, [pc, #128]	@ (8001f20 <LED_Task2+0x8c>)
 8001e9e:	f000 fe45 	bl	8002b2c <UART_puts>
 8001ea2:	4820      	ldr	r0, [pc, #128]	@ (8001f24 <LED_Task2+0x90>)
 8001ea4:	f000 fe42 	bl	8002b2c <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <LED_Task2+0x94>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00b f8bd 	bl	800d030 <xQueueSemaphoreTake>
		leds = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e01c      	b.n	8001efa <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fde5 	bl	8002a94 <LED_put>
          	osDelay(os_delay);
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <LED_Task2+0x98>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00a f8c4 	bl	800c05c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <LED_Task2+0x9c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001ee0:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <LED_Task2+0xa0>)
 8001ee2:	f000 fe23 	bl	8002b2c <UART_puts>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe3b 	bl	8002b64 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b07      	cmp	r3, #7
 8001efe:	dddf      	ble.n	8001ec0 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <LED_Task2+0x94>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f00a fe0f 	bl	800cb2c <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <LED_Task2+0xa4>)
 8001f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001f1e:	e7c3      	b.n	8001ea8 <LED_Task2+0x14>
 8001f20:	08015768 	.word	0x08015768
 8001f24:	08015630 	.word	0x08015630
 8001f28:	20000450 	.word	0x20000450
 8001f2c:	20000218 	.word	0x20000218
 8001f30:	20000444 	.word	0x20000444
 8001f34:	08015648 	.word	0x08015648
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8001f44:	4830      	ldr	r0, [pc, #192]	@ (8002008 <LED_Task3+0xcc>)
 8001f46:	f00c f99b 	bl	800e280 <xTaskGetHandle>
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8001f52:	482e      	ldr	r0, [pc, #184]	@ (800200c <LED_Task3+0xd0>)
 8001f54:	f7ff fb3e 	bl	80015d4 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001f58:	482d      	ldr	r0, [pc, #180]	@ (8002010 <LED_Task3+0xd4>)
 8001f5a:	f000 fde7 	bl	8002b2c <UART_puts>
 8001f5e:	482d      	ldr	r0, [pc, #180]	@ (8002014 <LED_Task3+0xd8>)
 8001f60:	f000 fde4 	bl	8002b2c <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8001f64:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <LED_Task3+0xdc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00b f85f 	bl	800d030 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e02d      	b.n	8001fd4 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <LED_Task3+0x48>
 8001f7e:	2318      	movs	r3, #24
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e00d      	b.n	8001fa0 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <LED_Task3+0x54>
 8001f8a:	2324      	movs	r3, #36	@ 0x24
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e007      	b.n	8001fa0 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d102      	bne.n	8001f9c <LED_Task3+0x60>
 8001f96:	2342      	movs	r3, #66	@ 0x42
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e001      	b.n	8001fa0 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8001f9c:	2381      	movs	r3, #129	@ 0x81
 8001f9e:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fd75 	bl	8002a94 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <LED_Task3+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00a f854 	bl	800c05c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <LED_Task3+0xe4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8001fc0:	4818      	ldr	r0, [pc, #96]	@ (8002024 <LED_Task3+0xe8>)
 8001fc2:	f000 fdb3 	bl	8002b2c <UART_puts>
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fdcb 	bl	8002b64 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	ddce      	ble.n	8001f78 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <LED_Task3+0xdc>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f00a fda2 	bl	800cb2c <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2202      	movs	r2, #2
 8001fec:	2100      	movs	r1, #0
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f00d f876 	bl	800f0e0 <xTaskGenericNotify>
		osDelay(200);
 8001ff4:	20c8      	movs	r0, #200	@ 0xc8
 8001ff6:	f00a f831 	bl	800c05c <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 8001ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffe:	2001      	movs	r0, #1
 8002000:	f00c ffc2 	bl	800ef88 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002004:	e7ae      	b.n	8001f64 <LED_Task3+0x28>
 8002006:	bf00      	nop
 8002008:	08015654 	.word	0x08015654
 800200c:	08015660 	.word	0x08015660
 8002010:	08015774 	.word	0x08015774
 8002014:	08015630 	.word	0x08015630
 8002018:	20000450 	.word	0x20000450
 800201c:	20000218 	.word	0x20000218
 8002020:	20000444 	.word	0x20000444
 8002024:	0801566c 	.word	0x0801566c

08002028 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002030:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <LED_Task4+0xcc>)
 8002032:	f00c f925 	bl	800e280 <xTaskGetHandle>
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 800203e:	482e      	ldr	r0, [pc, #184]	@ (80020f8 <LED_Task4+0xd0>)
 8002040:	f7ff fac8 	bl	80015d4 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002044:	482d      	ldr	r0, [pc, #180]	@ (80020fc <LED_Task4+0xd4>)
 8002046:	f000 fd71 	bl	8002b2c <UART_puts>
 800204a:	482d      	ldr	r0, [pc, #180]	@ (8002100 <LED_Task4+0xd8>)
 800204c:	f000 fd6e 	bl	8002b2c <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	2001      	movs	r0, #1
 8002056:	f00c ff97 	bl	800ef88 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <LED_Task4+0xdc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 31ff 	mov.w	r1, #4294967295
 8002062:	4618      	mov	r0, r3
 8002064:	f00a ffe4 	bl	800d030 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e02d      	b.n	80020ca <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <LED_Task4+0x52>
 8002074:	2381      	movs	r3, #129	@ 0x81
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e00d      	b.n	8002096 <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <LED_Task4+0x5e>
 8002080:	2342      	movs	r3, #66	@ 0x42
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e007      	b.n	8002096 <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d102      	bne.n	8002092 <LED_Task4+0x6a>
 800208c:	2324      	movs	r3, #36	@ 0x24
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e001      	b.n	8002096 <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8002092:	2318      	movs	r3, #24
 8002094:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fcfa 	bl	8002a94 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <LED_Task4+0xe0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f009 ffd9 	bl	800c05c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <LED_Task4+0xe4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80020b6:	4816      	ldr	r0, [pc, #88]	@ (8002110 <LED_Task4+0xe8>)
 80020b8:	f000 fd38 	bl	8002b2c <UART_puts>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fd50 	bl	8002b64 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	ddce      	ble.n	800206e <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <LED_Task4+0xdc>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	f00a fd27 	bl	800cb2c <xQueueGenericSend>
		osDelay(200);
 80020de:	20c8      	movs	r0, #200	@ 0xc8
 80020e0:	f009 ffbc 	bl	800c05c <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80020e4:	2300      	movs	r3, #0
 80020e6:	2202      	movs	r2, #2
 80020e8:	2100      	movs	r1, #0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f00c fff8 	bl	800f0e0 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80020f0:	e7ae      	b.n	8002050 <LED_Task4+0x28>
 80020f2:	bf00      	nop
 80020f4:	0801567c 	.word	0x0801567c
 80020f8:	08015688 	.word	0x08015688
 80020fc:	08015780 	.word	0x08015780
 8002100:	08015630 	.word	0x08015630
 8002104:	20000450 	.word	0x20000450
 8002108:	20000218 	.word	0x20000218
 800210c:	20000444 	.word	0x20000444
 8002110:	08015694 	.word	0x08015694

08002114 <waypointsReset>:
vector2d_t globalVec;

SemaphoreHandle_t student_SemaphoreWaypoints;

void waypointsReset()
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
    for(int i=0;i<20;i++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e017      	b.n	8002150 <waypointsReset+0x3c>
    {
        vector2d_t vec;
        vec.x=0;
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c7 2300 	strd	r2, r3, [r7]
        vec.y=0;
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9c7 2302 	strd	r2, r3, [r7, #8]
        waypoints[i]=vec;
 8002138:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <waypointsReset+0x50>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	461c      	mov	r4, r3
 8002142:	463b      	mov	r3, r7
 8002144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i=0;i<20;i++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b13      	cmp	r3, #19
 8002154:	dde4      	ble.n	8002120 <waypointsReset+0xc>
    }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bc90      	pop	{r4, r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200004a8 	.word	0x200004a8

08002168 <LCD_print_fix>:

void LCD_print_fix(char* msg)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	uint8_t line=0;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
	LCD_clear();
 8002174:	f000 fac2 	bl	80026fc <LCD_clear>
	for(uint8_t i=0;i<strlen(msg);i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73bb      	strb	r3, [r7, #14]
 800217c:	e01e      	b.n	80021bc <LCD_print_fix+0x54>
	{
		if(msg[i]=='\0') break;
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d020      	beq.n	80021cc <LCD_print_fix+0x64>
		if(msg[i]=='\n')
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d108      	bne.n	80021a8 <LCD_print_fix+0x40>
		{
			LCD_XY(0, ++line);
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4619      	mov	r1, r3
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 fabb 	bl	800271c <LCD_XY>
			continue;
 80021a6:	e006      	b.n	80021b6 <LCD_print_fix+0x4e>
		}
		LCD_putchar(msg[i]);
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fb77 	bl	80028a4 <LCD_putchar>
	for(uint8_t i=0;i<strlen(msg);i++)
 80021b6:	7bbb      	ldrb	r3, [r7, #14]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73bb      	strb	r3, [r7, #14]
 80021bc:	7bbc      	ldrb	r4, [r7, #14]
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe f856 	bl	8000270 <strlen>
 80021c4:	4603      	mov	r3, r0
 80021c6:	429c      	cmp	r4, r3
 80021c8:	d3d9      	bcc.n	800217e <LCD_print_fix+0x16>
	}
}
 80021ca:	e000      	b.n	80021ce <LCD_print_fix+0x66>
		if(msg[i]=='\0') break;
 80021cc:	bf00      	nop
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
	...

080021d8 <test_gps_coords>:

void test_gps_coords()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b0b8      	sub	sp, #224	@ 0xe0
 80021dc:	af02      	add	r7, sp, #8
	GNRMC latestgnrmc;
	gps_get_GNRMC(&latestgnrmc);
 80021de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fbce 	bl	8001984 <gps_get_GNRMC>
	if(latestgnrmc.status!='A')
 80021e8:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80021ec:	2b41      	cmp	r3, #65	@ 0x41
 80021ee:	d003      	beq.n	80021f8 <test_gps_coords+0x20>
	{
		LCD_print_fix("NO GPS LOCK");
 80021f0:	4813      	ldr	r0, [pc, #76]	@ (8002240 <test_gps_coords+0x68>)
 80021f2:	f7ff ffb9 	bl	8002168 <LCD_print_fix>
 80021f6:	e01f      	b.n	8002238 <test_gps_coords+0x60>
		return;
	}
	BUZZER_put(1000);
 80021f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021fc:	f000 f93c 	bl	8002478 <BUZZER_put>
	double x, y;
	x = lonDMtoM(&latestgnrmc);
 8002200:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f86d 	bl	80022e4 <lonDMtoM>
 800220a:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
	y = latDMtoM(&latestgnrmc);
 800220e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f8d6 	bl	80023c4 <latDMtoM>
 8002218:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
	char msg[128];
	sprintf(msg, "X: %f\nY: %f\n", x, y);
 800221c:	4638      	mov	r0, r7
 800221e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8002222:	e9cd 2300 	strd	r2, r3, [sp]
 8002226:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800222a:	4906      	ldr	r1, [pc, #24]	@ (8002244 <test_gps_coords+0x6c>)
 800222c:	f00f fff6 	bl	801221c <siprintf>
	LCD_print_fix(msg);
 8002230:	463b      	mov	r3, r7
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff98 	bl	8002168 <LCD_print_fix>

}
 8002238:	37d8      	adds	r7, #216	@ 0xd8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	080156a4 	.word	0x080156a4
 8002244:	080156b0 	.word	0x080156b0

08002248 <Student_task1>:

void Student_task1 (void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b098      	sub	sp, #96	@ 0x60
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	student_SemaphoreWaypoints = xSemaphoreCreateBinary();
 8002250:	2203      	movs	r2, #3
 8002252:	2100      	movs	r1, #0
 8002254:	2001      	movs	r0, #1
 8002256:	f00a fbd8 	bl	800ca0a <xQueueGenericCreate>
 800225a:	4603      	mov	r3, r0
 800225c:	4a1b      	ldr	r2, [pc, #108]	@ (80022cc <Student_task1+0x84>)
 800225e:	6013      	str	r3, [r2, #0]
	waypointsReset();
 8002260:	f7ff ff58 	bl	8002114 <waypointsReset>
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002264:	481a      	ldr	r0, [pc, #104]	@ (80022d0 <Student_task1+0x88>)
 8002266:	f000 fc61 	bl	8002b2c <UART_puts>
 800226a:	481a      	ldr	r0, [pc, #104]	@ (80022d4 <Student_task1+0x8c>)
 800226c:	f000 fc5e 	bl	8002b2c <UART_puts>
	globalVec.x=0;
 8002270:	4919      	ldr	r1, [pc, #100]	@ (80022d8 <Student_task1+0x90>)
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9c1 2300 	strd	r2, r3, [r1]
	globalVec.y=0;
 800227e:	4916      	ldr	r1, [pc, #88]	@ (80022d8 <Student_task1+0x90>)
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c1 2302 	strd	r2, r3, [r1, #8]
	char buf[80];
	unsigned int i = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint8_t testvar=0;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	while(TRUE)
	{
       	osDelay(1000);
 8002296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800229a:	f009 fedf 	bl	800c05c <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <Student_task1+0x94>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <Student_task1+0x7e>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 80022aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022b0:	f107 0008 	add.w	r0, r7, #8
 80022b4:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <Student_task1+0x88>)
 80022b6:	490a      	ldr	r1, [pc, #40]	@ (80022e0 <Student_task1+0x98>)
 80022b8:	f00f ffb0 	bl	801221c <siprintf>
			UART_puts(buf);
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fc33 	bl	8002b2c <UART_puts>
    	}
		test_gps_coords();
 80022c6:	f7ff ff87 	bl	80021d8 <test_gps_coords>
       	osDelay(1000);
 80022ca:	e7e4      	b.n	8002296 <Student_task1+0x4e>
 80022cc:	200005f8 	.word	0x200005f8
 80022d0:	0801578c 	.word	0x0801578c
 80022d4:	080156c0 	.word	0x080156c0
 80022d8:	200005e8 	.word	0x200005e8
 80022dc:	20000444 	.word	0x20000444
 80022e0:	080156cc 	.word	0x080156cc

080022e4 <lonDMtoM>:

	}
}

double lonDMtoM(GNRMC *gnrmc)
{
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	char *lon=gnrmc->longitude;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	331d      	adds	r3, #29
 80022f0:	617b      	str	r3, [r7, #20]
	char lonEW=gnrmc->EW_ind;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80022f8:	74fb      	strb	r3, [r7, #19]
	double minX=0;
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char* pEnd;
    minX=(*lon-'0')*6000;          //10^2*60
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3b30      	subs	r3, #48	@ 0x30
 800230c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f905 	bl	8000524 <__aeabi_i2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+1)-'0')*600;      //10^1*60
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3b30      	subs	r3, #48	@ 0x30
 800232a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f8f6 	bl	8000524 <__aeabi_i2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002340:	f7fd ffa4 	bl	800028c <__adddf3>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+2)-'0')*60;       //10^0*60
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3302      	adds	r3, #2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f8e0 	bl	8000524 <__aeabi_i2d>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800236c:	f7fd ff8e 	bl	800028c <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=strtod(lon+3,&pEnd);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3303      	adds	r3, #3
 800237c:	f107 020c 	add.w	r2, r7, #12
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f00f f9a0 	bl	80116c8 <strtod>
 8002388:	ec53 2b10 	vmov	r2, r3, d0
 800238c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002390:	f7fd ff7c 	bl	800028c <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(lonEW=='W')
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b57      	cmp	r3, #87	@ 0x57
 80023a0:	d105      	bne.n	80023ae <lonDMtoM+0xca>
    	minX=minX*-1;
 80023a2:	69bc      	ldr	r4, [r7, #24]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80023aa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minX;
 80023ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80023b6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ba:	eef0 0a67 	vmov.f32	s1, s15
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bdb0      	pop	{r4, r5, r7, pc}

080023c4 <latDMtoM>:

double latDMtoM(GNRMC *gnrmc)
{
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	char *lat=gnrmc->latitude;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3312      	adds	r3, #18
 80023d0:	617b      	str	r3, [r7, #20]
	char latNS=gnrmc->NS_ind;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7f1b      	ldrb	r3, [r3, #28]
 80023d6:	74fb      	strb	r3, [r7, #19]
	double minY=0;
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	char* pEnd;
    minY=(*lat-'0')*600;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3b30      	subs	r3, #48	@ 0x30
 80023ea:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f896 	bl	8000524 <__aeabi_i2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=(*(lat+1)-'0')*60;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f886 	bl	8000524 <__aeabi_i2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002420:	f7fd ff34 	bl	800028c <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=strtod(lat+2,&pEnd);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3302      	adds	r3, #2
 8002430:	f107 020c 	add.w	r2, r7, #12
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f00f f946 	bl	80116c8 <strtod>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002444:	f7fd ff22 	bl	800028c <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(latNS=='S')
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b53      	cmp	r3, #83	@ 0x53
 8002454:	d105      	bne.n	8002462 <latDMtoM+0x9e>
    	minY=minY*-1;
 8002456:	69bc      	ldr	r4, [r7, #24]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800245e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minY;
 8002462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002466:	ec43 2b17 	vmov	d7, r2, r3
}
 800246a:	eeb0 0a47 	vmov.f32	s0, s14
 800246e:	eef0 0a67 	vmov.f32	s1, s15
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}

08002478 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002484:	e023      	b.n	80024ce <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800248c:	4815      	ldr	r0, [pc, #84]	@ (80024e4 <BUZZER_put+0x6c>)
 800248e:	f001 fe6b 	bl	8004168 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e002      	b.n	800249e <BUZZER_put+0x26>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3301      	adds	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	441a      	add	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d8f6      	bhi.n	8002498 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024b0:	480c      	ldr	r0, [pc, #48]	@ (80024e4 <BUZZER_put+0x6c>)
 80024b2:	f001 fe59 	bl	8004168 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e002      	b.n	80024c2 <BUZZER_put+0x4a>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	441a      	add	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d8f6      	bhi.n	80024bc <BUZZER_put+0x44>
	while (k++<100)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	60ba      	str	r2, [r7, #8]
 80024d4:	2b63      	cmp	r3, #99	@ 0x63
 80024d6:	d9d6      	bls.n	8002486 <BUZZER_put+0xe>
	}
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40020800 	.word	0x40020800

080024e8 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <KEYS_init+0x6c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <KEYS_init+0x6c>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <KEYS_init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 8002516:	f640 030e 	movw	r3, #2062	@ 0x80e
 800251a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4619      	mov	r1, r3
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <KEYS_init+0x70>)
 8002522:	f001 fc6d 	bl	8003e00 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 8002526:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800252a:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002530:	2302      	movs	r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4807      	ldr	r0, [pc, #28]	@ (8002558 <KEYS_init+0x70>)
 800253a:	f001 fc61 	bl	8003e00 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002544:	4804      	ldr	r0, [pc, #16]	@ (8002558 <KEYS_init+0x70>)
 8002546:	f001 fe0f 	bl	8004168 <HAL_GPIO_WritePin>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40020c00 	.word	0x40020c00

0800255c <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800256e:	480e      	ldr	r0, [pc, #56]	@ (80025a8 <KEYS_initISR+0x4c>)
 8002570:	f001 fdfa 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	2102      	movs	r1, #2
 800257c:	480a      	ldr	r0, [pc, #40]	@ (80025a8 <KEYS_initISR+0x4c>)
 800257e:	f001 fdf3 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	2108      	movs	r1, #8
 800258a:	4807      	ldr	r0, [pc, #28]	@ (80025a8 <KEYS_initISR+0x4c>)
 800258c:	f001 fdec 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	2104      	movs	r1, #4
 8002598:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <KEYS_initISR+0x4c>)
 800259a:	f001 fde5 	bl	8004168 <HAL_GPIO_WritePin>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020c00 	.word	0x40020c00

080025ac <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025c0:	4827      	ldr	r0, [pc, #156]	@ (8002660 <KEYS_read+0xb4>)
 80025c2:	f001 fdd1 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2108      	movs	r1, #8
 80025ca:	4825      	ldr	r0, [pc, #148]	@ (8002660 <KEYS_read+0xb4>)
 80025cc:	f001 fdcc 	bl	8004168 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80025d0:	f000 f848 	bl	8002664 <KEYS_kolom>
 80025d4:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <KEYS_read+0x36>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2108      	movs	r1, #8
 80025e6:	481e      	ldr	r0, [pc, #120]	@ (8002660 <KEYS_read+0xb4>)
 80025e8:	f001 fdbe 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2104      	movs	r1, #4
 80025f0:	481b      	ldr	r0, [pc, #108]	@ (8002660 <KEYS_read+0xb4>)
 80025f2:	f001 fdb9 	bl	8004168 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80025f6:	f000 f835 	bl	8002664 <KEYS_kolom>
 80025fa:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <KEYS_read+0x5c>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3308      	adds	r3, #8
 8002606:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2104      	movs	r1, #4
 800260c:	4814      	ldr	r0, [pc, #80]	@ (8002660 <KEYS_read+0xb4>)
 800260e:	f001 fdab 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8002612:	2201      	movs	r2, #1
 8002614:	2102      	movs	r1, #2
 8002616:	4812      	ldr	r0, [pc, #72]	@ (8002660 <KEYS_read+0xb4>)
 8002618:	f001 fda6 	bl	8004168 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800261c:	f000 f822 	bl	8002664 <KEYS_kolom>
 8002620:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <KEYS_read+0x82>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3304      	adds	r3, #4
 800262c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2102      	movs	r1, #2
 8002632:	480b      	ldr	r0, [pc, #44]	@ (8002660 <KEYS_read+0xb4>)
 8002634:	f001 fd98 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800263e:	4808      	ldr	r0, [pc, #32]	@ (8002660 <KEYS_read+0xb4>)
 8002640:	f001 fd92 	bl	8004168 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002644:	f000 f80e 	bl	8002664 <KEYS_kolom>
 8002648:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <KEYS_read+0xa8>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	607b      	str	r3, [r7, #4]

	return out;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40020c00 	.word	0x40020c00

08002664 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	4814      	ldr	r0, [pc, #80]	@ (80026c4 <KEYS_kolom+0x60>)
 8002672:	f001 fd61 	bl	8004138 <HAL_GPIO_ReadPin>
 8002676:	4603      	mov	r3, r0
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <KEYS_kolom+0x1c>
 800267c:	2301      	movs	r3, #1
 800267e:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002680:	2180      	movs	r1, #128	@ 0x80
 8002682:	4810      	ldr	r0, [pc, #64]	@ (80026c4 <KEYS_kolom+0x60>)
 8002684:	f001 fd58 	bl	8004138 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <KEYS_kolom+0x2e>
 800268e:	2302      	movs	r3, #2
 8002690:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002696:	480b      	ldr	r0, [pc, #44]	@ (80026c4 <KEYS_kolom+0x60>)
 8002698:	f001 fd4e 	bl	8004138 <HAL_GPIO_ReadPin>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <KEYS_kolom+0x42>
 80026a2:	2303      	movs	r3, #3
 80026a4:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 80026a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <KEYS_kolom+0x60>)
 80026ac:	f001 fd44 	bl	8004138 <HAL_GPIO_ReadPin>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <KEYS_kolom+0x56>
 80026b6:	2304      	movs	r3, #4
 80026b8:	607b      	str	r3, [r7, #4]
	return key;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40020c00 	.word	0x40020c00

080026c8 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2108      	movs	r1, #8
 80026d0:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <ClearBits+0x30>)
 80026d2:	f001 fd49 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2110      	movs	r1, #16
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <ClearBits+0x30>)
 80026dc:	f001 fd44 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2120      	movs	r1, #32
 80026e4:	4804      	ldr	r0, [pc, #16]	@ (80026f8 <ClearBits+0x30>)
 80026e6:	f001 fd3f 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2140      	movs	r1, #64	@ 0x40
 80026ee:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <ClearBits+0x30>)
 80026f0:	f001 fd3a 	bl	8004168 <HAL_GPIO_WritePin>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8002700:	2001      	movs	r0, #1
 8002702:	f000 f995 	bl	8002a30 <LCD_writecontrol>
   curpos=0;               // reset position
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <LCD_clear+0x1c>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 800270c:	2005      	movs	r0, #5
 800270e:	f001 f9df 	bl	8003ad0 <HAL_Delay>
//   busyflag();

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200005fc 	.word	0x200005fc

0800271c <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d013      	beq.n	8002754 <LCD_XY+0x38>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d815      	bhi.n	800275e <LCD_XY+0x42>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <LCD_XY+0x24>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d005      	beq.n	800274a <LCD_XY+0x2e>
 800273e:	e00e      	b.n	800275e <LCD_XY+0x42>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3b80      	subs	r3, #128	@ 0x80
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e00e      	b.n	8002768 <LCD_XY+0x4c>
	case 1:  data = (1<<7)+0x40+x; break;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3b40      	subs	r3, #64	@ 0x40
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e009      	b.n	8002768 <LCD_XY+0x4c>
	case 2:  data = (1<<7)+0x14+x; break;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3b6c      	subs	r3, #108	@ 0x6c
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e004      	b.n	8002768 <LCD_XY+0x4c>
	default: data = (1<<7)+0x54+x; break;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b2c      	subs	r3, #44	@ 0x2c
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	bf00      	nop
	}
	LCD_writecontrol(data);
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f960 	bl	8002a30 <LCD_writecontrol>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b44      	ldr	r3, [pc, #272]	@ (8002894 <LCD_init+0x11c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a43      	ldr	r2, [pc, #268]	@ (8002894 <LCD_init+0x11c>)
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <LCD_init+0x11c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <LCD_init+0x11c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002894 <LCD_init+0x11c>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002894 <LCD_init+0x11c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <LCD_init+0x11c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a35      	ldr	r2, [pc, #212]	@ (8002894 <LCD_init+0x11c>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <LCD_init+0x11c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80027de:	2378      	movs	r3, #120	@ 0x78
 80027e0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	482b      	ldr	r0, [pc, #172]	@ (8002898 <LCD_init+0x120>)
 80027ea:	f001 fb09 	bl	8003e00 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 80027ee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80027f2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	4828      	ldr	r0, [pc, #160]	@ (800289c <LCD_init+0x124>)
 80027fc:	f001 fb00 	bl	8003e00 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8002800:	2301      	movs	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4619      	mov	r1, r3
 800280a:	4825      	ldr	r0, [pc, #148]	@ (80028a0 <LCD_init+0x128>)
 800280c:	f001 faf8 	bl	8003e00 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002816:	4821      	ldr	r0, [pc, #132]	@ (800289c <LCD_init+0x124>)
 8002818:	f001 fca6 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	2101      	movs	r1, #1
 8002820:	481f      	ldr	r0, [pc, #124]	@ (80028a0 <LCD_init+0x128>)
 8002822:	f001 fca1 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800282c:	481b      	ldr	r0, [pc, #108]	@ (800289c <LCD_init+0x124>)
 800282e:	f001 fc9b 	bl	8004168 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8002832:	200f      	movs	r0, #15
 8002834:	f001 f94c 	bl	8003ad0 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8002838:	2030      	movs	r0, #48	@ 0x30
 800283a:	f000 f8c7 	bl	80029cc <LCD_writebyte>
    HAL_Delay(70);
 800283e:	2046      	movs	r0, #70	@ 0x46
 8002840:	f001 f946 	bl	8003ad0 <HAL_Delay>
    LCD_writebyte(0x30);
 8002844:	2030      	movs	r0, #48	@ 0x30
 8002846:	f000 f8c1 	bl	80029cc <LCD_writebyte>
    LCD_writebyte(0x30);
 800284a:	2030      	movs	r0, #48	@ 0x30
 800284c:	f000 f8be 	bl	80029cc <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8002850:	2002      	movs	r0, #2
 8002852:	f000 f8bb 	bl	80029cc <LCD_writebyte>
    HAL_Delay(5);
 8002856:	2005      	movs	r0, #5
 8002858:	f001 f93a 	bl	8003ad0 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 800285c:	202c      	movs	r0, #44	@ 0x2c
 800285e:	f000 f8b5 	bl	80029cc <LCD_writebyte>
    HAL_Delay(15);
 8002862:	200f      	movs	r0, #15
 8002864:	f001 f934 	bl	8003ad0 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002868:	200c      	movs	r0, #12
 800286a:	f000 f8af 	bl	80029cc <LCD_writebyte>
    HAL_Delay(15);
 800286e:	200f      	movs	r0, #15
 8002870:	f001 f92e 	bl	8003ad0 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002874:	2001      	movs	r0, #1
 8002876:	f000 f8a9 	bl	80029cc <LCD_writebyte>
    HAL_Delay(15);
 800287a:	200f      	movs	r0, #15
 800287c:	f001 f928 	bl	8003ad0 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8002880:	2006      	movs	r0, #6
 8002882:	f000 f8a3 	bl	80029cc <LCD_writebyte>
    HAL_Delay(15);
 8002886:	200f      	movs	r0, #15
 8002888:	f001 f922 	bl	8003ad0 <HAL_Delay>
}
 800288c:	bf00      	nop
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	40021000 	.word	0x40021000
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00

080028a4 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b4:	480b      	ldr	r0, [pc, #44]	@ (80028e4 <LCD_putchar+0x40>)
 80028b6:	f001 fc57 	bl	8004168 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f885 	bl	80029cc <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <LCD_putchar+0x44>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <LCD_putchar+0x44>)
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <LCD_putchar+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d102      	bne.n	80028dc <LCD_putchar+0x38>
    	curpos=0;
 80028d6:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <LCD_putchar+0x44>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40020800 	.word	0x40020800
 80028e8:	200005fc 	.word	0x200005fc

080028ec <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	73bb      	strb	r3, [r7, #14]
 80028f8:	e019      	b.n	800292e <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <LCD_put+0x58>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d10b      	bne.n	800291a <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e005      	b.n	8002914 <LCD_put+0x28>
 8002908:	2014      	movs	r0, #20
 800290a:	f000 f891 	bl	8002a30 <LCD_writecontrol>
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b1f      	cmp	r3, #31
 8002918:	d9f6      	bls.n	8002908 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ffbe 	bl	80028a4 <LCD_putchar>
    for (k=0; string[k]; k++)
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	3301      	adds	r3, #1
 800292c:	73bb      	strb	r3, [r7, #14]
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1df      	bne.n	80028fa <LCD_put+0xe>
    }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200005fc 	.word	0x200005fc

08002948 <LCD_puts>:

void LCD_puts(char *c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ffcb 	bl	80028ec <LCD_put>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 800296a:	f7ff fead 	bl	80026c8 <ClearBits>

    if (data & 0x01)
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	2140      	movs	r1, #64	@ 0x40
 800297c:	4812      	ldr	r0, [pc, #72]	@ (80029c8 <LCD_writenibble+0x68>)
 800297e:	f001 fbf3 	bl	8004168 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2120      	movs	r1, #32
 8002990:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <LCD_writenibble+0x68>)
 8002992:	f001 fbe9 	bl	8004168 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 80029a0:	2201      	movs	r2, #1
 80029a2:	2110      	movs	r1, #16
 80029a4:	4808      	ldr	r0, [pc, #32]	@ (80029c8 <LCD_writenibble+0x68>)
 80029a6:	f001 fbdf 	bl	8004168 <HAL_GPIO_WritePin>

	if (data & 0x08)
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 80029b4:	2201      	movs	r2, #1
 80029b6:	2108      	movs	r1, #8
 80029b8:	4803      	ldr	r0, [pc, #12]	@ (80029c8 <LCD_writenibble+0x68>)
 80029ba:	f001 fbd5 	bl	8004168 <HAL_GPIO_WritePin>

}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2101      	movs	r1, #1
 80029da:	4814      	ldr	r0, [pc, #80]	@ (8002a2c <LCD_writebyte+0x60>)
 80029dc:	f001 fbc4 	bl	8004168 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ffba 	bl	8002960 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	480e      	ldr	r0, [pc, #56]	@ (8002a2c <LCD_writebyte+0x60>)
 80029f2:	f001 fbb9 	bl	8004168 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 80029f6:	2002      	movs	r0, #2
 80029f8:	f001 f86a 	bl	8003ad0 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 80029fc:	2201      	movs	r2, #1
 80029fe:	2101      	movs	r1, #1
 8002a00:	480a      	ldr	r0, [pc, #40]	@ (8002a2c <LCD_writebyte+0x60>)
 8002a02:	f001 fbb1 	bl	8004168 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ffa6 	bl	8002960 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2101      	movs	r1, #1
 8002a18:	4804      	ldr	r0, [pc, #16]	@ (8002a2c <LCD_writebyte+0x60>)
 8002a1a:	f001 fba5 	bl	8004168 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f001 f856 	bl	8003ad0 <HAL_Delay>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40020c00 	.word	0x40020c00

08002a30 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a40:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <LCD_writecontrol+0x28>)
 8002a42:	f001 fb91 	bl	8004168 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffbf 	bl	80029cc <LCD_writebyte>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40020800 	.word	0x40020800

08002a5c <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a66:	4809      	ldr	r0, [pc, #36]	@ (8002a8c <LED_init+0x30>)
 8002a68:	f001 fb7e 	bl	8004168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a72:	4807      	ldr	r0, [pc, #28]	@ (8002a90 <LED_init+0x34>)
 8002a74:	f001 fb78 	bl	8004168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4804      	ldr	r0, [pc, #16]	@ (8002a90 <LED_init+0x34>)
 8002a7e:	f001 fb73 	bl	8004168 <HAL_GPIO_WritePin>
    LED_put(0);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f806 	bl	8002a94 <LED_put>
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400

08002a94 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e01c      	b.n	8002ade <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aba:	4811      	ldr	r0, [pc, #68]	@ (8002b00 <LED_put+0x6c>)
 8002abc:	f001 fb54 	bl	8004168 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ac6:	480f      	ldr	r0, [pc, #60]	@ (8002b04 <LED_put+0x70>)
 8002ac8:	f001 fb4e 	bl	8004168 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ad2:	480c      	ldr	r0, [pc, #48]	@ (8002b04 <LED_put+0x70>)
 8002ad4:	f001 fb48 	bl	8004168 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1df      	bne.n	8002aa4 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4806      	ldr	r0, [pc, #24]	@ (8002b04 <LED_put+0x70>)
 8002aea:	f001 fb3d 	bl	8004168 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2102      	movs	r1, #2
 8002af2:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <LED_put+0x70>)
 8002af4:	f001 fb38 	bl	8004168 <HAL_GPIO_WritePin>
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400

08002b08 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002b12:	1df9      	adds	r1, r7, #7
 8002b14:	2364      	movs	r3, #100	@ 0x64
 8002b16:	2201      	movs	r2, #1
 8002b18:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <UART_putchar+0x20>)
 8002b1a:	f004 fef8 	bl	800790e <HAL_UART_Transmit>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000738 	.word	0x20000738

08002b2c <UART_puts>:

void UART_puts(const char *s)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e009      	b.n	8002b4e <UART_puts+0x22>
		UART_putchar(s[i]);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ffe0 	bl	8002b08 <UART_putchar>
	for (i=0; s[i]; i++)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ef      	bne.n	8002b3a <UART_puts+0xe>
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002b6c:	210a      	movs	r1, #10
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f804 	bl	8002b7c <UART_putnum>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002b88:	230f      	movs	r3, #15
 8002b8a:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d129      	bne.n	8002be6 <UART_putnum+0x6a>
    {
        c[i]='0';
 8002b92:	f107 0208 	add.w	r2, r7, #8
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	2230      	movs	r2, #48	@ 0x30
 8002b9c:	701a      	strb	r2, [r3, #0]
        i--;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e030      	b.n	8002c08 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bae:	fb01 f202 	mul.w	r2, r1, r2
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002bc0:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <UART_putnum+0x9c>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b259      	sxtb	r1, r3
 8002bca:	f107 0208 	add.w	r2, r7, #8
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	460a      	mov	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
            i--;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <UART_putnum+0x6a>
                num=0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1dc      	bne.n	8002ba6 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002bec:	e00c      	b.n	8002c08 <UART_putnum+0x8c>
    {
        i++;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002bf4:	f107 0208 	add.w	r2, r7, #8
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff80 	bl	8002b08 <UART_putchar>
    while(i<15)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0e      	cmp	r3, #14
 8002c0c:	ddef      	ble.n	8002bee <UART_putnum+0x72>
    }
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000021c 	.word	0x2000021c

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c20:	f000 ff14 	bl	8003a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c24:	f000 f830 	bl	8002c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c28:	f000 f980 	bl	8002f2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c2c:	f000 f896 	bl	8002d5c <MX_I2C1_Init>
  MX_I2S3_Init();
 8002c30:	f000 f8c2 	bl	8002db8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002c34:	f000 f8f0 	bl	8002e18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c38:	f000 f94e 	bl	8002ed8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002c3c:	f000 f922 	bl	8002e84 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002c40:	f7ff fd9a 	bl	8002778 <LCD_init>
  KEYS_init();
 8002c44:	f7ff fc50 	bl	80024e8 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7ff fc87 	bl	800255c <KEYS_initISR>
  LED_init();
 8002c4e:	f7ff ff05 	bl	8002a5c <LED_init>

  DisplayVersion();
 8002c52:	f7fe fc51 	bl	80014f8 <DisplayVersion>
  osDelay(500); // time to read version
 8002c56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c5a:	f009 f9ff 	bl	800c05c <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c5e:	f009 f8e3 	bl	800be28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c62:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <main+0x60>)
 8002c64:	2100      	movs	r1, #0
 8002c66:	4806      	ldr	r0, [pc, #24]	@ (8002c80 <main+0x64>)
 8002c68:	f009 f966 	bl	800bf38 <osThreadNew>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <main+0x68>)
 8002c70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c72:	f009 f925 	bl	800bec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c76:	bf00      	nop
 8002c78:	e7fd      	b.n	8002c76 <main+0x5a>
 8002c7a:	bf00      	nop
 8002c7c:	0801579c 	.word	0x0801579c
 8002c80:	08003255 	.word	0x08003255
 8002c84:	2000077c 	.word	0x2000077c

08002c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b094      	sub	sp, #80	@ 0x50
 8002c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8e:	f107 0320 	add.w	r3, r7, #32
 8002c92:	2230      	movs	r2, #48	@ 0x30
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f00f fb23 	bl	80122e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	f107 030c 	add.w	r3, r7, #12
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <SystemClock_Config+0xcc>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	4a27      	ldr	r2, [pc, #156]	@ (8002d54 <SystemClock_Config+0xcc>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <SystemClock_Config+0xcc>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <SystemClock_Config+0xd0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <SystemClock_Config+0xd0>)
 8002cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <SystemClock_Config+0xd0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cf2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cfc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d02:	2302      	movs	r3, #2
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d06:	2307      	movs	r3, #7
 8002d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d0a:	f107 0320 	add.w	r3, r7, #32
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fc70 	bl	80065f4 <HAL_RCC_OscConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d1a:	f000 fadf 	bl	80032dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1e:	230f      	movs	r3, #15
 8002d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d22:	2302      	movs	r3, #2
 8002d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	2105      	movs	r1, #5
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fed1 	bl	8006ae4 <HAL_RCC_ClockConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002d48:	f000 fac8 	bl	80032dc <Error_Handler>
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3750      	adds	r7, #80	@ 0x50
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000

08002d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d60:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d62:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <MX_I2C1_Init+0x54>)
 8002d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d66:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d68:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <MX_I2C1_Init+0x58>)
 8002d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d8c:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d98:	4804      	ldr	r0, [pc, #16]	@ (8002dac <MX_I2C1_Init+0x50>)
 8002d9a:	f002 fe47 	bl	8005a2c <HAL_I2C_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002da4:	f000 fa9a 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000600 	.word	0x20000600
 8002db0:	40005400 	.word	0x40005400
 8002db4:	000186a0 	.word	0x000186a0

08002db8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dbe:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <MX_I2S3_Init+0x58>)
 8002dc0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ddc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002de0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <MX_I2S3_Init+0x5c>)
 8002de2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002df6:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <MX_I2S3_Init+0x54>)
 8002df8:	f002 ff5c 	bl	8005cb4 <HAL_I2S_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002e02:	f000 fa6b 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000654 	.word	0x20000654
 8002e10:	40003c00 	.word	0x40003c00
 8002e14:	00017700 	.word	0x00017700

08002e18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e1e:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <MX_SPI1_Init+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e22:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e64:	220a      	movs	r2, #10
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e68:	4804      	ldr	r0, [pc, #16]	@ (8002e7c <MX_SPI1_Init+0x64>)
 8002e6a:	f004 f9cd 	bl	8007208 <HAL_SPI_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e74:	f000 fa32 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	2000069c 	.word	0x2000069c
 8002e80:	40013000 	.word	0x40013000

08002e84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e88:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <MX_UART4_Init+0x50>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002e90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002eba:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <MX_UART4_Init+0x4c>)
 8002ebc:	f004 fcda 	bl	8007874 <HAL_UART_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002ec6:	f000 fa09 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200006f4 	.word	0x200006f4
 8002ed4:	40004c00 	.word	0x40004c00

08002ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <MX_USART2_UART_Init+0x50>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <MX_USART2_UART_Init+0x4c>)
 8002f10:	f004 fcb0 	bl	8007874 <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f1a:	f000 f9df 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000738 	.word	0x20000738
 8002f28:	40004400 	.word	0x40004400

08002f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	4b8e      	ldr	r3, [pc, #568]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a8d      	ldr	r2, [pc, #564]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b8b      	ldr	r3, [pc, #556]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	4b87      	ldr	r3, [pc, #540]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	4a86      	ldr	r2, [pc, #536]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6e:	4b84      	ldr	r3, [pc, #528]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b80      	ldr	r3, [pc, #512]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	4a7f      	ldr	r2, [pc, #508]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b79      	ldr	r3, [pc, #484]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	4a78      	ldr	r2, [pc, #480]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa6:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b72      	ldr	r3, [pc, #456]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a71      	ldr	r2, [pc, #452]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	4a6a      	ldr	r2, [pc, #424]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fd8:	f043 0308 	orr.w	r3, r3, #8
 8002fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fde:	4b68      	ldr	r3, [pc, #416]	@ (8003180 <MX_GPIO_Init+0x254>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2108      	movs	r1, #8
 8002fee:	4865      	ldr	r0, [pc, #404]	@ (8003184 <MX_GPIO_Init+0x258>)
 8002ff0:	f001 f8ba 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4863      	ldr	r0, [pc, #396]	@ (8003188 <MX_GPIO_Init+0x25c>)
 8002ffa:	f001 f8b5 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003004:	4861      	ldr	r0, [pc, #388]	@ (800318c <MX_GPIO_Init+0x260>)
 8003006:	f001 f8af 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800300a:	2200      	movs	r2, #0
 800300c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003010:	485f      	ldr	r0, [pc, #380]	@ (8003190 <MX_GPIO_Init+0x264>)
 8003012:	f001 f8a9 	bl	8004168 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8003016:	2200      	movs	r2, #0
 8003018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800301c:	485a      	ldr	r0, [pc, #360]	@ (8003188 <MX_GPIO_Init+0x25c>)
 800301e:	f001 f8a3 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003028:	485a      	ldr	r0, [pc, #360]	@ (8003194 <MX_GPIO_Init+0x268>)
 800302a:	f001 f89d 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800302e:	2308      	movs	r3, #8
 8003030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003032:	2301      	movs	r3, #1
 8003034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	484f      	ldr	r0, [pc, #316]	@ (8003184 <MX_GPIO_Init+0x258>)
 8003046:	f000 fedb 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 800304a:	f240 1301 	movw	r3, #257	@ 0x101
 800304e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003050:	2301      	movs	r3, #1
 8003052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4619      	mov	r1, r3
 8003062:	4849      	ldr	r0, [pc, #292]	@ (8003188 <MX_GPIO_Init+0x25c>)
 8003064:	f000 fecc 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003068:	2308      	movs	r3, #8
 800306a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003078:	2305      	movs	r3, #5
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4841      	ldr	r0, [pc, #260]	@ (8003188 <MX_GPIO_Init+0x25c>)
 8003084:	f000 febc 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003088:	2301      	movs	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800308c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	483b      	ldr	r0, [pc, #236]	@ (800318c <MX_GPIO_Init+0x260>)
 800309e:	f000 feaf 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 80030a2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a8:	2301      	movs	r3, #1
 80030aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4619      	mov	r1, r3
 80030ba:	4834      	ldr	r0, [pc, #208]	@ (800318c <MX_GPIO_Init+0x260>)
 80030bc:	f000 fea0 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80030c0:	2304      	movs	r3, #4
 80030c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4619      	mov	r1, r3
 80030d2:	482e      	ldr	r0, [pc, #184]	@ (800318c <MX_GPIO_Init+0x260>)
 80030d4:	f000 fe94 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80030d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ea:	2305      	movs	r3, #5
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	4825      	ldr	r0, [pc, #148]	@ (800318c <MX_GPIO_Init+0x260>)
 80030f6:	f000 fe83 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80030fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003100:	2301      	movs	r3, #1
 8003102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4619      	mov	r1, r3
 8003112:	481f      	ldr	r0, [pc, #124]	@ (8003190 <MX_GPIO_Init+0x264>)
 8003114:	f000 fe74 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8003118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800311c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311e:	2301      	movs	r3, #1
 8003120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	4619      	mov	r1, r3
 8003130:	4818      	ldr	r0, [pc, #96]	@ (8003194 <MX_GPIO_Init+0x268>)
 8003132:	f000 fe65 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003136:	2320      	movs	r3, #32
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4811      	ldr	r0, [pc, #68]	@ (8003190 <MX_GPIO_Init+0x264>)
 800314a:	f000 fe59 	bl	8003e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800314e:	2302      	movs	r3, #2
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003152:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	4619      	mov	r1, r3
 8003162:	4808      	ldr	r0, [pc, #32]	@ (8003184 <MX_GPIO_Init+0x258>)
 8003164:	f000 fe4c 	bl	8003e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2105      	movs	r1, #5
 800316c:	2006      	movs	r0, #6
 800316e:	f000 fd8b 	bl	8003c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003172:	2006      	movs	r0, #6
 8003174:	f000 fda4 	bl	8003cc0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003178:	bf00      	nop
 800317a:	3730      	adds	r7, #48	@ 0x30
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	40021000 	.word	0x40021000
 8003188:	40020800 	.word	0x40020800
 800318c:	40020400 	.word	0x40020400
 8003190:	40020c00 	.word	0x40020c00
 8003194:	40020000 	.word	0x40020000

08003198 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a23      	ldr	r2, [pc, #140]	@ (8003238 <HAL_UART_RxCpltCallback+0xa0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d11d      	bne.n	80031ea <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 80031ae:	f107 030e 	add.w	r3, r7, #14
 80031b2:	2201      	movs	r2, #1
 80031b4:	4619      	mov	r1, r3
 80031b6:	4821      	ldr	r0, [pc, #132]	@ (800323c <HAL_UART_RxCpltCallback+0xa4>)
 80031b8:	f004 fc3b 	bl	8007a32 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_UART_RxCpltCallback+0xa8>)
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	f107 0208 	add.w	r2, r7, #8
 80031c4:	f107 010e 	add.w	r1, r7, #14
 80031c8:	2300      	movs	r3, #0
 80031ca:	f009 fdb1 	bl	800cd30 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_UART_RxCpltCallback+0x52>
 80031da:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_UART_RxCpltCallback+0xac>)
 80031dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a16      	ldr	r2, [pc, #88]	@ (8003248 <HAL_UART_RxCpltCallback+0xb0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d11d      	bne.n	8003230 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80031f4:	f107 030f 	add.w	r3, r7, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	4619      	mov	r1, r3
 80031fc:	4813      	ldr	r0, [pc, #76]	@ (800324c <HAL_UART_RxCpltCallback+0xb4>)
 80031fe:	f004 fc18 	bl	8007a32 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_UART_RxCpltCallback+0xb8>)
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	f107 0208 	add.w	r2, r7, #8
 800320a:	f107 010f 	add.w	r1, r7, #15
 800320e:	2300      	movs	r3, #0
 8003210:	f009 fd8e 	bl	800cd30 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_UART_RxCpltCallback+0x98>
 8003220:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <HAL_UART_RxCpltCallback+0xac>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
	}

}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40004400 	.word	0x40004400
 800323c:	20000738 	.word	0x20000738
 8003240:	20000448 	.word	0x20000448
 8003244:	e000ed04 	.word	0xe000ed04
 8003248:	40004c00 	.word	0x40004c00
 800324c:	200006f4 	.word	0x200006f4
 8003250:	2000044c 	.word	0x2000044c

08003254 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800325c:	f00d f86c 	bl	8010338 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8003260:	f7fe f9d0 	bl	8001604 <CreateHandles>
  CreateTasks();
 8003264:	f7fe fa5e 	bl	8001724 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8003268:	f107 030e 	add.w	r3, r7, #14
 800326c:	2201      	movs	r2, #1
 800326e:	4619      	mov	r1, r3
 8003270:	480d      	ldr	r0, [pc, #52]	@ (80032a8 <StartDefaultTask+0x54>)
 8003272:	f004 fbde 	bl	8007a32 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART1 interrupt engine GPS
 8003276:	f107 030f 	add.w	r3, r7, #15
 800327a:	2201      	movs	r2, #1
 800327c:	4619      	mov	r1, r3
 800327e:	480b      	ldr	r0, [pc, #44]	@ (80032ac <StartDefaultTask+0x58>)
 8003280:	f004 fbd7 	bl	8007a32 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte is nog een bug.
 8003284:	7bbb      	ldrb	r3, [r7, #14]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fc6c 	bl	8002b64 <UART_putint>
 800328c:	4808      	ldr	r0, [pc, #32]	@ (80032b0 <StartDefaultTask+0x5c>)
 800328e:	f7ff fc4d 	bl	8002b2c <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003292:	2001      	movs	r0, #1
 8003294:	f008 fee2 	bl	800c05c <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <StartDefaultTask+0x60>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f00a fb9d 	bl	800d9dc <vTaskDelete>
    osDelay(1);
 80032a2:	bf00      	nop
 80032a4:	e7f5      	b.n	8003292 <StartDefaultTask+0x3e>
 80032a6:	bf00      	nop
 80032a8:	20000738 	.word	0x20000738
 80032ac:	200006f4 	.word	0x200006f4
 80032b0:	080156e4 	.word	0x080156e4
 80032b4:	2000077c 	.word	0x2000077c

080032b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ca:	f000 fbe1 	bl	8003a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000

080032dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e0:	b672      	cpsid	i
}
 80032e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <Error_Handler+0x8>

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_MspInit+0x54>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_MspInit+0x54>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032fe:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <HAL_MspInit+0x54>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <HAL_MspInit+0x54>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <HAL_MspInit+0x54>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	@ 0x40
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <HAL_MspInit+0x54>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	210f      	movs	r1, #15
 800332a:	f06f 0001 	mvn.w	r0, #1
 800332e:	f000 fcab 	bl	8003c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800

08003340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <HAL_I2C_MspInit+0x84>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12c      	bne.n	80033bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	4b18      	ldr	r3, [pc, #96]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800337e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003384:	2312      	movs	r3, #18
 8003386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003388:	2301      	movs	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003390:	2304      	movs	r3, #4
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	480c      	ldr	r0, [pc, #48]	@ (80033cc <HAL_I2C_MspInit+0x8c>)
 800339c:	f000 fd30 	bl	8003e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 80033aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_I2C_MspInit+0x88>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3728      	adds	r7, #40	@ 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40005400 	.word	0x40005400
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40020400 	.word	0x40020400

080033d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	@ 0x38
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_I2S_MspInit+0xf0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d15a      	bne.n	80034b6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003404:	23c0      	movs	r3, #192	@ 0xc0
 8003406:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003408:	2302      	movs	r3, #2
 800340a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fdb9 	bl	8006f88 <HAL_RCCEx_PeriphCLKConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800341c:	f7ff ff5e 	bl	80032dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 800342a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6313      	str	r3, [r2, #48]	@ 0x30
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	4a18      	ldr	r2, [pc, #96]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6313      	str	r3, [r2, #48]	@ 0x30
 8003468:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <HAL_I2S_MspInit+0xf4>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003474:	2310      	movs	r3, #16
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003484:	2306      	movs	r3, #6
 8003486:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800348c:	4619      	mov	r1, r3
 800348e:	480e      	ldr	r0, [pc, #56]	@ (80034c8 <HAL_I2S_MspInit+0xf8>)
 8003490:	f000 fcb6 	bl	8003e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003494:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034a6:	2306      	movs	r3, #6
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ae:	4619      	mov	r1, r3
 80034b0:	4806      	ldr	r0, [pc, #24]	@ (80034cc <HAL_I2S_MspInit+0xfc>)
 80034b2:	f000 fca5 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80034b6:	bf00      	nop
 80034b8:	3738      	adds	r7, #56	@ 0x38
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40003c00 	.word	0x40003c00
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40020800 	.word	0x40020800

080034d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <HAL_SPI_MspInit+0x84>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12b      	bne.n	800354a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 80034fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003500:	6453      	str	r3, [r2, #68]	@ 0x44
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	@ 0x30
 800351e:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_SPI_MspInit+0x88>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800352a:	23e0      	movs	r3, #224	@ 0xe0
 800352c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800353a:	2305      	movs	r3, #5
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	4805      	ldr	r0, [pc, #20]	@ (800355c <HAL_SPI_MspInit+0x8c>)
 8003546:	f000 fc5b 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	3728      	adds	r7, #40	@ 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40013000 	.word	0x40013000
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000

08003560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	@ 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3a      	ldr	r2, [pc, #232]	@ (8003668 <HAL_UART_MspInit+0x108>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d134      	bne.n	80035ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	4a38      	ldr	r2, [pc, #224]	@ (800366c <HAL_UART_MspInit+0x10c>)
 800358c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003590:	6413      	str	r3, [r2, #64]	@ 0x40
 8003592:	4b36      	ldr	r3, [pc, #216]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b32      	ldr	r3, [pc, #200]	@ (800366c <HAL_UART_MspInit+0x10c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a31      	ldr	r2, [pc, #196]	@ (800366c <HAL_UART_MspInit+0x10c>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_UART_MspInit+0x10c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035ba:	2303      	movs	r3, #3
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035ca:	2308      	movs	r3, #8
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	4826      	ldr	r0, [pc, #152]	@ (8003670 <HAL_UART_MspInit+0x110>)
 80035d6:	f000 fc13 	bl	8003e00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2105      	movs	r1, #5
 80035de:	2034      	movs	r0, #52	@ 0x34
 80035e0:	f000 fb52 	bl	8003c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035e4:	2034      	movs	r0, #52	@ 0x34
 80035e6:	f000 fb6b 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ea:	e038      	b.n	800365e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <HAL_UART_MspInit+0x114>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d133      	bne.n	800365e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_UART_MspInit+0x10c>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003604:	6413      	str	r3, [r2, #64]	@ 0x40
 8003606:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a14      	ldr	r2, [pc, #80]	@ (800366c <HAL_UART_MspInit+0x10c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_UART_MspInit+0x10c>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800362e:	230c      	movs	r3, #12
 8003630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800363e:	2307      	movs	r3, #7
 8003640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4619      	mov	r1, r3
 8003648:	4809      	ldr	r0, [pc, #36]	@ (8003670 <HAL_UART_MspInit+0x110>)
 800364a:	f000 fbd9 	bl	8003e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2105      	movs	r1, #5
 8003652:	2026      	movs	r0, #38	@ 0x26
 8003654:	f000 fb18 	bl	8003c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003658:	2026      	movs	r0, #38	@ 0x26
 800365a:	f000 fb31 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3730      	adds	r7, #48	@ 0x30
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40004c00 	.word	0x40004c00
 800366c:	40023800 	.word	0x40023800
 8003670:	40020000 	.word	0x40020000
 8003674:	40004400 	.word	0x40004400

08003678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	@ 0x30
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	4b2f      	ldr	r3, [pc, #188]	@ (800374c <HAL_InitTick+0xd4>)
 800368e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003690:	4a2e      	ldr	r2, [pc, #184]	@ (800374c <HAL_InitTick+0xd4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6453      	str	r3, [r2, #68]	@ 0x44
 8003698:	4b2c      	ldr	r3, [pc, #176]	@ (800374c <HAL_InitTick+0xd4>)
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036a4:	f107 020c 	add.w	r2, r7, #12
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fc38 	bl	8006f24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80036b4:	f003 fc22 	bl	8006efc <HAL_RCC_GetPCLK2Freq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	4a23      	ldr	r2, [pc, #140]	@ (8003750 <HAL_InitTick+0xd8>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	3b01      	subs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036cc:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <HAL_InitTick+0xdc>)
 80036ce:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <HAL_InitTick+0xe0>)
 80036d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_InitTick+0xdc>)
 80036d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_InitTick+0xdc>)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <HAL_InitTick+0xdc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_InitTick+0xdc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ec:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_InitTick+0xdc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80036f2:	4818      	ldr	r0, [pc, #96]	@ (8003754 <HAL_InitTick+0xdc>)
 80036f4:	f003 fe11 	bl	800731a <HAL_TIM_Base_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80036fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11b      	bne.n	800373e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003706:	4813      	ldr	r0, [pc, #76]	@ (8003754 <HAL_InitTick+0xdc>)
 8003708:	f003 fe60 	bl	80073cc <HAL_TIM_Base_Start_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003716:	2b00      	cmp	r3, #0
 8003718:	d111      	bne.n	800373e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800371a:	2019      	movs	r0, #25
 800371c:	f000 fad0 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d808      	bhi.n	8003738 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003726:	2200      	movs	r2, #0
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	2019      	movs	r0, #25
 800372c:	f000 faac 	bl	8003c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003730:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <HAL_InitTick+0xe4>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e002      	b.n	800373e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800373e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003742:	4618      	mov	r0, r3
 8003744:	3730      	adds	r7, #48	@ 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	431bde83 	.word	0x431bde83
 8003754:	20000780 	.word	0x20000780
 8003758:	40010000 	.word	0x40010000
 800375c:	20000230 	.word	0x20000230

08003760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <NMI_Handler+0x4>

08003768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <MemManage_Handler+0x4>

08003778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <BusFault_Handler+0x4>

08003780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <UsageFault_Handler+0x4>

08003788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 fd14 	bl	80041d0 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 80037a8:	f7fe ff00 	bl	80025ac <KEYS_read>
 80037ac:	4603      	mov	r3, r0
 80037ae:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 80037b0:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <EXTI0_IRQHandler+0x58>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	463a      	mov	r2, r7
 80037b8:	4618      	mov	r0, r3
 80037ba:	f008 ff77 	bl	800c6ac <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 80037be:	2001      	movs	r0, #1
 80037c0:	f7fe fecc 	bl	800255c <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <EXTI0_IRQHandler+0x48>
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <EXTI0_IRQHandler+0x5c>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80037e0:	2001      	movs	r0, #1
 80037e2:	f000 fcf5 	bl	80041d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000454 	.word	0x20000454
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037fe:	f003 fe55 	bl	80074ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000780 	.word	0x20000780

0800380c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <USART2_IRQHandler+0x10>)
 8003812:	f004 f93f 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000738 	.word	0x20000738

08003820 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <UART4_IRQHandler+0x10>)
 8003826:	f004 f935 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200006f4 	.word	0x200006f4

08003834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <OTG_FS_IRQHandler+0x10>)
 800383a:	f000 ff57 	bl	80046ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200055c4 	.word	0x200055c4

08003848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	return 1;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_kill>:

int _kill(int pid, int sig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003862:	f00e fe71 	bl	8012548 <__errno>
 8003866:	4603      	mov	r3, r0
 8003868:	2216      	movs	r2, #22
 800386a:	601a      	str	r2, [r3, #0]
	return -1;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_exit>:

void _exit (int status)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003880:	f04f 31ff 	mov.w	r1, #4294967295
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffe7 	bl	8003858 <_kill>
	while (1) {}		/* Make sure we hang here */
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <_exit+0x12>

0800388e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e00a      	b.n	80038b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038a0:	f3af 8000 	nop.w
 80038a4:	4601      	mov	r1, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	60ba      	str	r2, [r7, #8]
 80038ac:	b2ca      	uxtb	r2, r1
 80038ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3301      	adds	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dbf0      	blt.n	80038a0 <_read+0x12>
	}

return len;
 80038be:	687b      	ldr	r3, [r7, #4]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e009      	b.n	80038ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	60ba      	str	r2, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3301      	adds	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	dbf1      	blt.n	80038da <_write+0x12>
	}
	return len;
 80038f6:	687b      	ldr	r3, [r7, #4]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_close>:

int _close(int file)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	return -1;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003928:	605a      	str	r2, [r3, #4]
	return 0;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <_isatty>:

int _isatty(int file)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	return 1;
 8003940:	2301      	movs	r3, #1
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
	return 0;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <_sbrk+0x5c>)
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <_sbrk+0x60>)
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800397c:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <_sbrk+0x64>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <_sbrk+0x64>)
 8003986:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <_sbrk+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <_sbrk+0x64>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d207      	bcs.n	80039a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003998:	f00e fdd6 	bl	8012548 <__errno>
 800399c:	4603      	mov	r3, r0
 800399e:	220c      	movs	r2, #12
 80039a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	e009      	b.n	80039bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039a8:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <_sbrk+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <_sbrk+0x64>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	4a05      	ldr	r2, [pc, #20]	@ (80039cc <_sbrk+0x64>)
 80039b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20020000 	.word	0x20020000
 80039c8:	00000400 	.word	0x00000400
 80039cc:	200007c8 	.word	0x200007c8
 80039d0:	20005a18 	.word	0x20005a18

080039d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d8:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <SystemInit+0x20>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039de:	4a05      	ldr	r2, [pc, #20]	@ (80039f4 <SystemInit+0x20>)
 80039e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039fc:	480d      	ldr	r0, [pc, #52]	@ (8003a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039fe:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a00:	4a0e      	ldr	r2, [pc, #56]	@ (8003a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a04:	e002      	b.n	8003a0c <LoopCopyDataInit>

08003a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a0a:	3304      	adds	r3, #4

08003a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a10:	d3f9      	bcc.n	8003a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a12:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a14:	4c0b      	ldr	r4, [pc, #44]	@ (8003a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a18:	e001      	b.n	8003a1e <LoopFillZerobss>

08003a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a1c:	3204      	adds	r2, #4

08003a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a20:	d3fb      	bcc.n	8003a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a22:	f7ff ffd7 	bl	80039d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a26:	f00e fd95 	bl	8012554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2a:	f7ff f8f7 	bl	8002c1c <main>
  bx  lr    
 8003a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a38:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8003a3c:	08015c6c 	.word	0x08015c6c
  ldr r2, =_sbss
 8003a40:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8003a44:	20005a14 	.word	0x20005a14

08003a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a48:	e7fe      	b.n	8003a48 <ADC_IRQHandler>
	...

08003a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a50:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <HAL_Init+0x40>)
 8003a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <HAL_Init+0x40>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_Init+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a07      	ldr	r2, [pc, #28]	@ (8003a8c <HAL_Init+0x40>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a74:	2003      	movs	r0, #3
 8003a76:	f000 f8fc 	bl	8003c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7ff fdfc 	bl	8003678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a80:	f7ff fc32 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	@ (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000234 	.word	0x20000234
 8003ab4:	200007cc 	.word	0x200007cc

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	200007cc 	.word	0x200007cc

08003ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ad8:	f7ff ffee 	bl	8003ab8 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d005      	beq.n	8003af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <HAL_Delay+0x44>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003af6:	bf00      	nop
 8003af8:	f7ff ffde 	bl	8003ab8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d8f7      	bhi.n	8003af8 <HAL_Delay+0x28>
  {
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000234 	.word	0x20000234

08003b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b28:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b34:	4013      	ands	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4a:	4a04      	ldr	r2, [pc, #16]	@ (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	60d3      	str	r3, [r2, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <__NVIC_GetPriorityGrouping+0x18>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0307 	and.w	r3, r3, #7
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0b      	blt.n	8003ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <__NVIC_EnableIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	@ (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	@ (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
         );
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	@ 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff4c 	bl	8003b18 <__NVIC_SetPriorityGrouping>
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9a:	f7ff ff61 	bl	8003b60 <__NVIC_GetPriorityGrouping>
 8003c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f7ff ffb1 	bl	8003c0c <NVIC_EncodePriority>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff80 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff54 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cea:	f7ff fee5 	bl	8003ab8 <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d008      	beq.n	8003d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e052      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0216 	bic.w	r2, r2, #22
 8003d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_DMA_Abort+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5e:	e013      	b.n	8003d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d60:	f7ff feaa 	bl	8003ab8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d90c      	bls.n	8003d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2203      	movs	r2, #3
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e015      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e4      	bne.n	8003d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	223f      	movs	r2, #63	@ 0x3f
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d004      	beq.n	8003dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	@ 0x80
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00c      	b.n	8003df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e16b      	b.n	80040f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 815a 	bne.w	80040ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d130      	bne.n	8003eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0201 	and.w	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d017      	beq.n	8003ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d123      	bne.n	8003f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80b4 	beq.w	80040ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b60      	ldr	r3, [pc, #384]	@ (800410c <HAL_GPIO_Init+0x30c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800410c <HAL_GPIO_Init+0x30c>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f96:	4b5d      	ldr	r3, [pc, #372]	@ (800410c <HAL_GPIO_Init+0x30c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8004110 <HAL_GPIO_Init+0x310>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	@ (8004114 <HAL_GPIO_Init+0x314>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02b      	beq.n	8004026 <HAL_GPIO_Init+0x226>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a51      	ldr	r2, [pc, #324]	@ (8004118 <HAL_GPIO_Init+0x318>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d025      	beq.n	8004022 <HAL_GPIO_Init+0x222>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a50      	ldr	r2, [pc, #320]	@ (800411c <HAL_GPIO_Init+0x31c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01f      	beq.n	800401e <HAL_GPIO_Init+0x21e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8004120 <HAL_GPIO_Init+0x320>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_GPIO_Init+0x21a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4e      	ldr	r2, [pc, #312]	@ (8004124 <HAL_GPIO_Init+0x324>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_GPIO_Init+0x216>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8004128 <HAL_GPIO_Init+0x328>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00d      	beq.n	8004012 <HAL_GPIO_Init+0x212>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800412c <HAL_GPIO_Init+0x32c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x20e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_GPIO_Init+0x330>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_GPIO_Init+0x20a>
 8004006:	2307      	movs	r3, #7
 8004008:	e00e      	b.n	8004028 <HAL_GPIO_Init+0x228>
 800400a:	2308      	movs	r3, #8
 800400c:	e00c      	b.n	8004028 <HAL_GPIO_Init+0x228>
 800400e:	2306      	movs	r3, #6
 8004010:	e00a      	b.n	8004028 <HAL_GPIO_Init+0x228>
 8004012:	2305      	movs	r3, #5
 8004014:	e008      	b.n	8004028 <HAL_GPIO_Init+0x228>
 8004016:	2304      	movs	r3, #4
 8004018:	e006      	b.n	8004028 <HAL_GPIO_Init+0x228>
 800401a:	2303      	movs	r3, #3
 800401c:	e004      	b.n	8004028 <HAL_GPIO_Init+0x228>
 800401e:	2302      	movs	r3, #2
 8004020:	e002      	b.n	8004028 <HAL_GPIO_Init+0x228>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_GPIO_Init+0x228>
 8004026:	2300      	movs	r3, #0
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	f002 0203 	and.w	r2, r2, #3
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	4093      	lsls	r3, r2
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004038:	4935      	ldr	r1, [pc, #212]	@ (8004110 <HAL_GPIO_Init+0x310>)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004046:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_GPIO_Init+0x334>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800406a:	4a32      	ldr	r2, [pc, #200]	@ (8004134 <HAL_GPIO_Init+0x334>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004070:	4b30      	ldr	r3, [pc, #192]	@ (8004134 <HAL_GPIO_Init+0x334>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004094:	4a27      	ldr	r2, [pc, #156]	@ (8004134 <HAL_GPIO_Init+0x334>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800409a:	4b26      	ldr	r3, [pc, #152]	@ (8004134 <HAL_GPIO_Init+0x334>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040be:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_GPIO_Init+0x334>)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004134 <HAL_GPIO_Init+0x334>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e8:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <HAL_GPIO_Init+0x334>)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	f67f ae90 	bls.w	8003e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3724      	adds	r7, #36	@ 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	40013800 	.word	0x40013800
 8004114:	40020000 	.word	0x40020000
 8004118:	40020400 	.word	0x40020400
 800411c:	40020800 	.word	0x40020800
 8004120:	40020c00 	.word	0x40020c00
 8004124:	40021000 	.word	0x40021000
 8004128:	40021400 	.word	0x40021400
 800412c:	40021800 	.word	0x40021800
 8004130:	40021c00 	.word	0x40021c00
 8004134:	40013c00 	.word	0x40013c00

08004138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e001      	b.n	800415a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
 8004174:	4613      	mov	r3, r2
 8004176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004178:	787b      	ldrb	r3, [r7, #1]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004184:	e003      	b.n	800418e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	041a      	lsls	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	619a      	str	r2, [r3, #24]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	041a      	lsls	r2, r3, #16
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43d9      	mvns	r1, r3
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	400b      	ands	r3, r1
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041da:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041e6:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f806 	bl	8004200 <HAL_GPIO_EXTI_Callback>
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40013c00 	.word	0x40013c00

08004200 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004218:	b08f      	sub	sp, #60	@ 0x3c
 800421a:	af0a      	add	r7, sp, #40	@ 0x28
 800421c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e054      	b.n	80042d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f00c f8cc 	bl	80103e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f004 fbee 	bl	8008a48 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	687e      	ldr	r6, [r7, #4]
 8004274:	466d      	mov	r5, sp
 8004276:	f106 0410 	add.w	r4, r6, #16
 800427a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800427e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004286:	e885 0003 	stmia.w	r5, {r0, r1}
 800428a:	1d33      	adds	r3, r6, #4
 800428c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800428e:	6838      	ldr	r0, [r7, #0]
 8004290:	f004 fb68 	bl	8008964 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f004 fbe5 	bl	8008a6a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	687e      	ldr	r6, [r7, #4]
 80042a8:	466d      	mov	r5, sp
 80042aa:	f106 0410 	add.w	r4, r6, #16
 80042ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80042be:	1d33      	adds	r3, r6, #4
 80042c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042c2:	6838      	ldr	r0, [r7, #0]
 80042c4:	f004 fd6e 	bl	8008da4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80042da:	b590      	push	{r4, r7, lr}
 80042dc:	b089      	sub	sp, #36	@ 0x24
 80042de:	af04      	add	r7, sp, #16
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	461a      	mov	r2, r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	70fb      	strb	r3, [r7, #3]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70bb      	strb	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_HCD_HC_Init+0x28>
 80042fe:	2302      	movs	r3, #2
 8004300:	e076      	b.n	80043f0 <HAL_HCD_HC_Init+0x116>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	212c      	movs	r1, #44	@ 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	333d      	adds	r3, #61	@ 0x3d
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	212c      	movs	r1, #44	@ 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3338      	adds	r3, #56	@ 0x38
 800432a:	787a      	ldrb	r2, [r7, #1]
 800432c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	212c      	movs	r1, #44	@ 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3340      	adds	r3, #64	@ 0x40
 800433c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800433e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	212c      	movs	r1, #44	@ 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3339      	adds	r3, #57	@ 0x39
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	212c      	movs	r1, #44	@ 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	333f      	adds	r3, #63	@ 0x3f
 8004360:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004364:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	78ba      	ldrb	r2, [r7, #2]
 800436a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800436e:	b2d0      	uxtb	r0, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	212c      	movs	r1, #44	@ 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	333a      	adds	r3, #58	@ 0x3a
 800437c:	4602      	mov	r2, r0
 800437e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da09      	bge.n	800439c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	212c      	movs	r1, #44	@ 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	333b      	adds	r3, #59	@ 0x3b
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e008      	b.n	80043ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	212c      	movs	r1, #44	@ 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	333b      	adds	r3, #59	@ 0x3b
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	212c      	movs	r1, #44	@ 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	333c      	adds	r3, #60	@ 0x3c
 80043bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	787c      	ldrb	r4, [r7, #1]
 80043c8:	78ba      	ldrb	r2, [r7, #2]
 80043ca:	78f9      	ldrb	r1, [r7, #3]
 80043cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043ce:	9302      	str	r3, [sp, #8]
 80043d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4623      	mov	r3, r4
 80043de:	f004 fe67 	bl	80090b0 <USB_HC_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd90      	pop	{r4, r7, pc}

080043f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_HCD_HC_Halt+0x1e>
 8004412:	2302      	movs	r3, #2
 8004414:	e00f      	b.n	8004436 <HAL_HCD_HC_Halt+0x3e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f005 f8b7 	bl	800959a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	70fb      	strb	r3, [r7, #3]
 8004452:	460b      	mov	r3, r1
 8004454:	70bb      	strb	r3, [r7, #2]
 8004456:	4613      	mov	r3, r2
 8004458:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	212c      	movs	r1, #44	@ 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	333b      	adds	r3, #59	@ 0x3b
 8004468:	78ba      	ldrb	r2, [r7, #2]
 800446a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	212c      	movs	r1, #44	@ 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	333f      	adds	r3, #63	@ 0x3f
 800447a:	787a      	ldrb	r2, [r7, #1]
 800447c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800447e:	7c3b      	ldrb	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d112      	bne.n	80044aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	212c      	movs	r1, #44	@ 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3342      	adds	r3, #66	@ 0x42
 8004492:	2203      	movs	r2, #3
 8004494:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	212c      	movs	r1, #44	@ 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	333d      	adds	r3, #61	@ 0x3d
 80044a4:	7f3a      	ldrb	r2, [r7, #28]
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e008      	b.n	80044bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	212c      	movs	r1, #44	@ 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3342      	adds	r3, #66	@ 0x42
 80044b8:	2202      	movs	r2, #2
 80044ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80044bc:	787b      	ldrb	r3, [r7, #1]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	f200 80c6 	bhi.w	8004650 <HAL_HCD_HC_SubmitRequest+0x210>
 80044c4:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	0800463d 	.word	0x0800463d
 80044d4:	08004541 	.word	0x08004541
 80044d8:	080045bf 	.word	0x080045bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80044dc:	7c3b      	ldrb	r3, [r7, #16]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f040 80b8 	bne.w	8004654 <HAL_HCD_HC_SubmitRequest+0x214>
 80044e4:	78bb      	ldrb	r3, [r7, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 80b4 	bne.w	8004654 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80044ec:	8b3b      	ldrh	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d108      	bne.n	8004504 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	212c      	movs	r1, #44	@ 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3355      	adds	r3, #85	@ 0x55
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	212c      	movs	r1, #44	@ 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3355      	adds	r3, #85	@ 0x55
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	212c      	movs	r1, #44	@ 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3342      	adds	r3, #66	@ 0x42
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800452a:	e093      	b.n	8004654 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	212c      	movs	r1, #44	@ 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3342      	adds	r3, #66	@ 0x42
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
      break;
 800453e:	e089      	b.n	8004654 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004540:	78bb      	ldrb	r3, [r7, #2]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11d      	bne.n	8004582 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	212c      	movs	r1, #44	@ 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	3355      	adds	r3, #85	@ 0x55
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	212c      	movs	r1, #44	@ 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	3342      	adds	r3, #66	@ 0x42
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800456c:	e073      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	212c      	movs	r1, #44	@ 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3342      	adds	r3, #66	@ 0x42
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
      break;
 8004580:	e069      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	212c      	movs	r1, #44	@ 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3354      	adds	r3, #84	@ 0x54
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	212c      	movs	r1, #44	@ 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3342      	adds	r3, #66	@ 0x42
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
      break;
 80045a8:	e055      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	212c      	movs	r1, #44	@ 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3342      	adds	r3, #66	@ 0x42
 80045b8:	2202      	movs	r2, #2
 80045ba:	701a      	strb	r2, [r3, #0]
      break;
 80045bc:	e04b      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80045be:	78bb      	ldrb	r3, [r7, #2]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d11d      	bne.n	8004600 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	212c      	movs	r1, #44	@ 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3355      	adds	r3, #85	@ 0x55
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	212c      	movs	r1, #44	@ 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3342      	adds	r3, #66	@ 0x42
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045ea:	e034      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	212c      	movs	r1, #44	@ 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3342      	adds	r3, #66	@ 0x42
 80045fa:	2202      	movs	r2, #2
 80045fc:	701a      	strb	r2, [r3, #0]
      break;
 80045fe:	e02a      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	212c      	movs	r1, #44	@ 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3354      	adds	r3, #84	@ 0x54
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	212c      	movs	r1, #44	@ 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3342      	adds	r3, #66	@ 0x42
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
      break;
 8004626:	e016      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	212c      	movs	r1, #44	@ 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3342      	adds	r3, #66	@ 0x42
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
      break;
 800463a:	e00c      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	212c      	movs	r1, #44	@ 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3342      	adds	r3, #66	@ 0x42
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
      break;
 800464e:	e002      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004654:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	212c      	movs	r1, #44	@ 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	3344      	adds	r3, #68	@ 0x44
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	8b3a      	ldrh	r2, [r7, #24]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	202c      	movs	r0, #44	@ 0x2c
 8004670:	fb00 f303 	mul.w	r3, r0, r3
 8004674:	440b      	add	r3, r1
 8004676:	334c      	adds	r3, #76	@ 0x4c
 8004678:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	212c      	movs	r1, #44	@ 0x2c
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	3360      	adds	r3, #96	@ 0x60
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	212c      	movs	r1, #44	@ 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3350      	adds	r3, #80	@ 0x50
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	212c      	movs	r1, #44	@ 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3339      	adds	r3, #57	@ 0x39
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	212c      	movs	r1, #44	@ 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3361      	adds	r3, #97	@ 0x61
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	222c      	movs	r2, #44	@ 0x2c
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	3338      	adds	r3, #56	@ 0x38
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	18d1      	adds	r1, r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	f004 fe0a 	bl	80092f4 <USB_HC_StartXfer>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop

080046ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f004 fb0b 	bl	8008d1e <USB_GetMode>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	f040 80f6 	bne.w	80048fc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f004 faef 	bl	8008cf8 <USB_ReadInterrupts>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80ec 	beq.w	80048fa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fae6 	bl	8008cf8 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004736:	d104      	bne.n	8004742 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f004 fad6 	bl	8008cf8 <USB_ReadInterrupts>
 800474c:	4603      	mov	r3, r0
 800474e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004756:	d104      	bne.n	8004762 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f004 fac6 	bl	8008cf8 <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004776:	d104      	bne.n	8004782 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004780:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f004 fab6 	bl	8008cf8 <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d103      	bne.n	800479e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2202      	movs	r2, #2
 800479c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f004 faa8 	bl	8008cf8 <USB_ReadInterrupts>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b2:	d11c      	bne.n	80047ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80047bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80047ce:	2110      	movs	r1, #16
 80047d0:	6938      	ldr	r0, [r7, #16]
 80047d2:	f004 f997 	bl	8008b04 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047d6:	6938      	ldr	r0, [r7, #16]
 80047d8:	f004 f9c8 	bl	8008b6c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 fb9e 	bl	8008f24 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f00b fe77 	bl	80104dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fa80 	bl	8008cf8 <USB_ReadInterrupts>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004802:	d102      	bne.n	800480a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f89e 	bl	8005946 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fa72 	bl	8008cf8 <USB_ReadInterrupts>
 8004814:	4603      	mov	r3, r0
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	d106      	bne.n	800482c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f00b fe40 	bl	80104a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2208      	movs	r2, #8
 800482a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f004 fa61 	bl	8008cf8 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b10      	cmp	r3, #16
 800483e:	d101      	bne.n	8004844 <HAL_HCD_IRQHandler+0x158>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_HCD_IRQHandler+0x15a>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d012      	beq.n	8004870 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 ffa1 	bl	80057a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0210 	orr.w	r2, r2, #16
 800486e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fa3f 	bl	8008cf8 <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004884:	d13a      	bne.n	80048fc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f004 fe74 	bl	8009578 <USB_HC_ReadInterrupt>
 8004890:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e025      	b.n	80048e4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d018      	beq.n	80048de <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c2:	d106      	bne.n	80048d2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8ab 	bl	8004a26 <HCD_HC_IN_IRQHandler>
 80048d0:	e005      	b.n	80048de <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fbf9 	bl	80050d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	3301      	adds	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3d4      	bcc.n	8004898 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048f6:	615a      	str	r2, [r3, #20]
 80048f8:	e000      	b.n	80048fc <HAL_HCD_IRQHandler+0x210>
      return;
 80048fa:	bf00      	nop
    }
  }
}
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_HCD_Start+0x16>
 8004914:	2302      	movs	r3, #2
 8004916:	e013      	b.n	8004940 <HAL_HCD_Start+0x3e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fb60 	bl	8008fec <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f004 f878 	bl	8008a26 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_HCD_Stop+0x16>
 800495a:	2302      	movs	r3, #2
 800495c:	e00d      	b.n	800497a <HAL_HCD_Stop+0x32>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f004 ff4e 	bl	800980c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f004 fb02 	bl	8008f98 <USB_ResetPort>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	212c      	movs	r1, #44	@ 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3360      	adds	r3, #96	@ 0x60
 80049b8:	781b      	ldrb	r3, [r3, #0]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	212c      	movs	r1, #44	@ 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	3350      	adds	r3, #80	@ 0x50
 80049e0:	681b      	ldr	r3, [r3, #0]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f004 fb46 	bl	800908c <USB_GetCurrentFrame>
 8004a00:	4603      	mov	r3, r0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f004 fb21 	bl	800905e <USB_GetHostSpeed>
 8004a1c:	4603      	mov	r3, r0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d11a      	bne.n	8004a8c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a62:	461a      	mov	r2, r3
 8004a64:	2304      	movs	r3, #4
 8004a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	212c      	movs	r1, #44	@ 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3361      	adds	r3, #97	@ 0x61
 8004a76:	2206      	movs	r2, #6
 8004a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f004 fd88 	bl	800959a <USB_HC_Halt>
 8004a8a:	e0af      	b.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aa2:	d11b      	bne.n	8004adc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	@ 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3361      	adds	r3, #97	@ 0x61
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f004 fd60 	bl	800959a <USB_HC_Halt>
 8004ada:	e087      	b.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d109      	bne.n	8004b06 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afe:	461a      	mov	r2, r3
 8004b00:	2320      	movs	r3, #32
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	e072      	b.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d11a      	bne.n	8004b52 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	@ 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3361      	adds	r3, #97	@ 0x61
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 fd25 	bl	800959a <USB_HC_Halt>
 8004b50:	e04c      	b.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b68:	d11b      	bne.n	8004ba2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	212c      	movs	r1, #44	@ 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3361      	adds	r3, #97	@ 0x61
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f004 fcfd 	bl	800959a <USB_HC_Halt>
 8004ba0:	e024      	b.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b80      	cmp	r3, #128	@ 0x80
 8004bb6:	d119      	bne.n	8004bec <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2380      	movs	r3, #128	@ 0x80
 8004bc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	212c      	movs	r1, #44	@ 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3361      	adds	r3, #97	@ 0x61
 8004bd8:	2206      	movs	r2, #6
 8004bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fcd7 	bl	800959a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c02:	d112      	bne.n	8004c2a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f004 fcc3 	bl	800959a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c28:	e24e      	b.n	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 80df 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d019      	beq.n	8004c7e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	212c      	movs	r1, #44	@ 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3348      	adds	r3, #72	@ 0x48
 8004c58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	202c      	movs	r0, #44	@ 0x2c
 8004c74:	fb00 f303 	mul.w	r3, r0, r3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3350      	adds	r3, #80	@ 0x50
 8004c7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	212c      	movs	r1, #44	@ 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3361      	adds	r3, #97	@ 0x61
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	212c      	movs	r1, #44	@ 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	335c      	adds	r3, #92	@ 0x5c
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	212c      	movs	r1, #44	@ 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	333f      	adds	r3, #63	@ 0x3f
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	212c      	movs	r1, #44	@ 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	333f      	adds	r3, #63	@ 0x3f
 8004cd6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d111      	bne.n	8004d00 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fc57 	bl	800959a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	6093      	str	r3, [r2, #8]
 8004cfe:	e03a      	b.n	8004d76 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	212c      	movs	r1, #44	@ 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	333f      	adds	r3, #63	@ 0x3f
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d009      	beq.n	8004d28 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	212c      	movs	r1, #44	@ 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	333f      	adds	r3, #63	@ 0x3f
 8004d22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d126      	bne.n	8004d76 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	212c      	movs	r1, #44	@ 0x2c
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	3360      	adds	r3, #96	@ 0x60
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	b2d9      	uxtb	r1, r3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	202c      	movs	r0, #44	@ 0x2c
 8004d64:	fb00 f303 	mul.w	r3, r0, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3360      	adds	r3, #96	@ 0x60
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f00b fbc1 	bl	80104f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d12b      	bne.n	8004dd6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	212c      	movs	r1, #44	@ 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	3348      	adds	r3, #72	@ 0x48
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	202c      	movs	r0, #44	@ 0x2c
 8004d94:	fb00 f202 	mul.w	r2, r0, r2
 8004d98:	440a      	add	r2, r1
 8004d9a:	3240      	adds	r2, #64	@ 0x40
 8004d9c:	8812      	ldrh	r2, [r2, #0]
 8004d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 818e 	beq.w	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	212c      	movs	r1, #44	@ 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3354      	adds	r3, #84	@ 0x54
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f083 0301 	eor.w	r3, r3, #1
 8004dc0:	b2d8      	uxtb	r0, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	212c      	movs	r1, #44	@ 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3354      	adds	r3, #84	@ 0x54
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	701a      	strb	r2, [r3, #0]
}
 8004dd4:	e178      	b.n	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	212c      	movs	r1, #44	@ 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	3354      	adds	r3, #84	@ 0x54
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f083 0301 	eor.w	r3, r3, #1
 8004dea:	b2d8      	uxtb	r0, r3
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	212c      	movs	r1, #44	@ 0x2c
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	3354      	adds	r3, #84	@ 0x54
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	701a      	strb	r2, [r3, #0]
}
 8004dfe:	e163      	b.n	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	f040 80f6 	bne.w	8005004 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	212c      	movs	r1, #44	@ 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	3361      	adds	r3, #97	@ 0x61
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d109      	bne.n	8004e40 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	212c      	movs	r1, #44	@ 0x2c
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3360      	adds	r3, #96	@ 0x60
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e0c9      	b.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	212c      	movs	r1, #44	@ 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3361      	adds	r3, #97	@ 0x61
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b05      	cmp	r3, #5
 8004e52:	d109      	bne.n	8004e68 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	212c      	movs	r1, #44	@ 0x2c
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	3360      	adds	r3, #96	@ 0x60
 8004e62:	2205      	movs	r2, #5
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e0b5      	b.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	212c      	movs	r1, #44	@ 0x2c
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3361      	adds	r3, #97	@ 0x61
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d009      	beq.n	8004e90 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	212c      	movs	r1, #44	@ 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3361      	adds	r3, #97	@ 0x61
 8004e8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d150      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	212c      	movs	r1, #44	@ 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	335c      	adds	r3, #92	@ 0x5c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	202c      	movs	r0, #44	@ 0x2c
 8004ea8:	fb00 f303 	mul.w	r3, r0, r3
 8004eac:	440b      	add	r3, r1
 8004eae:	335c      	adds	r3, #92	@ 0x5c
 8004eb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	212c      	movs	r1, #44	@ 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	335c      	adds	r3, #92	@ 0x5c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d912      	bls.n	8004eec <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	212c      	movs	r1, #44	@ 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	335c      	adds	r3, #92	@ 0x5c
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	212c      	movs	r1, #44	@ 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3360      	adds	r3, #96	@ 0x60
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004eea:	e073      	b.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	212c      	movs	r1, #44	@ 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3360      	adds	r3, #96	@ 0x60
 8004efa:	2202      	movs	r2, #2
 8004efc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f14:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f1c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f30:	e050      	b.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	212c      	movs	r1, #44	@ 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3361      	adds	r3, #97	@ 0x61
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d122      	bne.n	8004f8c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	212c      	movs	r1, #44	@ 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	3360      	adds	r3, #96	@ 0x60
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e023      	b.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	212c      	movs	r1, #44	@ 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3361      	adds	r3, #97	@ 0x61
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b07      	cmp	r3, #7
 8004f9e:	d119      	bne.n	8004fd4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	212c      	movs	r1, #44	@ 0x2c
 8004fa6:	fb01 f303 	mul.w	r3, r1, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	335c      	adds	r3, #92	@ 0x5c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	202c      	movs	r0, #44	@ 0x2c
 8004fb8:	fb00 f303 	mul.w	r3, r0, r3
 8004fbc:	440b      	add	r3, r1
 8004fbe:	335c      	adds	r3, #92	@ 0x5c
 8004fc0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	212c      	movs	r1, #44	@ 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3360      	adds	r3, #96	@ 0x60
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	b2d9      	uxtb	r1, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	202c      	movs	r0, #44	@ 0x2c
 8004ff0:	fb00 f303 	mul.w	r3, r0, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3360      	adds	r3, #96	@ 0x60
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f00b fa7b 	bl	80104f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005002:	e061      	b.n	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d156      	bne.n	80050c8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	212c      	movs	r1, #44	@ 0x2c
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	4413      	add	r3, r2
 8005026:	333f      	adds	r3, #63	@ 0x3f
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d111      	bne.n	8005052 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	212c      	movs	r1, #44	@ 0x2c
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	335c      	adds	r3, #92	@ 0x5c
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f004 faa5 	bl	800959a <USB_HC_Halt>
 8005050:	e031      	b.n	80050b6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	212c      	movs	r1, #44	@ 0x2c
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	4413      	add	r3, r2
 800505e:	333f      	adds	r3, #63	@ 0x3f
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	212c      	movs	r1, #44	@ 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	333f      	adds	r3, #63	@ 0x3f
 8005074:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005076:	2b02      	cmp	r3, #2
 8005078:	d11d      	bne.n	80050b6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	212c      	movs	r1, #44	@ 0x2c
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	4413      	add	r3, r2
 8005086:	335c      	adds	r3, #92	@ 0x5c
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d110      	bne.n	80050b6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	212c      	movs	r1, #44	@ 0x2c
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	3361      	adds	r3, #97	@ 0x61
 80050a2:	2203      	movs	r2, #3
 80050a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f004 fa72 	bl	800959a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c2:	461a      	mov	r2, r3
 80050c4:	2310      	movs	r3, #16
 80050c6:	6093      	str	r3, [r2, #8]
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d11a      	bne.n	8005136 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800510c:	461a      	mov	r2, r3
 800510e:	2304      	movs	r3, #4
 8005110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	212c      	movs	r1, #44	@ 0x2c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	3361      	adds	r3, #97	@ 0x61
 8005120:	2206      	movs	r2, #6
 8005122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f004 fa33 	bl	800959a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005134:	e331      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b20      	cmp	r3, #32
 800514a:	d12e      	bne.n	80051aa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	2320      	movs	r3, #32
 800515c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	212c      	movs	r1, #44	@ 0x2c
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	4413      	add	r3, r2
 800516a:	333d      	adds	r3, #61	@ 0x3d
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 8313 	bne.w	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	212c      	movs	r1, #44	@ 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	333d      	adds	r3, #61	@ 0x3d
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	212c      	movs	r1, #44	@ 0x2c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	3360      	adds	r3, #96	@ 0x60
 8005194:	2202      	movs	r2, #2
 8005196:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f004 f9f9 	bl	800959a <USB_HC_Halt>
}
 80051a8:	e2f7      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c0:	d112      	bne.n	80051e8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ce:	461a      	mov	r2, r3
 80051d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f004 f9da 	bl	800959a <USB_HC_Halt>
}
 80051e6:	e2d8      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d140      	bne.n	8005280 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	212c      	movs	r1, #44	@ 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	335c      	adds	r3, #92	@ 0x5c
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d111      	bne.n	800524a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	212c      	movs	r1, #44	@ 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	333d      	adds	r3, #61	@ 0x3d
 8005234:	2201      	movs	r2, #1
 8005236:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005244:	461a      	mov	r2, r3
 8005246:	2340      	movs	r3, #64	@ 0x40
 8005248:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005256:	461a      	mov	r2, r3
 8005258:	2301      	movs	r3, #1
 800525a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	@ 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3361      	adds	r3, #97	@ 0x61
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f004 f98e 	bl	800959a <USB_HC_Halt>
}
 800527e:	e28c      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d12c      	bne.n	80052f0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	212c      	movs	r1, #44	@ 0x2c
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	3361      	adds	r3, #97	@ 0x61
 80052a4:	2204      	movs	r2, #4
 80052a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	212c      	movs	r1, #44	@ 0x2c
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	333d      	adds	r3, #61	@ 0x3d
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	212c      	movs	r1, #44	@ 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	335c      	adds	r3, #92	@ 0x5c
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f004 f95f 	bl	800959a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	2340      	movs	r3, #64	@ 0x40
 80052ec:	6093      	str	r3, [r2, #8]
}
 80052ee:	e254      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d11a      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005312:	461a      	mov	r2, r3
 8005314:	2308      	movs	r3, #8
 8005316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	212c      	movs	r1, #44	@ 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3361      	adds	r3, #97	@ 0x61
 8005326:	2205      	movs	r2, #5
 8005328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f004 f930 	bl	800959a <USB_HC_Halt>
}
 800533a:	e22e      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d140      	bne.n	80053d4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	212c      	movs	r1, #44	@ 0x2c
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	335c      	adds	r3, #92	@ 0x5c
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	212c      	movs	r1, #44	@ 0x2c
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	4413      	add	r3, r2
 8005370:	3361      	adds	r3, #97	@ 0x61
 8005372:	2203      	movs	r2, #3
 8005374:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	212c      	movs	r1, #44	@ 0x2c
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	333d      	adds	r3, #61	@ 0x3d
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d112      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	212c      	movs	r1, #44	@ 0x2c
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	333c      	adds	r3, #60	@ 0x3c
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	212c      	movs	r1, #44	@ 0x2c
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	333d      	adds	r3, #61	@ 0x3d
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f004 f8ed 	bl	800959a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053cc:	461a      	mov	r2, r3
 80053ce:	2310      	movs	r3, #16
 80053d0:	6093      	str	r3, [r2, #8]
}
 80053d2:	e1e2      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e6:	2b80      	cmp	r3, #128	@ 0x80
 80053e8:	d164      	bne.n	80054b4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d111      	bne.n	8005416 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	212c      	movs	r1, #44	@ 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3361      	adds	r3, #97	@ 0x61
 8005400:	2206      	movs	r2, #6
 8005402:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f004 f8c3 	bl	800959a <USB_HC_Halt>
 8005414:	e044      	b.n	80054a0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	212c      	movs	r1, #44	@ 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	335c      	adds	r3, #92	@ 0x5c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	202c      	movs	r0, #44	@ 0x2c
 800542e:	fb00 f303 	mul.w	r3, r0, r3
 8005432:	440b      	add	r3, r1
 8005434:	335c      	adds	r3, #92	@ 0x5c
 8005436:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	212c      	movs	r1, #44	@ 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	335c      	adds	r3, #92	@ 0x5c
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d920      	bls.n	800548e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	212c      	movs	r1, #44	@ 0x2c
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	4413      	add	r3, r2
 8005458:	335c      	adds	r3, #92	@ 0x5c
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	212c      	movs	r1, #44	@ 0x2c
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	4413      	add	r3, r2
 800546a:	3360      	adds	r3, #96	@ 0x60
 800546c:	2204      	movs	r2, #4
 800546e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	b2d9      	uxtb	r1, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	202c      	movs	r0, #44	@ 0x2c
 800547a:	fb00 f303 	mul.w	r3, r0, r3
 800547e:	4413      	add	r3, r2
 8005480:	3360      	adds	r3, #96	@ 0x60
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f00b f836 	bl	80104f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800548c:	e008      	b.n	80054a0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	212c      	movs	r1, #44	@ 0x2c
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	3360      	adds	r3, #96	@ 0x60
 800549c:	2202      	movs	r2, #2
 800549e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	6093      	str	r3, [r2, #8]
}
 80054b2:	e172      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ca:	d11b      	bne.n	8005504 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	212c      	movs	r1, #44	@ 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3361      	adds	r3, #97	@ 0x61
 80054da:	2208      	movs	r2, #8
 80054dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f004 f856 	bl	800959a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fa:	461a      	mov	r2, r3
 80054fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005500:	6093      	str	r3, [r2, #8]
}
 8005502:	e14a      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	f040 813f 	bne.w	800579a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	212c      	movs	r1, #44	@ 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	3361      	adds	r3, #97	@ 0x61
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d17d      	bne.n	800562c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	212c      	movs	r1, #44	@ 0x2c
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	3360      	adds	r3, #96	@ 0x60
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	212c      	movs	r1, #44	@ 0x2c
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	333f      	adds	r3, #63	@ 0x3f
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d00a      	beq.n	800556c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	212c      	movs	r1, #44	@ 0x2c
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	4413      	add	r3, r2
 8005562:	333f      	adds	r3, #63	@ 0x3f
 8005564:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005566:	2b03      	cmp	r3, #3
 8005568:	f040 8100 	bne.w	800576c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d113      	bne.n	800559c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	212c      	movs	r1, #44	@ 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	3355      	adds	r3, #85	@ 0x55
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f083 0301 	eor.w	r3, r3, #1
 8005588:	b2d8      	uxtb	r0, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	212c      	movs	r1, #44	@ 0x2c
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	3355      	adds	r3, #85	@ 0x55
 8005598:	4602      	mov	r2, r0
 800559a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f040 80e3 	bne.w	800576c <HCD_HC_OUT_IRQHandler+0x69c>
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	212c      	movs	r1, #44	@ 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	334c      	adds	r3, #76	@ 0x4c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80d8 	beq.w	800576c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	212c      	movs	r1, #44	@ 0x2c
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	334c      	adds	r3, #76	@ 0x4c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	202c      	movs	r0, #44	@ 0x2c
 80055d2:	fb00 f202 	mul.w	r2, r0, r2
 80055d6:	440a      	add	r2, r1
 80055d8:	3240      	adds	r2, #64	@ 0x40
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	4413      	add	r3, r2
 80055de:	3b01      	subs	r3, #1
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	202c      	movs	r0, #44	@ 0x2c
 80055e6:	fb00 f202 	mul.w	r2, r0, r2
 80055ea:	440a      	add	r2, r1
 80055ec:	3240      	adds	r2, #64	@ 0x40
 80055ee:	8812      	ldrh	r2, [r2, #0]
 80055f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b5 	beq.w	800576c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	212c      	movs	r1, #44	@ 0x2c
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	3355      	adds	r3, #85	@ 0x55
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f083 0301 	eor.w	r3, r3, #1
 8005616:	b2d8      	uxtb	r0, r3
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	212c      	movs	r1, #44	@ 0x2c
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	3355      	adds	r3, #85	@ 0x55
 8005626:	4602      	mov	r2, r0
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e09f      	b.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	212c      	movs	r1, #44	@ 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3361      	adds	r3, #97	@ 0x61
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d109      	bne.n	8005654 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	212c      	movs	r1, #44	@ 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	3360      	adds	r3, #96	@ 0x60
 800564e:	2202      	movs	r2, #2
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e08b      	b.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	212c      	movs	r1, #44	@ 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	3361      	adds	r3, #97	@ 0x61
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b04      	cmp	r3, #4
 8005666:	d109      	bne.n	800567c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	212c      	movs	r1, #44	@ 0x2c
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	4413      	add	r3, r2
 8005674:	3360      	adds	r3, #96	@ 0x60
 8005676:	2202      	movs	r2, #2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e077      	b.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	212c      	movs	r1, #44	@ 0x2c
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	3361      	adds	r3, #97	@ 0x61
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b05      	cmp	r3, #5
 800568e:	d109      	bne.n	80056a4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	212c      	movs	r1, #44	@ 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	3360      	adds	r3, #96	@ 0x60
 800569e:	2205      	movs	r2, #5
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e063      	b.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	212c      	movs	r1, #44	@ 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3361      	adds	r3, #97	@ 0x61
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d009      	beq.n	80056cc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	212c      	movs	r1, #44	@ 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3361      	adds	r3, #97	@ 0x61
 80056c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d14f      	bne.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	212c      	movs	r1, #44	@ 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	335c      	adds	r3, #92	@ 0x5c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	202c      	movs	r0, #44	@ 0x2c
 80056e4:	fb00 f303 	mul.w	r3, r0, r3
 80056e8:	440b      	add	r3, r1
 80056ea:	335c      	adds	r3, #92	@ 0x5c
 80056ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	212c      	movs	r1, #44	@ 0x2c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	335c      	adds	r3, #92	@ 0x5c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d912      	bls.n	8005728 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	212c      	movs	r1, #44	@ 0x2c
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	4413      	add	r3, r2
 800570e:	335c      	adds	r3, #92	@ 0x5c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	212c      	movs	r1, #44	@ 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3360      	adds	r3, #96	@ 0x60
 8005722:	2204      	movs	r2, #4
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e021      	b.n	800576c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	212c      	movs	r1, #44	@ 0x2c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	3360      	adds	r3, #96	@ 0x60
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005750:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005758:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005766:	461a      	mov	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005778:	461a      	mov	r2, r3
 800577a:	2302      	movs	r3, #2
 800577c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	b2d9      	uxtb	r1, r3
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	202c      	movs	r0, #44	@ 0x2c
 8005788:	fb00 f303 	mul.w	r3, r0, r3
 800578c:	4413      	add	r3, r2
 800578e:	3360      	adds	r3, #96	@ 0x60
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f00a feaf 	bl	80104f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800579a:	bf00      	nop
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	@ 0x28
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	0c5b      	lsrs	r3, r3, #17
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d004      	beq.n	80057e8 <HCD_RXQLVL_IRQHandler+0x46>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b05      	cmp	r3, #5
 80057e2:	f000 80a9 	beq.w	8005938 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057e6:	e0aa      	b.n	800593e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80a6 	beq.w	800593c <HCD_RXQLVL_IRQHandler+0x19a>
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	212c      	movs	r1, #44	@ 0x2c
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	3344      	adds	r3, #68	@ 0x44
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 809b 	beq.w	800593c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	212c      	movs	r1, #44	@ 0x2c
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4413      	add	r3, r2
 8005812:	3350      	adds	r3, #80	@ 0x50
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	441a      	add	r2, r3
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	202c      	movs	r0, #44	@ 0x2c
 8005820:	fb00 f303 	mul.w	r3, r0, r3
 8005824:	440b      	add	r3, r1
 8005826:	334c      	adds	r3, #76	@ 0x4c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d87a      	bhi.n	8005924 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	212c      	movs	r1, #44	@ 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	3344      	adds	r3, #68	@ 0x44
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	b292      	uxth	r2, r2
 8005846:	4619      	mov	r1, r3
 8005848:	f003 f9fe 	bl	8008c48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	212c      	movs	r1, #44	@ 0x2c
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	4413      	add	r3, r2
 8005858:	3344      	adds	r3, #68	@ 0x44
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	441a      	add	r2, r3
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	202c      	movs	r0, #44	@ 0x2c
 8005866:	fb00 f303 	mul.w	r3, r0, r3
 800586a:	440b      	add	r3, r1
 800586c:	3344      	adds	r3, #68	@ 0x44
 800586e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	212c      	movs	r1, #44	@ 0x2c
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	3350      	adds	r3, #80	@ 0x50
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	441a      	add	r2, r3
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	202c      	movs	r0, #44	@ 0x2c
 800588a:	fb00 f303 	mul.w	r3, r0, r3
 800588e:	440b      	add	r3, r1
 8005890:	3350      	adds	r3, #80	@ 0x50
 8005892:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	0cdb      	lsrs	r3, r3, #19
 80058a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	212c      	movs	r1, #44	@ 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	3340      	adds	r3, #64	@ 0x40
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d13c      	bne.n	800593c <HCD_RXQLVL_IRQHandler+0x19a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d039      	beq.n	800593c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	212c      	movs	r1, #44	@ 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	3354      	adds	r3, #84	@ 0x54
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f083 0301 	eor.w	r3, r3, #1
 800590e:	b2d8      	uxtb	r0, r3
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	212c      	movs	r1, #44	@ 0x2c
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	3354      	adds	r3, #84	@ 0x54
 800591e:	4602      	mov	r2, r0
 8005920:	701a      	strb	r2, [r3, #0]
      break;
 8005922:	e00b      	b.n	800593c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	212c      	movs	r1, #44	@ 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	3360      	adds	r3, #96	@ 0x60
 8005932:	2204      	movs	r2, #4
 8005934:	701a      	strb	r2, [r3, #0]
      break;
 8005936:	e001      	b.n	800593c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800593c:	bf00      	nop
  }
}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005972:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d10b      	bne.n	8005996 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f00a fd99 	bl	80104c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f043 0302 	orr.w	r3, r3, #2
 8005994:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d132      	bne.n	8005a06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f043 0308 	orr.w	r3, r3, #8
 80059a6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d126      	bne.n	8005a00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d113      	bne.n	80059e2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80059c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059c4:	d106      	bne.n	80059d4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2102      	movs	r1, #2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f003 faa9 	bl	8008f24 <USB_InitFSLSPClkSel>
 80059d2:	e011      	b.n	80059f8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f003 faa2 	bl	8008f24 <USB_InitFSLSPClkSel>
 80059e0:	e00a      	b.n	80059f8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d106      	bne.n	80059f8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059f0:	461a      	mov	r2, r3
 80059f2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80059f6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f00a fd8f 	bl	801051c <HAL_HCD_PortEnabled_Callback>
 80059fe:	e002      	b.n	8005a06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f00a fd99 	bl	8010538 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d103      	bne.n	8005a18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f043 0320 	orr.w	r3, r3, #32
 8005a16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e12b      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fd fc74 	bl	8003340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	@ 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a90:	f001 fa20 	bl	8006ed4 <HAL_RCC_GetPCLK1Freq>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a81      	ldr	r2, [pc, #516]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d807      	bhi.n	8005ab0 <HAL_I2C_Init+0x84>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a80      	ldr	r2, [pc, #512]	@ (8005ca4 <HAL_I2C_Init+0x278>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bf94      	ite	ls
 8005aa8:	2301      	movls	r3, #1
 8005aaa:	2300      	movhi	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e006      	b.n	8005abe <HAL_I2C_Init+0x92>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca8 <HAL_I2C_Init+0x27c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bf94      	ite	ls
 8005ab8:	2301      	movls	r3, #1
 8005aba:	2300      	movhi	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0e7      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a78      	ldr	r2, [pc, #480]	@ (8005cac <HAL_I2C_Init+0x280>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d802      	bhi.n	8005b00 <HAL_I2C_Init+0xd4>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e009      	b.n	8005b14 <HAL_I2C_Init+0xe8>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	4a69      	ldr	r2, [pc, #420]	@ (8005cb0 <HAL_I2C_Init+0x284>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	3301      	adds	r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	495c      	ldr	r1, [pc, #368]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d819      	bhi.n	8005b68 <HAL_I2C_Init+0x13c>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1e59      	subs	r1, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b48:	400b      	ands	r3, r1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_I2C_Init+0x138>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1e59      	subs	r1, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	e051      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b64:	2304      	movs	r3, #4
 8005b66:	e04f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d111      	bne.n	8005b94 <HAL_I2C_Init+0x168>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e012      	b.n	8005bba <HAL_I2C_Init+0x18e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e58      	subs	r0, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	0099      	lsls	r1, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Init+0x196>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e022      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <HAL_I2C_Init+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1e58      	subs	r0, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	440b      	add	r3, r1
 8005bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	0099      	lsls	r1, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	6809      	ldr	r1, [r1, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6911      	ldr	r1, [r2, #16]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	000186a0 	.word	0x000186a0
 8005ca4:	001e847f 	.word	0x001e847f
 8005ca8:	003d08ff 	.word	0x003d08ff
 8005cac:	431bde83 	.word	0x431bde83
 8005cb0:	10624dd3 	.word	0x10624dd3

08005cb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e128      	b.n	8005f18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a90      	ldr	r2, [pc, #576]	@ (8005f20 <HAL_I2S_Init+0x26c>)
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fd fb75 	bl	80033d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2202      	movs	r2, #2
 8005d08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d060      	beq.n	8005dd4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e001      	b.n	8005d24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d20:	2320      	movs	r3, #32
 8005d22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d802      	bhi.n	8005d32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d32:	2001      	movs	r0, #1
 8005d34:	f001 fa0a 	bl	800714c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d38:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d42:	d125      	bne.n	8005d90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	3305      	adds	r3, #5
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	e01f      	b.n	8005dae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	3305      	adds	r3, #5
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	e00e      	b.n	8005dae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	461a      	mov	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	3305      	adds	r3, #5
 8005dac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4a5c      	ldr	r2, [pc, #368]	@ (8005f24 <HAL_I2S_Init+0x270>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	08db      	lsrs	r3, r3, #3
 8005db8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e003      	b.n	8005ddc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d902      	bls.n	8005de8 <HAL_I2S_Init+0x134>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2bff      	cmp	r3, #255	@ 0xff
 8005de6:	d907      	bls.n	8005df8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	f043 0210 	orr.w	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e08f      	b.n	8005f18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	ea42 0103 	orr.w	r1, r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e16:	f023 030f 	bic.w	r3, r3, #15
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6851      	ldr	r1, [r2, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6892      	ldr	r2, [r2, #8]
 8005e22:	4311      	orrs	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68d2      	ldr	r2, [r2, #12]
 8005e28:	4311      	orrs	r1, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6992      	ldr	r2, [r2, #24]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d161      	bne.n	8005f08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a38      	ldr	r2, [pc, #224]	@ (8005f28 <HAL_I2S_Init+0x274>)
 8005e48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a37      	ldr	r2, [pc, #220]	@ (8005f2c <HAL_I2S_Init+0x278>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_I2S_Init+0x1a4>
 8005e54:	4b36      	ldr	r3, [pc, #216]	@ (8005f30 <HAL_I2S_Init+0x27c>)
 8005e56:	e001      	b.n	8005e5c <HAL_I2S_Init+0x1a8>
 8005e58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	4932      	ldr	r1, [pc, #200]	@ (8005f2c <HAL_I2S_Init+0x278>)
 8005e64:	428a      	cmp	r2, r1
 8005e66:	d101      	bne.n	8005e6c <HAL_I2S_Init+0x1b8>
 8005e68:	4a31      	ldr	r2, [pc, #196]	@ (8005f30 <HAL_I2S_Init+0x27c>)
 8005e6a:	e001      	b.n	8005e70 <HAL_I2S_Init+0x1bc>
 8005e6c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e70:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e74:	f023 030f 	bic.w	r3, r3, #15
 8005e78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f2c <HAL_I2S_Init+0x278>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d101      	bne.n	8005e88 <HAL_I2S_Init+0x1d4>
 8005e84:	4b2a      	ldr	r3, [pc, #168]	@ (8005f30 <HAL_I2S_Init+0x27c>)
 8005e86:	e001      	b.n	8005e8c <HAL_I2S_Init+0x1d8>
 8005e88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	@ (8005f2c <HAL_I2S_Init+0x278>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_I2S_Init+0x1ea>
 8005e9a:	4b25      	ldr	r3, [pc, #148]	@ (8005f30 <HAL_I2S_Init+0x27c>)
 8005e9c:	e001      	b.n	8005ea2 <HAL_I2S_Init+0x1ee>
 8005e9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eae:	d003      	beq.n	8005eb8 <HAL_I2S_Init+0x204>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e001      	b.n	8005ec4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ef0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f2c <HAL_I2S_Init+0x278>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d101      	bne.n	8005f00 <HAL_I2S_Init+0x24c>
 8005efc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <HAL_I2S_Init+0x27c>)
 8005efe:	e001      	b.n	8005f04 <HAL_I2S_Init+0x250>
 8005f00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f04:	897a      	ldrh	r2, [r7, #10]
 8005f06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	0800602b 	.word	0x0800602b
 8005f24:	cccccccd 	.word	0xcccccccd
 8005f28:	08006141 	.word	0x08006141
 8005f2c:	40003800 	.word	0x40003800
 8005f30:	40003400 	.word	0x40003400

08005f34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	881a      	ldrh	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c9a      	adds	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10e      	bne.n	8005fc4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fb4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ffb8 	bl	8005f34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	b292      	uxth	r2, r2
 8005fe0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	1c9a      	adds	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10e      	bne.n	8006022 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006012:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ff93 	bl	8005f48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b04      	cmp	r3, #4
 8006044:	d13a      	bne.n	80060bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d109      	bne.n	8006064 <I2S_IRQHandler+0x3a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d102      	bne.n	8006064 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ffb4 	bl	8005fcc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	d126      	bne.n	80060bc <I2S_IRQHandler+0x92>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b20      	cmp	r3, #32
 800607a:	d11f      	bne.n	80060bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800608a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f043 0202 	orr.w	r2, r3, #2
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff50 	bl	8005f5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d136      	bne.n	8006136 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d109      	bne.n	80060e6 <I2S_IRQHandler+0xbc>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060dc:	2b80      	cmp	r3, #128	@ 0x80
 80060de:	d102      	bne.n	80060e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff45 	bl	8005f70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d122      	bne.n	8006136 <I2S_IRQHandler+0x10c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d11b      	bne.n	8006136 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800610c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006128:	f043 0204 	orr.w	r2, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff13 	bl	8005f5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006136:	bf00      	nop
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a92      	ldr	r2, [pc, #584]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800615a:	4b92      	ldr	r3, [pc, #584]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800615c:	e001      	b.n	8006162 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800615e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a8b      	ldr	r2, [pc, #556]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006178:	4b8a      	ldr	r3, [pc, #552]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800617a:	e001      	b.n	8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800617c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800618c:	d004      	beq.n	8006198 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8099 	bne.w	80062ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d107      	bne.n	80061b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f925 	bl	80063fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9c8 	bl	800655c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d13a      	bne.n	800624c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d035      	beq.n	800624c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80061ea:	4b6e      	ldr	r3, [pc, #440]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061ec:	e001      	b.n	80061f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80061ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4969      	ldr	r1, [pc, #420]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d101      	bne.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80061fe:	4b69      	ldr	r3, [pc, #420]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006200:	e001      	b.n	8006206 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006206:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800620a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800621a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff fe88 	bl	8005f5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b08      	cmp	r3, #8
 8006254:	f040 80c3 	bne.w	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80bd 	beq.w	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006272:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a49      	ldr	r2, [pc, #292]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800627e:	4b49      	ldr	r3, [pc, #292]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006280:	e001      	b.n	8006286 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006282:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4944      	ldr	r1, [pc, #272]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800628e:	428b      	cmp	r3, r1
 8006290:	d101      	bne.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006292:	4b44      	ldr	r3, [pc, #272]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006294:	e001      	b.n	800629a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800629a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800629e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062a0:	2300      	movs	r3, #0
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	f043 0204 	orr.w	r2, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fe4a 	bl	8005f5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062c8:	e089      	b.n	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d107      	bne.n	80062e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8be 	bl	8006460 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d107      	bne.n	80062fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f8fd 	bl	80064f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	d12f      	bne.n	8006368 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d02a      	beq.n	8006368 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006320:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1e      	ldr	r2, [pc, #120]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800632c:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800632e:	e001      	b.n	8006334 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006330:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4919      	ldr	r1, [pc, #100]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800633c:	428b      	cmp	r3, r1
 800633e:	d101      	bne.n	8006344 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006340:	4b18      	ldr	r3, [pc, #96]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006342:	e001      	b.n	8006348 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006348:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800634c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635a:	f043 0202 	orr.w	r2, r3, #2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fdfa 	bl	8005f5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b08      	cmp	r3, #8
 8006370:	d136      	bne.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d031      	beq.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a07      	ldr	r2, [pc, #28]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006386:	4b07      	ldr	r3, [pc, #28]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006388:	e001      	b.n	800638e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800638a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4902      	ldr	r1, [pc, #8]	@ (80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006396:	428b      	cmp	r3, r1
 8006398:	d106      	bne.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800639a:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800639c:	e006      	b.n	80063ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800639e:	bf00      	nop
 80063a0:	40003800 	.word	0x40003800
 80063a4:	40003400 	.word	0x40003400
 80063a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	f043 0204 	orr.w	r2, r3, #4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fdc0 	bl	8005f5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063dc:	e000      	b.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063de:	bf00      	nop
}
 80063e0:	bf00      	nop
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	1c99      	adds	r1, r3, #2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6251      	str	r1, [r2, #36]	@ 0x24
 800640e:	881a      	ldrh	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800643c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ffc9 	bl	80063e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	1c99      	adds	r1, r3, #2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6251      	str	r1, [r2, #36]	@ 0x24
 8006472:	8819      	ldrh	r1, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <I2SEx_TxISR_I2SExt+0x90>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d101      	bne.n	8006482 <I2SEx_TxISR_I2SExt+0x22>
 800647e:	4b1d      	ldr	r3, [pc, #116]	@ (80064f4 <I2SEx_TxISR_I2SExt+0x94>)
 8006480:	e001      	b.n	8006486 <I2SEx_TxISR_I2SExt+0x26>
 8006482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006486:	460a      	mov	r2, r1
 8006488:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d121      	bne.n	80064e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a12      	ldr	r2, [pc, #72]	@ (80064f0 <I2SEx_TxISR_I2SExt+0x90>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d101      	bne.n	80064b0 <I2SEx_TxISR_I2SExt+0x50>
 80064ac:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <I2SEx_TxISR_I2SExt+0x94>)
 80064ae:	e001      	b.n	80064b4 <I2SEx_TxISR_I2SExt+0x54>
 80064b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	490d      	ldr	r1, [pc, #52]	@ (80064f0 <I2SEx_TxISR_I2SExt+0x90>)
 80064bc:	428b      	cmp	r3, r1
 80064be:	d101      	bne.n	80064c4 <I2SEx_TxISR_I2SExt+0x64>
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <I2SEx_TxISR_I2SExt+0x94>)
 80064c2:	e001      	b.n	80064c8 <I2SEx_TxISR_I2SExt+0x68>
 80064c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff81 	bl	80063e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40003800 	.word	0x40003800
 80064f4:	40003400 	.word	0x40003400

080064f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68d8      	ldr	r0, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	1c99      	adds	r1, r3, #2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006510:	b282      	uxth	r2, r0
 8006512:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d113      	bne.n	8006554 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800653a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff4a 	bl	80063e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a20      	ldr	r2, [pc, #128]	@ (80065ec <I2SEx_RxISR_I2SExt+0x90>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <I2SEx_RxISR_I2SExt+0x16>
 800656e:	4b20      	ldr	r3, [pc, #128]	@ (80065f0 <I2SEx_RxISR_I2SExt+0x94>)
 8006570:	e001      	b.n	8006576 <I2SEx_RxISR_I2SExt+0x1a>
 8006572:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006576:	68d8      	ldr	r0, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	1c99      	adds	r1, r3, #2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006582:	b282      	uxth	r2, r0
 8006584:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d121      	bne.n	80065e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a12      	ldr	r2, [pc, #72]	@ (80065ec <I2SEx_RxISR_I2SExt+0x90>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d101      	bne.n	80065ac <I2SEx_RxISR_I2SExt+0x50>
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <I2SEx_RxISR_I2SExt+0x94>)
 80065aa:	e001      	b.n	80065b0 <I2SEx_RxISR_I2SExt+0x54>
 80065ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	490d      	ldr	r1, [pc, #52]	@ (80065ec <I2SEx_RxISR_I2SExt+0x90>)
 80065b8:	428b      	cmp	r3, r1
 80065ba:	d101      	bne.n	80065c0 <I2SEx_RxISR_I2SExt+0x64>
 80065bc:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <I2SEx_RxISR_I2SExt+0x94>)
 80065be:	e001      	b.n	80065c4 <I2SEx_RxISR_I2SExt+0x68>
 80065c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff03 	bl	80063e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40003800 	.word	0x40003800
 80065f0:	40003400 	.word	0x40003400

080065f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e267      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d075      	beq.n	80066fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006612:	4b88      	ldr	r3, [pc, #544]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 030c 	and.w	r3, r3, #12
 800661a:	2b04      	cmp	r3, #4
 800661c:	d00c      	beq.n	8006638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800661e:	4b85      	ldr	r3, [pc, #532]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006626:	2b08      	cmp	r3, #8
 8006628:	d112      	bne.n	8006650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800662a:	4b82      	ldr	r3, [pc, #520]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006636:	d10b      	bne.n	8006650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006638:	4b7e      	ldr	r3, [pc, #504]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05b      	beq.n	80066fc <HAL_RCC_OscConfig+0x108>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d157      	bne.n	80066fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e242      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006658:	d106      	bne.n	8006668 <HAL_RCC_OscConfig+0x74>
 800665a:	4b76      	ldr	r3, [pc, #472]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a75      	ldr	r2, [pc, #468]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e01d      	b.n	80066a4 <HAL_RCC_OscConfig+0xb0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006670:	d10c      	bne.n	800668c <HAL_RCC_OscConfig+0x98>
 8006672:	4b70      	ldr	r3, [pc, #448]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a6f      	ldr	r2, [pc, #444]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b6d      	ldr	r3, [pc, #436]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a6c      	ldr	r2, [pc, #432]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e00b      	b.n	80066a4 <HAL_RCC_OscConfig+0xb0>
 800668c:	4b69      	ldr	r3, [pc, #420]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a68      	ldr	r2, [pc, #416]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b66      	ldr	r3, [pc, #408]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a65      	ldr	r2, [pc, #404]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800669e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d013      	beq.n	80066d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ac:	f7fd fa04 	bl	8003ab8 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066b4:	f7fd fa00 	bl	8003ab8 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	@ 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e207      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0xc0>
 80066d2:	e014      	b.n	80066fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fd f9f0 	bl	8003ab8 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066dc:	f7fd f9ec 	bl	8003ab8 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b64      	cmp	r3, #100	@ 0x64
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e1f3      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ee:	4b51      	ldr	r3, [pc, #324]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0xe8>
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d063      	beq.n	80067d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800670a:	4b4a      	ldr	r3, [pc, #296]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 030c 	and.w	r3, r3, #12
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006716:	4b47      	ldr	r3, [pc, #284]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800671e:	2b08      	cmp	r3, #8
 8006720:	d11c      	bne.n	800675c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006722:	4b44      	ldr	r3, [pc, #272]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d116      	bne.n	800675c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800672e:	4b41      	ldr	r3, [pc, #260]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_RCC_OscConfig+0x152>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d001      	beq.n	8006746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e1c7      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006746:	4b3b      	ldr	r3, [pc, #236]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4937      	ldr	r1, [pc, #220]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006756:	4313      	orrs	r3, r2
 8006758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800675a:	e03a      	b.n	80067d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d020      	beq.n	80067a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006764:	4b34      	ldr	r3, [pc, #208]	@ (8006838 <HAL_RCC_OscConfig+0x244>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fd f9a5 	bl	8003ab8 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006772:	f7fd f9a1 	bl	8003ab8 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e1a8      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006784:	4b2b      	ldr	r3, [pc, #172]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006790:	4b28      	ldr	r3, [pc, #160]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4925      	ldr	r1, [pc, #148]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	600b      	str	r3, [r1, #0]
 80067a4:	e015      	b.n	80067d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067a6:	4b24      	ldr	r3, [pc, #144]	@ (8006838 <HAL_RCC_OscConfig+0x244>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fd f984 	bl	8003ab8 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067b4:	f7fd f980 	bl	8003ab8 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e187      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d036      	beq.n	800684c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e6:	4b15      	ldr	r3, [pc, #84]	@ (800683c <HAL_RCC_OscConfig+0x248>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fd f964 	bl	8003ab8 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067f4:	f7fd f960 	bl	8003ab8 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e167      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006806:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <HAL_RCC_OscConfig+0x240>)
 8006808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x200>
 8006812:	e01b      	b.n	800684c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006814:	4b09      	ldr	r3, [pc, #36]	@ (800683c <HAL_RCC_OscConfig+0x248>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800681a:	f7fd f94d 	bl	8003ab8 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006820:	e00e      	b.n	8006840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006822:	f7fd f949 	bl	8003ab8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d907      	bls.n	8006840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e150      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
 8006834:	40023800 	.word	0x40023800
 8006838:	42470000 	.word	0x42470000
 800683c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006840:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ea      	bne.n	8006822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8097 	beq.w	8006988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685e:	4b81      	ldr	r3, [pc, #516]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	4a7c      	ldr	r2, [pc, #496]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006878:	6413      	str	r3, [r2, #64]	@ 0x40
 800687a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006886:	2301      	movs	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688a:	4b77      	ldr	r3, [pc, #476]	@ (8006a68 <HAL_RCC_OscConfig+0x474>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d118      	bne.n	80068c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006896:	4b74      	ldr	r3, [pc, #464]	@ (8006a68 <HAL_RCC_OscConfig+0x474>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a73      	ldr	r2, [pc, #460]	@ (8006a68 <HAL_RCC_OscConfig+0x474>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068a2:	f7fd f909 	bl	8003ab8 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fd f905 	bl	8003ab8 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e10c      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006a68 <HAL_RCC_OscConfig+0x474>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d106      	bne.n	80068de <HAL_RCC_OscConfig+0x2ea>
 80068d0:	4b64      	ldr	r3, [pc, #400]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d4:	4a63      	ldr	r2, [pc, #396]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	6713      	str	r3, [r2, #112]	@ 0x70
 80068dc:	e01c      	b.n	8006918 <HAL_RCC_OscConfig+0x324>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d10c      	bne.n	8006900 <HAL_RCC_OscConfig+0x30c>
 80068e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0x324>
 8006900:	4b58      	ldr	r3, [pc, #352]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006904:	4a57      	ldr	r2, [pc, #348]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	6713      	str	r3, [r2, #112]	@ 0x70
 800690c:	4b55      	ldr	r3, [pc, #340]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	4a54      	ldr	r2, [pc, #336]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006912:	f023 0304 	bic.w	r3, r3, #4
 8006916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d015      	beq.n	800694c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006920:	f7fd f8ca 	bl	8003ab8 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006926:	e00a      	b.n	800693e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006928:	f7fd f8c6 	bl	8003ab8 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e0cb      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693e:	4b49      	ldr	r3, [pc, #292]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ee      	beq.n	8006928 <HAL_RCC_OscConfig+0x334>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694c:	f7fd f8b4 	bl	8003ab8 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006952:	e00a      	b.n	800696a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006954:	f7fd f8b0 	bl	8003ab8 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006962:	4293      	cmp	r3, r2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e0b5      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800696a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1ee      	bne.n	8006954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697c:	4b39      	ldr	r3, [pc, #228]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	4a38      	ldr	r2, [pc, #224]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80a1 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006992:	4b34      	ldr	r3, [pc, #208]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b08      	cmp	r3, #8
 800699c:	d05c      	beq.n	8006a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d141      	bne.n	8006a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a6:	4b31      	ldr	r3, [pc, #196]	@ (8006a6c <HAL_RCC_OscConfig+0x478>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ac:	f7fd f884 	bl	8003ab8 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b4:	f7fd f880 	bl	8003ab8 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e087      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c6:	4b27      	ldr	r3, [pc, #156]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f0      	bne.n	80069b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	019b      	lsls	r3, r3, #6
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	491b      	ldr	r1, [pc, #108]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a6c <HAL_RCC_OscConfig+0x478>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a02:	f7fd f859 	bl	8003ab8 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0a:	f7fd f855 	bl	8003ab8 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e05c      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1c:	4b11      	ldr	r3, [pc, #68]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x416>
 8006a28:	e054      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2a:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_OscConfig+0x478>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a30:	f7fd f842 	bl	8003ab8 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fd f83e 	bl	8003ab8 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e045      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCC_OscConfig+0x470>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x444>
 8006a56:	e03d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e038      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40007000 	.word	0x40007000
 8006a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <HAL_RCC_OscConfig+0x4ec>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d028      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d121      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d11a      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d111      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d107      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40023800 	.word	0x40023800

08006ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0cc      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006af8:	4b68      	ldr	r3, [pc, #416]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d90c      	bls.n	8006b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b06:	4b65      	ldr	r3, [pc, #404]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0e:	4b63      	ldr	r3, [pc, #396]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d001      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0b8      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d020      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b38:	4b59      	ldr	r3, [pc, #356]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	4a58      	ldr	r2, [pc, #352]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b50:	4b53      	ldr	r3, [pc, #332]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	4a52      	ldr	r2, [pc, #328]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b5c:	4b50      	ldr	r3, [pc, #320]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	494d      	ldr	r1, [pc, #308]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d044      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d107      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b82:	4b47      	ldr	r3, [pc, #284]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d119      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e07f      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e06f      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e067      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bc2:	4b37      	ldr	r3, [pc, #220]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f023 0203 	bic.w	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4934      	ldr	r1, [pc, #208]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd4:	f7fc ff70 	bl	8003ab8 <HAL_GetTick>
 8006bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bda:	e00a      	b.n	8006bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bdc:	f7fc ff6c 	bl	8003ab8 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e04f      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 020c 	and.w	r2, r3, #12
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1eb      	bne.n	8006bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c04:	4b25      	ldr	r3, [pc, #148]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d20c      	bcs.n	8006c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b22      	ldr	r3, [pc, #136]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1a:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e032      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c38:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	4916      	ldr	r1, [pc, #88]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c56:	4b12      	ldr	r3, [pc, #72]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	490e      	ldr	r1, [pc, #56]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c6a:	f000 f821 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	091b      	lsrs	r3, r3, #4
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	490a      	ldr	r1, [pc, #40]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c7c:	5ccb      	ldrb	r3, [r1, r3]
 8006c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c82:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c86:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fc fcf4 	bl	8003678 <HAL_InitTick>

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40023c00 	.word	0x40023c00
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	080157c0 	.word	0x080157c0
 8006ca8:	2000022c 	.word	0x2000022c
 8006cac:	20000230 	.word	0x20000230

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb4:	b094      	sub	sp, #80	@ 0x50
 8006cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc8:	4b79      	ldr	r3, [pc, #484]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	f200 80e1 	bhi.w	8006e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d003      	beq.n	8006cea <HAL_RCC_GetSysClockFreq+0x3a>
 8006ce2:	e0db      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ce4:	4b73      	ldr	r3, [pc, #460]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006ce8:	e0db      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cea:	4b73      	ldr	r3, [pc, #460]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cee:	e0d8      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d063      	beq.n	8006dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d06:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	099b      	lsrs	r3, r3, #6
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d22:	4622      	mov	r2, r4
 8006d24:	462b      	mov	r3, r5
 8006d26:	f04f 0000 	mov.w	r0, #0
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	0159      	lsls	r1, r3, #5
 8006d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d34:	0150      	lsls	r0, r2, #5
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	1a51      	subs	r1, r2, r1
 8006d3e:	6139      	str	r1, [r7, #16]
 8006d40:	4629      	mov	r1, r5
 8006d42:	eb63 0301 	sbc.w	r3, r3, r1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d54:	4659      	mov	r1, fp
 8006d56:	018b      	lsls	r3, r1, #6
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d5e:	4651      	mov	r1, sl
 8006d60:	018a      	lsls	r2, r1, #6
 8006d62:	4651      	mov	r1, sl
 8006d64:	ebb2 0801 	subs.w	r8, r2, r1
 8006d68:	4659      	mov	r1, fp
 8006d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	f04f 0300 	mov.w	r3, #0
 8006d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d82:	4690      	mov	r8, r2
 8006d84:	4699      	mov	r9, r3
 8006d86:	4623      	mov	r3, r4
 8006d88:	eb18 0303 	adds.w	r3, r8, r3
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	462b      	mov	r3, r5
 8006d90:	eb49 0303 	adc.w	r3, r9, r3
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006da2:	4629      	mov	r1, r5
 8006da4:	024b      	lsls	r3, r1, #9
 8006da6:	4621      	mov	r1, r4
 8006da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dac:	4621      	mov	r1, r4
 8006dae:	024a      	lsls	r2, r1, #9
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db6:	2200      	movs	r2, #0
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dc0:	f7f9 ff12 	bl	8000be8 <__aeabi_uldivmod>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4613      	mov	r3, r2
 8006dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dcc:	e058      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dce:	4b38      	ldr	r3, [pc, #224]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	099b      	lsrs	r3, r3, #6
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	4611      	mov	r1, r2
 8006dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	2300      	movs	r3, #0
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	0159      	lsls	r1, r3, #5
 8006df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dfa:	0150      	lsls	r0, r2, #5
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4641      	mov	r1, r8
 8006e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e20:	ebb2 040a 	subs.w	r4, r2, sl
 8006e24:	eb63 050b 	sbc.w	r5, r3, fp
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	00eb      	lsls	r3, r5, #3
 8006e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e36:	00e2      	lsls	r2, r4, #3
 8006e38:	4614      	mov	r4, r2
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	4643      	mov	r3, r8
 8006e3e:	18e3      	adds	r3, r4, r3
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	464b      	mov	r3, r9
 8006e44:	eb45 0303 	adc.w	r3, r5, r3
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e56:	4629      	mov	r1, r5
 8006e58:	028b      	lsls	r3, r1, #10
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e60:	4621      	mov	r1, r4
 8006e62:	028a      	lsls	r2, r1, #10
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	61fa      	str	r2, [r7, #28]
 8006e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e74:	f7f9 feb8 	bl	8000be8 <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e9c:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3750      	adds	r7, #80	@ 0x50
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	00f42400 	.word	0x00f42400
 8006eb8:	007a1200 	.word	0x007a1200

08006ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ec0:	4b03      	ldr	r3, [pc, #12]	@ (8006ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	2000022c 	.word	0x2000022c

08006ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ed8:	f7ff fff0 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006edc:	4602      	mov	r2, r0
 8006ede:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	0a9b      	lsrs	r3, r3, #10
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	4903      	ldr	r1, [pc, #12]	@ (8006ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eea:	5ccb      	ldrb	r3, [r1, r3]
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	080157d0 	.word	0x080157d0

08006efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f00:	f7ff ffdc 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	0b5b      	lsrs	r3, r3, #13
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4903      	ldr	r1, [pc, #12]	@ (8006f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	080157d0 	.word	0x080157d0

08006f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	220f      	movs	r2, #15
 8006f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f34:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0203 	and.w	r2, r3, #3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f40:	4b0f      	ldr	r3, [pc, #60]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f66:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <HAL_RCC_GetClockConfig+0x60>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0207 	and.w	r2, r3, #7
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40023c00 	.word	0x40023c00

08006f88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d035      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fb0:	4b62      	ldr	r3, [pc, #392]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fb6:	f7fc fd7f 	bl	8003ab8 <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fbe:	f7fc fd7b 	bl	8003ab8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e0b0      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f0      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	019a      	lsls	r2, r3, #6
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	071b      	lsls	r3, r3, #28
 8006fe8:	4955      	ldr	r1, [pc, #340]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ff0:	4b52      	ldr	r3, [pc, #328]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff6:	f7fc fd5f 	bl	8003ab8 <HAL_GetTick>
 8006ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ffe:	f7fc fd5b 	bl	8003ab8 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e090      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007010:	4b4b      	ldr	r3, [pc, #300]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8083 	beq.w	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b44      	ldr	r3, [pc, #272]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007032:	4a43      	ldr	r2, [pc, #268]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007038:	6413      	str	r3, [r2, #64]	@ 0x40
 800703a:	4b41      	ldr	r3, [pc, #260]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007046:	4b3f      	ldr	r3, [pc, #252]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a3e      	ldr	r2, [pc, #248]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800704c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007052:	f7fc fd31 	bl	8003ab8 <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007058:	e008      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800705a:	f7fc fd2d 	bl	8003ab8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e062      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800706c:	4b35      	ldr	r3, [pc, #212]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007078:	4b31      	ldr	r3, [pc, #196]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007080:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02f      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d028      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007096:	4b2a      	ldr	r3, [pc, #168]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800709e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070a0:	4b29      	ldr	r3, [pc, #164]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070a6:	4b28      	ldr	r3, [pc, #160]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070ac:	4a24      	ldr	r2, [pc, #144]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070b2:	4b23      	ldr	r3, [pc, #140]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d114      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070be:	f7fc fcfb 	bl	8003ab8 <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c4:	e00a      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c6:	f7fc fcf7 	bl	8003ab8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e02a      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070dc:	4b18      	ldr	r3, [pc, #96]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0ee      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f4:	d10d      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070f6:	4b12      	ldr	r3, [pc, #72]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800710a:	490d      	ldr	r1, [pc, #52]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]
 8007110:	e005      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007112:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4a0a      	ldr	r2, [pc, #40]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007118:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800711c:	6093      	str	r3, [r2, #8]
 800711e:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007120:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712a:	4905      	ldr	r1, [pc, #20]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800712c:	4313      	orrs	r3, r2
 800712e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	42470068 	.word	0x42470068
 8007140:	40023800 	.word	0x40023800
 8007144:	40007000 	.word	0x40007000
 8007148:	42470e40 	.word	0x42470e40

0800714c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d13e      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800716a:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d12f      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007180:	4b1e      	ldr	r3, [pc, #120]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007182:	617b      	str	r3, [r7, #20]
          break;
 8007184:	e02f      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007186:	4b1c      	ldr	r3, [pc, #112]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007192:	d108      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007194:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800719c:	4a18      	ldr	r2, [pc, #96]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	e007      	b.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071a6:	4b14      	ldr	r3, [pc, #80]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ae:	4a15      	ldr	r2, [pc, #84]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80071b6:	4b10      	ldr	r3, [pc, #64]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071bc:	099b      	lsrs	r3, r3, #6
 80071be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80071ca:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071d0:	0f1b      	lsrs	r3, r3, #28
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
          break;
 80071de:	e002      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
          break;
 80071e4:	bf00      	nop
        }
      }
      break;
 80071e6:	bf00      	nop
    }
  }
  return frequency;
 80071e8:	697b      	ldr	r3, [r7, #20]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40023800 	.word	0x40023800
 80071fc:	00bb8000 	.word	0x00bb8000
 8007200:	007a1200 	.word	0x007a1200
 8007204:	00f42400 	.word	0x00f42400

08007208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e07b      	b.n	8007312 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	d108      	bne.n	8007234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800722a:	d009      	beq.n	8007240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	61da      	str	r2, [r3, #28]
 8007232:	e005      	b.n	8007240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fc f938 	bl	80034d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007276:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c4:	ea42 0103 	orr.w	r1, r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	f003 0104 	and.w	r1, r3, #4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	f003 0210 	and.w	r2, r3, #16
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007300:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e041      	b.n	80073b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f839 	bl	80073b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f000 f9d7 	bl	800770c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d001      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e04e      	b.n	8007482 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a23      	ldr	r2, [pc, #140]	@ (8007490 <HAL_TIM_Base_Start_IT+0xc4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d022      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740e:	d01d      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1f      	ldr	r2, [pc, #124]	@ (8007494 <HAL_TIM_Base_Start_IT+0xc8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d018      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a1e      	ldr	r2, [pc, #120]	@ (8007498 <HAL_TIM_Base_Start_IT+0xcc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d013      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a1c      	ldr	r2, [pc, #112]	@ (800749c <HAL_TIM_Base_Start_IT+0xd0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00e      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1b      	ldr	r2, [pc, #108]	@ (80074a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d009      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a19      	ldr	r2, [pc, #100]	@ (80074a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d004      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x80>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a18      	ldr	r2, [pc, #96]	@ (80074a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d111      	bne.n	8007470 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b06      	cmp	r3, #6
 800745c:	d010      	beq.n	8007480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746e:	e007      	b.n	8007480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40010400 	.word	0x40010400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40001800 	.word	0x40001800

080074ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d122      	bne.n	8007508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d11b      	bne.n	8007508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0202 	mvn.w	r2, #2
 80074d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8ee 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80074f4:	e005      	b.n	8007502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8e0 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8f1 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b04      	cmp	r3, #4
 8007514:	d122      	bne.n	800755c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b04      	cmp	r3, #4
 8007522:	d11b      	bne.n	800755c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0204 	mvn.w	r2, #4
 800752c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8c4 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007548:	e005      	b.n	8007556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f8b6 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8c7 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	2b08      	cmp	r3, #8
 8007568:	d122      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d11b      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0208 	mvn.w	r2, #8
 8007580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2204      	movs	r2, #4
 8007586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f89a 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 800759c:	e005      	b.n	80075aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f88c 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f89d 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d122      	bne.n	8007604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d11b      	bne.n	8007604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0210 	mvn.w	r2, #16
 80075d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2208      	movs	r2, #8
 80075da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f870 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80075f0:	e005      	b.n	80075fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f862 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f873 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b01      	cmp	r3, #1
 8007610:	d10e      	bne.n	8007630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b01      	cmp	r3, #1
 800761e:	d107      	bne.n	8007630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0201 	mvn.w	r2, #1
 8007628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fb fe44 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763a:	2b80      	cmp	r3, #128	@ 0x80
 800763c:	d10e      	bne.n	800765c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007648:	2b80      	cmp	r3, #128	@ 0x80
 800764a:	d107      	bne.n	800765c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f902 	bl	8007860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d10e      	bne.n	8007688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007674:	2b40      	cmp	r3, #64	@ 0x40
 8007676:	d107      	bne.n	8007688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f838 	bl	80076f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b20      	cmp	r3, #32
 8007694:	d10e      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d107      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0220 	mvn.w	r2, #32
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8cc 	bl	800784c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a40      	ldr	r2, [pc, #256]	@ (8007820 <TIM_Base_SetConfig+0x114>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772a:	d00f      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a3d      	ldr	r2, [pc, #244]	@ (8007824 <TIM_Base_SetConfig+0x118>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3c      	ldr	r2, [pc, #240]	@ (8007828 <TIM_Base_SetConfig+0x11c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a3b      	ldr	r2, [pc, #236]	@ (800782c <TIM_Base_SetConfig+0x120>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a3a      	ldr	r2, [pc, #232]	@ (8007830 <TIM_Base_SetConfig+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d108      	bne.n	800775e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2f      	ldr	r2, [pc, #188]	@ (8007820 <TIM_Base_SetConfig+0x114>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d02b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776c:	d027      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2c      	ldr	r2, [pc, #176]	@ (8007824 <TIM_Base_SetConfig+0x118>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d023      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2b      	ldr	r2, [pc, #172]	@ (8007828 <TIM_Base_SetConfig+0x11c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2a      	ldr	r2, [pc, #168]	@ (800782c <TIM_Base_SetConfig+0x120>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a29      	ldr	r2, [pc, #164]	@ (8007830 <TIM_Base_SetConfig+0x124>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d017      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a28      	ldr	r2, [pc, #160]	@ (8007834 <TIM_Base_SetConfig+0x128>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <TIM_Base_SetConfig+0x12c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00f      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a26      	ldr	r2, [pc, #152]	@ (800783c <TIM_Base_SetConfig+0x130>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a25      	ldr	r2, [pc, #148]	@ (8007840 <TIM_Base_SetConfig+0x134>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a24      	ldr	r2, [pc, #144]	@ (8007844 <TIM_Base_SetConfig+0x138>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a23      	ldr	r2, [pc, #140]	@ (8007848 <TIM_Base_SetConfig+0x13c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d108      	bne.n	80077d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007820 <TIM_Base_SetConfig+0x114>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_Base_SetConfig+0xf8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007830 <TIM_Base_SetConfig+0x124>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d103      	bne.n	800780c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	615a      	str	r2, [r3, #20]
}
 8007812:	bf00      	nop
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800
 800782c:	40000c00 	.word	0x40000c00
 8007830:	40010400 	.word	0x40010400
 8007834:	40014000 	.word	0x40014000
 8007838:	40014400 	.word	0x40014400
 800783c:	40014800 	.word	0x40014800
 8007840:	40001800 	.word	0x40001800
 8007844:	40001c00 	.word	0x40001c00
 8007848:	40002000 	.word	0x40002000

0800784c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e03f      	b.n	8007906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fb fe60 	bl	8003560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2224      	movs	r2, #36	@ 0x24
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fddf 	bl	800847c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695a      	ldr	r2, [r3, #20]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b08a      	sub	sp, #40	@ 0x28
 8007912:	af02      	add	r7, sp, #8
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b20      	cmp	r3, #32
 800792c:	d17c      	bne.n	8007a28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_Transmit+0x2c>
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e075      	b.n	8007a2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UART_Transmit+0x3e>
 8007948:	2302      	movs	r3, #2
 800794a:	e06e      	b.n	8007a2a <HAL_UART_Transmit+0x11c>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2221      	movs	r2, #33	@ 0x21
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007962:	f7fc f8a9 	bl	8003ab8 <HAL_GetTick>
 8007966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797c:	d108      	bne.n	8007990 <HAL_UART_Transmit+0x82>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	e003      	b.n	8007998 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80079a0:	e02a      	b.n	80079f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2200      	movs	r2, #0
 80079aa:	2180      	movs	r1, #128	@ 0x80
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fb1f 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e036      	b.n	8007a2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10b      	bne.n	80079da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	3302      	adds	r3, #2
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e007      	b.n	80079ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3301      	adds	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1cf      	bne.n	80079a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2140      	movs	r1, #64	@ 0x40
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 faef 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e006      	b.n	8007a2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d11d      	bne.n	8007a88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_UART_Receive_IT+0x26>
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e016      	b.n	8007a8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Receive_IT+0x38>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e00f      	b.n	8007a8a <HAL_UART_Receive_IT+0x58>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fb24 	bl	80080cc <UART_Start_Receive_IT>
 8007a84:	4603      	mov	r3, r0
 8007a86:	e000      	b.n	8007a8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b0ba      	sub	sp, #232	@ 0xe8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10f      	bne.n	8007afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <HAL_UART_IRQHandler+0x66>
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fc07 	bl	8008306 <UART_Receive_IT>
      return;
 8007af8:	e256      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80de 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x22c>
 8007b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80d1 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <HAL_UART_IRQHandler+0xae>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	f043 0201 	orr.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_UART_IRQHandler+0xd2>
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <HAL_UART_IRQHandler+0xf6>
 8007b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d011      	beq.n	8007bba <HAL_UART_IRQHandler+0x126>
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	f043 0208 	orr.w	r2, r3, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 81ed 	beq.w	8007f9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_UART_IRQHandler+0x14e>
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb92 	bl	8008306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bec:	2b40      	cmp	r3, #64	@ 0x40
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_UART_IRQHandler+0x17a>
 8007c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d04f      	beq.n	8007cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa9a 	bl	8008148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d141      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3314      	adds	r3, #20
 8007c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3314      	adds	r3, #20
 8007c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1d9      	bne.n	8007c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7a:	4a7d      	ldr	r2, [pc, #500]	@ (8007e70 <HAL_UART_IRQHandler+0x3dc>)
 8007c7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fc f89a 	bl	8003dbc <HAL_DMA_Abort_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	e00e      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f990 	bl	8007fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	e00a      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f98c 	bl	8007fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cac:	e006      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f988 	bl	8007fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007cba:	e170      	b.n	8007f9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	bf00      	nop
    return;
 8007cbe:	e16e      	b.n	8007f9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f040 814a 	bne.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8143 	beq.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 813c 	beq.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	60bb      	str	r3, [r7, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b40      	cmp	r3, #64	@ 0x40
 8007d08:	f040 80b4 	bne.w	8007e74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8140 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f080 8139 	bcs.w	8007fa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d42:	f000 8088 	beq.w	8007e56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1d9      	bne.n	8007d46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e1      	bne.n	8007d92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3314      	adds	r3, #20
 8007dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e3      	bne.n	8007dce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e3      	bne.n	8007e14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fb ff43 	bl	8003cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8b6 	bl	8007fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e6c:	e099      	b.n	8007fa2 <HAL_UART_IRQHandler+0x50e>
 8007e6e:	bf00      	nop
 8007e70:	0800820f 	.word	0x0800820f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 808b 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8086 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e3      	bne.n	8007e9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e3      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f3c:	61fa      	str	r2, [r7, #28]
 8007f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	69b9      	ldr	r1, [r7, #24]
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f83e 	bl	8007fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f5c:	e023      	b.n	8007fa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_UART_IRQHandler+0x4ea>
 8007f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f95d 	bl	8008236 <UART_Transmit_IT>
    return;
 8007f7c:	e014      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x514>
 8007f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d008      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f99d 	bl	80082d6 <UART_EndTransmit_IT>
    return;
 8007f9c:	e004      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
    return;
 8007f9e:	bf00      	nop
 8007fa0:	e002      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fa6:	bf00      	nop
  }
}
 8007fa8:	37e8      	adds	r7, #232	@ 0xe8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop

08007fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b090      	sub	sp, #64	@ 0x40
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008000:	e050      	b.n	80080a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d04c      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800800a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <UART_WaitOnFlagUntilTimeout+0x30>
 8008010:	f7fb fd52 	bl	8003ab8 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801c:	429a      	cmp	r2, r3
 800801e:	d241      	bcs.n	80080a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008040:	637a      	str	r2, [r7, #52]	@ 0x34
 8008042:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3314      	adds	r3, #20
 800805a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	613b      	str	r3, [r7, #16]
   return(result);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f023 0301 	bic.w	r3, r3, #1
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3314      	adds	r3, #20
 8008072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008074:	623a      	str	r2, [r7, #32]
 8008076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	69f9      	ldr	r1, [r7, #28]
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	61bb      	str	r3, [r7, #24]
   return(result);
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e5      	bne.n	8008054 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e00f      	b.n	80080c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d09f      	beq.n	8008002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3740      	adds	r7, #64	@ 0x40
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	88fa      	ldrh	r2, [r7, #6]
 80080e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2222      	movs	r2, #34	@ 0x22
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008118:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0201 	orr.w	r2, r2, #1
 8008128:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f042 0220 	orr.w	r2, r2, #32
 8008138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b095      	sub	sp, #84	@ 0x54
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	330c      	adds	r3, #12
 800816e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008170:	643a      	str	r2, [r7, #64]	@ 0x40
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e5      	bne.n	8008150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3314      	adds	r3, #20
 800818a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	61fb      	str	r3, [r7, #28]
   return(result);
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3314      	adds	r3, #20
 80081a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e5      	bne.n	8008184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d119      	bne.n	80081f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f023 0310 	bic.w	r3, r3, #16
 80081d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081e0:	61ba      	str	r2, [r7, #24]
 80081e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e5      	bne.n	80081c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008202:	bf00      	nop
 8008204:	3754      	adds	r7, #84	@ 0x54
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff fecb 	bl	8007fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b21      	cmp	r3, #33	@ 0x21
 8008248:	d13e      	bne.n	80082c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008252:	d114      	bne.n	800827e <UART_Transmit_IT+0x48>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d110      	bne.n	800827e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	1c9a      	adds	r2, r3, #2
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	621a      	str	r2, [r3, #32]
 800827c:	e008      	b.n	8008290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	1c59      	adds	r1, r3, #1
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6211      	str	r1, [r2, #32]
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4619      	mov	r1, r3
 800829e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10f      	bne.n	80082c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e000      	b.n	80082ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082c8:	2302      	movs	r3, #2
  }
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fe5a 	bl	8007fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b08c      	sub	sp, #48	@ 0x30
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b22      	cmp	r3, #34	@ 0x22
 8008318:	f040 80ab 	bne.w	8008472 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008324:	d117      	bne.n	8008356 <UART_Receive_IT+0x50>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d113      	bne.n	8008356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008336:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008344:	b29a      	uxth	r2, r3
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	1c9a      	adds	r2, r3, #2
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	629a      	str	r2, [r3, #40]	@ 0x28
 8008354:	e026      	b.n	80083a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800835c:	2300      	movs	r3, #0
 800835e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008368:	d007      	beq.n	800837a <UART_Receive_IT+0x74>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <UART_Receive_IT+0x82>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e008      	b.n	800839a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008394:	b2da      	uxtb	r2, r3
 8008396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4619      	mov	r1, r3
 80083b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d15a      	bne.n	800846e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0220 	bic.w	r2, r2, #32
 80083c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d135      	bne.n	8008464 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	613b      	str	r3, [r7, #16]
   return(result);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f023 0310 	bic.w	r3, r3, #16
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	330c      	adds	r3, #12
 800841c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841e:	623a      	str	r2, [r7, #32]
 8008420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	69f9      	ldr	r1, [r7, #28]
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	61bb      	str	r3, [r7, #24]
   return(result);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e5      	bne.n	80083fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b10      	cmp	r3, #16
 800843e:	d10a      	bne.n	8008456 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff fdbb 	bl	8007fd8 <HAL_UARTEx_RxEventCallback>
 8008462:	e002      	b.n	800846a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fa fe97 	bl	8003198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e002      	b.n	8008474 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008472:	2302      	movs	r3, #2
  }
}
 8008474:	4618      	mov	r0, r3
 8008476:	3730      	adds	r7, #48	@ 0x30
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800847c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008480:	b0c0      	sub	sp, #256	@ 0x100
 8008482:	af00      	add	r7, sp, #0
 8008484:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	68d9      	ldr	r1, [r3, #12]
 800849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	ea40 0301 	orr.w	r3, r0, r1
 80084a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	431a      	orrs	r2, r3
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084d4:	f021 010c 	bic.w	r1, r1, #12
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084e2:	430b      	orrs	r3, r1
 80084e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f6:	6999      	ldr	r1, [r3, #24]
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	ea40 0301 	orr.w	r3, r0, r1
 8008502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b8f      	ldr	r3, [pc, #572]	@ (8008748 <UART_SetConfig+0x2cc>)
 800850c:	429a      	cmp	r2, r3
 800850e:	d005      	beq.n	800851c <UART_SetConfig+0xa0>
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b8d      	ldr	r3, [pc, #564]	@ (800874c <UART_SetConfig+0x2d0>)
 8008518:	429a      	cmp	r2, r3
 800851a:	d104      	bne.n	8008526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800851c:	f7fe fcee 	bl	8006efc <HAL_RCC_GetPCLK2Freq>
 8008520:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008524:	e003      	b.n	800852e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008526:	f7fe fcd5 	bl	8006ed4 <HAL_RCC_GetPCLK1Freq>
 800852a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008538:	f040 810c 	bne.w	8008754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800853c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008540:	2200      	movs	r2, #0
 8008542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008546:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800854a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	1891      	adds	r1, r2, r2
 8008554:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008556:	415b      	adcs	r3, r3
 8008558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800855a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800855e:	4621      	mov	r1, r4
 8008560:	eb12 0801 	adds.w	r8, r2, r1
 8008564:	4629      	mov	r1, r5
 8008566:	eb43 0901 	adc.w	r9, r3, r1
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800857a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800857e:	4690      	mov	r8, r2
 8008580:	4699      	mov	r9, r3
 8008582:	4623      	mov	r3, r4
 8008584:	eb18 0303 	adds.w	r3, r8, r3
 8008588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800858c:	462b      	mov	r3, r5
 800858e:	eb49 0303 	adc.w	r3, r9, r3
 8008592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80085a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085aa:	460b      	mov	r3, r1
 80085ac:	18db      	adds	r3, r3, r3
 80085ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80085b0:	4613      	mov	r3, r2
 80085b2:	eb42 0303 	adc.w	r3, r2, r3
 80085b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80085b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085c0:	f7f8 fb12 	bl	8000be8 <__aeabi_uldivmod>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4b61      	ldr	r3, [pc, #388]	@ (8008750 <UART_SetConfig+0x2d4>)
 80085ca:	fba3 2302 	umull	r2, r3, r3, r2
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	011c      	lsls	r4, r3, #4
 80085d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085e4:	4642      	mov	r2, r8
 80085e6:	464b      	mov	r3, r9
 80085e8:	1891      	adds	r1, r2, r2
 80085ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085ec:	415b      	adcs	r3, r3
 80085ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085f4:	4641      	mov	r1, r8
 80085f6:	eb12 0a01 	adds.w	sl, r2, r1
 80085fa:	4649      	mov	r1, r9
 80085fc:	eb43 0b01 	adc.w	fp, r3, r1
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800860c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008614:	4692      	mov	sl, r2
 8008616:	469b      	mov	fp, r3
 8008618:	4643      	mov	r3, r8
 800861a:	eb1a 0303 	adds.w	r3, sl, r3
 800861e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008622:	464b      	mov	r3, r9
 8008624:	eb4b 0303 	adc.w	r3, fp, r3
 8008628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008638:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800863c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008640:	460b      	mov	r3, r1
 8008642:	18db      	adds	r3, r3, r3
 8008644:	643b      	str	r3, [r7, #64]	@ 0x40
 8008646:	4613      	mov	r3, r2
 8008648:	eb42 0303 	adc.w	r3, r2, r3
 800864c:	647b      	str	r3, [r7, #68]	@ 0x44
 800864e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008656:	f7f8 fac7 	bl	8000be8 <__aeabi_uldivmod>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4611      	mov	r1, r2
 8008660:	4b3b      	ldr	r3, [pc, #236]	@ (8008750 <UART_SetConfig+0x2d4>)
 8008662:	fba3 2301 	umull	r2, r3, r3, r1
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	2264      	movs	r2, #100	@ 0x64
 800866a:	fb02 f303 	mul.w	r3, r2, r3
 800866e:	1acb      	subs	r3, r1, r3
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008676:	4b36      	ldr	r3, [pc, #216]	@ (8008750 <UART_SetConfig+0x2d4>)
 8008678:	fba3 2302 	umull	r2, r3, r3, r2
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008684:	441c      	add	r4, r3
 8008686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800868a:	2200      	movs	r2, #0
 800868c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008690:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008698:	4642      	mov	r2, r8
 800869a:	464b      	mov	r3, r9
 800869c:	1891      	adds	r1, r2, r2
 800869e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80086a0:	415b      	adcs	r3, r3
 80086a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086a8:	4641      	mov	r1, r8
 80086aa:	1851      	adds	r1, r2, r1
 80086ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80086ae:	4649      	mov	r1, r9
 80086b0:	414b      	adcs	r3, r1
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086c0:	4659      	mov	r1, fp
 80086c2:	00cb      	lsls	r3, r1, #3
 80086c4:	4651      	mov	r1, sl
 80086c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ca:	4651      	mov	r1, sl
 80086cc:	00ca      	lsls	r2, r1, #3
 80086ce:	4610      	mov	r0, r2
 80086d0:	4619      	mov	r1, r3
 80086d2:	4603      	mov	r3, r0
 80086d4:	4642      	mov	r2, r8
 80086d6:	189b      	adds	r3, r3, r2
 80086d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086dc:	464b      	mov	r3, r9
 80086de:	460a      	mov	r2, r1
 80086e0:	eb42 0303 	adc.w	r3, r2, r3
 80086e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086fc:	460b      	mov	r3, r1
 80086fe:	18db      	adds	r3, r3, r3
 8008700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008702:	4613      	mov	r3, r2
 8008704:	eb42 0303 	adc.w	r3, r2, r3
 8008708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800870a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800870e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008712:	f7f8 fa69 	bl	8000be8 <__aeabi_uldivmod>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <UART_SetConfig+0x2d4>)
 800871c:	fba3 1302 	umull	r1, r3, r3, r2
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	2164      	movs	r1, #100	@ 0x64
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	3332      	adds	r3, #50	@ 0x32
 800872e:	4a08      	ldr	r2, [pc, #32]	@ (8008750 <UART_SetConfig+0x2d4>)
 8008730:	fba2 2303 	umull	r2, r3, r2, r3
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	f003 0207 	and.w	r2, r3, #7
 800873a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4422      	add	r2, r4
 8008742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008744:	e106      	b.n	8008954 <UART_SetConfig+0x4d8>
 8008746:	bf00      	nop
 8008748:	40011000 	.word	0x40011000
 800874c:	40011400 	.word	0x40011400
 8008750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008758:	2200      	movs	r2, #0
 800875a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800875e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008766:	4642      	mov	r2, r8
 8008768:	464b      	mov	r3, r9
 800876a:	1891      	adds	r1, r2, r2
 800876c:	6239      	str	r1, [r7, #32]
 800876e:	415b      	adcs	r3, r3
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
 8008772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008776:	4641      	mov	r1, r8
 8008778:	1854      	adds	r4, r2, r1
 800877a:	4649      	mov	r1, r9
 800877c:	eb43 0501 	adc.w	r5, r3, r1
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	00eb      	lsls	r3, r5, #3
 800878a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800878e:	00e2      	lsls	r2, r4, #3
 8008790:	4614      	mov	r4, r2
 8008792:	461d      	mov	r5, r3
 8008794:	4643      	mov	r3, r8
 8008796:	18e3      	adds	r3, r4, r3
 8008798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800879c:	464b      	mov	r3, r9
 800879e:	eb45 0303 	adc.w	r3, r5, r3
 80087a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087c2:	4629      	mov	r1, r5
 80087c4:	008b      	lsls	r3, r1, #2
 80087c6:	4621      	mov	r1, r4
 80087c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087cc:	4621      	mov	r1, r4
 80087ce:	008a      	lsls	r2, r1, #2
 80087d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087d4:	f7f8 fa08 	bl	8000be8 <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4b60      	ldr	r3, [pc, #384]	@ (8008960 <UART_SetConfig+0x4e4>)
 80087de:	fba3 2302 	umull	r2, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	011c      	lsls	r4, r3, #4
 80087e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	1891      	adds	r1, r2, r2
 80087fe:	61b9      	str	r1, [r7, #24]
 8008800:	415b      	adcs	r3, r3
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008808:	4641      	mov	r1, r8
 800880a:	1851      	adds	r1, r2, r1
 800880c:	6139      	str	r1, [r7, #16]
 800880e:	4649      	mov	r1, r9
 8008810:	414b      	adcs	r3, r1
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008820:	4659      	mov	r1, fp
 8008822:	00cb      	lsls	r3, r1, #3
 8008824:	4651      	mov	r1, sl
 8008826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800882a:	4651      	mov	r1, sl
 800882c:	00ca      	lsls	r2, r1, #3
 800882e:	4610      	mov	r0, r2
 8008830:	4619      	mov	r1, r3
 8008832:	4603      	mov	r3, r0
 8008834:	4642      	mov	r2, r8
 8008836:	189b      	adds	r3, r3, r2
 8008838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800883c:	464b      	mov	r3, r9
 800883e:	460a      	mov	r2, r1
 8008840:	eb42 0303 	adc.w	r3, r2, r3
 8008844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008852:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	f04f 0300 	mov.w	r3, #0
 800885c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008860:	4649      	mov	r1, r9
 8008862:	008b      	lsls	r3, r1, #2
 8008864:	4641      	mov	r1, r8
 8008866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800886a:	4641      	mov	r1, r8
 800886c:	008a      	lsls	r2, r1, #2
 800886e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008872:	f7f8 f9b9 	bl	8000be8 <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4611      	mov	r1, r2
 800887c:	4b38      	ldr	r3, [pc, #224]	@ (8008960 <UART_SetConfig+0x4e4>)
 800887e:	fba3 2301 	umull	r2, r3, r3, r1
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	2264      	movs	r2, #100	@ 0x64
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	1acb      	subs	r3, r1, r3
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	3332      	adds	r3, #50	@ 0x32
 8008890:	4a33      	ldr	r2, [pc, #204]	@ (8008960 <UART_SetConfig+0x4e4>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	095b      	lsrs	r3, r3, #5
 8008898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800889c:	441c      	add	r4, r3
 800889e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088a2:	2200      	movs	r2, #0
 80088a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80088a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80088a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	1891      	adds	r1, r2, r2
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	415b      	adcs	r3, r3
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088bc:	4641      	mov	r1, r8
 80088be:	1851      	adds	r1, r2, r1
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	4649      	mov	r1, r9
 80088c4:	414b      	adcs	r3, r1
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088d4:	4659      	mov	r1, fp
 80088d6:	00cb      	lsls	r3, r1, #3
 80088d8:	4651      	mov	r1, sl
 80088da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088de:	4651      	mov	r1, sl
 80088e0:	00ca      	lsls	r2, r1, #3
 80088e2:	4610      	mov	r0, r2
 80088e4:	4619      	mov	r1, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	4642      	mov	r2, r8
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ee:	464b      	mov	r3, r9
 80088f0:	460a      	mov	r2, r1
 80088f2:	eb42 0303 	adc.w	r3, r2, r3
 80088f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	663b      	str	r3, [r7, #96]	@ 0x60
 8008902:	667a      	str	r2, [r7, #100]	@ 0x64
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008910:	4649      	mov	r1, r9
 8008912:	008b      	lsls	r3, r1, #2
 8008914:	4641      	mov	r1, r8
 8008916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800891a:	4641      	mov	r1, r8
 800891c:	008a      	lsls	r2, r1, #2
 800891e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008922:	f7f8 f961 	bl	8000be8 <__aeabi_uldivmod>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <UART_SetConfig+0x4e4>)
 800892c:	fba3 1302 	umull	r1, r3, r3, r2
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	2164      	movs	r1, #100	@ 0x64
 8008934:	fb01 f303 	mul.w	r3, r1, r3
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	3332      	adds	r3, #50	@ 0x32
 800893e:	4a08      	ldr	r2, [pc, #32]	@ (8008960 <UART_SetConfig+0x4e4>)
 8008940:	fba2 2303 	umull	r2, r3, r2, r3
 8008944:	095b      	lsrs	r3, r3, #5
 8008946:	f003 020f 	and.w	r2, r3, #15
 800894a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4422      	add	r2, r4
 8008952:	609a      	str	r2, [r3, #8]
}
 8008954:	bf00      	nop
 8008956:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800895a:	46bd      	mov	sp, r7
 800895c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008960:	51eb851f 	.word	0x51eb851f

08008964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008964:	b084      	sub	sp, #16
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	f107 001c 	add.w	r0, r7, #28
 8008972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	2b01      	cmp	r3, #1
 800897a:	d122      	bne.n	80089c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f9c0 	bl	8008d3c <USB_CoreReset>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e01a      	b.n	80089f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9b4 	bl	8008d3c <USB_CoreReset>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80089ea:	e005      	b.n	80089f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d10b      	bne.n	8008a16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f043 0206 	orr.w	r2, r3, #6
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f043 0220 	orr.w	r2, r3, #32
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a22:	b004      	add	sp, #16
 8008a24:	4770      	bx	lr

08008a26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f043 0201 	orr.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f023 0201 	bic.w	r2, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d115      	bne.n	8008ab8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a98:	2001      	movs	r0, #1
 8008a9a:	f7fb f819 	bl	8003ad0 <HAL_Delay>
      ms++;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f93a 	bl	8008d1e <USB_GetMode>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d01e      	beq.n	8008aee <USB_SetCurrentMode+0x84>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b31      	cmp	r3, #49	@ 0x31
 8008ab4:	d9f0      	bls.n	8008a98 <USB_SetCurrentMode+0x2e>
 8008ab6:	e01a      	b.n	8008aee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d115      	bne.n	8008aea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008aca:	2001      	movs	r0, #1
 8008acc:	f7fb f800 	bl	8003ad0 <HAL_Delay>
      ms++;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f921 	bl	8008d1e <USB_GetMode>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <USB_SetCurrentMode+0x84>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b31      	cmp	r3, #49	@ 0x31
 8008ae6:	d9f0      	bls.n	8008aca <USB_SetCurrentMode+0x60>
 8008ae8:	e001      	b.n	8008aee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e005      	b.n	8008afa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b32      	cmp	r3, #50	@ 0x32
 8008af2:	d101      	bne.n	8008af8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e000      	b.n	8008afa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a13      	ldr	r2, [pc, #76]	@ (8008b68 <USB_FlushTxFifo+0x64>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d901      	bls.n	8008b24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e01b      	b.n	8008b5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	daf2      	bge.n	8008b12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	019b      	lsls	r3, r3, #6
 8008b34:	f043 0220 	orr.w	r2, r3, #32
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4a08      	ldr	r2, [pc, #32]	@ (8008b68 <USB_FlushTxFifo+0x64>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d901      	bls.n	8008b4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e006      	b.n	8008b5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d0f0      	beq.n	8008b3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	00030d40 	.word	0x00030d40

08008b6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a11      	ldr	r2, [pc, #68]	@ (8008bc8 <USB_FlushRxFifo+0x5c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d901      	bls.n	8008b8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e018      	b.n	8008bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	daf2      	bge.n	8008b78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2210      	movs	r2, #16
 8008b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a08      	ldr	r2, [pc, #32]	@ (8008bc8 <USB_FlushRxFifo+0x5c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e006      	b.n	8008bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d0f0      	beq.n	8008b9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	00030d40 	.word	0x00030d40

08008bcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b089      	sub	sp, #36	@ 0x24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	460b      	mov	r3, r1
 8008bdc:	71fb      	strb	r3, [r7, #7]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d123      	bne.n	8008c3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bf2:	88bb      	ldrh	r3, [r7, #4]
 8008bf4:	3303      	adds	r3, #3
 8008bf6:	089b      	lsrs	r3, r3, #2
 8008bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e018      	b.n	8008c32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	031a      	lsls	r2, r3, #12
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	3301      	adds	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	3301      	adds	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d3e2      	bcc.n	8008c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3724      	adds	r7, #36	@ 0x24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b08b      	sub	sp, #44	@ 0x2c
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	f003 0303 	and.w	r3, r3, #3
 8008c6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c6e:	2300      	movs	r3, #0
 8008c70:	623b      	str	r3, [r7, #32]
 8008c72:	e014      	b.n	8008c9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	3301      	adds	r3, #1
 8008c84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	3301      	adds	r3, #1
 8008c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	3301      	adds	r3, #1
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	3301      	adds	r3, #1
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	6a3a      	ldr	r2, [r7, #32]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d3e6      	bcc.n	8008c74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ca6:	8bfb      	ldrh	r3, [r7, #30]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01e      	beq.n	8008cea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f107 0310 	add.w	r3, r7, #16
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	701a      	strb	r2, [r3, #0]
      i++;
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cda:	3301      	adds	r3, #1
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008cde:	8bfb      	ldrh	r3, [r7, #30]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ce4:	8bfb      	ldrh	r3, [r7, #30]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1ea      	bne.n	8008cc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	372c      	adds	r7, #44	@ 0x2c
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a13      	ldr	r2, [pc, #76]	@ (8008da0 <USB_CoreReset+0x64>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d901      	bls.n	8008d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e01b      	b.n	8008d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	daf2      	bge.n	8008d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f043 0201 	orr.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a09      	ldr	r2, [pc, #36]	@ (8008da0 <USB_CoreReset+0x64>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d901      	bls.n	8008d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e006      	b.n	8008d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d0f0      	beq.n	8008d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	00030d40 	.word	0x00030d40

08008da4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008da4:	b084      	sub	sp, #16
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b086      	sub	sp, #24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d018      	beq.n	8008e2c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d10a      	bne.n	8008e16 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e0e:	f043 0304 	orr.w	r3, r3, #4
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	e014      	b.n	8008e40 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e24:	f023 0304 	bic.w	r3, r3, #4
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e009      	b.n	8008e40 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e3a:	f023 0304 	bic.w	r3, r3, #4
 8008e3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e40:	2110      	movs	r1, #16
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fe5e 	bl	8008b04 <USB_FlushTxFifo>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff fe8a 	bl	8008b6c <USB_FlushRxFifo>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e015      	b.n	8008e94 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e74:	461a      	mov	r2, r3
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	3301      	adds	r3, #1
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d3e5      	bcc.n	8008e68 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a13      	ldr	r2, [pc, #76]	@ (8008f10 <USB_HostInit+0x16c>)
 8008ec2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a13      	ldr	r2, [pc, #76]	@ (8008f14 <USB_HostInit+0x170>)
 8008ec8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008ecc:	e009      	b.n	8008ee2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2280      	movs	r2, #128	@ 0x80
 8008ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a10      	ldr	r2, [pc, #64]	@ (8008f18 <USB_HostInit+0x174>)
 8008ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a0f      	ldr	r2, [pc, #60]	@ (8008f1c <USB_HostInit+0x178>)
 8008ede:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	f043 0210 	orr.w	r2, r3, #16
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699a      	ldr	r2, [r3, #24]
 8008ef8:	4b09      	ldr	r3, [pc, #36]	@ (8008f20 <USB_HostInit+0x17c>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f0c:	b004      	add	sp, #16
 8008f0e:	4770      	bx	lr
 8008f10:	01000200 	.word	0x01000200
 8008f14:	00e00300 	.word	0x00e00300
 8008f18:	00600080 	.word	0x00600080
 8008f1c:	004000e0 	.word	0x004000e0
 8008f20:	a3200008 	.word	0xa3200008

08008f24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d107      	bne.n	8008f76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f72:	6053      	str	r3, [r2, #4]
 8008f74:	e009      	b.n	8008f8a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d106      	bne.n	8008f8a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f82:	461a      	mov	r2, r3
 8008f84:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008f88:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008fb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008fc8:	2064      	movs	r0, #100	@ 0x64
 8008fca:	f7fa fd81 	bl	8003ad0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fda:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008fdc:	200a      	movs	r0, #10
 8008fde:	f7fa fd77 	bl	8003ad0 <HAL_Delay>

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009010:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <USB_DriveVbus+0x44>
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d106      	bne.n	8009030 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800902a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800902e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903a:	d109      	bne.n	8009050 <USB_DriveVbus+0x64>
 800903c:	78fb      	ldrb	r3, [r7, #3]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800904a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800904e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	0c5b      	lsrs	r3, r3, #17
 800907c:	f003 0303 	and.w	r3, r3, #3
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	b29b      	uxth	r3, r3
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4603      	mov	r3, r0
 80090c0:	70fb      	strb	r3, [r7, #3]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70bb      	strb	r3, [r7, #2]
 80090c6:	4613      	mov	r3, r2
 80090c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090de:	461a      	mov	r2, r3
 80090e0:	f04f 33ff 	mov.w	r3, #4294967295
 80090e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80090e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d87e      	bhi.n	80091ec <USB_HC_Init+0x13c>
 80090ee:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <USB_HC_Init+0x44>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	08009105 	.word	0x08009105
 80090f8:	080091af 	.word	0x080091af
 80090fc:	08009105 	.word	0x08009105
 8009100:	08009171 	.word	0x08009171
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009110:	461a      	mov	r2, r3
 8009112:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009116:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800911c:	2b00      	cmp	r3, #0
 800911e:	da10      	bge.n	8009142 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4413      	add	r3, r2
 8009128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	0151      	lsls	r1, r2, #5
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	440a      	add	r2, r1
 8009136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800913a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800913e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009140:	e057      	b.n	80091f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	d051      	beq.n	80091f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009168:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800916c:	60d3      	str	r3, [r2, #12]
      break;
 800916e:	e040      	b.n	80091f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4413      	add	r3, r2
 8009178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917c:	461a      	mov	r2, r3
 800917e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009182:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009188:	2b00      	cmp	r3, #0
 800918a:	da34      	bge.n	80091f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80091ac:	e023      	b.n	80091f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ba:	461a      	mov	r2, r3
 80091bc:	f240 2325 	movw	r3, #549	@ 0x225
 80091c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	da17      	bge.n	80091fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091e4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80091e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80091ea:	e006      	b.n	80091fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	77fb      	strb	r3, [r7, #31]
      break;
 80091f0:	e004      	b.n	80091fc <USB_HC_Init+0x14c>
      break;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <USB_HC_Init+0x14c>
      break;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <USB_HC_Init+0x14c>
      break;
 80091fa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	440a      	add	r2, r1
 8009212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	f003 030f 	and.w	r3, r3, #15
 800922a:	2101      	movs	r1, #1
 800922c:	fa01 f303 	lsl.w	r3, r1, r3
 8009230:	6939      	ldr	r1, [r7, #16]
 8009232:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800924a:	2b00      	cmp	r3, #0
 800924c:	da03      	bge.n	8009256 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800924e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	e001      	b.n	800925a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff feff 	bl	800905e <USB_GetHostSpeed>
 8009260:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009262:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009266:	2b02      	cmp	r3, #2
 8009268:	d106      	bne.n	8009278 <USB_HC_Init+0x1c8>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d003      	beq.n	8009278 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	e001      	b.n	800927c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800927c:	787b      	ldrb	r3, [r7, #1]
 800927e:	059b      	lsls	r3, r3, #22
 8009280:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009284:	78bb      	ldrb	r3, [r7, #2]
 8009286:	02db      	lsls	r3, r3, #11
 8009288:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800928c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800928e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009292:	049b      	lsls	r3, r3, #18
 8009294:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009298:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800929a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800929c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80092a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	0159      	lsls	r1, r3, #5
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	440b      	add	r3, r1
 80092ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80092b8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80092ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d003      	beq.n	80092ca <USB_HC_Init+0x21a>
 80092c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d10f      	bne.n	80092ea <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80092ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3720      	adds	r7, #32
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08c      	sub	sp, #48	@ 0x30
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	4613      	mov	r3, r2
 8009300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800930c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009310:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800931a:	2b00      	cmp	r3, #0
 800931c:	d02d      	beq.n	800937a <USB_HC_StartXfer+0x86>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d129      	bne.n	800937a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d117      	bne.n	800935c <USB_HC_StartXfer+0x68>
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	79db      	ldrb	r3, [r3, #7]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <USB_HC_StartXfer+0x48>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	79db      	ldrb	r3, [r3, #7]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d10f      	bne.n	800935c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	4413      	add	r3, r2
 8009344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	6a3a      	ldr	r2, [r7, #32]
 8009350:	440a      	add	r2, r1
 8009352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800935a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <USB_HC_StartXfer+0x86>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	795b      	ldrb	r3, [r3, #5]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d107      	bne.n	800937a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	4619      	mov	r1, r3
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fa0f 	bl	8009794 <USB_DoPing>
      return HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	e0f8      	b.n	800956c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d018      	beq.n	80093b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	8912      	ldrh	r2, [r2, #8]
 800938a:	4413      	add	r3, r2
 800938c:	3b01      	subs	r3, #1
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	8912      	ldrh	r2, [r2, #8]
 8009392:	fbb3 f3f2 	udiv	r3, r3, r2
 8009396:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8009398:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800939a:	8b7b      	ldrh	r3, [r7, #26]
 800939c:	429a      	cmp	r2, r3
 800939e:	d90b      	bls.n	80093b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80093a0:	8b7b      	ldrh	r3, [r7, #26]
 80093a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	8912      	ldrh	r2, [r2, #8]
 80093aa:	fb03 f202 	mul.w	r2, r3, r2
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	611a      	str	r2, [r3, #16]
 80093b2:	e001      	b.n	80093b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80093b4:	2301      	movs	r3, #1
 80093b6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	78db      	ldrb	r3, [r3, #3]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	8912      	ldrh	r2, [r2, #8]
 80093c6:	fb03 f202 	mul.w	r2, r3, r2
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	611a      	str	r2, [r3, #16]
 80093ce:	e003      	b.n	80093d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	695a      	ldr	r2, [r3, #20]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093e2:	04d9      	lsls	r1, r3, #19
 80093e4:	4b63      	ldr	r3, [pc, #396]	@ (8009574 <USB_HC_StartXfer+0x280>)
 80093e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	7a9b      	ldrb	r3, [r3, #10]
 80093ee:	075b      	lsls	r3, r3, #29
 80093f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093f4:	69f9      	ldr	r1, [r7, #28]
 80093f6:	0148      	lsls	r0, r1, #5
 80093f8:	6a39      	ldr	r1, [r7, #32]
 80093fa:	4401      	add	r1, r0
 80093fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009400:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009402:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	68d9      	ldr	r1, [r3, #12]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	4413      	add	r3, r2
 8009416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800941a:	460a      	mov	r2, r1
 800941c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	bf0c      	ite	eq
 800942e:	2301      	moveq	r3, #1
 8009430:	2300      	movne	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	6a3a      	ldr	r2, [r7, #32]
 800944a:	440a      	add	r2, r1
 800944c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009450:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009454:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	4413      	add	r3, r2
 800945e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	7e7b      	ldrb	r3, [r7, #25]
 8009466:	075b      	lsls	r3, r3, #29
 8009468:	69f9      	ldr	r1, [r7, #28]
 800946a:	0148      	lsls	r0, r1, #5
 800946c:	6a39      	ldr	r1, [r7, #32]
 800946e:	4401      	add	r1, r0
 8009470:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009474:	4313      	orrs	r3, r2
 8009476:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	4413      	add	r3, r2
 8009480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800948e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	78db      	ldrb	r3, [r3, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800949e:	613b      	str	r3, [r7, #16]
 80094a0:	e003      	b.n	80094aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094be:	461a      	mov	r2, r3
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e04e      	b.n	800956c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	78db      	ldrb	r3, [r3, #3]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d149      	bne.n	800956a <USB_HC_StartXfer+0x276>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d045      	beq.n	800956a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	79db      	ldrb	r3, [r3, #7]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d830      	bhi.n	8009548 <USB_HC_StartXfer+0x254>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <USB_HC_StartXfer+0x1f8>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	080094fd 	.word	0x080094fd
 80094f0:	08009521 	.word	0x08009521
 80094f4:	080094fd 	.word	0x080094fd
 80094f8:	08009521 	.word	0x08009521
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	3303      	adds	r3, #3
 8009502:	089b      	lsrs	r3, r3, #2
 8009504:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009506:	8afa      	ldrh	r2, [r7, #22]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	b29b      	uxth	r3, r3
 800950e:	429a      	cmp	r2, r3
 8009510:	d91c      	bls.n	800954c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f043 0220 	orr.w	r2, r3, #32
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	619a      	str	r2, [r3, #24]
        }
        break;
 800951e:	e015      	b.n	800954c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	3303      	adds	r3, #3
 8009526:	089b      	lsrs	r3, r3, #2
 8009528:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800952a:	8afa      	ldrh	r2, [r7, #22]
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	b29b      	uxth	r3, r3
 8009536:	429a      	cmp	r2, r3
 8009538:	d90a      	bls.n	8009550 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	619a      	str	r2, [r3, #24]
        }
        break;
 8009546:	e003      	b.n	8009550 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009548:	bf00      	nop
 800954a:	e002      	b.n	8009552 <USB_HC_StartXfer+0x25e>
        break;
 800954c:	bf00      	nop
 800954e:	e000      	b.n	8009552 <USB_HC_StartXfer+0x25e>
        break;
 8009550:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	68d9      	ldr	r1, [r3, #12]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	785a      	ldrb	r2, [r3, #1]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	b29b      	uxth	r3, r3
 8009560:	2000      	movs	r0, #0
 8009562:	9000      	str	r0, [sp, #0]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fb31 	bl	8008bcc <USB_WritePacket>
  }

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3728      	adds	r7, #40	@ 0x28
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	1ff80000 	.word	0x1ff80000

08009578 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	b29b      	uxth	r3, r3
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800959a:	b480      	push	{r7}
 800959c:	b089      	sub	sp, #36	@ 0x24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	0c9b      	lsrs	r3, r3, #18
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	0fdb      	lsrs	r3, r3, #31
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b20      	cmp	r3, #32
 80095e8:	d104      	bne.n	80095f4 <USB_HC_Halt+0x5a>
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	e0c8      	b.n	8009786 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <USB_HC_Halt+0x66>
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d163      	bne.n	80096c8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	4413      	add	r3, r2
 8009608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	440a      	add	r2, r1
 8009616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800961a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800961e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 80ab 	bne.w	8009784 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d133      	bne.n	80096a2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009658:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	440a      	add	r2, r1
 8009670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009674:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009678:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009686:	d81d      	bhi.n	80096c4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800969a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800969e:	d0ec      	beq.n	800967a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096a0:	e070      	b.n	8009784 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	69fa      	ldr	r2, [r7, #28]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096c2:	e05f      	b.n	8009784 <USB_HC_Halt+0x1ea>
            break;
 80096c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096c6:	e05d      	b.n	8009784 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	0151      	lsls	r1, r2, #5
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	440a      	add	r2, r1
 80096de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d133      	bne.n	8009760 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	440a      	add	r2, r1
 800970e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009716:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	440a      	add	r2, r1
 800972e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009736:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009744:	d81d      	bhi.n	8009782 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800975c:	d0ec      	beq.n	8009738 <USB_HC_Halt+0x19e>
 800975e:	e011      	b.n	8009784 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	440a      	add	r2, r1
 8009776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800977a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e000      	b.n	8009784 <USB_HC_Halt+0x1ea>
          break;
 8009782:	bf00      	nop
    }
  }

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3724      	adds	r7, #36	@ 0x24
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80097a8:	2301      	movs	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	04da      	lsls	r2, r3, #19
 80097b0:	4b15      	ldr	r3, [pc, #84]	@ (8009808 <USB_DoPing+0x74>)
 80097b2:	4013      	ands	r3, r2
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	0151      	lsls	r1, r2, #5
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	440a      	add	r2, r1
 80097bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f2:	461a      	mov	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	1ff80000 	.word	0x1ff80000

0800980c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff f911 	bl	8008a48 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009826:	2110      	movs	r1, #16
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff f96b 	bl	8008b04 <USB_FlushTxFifo>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff f997 	bl	8008b6c <USB_FlushRxFifo>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	e01f      	b.n	800988e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	4413      	add	r3, r2
 8009856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009864:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800986c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009874:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009882:	461a      	mov	r2, r3
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	3301      	adds	r3, #1
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b0f      	cmp	r3, #15
 8009892:	d9dc      	bls.n	800984e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009894:	2300      	movs	r3, #0
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e034      	b.n	8009904 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ce:	461a      	mov	r2, r3
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e0:	d80c      	bhi.n	80098fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098f8:	d0ec      	beq.n	80098d4 <USB_StopHost+0xc8>
 80098fa:	e000      	b.n	80098fe <USB_StopHost+0xf2>
        break;
 80098fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	3301      	adds	r3, #1
 8009902:	61bb      	str	r3, [r7, #24]
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	2b0f      	cmp	r3, #15
 8009908:	d9c7      	bls.n	800989a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009910:	461a      	mov	r2, r3
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff f880 	bl	8008a26 <USB_EnableGlobalInt>

  return ret;
 8009926:	7ffb      	ldrb	r3, [r7, #31]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b089      	sub	sp, #36	@ 0x24
 8009934:	af04      	add	r7, sp, #16
 8009936:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009938:	2301      	movs	r3, #1
 800993a:	2202      	movs	r2, #2
 800993c:	2102      	movs	r1, #2
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fcb2 	bl	800a2a8 <USBH_FindInterface>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2bff      	cmp	r3, #255	@ 0xff
 800994c:	d002      	beq.n	8009954 <USBH_CDC_InterfaceInit+0x24>
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d901      	bls.n	8009958 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009954:	2302      	movs	r3, #2
 8009956:	e13d      	b.n	8009bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fc87 	bl	800a270 <USBH_SelectInterface>
 8009962:	4603      	mov	r3, r0
 8009964:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800996c:	2302      	movs	r3, #2
 800996e:	e131      	b.n	8009bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009976:	2050      	movs	r0, #80	@ 0x50
 8009978:	f006 ffe4 	bl	8010944 <malloc>
 800997c:	4603      	mov	r3, r0
 800997e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009990:	2302      	movs	r3, #2
 8009992:	e11f      	b.n	8009bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009994:	2250      	movs	r2, #80	@ 0x50
 8009996:	2100      	movs	r1, #0
 8009998:	68b8      	ldr	r0, [r7, #8]
 800999a:	f008 fca2 	bl	80122e2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	211a      	movs	r1, #26
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	4413      	add	r3, r2
 80099aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b25b      	sxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da15      	bge.n	80099e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	211a      	movs	r1, #26
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	211a      	movs	r1, #26
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80099dc:	881a      	ldrh	r2, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f002 f976 	bl	800bcda <USBH_AllocPipe>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	7819      	ldrb	r1, [r3, #0]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	7858      	ldrb	r0, [r3, #1]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	8952      	ldrh	r2, [r2, #10]
 8009a0e:	9202      	str	r2, [sp, #8]
 8009a10:	2203      	movs	r2, #3
 8009a12:	9201      	str	r2, [sp, #4]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	4623      	mov	r3, r4
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f002 f92e 	bl	800bc7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2200      	movs	r2, #0
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f006 ff03 	bl	8010834 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	210a      	movs	r1, #10
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fc37 	bl	800a2a8 <USBH_FindInterface>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2bff      	cmp	r3, #255	@ 0xff
 8009a42:	d002      	beq.n	8009a4a <USBH_CDC_InterfaceInit+0x11a>
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d901      	bls.n	8009a4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e0c2      	b.n	8009bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	211a      	movs	r1, #26
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da16      	bge.n	8009a94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	211a      	movs	r1, #26
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	211a      	movs	r1, #26
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a8c:	881a      	ldrh	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	835a      	strh	r2, [r3, #26]
 8009a92:	e015      	b.n	8009ac0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	211a      	movs	r1, #26
 8009a9a:	fb01 f303 	mul.w	r3, r1, r3
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	211a      	movs	r1, #26
 8009ab0:	fb01 f303 	mul.w	r3, r1, r3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009aba:	881a      	ldrh	r2, [r3, #0]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	211a      	movs	r1, #26
 8009ac6:	fb01 f303 	mul.w	r3, r1, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b25b      	sxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da16      	bge.n	8009b06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	211a      	movs	r1, #26
 8009ade:	fb01 f303 	mul.w	r3, r1, r3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	211a      	movs	r1, #26
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009afe:	881a      	ldrh	r2, [r3, #0]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	835a      	strh	r2, [r3, #26]
 8009b04:	e015      	b.n	8009b32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	211a      	movs	r1, #26
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	211a      	movs	r1, #26
 8009b22:	fb01 f303 	mul.w	r3, r1, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b2c:	881a      	ldrh	r2, [r3, #0]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	7b9b      	ldrb	r3, [r3, #14]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f002 f8ce 	bl	800bcda <USBH_AllocPipe>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	7bdb      	ldrb	r3, [r3, #15]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f002 f8c4 	bl	800bcda <USBH_AllocPipe>
 8009b52:	4603      	mov	r3, r0
 8009b54:	461a      	mov	r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	7b59      	ldrb	r1, [r3, #13]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	7b98      	ldrb	r0, [r3, #14]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	8b12      	ldrh	r2, [r2, #24]
 8009b72:	9202      	str	r2, [sp, #8]
 8009b74:	2202      	movs	r2, #2
 8009b76:	9201      	str	r2, [sp, #4]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f002 f87c 	bl	800bc7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	7b19      	ldrb	r1, [r3, #12]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	7bd8      	ldrb	r0, [r3, #15]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	8b52      	ldrh	r2, [r2, #26]
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	9201      	str	r2, [sp, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f002 f867 	bl	800bc7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	7b5b      	ldrb	r3, [r3, #13]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f006 fe38 	bl	8010834 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	7b1b      	ldrb	r3, [r3, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f006 fe31 	bl	8010834 <USBH_LL_SetToggle>

  return USBH_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd90      	pop	{r4, r7, pc}

08009bdc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00e      	beq.n	8009c14 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f002 f85c 	bl	800bcba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f002 f887 	bl	800bd1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	7b1b      	ldrb	r3, [r3, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	7b1b      	ldrb	r3, [r3, #12]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f002 f849 	bl	800bcba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	7b1b      	ldrb	r3, [r3, #12]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f002 f874 	bl	800bd1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	7b5b      	ldrb	r3, [r3, #13]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00e      	beq.n	8009c60 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7b5b      	ldrb	r3, [r3, #13]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f002 f836 	bl	800bcba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	7b5b      	ldrb	r3, [r3, #13]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f002 f861 	bl	800bd1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f006 fe6d 	bl	8010954 <free>
    phost->pActiveClass->pData = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c80:	2200      	movs	r2, #0
 8009c82:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3340      	adds	r3, #64	@ 0x40
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f8b1 	bl	8009e0e <GetLineCoding>
 8009cac:	4603      	mov	r3, r0
 8009cae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d105      	bne.n	8009cc2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cbc:	2102      	movs	r1, #2
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d877      	bhi.n	8009de0 <USBH_CDC_Process+0x114>
 8009cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf8 <USBH_CDC_Process+0x2c>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d13 	.word	0x08009d13
 8009d00:	08009d43 	.word	0x08009d43
 8009d04:	08009db7 	.word	0x08009db7
 8009d08:	08009dc5 	.word	0x08009dc5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d10:	e06d      	b.n	8009dee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f897 	bl	8009e4c <SetLineCoding>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d30:	e058      	b.n	8009de4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d055      	beq.n	8009de4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2204      	movs	r2, #4
 8009d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d40:	e050      	b.n	8009de4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	3340      	adds	r3, #64	@ 0x40
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f860 	bl	8009e0e <GetLineCoding>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d126      	bne.n	8009da6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d6a:	791b      	ldrb	r3, [r3, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d13b      	bne.n	8009de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d133      	bne.n	8009de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d12b      	bne.n	8009de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d124      	bne.n	8009de8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f982 	bl	800a0a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009da4:	e020      	b.n	8009de8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d01d      	beq.n	8009de8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2204      	movs	r2, #4
 8009db0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009db4:	e018      	b.n	8009de8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f867 	bl	8009e8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f8f6 	bl	8009fae <CDC_ProcessReception>
      break;
 8009dc2:	e014      	b.n	8009dee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 f951 	bl	800b06e <USBH_ClrFeature>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10a      	bne.n	8009dec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009dde:	e005      	b.n	8009dec <USBH_CDC_Process+0x120>

    default:
      break;
 8009de0:	bf00      	nop
 8009de2:	e004      	b.n	8009dee <USBH_CDC_Process+0x122>
      break;
 8009de4:	bf00      	nop
 8009de6:	e002      	b.n	8009dee <USBH_CDC_Process+0x122>
      break;
 8009de8:	bf00      	nop
 8009dea:	e000      	b.n	8009dee <USBH_CDC_Process+0x122>
      break;
 8009dec:	bf00      	nop

  }

  return status;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	22a1      	movs	r2, #161	@ 0xa1
 8009e1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2221      	movs	r2, #33	@ 0x21
 8009e22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2207      	movs	r2, #7
 8009e34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2207      	movs	r2, #7
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fbdc 	bl	800b5fa <USBH_CtlReq>
 8009e42:	4603      	mov	r3, r0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2221      	movs	r2, #33	@ 0x21
 8009e5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2207      	movs	r2, #7
 8009e72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2207      	movs	r2, #7
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fbbd 	bl	800b5fa <USBH_CtlReq>
 8009e80:	4603      	mov	r3, r0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b086      	sub	sp, #24
 8009e8e:	af02      	add	r7, sp, #8
 8009e90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d002      	beq.n	8009eb0 <CDC_ProcessTransmission+0x26>
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d023      	beq.n	8009ef6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009eae:	e07a      	b.n	8009fa6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	8b12      	ldrh	r2, [r2, #24]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d90b      	bls.n	8009ed4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	69d9      	ldr	r1, [r3, #28]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8b1a      	ldrh	r2, [r3, #24]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	7b5b      	ldrb	r3, [r3, #13]
 8009ec8:	2001      	movs	r0, #1
 8009eca:	9000      	str	r0, [sp, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fe92 	bl	800bbf6 <USBH_BulkSendData>
 8009ed2:	e00b      	b.n	8009eec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	7b5b      	ldrb	r3, [r3, #13]
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	9000      	str	r0, [sp, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 fe85 	bl	800bbf6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ef4:	e057      	b.n	8009fa6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	7b5b      	ldrb	r3, [r3, #13]
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f006 fc6f 	bl	80107e0 <USBH_LL_GetURBState>
 8009f02:	4603      	mov	r3, r0
 8009f04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d136      	bne.n	8009f7a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	8b12      	ldrh	r2, [r2, #24]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d90e      	bls.n	8009f36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	8b12      	ldrh	r2, [r2, #24]
 8009f20:	1a9a      	subs	r2, r3, r2
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	8b12      	ldrh	r2, [r2, #24]
 8009f2e:	441a      	add	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	61da      	str	r2, [r3, #28]
 8009f34:	e002      	b.n	8009f3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d004      	beq.n	8009f4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009f4c:	e006      	b.n	8009f5c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f892 	bl	800a080 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2204      	movs	r2, #4
 8009f60:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	f002 f900 	bl	800c178 <osMessageQueuePut>
      break;
 8009f78:	e014      	b.n	8009fa4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d111      	bne.n	8009fa4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f002 f8ea 	bl	800c178 <osMessageQueuePut>
      break;
 8009fa4:	bf00      	nop
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d002      	beq.n	8009fd4 <CDC_ProcessReception+0x26>
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d00e      	beq.n	8009ff0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009fd2:	e051      	b.n	800a078 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	6a19      	ldr	r1, [r3, #32]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	8b5a      	ldrh	r2, [r3, #26]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	7b1b      	ldrb	r3, [r3, #12]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fe2d 	bl	800bc40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2204      	movs	r2, #4
 8009fea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009fee:	e043      	b.n	800a078 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	7b1b      	ldrb	r3, [r3, #12]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f006 fbf2 	bl	80107e0 <USBH_LL_GetURBState>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a000:	7cfb      	ldrb	r3, [r7, #19]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d137      	bne.n	800a076 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	7b1b      	ldrb	r3, [r3, #12]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f006 fb55 	bl	80106bc <USBH_LL_GetLastXferSize>
 800a012:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d016      	beq.n	800a04c <CDC_ProcessReception+0x9e>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	8b5b      	ldrh	r3, [r3, #26]
 800a022:	461a      	mov	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4293      	cmp	r3, r2
 800a028:	d910      	bls.n	800a04c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	6a1a      	ldr	r2, [r3, #32]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	441a      	add	r2, r3
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2203      	movs	r2, #3
 800a046:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a04a:	e006      	b.n	800a05a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f81d 	bl	800a094 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2204      	movs	r2, #4
 800a05e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	f002 f881 	bl	800c178 <osMessageQueuePut>
      break;
 800a076:	bf00      	nop
  }
}
 800a078:	bf00      	nop
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e044      	b.n	800a15e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	79fa      	ldrb	r2, [r7, #7]
 800a0d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f841 	bl	800a174 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a120:	2200      	movs	r2, #0
 800a122:	2104      	movs	r1, #4
 800a124:	2010      	movs	r0, #16
 800a126:	f001 ffb4 	bl	800c092 <osMessageQueueNew>
 800a12a:	4602      	mov	r2, r0
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <USBH_Init+0xac>)
 800a134:	4a0d      	ldr	r2, [pc, #52]	@ (800a16c <USBH_Init+0xb0>)
 800a136:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a138:	4b0b      	ldr	r3, [pc, #44]	@ (800a168 <USBH_Init+0xac>)
 800a13a:	2280      	movs	r2, #128	@ 0x80
 800a13c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a13e:	4b0a      	ldr	r3, [pc, #40]	@ (800a168 <USBH_Init+0xac>)
 800a140:	2218      	movs	r2, #24
 800a142:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a144:	4a08      	ldr	r2, [pc, #32]	@ (800a168 <USBH_Init+0xac>)
 800a146:	68f9      	ldr	r1, [r7, #12]
 800a148:	4809      	ldr	r0, [pc, #36]	@ (800a170 <USBH_Init+0xb4>)
 800a14a:	f001 fef5 	bl	800bf38 <osThreadNew>
 800a14e:	4602      	mov	r2, r0
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f006 f9fc 	bl	8010554 <USBH_LL_Init>

  return USBH_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	200007d0 	.word	0x200007d0
 800a16c:	080156ec 	.word	0x080156ec
 800a170:	0800ade5 	.word	0x0800ade5

0800a174 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e009      	b.n	800a19a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	33e0      	adds	r3, #224	@ 0xe0
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b0f      	cmp	r3, #15
 800a19e:	d9f2      	bls.n	800a186 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e009      	b.n	800a1ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c0:	d3f1      	bcc.n	800a1a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2240      	movs	r2, #64	@ 0x40
 800a1e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d016      	beq.n	800a25e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10e      	bne.n	800a258 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a240:	1c59      	adds	r1, r3, #1
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	33de      	adds	r3, #222	@ 0xde
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
 800a256:	e004      	b.n	800a262 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a258:	2302      	movs	r3, #2
 800a25a:	73fb      	strb	r3, [r7, #15]
 800a25c:	e001      	b.n	800a262 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a25e:	2302      	movs	r3, #2
 800a260:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d204      	bcs.n	800a296 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a294:	e001      	b.n	800a29a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a296:	2302      	movs	r3, #2
 800a298:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	70fb      	strb	r3, [r7, #3]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70bb      	strb	r3, [r7, #2]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a2d2:	e025      	b.n	800a320 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	221a      	movs	r2, #26
 800a2d8:	fb02 f303 	mul.w	r3, r2, r3
 800a2dc:	3308      	adds	r3, #8
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3302      	adds	r3, #2
 800a2e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d002      	beq.n	800a2f6 <USBH_FindInterface+0x4e>
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	2bff      	cmp	r3, #255	@ 0xff
 800a2f4:	d111      	bne.n	800a31a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2fa:	78ba      	ldrb	r2, [r7, #2]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d002      	beq.n	800a306 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a300:	78bb      	ldrb	r3, [r7, #2]
 800a302:	2bff      	cmp	r3, #255	@ 0xff
 800a304:	d109      	bne.n	800a31a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a30a:	787a      	ldrb	r2, [r7, #1]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d002      	beq.n	800a316 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a310:	787b      	ldrb	r3, [r7, #1]
 800a312:	2bff      	cmp	r3, #255	@ 0xff
 800a314:	d101      	bne.n	800a31a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	e006      	b.n	800a328 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	3301      	adds	r3, #1
 800a31e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d9d6      	bls.n	800a2d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a326:	23ff      	movs	r3, #255	@ 0xff
}
 800a328:	4618      	mov	r0, r3
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f006 f945 	bl	80105cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a342:	2101      	movs	r1, #1
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f006 fa5e 	bl	8010806 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af04      	add	r7, sp, #16
 800a35a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a35c:	2302      	movs	r3, #2
 800a35e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d102      	bne.n	800a376 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b0b      	cmp	r3, #11
 800a37e:	f200 8244 	bhi.w	800a80a <USBH_Process+0x4b6>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <USBH_Process+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a407 	.word	0x0800a407
 800a390:	0800a48b 	.word	0x0800a48b
 800a394:	0800a789 	.word	0x0800a789
 800a398:	0800a80b 	.word	0x0800a80b
 800a39c:	0800a547 	.word	0x0800a547
 800a3a0:	0800a713 	.word	0x0800a713
 800a3a4:	0800a599 	.word	0x0800a599
 800a3a8:	0800a5d5 	.word	0x0800a5d5
 800a3ac:	0800a60d 	.word	0x0800a60d
 800a3b0:	0800a66b 	.word	0x0800a66b
 800a3b4:	0800a771 	.word	0x0800a771
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 8224 	beq.w	800a80e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a3cc:	20c8      	movs	r0, #200	@ 0xc8
 800a3ce:	f006 fa61 	bl	8010894 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f006 f957 	bl	8010686 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2200      	movs	r2, #0
 800a400:	f001 feba 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a404:	e203      	b.n	800a80e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d107      	bne.n	800a420 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e025      	b.n	800a46c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a42a:	d914      	bls.n	800a456 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a432:	3301      	adds	r3, #1
 800a434:	b2da      	uxtb	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a442:	2b03      	cmp	r3, #3
 800a444:	d903      	bls.n	800a44e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	220d      	movs	r2, #13
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	e00e      	b.n	800a46c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e00a      	b.n	800a46c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a45c:	f103 020a 	add.w	r2, r3, #10
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a466:	200a      	movs	r0, #10
 800a468:	f006 fa14 	bl	8010894 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a480:	2300      	movs	r3, #0
 800a482:	2200      	movs	r2, #0
 800a484:	f001 fe78 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a488:	e1c8      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a49a:	2104      	movs	r1, #4
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a4a0:	2064      	movs	r0, #100	@ 0x64
 800a4a2:	f006 f9f7 	bl	8010894 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f006 f8c6 	bl	8010638 <USBH_LL_GetSpeed>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4bc:	2100      	movs	r1, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 fc0b 	bl	800bcda <USBH_AllocPipe>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4cc:	2180      	movs	r1, #128	@ 0x80
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f001 fc03 	bl	800bcda <USBH_AllocPipe>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7919      	ldrb	r1, [r3, #4]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4f0:	9202      	str	r2, [sp, #8]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	9201      	str	r2, [sp, #4]
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2280      	movs	r2, #128	@ 0x80
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fbbd 	bl	800bc7c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7959      	ldrb	r1, [r3, #5]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	2200      	movs	r2, #0
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4603      	mov	r3, r0
 800a520:	2200      	movs	r2, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 fbaa 	bl	800bc7c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a53c:	2300      	movs	r3, #0
 800a53e:	2200      	movs	r2, #0
 800a540:	f001 fe1a 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a544:	e16a      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f96e 	bl	800a828 <USBH_HandleEnum>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	f040 815c 	bne.w	800a812 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d103      	bne.n	800a574 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2208      	movs	r2, #8
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	e002      	b.n	800a57a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2207      	movs	r2, #7
 800a578:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2205      	movs	r2, #5
 800a57e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a58e:	2300      	movs	r3, #0
 800a590:	2200      	movs	r2, #0
 800a592:	f001 fdf1 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a596:	e13c      	b.n	800a812 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8139 	beq.w	800a816 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2205      	movs	r2, #5
 800a5ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f001 fdd3 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a5d2:	e120      	b.n	800a816 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fcff 	bl	800afe0 <USBH_SetCfg>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2209      	movs	r2, #9
 800a5ec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a602:	2300      	movs	r3, #0
 800a604:	2200      	movs	r2, #0
 800a606:	f001 fdb7 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a60a:	e107      	b.n	800a81c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b00      	cmp	r3, #0
 800a618:	d015      	beq.n	800a646 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a61a:	2101      	movs	r1, #1
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fd02 	bl	800b026 <USBH_SetFeature>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	220a      	movs	r2, #10
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	e00a      	b.n	800a64c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d106      	bne.n	800a64c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	220a      	movs	r2, #10
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e002      	b.n	800a64c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	220a      	movs	r2, #10
 800a64a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a660:	2300      	movs	r3, #0
 800a662:	2200      	movs	r2, #0
 800a664:	f001 fd88 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a668:	e0d8      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a670:	2b00      	cmp	r3, #0
 800a672:	d03f      	beq.n	800a6f4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
 800a680:	e016      	b.n	800a6b0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a682:	7bfa      	ldrb	r2, [r7, #15]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	32de      	adds	r2, #222	@ 0xde
 800a688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68c:	791a      	ldrb	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a694:	429a      	cmp	r2, r3
 800a696:	d108      	bne.n	800a6aa <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a698:	7bfa      	ldrb	r2, [r7, #15]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	32de      	adds	r2, #222	@ 0xde
 800a69e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a6a8:	e005      	b.n	800a6b6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0e5      	beq.n	800a682 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d016      	beq.n	800a6ee <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d109      	bne.n	800a6e6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2206      	movs	r2, #6
 800a6d6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a6de:	2103      	movs	r1, #3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	4798      	blx	r3
 800a6e4:	e006      	b.n	800a6f4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	220d      	movs	r2, #13
 800a6ea:	701a      	strb	r2, [r3, #0]
 800a6ec:	e002      	b.n	800a6f4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	220d      	movs	r2, #13
 800a6f2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2205      	movs	r2, #5
 800a6f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a708:	2300      	movs	r3, #0
 800a70a:	2200      	movs	r2, #0
 800a70c:	f001 fd34 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a710:	e084      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d017      	beq.n	800a74c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	4603      	mov	r3, r0
 800a72a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	220b      	movs	r2, #11
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e00a      	b.n	800a752 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b02      	cmp	r3, #2
 800a742:	d106      	bne.n	800a752 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220d      	movs	r2, #13
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	e002      	b.n	800a752 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	220d      	movs	r2, #13
 800a750:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2205      	movs	r2, #5
 800a756:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a766:	2300      	movs	r3, #0
 800a768:	2200      	movs	r2, #0
 800a76a:	f001 fd05 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a76e:	e055      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d04f      	beq.n	800a81a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
      }
      break;
 800a786:	e048      	b.n	800a81a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff fcef 	bl	800a174 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d009      	beq.n	800a7b4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d005      	beq.n	800a7ca <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7c4:	2105      	movs	r1, #5
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d107      	bne.n	800a7e6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fda8 	bl	800a334 <USBH_Start>
 800a7e4:	e002      	b.n	800a7ec <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f005 fef0 	bl	80105cc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a800:	2300      	movs	r3, #0
 800a802:	2200      	movs	r2, #0
 800a804:	f001 fcb8 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      break;
 800a808:	e008      	b.n	800a81c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a80a:	bf00      	nop
 800a80c:	e006      	b.n	800a81c <USBH_Process+0x4c8>
      break;
 800a80e:	bf00      	nop
 800a810:	e004      	b.n	800a81c <USBH_Process+0x4c8>
      break;
 800a812:	bf00      	nop
 800a814:	e002      	b.n	800a81c <USBH_Process+0x4c8>
    break;
 800a816:	bf00      	nop
 800a818:	e000      	b.n	800a81c <USBH_Process+0x4c8>
      break;
 800a81a:	bf00      	nop
  }
  return USBH_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop

0800a828 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a834:	2301      	movs	r3, #1
 800a836:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	785b      	ldrb	r3, [r3, #1]
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	f200 8204 	bhi.w	800ac4a <USBH_HandleEnum+0x422>
 800a842:	a201      	add	r2, pc, #4	@ (adr r2, 800a848 <USBH_HandleEnum+0x20>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a869 	.word	0x0800a869
 800a84c:	0800a923 	.word	0x0800a923
 800a850:	0800a98d 	.word	0x0800a98d
 800a854:	0800aa17 	.word	0x0800aa17
 800a858:	0800aa81 	.word	0x0800aa81
 800a85c:	0800aaf1 	.word	0x0800aaf1
 800a860:	0800ab8d 	.word	0x0800ab8d
 800a864:	0800ac0b 	.word	0x0800ac0b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a868:	2108      	movs	r1, #8
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fae8 	bl	800ae40 <USBH_Get_DevDesc>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d12e      	bne.n	800a8d8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7919      	ldrb	r1, [r3, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a89e:	9202      	str	r2, [sp, #8]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	9201      	str	r2, [sp, #4]
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2280      	movs	r2, #128	@ 0x80
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f9e6 	bl	800bc7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7959      	ldrb	r1, [r3, #5]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 f9d3 	bl	800bc7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8d6:	e1ba      	b.n	800ac4e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	f040 81b7 	bne.w	800ac4e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d903      	bls.n	800a902 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	220d      	movs	r2, #13
 800a8fe:	701a      	strb	r2, [r3, #0]
      break;
 800a900:	e1a5      	b.n	800ac4e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	795b      	ldrb	r3, [r3, #5]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 fa07 	bl	800bd1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	791b      	ldrb	r3, [r3, #4]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fa01 	bl	800bd1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
      break;
 800a920:	e195      	b.n	800ac4e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a922:	2112      	movs	r1, #18
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa8b 	bl	800ae40 <USBH_Get_DevDesc>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d103      	bne.n	800a93c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a93a:	e18a      	b.n	800ac52 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f040 8187 	bne.w	800ac52 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a94a:	3301      	adds	r3, #1
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d903      	bls.n	800a966 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	220d      	movs	r2, #13
 800a962:	701a      	strb	r2, [r3, #0]
      break;
 800a964:	e175      	b.n	800ac52 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	795b      	ldrb	r3, [r3, #5]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 f9d5 	bl	800bd1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	791b      	ldrb	r3, [r3, #4]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f001 f9cf 	bl	800bd1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	701a      	strb	r2, [r3, #0]
      break;
 800a98a:	e162      	b.n	800ac52 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a98c:	2101      	movs	r1, #1
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fb02 	bl	800af98 <USBH_SetAddress>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d130      	bne.n	800aa00 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a99e:	2002      	movs	r0, #2
 800a9a0:	f005 ff78 	bl	8010894 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7919      	ldrb	r1, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9c6:	9202      	str	r2, [sp, #8]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	9201      	str	r2, [sp, #4]
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2280      	movs	r2, #128	@ 0x80
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 f952 	bl	800bc7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	7959      	ldrb	r1, [r3, #5]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ec:	9202      	str	r2, [sp, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f93f 	bl	800bc7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9fe:	e12a      	b.n	800ac56 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	f040 8127 	bne.w	800ac56 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	220d      	movs	r2, #13
 800aa0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	705a      	strb	r2, [r3, #1]
      break;
 800aa14:	e11f      	b.n	800ac56 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa16:	2109      	movs	r1, #9
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa39 	bl	800ae90 <USBH_Get_CfgDesc>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d103      	bne.n	800aa30 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa2e:	e114      	b.n	800ac5a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	f040 8111 	bne.w	800ac5a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa3e:	3301      	adds	r3, #1
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d903      	bls.n	800aa5a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	220d      	movs	r2, #13
 800aa56:	701a      	strb	r2, [r3, #0]
      break;
 800aa58:	e0ff      	b.n	800ac5a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	795b      	ldrb	r3, [r3, #5]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 f95b 	bl	800bd1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 f955 	bl	800bd1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
      break;
 800aa7e:	e0ec      	b.n	800ac5a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fa01 	bl	800ae90 <USBH_Get_CfgDesc>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d103      	bne.n	800aaa0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa9e:	e0de      	b.n	800ac5e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	f040 80db 	bne.w	800ac5e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaae:	3301      	adds	r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d903      	bls.n	800aaca <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	220d      	movs	r2, #13
 800aac6:	701a      	strb	r2, [r3, #0]
      break;
 800aac8:	e0c9      	b.n	800ac5e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	795b      	ldrb	r3, [r3, #5]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 f923 	bl	800bd1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f91d 	bl	800bd1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	701a      	strb	r2, [r3, #0]
      break;
 800aaee:	e0b6      	b.n	800ac5e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d036      	beq.n	800ab68 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab06:	23ff      	movs	r3, #255	@ 0xff
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f9e5 	bl	800aed8 <USBH_Get_StringDesc>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d111      	bne.n	800ab3c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2206      	movs	r2, #6
 800ab1c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2205      	movs	r2, #5
 800ab22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab32:	2300      	movs	r3, #0
 800ab34:	2200      	movs	r2, #0
 800ab36:	f001 fb1f 	bl	800c178 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab3a:	e092      	b.n	800ac62 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	f040 808f 	bne.w	800ac62 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2206      	movs	r2, #6
 800ab48:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2205      	movs	r2, #5
 800ab4e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2200      	movs	r2, #0
 800ab62:	f001 fb09 	bl	800c178 <osMessageQueuePut>
      break;
 800ab66:	e07c      	b.n	800ac62 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2206      	movs	r2, #6
 800ab6c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2205      	movs	r2, #5
 800ab72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab82:	2300      	movs	r3, #0
 800ab84:	2200      	movs	r2, #0
 800ab86:	f001 faf7 	bl	800c178 <osMessageQueuePut>
      break;
 800ab8a:	e06a      	b.n	800ac62 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d027      	beq.n	800abe6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aba2:	23ff      	movs	r3, #255	@ 0xff
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f997 	bl	800aed8 <USBH_Get_StringDesc>
 800abaa:	4603      	mov	r3, r0
 800abac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d103      	bne.n	800abbc <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2207      	movs	r2, #7
 800abb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800abba:	e054      	b.n	800ac66 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d151      	bne.n	800ac66 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2207      	movs	r2, #7
 800abc6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2205      	movs	r2, #5
 800abcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	f001 faca 	bl	800c178 <osMessageQueuePut>
      break;
 800abe4:	e03f      	b.n	800ac66 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2207      	movs	r2, #7
 800abea:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2205      	movs	r2, #5
 800abf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ac00:	2300      	movs	r3, #0
 800ac02:	2200      	movs	r2, #0
 800ac04:	f001 fab8 	bl	800c178 <osMessageQueuePut>
      break;
 800ac08:	e02d      	b.n	800ac66 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d017      	beq.n	800ac44 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ac20:	23ff      	movs	r3, #255	@ 0xff
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f958 	bl	800aed8 <USBH_Get_StringDesc>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ac36:	e018      	b.n	800ac6a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d115      	bne.n	800ac6a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
      break;
 800ac42:	e012      	b.n	800ac6a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
      break;
 800ac48:	e00f      	b.n	800ac6a <USBH_HandleEnum+0x442>

    default:
      break;
 800ac4a:	bf00      	nop
 800ac4c:	e00e      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e00c      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac52:	bf00      	nop
 800ac54:	e00a      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac56:	bf00      	nop
 800ac58:	e008      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac5a:	bf00      	nop
 800ac5c:	e006      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac5e:	bf00      	nop
 800ac60:	e004      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac62:	bf00      	nop
 800ac64:	e002      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac66:	bf00      	nop
 800ac68:	e000      	b.n	800ac6c <USBH_HandleEnum+0x444>
      break;
 800ac6a:	bf00      	nop
  }
  return Status;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop

0800ac78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f804 	bl	800acba <USBH_HandleSof>
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b0b      	cmp	r3, #11
 800acca:	d10a      	bne.n	800ace2 <USBH_HandleSof+0x28>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	4798      	blx	r3
  }
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2200      	movs	r2, #0
 800ad12:	f001 fa31 	bl	800c178 <osMessageQueuePut>
#endif
#endif

  return;
 800ad16:	bf00      	nop
}
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ad2e:	bf00      	nop
}
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2200      	movs	r2, #0
 800ad72:	f001 fa01 	bl	800c178 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f005 fc2e 	bl	8010602 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 ffb5 	bl	800bd1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	795b      	ldrb	r3, [r3, #5]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 ffaf 	bl	800bd1c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800add2:	2300      	movs	r3, #0
 800add4:	2200      	movs	r2, #0
 800add6:	f001 f9cf 	bl	800c178 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295
 800adfc:	2200      	movs	r2, #0
 800adfe:	f001 fa1b 	bl	800c238 <osMessageQueueGet>
 800ae02:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f0      	bne.n	800adec <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff faa2 	bl	800a354 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ae10:	e7ec      	b.n	800adec <USBH_Process_OS+0x8>

0800ae12 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2200      	movs	r2, #0
 800ae32:	f001 f9a1 	bl	800c178 <osMessageQueuePut>
#endif

  return USBH_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af02      	add	r7, sp, #8
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae52:	78fb      	ldrb	r3, [r7, #3]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae5e:	2100      	movs	r1, #0
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f864 	bl	800af2e <USBH_GetDescriptor>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	b292      	uxth	r2, r2
 800ae80:	4619      	mov	r1, r3
 800ae82:	f000 f919 	bl	800b0b8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	331c      	adds	r3, #28
 800aea0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aea2:	887b      	ldrh	r3, [r7, #2]
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aeac:	2100      	movs	r1, #0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f83d 	bl	800af2e <USBH_GetDescriptor>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d107      	bne.n	800aece <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aebe:	887b      	ldrh	r3, [r7, #2]
 800aec0:	461a      	mov	r2, r3
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f985 	bl	800b1d4 <USBH_ParseCfgDesc>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aece:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af02      	add	r7, sp, #8
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	461a      	mov	r2, r3
 800aee4:	460b      	mov	r3, r1
 800aee6:	72fb      	strb	r3, [r7, #11]
 800aee8:	4613      	mov	r3, r2
 800aeea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800aef4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800aefc:	893b      	ldrh	r3, [r7, #8]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	460b      	mov	r3, r1
 800af02:	2100      	movs	r1, #0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 f812 	bl	800af2e <USBH_GetDescriptor>
 800af0a:	4603      	mov	r3, r0
 800af0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d107      	bne.n	800af24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af1a:	893a      	ldrh	r2, [r7, #8]
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fb1e 	bl	800b560 <USBH_ParseStringDesc>
  }

  return status;
 800af24:	7dfb      	ldrb	r3, [r7, #23]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	607b      	str	r3, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	72fb      	strb	r3, [r7, #11]
 800af3c:	4613      	mov	r3, r2
 800af3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	789b      	ldrb	r3, [r3, #2]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d11c      	bne.n	800af82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2206      	movs	r2, #6
 800af58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	893a      	ldrh	r2, [r7, #8]
 800af5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800af60:	893b      	ldrh	r3, [r7, #8]
 800af62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af6a:	d104      	bne.n	800af76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f240 4209 	movw	r2, #1033	@ 0x409
 800af72:	829a      	strh	r2, [r3, #20]
 800af74:	e002      	b.n	800af7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	8b3a      	ldrh	r2, [r7, #24]
 800af80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af82:	8b3b      	ldrh	r3, [r7, #24]
 800af84:	461a      	mov	r2, r3
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f000 fb36 	bl	800b5fa <USBH_CtlReq>
 800af8e:	4603      	mov	r3, r0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	789b      	ldrb	r3, [r3, #2]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d10f      	bne.n	800afcc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2205      	movs	r2, #5
 800afb6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fb12 	bl	800b5fa <USBH_CtlReq>
 800afd6:	4603      	mov	r3, r0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	789b      	ldrb	r3, [r3, #2]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d10e      	bne.n	800b012 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2209      	movs	r2, #9
 800affe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	887a      	ldrh	r2, [r7, #2]
 800b004:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b012:	2200      	movs	r2, #0
 800b014:	2100      	movs	r1, #0
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 faef 	bl	800b5fa <USBH_CtlReq>
 800b01c:	4603      	mov	r3, r0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	460b      	mov	r3, r1
 800b030:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	789b      	ldrb	r3, [r3, #2]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d10f      	bne.n	800b05a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2203      	movs	r2, #3
 800b044:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b046:	78fb      	ldrb	r3, [r7, #3]
 800b048:	b29a      	uxth	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b05a:	2200      	movs	r2, #0
 800b05c:	2100      	movs	r1, #0
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 facb 	bl	800b5fa <USBH_CtlReq>
 800b064:	4603      	mov	r3, r0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	789b      	ldrb	r3, [r3, #2]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d10f      	bne.n	800b0a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 faa7 	bl	800b5fa <USBH_CtlReq>
 800b0ac:	4603      	mov	r3, r0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	785a      	ldrb	r2, [r3, #1]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	3302      	adds	r3, #2
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	3303      	adds	r3, #3
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	791a      	ldrb	r2, [r3, #4]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	795a      	ldrb	r2, [r3, #5]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	799a      	ldrb	r2, [r3, #6]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	79da      	ldrb	r2, [r3, #7]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	79db      	ldrb	r3, [r3, #7]
 800b114:	2b20      	cmp	r3, #32
 800b116:	dc0f      	bgt.n	800b138 <USBH_ParseDevDesc+0x80>
 800b118:	2b08      	cmp	r3, #8
 800b11a:	db14      	blt.n	800b146 <USBH_ParseDevDesc+0x8e>
 800b11c:	3b08      	subs	r3, #8
 800b11e:	4a2c      	ldr	r2, [pc, #176]	@ (800b1d0 <USBH_ParseDevDesc+0x118>)
 800b120:	fa22 f303 	lsr.w	r3, r2, r3
 800b124:	f003 0301 	and.w	r3, r3, #1
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf14      	ite	ne
 800b12c:	2301      	movne	r3, #1
 800b12e:	2300      	moveq	r3, #0
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <USBH_ParseDevDesc+0x84>
 800b136:	e006      	b.n	800b146 <USBH_ParseDevDesc+0x8e>
 800b138:	2b40      	cmp	r3, #64	@ 0x40
 800b13a:	d104      	bne.n	800b146 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	79da      	ldrb	r2, [r3, #7]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	71da      	strb	r2, [r3, #7]
      break;
 800b144:	e003      	b.n	800b14e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2240      	movs	r2, #64	@ 0x40
 800b14a:	71da      	strb	r2, [r3, #7]
      break;
 800b14c:	bf00      	nop
  }

  if (length > 8U)
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	2b08      	cmp	r3, #8
 800b152:	d936      	bls.n	800b1c2 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	3308      	adds	r3, #8
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3309      	adds	r3, #9
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	b29b      	uxth	r3, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	330a      	adds	r3, #10
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	461a      	mov	r2, r3
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	330b      	adds	r3, #11
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	330c      	adds	r3, #12
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	330d      	adds	r3, #13
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	b29b      	uxth	r3, r3
 800b19a:	4313      	orrs	r3, r2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	7b9a      	ldrb	r2, [r3, #14]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	7bda      	ldrb	r2, [r3, #15]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	7c1a      	ldrb	r2, [r3, #16]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	7c5a      	ldrb	r2, [r3, #17]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	745a      	strb	r2, [r3, #17]
  }
}
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	01000101 	.word	0x01000101

0800b1d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08c      	sub	sp, #48	@ 0x30
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b1e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	785a      	ldrb	r2, [r3, #1]
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3302      	adds	r3, #2
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	3303      	adds	r3, #3
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	021b      	lsls	r3, r3, #8
 800b224:	b29b      	uxth	r3, r3
 800b226:	4313      	orrs	r3, r2
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b22e:	bf28      	it	cs
 800b230:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b234:	b29a      	uxth	r2, r3
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	791a      	ldrb	r2, [r3, #4]
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	795a      	ldrb	r2, [r3, #5]
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	799a      	ldrb	r2, [r3, #6]
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	79da      	ldrb	r2, [r3, #7]
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	7a1a      	ldrb	r2, [r3, #8]
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b09      	cmp	r3, #9
 800b268:	d002      	beq.n	800b270 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	2209      	movs	r2, #9
 800b26e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	2b09      	cmp	r3, #9
 800b274:	f240 809d 	bls.w	800b3b2 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800b278:	2309      	movs	r3, #9
 800b27a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b280:	e081      	b.n	800b386 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b282:	f107 0316 	add.w	r3, r7, #22
 800b286:	4619      	mov	r1, r3
 800b288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b28a:	f000 f99c 	bl	800b5c6 <USBH_GetNextDesc>
 800b28e:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d176      	bne.n	800b386 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	d002      	beq.n	800b2a6 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	2209      	movs	r2, #9
 800b2a4:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2aa:	221a      	movs	r2, #26
 800b2ac:	fb02 f303 	mul.w	r3, r2, r3
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	6a3a      	ldr	r2, [r7, #32]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b2ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2bc:	69f8      	ldr	r0, [r7, #28]
 800b2be:	f000 f87e 	bl	800b3be <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2cc:	e043      	b.n	800b356 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2ce:	f107 0316 	add.w	r3, r7, #22
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2d6:	f000 f976 	bl	800b5c6 <USBH_GetNextDesc>
 800b2da:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2b05      	cmp	r3, #5
 800b2e2:	d138      	bne.n	800b356 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	795b      	ldrb	r3, [r3, #5]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d10f      	bne.n	800b30c <USBH_ParseCfgDesc+0x138>
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	799b      	ldrb	r3, [r3, #6]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d10b      	bne.n	800b30c <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	79db      	ldrb	r3, [r3, #7]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10f      	bne.n	800b31c <USBH_ParseCfgDesc+0x148>
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b09      	cmp	r3, #9
 800b302:	d00b      	beq.n	800b31c <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	2209      	movs	r2, #9
 800b308:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b30a:	e007      	b.n	800b31c <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b07      	cmp	r3, #7
 800b312:	d004      	beq.n	800b31e <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b316:	2207      	movs	r2, #7
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e000      	b.n	800b31e <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b31c:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b31e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b322:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b326:	3201      	adds	r2, #1
 800b328:	00d2      	lsls	r2, r2, #3
 800b32a:	211a      	movs	r1, #26
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	4413      	add	r3, r2
 800b332:	3308      	adds	r3, #8
 800b334:	6a3a      	ldr	r2, [r7, #32]
 800b336:	4413      	add	r3, r2
 800b338:	3304      	adds	r3, #4
 800b33a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b33c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b33e:	69b9      	ldr	r1, [r7, #24]
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 f86b 	bl	800b41c <USBH_ParseEPDesc>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b34c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b350:	3301      	adds	r3, #1
 800b352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b35e:	429a      	cmp	r2, r3
 800b360:	d204      	bcs.n	800b36c <USBH_ParseCfgDesc+0x198>
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	885a      	ldrh	r2, [r3, #2]
 800b366:	8afb      	ldrh	r3, [r7, #22]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d8b0      	bhi.n	800b2ce <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	791b      	ldrb	r3, [r3, #4]
 800b370:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b374:	429a      	cmp	r2, r3
 800b376:	d201      	bcs.n	800b37c <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b378:	2303      	movs	r3, #3
 800b37a:	e01c      	b.n	800b3b6 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b380:	3301      	adds	r3, #1
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d805      	bhi.n	800b39a <USBH_ParseCfgDesc+0x1c6>
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	885a      	ldrh	r2, [r3, #2]
 800b392:	8afb      	ldrh	r3, [r7, #22]
 800b394:	429a      	cmp	r2, r3
 800b396:	f63f af74 	bhi.w	800b282 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	791b      	ldrb	r3, [r3, #4]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	bf28      	it	cs
 800b3a2:	2302      	movcs	r3, #2
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d201      	bcs.n	800b3b2 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e001      	b.n	800b3b6 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3730      	adds	r7, #48	@ 0x30
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781a      	ldrb	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	785a      	ldrb	r2, [r3, #1]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	789a      	ldrb	r2, [r3, #2]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	78da      	ldrb	r2, [r3, #3]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	791a      	ldrb	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	795a      	ldrb	r2, [r3, #5]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	799a      	ldrb	r2, [r3, #6]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	79da      	ldrb	r2, [r3, #7]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	7a1a      	ldrb	r2, [r3, #8]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	721a      	strb	r2, [r3, #8]
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	785a      	ldrb	r2, [r3, #1]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	789a      	ldrb	r2, [r3, #2]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	78da      	ldrb	r2, [r3, #3]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3304      	adds	r3, #4
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3305      	adds	r3, #5
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4313      	orrs	r3, r2
 800b460:	b29a      	uxth	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	799a      	ldrb	r2, [r3, #6]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b476:	2303      	movs	r3, #3
 800b478:	75fb      	strb	r3, [r7, #23]
 800b47a:	e031      	b.n	800b4e0 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	889b      	ldrh	r3, [r3, #4]
 800b480:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b484:	f023 0307 	bic.w	r3, r3, #7
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	889b      	ldrh	r3, [r3, #4]
 800b492:	b21a      	sxth	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3304      	adds	r3, #4
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	4619      	mov	r1, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3305      	adds	r3, #5
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10f      	bne.n	800b4d2 <USBH_ParseEPDesc+0xb6>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3305      	adds	r3, #5
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	021b      	lsls	r3, r3, #8
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	b21b      	sxth	r3, r3
 800b4ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ce:	b21b      	sxth	r3, r3
 800b4d0:	e001      	b.n	800b4d6 <USBH_ParseEPDesc+0xba>
 800b4d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	b21b      	sxth	r3, r3
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d116      	bne.n	800b518 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	78db      	ldrb	r3, [r3, #3]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d005      	beq.n	800b502 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	78db      	ldrb	r3, [r3, #3]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d127      	bne.n	800b552 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	799b      	ldrb	r3, [r3, #6]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <USBH_ParseEPDesc+0xf6>
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	799b      	ldrb	r3, [r3, #6]
 800b50e:	2b10      	cmp	r3, #16
 800b510:	d91f      	bls.n	800b552 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b512:	2303      	movs	r3, #3
 800b514:	75fb      	strb	r3, [r7, #23]
 800b516:	e01c      	b.n	800b552 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	78db      	ldrb	r3, [r3, #3]
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	2b01      	cmp	r3, #1
 800b522:	d10a      	bne.n	800b53a <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	799b      	ldrb	r3, [r3, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <USBH_ParseEPDesc+0x118>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	799b      	ldrb	r3, [r3, #6]
 800b530:	2b10      	cmp	r3, #16
 800b532:	d90e      	bls.n	800b552 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b534:	2303      	movs	r3, #3
 800b536:	75fb      	strb	r3, [r7, #23]
 800b538:	e00b      	b.n	800b552 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	78db      	ldrb	r3, [r3, #3]
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	2b03      	cmp	r3, #3
 800b544:	d105      	bne.n	800b552 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	799b      	ldrb	r3, [r3, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b54e:	2303      	movs	r3, #3
 800b550:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
}
 800b554:	4618      	mov	r0, r3
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3301      	adds	r3, #1
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b03      	cmp	r3, #3
 800b576:	d120      	bne.n	800b5ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	1e9a      	subs	r2, r3, #2
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	4293      	cmp	r3, r2
 800b582:	bf28      	it	cs
 800b584:	4613      	movcs	r3, r2
 800b586:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3302      	adds	r3, #2
 800b58c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b58e:	2300      	movs	r3, #0
 800b590:	82fb      	strh	r3, [r7, #22]
 800b592:	e00b      	b.n	800b5ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	4413      	add	r3, r2
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b5a6:	8afb      	ldrh	r3, [r7, #22]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	82fb      	strh	r3, [r7, #22]
 800b5ac:	8afa      	ldrh	r2, [r7, #22]
 800b5ae:	8abb      	ldrh	r3, [r7, #20]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d3ef      	bcc.n	800b594 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
  }
}
 800b5ba:	bf00      	nop
 800b5bc:	371c      	adds	r7, #28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	4413      	add	r3, r2
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b086      	sub	sp, #24
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	4613      	mov	r3, r2
 800b606:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b608:	2301      	movs	r3, #1
 800b60a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	789b      	ldrb	r3, [r3, #2]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d002      	beq.n	800b61a <USBH_CtlReq+0x20>
 800b614:	2b02      	cmp	r3, #2
 800b616:	d01d      	beq.n	800b654 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b618:	e043      	b.n	800b6a2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	88fa      	ldrh	r2, [r7, #6]
 800b624:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2202      	movs	r2, #2
 800b630:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b632:	2301      	movs	r3, #1
 800b634:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2203      	movs	r2, #3
 800b63a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b64a:	2300      	movs	r3, #0
 800b64c:	2200      	movs	r2, #0
 800b64e:	f000 fd93 	bl	800c178 <osMessageQueuePut>
      break;
 800b652:	e026      	b.n	800b6a2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 f829 	bl	800b6ac <USBH_HandleControl>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <USBH_CtlReq+0x70>
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b03      	cmp	r3, #3
 800b668:	d106      	bne.n	800b678 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	761a      	strb	r2, [r3, #24]
 800b676:	e005      	b.n	800b684 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d102      	bne.n	800b684 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2203      	movs	r2, #3
 800b688:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b698:	2300      	movs	r3, #0
 800b69a:	2200      	movs	r2, #0
 800b69c:	f000 fd6c 	bl	800c178 <osMessageQueuePut>
      break;
 800b6a0:	bf00      	nop
  }
  return status;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af02      	add	r7, sp, #8
 800b6b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7e1b      	ldrb	r3, [r3, #24]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	2b0a      	cmp	r3, #10
 800b6c4:	f200 8229 	bhi.w	800bb1a <USBH_HandleControl+0x46e>
 800b6c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <USBH_HandleControl+0x24>)
 800b6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ce:	bf00      	nop
 800b6d0:	0800b6fd 	.word	0x0800b6fd
 800b6d4:	0800b717 	.word	0x0800b717
 800b6d8:	0800b7b9 	.word	0x0800b7b9
 800b6dc:	0800b7df 	.word	0x0800b7df
 800b6e0:	0800b86b 	.word	0x0800b86b
 800b6e4:	0800b895 	.word	0x0800b895
 800b6e8:	0800b957 	.word	0x0800b957
 800b6ec:	0800b979 	.word	0x0800b979
 800b6f0:	0800ba0b 	.word	0x0800ba0b
 800b6f4:	0800ba31 	.word	0x0800ba31
 800b6f8:	0800bac3 	.word	0x0800bac3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f103 0110 	add.w	r1, r3, #16
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	795b      	ldrb	r3, [r3, #5]
 800b706:	461a      	mov	r2, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fa17 	bl	800bb3c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2202      	movs	r2, #2
 800b712:	761a      	strb	r2, [r3, #24]
      break;
 800b714:	e20c      	b.n	800bb30 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	795b      	ldrb	r3, [r3, #5]
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f005 f85f 	bl	80107e0 <USBH_LL_GetURBState>
 800b722:	4603      	mov	r3, r0
 800b724:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d12c      	bne.n	800b786 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	7c1b      	ldrb	r3, [r3, #16]
 800b730:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b734:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	8adb      	ldrh	r3, [r3, #22]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b73e:	7b7b      	ldrb	r3, [r7, #13]
 800b740:	2b80      	cmp	r3, #128	@ 0x80
 800b742:	d103      	bne.n	800b74c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2203      	movs	r2, #3
 800b748:	761a      	strb	r2, [r3, #24]
 800b74a:	e00d      	b.n	800b768 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2205      	movs	r2, #5
 800b750:	761a      	strb	r2, [r3, #24]
 800b752:	e009      	b.n	800b768 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b754:	7b7b      	ldrb	r3, [r7, #13]
 800b756:	2b80      	cmp	r3, #128	@ 0x80
 800b758:	d103      	bne.n	800b762 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2209      	movs	r2, #9
 800b75e:	761a      	strb	r2, [r3, #24]
 800b760:	e002      	b.n	800b768 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2207      	movs	r2, #7
 800b766:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2203      	movs	r2, #3
 800b76c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b77c:	2300      	movs	r3, #0
 800b77e:	2200      	movs	r2, #0
 800b780:	f000 fcfa 	bl	800c178 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b784:	e1cb      	b.n	800bb1e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b786:	7bbb      	ldrb	r3, [r7, #14]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d003      	beq.n	800b794 <USBH_HandleControl+0xe8>
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	f040 81c5 	bne.w	800bb1e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	220b      	movs	r2, #11
 800b798:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2203      	movs	r2, #3
 800b79e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f000 fce1 	bl	800c178 <osMessageQueuePut>
      break;
 800b7b6:	e1b2      	b.n	800bb1e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6899      	ldr	r1, [r3, #8]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	899a      	ldrh	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	791b      	ldrb	r3, [r3, #4]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f9f2 	bl	800bbba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2204      	movs	r2, #4
 800b7da:	761a      	strb	r2, [r3, #24]
      break;
 800b7dc:	e1a8      	b.n	800bb30 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f004 fffb 	bl	80107e0 <USBH_LL_GetURBState>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d110      	bne.n	800b816 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2209      	movs	r2, #9
 800b7f8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b80e:	2300      	movs	r3, #0
 800b810:	2200      	movs	r2, #0
 800b812:	f000 fcb1 	bl	800c178 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b05      	cmp	r3, #5
 800b81a:	d110      	bne.n	800b83e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b81c:	2303      	movs	r3, #3
 800b81e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2203      	movs	r2, #3
 800b824:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b834:	2300      	movs	r3, #0
 800b836:	2200      	movs	r2, #0
 800b838:	f000 fc9e 	bl	800c178 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b83c:	e171      	b.n	800bb22 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b83e:	7bbb      	ldrb	r3, [r7, #14]
 800b840:	2b04      	cmp	r3, #4
 800b842:	f040 816e 	bne.w	800bb22 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	220b      	movs	r2, #11
 800b84a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2203      	movs	r2, #3
 800b850:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b860:	2300      	movs	r3, #0
 800b862:	2200      	movs	r2, #0
 800b864:	f000 fc88 	bl	800c178 <osMessageQueuePut>
      break;
 800b868:	e15b      	b.n	800bb22 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6899      	ldr	r1, [r3, #8]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	899a      	ldrh	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	795b      	ldrb	r3, [r3, #5]
 800b876:	2001      	movs	r0, #1
 800b878:	9000      	str	r0, [sp, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f978 	bl	800bb70 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b886:	b29a      	uxth	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2206      	movs	r2, #6
 800b890:	761a      	strb	r2, [r3, #24]
      break;
 800b892:	e14d      	b.n	800bb30 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	795b      	ldrb	r3, [r3, #5]
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f004 ffa0 	bl	80107e0 <USBH_LL_GetURBState>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d111      	bne.n	800b8ce <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2207      	movs	r2, #7
 800b8ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2203      	movs	r2, #3
 800b8b4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f000 fc56 	bl	800c178 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8cc:	e12b      	b.n	800bb26 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	2b05      	cmp	r3, #5
 800b8d2:	d113      	bne.n	800b8fc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	220c      	movs	r2, #12
 800b8d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f000 fc3f 	bl	800c178 <osMessageQueuePut>
      break;
 800b8fa:	e114      	b.n	800bb26 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d111      	bne.n	800b926 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2205      	movs	r2, #5
 800b906:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2203      	movs	r2, #3
 800b90c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b91c:	2300      	movs	r3, #0
 800b91e:	2200      	movs	r2, #0
 800b920:	f000 fc2a 	bl	800c178 <osMessageQueuePut>
      break;
 800b924:	e0ff      	b.n	800bb26 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b04      	cmp	r3, #4
 800b92a:	f040 80fc 	bne.w	800bb26 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	220b      	movs	r2, #11
 800b932:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b934:	2302      	movs	r3, #2
 800b936:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2203      	movs	r2, #3
 800b93c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b94c:	2300      	movs	r3, #0
 800b94e:	2200      	movs	r2, #0
 800b950:	f000 fc12 	bl	800c178 <osMessageQueuePut>
      break;
 800b954:	e0e7      	b.n	800bb26 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	791b      	ldrb	r3, [r3, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f92b 	bl	800bbba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2208      	movs	r2, #8
 800b974:	761a      	strb	r2, [r3, #24]

      break;
 800b976:	e0db      	b.n	800bb30 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	791b      	ldrb	r3, [r3, #4]
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f004 ff2e 	bl	80107e0 <USBH_LL_GetURBState>
 800b984:	4603      	mov	r3, r0
 800b986:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d113      	bne.n	800b9b6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	220d      	movs	r2, #13
 800b992:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2203      	movs	r2, #3
 800b99c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f000 fbe2 	bl	800c178 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b9b4:	e0b9      	b.n	800bb2a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d111      	bne.n	800b9e0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	220b      	movs	r2, #11
 800b9c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f000 fbcd 	bl	800c178 <osMessageQueuePut>
      break;
 800b9de:	e0a4      	b.n	800bb2a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	2b05      	cmp	r3, #5
 800b9e4:	f040 80a1 	bne.w	800bb2a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba00:	2300      	movs	r3, #0
 800ba02:	2200      	movs	r2, #0
 800ba04:	f000 fbb8 	bl	800c178 <osMessageQueuePut>
      break;
 800ba08:	e08f      	b.n	800bb2a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	795b      	ldrb	r3, [r3, #5]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	9200      	str	r2, [sp, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f8aa 	bl	800bb70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	761a      	strb	r2, [r3, #24]
      break;
 800ba2e:	e07f      	b.n	800bb30 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	795b      	ldrb	r3, [r3, #5]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f004 fed2 	bl	80107e0 <USBH_LL_GetURBState>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d113      	bne.n	800ba6e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	220d      	movs	r2, #13
 800ba4e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2203      	movs	r2, #3
 800ba54:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba64:	2300      	movs	r3, #0
 800ba66:	2200      	movs	r2, #0
 800ba68:	f000 fb86 	bl	800c178 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba6c:	e05f      	b.n	800bb2e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d111      	bne.n	800ba98 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2209      	movs	r2, #9
 800ba78:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2200      	movs	r2, #0
 800ba92:	f000 fb71 	bl	800c178 <osMessageQueuePut>
      break;
 800ba96:	e04a      	b.n	800bb2e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	d147      	bne.n	800bb2e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	220b      	movs	r2, #11
 800baa2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2203      	movs	r2, #3
 800baa8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bab8:	2300      	movs	r3, #0
 800baba:	2200      	movs	r2, #0
 800babc:	f000 fb5c 	bl	800c178 <osMessageQueuePut>
      break;
 800bac0:	e035      	b.n	800bb2e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	7e5b      	ldrb	r3, [r3, #25]
 800bac6:	3301      	adds	r3, #1
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	765a      	strb	r2, [r3, #25]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7e5b      	ldrb	r3, [r3, #25]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d806      	bhi.n	800bae4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bae2:	e025      	b.n	800bb30 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800baea:	2106      	movs	r1, #6
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	795b      	ldrb	r3, [r3, #5]
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f90d 	bl	800bd1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	791b      	ldrb	r3, [r3, #4]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f907 	bl	800bd1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb14:	2302      	movs	r3, #2
 800bb16:	73fb      	strb	r3, [r7, #15]
      break;
 800bb18:	e00a      	b.n	800bb30 <USBH_HandleControl+0x484>

    default:
      break;
 800bb1a:	bf00      	nop
 800bb1c:	e008      	b.n	800bb30 <USBH_HandleControl+0x484>
      break;
 800bb1e:	bf00      	nop
 800bb20:	e006      	b.n	800bb30 <USBH_HandleControl+0x484>
      break;
 800bb22:	bf00      	nop
 800bb24:	e004      	b.n	800bb30 <USBH_HandleControl+0x484>
      break;
 800bb26:	bf00      	nop
 800bb28:	e002      	b.n	800bb30 <USBH_HandleControl+0x484>
      break;
 800bb2a:	bf00      	nop
 800bb2c:	e000      	b.n	800bb30 <USBH_HandleControl+0x484>
      break;
 800bb2e:	bf00      	nop
  }

  return status;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop

0800bb3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af04      	add	r7, sp, #16
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb4a:	79f9      	ldrb	r1, [r7, #7]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	2308      	movs	r3, #8
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	2200      	movs	r2, #0
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f004 fe0c 	bl	801077e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	460b      	mov	r3, r1
 800bb80:	80fb      	strh	r3, [r7, #6]
 800bb82:	4613      	mov	r3, r2
 800bb84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb94:	7979      	ldrb	r1, [r7, #5]
 800bb96:	7e3b      	ldrb	r3, [r7, #24]
 800bb98:	9303      	str	r3, [sp, #12]
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	9302      	str	r3, [sp, #8]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	2301      	movs	r3, #1
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2300      	movs	r3, #0
 800bba8:	2200      	movs	r2, #0
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f004 fde7 	bl	801077e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b088      	sub	sp, #32
 800bbbe:	af04      	add	r7, sp, #16
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	460b      	mov	r3, r1
 800bbca:	80fb      	strh	r3, [r7, #6]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbd0:	7979      	ldrb	r1, [r7, #5]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9303      	str	r3, [sp, #12]
 800bbd6:	88fb      	ldrh	r3, [r7, #6]
 800bbd8:	9302      	str	r3, [sp, #8]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	2301      	movs	r3, #1
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f004 fdc9 	bl	801077e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bbec:	2300      	movs	r3, #0

}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b088      	sub	sp, #32
 800bbfa:	af04      	add	r7, sp, #16
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	4611      	mov	r1, r2
 800bc02:	461a      	mov	r2, r3
 800bc04:	460b      	mov	r3, r1
 800bc06:	80fb      	strh	r3, [r7, #6]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc1a:	7979      	ldrb	r1, [r7, #5]
 800bc1c:	7e3b      	ldrb	r3, [r7, #24]
 800bc1e:	9303      	str	r3, [sp, #12]
 800bc20:	88fb      	ldrh	r3, [r7, #6]
 800bc22:	9302      	str	r3, [sp, #8]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	2301      	movs	r3, #1
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	2200      	movs	r2, #0
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f004 fda4 	bl	801077e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af04      	add	r7, sp, #16
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	460b      	mov	r3, r1
 800bc50:	80fb      	strh	r3, [r7, #6]
 800bc52:	4613      	mov	r3, r2
 800bc54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc56:	7979      	ldrb	r1, [r7, #5]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	88fb      	ldrh	r3, [r7, #6]
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	2301      	movs	r3, #1
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	2302      	movs	r3, #2
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f004 fd86 	bl	801077e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af04      	add	r7, sp, #16
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	4608      	mov	r0, r1
 800bc86:	4611      	mov	r1, r2
 800bc88:	461a      	mov	r2, r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	70fb      	strb	r3, [r7, #3]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70bb      	strb	r3, [r7, #2]
 800bc92:	4613      	mov	r3, r2
 800bc94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bc96:	7878      	ldrb	r0, [r7, #1]
 800bc98:	78ba      	ldrb	r2, [r7, #2]
 800bc9a:	78f9      	ldrb	r1, [r7, #3]
 800bc9c:	8b3b      	ldrh	r3, [r7, #24]
 800bc9e:	9302      	str	r3, [sp, #8]
 800bca0:	7d3b      	ldrb	r3, [r7, #20]
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	7c3b      	ldrb	r3, [r7, #16]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	4603      	mov	r3, r0
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f004 fd19 	bl	80106e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bcc6:	78fb      	ldrb	r3, [r7, #3]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f004 fd38 	bl	8010740 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f836 	bl	800bd58 <USBH_GetFreePipe>
 800bcec:	4603      	mov	r3, r0
 800bcee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
 800bcf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00a      	beq.n	800bd10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	33e0      	adds	r3, #224	@ 0xe0
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd10:	89fb      	ldrh	r3, [r7, #14]
 800bd12:	b2db      	uxtb	r3, r3
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bd28:	78fb      	ldrb	r3, [r7, #3]
 800bd2a:	2b0f      	cmp	r3, #15
 800bd2c:	d80d      	bhi.n	800bd4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd2e:	78fb      	ldrb	r3, [r7, #3]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	33e0      	adds	r3, #224	@ 0xe0
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	685a      	ldr	r2, [r3, #4]
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	33e0      	adds	r3, #224	@ 0xe0
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	440b      	add	r3, r1
 800bd48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]
 800bd68:	e00f      	b.n	800bd8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	33e0      	adds	r3, #224	@ 0xe0
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	e007      	b.n	800bd94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	3301      	adds	r3, #1
 800bd88:	73fb      	strb	r3, [r7, #15]
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	2b0f      	cmp	r3, #15
 800bd8e:	d9ec      	bls.n	800bd6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bd90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <__NVIC_SetPriority>:
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	db0a      	blt.n	800bdca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	490c      	ldr	r1, [pc, #48]	@ (800bdec <__NVIC_SetPriority+0x4c>)
 800bdba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdbe:	0112      	lsls	r2, r2, #4
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bdc8:	e00a      	b.n	800bde0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	4908      	ldr	r1, [pc, #32]	@ (800bdf0 <__NVIC_SetPriority+0x50>)
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	f003 030f 	and.w	r3, r3, #15
 800bdd6:	3b04      	subs	r3, #4
 800bdd8:	0112      	lsls	r2, r2, #4
 800bdda:	b2d2      	uxtb	r2, r2
 800bddc:	440b      	add	r3, r1
 800bdde:	761a      	strb	r2, [r3, #24]
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	e000e100 	.word	0xe000e100
 800bdf0:	e000ed00 	.word	0xe000ed00

0800bdf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bdf8:	4b05      	ldr	r3, [pc, #20]	@ (800be10 <SysTick_Handler+0x1c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bdfc:	f002 ff1e 	bl	800ec3c <xTaskGetSchedulerState>
 800be00:	4603      	mov	r3, r0
 800be02:	2b01      	cmp	r3, #1
 800be04:	d001      	beq.n	800be0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be06:	f004 f817 	bl	800fe38 <xPortSysTickHandler>
  }
}
 800be0a:	bf00      	nop
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	e000e010 	.word	0xe000e010

0800be14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be18:	2100      	movs	r1, #0
 800be1a:	f06f 0004 	mvn.w	r0, #4
 800be1e:	f7ff ffbf 	bl	800bda0 <__NVIC_SetPriority>
#endif
}
 800be22:	bf00      	nop
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be2e:	f3ef 8305 	mrs	r3, IPSR
 800be32:	603b      	str	r3, [r7, #0]
  return(result);
 800be34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be3a:	f06f 0305 	mvn.w	r3, #5
 800be3e:	607b      	str	r3, [r7, #4]
 800be40:	e00c      	b.n	800be5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be42:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <osKernelInitialize+0x44>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d105      	bne.n	800be56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be4a:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <osKernelInitialize+0x44>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be50:	2300      	movs	r3, #0
 800be52:	607b      	str	r3, [r7, #4]
 800be54:	e002      	b.n	800be5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be56:	f04f 33ff 	mov.w	r3, #4294967295
 800be5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be5c:	687b      	ldr	r3, [r7, #4]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	200007f4 	.word	0x200007f4

0800be70 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4a0c      	ldr	r2, [pc, #48]	@ (800beb8 <osKernelGetInfo+0x48>)
 800be86:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4a0b      	ldr	r2, [pc, #44]	@ (800beb8 <osKernelGetInfo+0x48>)
 800be8c:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00c      	beq.n	800beae <osKernelGetInfo+0x3e>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b11      	cmp	r3, #17
 800be9e:	d901      	bls.n	800bea4 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800bea0:	2311      	movs	r3, #17
 800bea2:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4905      	ldr	r1, [pc, #20]	@ (800bebc <osKernelGetInfo+0x4c>)
 800bea8:	68b8      	ldr	r0, [r7, #8]
 800beaa:	f006 fb82 	bl	80125b2 <memcpy>
  }

  return (osOK);
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	05f5f531 	.word	0x05f5f531
 800bebc:	080156f8 	.word	0x080156f8

0800bec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bec6:	f3ef 8305 	mrs	r3, IPSR
 800beca:	603b      	str	r3, [r7, #0]
  return(result);
 800becc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <osKernelStart+0x1a>
    stat = osErrorISR;
 800bed2:	f06f 0305 	mvn.w	r3, #5
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e010      	b.n	800befc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800beda:	4b0b      	ldr	r3, [pc, #44]	@ (800bf08 <osKernelStart+0x48>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d109      	bne.n	800bef6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bee2:	f7ff ff97 	bl	800be14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bee6:	4b08      	ldr	r3, [pc, #32]	@ (800bf08 <osKernelStart+0x48>)
 800bee8:	2202      	movs	r2, #2
 800beea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800beec:	f002 f82e 	bl	800df4c <vTaskStartScheduler>
      stat = osOK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	e002      	b.n	800befc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bef6:	f04f 33ff 	mov.w	r3, #4294967295
 800befa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800befc:	687b      	ldr	r3, [r7, #4]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200007f4 	.word	0x200007f4

0800bf0c <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800bf10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
	...

0800bf20 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800bf24:	4b03      	ldr	r3, [pc, #12]	@ (800bf34 <osKernelGetSysTimerFreq+0x14>)
 800bf26:	681b      	ldr	r3, [r3, #0]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	2000022c 	.word	0x2000022c

0800bf38 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08e      	sub	sp, #56	@ 0x38
 800bf3c:	af04      	add	r7, sp, #16
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf48:	f3ef 8305 	mrs	r3, IPSR
 800bf4c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d17e      	bne.n	800c052 <osThreadNew+0x11a>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d07b      	beq.n	800c052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf5a:	2380      	movs	r3, #128	@ 0x80
 800bf5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf5e:	2318      	movs	r3, #24
 800bf60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d045      	beq.n	800bffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <osThreadNew+0x48>
        name = attr->name;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d008      	beq.n	800bfa6 <osThreadNew+0x6e>
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	2b38      	cmp	r3, #56	@ 0x38
 800bf98:	d805      	bhi.n	800bfa6 <osThreadNew+0x6e>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <osThreadNew+0x72>
        return (NULL);
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e054      	b.n	800c054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	089b      	lsrs	r3, r3, #2
 800bfb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <osThreadNew+0xa8>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	2ba7      	cmp	r3, #167	@ 0xa7
 800bfc8:	d90a      	bls.n	800bfe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d006      	beq.n	800bfe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <osThreadNew+0xa8>
        mem = 1;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	61bb      	str	r3, [r7, #24]
 800bfde:	e010      	b.n	800c002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10c      	bne.n	800c002 <osThreadNew+0xca>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d108      	bne.n	800c002 <osThreadNew+0xca>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d104      	bne.n	800c002 <osThreadNew+0xca>
          mem = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61bb      	str	r3, [r7, #24]
 800bffc:	e001      	b.n	800c002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d110      	bne.n	800c02a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c010:	9202      	str	r2, [sp, #8]
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6a3a      	ldr	r2, [r7, #32]
 800c01c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f001 fb1e 	bl	800d660 <xTaskCreateStatic>
 800c024:	4603      	mov	r3, r0
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	e013      	b.n	800c052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d110      	bne.n	800c052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	b29a      	uxth	r2, r3
 800c034:	f107 0310 	add.w	r3, r7, #16
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f001 fb6c 	bl	800d720 <xTaskCreate>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d001      	beq.n	800c052 <osThreadNew+0x11a>
            hTask = NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c052:	693b      	ldr	r3, [r7, #16]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3728      	adds	r7, #40	@ 0x28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c064:	f3ef 8305 	mrs	r3, IPSR
 800c068:	60bb      	str	r3, [r7, #8]
  return(result);
 800c06a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <osDelay+0x1c>
    stat = osErrorISR;
 800c070:	f06f 0305 	mvn.w	r3, #5
 800c074:	60fb      	str	r3, [r7, #12]
 800c076:	e007      	b.n	800c088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f001 fd1e 	bl	800dac4 <vTaskDelay>
    }
  }

  return (stat);
 800c088:	68fb      	ldr	r3, [r7, #12]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c092:	b580      	push	{r7, lr}
 800c094:	b08a      	sub	sp, #40	@ 0x28
 800c096:	af02      	add	r7, sp, #8
 800c098:	60f8      	str	r0, [r7, #12]
 800c09a:	60b9      	str	r1, [r7, #8]
 800c09c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0a2:	f3ef 8305 	mrs	r3, IPSR
 800c0a6:	613b      	str	r3, [r7, #16]
  return(result);
 800c0a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d15f      	bne.n	800c16e <osMessageQueueNew+0xdc>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d05c      	beq.n	800c16e <osMessageQueueNew+0xdc>
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d059      	beq.n	800c16e <osMessageQueueNew+0xdc>
    mem = -1;
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d029      	beq.n	800c11a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d012      	beq.n	800c0f4 <osMessageQueueNew+0x62>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c0d4:	d90e      	bls.n	800c0f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00a      	beq.n	800c0f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	695a      	ldr	r2, [r3, #20]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d302      	bcc.n	800c0f4 <osMessageQueueNew+0x62>
        mem = 1;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	61bb      	str	r3, [r7, #24]
 800c0f2:	e014      	b.n	800c11e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d110      	bne.n	800c11e <osMessageQueueNew+0x8c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10c      	bne.n	800c11e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d108      	bne.n	800c11e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d104      	bne.n	800c11e <osMessageQueueNew+0x8c>
          mem = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	61bb      	str	r3, [r7, #24]
 800c118:	e001      	b.n	800c11e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d10b      	bne.n	800c13c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691a      	ldr	r2, [r3, #16]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	2100      	movs	r1, #0
 800c12e:	9100      	str	r1, [sp, #0]
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 fbec 	bl	800c910 <xQueueGenericCreateStatic>
 800c138:	61f8      	str	r0, [r7, #28]
 800c13a:	e008      	b.n	800c14e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d105      	bne.n	800c14e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c142:	2200      	movs	r2, #0
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f000 fc5f 	bl	800ca0a <xQueueGenericCreate>
 800c14c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00c      	beq.n	800c16e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e001      	b.n	800c166 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	69f8      	ldr	r0, [r7, #28]
 800c16a:	f001 fa1b 	bl	800d5a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c16e:	69fb      	ldr	r3, [r7, #28]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3720      	adds	r7, #32
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	4613      	mov	r3, r2
 800c186:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c190:	f3ef 8305 	mrs	r3, IPSR
 800c194:	617b      	str	r3, [r7, #20]
  return(result);
 800c196:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d028      	beq.n	800c1ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <osMessageQueuePut+0x36>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <osMessageQueuePut+0x36>
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c1ae:	f06f 0303 	mvn.w	r3, #3
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e038      	b.n	800c228 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1ba:	f107 0210 	add.w	r2, r7, #16
 800c1be:	2300      	movs	r3, #0
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	69b8      	ldr	r0, [r7, #24]
 800c1c4:	f000 fdb4 	bl	800cd30 <xQueueGenericSendFromISR>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d003      	beq.n	800c1d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1ce:	f06f 0302 	mvn.w	r3, #2
 800c1d2:	61fb      	str	r3, [r7, #28]
 800c1d4:	e028      	b.n	800c228 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d025      	beq.n	800c228 <osMessageQueuePut+0xb0>
 800c1dc:	4b15      	ldr	r3, [pc, #84]	@ (800c234 <osMessageQueuePut+0xbc>)
 800c1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	e01c      	b.n	800c228 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <osMessageQueuePut+0x82>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c1fa:	f06f 0303 	mvn.w	r3, #3
 800c1fe:	61fb      	str	r3, [r7, #28]
 800c200:	e012      	b.n	800c228 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c202:	2300      	movs	r3, #0
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	69b8      	ldr	r0, [r7, #24]
 800c20a:	f000 fc8f 	bl	800cb2c <xQueueGenericSend>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b01      	cmp	r3, #1
 800c212:	d009      	beq.n	800c228 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c21a:	f06f 0301 	mvn.w	r3, #1
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	e002      	b.n	800c228 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c222:	f06f 0302 	mvn.w	r3, #2
 800c226:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c228:	69fb      	ldr	r3, [r7, #28]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	e000ed04 	.word	0xe000ed04

0800c238 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c24e:	f3ef 8305 	mrs	r3, IPSR
 800c252:	617b      	str	r3, [r7, #20]
  return(result);
 800c254:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c256:	2b00      	cmp	r3, #0
 800c258:	d028      	beq.n	800c2ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d005      	beq.n	800c26c <osMessageQueueGet+0x34>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d002      	beq.n	800c26c <osMessageQueueGet+0x34>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c26c:	f06f 0303 	mvn.w	r3, #3
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e037      	b.n	800c2e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c278:	f107 0310 	add.w	r3, r7, #16
 800c27c:	461a      	mov	r2, r3
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	69b8      	ldr	r0, [r7, #24]
 800c282:	f000 ffe5 	bl	800d250 <xQueueReceiveFromISR>
 800c286:	4603      	mov	r3, r0
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d003      	beq.n	800c294 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c28c:	f06f 0302 	mvn.w	r3, #2
 800c290:	61fb      	str	r3, [r7, #28]
 800c292:	e027      	b.n	800c2e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d024      	beq.n	800c2e4 <osMessageQueueGet+0xac>
 800c29a:	4b15      	ldr	r3, [pc, #84]	@ (800c2f0 <osMessageQueueGet+0xb8>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	e01b      	b.n	800c2e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <osMessageQueueGet+0x80>
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d103      	bne.n	800c2c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c2b8:	f06f 0303 	mvn.w	r3, #3
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	e011      	b.n	800c2e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	69b8      	ldr	r0, [r7, #24]
 800c2c6:	f000 fdd1 	bl	800ce6c <xQueueReceive>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d009      	beq.n	800c2e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2d6:	f06f 0301 	mvn.w	r3, #1
 800c2da:	61fb      	str	r3, [r7, #28]
 800c2dc:	e002      	b.n	800c2e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2de:	f06f 0302 	mvn.w	r3, #2
 800c2e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2e4:	69fb      	ldr	r3, [r7, #28]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	e000ed04 	.word	0xe000ed04

0800c2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a07      	ldr	r2, [pc, #28]	@ (800c320 <vApplicationGetIdleTaskMemory+0x2c>)
 800c304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	4a06      	ldr	r2, [pc, #24]	@ (800c324 <vApplicationGetIdleTaskMemory+0x30>)
 800c30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2280      	movs	r2, #128	@ 0x80
 800c310:	601a      	str	r2, [r3, #0]
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	200007f8 	.word	0x200007f8
 800c324:	200008a0 	.word	0x200008a0

0800c328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a07      	ldr	r2, [pc, #28]	@ (800c354 <vApplicationGetTimerTaskMemory+0x2c>)
 800c338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4a06      	ldr	r2, [pc, #24]	@ (800c358 <vApplicationGetTimerTaskMemory+0x30>)
 800c33e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c346:	601a      	str	r2, [r3, #0]
}
 800c348:	bf00      	nop
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	20000aa0 	.word	0x20000aa0
 800c358:	20000b48 	.word	0x20000b48

0800c35c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c362:	2020      	movs	r0, #32
 800c364:	f003 fdfa 	bl	800ff5c <pvPortMalloc>
 800c368:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00a      	beq.n	800c386 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3304      	adds	r3, #4
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 f9aa 	bl	800c6d4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c386:	687b      	ldr	r3, [r7, #4]
	}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b090      	sub	sp, #64	@ 0x40
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ce:	d30b      	bcc.n	800c3e8 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	61fb      	str	r3, [r7, #28]
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	e7fd      	b.n	800c3e4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10b      	bne.n	800c406 <xEventGroupWaitBits+0x76>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	61bb      	str	r3, [r7, #24]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c406:	f002 fc19 	bl	800ec3c <xTaskGetSchedulerState>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <xEventGroupWaitBits+0x86>
 800c410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xEventGroupWaitBits+0x8a>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xEventGroupWaitBits+0x8c>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10b      	bne.n	800c438 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	617b      	str	r3, [r7, #20]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c438:	f001 fdf8 	bl	800e02c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c448:	f000 f90d 	bl	800c666 <prvTestWaitCondition>
 800c44c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00e      	beq.n	800c472 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d028      	beq.n	800c4b4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	43db      	mvns	r3, r3
 800c46a:	401a      	ands	r2, r3
 800c46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	e020      	b.n	800c4b4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c474:	2b00      	cmp	r3, #0
 800c476:	d104      	bne.n	800c482 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c480:	e018      	b.n	800c4b4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c48e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c49c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a0:	1d18      	adds	r0, r3, #4
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f002 f894 	bl	800e5d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c4b4:	f001 fdc8 	bl	800e048 <xTaskResumeAll>
 800c4b8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d031      	beq.n	800c524 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d107      	bne.n	800c4d6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c530 <xEventGroupWaitBits+0x1a0>)
 800c4c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c4d6:	f002 fd2b 	bl	800ef30 <uxTaskResetEventItemValue>
 800c4da:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11a      	bne.n	800c51c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c4e6:	f003 fc17 	bl	800fd18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4f6:	f000 f8b6 	bl	800c666 <prvTestWaitCondition>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d009      	beq.n	800c514 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d006      	beq.n	800c514 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	43db      	mvns	r3, r3
 800c50e:	401a      	ands	r2, r3
 800c510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c512:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c514:	2301      	movs	r3, #1
 800c516:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c518:	f003 fc30 	bl	800fd7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c522:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c526:	4618      	mov	r0, r3
 800c528:	3740      	adds	r7, #64	@ 0x40
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08e      	sub	sp, #56	@ 0x38
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c53e:	2300      	movs	r3, #0
 800c540:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c546:	2300      	movs	r3, #0
 800c548:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10b      	bne.n	800c568 <xEventGroupSetBits+0x34>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	613b      	str	r3, [r7, #16]
}
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c56e:	d30b      	bcc.n	800c588 <xEventGroupSetBits+0x54>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	60fb      	str	r3, [r7, #12]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	3304      	adds	r3, #4
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	3308      	adds	r3, #8
 800c592:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c594:	f001 fd4a 	bl	800e02c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c5aa:	e03c      	b.n	800c626 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c5c2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c5ca:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d108      	bne.n	800c5e8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00b      	beq.n	800c5fa <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5e6:	e008      	b.n	800c5fa <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	69ba      	ldr	r2, [r7, #24]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d101      	bne.n	800c5fa <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d010      	beq.n	800c622 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	4313      	orrs	r3, r2
 800c610:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c61a:	4619      	mov	r1, r3
 800c61c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c61e:	f002 f8a9 	bl	800e774 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d1be      	bne.n	800c5ac <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	43db      	mvns	r3, r3
 800c636:	401a      	ands	r2, r3
 800c638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c63c:	f001 fd04 	bl	800e048 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c642:	681b      	ldr	r3, [r3, #0]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3738      	adds	r7, #56	@ 0x38
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff6b 	bl	800c534 <xEventGroupSetBits>
}
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c666:	b480      	push	{r7}
 800c668:	b087      	sub	sp, #28
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c672:	2300      	movs	r3, #0
 800c674:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d107      	bne.n	800c68c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	4013      	ands	r3, r2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00a      	beq.n	800c69c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c686:	2301      	movs	r3, #1
 800c688:	617b      	str	r3, [r7, #20]
 800c68a:	e007      	b.n	800c69c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	4013      	ands	r3, r2
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	429a      	cmp	r2, r3
 800c696:	d101      	bne.n	800c69c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c698:	2301      	movs	r3, #1
 800c69a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c69c:	697b      	ldr	r3, [r7, #20]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	371c      	adds	r7, #28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
	...

0800c6ac <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	68f9      	ldr	r1, [r7, #12]
 800c6be:	4804      	ldr	r0, [pc, #16]	@ (800c6d0 <xEventGroupSetBitsFromISR+0x24>)
 800c6c0:	f003 f9dc 	bl	800fa7c <xTimerPendFunctionCallFromISR>
 800c6c4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c6c6:	697b      	ldr	r3, [r7, #20]
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	0800c64d 	.word	0x0800c64d

0800c6d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f103 0208 	add.w	r2, r3, #8
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f103 0208 	add.w	r2, r3, #8
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f103 0208 	add.w	r2, r3, #8
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c722:	bf00      	nop
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	683a      	ldr	r2, [r7, #0]
 800c752:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	1c5a      	adds	r2, r3, #1
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	601a      	str	r2, [r3, #0]
}
 800c76a:	bf00      	nop
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78c:	d103      	bne.n	800c796 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	e00c      	b.n	800c7b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3308      	adds	r3, #8
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	e002      	b.n	800c7a4 <vListInsert+0x2e>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d2f6      	bcs.n	800c79e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	601a      	str	r2, [r3, #0]
}
 800c7dc:	bf00      	nop
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	6892      	ldr	r2, [r2, #8]
 800c7fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	6852      	ldr	r2, [r2, #4]
 800c808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d103      	bne.n	800c81c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	1e5a      	subs	r2, r3, #1
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <xQueueGenericReset+0x2c>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	60bb      	str	r3, [r7, #8]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c868:	f003 fa56 	bl	800fd18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c874:	68f9      	ldr	r1, [r7, #12]
 800c876:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c878:	fb01 f303 	mul.w	r3, r1, r3
 800c87c:	441a      	add	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c898:	3b01      	subs	r3, #1
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c89e:	fb01 f303 	mul.w	r3, r1, r3
 800c8a2:	441a      	add	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	22ff      	movs	r2, #255	@ 0xff
 800c8ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	22ff      	movs	r2, #255	@ 0xff
 800c8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d114      	bne.n	800c8e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d01a      	beq.n	800c8fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3310      	adds	r3, #16
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f001 feee 	bl	800e6ac <xTaskRemoveFromEventList>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d012      	beq.n	800c8fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c90c <xQueueGenericReset+0xd0>)
 800c8d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	e009      	b.n	800c8fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3310      	adds	r3, #16
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fef1 	bl	800c6d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3324      	adds	r3, #36	@ 0x24
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff feec 	bl	800c6d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8fc:	f003 fa3e 	bl	800fd7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c900:	2301      	movs	r3, #1
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	e000ed04 	.word	0xe000ed04

0800c910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08e      	sub	sp, #56	@ 0x38
 800c914:	af02      	add	r7, sp, #8
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	e7fd      	b.n	800c938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10b      	bne.n	800c95a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop
 800c958:	e7fd      	b.n	800c956 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <xQueueGenericCreateStatic+0x56>
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <xQueueGenericCreateStatic+0x5a>
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <xQueueGenericCreateStatic+0x5c>
 800c96a:	2300      	movs	r3, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10b      	bne.n	800c988 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	623b      	str	r3, [r7, #32]
}
 800c982:	bf00      	nop
 800c984:	bf00      	nop
 800c986:	e7fd      	b.n	800c984 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <xQueueGenericCreateStatic+0x84>
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <xQueueGenericCreateStatic+0x88>
 800c994:	2301      	movs	r3, #1
 800c996:	e000      	b.n	800c99a <xQueueGenericCreateStatic+0x8a>
 800c998:	2300      	movs	r3, #0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10b      	bne.n	800c9b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	61fb      	str	r3, [r7, #28]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9b6:	2350      	movs	r3, #80	@ 0x50
 800c9b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b50      	cmp	r3, #80	@ 0x50
 800c9be:	d00b      	beq.n	800c9d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	61bb      	str	r3, [r7, #24]
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00d      	beq.n	800ca00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 f840 	bl	800ca80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3730      	adds	r7, #48	@ 0x30
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b08a      	sub	sp, #40	@ 0x28
 800ca0e:	af02      	add	r7, sp, #8
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	4613      	mov	r3, r2
 800ca16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10b      	bne.n	800ca36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	613b      	str	r3, [r7, #16]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	fb02 f303 	mul.w	r3, r2, r3
 800ca3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	3350      	adds	r3, #80	@ 0x50
 800ca44:	4618      	mov	r0, r3
 800ca46:	f003 fa89 	bl	800ff5c <pvPortMalloc>
 800ca4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d011      	beq.n	800ca76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	3350      	adds	r3, #80	@ 0x50
 800ca5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca64:	79fa      	ldrb	r2, [r7, #7]
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 f805 	bl	800ca80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca76:	69bb      	ldr	r3, [r7, #24]
	}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d103      	bne.n	800ca9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	e002      	b.n	800caa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800caae:	2101      	movs	r1, #1
 800cab0:	69b8      	ldr	r0, [r7, #24]
 800cab2:	f7ff fec3 	bl	800c83c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	78fa      	ldrb	r2, [r7, #3]
 800caba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cabe:	bf00      	nop
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00e      	beq.n	800caf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cae6:	2300      	movs	r3, #0
 800cae8:	2200      	movs	r2, #0
 800caea:	2100      	movs	r1, #0
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f81d 	bl	800cb2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b086      	sub	sp, #24
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	4603      	mov	r3, r0
 800cb02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb04:	2301      	movs	r3, #1
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	2300      	movs	r3, #0
 800cb0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	6939      	ldr	r1, [r7, #16]
 800cb12:	6978      	ldr	r0, [r7, #20]
 800cb14:	f7ff ff79 	bl	800ca0a <xQueueGenericCreate>
 800cb18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f7ff ffd3 	bl	800cac6 <prvInitialiseMutex>

		return xNewQueue;
 800cb20:	68fb      	ldr	r3, [r7, #12]
	}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08e      	sub	sp, #56	@ 0x38
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <xQueueGenericSend+0x34>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb5a:	bf00      	nop
 800cb5c:	bf00      	nop
 800cb5e:	e7fd      	b.n	800cb5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <xQueueGenericSend+0x42>
 800cb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <xQueueGenericSend+0x46>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e000      	b.n	800cb74 <xQueueGenericSend+0x48>
 800cb72:	2300      	movs	r3, #0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10b      	bne.n	800cb90 <xQueueGenericSend+0x64>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	e7fd      	b.n	800cb8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d103      	bne.n	800cb9e <xQueueGenericSend+0x72>
 800cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d101      	bne.n	800cba2 <xQueueGenericSend+0x76>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <xQueueGenericSend+0x78>
 800cba2:	2300      	movs	r3, #0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10b      	bne.n	800cbc0 <xQueueGenericSend+0x94>
	__asm volatile
 800cba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	623b      	str	r3, [r7, #32]
}
 800cbba:	bf00      	nop
 800cbbc:	bf00      	nop
 800cbbe:	e7fd      	b.n	800cbbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbc0:	f002 f83c 	bl	800ec3c <xTaskGetSchedulerState>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <xQueueGenericSend+0xa4>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <xQueueGenericSend+0xa8>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <xQueueGenericSend+0xaa>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10b      	bne.n	800cbf2 <xQueueGenericSend+0xc6>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	61fb      	str	r3, [r7, #28]
}
 800cbec:	bf00      	nop
 800cbee:	bf00      	nop
 800cbf0:	e7fd      	b.n	800cbee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbf2:	f003 f891 	bl	800fd18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d302      	bcc.n	800cc08 <xQueueGenericSend+0xdc>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d129      	bne.n	800cc5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc0e:	f000 fbb9 	bl	800d384 <prvCopyDataToQueue>
 800cc12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	3324      	adds	r3, #36	@ 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 fd43 	bl	800e6ac <xTaskRemoveFromEventList>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d013      	beq.n	800cc54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd2c <xQueueGenericSend+0x200>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	e00a      	b.n	800cc54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc44:	4b39      	ldr	r3, [pc, #228]	@ (800cd2c <xQueueGenericSend+0x200>)
 800cc46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc54:	f003 f892 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e063      	b.n	800cd24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc62:	f003 f88b 	bl	800fd7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e05c      	b.n	800cd24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc70:	f107 0314 	add.w	r3, r7, #20
 800cc74:	4618      	mov	r0, r3
 800cc76:	f001 fde1 	bl	800e83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc7e:	f003 f87d 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc82:	f001 f9d3 	bl	800e02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc86:	f003 f847 	bl	800fd18 <vPortEnterCritical>
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc96:	d103      	bne.n	800cca0 <xQueueGenericSend+0x174>
 800cc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cca6:	b25b      	sxtb	r3, r3
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSend+0x18a>
 800ccae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccb6:	f003 f861 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccba:	1d3a      	adds	r2, r7, #4
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 fdd0 	bl	800e868 <xTaskCheckForTimeOut>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d124      	bne.n	800cd18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccd0:	f000 fc50 	bl	800d574 <prvIsQueueFull>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d018      	beq.n	800cd0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	3310      	adds	r3, #16
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f001 fc52 	bl	800e58c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccea:	f000 fbdb 	bl	800d4a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccee:	f001 f9ab 	bl	800e048 <xTaskResumeAll>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f af7c 	bne.w	800cbf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	@ (800cd2c <xQueueGenericSend+0x200>)
 800ccfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	e772      	b.n	800cbf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd0e:	f000 fbc9 	bl	800d4a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd12:	f001 f999 	bl	800e048 <xTaskResumeAll>
 800cd16:	e76c      	b.n	800cbf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd1a:	f000 fbc3 	bl	800d4a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd1e:	f001 f993 	bl	800e048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3738      	adds	r7, #56	@ 0x38
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	e000ed04 	.word	0xe000ed04

0800cd30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b090      	sub	sp, #64	@ 0x40
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10b      	bne.n	800cd60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd5a:	bf00      	nop
 800cd5c:	bf00      	nop
 800cd5e:	e7fd      	b.n	800cd5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d103      	bne.n	800cd6e <xQueueGenericSendFromISR+0x3e>
 800cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <xQueueGenericSendFromISR+0x42>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e000      	b.n	800cd74 <xQueueGenericSendFromISR+0x44>
 800cd72:	2300      	movs	r3, #0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10b      	bne.n	800cd90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d103      	bne.n	800cd9e <xQueueGenericSendFromISR+0x6e>
 800cd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d101      	bne.n	800cda2 <xQueueGenericSendFromISR+0x72>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <xQueueGenericSendFromISR+0x74>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10b      	bne.n	800cdc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdac:	f383 8811 	msr	BASEPRI, r3
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	623b      	str	r3, [r7, #32]
}
 800cdba:	bf00      	nop
 800cdbc:	bf00      	nop
 800cdbe:	e7fd      	b.n	800cdbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdc0:	f003 f88a 	bl	800fed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdc4:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	61fa      	str	r2, [r7, #28]
 800cdda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cddc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d302      	bcc.n	800cdf2 <xQueueGenericSendFromISR+0xc2>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d12f      	bne.n	800ce52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce08:	f000 fabc 	bl	800d384 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ce10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce14:	d112      	bne.n	800ce3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d016      	beq.n	800ce4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce20:	3324      	adds	r3, #36	@ 0x24
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 fc42 	bl	800e6ac <xTaskRemoveFromEventList>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00e      	beq.n	800ce4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00b      	beq.n	800ce4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	e007      	b.n	800ce4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ce40:	3301      	adds	r3, #1
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	b25a      	sxtb	r2, r3
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce50:	e001      	b.n	800ce56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce52:	2300      	movs	r3, #0
 800ce54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3740      	adds	r7, #64	@ 0x40
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08c      	sub	sp, #48	@ 0x30
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10b      	bne.n	800ce9e <xQueueReceive+0x32>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	623b      	str	r3, [r7, #32]
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	e7fd      	b.n	800ce9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <xQueueReceive+0x40>
 800cea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d101      	bne.n	800ceb0 <xQueueReceive+0x44>
 800ceac:	2301      	movs	r3, #1
 800ceae:	e000      	b.n	800ceb2 <xQueueReceive+0x46>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10b      	bne.n	800cece <xQueueReceive+0x62>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	61fb      	str	r3, [r7, #28]
}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	e7fd      	b.n	800ceca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cece:	f001 feb5 	bl	800ec3c <xTaskGetSchedulerState>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <xQueueReceive+0x72>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <xQueueReceive+0x76>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <xQueueReceive+0x78>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <xQueueReceive+0x94>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	61bb      	str	r3, [r7, #24]
}
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	e7fd      	b.n	800cefc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf00:	f002 ff0a 	bl	800fd18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01f      	beq.n	800cf50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf10:	68b9      	ldr	r1, [r7, #8]
 800cf12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf14:	f000 faa0 	bl	800d458 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	1e5a      	subs	r2, r3, #1
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00f      	beq.n	800cf48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2a:	3310      	adds	r3, #16
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f001 fbbd 	bl	800e6ac <xTaskRemoveFromEventList>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf38:	4b3c      	ldr	r3, [pc, #240]	@ (800d02c <xQueueReceive+0x1c0>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf48:	f002 ff18 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e069      	b.n	800d024 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d103      	bne.n	800cf5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf56:	f002 ff11 	bl	800fd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e062      	b.n	800d024 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf64:	f107 0310 	add.w	r3, r7, #16
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f001 fc67 	bl	800e83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf72:	f002 ff03 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf76:	f001 f859 	bl	800e02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf7a:	f002 fecd 	bl	800fd18 <vPortEnterCritical>
 800cf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8a:	d103      	bne.n	800cf94 <xQueueReceive+0x128>
 800cf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa0:	d103      	bne.n	800cfaa <xQueueReceive+0x13e>
 800cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfaa:	f002 fee7 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfae:	1d3a      	adds	r2, r7, #4
 800cfb0:	f107 0310 	add.w	r3, r7, #16
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fc56 	bl	800e868 <xTaskCheckForTimeOut>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d123      	bne.n	800d00a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc4:	f000 fac0 	bl	800d548 <prvIsQueueEmpty>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d017      	beq.n	800cffe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd0:	3324      	adds	r3, #36	@ 0x24
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f001 fad8 	bl	800e58c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfde:	f000 fa61 	bl	800d4a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfe2:	f001 f831 	bl	800e048 <xTaskResumeAll>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d189      	bne.n	800cf00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfec:	4b0f      	ldr	r3, [pc, #60]	@ (800d02c <xQueueReceive+0x1c0>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	e780      	b.n	800cf00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d000:	f000 fa50 	bl	800d4a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d004:	f001 f820 	bl	800e048 <xTaskResumeAll>
 800d008:	e77a      	b.n	800cf00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d00a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d00c:	f000 fa4a 	bl	800d4a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d010:	f001 f81a 	bl	800e048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d016:	f000 fa97 	bl	800d548 <prvIsQueueEmpty>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f43f af6f 	beq.w	800cf00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d022:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d024:	4618      	mov	r0, r3
 800d026:	3730      	adds	r7, #48	@ 0x30
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	e000ed04 	.word	0xe000ed04

0800d030 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b08e      	sub	sp, #56	@ 0x38
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d03a:	2300      	movs	r3, #0
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d042:	2300      	movs	r3, #0
 800d044:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10b      	bne.n	800d064 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	623b      	str	r3, [r7, #32]
}
 800d05e:	bf00      	nop
 800d060:	bf00      	nop
 800d062:	e7fd      	b.n	800d060 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00b      	beq.n	800d084 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	61fb      	str	r3, [r7, #28]
}
 800d07e:	bf00      	nop
 800d080:	bf00      	nop
 800d082:	e7fd      	b.n	800d080 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d084:	f001 fdda 	bl	800ec3c <xTaskGetSchedulerState>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <xQueueSemaphoreTake+0x64>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <xQueueSemaphoreTake+0x68>
 800d094:	2301      	movs	r3, #1
 800d096:	e000      	b.n	800d09a <xQueueSemaphoreTake+0x6a>
 800d098:	2300      	movs	r3, #0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d10b      	bne.n	800d0b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	61bb      	str	r3, [r7, #24]
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	e7fd      	b.n	800d0b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0b6:	f002 fe2f 	bl	800fd18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d024      	beq.n	800d110 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c8:	1e5a      	subs	r2, r3, #1
 800d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d104      	bne.n	800d0e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0d6:	f001 ff43 	bl	800ef60 <pvTaskIncrementMutexHeldCount>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00f      	beq.n	800d108 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ea:	3310      	adds	r3, #16
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f001 fadd 	bl	800e6ac <xTaskRemoveFromEventList>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d007      	beq.n	800d108 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0f8:	4b54      	ldr	r3, [pc, #336]	@ (800d24c <xQueueSemaphoreTake+0x21c>)
 800d0fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d108:	f002 fe38 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e098      	b.n	800d242 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d112      	bne.n	800d13c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00b      	beq.n	800d134 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	617b      	str	r3, [r7, #20]
}
 800d12e:	bf00      	nop
 800d130:	bf00      	nop
 800d132:	e7fd      	b.n	800d130 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d134:	f002 fe22 	bl	800fd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d138:	2300      	movs	r3, #0
 800d13a:	e082      	b.n	800d242 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d142:	f107 030c 	add.w	r3, r7, #12
 800d146:	4618      	mov	r0, r3
 800d148:	f001 fb78 	bl	800e83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d14c:	2301      	movs	r3, #1
 800d14e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d150:	f002 fe14 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d154:	f000 ff6a 	bl	800e02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d158:	f002 fdde 	bl	800fd18 <vPortEnterCritical>
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d162:	b25b      	sxtb	r3, r3
 800d164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d168:	d103      	bne.n	800d172 <xQueueSemaphoreTake+0x142>
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d178:	b25b      	sxtb	r3, r3
 800d17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17e:	d103      	bne.n	800d188 <xQueueSemaphoreTake+0x158>
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	2200      	movs	r2, #0
 800d184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d188:	f002 fdf8 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d18c:	463a      	mov	r2, r7
 800d18e:	f107 030c 	add.w	r3, r7, #12
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f001 fb67 	bl	800e868 <xTaskCheckForTimeOut>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d132      	bne.n	800d206 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1a2:	f000 f9d1 	bl	800d548 <prvIsQueueEmpty>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d026      	beq.n	800d1fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d109      	bne.n	800d1c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d1b4:	f002 fdb0 	bl	800fd18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f001 fd5b 	bl	800ec78 <xTaskPriorityInherit>
 800d1c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1c4:	f002 fdda 	bl	800fd7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ca:	3324      	adds	r3, #36	@ 0x24
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 f9db 	bl	800e58c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d8:	f000 f964 	bl	800d4a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1dc:	f000 ff34 	bl	800e048 <xTaskResumeAll>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f47f af67 	bne.w	800d0b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d1e8:	4b18      	ldr	r3, [pc, #96]	@ (800d24c <xQueueSemaphoreTake+0x21c>)
 800d1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	e75d      	b.n	800d0b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1fc:	f000 f952 	bl	800d4a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d200:	f000 ff22 	bl	800e048 <xTaskResumeAll>
 800d204:	e757      	b.n	800d0b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d208:	f000 f94c 	bl	800d4a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d20c:	f000 ff1c 	bl	800e048 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d212:	f000 f999 	bl	800d548 <prvIsQueueEmpty>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f43f af4c 	beq.w	800d0b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00d      	beq.n	800d240 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d224:	f002 fd78 	bl	800fd18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d22a:	f000 f893 	bl	800d354 <prvGetDisinheritPriorityAfterTimeout>
 800d22e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d236:	4618      	mov	r0, r3
 800d238:	f001 fdf6 	bl	800ee28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d23c:	f002 fd9e 	bl	800fd7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d242:	4618      	mov	r0, r3
 800d244:	3738      	adds	r7, #56	@ 0x38
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	e000ed04 	.word	0xe000ed04

0800d250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08e      	sub	sp, #56	@ 0x38
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10b      	bne.n	800d27e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	623b      	str	r3, [r7, #32]
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e7fd      	b.n	800d27a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d103      	bne.n	800d28c <xQueueReceiveFromISR+0x3c>
 800d284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d101      	bne.n	800d290 <xQueueReceiveFromISR+0x40>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <xQueueReceiveFromISR+0x42>
 800d290:	2300      	movs	r3, #0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	61fb      	str	r3, [r7, #28]
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	e7fd      	b.n	800d2aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ae:	f002 fe13 	bl	800fed8 <vPortValidateInterruptPriority>
	__asm volatile
 800d2b2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	61ba      	str	r2, [r7, #24]
 800d2c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d02f      	beq.n	800d33a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2e4:	68b9      	ldr	r1, [r7, #8]
 800d2e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2e8:	f000 f8b6 	bl	800d458 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	1e5a      	subs	r2, r3, #1
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fc:	d112      	bne.n	800d324 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d016      	beq.n	800d334 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d308:	3310      	adds	r3, #16
 800d30a:	4618      	mov	r0, r3
 800d30c:	f001 f9ce 	bl	800e6ac <xTaskRemoveFromEventList>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00e      	beq.n	800d334 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	e007      	b.n	800d334 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d328:	3301      	adds	r3, #1
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	b25a      	sxtb	r2, r3
 800d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d334:	2301      	movs	r3, #1
 800d336:	637b      	str	r3, [r7, #52]	@ 0x34
 800d338:	e001      	b.n	800d33e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d340:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f383 8811 	msr	BASEPRI, r3
}
 800d348:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3738      	adds	r7, #56	@ 0x38
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	d006      	beq.n	800d372 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	e001      	b.n	800d376 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d372:	2300      	movs	r3, #0
 800d374:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d376:	68fb      	ldr	r3, [r7, #12]
	}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d390:	2300      	movs	r3, #0
 800d392:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d398:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10d      	bne.n	800d3be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d14d      	bne.n	800d446 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 fcca 	bl	800ed48 <xTaskPriorityDisinherit>
 800d3b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	609a      	str	r2, [r3, #8]
 800d3bc:	e043      	b.n	800d446 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d119      	bne.n	800d3f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6858      	ldr	r0, [r3, #4]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	68b9      	ldr	r1, [r7, #8]
 800d3d0:	f005 f8ef 	bl	80125b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3dc:	441a      	add	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d32b      	bcc.n	800d446 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	605a      	str	r2, [r3, #4]
 800d3f6:	e026      	b.n	800d446 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	68d8      	ldr	r0, [r3, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d400:	461a      	mov	r2, r3
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	f005 f8d5 	bl	80125b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68da      	ldr	r2, [r3, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d410:	425b      	negs	r3, r3
 800d412:	441a      	add	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	429a      	cmp	r2, r3
 800d422:	d207      	bcs.n	800d434 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	689a      	ldr	r2, [r3, #8]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d42c:	425b      	negs	r3, r3
 800d42e:	441a      	add	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b02      	cmp	r3, #2
 800d438:	d105      	bne.n	800d446 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	3b01      	subs	r3, #1
 800d444:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d44e:	697b      	ldr	r3, [r7, #20]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d018      	beq.n	800d49c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d472:	441a      	add	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	429a      	cmp	r2, r3
 800d482:	d303      	bcc.n	800d48c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	68d9      	ldr	r1, [r3, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d494:	461a      	mov	r2, r3
 800d496:	6838      	ldr	r0, [r7, #0]
 800d498:	f005 f88b 	bl	80125b2 <memcpy>
	}
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4ac:	f002 fc34 	bl	800fd18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4b8:	e011      	b.n	800d4de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d012      	beq.n	800d4e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	3324      	adds	r3, #36	@ 0x24
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f001 f8f0 	bl	800e6ac <xTaskRemoveFromEventList>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4d2:	f001 fa2d 	bl	800e930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4d6:	7bfb      	ldrb	r3, [r7, #15]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dce9      	bgt.n	800d4ba <prvUnlockQueue+0x16>
 800d4e6:	e000      	b.n	800d4ea <prvUnlockQueue+0x46>
					break;
 800d4e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	22ff      	movs	r2, #255	@ 0xff
 800d4ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4f2:	f002 fc43 	bl	800fd7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4f6:	f002 fc0f 	bl	800fd18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d500:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d502:	e011      	b.n	800d528 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d012      	beq.n	800d532 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3310      	adds	r3, #16
 800d510:	4618      	mov	r0, r3
 800d512:	f001 f8cb 	bl	800e6ac <xTaskRemoveFromEventList>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d51c:	f001 fa08 	bl	800e930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d520:	7bbb      	ldrb	r3, [r7, #14]
 800d522:	3b01      	subs	r3, #1
 800d524:	b2db      	uxtb	r3, r3
 800d526:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dce9      	bgt.n	800d504 <prvUnlockQueue+0x60>
 800d530:	e000      	b.n	800d534 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d532:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	22ff      	movs	r2, #255	@ 0xff
 800d538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d53c:	f002 fc1e 	bl	800fd7c <vPortExitCritical>
}
 800d540:	bf00      	nop
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d550:	f002 fbe2 	bl	800fd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d102      	bne.n	800d562 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d55c:	2301      	movs	r3, #1
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e001      	b.n	800d566 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d566:	f002 fc09 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800d56a:	68fb      	ldr	r3, [r7, #12]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d57c:	f002 fbcc 	bl	800fd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d588:	429a      	cmp	r2, r3
 800d58a:	d102      	bne.n	800d592 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d58c:	2301      	movs	r3, #1
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	e001      	b.n	800d596 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d592:	2300      	movs	r3, #0
 800d594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d596:	f002 fbf1 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800d59a:	68fb      	ldr	r3, [r7, #12]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	e014      	b.n	800d5de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d5f4 <vQueueAddToRegistry+0x50>)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5c0:	490c      	ldr	r1, [pc, #48]	@ (800d5f4 <vQueueAddToRegistry+0x50>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f4 <vQueueAddToRegistry+0x50>)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	4413      	add	r3, r2
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5d6:	e006      	b.n	800d5e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b07      	cmp	r3, #7
 800d5e2:	d9e7      	bls.n	800d5b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000f48 	.word	0x20000f48

0800d5f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d608:	f002 fb86 	bl	800fd18 <vPortEnterCritical>
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d612:	b25b      	sxtb	r3, r3
 800d614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d618:	d103      	bne.n	800d622 <vQueueWaitForMessageRestricted+0x2a>
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d103      	bne.n	800d638 <vQueueWaitForMessageRestricted+0x40>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d638:	f002 fba0 	bl	800fd7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d640:	2b00      	cmp	r3, #0
 800d642:	d106      	bne.n	800d652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	3324      	adds	r3, #36	@ 0x24
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	68b9      	ldr	r1, [r7, #8]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 f801 	bl	800e654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d652:	6978      	ldr	r0, [r7, #20]
 800d654:	f7ff ff26 	bl	800d4a4 <prvUnlockQueue>
	}
 800d658:	bf00      	nop
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08e      	sub	sp, #56	@ 0x38
 800d664:	af04      	add	r7, sp, #16
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	623b      	str	r3, [r7, #32]
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	e7fd      	b.n	800d688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10b      	bne.n	800d6aa <xTaskCreateStatic+0x4a>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	61fb      	str	r3, [r7, #28]
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	e7fd      	b.n	800d6a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6aa:	23a8      	movs	r3, #168	@ 0xa8
 800d6ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2ba8      	cmp	r3, #168	@ 0xa8
 800d6b2:	d00b      	beq.n	800d6cc <xTaskCreateStatic+0x6c>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	61bb      	str	r3, [r7, #24]
}
 800d6c6:	bf00      	nop
 800d6c8:	bf00      	nop
 800d6ca:	e7fd      	b.n	800d6c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d01e      	beq.n	800d712 <xTaskCreateStatic+0xb2>
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d01b      	beq.n	800d712 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9303      	str	r3, [sp, #12]
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f2:	9302      	str	r3, [sp, #8]
 800d6f4:	f107 0314 	add.w	r3, r7, #20
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 f851 	bl	800d7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d70a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d70c:	f000 f8f6 	bl	800d8fc <prvAddNewTaskToReadyList>
 800d710:	e001      	b.n	800d716 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d716:	697b      	ldr	r3, [r7, #20]
	}
 800d718:	4618      	mov	r0, r3
 800d71a:	3728      	adds	r7, #40	@ 0x28
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08c      	sub	sp, #48	@ 0x30
 800d724:	af04      	add	r7, sp, #16
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	603b      	str	r3, [r7, #0]
 800d72c:	4613      	mov	r3, r2
 800d72e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d730:	88fb      	ldrh	r3, [r7, #6]
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4618      	mov	r0, r3
 800d736:	f002 fc11 	bl	800ff5c <pvPortMalloc>
 800d73a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00e      	beq.n	800d760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d742:	20a8      	movs	r0, #168	@ 0xa8
 800d744:	f002 fc0a 	bl	800ff5c <pvPortMalloc>
 800d748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	631a      	str	r2, [r3, #48]	@ 0x30
 800d756:	e005      	b.n	800d764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d758:	6978      	ldr	r0, [r7, #20]
 800d75a:	f002 fccd 	bl	80100f8 <vPortFree>
 800d75e:	e001      	b.n	800d764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d017      	beq.n	800d79a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d772:	88fa      	ldrh	r2, [r7, #6]
 800d774:	2300      	movs	r3, #0
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	9302      	str	r3, [sp, #8]
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 f80f 	bl	800d7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d78e:	69f8      	ldr	r0, [r7, #28]
 800d790:	f000 f8b4 	bl	800d8fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d794:	2301      	movs	r3, #1
 800d796:	61bb      	str	r3, [r7, #24]
 800d798:	e002      	b.n	800d7a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d79a:	f04f 33ff 	mov.w	r3, #4294967295
 800d79e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7a0:	69bb      	ldr	r3, [r7, #24]
	}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
	...

0800d7ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	21a5      	movs	r1, #165	@ 0xa5
 800d7c6:	f004 fd8c 	bl	80122e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	f023 0307 	bic.w	r3, r3, #7
 800d7e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00b      	beq.n	800d806 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	617b      	str	r3, [r7, #20]
}
 800d800:	bf00      	nop
 800d802:	bf00      	nop
 800d804:	e7fd      	b.n	800d802 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01f      	beq.n	800d84c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d80c:	2300      	movs	r3, #0
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	e012      	b.n	800d838 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	4413      	add	r3, r2
 800d818:	7819      	ldrb	r1, [r3, #0]
 800d81a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	4413      	add	r3, r2
 800d820:	3334      	adds	r3, #52	@ 0x34
 800d822:	460a      	mov	r2, r1
 800d824:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	4413      	add	r3, r2
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d006      	beq.n	800d840 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	3301      	adds	r3, #1
 800d836:	61fb      	str	r3, [r7, #28]
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	2b0f      	cmp	r3, #15
 800d83c:	d9e9      	bls.n	800d812 <prvInitialiseNewTask+0x66>
 800d83e:	e000      	b.n	800d842 <prvInitialiseNewTask+0x96>
			{
				break;
 800d840:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d84a:	e003      	b.n	800d854 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d856:	2b37      	cmp	r3, #55	@ 0x37
 800d858:	d901      	bls.n	800d85e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d85a:	2337      	movs	r3, #55	@ 0x37
 800d85c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d862:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d868:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	2200      	movs	r2, #0
 800d86e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	3304      	adds	r3, #4
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe ff4d 	bl	800c714 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87c:	3318      	adds	r3, #24
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe ff48 	bl	800c714 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d898:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	3354      	adds	r3, #84	@ 0x54
 800d8ae:	224c      	movs	r2, #76	@ 0x4c
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f004 fd15 	bl	80122e2 <memset>
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d8f0 <prvInitialiseNewTask+0x144>)
 800d8bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f4 <prvInitialiseNewTask+0x148>)
 800d8c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f8 <prvInitialiseNewTask+0x14c>)
 800d8c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	68f9      	ldr	r1, [r7, #12]
 800d8ce:	69b8      	ldr	r0, [r7, #24]
 800d8d0:	f002 f8f4 	bl	800fabc <pxPortInitialiseStack>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8e6:	bf00      	nop
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	200058d0 	.word	0x200058d0
 800d8f4:	20005938 	.word	0x20005938
 800d8f8:	200059a0 	.word	0x200059a0

0800d8fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d904:	f002 fa08 	bl	800fd18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d908:	4b2d      	ldr	r3, [pc, #180]	@ (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	4a2c      	ldr	r2, [pc, #176]	@ (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d912:	4b2c      	ldr	r3, [pc, #176]	@ (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d91a:	4a2a      	ldr	r2, [pc, #168]	@ (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d920:	4b27      	ldr	r3, [pc, #156]	@ (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d110      	bne.n	800d94a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d928:	f001 f826 	bl	800e978 <prvInitialiseTaskLists>
 800d92c:	e00d      	b.n	800d94a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d92e:	4b26      	ldr	r3, [pc, #152]	@ (800d9c8 <prvAddNewTaskToReadyList+0xcc>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d109      	bne.n	800d94a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d936:	4b23      	ldr	r3, [pc, #140]	@ (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d940:	429a      	cmp	r2, r3
 800d942:	d802      	bhi.n	800d94a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d944:	4a1f      	ldr	r2, [pc, #124]	@ (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d94a:	4b20      	ldr	r3, [pc, #128]	@ (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	4a1e      	ldr	r2, [pc, #120]	@ (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d954:	4b1d      	ldr	r3, [pc, #116]	@ (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d960:	4b1b      	ldr	r3, [pc, #108]	@ (800d9d0 <prvAddNewTaskToReadyList+0xd4>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <prvAddNewTaskToReadyList+0x74>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96c:	4a18      	ldr	r2, [pc, #96]	@ (800d9d0 <prvAddNewTaskToReadyList+0xd4>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a15      	ldr	r2, [pc, #84]	@ (800d9d4 <prvAddNewTaskToReadyList+0xd8>)
 800d97e:	441a      	add	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe fed1 	bl	800c72e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d98c:	f002 f9f6 	bl	800fd7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d990:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <prvAddNewTaskToReadyList+0xcc>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00e      	beq.n	800d9b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d998:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d207      	bcs.n	800d9b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d8 <prvAddNewTaskToReadyList+0xdc>)
 800d9a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9b6:	bf00      	nop
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	2000145c 	.word	0x2000145c
 800d9c4:	20000f88 	.word	0x20000f88
 800d9c8:	20001468 	.word	0x20001468
 800d9cc:	20001478 	.word	0x20001478
 800d9d0:	20001464 	.word	0x20001464
 800d9d4:	20000f8c 	.word	0x20000f8c
 800d9d8:	e000ed04 	.word	0xe000ed04

0800d9dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d9e4:	f002 f998 	bl	800fd18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <vTaskDelete+0x18>
 800d9ee:	4b2d      	ldr	r3, [pc, #180]	@ (800daa4 <vTaskDelete+0xc8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	e000      	b.n	800d9f6 <vTaskDelete+0x1a>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fef3 	bl	800c7e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da06:	2b00      	cmp	r3, #0
 800da08:	d004      	beq.n	800da14 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3318      	adds	r3, #24
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe feea 	bl	800c7e8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800da14:	4b24      	ldr	r3, [pc, #144]	@ (800daa8 <vTaskDelete+0xcc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3301      	adds	r3, #1
 800da1a:	4a23      	ldr	r2, [pc, #140]	@ (800daa8 <vTaskDelete+0xcc>)
 800da1c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800da1e:	4b21      	ldr	r3, [pc, #132]	@ (800daa4 <vTaskDelete+0xc8>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	429a      	cmp	r2, r3
 800da26:	d10b      	bne.n	800da40 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	481f      	ldr	r0, [pc, #124]	@ (800daac <vTaskDelete+0xd0>)
 800da30:	f7fe fe7d 	bl	800c72e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800da34:	4b1e      	ldr	r3, [pc, #120]	@ (800dab0 <vTaskDelete+0xd4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	4a1d      	ldr	r2, [pc, #116]	@ (800dab0 <vTaskDelete+0xd4>)
 800da3c:	6013      	str	r3, [r2, #0]
 800da3e:	e009      	b.n	800da54 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800da40:	4b1c      	ldr	r3, [pc, #112]	@ (800dab4 <vTaskDelete+0xd8>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3b01      	subs	r3, #1
 800da46:	4a1b      	ldr	r2, [pc, #108]	@ (800dab4 <vTaskDelete+0xd8>)
 800da48:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f001 f8a0 	bl	800eb90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800da50:	f001 f8d4 	bl	800ebfc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800da54:	f002 f992 	bl	800fd7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800da58:	4b17      	ldr	r3, [pc, #92]	@ (800dab8 <vTaskDelete+0xdc>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d01c      	beq.n	800da9a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800da60:	4b10      	ldr	r3, [pc, #64]	@ (800daa4 <vTaskDelete+0xc8>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	429a      	cmp	r2, r3
 800da68:	d117      	bne.n	800da9a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800da6a:	4b14      	ldr	r3, [pc, #80]	@ (800dabc <vTaskDelete+0xe0>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00b      	beq.n	800da8a <vTaskDelete+0xae>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
 800da7e:	f3bf 8f4f 	dsb	sy
 800da82:	60bb      	str	r3, [r7, #8]
}
 800da84:	bf00      	nop
 800da86:	bf00      	nop
 800da88:	e7fd      	b.n	800da86 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800da8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dac0 <vTaskDelete+0xe4>)
 800da8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da9a:	bf00      	nop
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20000f88 	.word	0x20000f88
 800daa8:	20001478 	.word	0x20001478
 800daac:	20001430 	.word	0x20001430
 800dab0:	20001444 	.word	0x20001444
 800dab4:	2000145c 	.word	0x2000145c
 800dab8:	20001468 	.word	0x20001468
 800dabc:	20001484 	.word	0x20001484
 800dac0:	e000ed04 	.word	0xe000ed04

0800dac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dacc:	2300      	movs	r3, #0
 800dace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d018      	beq.n	800db08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dad6:	4b14      	ldr	r3, [pc, #80]	@ (800db28 <vTaskDelay+0x64>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00b      	beq.n	800daf6 <vTaskDelay+0x32>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	60bb      	str	r3, [r7, #8]
}
 800daf0:	bf00      	nop
 800daf2:	bf00      	nop
 800daf4:	e7fd      	b.n	800daf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800daf6:	f000 fa99 	bl	800e02c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dafa:	2100      	movs	r1, #0
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f001 fbb1 	bl	800f264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db02:	f000 faa1 	bl	800e048 <xTaskResumeAll>
 800db06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d107      	bne.n	800db1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800db0e:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <vTaskDelay+0x68>)
 800db10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db1e:	bf00      	nop
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20001484 	.word	0x20001484
 800db2c:	e000ed04 	.word	0xe000ed04

0800db30 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d10b      	bne.n	800db5a <eTaskGetState+0x2a>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	60bb      	str	r3, [r7, #8]
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop
 800db58:	e7fd      	b.n	800db56 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800db5a:	4b24      	ldr	r3, [pc, #144]	@ (800dbec <eTaskGetState+0xbc>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69ba      	ldr	r2, [r7, #24]
 800db60:	429a      	cmp	r2, r3
 800db62:	d102      	bne.n	800db6a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800db64:	2300      	movs	r3, #0
 800db66:	77fb      	strb	r3, [r7, #31]
 800db68:	e03a      	b.n	800dbe0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800db6a:	f002 f8d5 	bl	800fd18 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800db74:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf0 <eTaskGetState+0xc0>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800db7a:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf4 <eTaskGetState+0xc4>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800db80:	f002 f8fc 	bl	800fd7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d003      	beq.n	800db94 <eTaskGetState+0x64>
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	429a      	cmp	r2, r3
 800db92:	d102      	bne.n	800db9a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800db94:	2302      	movs	r3, #2
 800db96:	77fb      	strb	r3, [r7, #31]
 800db98:	e022      	b.n	800dbe0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	4a16      	ldr	r2, [pc, #88]	@ (800dbf8 <eTaskGetState+0xc8>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d112      	bne.n	800dbc8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10b      	bne.n	800dbc2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d102      	bne.n	800dbbc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	77fb      	strb	r3, [r7, #31]
 800dbba:	e011      	b.n	800dbe0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	77fb      	strb	r3, [r7, #31]
 800dbc0:	e00e      	b.n	800dbe0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	77fb      	strb	r3, [r7, #31]
 800dbc6:	e00b      	b.n	800dbe0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	4a0c      	ldr	r2, [pc, #48]	@ (800dbfc <eTaskGetState+0xcc>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d002      	beq.n	800dbd6 <eTaskGetState+0xa6>
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d102      	bne.n	800dbdc <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dbd6:	2304      	movs	r3, #4
 800dbd8:	77fb      	strb	r3, [r7, #31]
 800dbda:	e001      	b.n	800dbe0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dbe0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3720      	adds	r7, #32
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	20000f88 	.word	0x20000f88
 800dbf0:	20001414 	.word	0x20001414
 800dbf4:	20001418 	.word	0x20001418
 800dbf8:	20001448 	.word	0x20001448
 800dbfc:	20001430 	.word	0x20001430

0800dc00 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b37      	cmp	r3, #55	@ 0x37
 800dc12:	d90b      	bls.n	800dc2c <vTaskPrioritySet+0x2c>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	60fb      	str	r3, [r7, #12]
}
 800dc26:	bf00      	nop
 800dc28:	bf00      	nop
 800dc2a:	e7fd      	b.n	800dc28 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2b37      	cmp	r3, #55	@ 0x37
 800dc30:	d901      	bls.n	800dc36 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc32:	2337      	movs	r3, #55	@ 0x37
 800dc34:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dc36:	f002 f86f 	bl	800fd18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d102      	bne.n	800dc46 <vTaskPrioritySet+0x46>
 800dc40:	4b3a      	ldr	r3, [pc, #232]	@ (800dd2c <vTaskPrioritySet+0x12c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	e000      	b.n	800dc48 <vTaskPrioritySet+0x48>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc4e:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d063      	beq.n	800dd20 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d90d      	bls.n	800dc7c <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dc60:	4b32      	ldr	r3, [pc, #200]	@ (800dd2c <vTaskPrioritySet+0x12c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d00f      	beq.n	800dc8a <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dc6a:	4b30      	ldr	r3, [pc, #192]	@ (800dd2c <vTaskPrioritySet+0x12c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d309      	bcc.n	800dc8a <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dc76:	2301      	movs	r3, #1
 800dc78:	61fb      	str	r3, [r7, #28]
 800dc7a:	e006      	b.n	800dc8a <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dc7c:	4b2b      	ldr	r3, [pc, #172]	@ (800dd2c <vTaskPrioritySet+0x12c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d101      	bne.n	800dc8a <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dc86:	2301      	movs	r3, #1
 800dc88:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d102      	bne.n	800dca2 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	db04      	blt.n	800dcba <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	6959      	ldr	r1, [r3, #20]
 800dcbe:	693a      	ldr	r2, [r7, #16]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4413      	add	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	4a19      	ldr	r2, [pc, #100]	@ (800dd30 <vTaskPrioritySet+0x130>)
 800dcca:	4413      	add	r3, r2
 800dccc:	4299      	cmp	r1, r3
 800dcce:	d11c      	bne.n	800dd0a <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe fd87 	bl	800c7e8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcde:	4b15      	ldr	r3, [pc, #84]	@ (800dd34 <vTaskPrioritySet+0x134>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d903      	bls.n	800dcee <vTaskPrioritySet+0xee>
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcea:	4a12      	ldr	r2, [pc, #72]	@ (800dd34 <vTaskPrioritySet+0x134>)
 800dcec:	6013      	str	r3, [r2, #0]
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4a0d      	ldr	r2, [pc, #52]	@ (800dd30 <vTaskPrioritySet+0x130>)
 800dcfc:	441a      	add	r2, r3
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4619      	mov	r1, r3
 800dd04:	4610      	mov	r0, r2
 800dd06:	f7fe fd12 	bl	800c72e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d007      	beq.n	800dd20 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800dd10:	4b09      	ldr	r3, [pc, #36]	@ (800dd38 <vTaskPrioritySet+0x138>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800dd20:	f002 f82c 	bl	800fd7c <vPortExitCritical>
	}
 800dd24:	bf00      	nop
 800dd26:	3720      	adds	r7, #32
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	20000f88 	.word	0x20000f88
 800dd30:	20000f8c 	.word	0x20000f8c
 800dd34:	20001464 	.word	0x20001464
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dd44:	f001 ffe8 	bl	800fd18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <vTaskSuspend+0x18>
 800dd4e:	4b30      	ldr	r3, [pc, #192]	@ (800de10 <vTaskSuspend+0xd4>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	e000      	b.n	800dd56 <vTaskSuspend+0x1a>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fe fd43 	bl	800c7e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d004      	beq.n	800dd74 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3318      	adds	r3, #24
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fd3a 	bl	800c7e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	3304      	adds	r3, #4
 800dd78:	4619      	mov	r1, r3
 800dd7a:	4826      	ldr	r0, [pc, #152]	@ (800de14 <vTaskSuspend+0xd8>)
 800dd7c:	f7fe fcd7 	bl	800c72e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d103      	bne.n	800dd94 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dd94:	f001 fff2 	bl	800fd7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dd98:	4b1f      	ldr	r3, [pc, #124]	@ (800de18 <vTaskSuspend+0xdc>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dda0:	f001 ffba 	bl	800fd18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dda4:	f000 ff2a 	bl	800ebfc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dda8:	f001 ffe8 	bl	800fd7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ddac:	4b18      	ldr	r3, [pc, #96]	@ (800de10 <vTaskSuspend+0xd4>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d128      	bne.n	800de08 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800ddb6:	4b18      	ldr	r3, [pc, #96]	@ (800de18 <vTaskSuspend+0xdc>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d018      	beq.n	800ddf0 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ddbe:	4b17      	ldr	r3, [pc, #92]	@ (800de1c <vTaskSuspend+0xe0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00b      	beq.n	800ddde <vTaskSuspend+0xa2>
	__asm volatile
 800ddc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	60bb      	str	r3, [r7, #8]
}
 800ddd8:	bf00      	nop
 800ddda:	bf00      	nop
 800dddc:	e7fd      	b.n	800ddda <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ddde:	4b10      	ldr	r3, [pc, #64]	@ (800de20 <vTaskSuspend+0xe4>)
 800dde0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddee:	e00b      	b.n	800de08 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ddf0:	4b08      	ldr	r3, [pc, #32]	@ (800de14 <vTaskSuspend+0xd8>)
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	4b0b      	ldr	r3, [pc, #44]	@ (800de24 <vTaskSuspend+0xe8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d103      	bne.n	800de04 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800ddfc:	4b04      	ldr	r3, [pc, #16]	@ (800de10 <vTaskSuspend+0xd4>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	601a      	str	r2, [r3, #0]
	}
 800de02:	e001      	b.n	800de08 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800de04:	f000 fb5c 	bl	800e4c0 <vTaskSwitchContext>
	}
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	20000f88 	.word	0x20000f88
 800de14:	20001448 	.word	0x20001448
 800de18:	20001468 	.word	0x20001468
 800de1c:	20001484 	.word	0x20001484
 800de20:	e000ed04 	.word	0xe000ed04
 800de24:	2000145c 	.word	0x2000145c

0800de28 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10b      	bne.n	800de56 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	60fb      	str	r3, [r7, #12]
}
 800de50:	bf00      	nop
 800de52:	bf00      	nop
 800de54:	e7fd      	b.n	800de52 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	4a0a      	ldr	r2, [pc, #40]	@ (800de84 <prvTaskIsTaskSuspended+0x5c>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d10a      	bne.n	800de76 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de64:	4a08      	ldr	r2, [pc, #32]	@ (800de88 <prvTaskIsTaskSuspended+0x60>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d005      	beq.n	800de76 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800de72:	2301      	movs	r3, #1
 800de74:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de76:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800de78:	4618      	mov	r0, r3
 800de7a:	371c      	adds	r7, #28
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	20001448 	.word	0x20001448
 800de88:	2000141c 	.word	0x2000141c

0800de8c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10b      	bne.n	800deb6 <vTaskResume+0x2a>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	60bb      	str	r3, [r7, #8]
}
 800deb0:	bf00      	nop
 800deb2:	bf00      	nop
 800deb4:	e7fd      	b.n	800deb2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800deb6:	4b21      	ldr	r3, [pc, #132]	@ (800df3c <vTaskResume+0xb0>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	429a      	cmp	r2, r3
 800debe:	d038      	beq.n	800df32 <vTaskResume+0xa6>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d035      	beq.n	800df32 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800dec6:	f001 ff27 	bl	800fd18 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7ff ffac 	bl	800de28 <prvTaskIsTaskSuspended>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d02b      	beq.n	800df2e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3304      	adds	r3, #4
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fc84 	bl	800c7e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dee4:	4b16      	ldr	r3, [pc, #88]	@ (800df40 <vTaskResume+0xb4>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d903      	bls.n	800def4 <vTaskResume+0x68>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def0:	4a13      	ldr	r2, [pc, #76]	@ (800df40 <vTaskResume+0xb4>)
 800def2:	6013      	str	r3, [r2, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800def8:	4613      	mov	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4a10      	ldr	r2, [pc, #64]	@ (800df44 <vTaskResume+0xb8>)
 800df02:	441a      	add	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3304      	adds	r3, #4
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f7fe fc0f 	bl	800c72e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df14:	4b09      	ldr	r3, [pc, #36]	@ (800df3c <vTaskResume+0xb0>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d307      	bcc.n	800df2e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800df1e:	4b0a      	ldr	r3, [pc, #40]	@ (800df48 <vTaskResume+0xbc>)
 800df20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800df2e:	f001 ff25 	bl	800fd7c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df32:	bf00      	nop
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20000f88 	.word	0x20000f88
 800df40:	20001464 	.word	0x20001464
 800df44:	20000f8c 	.word	0x20000f8c
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	@ 0x28
 800df50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df5a:	463a      	mov	r2, r7
 800df5c:	1d39      	adds	r1, r7, #4
 800df5e:	f107 0308 	add.w	r3, r7, #8
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe f9c6 	bl	800c2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	9202      	str	r2, [sp, #8]
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	2300      	movs	r3, #0
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	460a      	mov	r2, r1
 800df7a:	4924      	ldr	r1, [pc, #144]	@ (800e00c <vTaskStartScheduler+0xc0>)
 800df7c:	4824      	ldr	r0, [pc, #144]	@ (800e010 <vTaskStartScheduler+0xc4>)
 800df7e:	f7ff fb6f 	bl	800d660 <xTaskCreateStatic>
 800df82:	4603      	mov	r3, r0
 800df84:	4a23      	ldr	r2, [pc, #140]	@ (800e014 <vTaskStartScheduler+0xc8>)
 800df86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df88:	4b22      	ldr	r3, [pc, #136]	@ (800e014 <vTaskStartScheduler+0xc8>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df90:	2301      	movs	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
 800df94:	e001      	b.n	800df9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d102      	bne.n	800dfa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dfa0:	f001 f9b4 	bl	800f30c <xTimerCreateTimerTask>
 800dfa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d11b      	bne.n	800dfe4 <vTaskStartScheduler+0x98>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	613b      	str	r3, [r7, #16]
}
 800dfbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfc0:	4b15      	ldr	r3, [pc, #84]	@ (800e018 <vTaskStartScheduler+0xcc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3354      	adds	r3, #84	@ 0x54
 800dfc6:	4a15      	ldr	r2, [pc, #84]	@ (800e01c <vTaskStartScheduler+0xd0>)
 800dfc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfca:	4b15      	ldr	r3, [pc, #84]	@ (800e020 <vTaskStartScheduler+0xd4>)
 800dfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfd2:	4b14      	ldr	r3, [pc, #80]	@ (800e024 <vTaskStartScheduler+0xd8>)
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfd8:	4b13      	ldr	r3, [pc, #76]	@ (800e028 <vTaskStartScheduler+0xdc>)
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfde:	f001 fdf7 	bl	800fbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfe2:	e00f      	b.n	800e004 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d10b      	bne.n	800e004 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60fb      	str	r3, [r7, #12]
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <vTaskStartScheduler+0xb4>
}
 800e004:	bf00      	nop
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	0801570c 	.word	0x0801570c
 800e010:	0800e949 	.word	0x0800e949
 800e014:	20001480 	.word	0x20001480
 800e018:	20000f88 	.word	0x20000f88
 800e01c:	200003d4 	.word	0x200003d4
 800e020:	2000147c 	.word	0x2000147c
 800e024:	20001468 	.word	0x20001468
 800e028:	20001460 	.word	0x20001460

0800e02c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e030:	4b04      	ldr	r3, [pc, #16]	@ (800e044 <vTaskSuspendAll+0x18>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	3301      	adds	r3, #1
 800e036:	4a03      	ldr	r2, [pc, #12]	@ (800e044 <vTaskSuspendAll+0x18>)
 800e038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e03a:	bf00      	nop
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20001484 	.word	0x20001484

0800e048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e056:	4b42      	ldr	r3, [pc, #264]	@ (800e160 <xTaskResumeAll+0x118>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10b      	bne.n	800e076 <xTaskResumeAll+0x2e>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	603b      	str	r3, [r7, #0]
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	e7fd      	b.n	800e072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e076:	f001 fe4f 	bl	800fd18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e07a:	4b39      	ldr	r3, [pc, #228]	@ (800e160 <xTaskResumeAll+0x118>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3b01      	subs	r3, #1
 800e080:	4a37      	ldr	r2, [pc, #220]	@ (800e160 <xTaskResumeAll+0x118>)
 800e082:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e084:	4b36      	ldr	r3, [pc, #216]	@ (800e160 <xTaskResumeAll+0x118>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d162      	bne.n	800e152 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e08c:	4b35      	ldr	r3, [pc, #212]	@ (800e164 <xTaskResumeAll+0x11c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d05e      	beq.n	800e152 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e094:	e02f      	b.n	800e0f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e096:	4b34      	ldr	r3, [pc, #208]	@ (800e168 <xTaskResumeAll+0x120>)
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3318      	adds	r3, #24
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe fba0 	bl	800c7e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe fb9b 	bl	800c7e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b6:	4b2d      	ldr	r3, [pc, #180]	@ (800e16c <xTaskResumeAll+0x124>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d903      	bls.n	800e0c6 <xTaskResumeAll+0x7e>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c2:	4a2a      	ldr	r2, [pc, #168]	@ (800e16c <xTaskResumeAll+0x124>)
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4a27      	ldr	r2, [pc, #156]	@ (800e170 <xTaskResumeAll+0x128>)
 800e0d4:	441a      	add	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4610      	mov	r0, r2
 800e0de:	f7fe fb26 	bl	800c72e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e6:	4b23      	ldr	r3, [pc, #140]	@ (800e174 <xTaskResumeAll+0x12c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d302      	bcc.n	800e0f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0f0:	4b21      	ldr	r3, [pc, #132]	@ (800e178 <xTaskResumeAll+0x130>)
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0f6:	4b1c      	ldr	r3, [pc, #112]	@ (800e168 <xTaskResumeAll+0x120>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1cb      	bne.n	800e096 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e104:	f000 fd7a 	bl	800ebfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e108:	4b1c      	ldr	r3, [pc, #112]	@ (800e17c <xTaskResumeAll+0x134>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d010      	beq.n	800e136 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e114:	f000 f91a 	bl	800e34c <xTaskIncrementTick>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e11e:	4b16      	ldr	r3, [pc, #88]	@ (800e178 <xTaskResumeAll+0x130>)
 800e120:	2201      	movs	r2, #1
 800e122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3b01      	subs	r3, #1
 800e128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1f1      	bne.n	800e114 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e130:	4b12      	ldr	r3, [pc, #72]	@ (800e17c <xTaskResumeAll+0x134>)
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e136:	4b10      	ldr	r3, [pc, #64]	@ (800e178 <xTaskResumeAll+0x130>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d009      	beq.n	800e152 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e13e:	2301      	movs	r3, #1
 800e140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e142:	4b0f      	ldr	r3, [pc, #60]	@ (800e180 <xTaskResumeAll+0x138>)
 800e144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e152:	f001 fe13 	bl	800fd7c <vPortExitCritical>

	return xAlreadyYielded;
 800e156:	68bb      	ldr	r3, [r7, #8]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	20001484 	.word	0x20001484
 800e164:	2000145c 	.word	0x2000145c
 800e168:	2000141c 	.word	0x2000141c
 800e16c:	20001464 	.word	0x20001464
 800e170:	20000f8c 	.word	0x20000f8c
 800e174:	20000f88 	.word	0x20000f88
 800e178:	20001470 	.word	0x20001470
 800e17c:	2000146c 	.word	0x2000146c
 800e180:	e000ed04 	.word	0xe000ed04

0800e184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e18a:	4b05      	ldr	r3, [pc, #20]	@ (800e1a0 <xTaskGetTickCount+0x1c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e190:	687b      	ldr	r3, [r7, #4]
}
 800e192:	4618      	mov	r0, r3
 800e194:	370c      	adds	r7, #12
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20001460 	.word	0x20001460

0800e1a4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b08b      	sub	sp, #44	@ 0x2c
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d05b      	beq.n	800e272 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	61bb      	str	r3, [r7, #24]
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	605a      	str	r2, [r3, #4]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d104      	bne.n	800e1de <prvSearchForNameWithinSingleList+0x3a>
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	685a      	ldr	r2, [r3, #4]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	605a      	str	r2, [r3, #4]
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	613b      	str	r3, [r7, #16]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	605a      	str	r2, [r3, #4]
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d104      	bne.n	800e20a <prvSearchForNameWithinSingleList+0x66>
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	605a      	str	r2, [r3, #4]
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e212:	2300      	movs	r3, #0
 800e214:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e216:	2300      	movs	r3, #0
 800e218:	623b      	str	r3, [r7, #32]
 800e21a:	e01c      	b.n	800e256 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	4413      	add	r3, r2
 800e222:	3334      	adds	r3, #52	@ 0x34
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e228:	683a      	ldr	r2, [r7, #0]
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	4413      	add	r3, r2
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	7afa      	ldrb	r2, [r7, #11]
 800e232:	429a      	cmp	r2, r3
 800e234:	d002      	beq.n	800e23c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e236:	2301      	movs	r3, #1
 800e238:	61fb      	str	r3, [r7, #28]
 800e23a:	e006      	b.n	800e24a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e23c:	7afb      	ldrb	r3, [r7, #11]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d103      	bne.n	800e24a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e246:	2301      	movs	r3, #1
 800e248:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d106      	bne.n	800e25e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	3301      	adds	r3, #1
 800e254:	623b      	str	r3, [r7, #32]
 800e256:	6a3b      	ldr	r3, [r7, #32]
 800e258:	2b0f      	cmp	r3, #15
 800e25a:	d9df      	bls.n	800e21c <prvSearchForNameWithinSingleList+0x78>
 800e25c:	e000      	b.n	800e260 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e25e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	d104      	bne.n	800e270 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d1bb      	bne.n	800e1e6 <prvSearchForNameWithinSingleList+0x42>
 800e26e:	e000      	b.n	800e272 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e270:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e274:	4618      	mov	r0, r3
 800e276:	372c      	adds	r7, #44	@ 0x2c
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e288:	2338      	movs	r3, #56	@ 0x38
 800e28a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7f1 ffef 	bl	8000270 <strlen>
 800e292:	4603      	mov	r3, r0
 800e294:	2b0f      	cmp	r3, #15
 800e296:	d90b      	bls.n	800e2b0 <xTaskGetHandle+0x30>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	60fb      	str	r3, [r7, #12]
}
 800e2aa:	bf00      	nop
 800e2ac:	bf00      	nop
 800e2ae:	e7fd      	b.n	800e2ac <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e2b0:	f7ff febc 	bl	800e02c <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e338 <xTaskGetHandle+0xb8>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff ff6a 	bl	800e1a4 <prvSearchForNameWithinSingleList>
 800e2d0:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d103      	bne.n	800e2e0 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1ea      	bne.n	800e2b4 <xTaskGetHandle+0x34>
 800e2de:	e000      	b.n	800e2e2 <xTaskGetHandle+0x62>
					break;
 800e2e0:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d106      	bne.n	800e2f6 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e2e8:	4b14      	ldr	r3, [pc, #80]	@ (800e33c <xTaskGetHandle+0xbc>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6879      	ldr	r1, [r7, #4]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff ff58 	bl	800e1a4 <prvSearchForNameWithinSingleList>
 800e2f4:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d106      	bne.n	800e30a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e2fc:	4b10      	ldr	r3, [pc, #64]	@ (800e340 <xTaskGetHandle+0xc0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff ff4e 	bl	800e1a4 <prvSearchForNameWithinSingleList>
 800e308:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d104      	bne.n	800e31a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	480c      	ldr	r0, [pc, #48]	@ (800e344 <xTaskGetHandle+0xc4>)
 800e314:	f7ff ff46 	bl	800e1a4 <prvSearchForNameWithinSingleList>
 800e318:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d104      	bne.n	800e32a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	4809      	ldr	r0, [pc, #36]	@ (800e348 <xTaskGetHandle+0xc8>)
 800e324:	f7ff ff3e 	bl	800e1a4 <prvSearchForNameWithinSingleList>
 800e328:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e32a:	f7ff fe8d 	bl	800e048 <xTaskResumeAll>

		return pxTCB;
 800e32e:	693b      	ldr	r3, [r7, #16]
	}
 800e330:	4618      	mov	r0, r3
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20000f8c 	.word	0x20000f8c
 800e33c:	20001414 	.word	0x20001414
 800e340:	20001418 	.word	0x20001418
 800e344:	20001448 	.word	0x20001448
 800e348:	20001430 	.word	0x20001430

0800e34c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e352:	2300      	movs	r3, #0
 800e354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e356:	4b4f      	ldr	r3, [pc, #316]	@ (800e494 <xTaskIncrementTick+0x148>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f040 8090 	bne.w	800e480 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e360:	4b4d      	ldr	r3, [pc, #308]	@ (800e498 <xTaskIncrementTick+0x14c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	3301      	adds	r3, #1
 800e366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e368:	4a4b      	ldr	r2, [pc, #300]	@ (800e498 <xTaskIncrementTick+0x14c>)
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d121      	bne.n	800e3b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e374:	4b49      	ldr	r3, [pc, #292]	@ (800e49c <xTaskIncrementTick+0x150>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	603b      	str	r3, [r7, #0]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <xTaskIncrementTick+0x46>
 800e396:	4b41      	ldr	r3, [pc, #260]	@ (800e49c <xTaskIncrementTick+0x150>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	4b40      	ldr	r3, [pc, #256]	@ (800e4a0 <xTaskIncrementTick+0x154>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a3e      	ldr	r2, [pc, #248]	@ (800e49c <xTaskIncrementTick+0x150>)
 800e3a2:	6013      	str	r3, [r2, #0]
 800e3a4:	4a3e      	ldr	r2, [pc, #248]	@ (800e4a0 <xTaskIncrementTick+0x154>)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6013      	str	r3, [r2, #0]
 800e3aa:	4b3e      	ldr	r3, [pc, #248]	@ (800e4a4 <xTaskIncrementTick+0x158>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	4a3c      	ldr	r2, [pc, #240]	@ (800e4a4 <xTaskIncrementTick+0x158>)
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	f000 fc22 	bl	800ebfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3b8:	4b3b      	ldr	r3, [pc, #236]	@ (800e4a8 <xTaskIncrementTick+0x15c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d349      	bcc.n	800e456 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3c2:	4b36      	ldr	r3, [pc, #216]	@ (800e49c <xTaskIncrementTick+0x150>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d104      	bne.n	800e3d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3cc:	4b36      	ldr	r3, [pc, #216]	@ (800e4a8 <xTaskIncrementTick+0x15c>)
 800e3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d2:	601a      	str	r2, [r3, #0]
					break;
 800e3d4:	e03f      	b.n	800e456 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d6:	4b31      	ldr	r3, [pc, #196]	@ (800e49c <xTaskIncrementTick+0x150>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3e6:	693a      	ldr	r2, [r7, #16]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d203      	bcs.n	800e3f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3ee:	4a2e      	ldr	r2, [pc, #184]	@ (800e4a8 <xTaskIncrementTick+0x15c>)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3f4:	e02f      	b.n	800e456 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f9f4 	bl	800c7e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	3318      	adds	r3, #24
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe f9eb 	bl	800c7e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e416:	4b25      	ldr	r3, [pc, #148]	@ (800e4ac <xTaskIncrementTick+0x160>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d903      	bls.n	800e426 <xTaskIncrementTick+0xda>
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	4a22      	ldr	r2, [pc, #136]	@ (800e4ac <xTaskIncrementTick+0x160>)
 800e424:	6013      	str	r3, [r2, #0]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e42a:	4613      	mov	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4a1f      	ldr	r2, [pc, #124]	@ (800e4b0 <xTaskIncrementTick+0x164>)
 800e434:	441a      	add	r2, r3
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	3304      	adds	r3, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7fe f976 	bl	800c72e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e446:	4b1b      	ldr	r3, [pc, #108]	@ (800e4b4 <xTaskIncrementTick+0x168>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d3b8      	bcc.n	800e3c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e450:	2301      	movs	r3, #1
 800e452:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e454:	e7b5      	b.n	800e3c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e456:	4b17      	ldr	r3, [pc, #92]	@ (800e4b4 <xTaskIncrementTick+0x168>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e45c:	4914      	ldr	r1, [pc, #80]	@ (800e4b0 <xTaskIncrementTick+0x164>)
 800e45e:	4613      	mov	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	440b      	add	r3, r1
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d901      	bls.n	800e472 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e46e:	2301      	movs	r3, #1
 800e470:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e472:	4b11      	ldr	r3, [pc, #68]	@ (800e4b8 <xTaskIncrementTick+0x16c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d007      	beq.n	800e48a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e47a:	2301      	movs	r3, #1
 800e47c:	617b      	str	r3, [r7, #20]
 800e47e:	e004      	b.n	800e48a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e480:	4b0e      	ldr	r3, [pc, #56]	@ (800e4bc <xTaskIncrementTick+0x170>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3301      	adds	r3, #1
 800e486:	4a0d      	ldr	r2, [pc, #52]	@ (800e4bc <xTaskIncrementTick+0x170>)
 800e488:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e48a:	697b      	ldr	r3, [r7, #20]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20001484 	.word	0x20001484
 800e498:	20001460 	.word	0x20001460
 800e49c:	20001414 	.word	0x20001414
 800e4a0:	20001418 	.word	0x20001418
 800e4a4:	20001474 	.word	0x20001474
 800e4a8:	2000147c 	.word	0x2000147c
 800e4ac:	20001464 	.word	0x20001464
 800e4b0:	20000f8c 	.word	0x20000f8c
 800e4b4:	20000f88 	.word	0x20000f88
 800e4b8:	20001470 	.word	0x20001470
 800e4bc:	2000146c 	.word	0x2000146c

0800e4c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4c6:	4b2b      	ldr	r3, [pc, #172]	@ (800e574 <vTaskSwitchContext+0xb4>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4ce:	4b2a      	ldr	r3, [pc, #168]	@ (800e578 <vTaskSwitchContext+0xb8>)
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4d4:	e047      	b.n	800e566 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e4d6:	4b28      	ldr	r3, [pc, #160]	@ (800e578 <vTaskSwitchContext+0xb8>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4dc:	4b27      	ldr	r3, [pc, #156]	@ (800e57c <vTaskSwitchContext+0xbc>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	60fb      	str	r3, [r7, #12]
 800e4e2:	e011      	b.n	800e508 <vTaskSwitchContext+0x48>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <vTaskSwitchContext+0x42>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	607b      	str	r3, [r7, #4]
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	e7fd      	b.n	800e4fe <vTaskSwitchContext+0x3e>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3b01      	subs	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	491d      	ldr	r1, [pc, #116]	@ (800e580 <vTaskSwitchContext+0xc0>)
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	440b      	add	r3, r1
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d0e3      	beq.n	800e4e4 <vTaskSwitchContext+0x24>
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	4613      	mov	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4413      	add	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4a16      	ldr	r2, [pc, #88]	@ (800e580 <vTaskSwitchContext+0xc0>)
 800e528:	4413      	add	r3, r2
 800e52a:	60bb      	str	r3, [r7, #8]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	605a      	str	r2, [r3, #4]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	685a      	ldr	r2, [r3, #4]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	3308      	adds	r3, #8
 800e53e:	429a      	cmp	r2, r3
 800e540:	d104      	bne.n	800e54c <vTaskSwitchContext+0x8c>
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	685a      	ldr	r2, [r3, #4]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	605a      	str	r2, [r3, #4]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	4a0c      	ldr	r2, [pc, #48]	@ (800e584 <vTaskSwitchContext+0xc4>)
 800e554:	6013      	str	r3, [r2, #0]
 800e556:	4a09      	ldr	r2, [pc, #36]	@ (800e57c <vTaskSwitchContext+0xbc>)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e55c:	4b09      	ldr	r3, [pc, #36]	@ (800e584 <vTaskSwitchContext+0xc4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3354      	adds	r3, #84	@ 0x54
 800e562:	4a09      	ldr	r2, [pc, #36]	@ (800e588 <vTaskSwitchContext+0xc8>)
 800e564:	6013      	str	r3, [r2, #0]
}
 800e566:	bf00      	nop
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	20001484 	.word	0x20001484
 800e578:	20001470 	.word	0x20001470
 800e57c:	20001464 	.word	0x20001464
 800e580:	20000f8c 	.word	0x20000f8c
 800e584:	20000f88 	.word	0x20000f88
 800e588:	200003d4 	.word	0x200003d4

0800e58c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10b      	bne.n	800e5b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	e7fd      	b.n	800e5b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5b4:	4b07      	ldr	r3, [pc, #28]	@ (800e5d4 <vTaskPlaceOnEventList+0x48>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3318      	adds	r3, #24
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7fe f8da 	bl	800c776 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	6838      	ldr	r0, [r7, #0]
 800e5c6:	f000 fe4d 	bl	800f264 <prvAddCurrentTaskToDelayedList>
}
 800e5ca:	bf00      	nop
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20000f88 	.word	0x20000f88

0800e5d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10b      	bne.n	800e602 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	617b      	str	r3, [r7, #20]
}
 800e5fc:	bf00      	nop
 800e5fe:	bf00      	nop
 800e600:	e7fd      	b.n	800e5fe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e602:	4b12      	ldr	r3, [pc, #72]	@ (800e64c <vTaskPlaceOnUnorderedEventList+0x74>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10b      	bne.n	800e622 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	613b      	str	r3, [r7, #16]
}
 800e61c:	bf00      	nop
 800e61e:	bf00      	nop
 800e620:	e7fd      	b.n	800e61e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e622:	4b0b      	ldr	r3, [pc, #44]	@ (800e650 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e62c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e62e:	4b08      	ldr	r3, [pc, #32]	@ (800e650 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3318      	adds	r3, #24
 800e634:	4619      	mov	r1, r3
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7fe f879 	bl	800c72e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e63c:	2101      	movs	r1, #1
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fe10 	bl	800f264 <prvAddCurrentTaskToDelayedList>
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20001484 	.word	0x20001484
 800e650:	20000f88 	.word	0x20000f88

0800e654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10b      	bne.n	800e67e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	617b      	str	r3, [r7, #20]
}
 800e678:	bf00      	nop
 800e67a:	bf00      	nop
 800e67c:	e7fd      	b.n	800e67a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e67e:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3318      	adds	r3, #24
 800e684:	4619      	mov	r1, r3
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe f851 	bl	800c72e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e692:	f04f 33ff 	mov.w	r3, #4294967295
 800e696:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e698:	6879      	ldr	r1, [r7, #4]
 800e69a:	68b8      	ldr	r0, [r7, #8]
 800e69c:	f000 fde2 	bl	800f264 <prvAddCurrentTaskToDelayedList>
	}
 800e6a0:	bf00      	nop
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20000f88 	.word	0x20000f88

0800e6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60fb      	str	r3, [r7, #12]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	3318      	adds	r3, #24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe f882 	bl	800c7e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e75c <xTaskRemoveFromEventList+0xb0>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d11d      	bne.n	800e728 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe f879 	bl	800c7e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fa:	4b19      	ldr	r3, [pc, #100]	@ (800e760 <xTaskRemoveFromEventList+0xb4>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d903      	bls.n	800e70a <xTaskRemoveFromEventList+0x5e>
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e706:	4a16      	ldr	r2, [pc, #88]	@ (800e760 <xTaskRemoveFromEventList+0xb4>)
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70e:	4613      	mov	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4a13      	ldr	r2, [pc, #76]	@ (800e764 <xTaskRemoveFromEventList+0xb8>)
 800e718:	441a      	add	r2, r3
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	3304      	adds	r3, #4
 800e71e:	4619      	mov	r1, r3
 800e720:	4610      	mov	r0, r2
 800e722:	f7fe f804 	bl	800c72e <vListInsertEnd>
 800e726:	e005      	b.n	800e734 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	3318      	adds	r3, #24
 800e72c:	4619      	mov	r1, r3
 800e72e:	480e      	ldr	r0, [pc, #56]	@ (800e768 <xTaskRemoveFromEventList+0xbc>)
 800e730:	f7fd fffd 	bl	800c72e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e738:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <xTaskRemoveFromEventList+0xc0>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73e:	429a      	cmp	r2, r3
 800e740:	d905      	bls.n	800e74e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e746:	4b0a      	ldr	r3, [pc, #40]	@ (800e770 <xTaskRemoveFromEventList+0xc4>)
 800e748:	2201      	movs	r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	e001      	b.n	800e752 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e74e:	2300      	movs	r3, #0
 800e750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e752:	697b      	ldr	r3, [r7, #20]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20001484 	.word	0x20001484
 800e760:	20001464 	.word	0x20001464
 800e764:	20000f8c 	.word	0x20000f8c
 800e768:	2000141c 	.word	0x2000141c
 800e76c:	20000f88 	.word	0x20000f88
 800e770:	20001470 	.word	0x20001470

0800e774 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e77e:	4b2a      	ldr	r3, [pc, #168]	@ (800e828 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10b      	bne.n	800e79e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	613b      	str	r3, [r7, #16]
}
 800e798:	bf00      	nop
 800e79a:	bf00      	nop
 800e79c:	e7fd      	b.n	800e79a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10b      	bne.n	800e7cc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b8:	f383 8811 	msr	BASEPRI, r3
 800e7bc:	f3bf 8f6f 	isb	sy
 800e7c0:	f3bf 8f4f 	dsb	sy
 800e7c4:	60fb      	str	r3, [r7, #12]
}
 800e7c6:	bf00      	nop
 800e7c8:	bf00      	nop
 800e7ca:	e7fd      	b.n	800e7c8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fe f80b 	bl	800c7e8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fe f806 	bl	800c7e8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e0:	4b12      	ldr	r3, [pc, #72]	@ (800e82c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d903      	bls.n	800e7f0 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ec:	4a0f      	ldr	r2, [pc, #60]	@ (800e82c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e830 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e7fe:	441a      	add	r2, r3
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f7fd ff91 	bl	800c72e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e810:	4b08      	ldr	r3, [pc, #32]	@ (800e834 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e816:	429a      	cmp	r2, r3
 800e818:	d902      	bls.n	800e820 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e81a:	4b07      	ldr	r3, [pc, #28]	@ (800e838 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e81c:	2201      	movs	r2, #1
 800e81e:	601a      	str	r2, [r3, #0]
	}
}
 800e820:	bf00      	nop
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20001484 	.word	0x20001484
 800e82c:	20001464 	.word	0x20001464
 800e830:	20000f8c 	.word	0x20000f8c
 800e834:	20000f88 	.word	0x20000f88
 800e838:	20001470 	.word	0x20001470

0800e83c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e844:	4b06      	ldr	r3, [pc, #24]	@ (800e860 <vTaskInternalSetTimeOutState+0x24>)
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e84c:	4b05      	ldr	r3, [pc, #20]	@ (800e864 <vTaskInternalSetTimeOutState+0x28>)
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	605a      	str	r2, [r3, #4]
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr
 800e860:	20001474 	.word	0x20001474
 800e864:	20001460 	.word	0x20001460

0800e868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10b      	bne.n	800e890 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	613b      	str	r3, [r7, #16]
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	e7fd      	b.n	800e88c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	60fb      	str	r3, [r7, #12]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e8ae:	f001 fa33 	bl	800fd18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800e928 <xTaskCheckForTimeOut+0xc0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	69ba      	ldr	r2, [r7, #24]
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ca:	d102      	bne.n	800e8d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e023      	b.n	800e91a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	4b15      	ldr	r3, [pc, #84]	@ (800e92c <xTaskCheckForTimeOut+0xc4>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d007      	beq.n	800e8ee <xTaskCheckForTimeOut+0x86>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d302      	bcc.n	800e8ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	e015      	b.n	800e91a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d20b      	bcs.n	800e910 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	1ad2      	subs	r2, r2, r3
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff ff99 	bl	800e83c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e90a:	2300      	movs	r3, #0
 800e90c:	61fb      	str	r3, [r7, #28]
 800e90e:	e004      	b.n	800e91a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e916:	2301      	movs	r3, #1
 800e918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e91a:	f001 fa2f 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800e91e:	69fb      	ldr	r3, [r7, #28]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3720      	adds	r7, #32
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20001460 	.word	0x20001460
 800e92c:	20001474 	.word	0x20001474

0800e930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e930:	b480      	push	{r7}
 800e932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e934:	4b03      	ldr	r3, [pc, #12]	@ (800e944 <vTaskMissedYield+0x14>)
 800e936:	2201      	movs	r2, #1
 800e938:	601a      	str	r2, [r3, #0]
}
 800e93a:	bf00      	nop
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	20001470 	.word	0x20001470

0800e948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e950:	f000 f852 	bl	800e9f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e954:	4b06      	ldr	r3, [pc, #24]	@ (800e970 <prvIdleTask+0x28>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d9f9      	bls.n	800e950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e95c:	4b05      	ldr	r3, [pc, #20]	@ (800e974 <prvIdleTask+0x2c>)
 800e95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e96c:	e7f0      	b.n	800e950 <prvIdleTask+0x8>
 800e96e:	bf00      	nop
 800e970:	20000f8c 	.word	0x20000f8c
 800e974:	e000ed04 	.word	0xe000ed04

0800e978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e97e:	2300      	movs	r3, #0
 800e980:	607b      	str	r3, [r7, #4]
 800e982:	e00c      	b.n	800e99e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	4613      	mov	r3, r2
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	4413      	add	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4a12      	ldr	r2, [pc, #72]	@ (800e9d8 <prvInitialiseTaskLists+0x60>)
 800e990:	4413      	add	r3, r2
 800e992:	4618      	mov	r0, r3
 800e994:	f7fd fe9e 	bl	800c6d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	3301      	adds	r3, #1
 800e99c:	607b      	str	r3, [r7, #4]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b37      	cmp	r3, #55	@ 0x37
 800e9a2:	d9ef      	bls.n	800e984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9a4:	480d      	ldr	r0, [pc, #52]	@ (800e9dc <prvInitialiseTaskLists+0x64>)
 800e9a6:	f7fd fe95 	bl	800c6d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9aa:	480d      	ldr	r0, [pc, #52]	@ (800e9e0 <prvInitialiseTaskLists+0x68>)
 800e9ac:	f7fd fe92 	bl	800c6d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9b0:	480c      	ldr	r0, [pc, #48]	@ (800e9e4 <prvInitialiseTaskLists+0x6c>)
 800e9b2:	f7fd fe8f 	bl	800c6d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9b6:	480c      	ldr	r0, [pc, #48]	@ (800e9e8 <prvInitialiseTaskLists+0x70>)
 800e9b8:	f7fd fe8c 	bl	800c6d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9bc:	480b      	ldr	r0, [pc, #44]	@ (800e9ec <prvInitialiseTaskLists+0x74>)
 800e9be:	f7fd fe89 	bl	800c6d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f0 <prvInitialiseTaskLists+0x78>)
 800e9c4:	4a05      	ldr	r2, [pc, #20]	@ (800e9dc <prvInitialiseTaskLists+0x64>)
 800e9c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f4 <prvInitialiseTaskLists+0x7c>)
 800e9ca:	4a05      	ldr	r2, [pc, #20]	@ (800e9e0 <prvInitialiseTaskLists+0x68>)
 800e9cc:	601a      	str	r2, [r3, #0]
}
 800e9ce:	bf00      	nop
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000f8c 	.word	0x20000f8c
 800e9dc:	200013ec 	.word	0x200013ec
 800e9e0:	20001400 	.word	0x20001400
 800e9e4:	2000141c 	.word	0x2000141c
 800e9e8:	20001430 	.word	0x20001430
 800e9ec:	20001448 	.word	0x20001448
 800e9f0:	20001414 	.word	0x20001414
 800e9f4:	20001418 	.word	0x20001418

0800e9f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9fe:	e019      	b.n	800ea34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea00:	f001 f98a 	bl	800fd18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea04:	4b10      	ldr	r3, [pc, #64]	@ (800ea48 <prvCheckTasksWaitingTermination+0x50>)
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fd fee9 	bl	800c7e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea16:	4b0d      	ldr	r3, [pc, #52]	@ (800ea4c <prvCheckTasksWaitingTermination+0x54>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ea4c <prvCheckTasksWaitingTermination+0x54>)
 800ea1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea20:	4b0b      	ldr	r3, [pc, #44]	@ (800ea50 <prvCheckTasksWaitingTermination+0x58>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	3b01      	subs	r3, #1
 800ea26:	4a0a      	ldr	r2, [pc, #40]	@ (800ea50 <prvCheckTasksWaitingTermination+0x58>)
 800ea28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea2a:	f001 f9a7 	bl	800fd7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f8ae 	bl	800eb90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea34:	4b06      	ldr	r3, [pc, #24]	@ (800ea50 <prvCheckTasksWaitingTermination+0x58>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1e1      	bne.n	800ea00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea3c:	bf00      	nop
 800ea3e:	bf00      	nop
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	20001430 	.word	0x20001430
 800ea4c:	2000145c 	.word	0x2000145c
 800ea50:	20001444 	.word	0x20001444

0800ea54 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d102      	bne.n	800ea6e <vTaskGetInfo+0x1a>
 800ea68:	4b2c      	ldr	r3, [pc, #176]	@ (800eb1c <vTaskGetInfo+0xc8>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	e000      	b.n	800ea70 <vTaskGetInfo+0x1c>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	697a      	ldr	r2, [r7, #20]
 800ea76:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	2b05      	cmp	r3, #5
 800eaac:	d01a      	beq.n	800eae4 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800eaae:	4b1b      	ldr	r3, [pc, #108]	@ (800eb1c <vTaskGetInfo+0xc8>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d103      	bne.n	800eac0 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	731a      	strb	r2, [r3, #12]
 800eabe:	e018      	b.n	800eaf2 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	78fa      	ldrb	r2, [r7, #3]
 800eac4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eac6:	78fb      	ldrb	r3, [r7, #3]
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d112      	bne.n	800eaf2 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800eacc:	f7ff faae 	bl	800e02c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2202      	movs	r2, #2
 800eadc:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eade:	f7ff fab3 	bl	800e048 <xTaskResumeAll>
 800eae2:	e006      	b.n	800eaf2 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eae4:	6978      	ldr	r0, [r7, #20]
 800eae6:	f7ff f823 	bl	800db30 <eTaskGetState>
 800eaea:	4603      	mov	r3, r0
 800eaec:	461a      	mov	r2, r3
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d009      	beq.n	800eb0c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 f80f 	bl	800eb20 <prvTaskCheckFreeStackSpace>
 800eb02:	4603      	mov	r3, r0
 800eb04:	461a      	mov	r2, r3
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eb0a:	e002      	b.n	800eb12 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	841a      	strh	r2, [r3, #32]
	}
 800eb12:	bf00      	nop
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	20000f88 	.word	0x20000f88

0800eb20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb2c:	e005      	b.n	800eb3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3301      	adds	r3, #1
 800eb32:	607b      	str	r3, [r7, #4]
			ulCount++;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3301      	adds	r3, #1
 800eb38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	2ba5      	cmp	r3, #165	@ 0xa5
 800eb40:	d0f5      	beq.n	800eb2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	089b      	lsrs	r3, r3, #2
 800eb46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	b29b      	uxth	r3, r3
	}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3714      	adds	r7, #20
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d102      	bne.n	800eb6c <uxTaskGetStackHighWaterMark+0x14>
 800eb66:	4b09      	ldr	r3, [pc, #36]	@ (800eb8c <uxTaskGetStackHighWaterMark+0x34>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	e000      	b.n	800eb6e <uxTaskGetStackHighWaterMark+0x16>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb74:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800eb76:	6938      	ldr	r0, [r7, #16]
 800eb78:	f7ff ffd2 	bl	800eb20 <prvTaskCheckFreeStackSpace>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800eb80:	68fb      	ldr	r3, [r7, #12]
	}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3718      	adds	r7, #24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20000f88 	.word	0x20000f88

0800eb90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3354      	adds	r3, #84	@ 0x54
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f003 fc37 	bl	8012410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d108      	bne.n	800ebbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f001 faa1 	bl	80100f8 <vPortFree>
				vPortFree( pxTCB );
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f001 fa9e 	bl	80100f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebbc:	e019      	b.n	800ebf2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d103      	bne.n	800ebd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 fa95 	bl	80100f8 <vPortFree>
	}
 800ebce:	e010      	b.n	800ebf2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d00b      	beq.n	800ebf2 <prvDeleteTCB+0x62>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	60fb      	str	r3, [r7, #12]
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	e7fd      	b.n	800ebee <prvDeleteTCB+0x5e>
	}
 800ebf2:	bf00      	nop
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec02:	4b0c      	ldr	r3, [pc, #48]	@ (800ec34 <prvResetNextTaskUnblockTime+0x38>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d104      	bne.n	800ec16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec38 <prvResetNextTaskUnblockTime+0x3c>)
 800ec0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec14:	e008      	b.n	800ec28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec16:	4b07      	ldr	r3, [pc, #28]	@ (800ec34 <prvResetNextTaskUnblockTime+0x38>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	4a04      	ldr	r2, [pc, #16]	@ (800ec38 <prvResetNextTaskUnblockTime+0x3c>)
 800ec26:	6013      	str	r3, [r2, #0]
}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr
 800ec34:	20001414 	.word	0x20001414
 800ec38:	2000147c 	.word	0x2000147c

0800ec3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec42:	4b0b      	ldr	r3, [pc, #44]	@ (800ec70 <xTaskGetSchedulerState+0x34>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d102      	bne.n	800ec50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	607b      	str	r3, [r7, #4]
 800ec4e:	e008      	b.n	800ec62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec50:	4b08      	ldr	r3, [pc, #32]	@ (800ec74 <xTaskGetSchedulerState+0x38>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d102      	bne.n	800ec5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec58:	2302      	movs	r3, #2
 800ec5a:	607b      	str	r3, [r7, #4]
 800ec5c:	e001      	b.n	800ec62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec62:	687b      	ldr	r3, [r7, #4]
	}
 800ec64:	4618      	mov	r0, r3
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	20001468 	.word	0x20001468
 800ec74:	20001484 	.word	0x20001484

0800ec78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec84:	2300      	movs	r3, #0
 800ec86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d051      	beq.n	800ed32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec92:	4b2a      	ldr	r3, [pc, #168]	@ (800ed3c <xTaskPriorityInherit+0xc4>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d241      	bcs.n	800ed20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	db06      	blt.n	800ecb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca4:	4b25      	ldr	r3, [pc, #148]	@ (800ed3c <xTaskPriorityInherit+0xc4>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6959      	ldr	r1, [r3, #20]
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4a1f      	ldr	r2, [pc, #124]	@ (800ed40 <xTaskPriorityInherit+0xc8>)
 800ecc4:	4413      	add	r3, r2
 800ecc6:	4299      	cmp	r1, r3
 800ecc8:	d122      	bne.n	800ed10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fd8a 	bl	800c7e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecd4:	4b19      	ldr	r3, [pc, #100]	@ (800ed3c <xTaskPriorityInherit+0xc4>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece2:	4b18      	ldr	r3, [pc, #96]	@ (800ed44 <xTaskPriorityInherit+0xcc>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d903      	bls.n	800ecf2 <xTaskPriorityInherit+0x7a>
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecee:	4a15      	ldr	r2, [pc, #84]	@ (800ed44 <xTaskPriorityInherit+0xcc>)
 800ecf0:	6013      	str	r3, [r2, #0]
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4a10      	ldr	r2, [pc, #64]	@ (800ed40 <xTaskPriorityInherit+0xc8>)
 800ed00:	441a      	add	r2, r3
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	3304      	adds	r3, #4
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7fd fd10 	bl	800c72e <vListInsertEnd>
 800ed0e:	e004      	b.n	800ed1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed10:	4b0a      	ldr	r3, [pc, #40]	@ (800ed3c <xTaskPriorityInherit+0xc4>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	60fb      	str	r3, [r7, #12]
 800ed1e:	e008      	b.n	800ed32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed24:	4b05      	ldr	r3, [pc, #20]	@ (800ed3c <xTaskPriorityInherit+0xc4>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d201      	bcs.n	800ed32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed32:	68fb      	ldr	r3, [r7, #12]
	}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20000f88 	.word	0x20000f88
 800ed40:	20000f8c 	.word	0x20000f8c
 800ed44:	20001464 	.word	0x20001464

0800ed48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed54:	2300      	movs	r3, #0
 800ed56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d058      	beq.n	800ee10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed5e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee1c <xTaskPriorityDisinherit+0xd4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d00b      	beq.n	800ed80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	60fb      	str	r3, [r7, #12]
}
 800ed7a:	bf00      	nop
 800ed7c:	bf00      	nop
 800ed7e:	e7fd      	b.n	800ed7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10b      	bne.n	800eda0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	60bb      	str	r3, [r7, #8]
}
 800ed9a:	bf00      	nop
 800ed9c:	bf00      	nop
 800ed9e:	e7fd      	b.n	800ed9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eda4:	1e5a      	subs	r2, r3, #1
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d02c      	beq.n	800ee10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d128      	bne.n	800ee10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	3304      	adds	r3, #4
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fd fd10 	bl	800c7e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ede0:	4b0f      	ldr	r3, [pc, #60]	@ (800ee20 <xTaskPriorityDisinherit+0xd8>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d903      	bls.n	800edf0 <xTaskPriorityDisinherit+0xa8>
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edec:	4a0c      	ldr	r2, [pc, #48]	@ (800ee20 <xTaskPriorityDisinherit+0xd8>)
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edf4:	4613      	mov	r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	4413      	add	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4a09      	ldr	r2, [pc, #36]	@ (800ee24 <xTaskPriorityDisinherit+0xdc>)
 800edfe:	441a      	add	r2, r3
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	3304      	adds	r3, #4
 800ee04:	4619      	mov	r1, r3
 800ee06:	4610      	mov	r0, r2
 800ee08:	f7fd fc91 	bl	800c72e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee10:	697b      	ldr	r3, [r7, #20]
	}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000f88 	.word	0x20000f88
 800ee20:	20001464 	.word	0x20001464
 800ee24:	20000f8c 	.word	0x20000f8c

0800ee28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b088      	sub	sp, #32
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee36:	2301      	movs	r3, #1
 800ee38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d06c      	beq.n	800ef1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10b      	bne.n	800ee60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	60fb      	str	r3, [r7, #12]
}
 800ee5a:	bf00      	nop
 800ee5c:	bf00      	nop
 800ee5e:	e7fd      	b.n	800ee5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d902      	bls.n	800ee70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	61fb      	str	r3, [r7, #28]
 800ee6e:	e002      	b.n	800ee76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d04c      	beq.n	800ef1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d147      	bne.n	800ef1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee8a:	4b26      	ldr	r3, [pc, #152]	@ (800ef24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d10b      	bne.n	800eeac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	60bb      	str	r3, [r7, #8]
}
 800eea6:	bf00      	nop
 800eea8:	bf00      	nop
 800eeaa:	e7fd      	b.n	800eea8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	699b      	ldr	r3, [r3, #24]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	db04      	blt.n	800eeca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	6959      	ldr	r1, [r3, #20]
 800eece:	693a      	ldr	r2, [r7, #16]
 800eed0:	4613      	mov	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4a13      	ldr	r2, [pc, #76]	@ (800ef28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeda:	4413      	add	r3, r2
 800eedc:	4299      	cmp	r1, r3
 800eede:	d11c      	bne.n	800ef1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	3304      	adds	r3, #4
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7fd fc7f 	bl	800c7e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeee:	4b0f      	ldr	r3, [pc, #60]	@ (800ef2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d903      	bls.n	800eefe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eefa:	4a0c      	ldr	r2, [pc, #48]	@ (800ef2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eefc:	6013      	str	r3, [r2, #0]
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef02:	4613      	mov	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	4413      	add	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4a07      	ldr	r2, [pc, #28]	@ (800ef28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef0c:	441a      	add	r2, r3
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	3304      	adds	r3, #4
 800ef12:	4619      	mov	r1, r3
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7fd fc0a 	bl	800c72e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef1a:	bf00      	nop
 800ef1c:	3720      	adds	r7, #32
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	20000f88 	.word	0x20000f88
 800ef28:	20000f8c 	.word	0x20000f8c
 800ef2c:	20001464 	.word	0x20001464

0800ef30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef36:	4b09      	ldr	r3, [pc, #36]	@ (800ef5c <uxTaskResetEventItemValue+0x2c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef3e:	4b07      	ldr	r3, [pc, #28]	@ (800ef5c <uxTaskResetEventItemValue+0x2c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef44:	4b05      	ldr	r3, [pc, #20]	@ (800ef5c <uxTaskResetEventItemValue+0x2c>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ef4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef4e:	687b      	ldr	r3, [r7, #4]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	20000f88 	.word	0x20000f88

0800ef60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef60:	b480      	push	{r7}
 800ef62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef64:	4b07      	ldr	r3, [pc, #28]	@ (800ef84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef6c:	4b05      	ldr	r3, [pc, #20]	@ (800ef84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef72:	3201      	adds	r2, #1
 800ef74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef76:	4b03      	ldr	r3, [pc, #12]	@ (800ef84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef78:	681b      	ldr	r3, [r3, #0]
	}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	20000f88 	.word	0x20000f88

0800ef88 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef92:	f000 fec1 	bl	800fd18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef96:	4b20      	ldr	r3, [pc, #128]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d113      	bne.n	800efca <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800efa2:	4b1d      	ldr	r3, [pc, #116]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00b      	beq.n	800efca <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efb2:	2101      	movs	r1, #1
 800efb4:	6838      	ldr	r0, [r7, #0]
 800efb6:	f000 f955 	bl	800f264 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800efba:	4b18      	ldr	r3, [pc, #96]	@ (800f01c <ulTaskNotifyTake+0x94>)
 800efbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efca:	f000 fed7 	bl	800fd7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efce:	f000 fea3 	bl	800fd18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800efd2:	4b11      	ldr	r3, [pc, #68]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efda:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00e      	beq.n	800f000 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d005      	beq.n	800eff4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efe8:	4b0b      	ldr	r3, [pc, #44]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2200      	movs	r2, #0
 800efee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800eff2:	e005      	b.n	800f000 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800eff4:	4b08      	ldr	r3, [pc, #32]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	3a01      	subs	r2, #1
 800effc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f000:	4b05      	ldr	r3, [pc, #20]	@ (800f018 <ulTaskNotifyTake+0x90>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f00a:	f000 feb7 	bl	800fd7c <vPortExitCritical>

		return ulReturn;
 800f00e:	68fb      	ldr	r3, [r7, #12]
	}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	20000f88 	.word	0x20000f88
 800f01c:	e000ed04 	.word	0xe000ed04

0800f020 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f02e:	f000 fe73 	bl	800fd18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f032:	4b29      	ldr	r3, [pc, #164]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d01c      	beq.n	800f07a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f040:	4b25      	ldr	r3, [pc, #148]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	43d2      	mvns	r2, r2
 800f04c:	400a      	ands	r2, r1
 800f04e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f052:	4b21      	ldr	r3, [pc, #132]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00b      	beq.n	800f07a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f062:	2101      	movs	r1, #1
 800f064:	6838      	ldr	r0, [r7, #0]
 800f066:	f000 f8fd 	bl	800f264 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f06a:	4b1c      	ldr	r3, [pc, #112]	@ (800f0dc <xTaskNotifyWait+0xbc>)
 800f06c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f07a:	f000 fe7f 	bl	800fd7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f07e:	f000 fe4b 	bl	800fd18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f088:	4b13      	ldr	r3, [pc, #76]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f094:	4b10      	ldr	r3, [pc, #64]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d002      	beq.n	800f0a8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	617b      	str	r3, [r7, #20]
 800f0a6:	e00a      	b.n	800f0be <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	43d2      	mvns	r2, r2
 800f0b4:	400a      	ands	r2, r1
 800f0b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0be:	4b06      	ldr	r3, [pc, #24]	@ (800f0d8 <xTaskNotifyWait+0xb8>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f0c8:	f000 fe58 	bl	800fd7c <vPortExitCritical>

		return xReturn;
 800f0cc:	697b      	ldr	r3, [r7, #20]
	}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	20000f88 	.word	0x20000f88
 800f0dc:	e000ed04 	.word	0xe000ed04

0800f0e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08a      	sub	sp, #40	@ 0x28
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	603b      	str	r3, [r7, #0]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10b      	bne.n	800f112 <xTaskGenericNotify+0x32>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	61bb      	str	r3, [r7, #24]
}
 800f10c:	bf00      	nop
 800f10e:	bf00      	nop
 800f110:	e7fd      	b.n	800f10e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f116:	f000 fdff 	bl	800fd18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d004      	beq.n	800f12a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f120:	6a3b      	ldr	r3, [r7, #32]
 800f122:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f130:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	2202      	movs	r2, #2
 800f136:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f13a:	79fb      	ldrb	r3, [r7, #7]
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	d82e      	bhi.n	800f19e <xTaskGenericNotify+0xbe>
 800f140:	a201      	add	r2, pc, #4	@ (adr r2, 800f148 <xTaskGenericNotify+0x68>)
 800f142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f146:	bf00      	nop
 800f148:	0800f1c3 	.word	0x0800f1c3
 800f14c:	0800f15d 	.word	0x0800f15d
 800f150:	0800f16f 	.word	0x0800f16f
 800f154:	0800f17f 	.word	0x0800f17f
 800f158:	0800f189 	.word	0x0800f189
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	431a      	orrs	r2, r3
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f16c:	e02c      	b.n	800f1c8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f174:	1c5a      	adds	r2, r3, #1
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f17c:	e024      	b.n	800f1c8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f186:	e01f      	b.n	800f1c8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f188:	7ffb      	ldrb	r3, [r7, #31]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d004      	beq.n	800f198 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f196:	e017      	b.n	800f1c8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f198:	2300      	movs	r3, #0
 800f19a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f19c:	e014      	b.n	800f1c8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f19e:	6a3b      	ldr	r3, [r7, #32]
 800f1a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d00d      	beq.n	800f1c6 <xTaskGenericNotify+0xe6>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	617b      	str	r3, [r7, #20]
}
 800f1bc:	bf00      	nop
 800f1be:	bf00      	nop
 800f1c0:	e7fd      	b.n	800f1be <xTaskGenericNotify+0xde>
					break;
 800f1c2:	bf00      	nop
 800f1c4:	e000      	b.n	800f1c8 <xTaskGenericNotify+0xe8>

					break;
 800f1c6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f1c8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d13b      	bne.n	800f246 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fd fb08 	bl	800c7e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1dc:	4b1d      	ldr	r3, [pc, #116]	@ (800f254 <xTaskGenericNotify+0x174>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d903      	bls.n	800f1ec <xTaskGenericNotify+0x10c>
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e8:	4a1a      	ldr	r2, [pc, #104]	@ (800f254 <xTaskGenericNotify+0x174>)
 800f1ea:	6013      	str	r3, [r2, #0]
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	4a17      	ldr	r2, [pc, #92]	@ (800f258 <xTaskGenericNotify+0x178>)
 800f1fa:	441a      	add	r2, r3
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4619      	mov	r1, r3
 800f202:	4610      	mov	r0, r2
 800f204:	f7fd fa93 	bl	800c72e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00b      	beq.n	800f228 <xTaskGenericNotify+0x148>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	613b      	str	r3, [r7, #16]
}
 800f222:	bf00      	nop
 800f224:	bf00      	nop
 800f226:	e7fd      	b.n	800f224 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22c:	4b0b      	ldr	r3, [pc, #44]	@ (800f25c <xTaskGenericNotify+0x17c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f232:	429a      	cmp	r2, r3
 800f234:	d907      	bls.n	800f246 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f236:	4b0a      	ldr	r3, [pc, #40]	@ (800f260 <xTaskGenericNotify+0x180>)
 800f238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f246:	f000 fd99 	bl	800fd7c <vPortExitCritical>

		return xReturn;
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3728      	adds	r7, #40	@ 0x28
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20001464 	.word	0x20001464
 800f258:	20000f8c 	.word	0x20000f8c
 800f25c:	20000f88 	.word	0x20000f88
 800f260:	e000ed04 	.word	0xe000ed04

0800f264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f26e:	4b21      	ldr	r3, [pc, #132]	@ (800f2f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f274:	4b20      	ldr	r3, [pc, #128]	@ (800f2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	3304      	adds	r3, #4
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fd fab4 	bl	800c7e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f286:	d10a      	bne.n	800f29e <prvAddCurrentTaskToDelayedList+0x3a>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d007      	beq.n	800f29e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f28e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3304      	adds	r3, #4
 800f294:	4619      	mov	r1, r3
 800f296:	4819      	ldr	r0, [pc, #100]	@ (800f2fc <prvAddCurrentTaskToDelayedList+0x98>)
 800f298:	f7fd fa49 	bl	800c72e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f29c:	e026      	b.n	800f2ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f2a6:	4b14      	ldr	r3, [pc, #80]	@ (800f2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d209      	bcs.n	800f2ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2b6:	4b12      	ldr	r3, [pc, #72]	@ (800f300 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	f7fd fa57 	bl	800c776 <vListInsert>
}
 800f2c8:	e010      	b.n	800f2ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f304 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	f7fd fa4d 	bl	800c776 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d202      	bcs.n	800f2ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2e6:	4a08      	ldr	r2, [pc, #32]	@ (800f308 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	6013      	str	r3, [r2, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	20001460 	.word	0x20001460
 800f2f8:	20000f88 	.word	0x20000f88
 800f2fc:	20001448 	.word	0x20001448
 800f300:	20001418 	.word	0x20001418
 800f304:	20001414 	.word	0x20001414
 800f308:	2000147c 	.word	0x2000147c

0800f30c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	@ 0x28
 800f310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f312:	2300      	movs	r3, #0
 800f314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f316:	f000 fb71 	bl	800f9fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f31a:	4b1d      	ldr	r3, [pc, #116]	@ (800f390 <xTimerCreateTimerTask+0x84>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d021      	beq.n	800f366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f32a:	1d3a      	adds	r2, r7, #4
 800f32c:	f107 0108 	add.w	r1, r7, #8
 800f330:	f107 030c 	add.w	r3, r7, #12
 800f334:	4618      	mov	r0, r3
 800f336:	f7fc fff7 	bl	800c328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f33a:	6879      	ldr	r1, [r7, #4]
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	9202      	str	r2, [sp, #8]
 800f342:	9301      	str	r3, [sp, #4]
 800f344:	2302      	movs	r3, #2
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	2300      	movs	r3, #0
 800f34a:	460a      	mov	r2, r1
 800f34c:	4911      	ldr	r1, [pc, #68]	@ (800f394 <xTimerCreateTimerTask+0x88>)
 800f34e:	4812      	ldr	r0, [pc, #72]	@ (800f398 <xTimerCreateTimerTask+0x8c>)
 800f350:	f7fe f986 	bl	800d660 <xTaskCreateStatic>
 800f354:	4603      	mov	r3, r0
 800f356:	4a11      	ldr	r2, [pc, #68]	@ (800f39c <xTimerCreateTimerTask+0x90>)
 800f358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f35a:	4b10      	ldr	r3, [pc, #64]	@ (800f39c <xTimerCreateTimerTask+0x90>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f362:	2301      	movs	r3, #1
 800f364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10b      	bne.n	800f384 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	613b      	str	r3, [r7, #16]
}
 800f37e:	bf00      	nop
 800f380:	bf00      	nop
 800f382:	e7fd      	b.n	800f380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f384:	697b      	ldr	r3, [r7, #20]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3718      	adds	r7, #24
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	200014b8 	.word	0x200014b8
 800f394:	08015714 	.word	0x08015714
 800f398:	0800f595 	.word	0x0800f595
 800f39c:	200014bc 	.word	0x200014bc

0800f3a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b088      	sub	sp, #32
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f3ae:	202c      	movs	r0, #44	@ 0x2c
 800f3b0:	f000 fdd4 	bl	800ff5c <pvPortMalloc>
 800f3b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00d      	beq.n	800f3d8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	9301      	str	r3, [sp, #4]
 800f3c8:	6a3b      	ldr	r3, [r7, #32]
 800f3ca:	9300      	str	r3, [sp, #0]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 f805 	bl	800f3e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3d8:	697b      	ldr	r3, [r7, #20]
	}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b086      	sub	sp, #24
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	60f8      	str	r0, [r7, #12]
 800f3ea:	60b9      	str	r1, [r7, #8]
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	617b      	str	r3, [r7, #20]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f410:	2b00      	cmp	r3, #0
 800f412:	d01e      	beq.n	800f452 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f414:	f000 faf2 	bl	800f9fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	683a      	ldr	r2, [r7, #0]
 800f428:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42c:	6a3a      	ldr	r2, [r7, #32]
 800f42e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	3304      	adds	r3, #4
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd f96d 	bl	800c714 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d008      	beq.n	800f452 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f446:	f043 0304 	orr.w	r3, r3, #4
 800f44a:	b2da      	uxtb	r2, r3
 800f44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f452:	bf00      	nop
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
	...

0800f45c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08a      	sub	sp, #40	@ 0x28
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
 800f468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f46a:	2300      	movs	r3, #0
 800f46c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10b      	bne.n	800f48c <xTimerGenericCommand+0x30>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	623b      	str	r3, [r7, #32]
}
 800f486:	bf00      	nop
 800f488:	bf00      	nop
 800f48a:	e7fd      	b.n	800f488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f48c:	4b19      	ldr	r3, [pc, #100]	@ (800f4f4 <xTimerGenericCommand+0x98>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d02a      	beq.n	800f4ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2b05      	cmp	r3, #5
 800f4a4:	dc18      	bgt.n	800f4d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4a6:	f7ff fbc9 	bl	800ec3c <xTaskGetSchedulerState>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d109      	bne.n	800f4c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4b0:	4b10      	ldr	r3, [pc, #64]	@ (800f4f4 <xTimerGenericCommand+0x98>)
 800f4b2:	6818      	ldr	r0, [r3, #0]
 800f4b4:	f107 0110 	add.w	r1, r7, #16
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4bc:	f7fd fb36 	bl	800cb2c <xQueueGenericSend>
 800f4c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4c2:	e012      	b.n	800f4ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f4 <xTimerGenericCommand+0x98>)
 800f4c6:	6818      	ldr	r0, [r3, #0]
 800f4c8:	f107 0110 	add.w	r1, r7, #16
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f7fd fb2c 	bl	800cb2c <xQueueGenericSend>
 800f4d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4d6:	e008      	b.n	800f4ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4d8:	4b06      	ldr	r3, [pc, #24]	@ (800f4f4 <xTimerGenericCommand+0x98>)
 800f4da:	6818      	ldr	r0, [r3, #0]
 800f4dc:	f107 0110 	add.w	r1, r7, #16
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	683a      	ldr	r2, [r7, #0]
 800f4e4:	f7fd fc24 	bl	800cd30 <xQueueGenericSendFromISR>
 800f4e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3728      	adds	r7, #40	@ 0x28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	200014b8 	.word	0x200014b8

0800f4f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b088      	sub	sp, #32
 800f4fc:	af02      	add	r7, sp, #8
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f502:	4b23      	ldr	r3, [pc, #140]	@ (800f590 <prvProcessExpiredTimer+0x98>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	3304      	adds	r3, #4
 800f510:	4618      	mov	r0, r3
 800f512:	f7fd f969 	bl	800c7e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d023      	beq.n	800f56c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	699a      	ldr	r2, [r3, #24]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	18d1      	adds	r1, r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	6978      	ldr	r0, [r7, #20]
 800f532:	f000 f8d5 	bl	800f6e0 <prvInsertTimerInActiveList>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d020      	beq.n	800f57e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f53c:	2300      	movs	r3, #0
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	2300      	movs	r3, #0
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	2100      	movs	r1, #0
 800f546:	6978      	ldr	r0, [r7, #20]
 800f548:	f7ff ff88 	bl	800f45c <xTimerGenericCommand>
 800f54c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d114      	bne.n	800f57e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	60fb      	str	r3, [r7, #12]
}
 800f566:	bf00      	nop
 800f568:	bf00      	nop
 800f56a:	e7fd      	b.n	800f568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f572:	f023 0301 	bic.w	r3, r3, #1
 800f576:	b2da      	uxtb	r2, r3
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	6978      	ldr	r0, [r7, #20]
 800f584:	4798      	blx	r3
}
 800f586:	bf00      	nop
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	200014b0 	.word	0x200014b0

0800f594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f59c:	f107 0308 	add.w	r3, r7, #8
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 f859 	bl	800f658 <prvGetNextExpireTime>
 800f5a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f000 f805 	bl	800f5bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5b2:	f000 f8d7 	bl	800f764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5b6:	bf00      	nop
 800f5b8:	e7f0      	b.n	800f59c <prvTimerTask+0x8>
	...

0800f5bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5c6:	f7fe fd31 	bl	800e02c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5ca:	f107 0308 	add.w	r3, r7, #8
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 f866 	bl	800f6a0 <prvSampleTimeNow>
 800f5d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d130      	bne.n	800f63e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10a      	bne.n	800f5f8 <prvProcessTimerOrBlockTask+0x3c>
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d806      	bhi.n	800f5f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5ea:	f7fe fd2d 	bl	800e048 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5ee:	68f9      	ldr	r1, [r7, #12]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ff81 	bl	800f4f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5f6:	e024      	b.n	800f642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d008      	beq.n	800f610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5fe:	4b13      	ldr	r3, [pc, #76]	@ (800f64c <prvProcessTimerOrBlockTask+0x90>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <prvProcessTimerOrBlockTask+0x50>
 800f608:	2301      	movs	r3, #1
 800f60a:	e000      	b.n	800f60e <prvProcessTimerOrBlockTask+0x52>
 800f60c:	2300      	movs	r3, #0
 800f60e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f610:	4b0f      	ldr	r3, [pc, #60]	@ (800f650 <prvProcessTimerOrBlockTask+0x94>)
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	4619      	mov	r1, r3
 800f61e:	f7fd ffeb 	bl	800d5f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f622:	f7fe fd11 	bl	800e048 <xTaskResumeAll>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10a      	bne.n	800f642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f62c:	4b09      	ldr	r3, [pc, #36]	@ (800f654 <prvProcessTimerOrBlockTask+0x98>)
 800f62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	f3bf 8f6f 	isb	sy
}
 800f63c:	e001      	b.n	800f642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f63e:	f7fe fd03 	bl	800e048 <xTaskResumeAll>
}
 800f642:	bf00      	nop
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	200014b4 	.word	0x200014b4
 800f650:	200014b8 	.word	0x200014b8
 800f654:	e000ed04 	.word	0xe000ed04

0800f658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f660:	4b0e      	ldr	r3, [pc, #56]	@ (800f69c <prvGetNextExpireTime+0x44>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <prvGetNextExpireTime+0x16>
 800f66a:	2201      	movs	r2, #1
 800f66c:	e000      	b.n	800f670 <prvGetNextExpireTime+0x18>
 800f66e:	2200      	movs	r2, #0
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d105      	bne.n	800f688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f67c:	4b07      	ldr	r3, [pc, #28]	@ (800f69c <prvGetNextExpireTime+0x44>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	60fb      	str	r3, [r7, #12]
 800f686:	e001      	b.n	800f68c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f688:	2300      	movs	r3, #0
 800f68a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f68c:	68fb      	ldr	r3, [r7, #12]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	200014b0 	.word	0x200014b0

0800f6a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6a8:	f7fe fd6c 	bl	800e184 <xTaskGetTickCount>
 800f6ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800f6dc <prvSampleTimeNow+0x3c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d205      	bcs.n	800f6c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6b8:	f000 f93a 	bl	800f930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2201      	movs	r2, #1
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	e002      	b.n	800f6ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6ca:	4a04      	ldr	r2, [pc, #16]	@ (800f6dc <prvSampleTimeNow+0x3c>)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	200014c0 	.word	0x200014c0

0800f6e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	429a      	cmp	r2, r3
 800f704:	d812      	bhi.n	800f72c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	429a      	cmp	r2, r3
 800f712:	d302      	bcc.n	800f71a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f714:	2301      	movs	r3, #1
 800f716:	617b      	str	r3, [r7, #20]
 800f718:	e01b      	b.n	800f752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f71a:	4b10      	ldr	r3, [pc, #64]	@ (800f75c <prvInsertTimerInActiveList+0x7c>)
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3304      	adds	r3, #4
 800f722:	4619      	mov	r1, r3
 800f724:	4610      	mov	r0, r2
 800f726:	f7fd f826 	bl	800c776 <vListInsert>
 800f72a:	e012      	b.n	800f752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d206      	bcs.n	800f742 <prvInsertTimerInActiveList+0x62>
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d302      	bcc.n	800f742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f73c:	2301      	movs	r3, #1
 800f73e:	617b      	str	r3, [r7, #20]
 800f740:	e007      	b.n	800f752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f742:	4b07      	ldr	r3, [pc, #28]	@ (800f760 <prvInsertTimerInActiveList+0x80>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3304      	adds	r3, #4
 800f74a:	4619      	mov	r1, r3
 800f74c:	4610      	mov	r0, r2
 800f74e:	f7fd f812 	bl	800c776 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f752:	697b      	ldr	r3, [r7, #20]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	200014b4 	.word	0x200014b4
 800f760:	200014b0 	.word	0x200014b0

0800f764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b08e      	sub	sp, #56	@ 0x38
 800f768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f76a:	e0ce      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	da19      	bge.n	800f7a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f772:	1d3b      	adds	r3, r7, #4
 800f774:	3304      	adds	r3, #4
 800f776:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10b      	bne.n	800f796 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	61fb      	str	r3, [r7, #28]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f79c:	6850      	ldr	r0, [r2, #4]
 800f79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7a0:	6892      	ldr	r2, [r2, #8]
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f2c0 80ae 	blt.w	800f90a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d004      	beq.n	800f7c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7bc:	3304      	adds	r3, #4
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fd f812 	bl	800c7e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c4:	463b      	mov	r3, r7
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7ff ff6a 	bl	800f6a0 <prvSampleTimeNow>
 800f7cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2b09      	cmp	r3, #9
 800f7d2:	f200 8097 	bhi.w	800f904 <prvProcessReceivedCommands+0x1a0>
 800f7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7dc <prvProcessReceivedCommands+0x78>)
 800f7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7dc:	0800f805 	.word	0x0800f805
 800f7e0:	0800f805 	.word	0x0800f805
 800f7e4:	0800f805 	.word	0x0800f805
 800f7e8:	0800f87b 	.word	0x0800f87b
 800f7ec:	0800f88f 	.word	0x0800f88f
 800f7f0:	0800f8db 	.word	0x0800f8db
 800f7f4:	0800f805 	.word	0x0800f805
 800f7f8:	0800f805 	.word	0x0800f805
 800f7fc:	0800f87b 	.word	0x0800f87b
 800f800:	0800f88f 	.word	0x0800f88f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f80a:	f043 0301 	orr.w	r3, r3, #1
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	18d1      	adds	r1, r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f824:	f7ff ff5c 	bl	800f6e0 <prvInsertTimerInActiveList>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d06c      	beq.n	800f908 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f83c:	f003 0304 	and.w	r3, r3, #4
 800f840:	2b00      	cmp	r3, #0
 800f842:	d061      	beq.n	800f908 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	441a      	add	r2, r3
 800f84c:	2300      	movs	r3, #0
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	2300      	movs	r3, #0
 800f852:	2100      	movs	r1, #0
 800f854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f856:	f7ff fe01 	bl	800f45c <xTimerGenericCommand>
 800f85a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d152      	bne.n	800f908 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	61bb      	str	r3, [r7, #24]
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop
 800f878:	e7fd      	b.n	800f876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f880:	f023 0301 	bic.w	r3, r3, #1
 800f884:	b2da      	uxtb	r2, r3
 800f886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f88c:	e03d      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f894:	f043 0301 	orr.w	r3, r3, #1
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10b      	bne.n	800f8c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	617b      	str	r3, [r7, #20]
}
 800f8c0:	bf00      	nop
 800f8c2:	bf00      	nop
 800f8c4:	e7fd      	b.n	800f8c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c8:	699a      	ldr	r2, [r3, #24]
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8cc:	18d1      	adds	r1, r2, r3
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8d4:	f7ff ff04 	bl	800f6e0 <prvInsertTimerInActiveList>
					break;
 800f8d8:	e017      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8e0:	f003 0302 	and.w	r3, r3, #2
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f8e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ea:	f000 fc05 	bl	80100f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8ee:	e00c      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8f6:	f023 0301 	bic.w	r3, r3, #1
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f902:	e002      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f904:	bf00      	nop
 800f906:	e000      	b.n	800f90a <prvProcessReceivedCommands+0x1a6>
					break;
 800f908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f90a:	4b08      	ldr	r3, [pc, #32]	@ (800f92c <prvProcessReceivedCommands+0x1c8>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	1d39      	adds	r1, r7, #4
 800f910:	2200      	movs	r2, #0
 800f912:	4618      	mov	r0, r3
 800f914:	f7fd faaa 	bl	800ce6c <xQueueReceive>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f47f af26 	bne.w	800f76c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f920:	bf00      	nop
 800f922:	bf00      	nop
 800f924:	3730      	adds	r7, #48	@ 0x30
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200014b8 	.word	0x200014b8

0800f930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f936:	e049      	b.n	800f9cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f938:	4b2e      	ldr	r3, [pc, #184]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f942:	4b2c      	ldr	r3, [pc, #176]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	3304      	adds	r3, #4
 800f950:	4618      	mov	r0, r3
 800f952:	f7fc ff49 	bl	800c7e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f964:	f003 0304 	and.w	r3, r3, #4
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d02f      	beq.n	800f9cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	4413      	add	r3, r2
 800f974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f976:	68ba      	ldr	r2, [r7, #8]
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d90e      	bls.n	800f99c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f98a:	4b1a      	ldr	r3, [pc, #104]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3304      	adds	r3, #4
 800f992:	4619      	mov	r1, r3
 800f994:	4610      	mov	r0, r2
 800f996:	f7fc feee 	bl	800c776 <vListInsert>
 800f99a:	e017      	b.n	800f9cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f99c:	2300      	movs	r3, #0
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f7ff fd58 	bl	800f45c <xTimerGenericCommand>
 800f9ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d10b      	bne.n	800f9cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	603b      	str	r3, [r7, #0]
}
 800f9c6:	bf00      	nop
 800f9c8:	bf00      	nop
 800f9ca:	e7fd      	b.n	800f9c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9cc:	4b09      	ldr	r3, [pc, #36]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1b0      	bne.n	800f938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9d6:	4b07      	ldr	r3, [pc, #28]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9dc:	4b06      	ldr	r3, [pc, #24]	@ (800f9f8 <prvSwitchTimerLists+0xc8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a04      	ldr	r2, [pc, #16]	@ (800f9f4 <prvSwitchTimerLists+0xc4>)
 800f9e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9e4:	4a04      	ldr	r2, [pc, #16]	@ (800f9f8 <prvSwitchTimerLists+0xc8>)
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	6013      	str	r3, [r2, #0]
}
 800f9ea:	bf00      	nop
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	200014b0 	.word	0x200014b0
 800f9f8:	200014b4 	.word	0x200014b4

0800f9fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa02:	f000 f989 	bl	800fd18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa06:	4b15      	ldr	r3, [pc, #84]	@ (800fa5c <prvCheckForValidListAndQueue+0x60>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d120      	bne.n	800fa50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa0e:	4814      	ldr	r0, [pc, #80]	@ (800fa60 <prvCheckForValidListAndQueue+0x64>)
 800fa10:	f7fc fe60 	bl	800c6d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa14:	4813      	ldr	r0, [pc, #76]	@ (800fa64 <prvCheckForValidListAndQueue+0x68>)
 800fa16:	f7fc fe5d 	bl	800c6d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa1a:	4b13      	ldr	r3, [pc, #76]	@ (800fa68 <prvCheckForValidListAndQueue+0x6c>)
 800fa1c:	4a10      	ldr	r2, [pc, #64]	@ (800fa60 <prvCheckForValidListAndQueue+0x64>)
 800fa1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa20:	4b12      	ldr	r3, [pc, #72]	@ (800fa6c <prvCheckForValidListAndQueue+0x70>)
 800fa22:	4a10      	ldr	r2, [pc, #64]	@ (800fa64 <prvCheckForValidListAndQueue+0x68>)
 800fa24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa26:	2300      	movs	r3, #0
 800fa28:	9300      	str	r3, [sp, #0]
 800fa2a:	4b11      	ldr	r3, [pc, #68]	@ (800fa70 <prvCheckForValidListAndQueue+0x74>)
 800fa2c:	4a11      	ldr	r2, [pc, #68]	@ (800fa74 <prvCheckForValidListAndQueue+0x78>)
 800fa2e:	2110      	movs	r1, #16
 800fa30:	200a      	movs	r0, #10
 800fa32:	f7fc ff6d 	bl	800c910 <xQueueGenericCreateStatic>
 800fa36:	4603      	mov	r3, r0
 800fa38:	4a08      	ldr	r2, [pc, #32]	@ (800fa5c <prvCheckForValidListAndQueue+0x60>)
 800fa3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa3c:	4b07      	ldr	r3, [pc, #28]	@ (800fa5c <prvCheckForValidListAndQueue+0x60>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d005      	beq.n	800fa50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa44:	4b05      	ldr	r3, [pc, #20]	@ (800fa5c <prvCheckForValidListAndQueue+0x60>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	490b      	ldr	r1, [pc, #44]	@ (800fa78 <prvCheckForValidListAndQueue+0x7c>)
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fd fdaa 	bl	800d5a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa50:	f000 f994 	bl	800fd7c <vPortExitCritical>
}
 800fa54:	bf00      	nop
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	200014b8 	.word	0x200014b8
 800fa60:	20001488 	.word	0x20001488
 800fa64:	2000149c 	.word	0x2000149c
 800fa68:	200014b0 	.word	0x200014b0
 800fa6c:	200014b4 	.word	0x200014b4
 800fa70:	20001564 	.word	0x20001564
 800fa74:	200014c4 	.word	0x200014c4
 800fa78:	0801571c 	.word	0x0801571c

0800fa7c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08a      	sub	sp, #40	@ 0x28
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fa8a:	f06f 0301 	mvn.w	r3, #1
 800fa8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa9c:	4b06      	ldr	r3, [pc, #24]	@ (800fab8 <xTimerPendFunctionCallFromISR+0x3c>)
 800fa9e:	6818      	ldr	r0, [r3, #0]
 800faa0:	f107 0114 	add.w	r1, r7, #20
 800faa4:	2300      	movs	r3, #0
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	f7fd f942 	bl	800cd30 <xQueueGenericSendFromISR>
 800faac:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800faae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3728      	adds	r7, #40	@ 0x28
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	200014b8 	.word	0x200014b8

0800fabc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	3b04      	subs	r3, #4
 800facc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3b04      	subs	r3, #4
 800fada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	f023 0201 	bic.w	r2, r3, #1
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	3b04      	subs	r3, #4
 800faea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faec:	4a0c      	ldr	r2, [pc, #48]	@ (800fb20 <pxPortInitialiseStack+0x64>)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3b14      	subs	r3, #20
 800faf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3b04      	subs	r3, #4
 800fb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f06f 0202 	mvn.w	r2, #2
 800fb0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3b20      	subs	r3, #32
 800fb10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb12:	68fb      	ldr	r3, [r7, #12]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	0800fb25 	.word	0x0800fb25

0800fb24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb2e:	4b13      	ldr	r3, [pc, #76]	@ (800fb7c <prvTaskExitError+0x58>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb36:	d00b      	beq.n	800fb50 <prvTaskExitError+0x2c>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	60fb      	str	r3, [r7, #12]
}
 800fb4a:	bf00      	nop
 800fb4c:	bf00      	nop
 800fb4e:	e7fd      	b.n	800fb4c <prvTaskExitError+0x28>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	60bb      	str	r3, [r7, #8]
}
 800fb62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb64:	bf00      	nop
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d0fc      	beq.n	800fb66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb6c:	bf00      	nop
 800fb6e:	bf00      	nop
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	20000258 	.word	0x20000258

0800fb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb80:	4b07      	ldr	r3, [pc, #28]	@ (800fba0 <pxCurrentTCBConst2>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	6808      	ldr	r0, [r1, #0]
 800fb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	f380 8809 	msr	PSP, r0
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8811 	msr	BASEPRI, r0
 800fb9a:	4770      	bx	lr
 800fb9c:	f3af 8000 	nop.w

0800fba0 <pxCurrentTCBConst2>:
 800fba0:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop

0800fba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fba8:	4808      	ldr	r0, [pc, #32]	@ (800fbcc <prvPortStartFirstTask+0x24>)
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	6800      	ldr	r0, [r0, #0]
 800fbae:	f380 8808 	msr	MSP, r0
 800fbb2:	f04f 0000 	mov.w	r0, #0
 800fbb6:	f380 8814 	msr	CONTROL, r0
 800fbba:	b662      	cpsie	i
 800fbbc:	b661      	cpsie	f
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	df00      	svc	0
 800fbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbca:	bf00      	nop
 800fbcc:	e000ed08 	.word	0xe000ed08

0800fbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbd6:	4b47      	ldr	r3, [pc, #284]	@ (800fcf4 <xPortStartScheduler+0x124>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a47      	ldr	r2, [pc, #284]	@ (800fcf8 <xPortStartScheduler+0x128>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d10b      	bne.n	800fbf8 <xPortStartScheduler+0x28>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	613b      	str	r3, [r7, #16]
}
 800fbf2:	bf00      	nop
 800fbf4:	bf00      	nop
 800fbf6:	e7fd      	b.n	800fbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbf8:	4b3e      	ldr	r3, [pc, #248]	@ (800fcf4 <xPortStartScheduler+0x124>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a3f      	ldr	r2, [pc, #252]	@ (800fcfc <xPortStartScheduler+0x12c>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d10b      	bne.n	800fc1a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	60fb      	str	r3, [r7, #12]
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	e7fd      	b.n	800fc16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc1a:	4b39      	ldr	r3, [pc, #228]	@ (800fd00 <xPortStartScheduler+0x130>)
 800fc1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	22ff      	movs	r2, #255	@ 0xff
 800fc2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	4b31      	ldr	r3, [pc, #196]	@ (800fd04 <xPortStartScheduler+0x134>)
 800fc40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc42:	4b31      	ldr	r3, [pc, #196]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc44:	2207      	movs	r2, #7
 800fc46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc48:	e009      	b.n	800fc5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc4a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	4a2d      	ldr	r2, [pc, #180]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc5e:	78fb      	ldrb	r3, [r7, #3]
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc66:	2b80      	cmp	r3, #128	@ 0x80
 800fc68:	d0ef      	beq.n	800fc4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc6a:	4b27      	ldr	r3, [pc, #156]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f1c3 0307 	rsb	r3, r3, #7
 800fc72:	2b04      	cmp	r3, #4
 800fc74:	d00b      	beq.n	800fc8e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7a:	f383 8811 	msr	BASEPRI, r3
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	f3bf 8f4f 	dsb	sy
 800fc86:	60bb      	str	r3, [r7, #8]
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	e7fd      	b.n	800fc8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc8e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	021b      	lsls	r3, r3, #8
 800fc94:	4a1c      	ldr	r2, [pc, #112]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc98:	4b1b      	ldr	r3, [pc, #108]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fca0:	4a19      	ldr	r2, [pc, #100]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcac:	4b17      	ldr	r3, [pc, #92]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4a16      	ldr	r2, [pc, #88]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcb8:	4b14      	ldr	r3, [pc, #80]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a13      	ldr	r2, [pc, #76]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcc4:	f000 f8da 	bl	800fe7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	@ (800fd10 <xPortStartScheduler+0x140>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcce:	f000 f8f9 	bl	800fec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcd2:	4b10      	ldr	r3, [pc, #64]	@ (800fd14 <xPortStartScheduler+0x144>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd14 <xPortStartScheduler+0x144>)
 800fcd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcde:	f7ff ff63 	bl	800fba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fce2:	f7fe fbed 	bl	800e4c0 <vTaskSwitchContext>
	prvTaskExitError();
 800fce6:	f7ff ff1d 	bl	800fb24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	e000ed00 	.word	0xe000ed00
 800fcf8:	410fc271 	.word	0x410fc271
 800fcfc:	410fc270 	.word	0x410fc270
 800fd00:	e000e400 	.word	0xe000e400
 800fd04:	200015b4 	.word	0x200015b4
 800fd08:	200015b8 	.word	0x200015b8
 800fd0c:	e000ed20 	.word	0xe000ed20
 800fd10:	20000258 	.word	0x20000258
 800fd14:	e000ef34 	.word	0xe000ef34

0800fd18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	607b      	str	r3, [r7, #4]
}
 800fd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd32:	4b10      	ldr	r3, [pc, #64]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3301      	adds	r3, #1
 800fd38:	4a0e      	ldr	r2, [pc, #56]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d110      	bne.n	800fd66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd44:	4b0c      	ldr	r3, [pc, #48]	@ (800fd78 <vPortEnterCritical+0x60>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00b      	beq.n	800fd66 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	603b      	str	r3, [r7, #0]
}
 800fd60:	bf00      	nop
 800fd62:	bf00      	nop
 800fd64:	e7fd      	b.n	800fd62 <vPortEnterCritical+0x4a>
	}
}
 800fd66:	bf00      	nop
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	20000258 	.word	0x20000258
 800fd78:	e000ed04 	.word	0xe000ed04

0800fd7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd82:	4b12      	ldr	r3, [pc, #72]	@ (800fdcc <vPortExitCritical+0x50>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10b      	bne.n	800fda2 <vPortExitCritical+0x26>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	607b      	str	r3, [r7, #4]
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	e7fd      	b.n	800fd9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fda2:	4b0a      	ldr	r3, [pc, #40]	@ (800fdcc <vPortExitCritical+0x50>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	4a08      	ldr	r2, [pc, #32]	@ (800fdcc <vPortExitCritical+0x50>)
 800fdaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdac:	4b07      	ldr	r3, [pc, #28]	@ (800fdcc <vPortExitCritical+0x50>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d105      	bne.n	800fdc0 <vPortExitCritical+0x44>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	f383 8811 	msr	BASEPRI, r3
}
 800fdbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	20000258 	.word	0x20000258

0800fdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdd0:	f3ef 8009 	mrs	r0, PSP
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	4b15      	ldr	r3, [pc, #84]	@ (800fe30 <pxCurrentTCBConst>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	f01e 0f10 	tst.w	lr, #16
 800fde0:	bf08      	it	eq
 800fde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	6010      	str	r0, [r2, #0]
 800fdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fdf4:	f380 8811 	msr	BASEPRI, r0
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f7fe fb5e 	bl	800e4c0 <vTaskSwitchContext>
 800fe04:	f04f 0000 	mov.w	r0, #0
 800fe08:	f380 8811 	msr	BASEPRI, r0
 800fe0c:	bc09      	pop	{r0, r3}
 800fe0e:	6819      	ldr	r1, [r3, #0]
 800fe10:	6808      	ldr	r0, [r1, #0]
 800fe12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe16:	f01e 0f10 	tst.w	lr, #16
 800fe1a:	bf08      	it	eq
 800fe1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe20:	f380 8809 	msr	PSP, r0
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	f3af 8000 	nop.w

0800fe30 <pxCurrentTCBConst>:
 800fe30:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop

0800fe38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe52:	f7fe fa7b 	bl	800e34c <xTaskIncrementTick>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe5c:	4b06      	ldr	r3, [pc, #24]	@ (800fe78 <xPortSysTickHandler+0x40>)
 800fe5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	2300      	movs	r3, #0
 800fe66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	f383 8811 	msr	BASEPRI, r3
}
 800fe6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	e000ed04 	.word	0xe000ed04

0800fe7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe80:	4b0b      	ldr	r3, [pc, #44]	@ (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe86:	4b0b      	ldr	r3, [pc, #44]	@ (800feb4 <vPortSetupTimerInterrupt+0x38>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe8c:	4b0a      	ldr	r3, [pc, #40]	@ (800feb8 <vPortSetupTimerInterrupt+0x3c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a0a      	ldr	r2, [pc, #40]	@ (800febc <vPortSetupTimerInterrupt+0x40>)
 800fe92:	fba2 2303 	umull	r2, r3, r2, r3
 800fe96:	099b      	lsrs	r3, r3, #6
 800fe98:	4a09      	ldr	r2, [pc, #36]	@ (800fec0 <vPortSetupTimerInterrupt+0x44>)
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe9e:	4b04      	ldr	r3, [pc, #16]	@ (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fea0:	2207      	movs	r2, #7
 800fea2:	601a      	str	r2, [r3, #0]
}
 800fea4:	bf00      	nop
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	e000e010 	.word	0xe000e010
 800feb4:	e000e018 	.word	0xe000e018
 800feb8:	2000022c 	.word	0x2000022c
 800febc:	10624dd3 	.word	0x10624dd3
 800fec0:	e000e014 	.word	0xe000e014

0800fec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fed4 <vPortEnableVFP+0x10>
 800fec8:	6801      	ldr	r1, [r0, #0]
 800feca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fece:	6001      	str	r1, [r0, #0]
 800fed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fed2:	bf00      	nop
 800fed4:	e000ed88 	.word	0xe000ed88

0800fed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fede:	f3ef 8305 	mrs	r3, IPSR
 800fee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b0f      	cmp	r3, #15
 800fee8:	d915      	bls.n	800ff16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feea:	4a18      	ldr	r2, [pc, #96]	@ (800ff4c <vPortValidateInterruptPriority+0x74>)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fef4:	4b16      	ldr	r3, [pc, #88]	@ (800ff50 <vPortValidateInterruptPriority+0x78>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	7afa      	ldrb	r2, [r7, #11]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d20b      	bcs.n	800ff16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	607b      	str	r3, [r7, #4]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff16:	4b0f      	ldr	r3, [pc, #60]	@ (800ff54 <vPortValidateInterruptPriority+0x7c>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff58 <vPortValidateInterruptPriority+0x80>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d90b      	bls.n	800ff3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	603b      	str	r3, [r7, #0]
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	e7fd      	b.n	800ff3a <vPortValidateInterruptPriority+0x62>
	}
 800ff3e:	bf00      	nop
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	e000e3f0 	.word	0xe000e3f0
 800ff50:	200015b4 	.word	0x200015b4
 800ff54:	e000ed0c 	.word	0xe000ed0c
 800ff58:	200015b8 	.word	0x200015b8

0800ff5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b08a      	sub	sp, #40	@ 0x28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff68:	f7fe f860 	bl	800e02c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff6c:	4b5c      	ldr	r3, [pc, #368]	@ (80100e0 <pvPortMalloc+0x184>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff74:	f000 f924 	bl	80101c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff78:	4b5a      	ldr	r3, [pc, #360]	@ (80100e4 <pvPortMalloc+0x188>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f040 8095 	bne.w	80100b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d01e      	beq.n	800ffca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff8c:	2208      	movs	r2, #8
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4413      	add	r3, r2
 800ff92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f003 0307 	and.w	r3, r3, #7
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d015      	beq.n	800ffca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f023 0307 	bic.w	r3, r3, #7
 800ffa4:	3308      	adds	r3, #8
 800ffa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f003 0307 	and.w	r3, r3, #7
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00b      	beq.n	800ffca <pvPortMalloc+0x6e>
	__asm volatile
 800ffb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb6:	f383 8811 	msr	BASEPRI, r3
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	617b      	str	r3, [r7, #20]
}
 800ffc4:	bf00      	nop
 800ffc6:	bf00      	nop
 800ffc8:	e7fd      	b.n	800ffc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d06f      	beq.n	80100b0 <pvPortMalloc+0x154>
 800ffd0:	4b45      	ldr	r3, [pc, #276]	@ (80100e8 <pvPortMalloc+0x18c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d86a      	bhi.n	80100b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffda:	4b44      	ldr	r3, [pc, #272]	@ (80100ec <pvPortMalloc+0x190>)
 800ffdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffde:	4b43      	ldr	r3, [pc, #268]	@ (80100ec <pvPortMalloc+0x190>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffe4:	e004      	b.n	800fff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d903      	bls.n	8010002 <pvPortMalloc+0xa6>
 800fffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1f1      	bne.n	800ffe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010002:	4b37      	ldr	r3, [pc, #220]	@ (80100e0 <pvPortMalloc+0x184>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010008:	429a      	cmp	r2, r3
 801000a:	d051      	beq.n	80100b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2208      	movs	r2, #8
 8010012:	4413      	add	r3, r2
 8010014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801001e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	1ad2      	subs	r2, r2, r3
 8010026:	2308      	movs	r3, #8
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	429a      	cmp	r2, r3
 801002c:	d920      	bls.n	8010070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801002e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4413      	add	r3, r2
 8010034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	f003 0307 	and.w	r3, r3, #7
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00b      	beq.n	8010058 <pvPortMalloc+0xfc>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	613b      	str	r3, [r7, #16]
}
 8010052:	bf00      	nop
 8010054:	bf00      	nop
 8010056:	e7fd      	b.n	8010054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801006a:	69b8      	ldr	r0, [r7, #24]
 801006c:	f000 f90a 	bl	8010284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010070:	4b1d      	ldr	r3, [pc, #116]	@ (80100e8 <pvPortMalloc+0x18c>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	4a1b      	ldr	r2, [pc, #108]	@ (80100e8 <pvPortMalloc+0x18c>)
 801007c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801007e:	4b1a      	ldr	r3, [pc, #104]	@ (80100e8 <pvPortMalloc+0x18c>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	4b1b      	ldr	r3, [pc, #108]	@ (80100f0 <pvPortMalloc+0x194>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d203      	bcs.n	8010092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801008a:	4b17      	ldr	r3, [pc, #92]	@ (80100e8 <pvPortMalloc+0x18c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a18      	ldr	r2, [pc, #96]	@ (80100f0 <pvPortMalloc+0x194>)
 8010090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <pvPortMalloc+0x188>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	431a      	orrs	r2, r3
 801009c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100a6:	4b13      	ldr	r3, [pc, #76]	@ (80100f4 <pvPortMalloc+0x198>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3301      	adds	r3, #1
 80100ac:	4a11      	ldr	r2, [pc, #68]	@ (80100f4 <pvPortMalloc+0x198>)
 80100ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100b0:	f7fd ffca 	bl	800e048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	f003 0307 	and.w	r3, r3, #7
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00b      	beq.n	80100d6 <pvPortMalloc+0x17a>
	__asm volatile
 80100be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	60fb      	str	r3, [r7, #12]
}
 80100d0:	bf00      	nop
 80100d2:	bf00      	nop
 80100d4:	e7fd      	b.n	80100d2 <pvPortMalloc+0x176>
	return pvReturn;
 80100d6:	69fb      	ldr	r3, [r7, #28]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3728      	adds	r7, #40	@ 0x28
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	200051c4 	.word	0x200051c4
 80100e4:	200051d8 	.word	0x200051d8
 80100e8:	200051c8 	.word	0x200051c8
 80100ec:	200051bc 	.word	0x200051bc
 80100f0:	200051cc 	.word	0x200051cc
 80100f4:	200051d0 	.word	0x200051d0

080100f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d04f      	beq.n	80101aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801010a:	2308      	movs	r3, #8
 801010c:	425b      	negs	r3, r3
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	4413      	add	r3, r2
 8010112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b25      	ldr	r3, [pc, #148]	@ (80101b4 <vPortFree+0xbc>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4013      	ands	r3, r2
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10b      	bne.n	801013e <vPortFree+0x46>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	60fb      	str	r3, [r7, #12]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00b      	beq.n	801015e <vPortFree+0x66>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	60bb      	str	r3, [r7, #8]
}
 8010158:	bf00      	nop
 801015a:	bf00      	nop
 801015c:	e7fd      	b.n	801015a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	685a      	ldr	r2, [r3, #4]
 8010162:	4b14      	ldr	r3, [pc, #80]	@ (80101b4 <vPortFree+0xbc>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4013      	ands	r3, r2
 8010168:	2b00      	cmp	r3, #0
 801016a:	d01e      	beq.n	80101aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d11a      	bne.n	80101aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	685a      	ldr	r2, [r3, #4]
 8010178:	4b0e      	ldr	r3, [pc, #56]	@ (80101b4 <vPortFree+0xbc>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	43db      	mvns	r3, r3
 801017e:	401a      	ands	r2, r3
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010184:	f7fd ff52 	bl	800e02c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <vPortFree+0xc0>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4413      	add	r3, r2
 8010192:	4a09      	ldr	r2, [pc, #36]	@ (80101b8 <vPortFree+0xc0>)
 8010194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010196:	6938      	ldr	r0, [r7, #16]
 8010198:	f000 f874 	bl	8010284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801019c:	4b07      	ldr	r3, [pc, #28]	@ (80101bc <vPortFree+0xc4>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	4a06      	ldr	r2, [pc, #24]	@ (80101bc <vPortFree+0xc4>)
 80101a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101a6:	f7fd ff4f 	bl	800e048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101aa:	bf00      	nop
 80101ac:	3718      	adds	r7, #24
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	200051d8 	.word	0x200051d8
 80101b8:	200051c8 	.word	0x200051c8
 80101bc:	200051d4 	.word	0x200051d4

080101c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80101ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101cc:	4b27      	ldr	r3, [pc, #156]	@ (801026c <prvHeapInit+0xac>)
 80101ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f003 0307 	and.w	r3, r3, #7
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00c      	beq.n	80101f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	3307      	adds	r3, #7
 80101de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f023 0307 	bic.w	r3, r3, #7
 80101e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	4a1f      	ldr	r2, [pc, #124]	@ (801026c <prvHeapInit+0xac>)
 80101f0:	4413      	add	r3, r2
 80101f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010270 <prvHeapInit+0xb0>)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010270 <prvHeapInit+0xb0>)
 8010200:	2200      	movs	r2, #0
 8010202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	4413      	add	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801020c:	2208      	movs	r2, #8
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	1a9b      	subs	r3, r3, r2
 8010212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f023 0307 	bic.w	r3, r3, #7
 801021a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	4a15      	ldr	r2, [pc, #84]	@ (8010274 <prvHeapInit+0xb4>)
 8010220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010222:	4b14      	ldr	r3, [pc, #80]	@ (8010274 <prvHeapInit+0xb4>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	2200      	movs	r2, #0
 8010228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801022a:	4b12      	ldr	r3, [pc, #72]	@ (8010274 <prvHeapInit+0xb4>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	1ad2      	subs	r2, r2, r3
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010240:	4b0c      	ldr	r3, [pc, #48]	@ (8010274 <prvHeapInit+0xb4>)
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	4a0a      	ldr	r2, [pc, #40]	@ (8010278 <prvHeapInit+0xb8>)
 801024e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	4a09      	ldr	r2, [pc, #36]	@ (801027c <prvHeapInit+0xbc>)
 8010256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010258:	4b09      	ldr	r3, [pc, #36]	@ (8010280 <prvHeapInit+0xc0>)
 801025a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801025e:	601a      	str	r2, [r3, #0]
}
 8010260:	bf00      	nop
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	200015bc 	.word	0x200015bc
 8010270:	200051bc 	.word	0x200051bc
 8010274:	200051c4 	.word	0x200051c4
 8010278:	200051cc 	.word	0x200051cc
 801027c:	200051c8 	.word	0x200051c8
 8010280:	200051d8 	.word	0x200051d8

08010284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801028c:	4b28      	ldr	r3, [pc, #160]	@ (8010330 <prvInsertBlockIntoFreeList+0xac>)
 801028e:	60fb      	str	r3, [r7, #12]
 8010290:	e002      	b.n	8010298 <prvInsertBlockIntoFreeList+0x14>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	60fb      	str	r3, [r7, #12]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d8f7      	bhi.n	8010292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	4413      	add	r3, r2
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d108      	bne.n	80102c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	685a      	ldr	r2, [r3, #4]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	441a      	add	r2, r3
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	441a      	add	r2, r3
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d118      	bne.n	801030c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	4b15      	ldr	r3, [pc, #84]	@ (8010334 <prvInsertBlockIntoFreeList+0xb0>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d00d      	beq.n	8010302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685a      	ldr	r2, [r3, #4]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	441a      	add	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	601a      	str	r2, [r3, #0]
 8010300:	e008      	b.n	8010314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010302:	4b0c      	ldr	r3, [pc, #48]	@ (8010334 <prvInsertBlockIntoFreeList+0xb0>)
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	601a      	str	r2, [r3, #0]
 801030a:	e003      	b.n	8010314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	429a      	cmp	r2, r3
 801031a:	d002      	beq.n	8010322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010322:	bf00      	nop
 8010324:	3714      	adds	r7, #20
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	200051bc 	.word	0x200051bc
 8010334:	200051c4 	.word	0x200051c4

08010338 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801033c:	2201      	movs	r2, #1
 801033e:	490e      	ldr	r1, [pc, #56]	@ (8010378 <MX_USB_HOST_Init+0x40>)
 8010340:	480e      	ldr	r0, [pc, #56]	@ (801037c <MX_USB_HOST_Init+0x44>)
 8010342:	f7f9 febb 	bl	800a0bc <USBH_Init>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801034c:	f7f2 ffc6 	bl	80032dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010350:	490b      	ldr	r1, [pc, #44]	@ (8010380 <MX_USB_HOST_Init+0x48>)
 8010352:	480a      	ldr	r0, [pc, #40]	@ (801037c <MX_USB_HOST_Init+0x44>)
 8010354:	f7f9 ff62 	bl	800a21c <USBH_RegisterClass>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801035e:	f7f2 ffbd 	bl	80032dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010362:	4806      	ldr	r0, [pc, #24]	@ (801037c <MX_USB_HOST_Init+0x44>)
 8010364:	f7f9 ffe6 	bl	800a334 <USBH_Start>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801036e:	f7f2 ffb5 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010372:	bf00      	nop
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	08010385 	.word	0x08010385
 801037c:	200051dc 	.word	0x200051dc
 8010380:	20000238 	.word	0x20000238

08010384 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	3b01      	subs	r3, #1
 8010394:	2b04      	cmp	r3, #4
 8010396:	d819      	bhi.n	80103cc <USBH_UserProcess+0x48>
 8010398:	a201      	add	r2, pc, #4	@ (adr r2, 80103a0 <USBH_UserProcess+0x1c>)
 801039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039e:	bf00      	nop
 80103a0:	080103cd 	.word	0x080103cd
 80103a4:	080103bd 	.word	0x080103bd
 80103a8:	080103cd 	.word	0x080103cd
 80103ac:	080103c5 	.word	0x080103c5
 80103b0:	080103b5 	.word	0x080103b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80103b4:	4b09      	ldr	r3, [pc, #36]	@ (80103dc <USBH_UserProcess+0x58>)
 80103b6:	2203      	movs	r2, #3
 80103b8:	701a      	strb	r2, [r3, #0]
  break;
 80103ba:	e008      	b.n	80103ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80103bc:	4b07      	ldr	r3, [pc, #28]	@ (80103dc <USBH_UserProcess+0x58>)
 80103be:	2202      	movs	r2, #2
 80103c0:	701a      	strb	r2, [r3, #0]
  break;
 80103c2:	e004      	b.n	80103ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103c4:	4b05      	ldr	r3, [pc, #20]	@ (80103dc <USBH_UserProcess+0x58>)
 80103c6:	2201      	movs	r2, #1
 80103c8:	701a      	strb	r2, [r3, #0]
  break;
 80103ca:	e000      	b.n	80103ce <USBH_UserProcess+0x4a>

  default:
  break;
 80103cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103ce:	bf00      	nop
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	200055c0 	.word	0x200055c0

080103e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b08a      	sub	sp, #40	@ 0x28
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103e8:	f107 0314 	add.w	r3, r7, #20
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]
 80103f0:	605a      	str	r2, [r3, #4]
 80103f2:	609a      	str	r2, [r3, #8]
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010400:	d147      	bne.n	8010492 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010402:	2300      	movs	r3, #0
 8010404:	613b      	str	r3, [r7, #16]
 8010406:	4b25      	ldr	r3, [pc, #148]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 8010408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801040a:	4a24      	ldr	r2, [pc, #144]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 801040c:	f043 0301 	orr.w	r3, r3, #1
 8010410:	6313      	str	r3, [r2, #48]	@ 0x30
 8010412:	4b22      	ldr	r3, [pc, #136]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 8010414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	613b      	str	r3, [r7, #16]
 801041c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801041e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010424:	2300      	movs	r3, #0
 8010426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010428:	2300      	movs	r3, #0
 801042a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801042c:	f107 0314 	add.w	r3, r7, #20
 8010430:	4619      	mov	r1, r3
 8010432:	481b      	ldr	r0, [pc, #108]	@ (80104a0 <HAL_HCD_MspInit+0xc0>)
 8010434:	f7f3 fce4 	bl	8003e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010438:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801043e:	2302      	movs	r3, #2
 8010440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010442:	2300      	movs	r3, #0
 8010444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010446:	2300      	movs	r3, #0
 8010448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801044a:	230a      	movs	r3, #10
 801044c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801044e:	f107 0314 	add.w	r3, r7, #20
 8010452:	4619      	mov	r1, r3
 8010454:	4812      	ldr	r0, [pc, #72]	@ (80104a0 <HAL_HCD_MspInit+0xc0>)
 8010456:	f7f3 fcd3 	bl	8003e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801045a:	4b10      	ldr	r3, [pc, #64]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 801045c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801045e:	4a0f      	ldr	r2, [pc, #60]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 8010460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010464:	6353      	str	r3, [r2, #52]	@ 0x34
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	4b0c      	ldr	r3, [pc, #48]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 801046c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801046e:	4a0b      	ldr	r2, [pc, #44]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 8010470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010474:	6453      	str	r3, [r2, #68]	@ 0x44
 8010476:	4b09      	ldr	r3, [pc, #36]	@ (801049c <HAL_HCD_MspInit+0xbc>)
 8010478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801047a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010482:	2200      	movs	r2, #0
 8010484:	2105      	movs	r1, #5
 8010486:	2043      	movs	r0, #67	@ 0x43
 8010488:	f7f3 fbfe 	bl	8003c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801048c:	2043      	movs	r0, #67	@ 0x43
 801048e:	f7f3 fc17 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010492:	bf00      	nop
 8010494:	3728      	adds	r7, #40	@ 0x28
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	40023800 	.word	0x40023800
 80104a0:	40020000 	.word	0x40020000

080104a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fa fbef 	bl	800ac96 <USBH_LL_IncTimer>
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fa fc33 	bl	800ad3a <USBH_LL_Connect>
}
 80104d4:	bf00      	nop
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fa fc48 	bl	800ad80 <USBH_LL_Disconnect>
}
 80104f0:	bf00      	nop
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	70fb      	strb	r3, [r7, #3]
 8010504:	4613      	mov	r3, r2
 8010506:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801050e:	4618      	mov	r0, r3
 8010510:	f7fa fc7f 	bl	800ae12 <USBH_LL_NotifyURBChange>
#endif
}
 8010514:	bf00      	nop
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801052a:	4618      	mov	r0, r3
 801052c:	f7fa fbdd 	bl	800acea <USBH_LL_PortEnabled>
}
 8010530:	bf00      	nop
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010546:	4618      	mov	r0, r3
 8010548:	f7fa fbe9 	bl	800ad1e <USBH_LL_PortDisabled>
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010562:	2b01      	cmp	r3, #1
 8010564:	d12a      	bne.n	80105bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010566:	4a18      	ldr	r2, [pc, #96]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a15      	ldr	r2, [pc, #84]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010572:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010576:	4b14      	ldr	r3, [pc, #80]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010578:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801057c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801057e:	4b12      	ldr	r3, [pc, #72]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010580:	2208      	movs	r2, #8
 8010582:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010584:	4b10      	ldr	r3, [pc, #64]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010586:	2201      	movs	r2, #1
 8010588:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801058a:	4b0f      	ldr	r3, [pc, #60]	@ (80105c8 <USBH_LL_Init+0x74>)
 801058c:	2200      	movs	r2, #0
 801058e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010590:	4b0d      	ldr	r3, [pc, #52]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010592:	2202      	movs	r2, #2
 8010594:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010596:	4b0c      	ldr	r3, [pc, #48]	@ (80105c8 <USBH_LL_Init+0x74>)
 8010598:	2200      	movs	r2, #0
 801059a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801059c:	480a      	ldr	r0, [pc, #40]	@ (80105c8 <USBH_LL_Init+0x74>)
 801059e:	f7f3 fe3a 	bl	8004216 <HAL_HCD_Init>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d001      	beq.n	80105ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80105a8:	f7f2 fe98 	bl	80032dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80105ac:	4806      	ldr	r0, [pc, #24]	@ (80105c8 <USBH_LL_Init+0x74>)
 80105ae:	f7f4 fa1e 	bl	80049ee <HAL_HCD_GetCurrentFrame>
 80105b2:	4603      	mov	r3, r0
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7fa fb5e 	bl	800ac78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	200055c4 	.word	0x200055c4

080105cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7f4 f98d 	bl	8004902 <HAL_HCD_Start>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 f95c 	bl	80108ac <USBH_Get_USB_Status>
 80105f4:	4603      	mov	r3, r0
 80105f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b084      	sub	sp, #16
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801060a:	2300      	movs	r3, #0
 801060c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801060e:	2300      	movs	r3, #0
 8010610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010618:	4618      	mov	r0, r3
 801061a:	f7f4 f995 	bl	8004948 <HAL_HCD_Stop>
 801061e:	4603      	mov	r3, r0
 8010620:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010622:	7bfb      	ldrb	r3, [r7, #15]
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f941 	bl	80108ac <USBH_Get_USB_Status>
 801062a:	4603      	mov	r3, r0
 801062c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801062e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010640:	2301      	movs	r3, #1
 8010642:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801064a:	4618      	mov	r0, r3
 801064c:	f7f4 f9dd 	bl	8004a0a <HAL_HCD_GetCurrentSpeed>
 8010650:	4603      	mov	r3, r0
 8010652:	2b02      	cmp	r3, #2
 8010654:	d00c      	beq.n	8010670 <USBH_LL_GetSpeed+0x38>
 8010656:	2b02      	cmp	r3, #2
 8010658:	d80d      	bhi.n	8010676 <USBH_LL_GetSpeed+0x3e>
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <USBH_LL_GetSpeed+0x2c>
 801065e:	2b01      	cmp	r3, #1
 8010660:	d003      	beq.n	801066a <USBH_LL_GetSpeed+0x32>
 8010662:	e008      	b.n	8010676 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010664:	2300      	movs	r3, #0
 8010666:	73fb      	strb	r3, [r7, #15]
    break;
 8010668:	e008      	b.n	801067c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801066a:	2301      	movs	r3, #1
 801066c:	73fb      	strb	r3, [r7, #15]
    break;
 801066e:	e005      	b.n	801067c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010670:	2302      	movs	r3, #2
 8010672:	73fb      	strb	r3, [r7, #15]
    break;
 8010674:	e002      	b.n	801067c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010676:	2301      	movs	r3, #1
 8010678:	73fb      	strb	r3, [r7, #15]
    break;
 801067a:	bf00      	nop
  }
  return  speed;
 801067c:	7bfb      	ldrb	r3, [r7, #15]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801069c:	4618      	mov	r0, r3
 801069e:	f7f4 f970 	bl	8004982 <HAL_HCD_ResetPort>
 80106a2:	4603      	mov	r3, r0
 80106a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 f8ff 	bl	80108ac <USBH_Get_USB_Status>
 80106ae:	4603      	mov	r3, r0
 80106b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	460b      	mov	r3, r1
 80106c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106ce:	78fa      	ldrb	r2, [r7, #3]
 80106d0:	4611      	mov	r1, r2
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f4 f977 	bl	80049c6 <HAL_HCD_HC_GetXferCount>
 80106d8:	4603      	mov	r3, r0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106e2:	b590      	push	{r4, r7, lr}
 80106e4:	b089      	sub	sp, #36	@ 0x24
 80106e6:	af04      	add	r7, sp, #16
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	4608      	mov	r0, r1
 80106ec:	4611      	mov	r1, r2
 80106ee:	461a      	mov	r2, r3
 80106f0:	4603      	mov	r3, r0
 80106f2:	70fb      	strb	r3, [r7, #3]
 80106f4:	460b      	mov	r3, r1
 80106f6:	70bb      	strb	r3, [r7, #2]
 80106f8:	4613      	mov	r3, r2
 80106fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801070a:	787c      	ldrb	r4, [r7, #1]
 801070c:	78ba      	ldrb	r2, [r7, #2]
 801070e:	78f9      	ldrb	r1, [r7, #3]
 8010710:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010712:	9302      	str	r3, [sp, #8]
 8010714:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010718:	9301      	str	r3, [sp, #4]
 801071a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	4623      	mov	r3, r4
 8010722:	f7f3 fdda 	bl	80042da <HAL_HCD_HC_Init>
 8010726:	4603      	mov	r3, r0
 8010728:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f8bd 	bl	80108ac <USBH_Get_USB_Status>
 8010732:	4603      	mov	r3, r0
 8010734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010736:	7bbb      	ldrb	r3, [r7, #14]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	bd90      	pop	{r4, r7, pc}

08010740 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	460b      	mov	r3, r1
 801074a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074c:	2300      	movs	r3, #0
 801074e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801075a:	78fa      	ldrb	r2, [r7, #3]
 801075c:	4611      	mov	r1, r2
 801075e:	4618      	mov	r0, r3
 8010760:	f7f3 fe4a 	bl	80043f8 <HAL_HCD_HC_Halt>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	4618      	mov	r0, r3
 801076c:	f000 f89e 	bl	80108ac <USBH_Get_USB_Status>
 8010770:	4603      	mov	r3, r0
 8010772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010774:	7bbb      	ldrb	r3, [r7, #14]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801077e:	b590      	push	{r4, r7, lr}
 8010780:	b089      	sub	sp, #36	@ 0x24
 8010782:	af04      	add	r7, sp, #16
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	4608      	mov	r0, r1
 8010788:	4611      	mov	r1, r2
 801078a:	461a      	mov	r2, r3
 801078c:	4603      	mov	r3, r0
 801078e:	70fb      	strb	r3, [r7, #3]
 8010790:	460b      	mov	r3, r1
 8010792:	70bb      	strb	r3, [r7, #2]
 8010794:	4613      	mov	r3, r2
 8010796:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80107a6:	787c      	ldrb	r4, [r7, #1]
 80107a8:	78ba      	ldrb	r2, [r7, #2]
 80107aa:	78f9      	ldrb	r1, [r7, #3]
 80107ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107b0:	9303      	str	r3, [sp, #12]
 80107b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107b4:	9302      	str	r3, [sp, #8]
 80107b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b8:	9301      	str	r3, [sp, #4]
 80107ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	4623      	mov	r3, r4
 80107c2:	f7f3 fe3d 	bl	8004440 <HAL_HCD_HC_SubmitRequest>
 80107c6:	4603      	mov	r3, r0
 80107c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 f86d 	bl	80108ac <USBH_Get_USB_Status>
 80107d2:	4603      	mov	r3, r0
 80107d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3714      	adds	r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd90      	pop	{r4, r7, pc}

080107e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107f2:	78fa      	ldrb	r2, [r7, #3]
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7f4 f8d1 	bl	800499e <HAL_HCD_HC_GetURBState>
 80107fc:	4603      	mov	r3, r0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b082      	sub	sp, #8
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	460b      	mov	r3, r1
 8010810:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010818:	2b01      	cmp	r3, #1
 801081a:	d103      	bne.n	8010824 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801081c:	78fb      	ldrb	r3, [r7, #3]
 801081e:	4618      	mov	r0, r3
 8010820:	f000 f870 	bl	8010904 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010824:	20c8      	movs	r0, #200	@ 0xc8
 8010826:	f7f3 f953 	bl	8003ad0 <HAL_Delay>
  return USBH_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	460b      	mov	r3, r1
 801083e:	70fb      	strb	r3, [r7, #3]
 8010840:	4613      	mov	r3, r2
 8010842:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801084a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801084c:	78fb      	ldrb	r3, [r7, #3]
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	212c      	movs	r1, #44	@ 0x2c
 8010852:	fb01 f303 	mul.w	r3, r1, r3
 8010856:	4413      	add	r3, r2
 8010858:	333b      	adds	r3, #59	@ 0x3b
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d009      	beq.n	8010874 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	212c      	movs	r1, #44	@ 0x2c
 8010866:	fb01 f303 	mul.w	r3, r1, r3
 801086a:	4413      	add	r3, r2
 801086c:	3354      	adds	r3, #84	@ 0x54
 801086e:	78ba      	ldrb	r2, [r7, #2]
 8010870:	701a      	strb	r2, [r3, #0]
 8010872:	e008      	b.n	8010886 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010874:	78fb      	ldrb	r3, [r7, #3]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	212c      	movs	r1, #44	@ 0x2c
 801087a:	fb01 f303 	mul.w	r3, r1, r3
 801087e:	4413      	add	r3, r2
 8010880:	3355      	adds	r3, #85	@ 0x55
 8010882:	78ba      	ldrb	r2, [r7, #2]
 8010884:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7f3 f917 	bl	8003ad0 <HAL_Delay>
}
 80108a2:	bf00      	nop
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
	...

080108ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	4603      	mov	r3, r0
 80108b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108b6:	2300      	movs	r3, #0
 80108b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	2b03      	cmp	r3, #3
 80108be:	d817      	bhi.n	80108f0 <USBH_Get_USB_Status+0x44>
 80108c0:	a201      	add	r2, pc, #4	@ (adr r2, 80108c8 <USBH_Get_USB_Status+0x1c>)
 80108c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c6:	bf00      	nop
 80108c8:	080108d9 	.word	0x080108d9
 80108cc:	080108df 	.word	0x080108df
 80108d0:	080108e5 	.word	0x080108e5
 80108d4:	080108eb 	.word	0x080108eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108d8:	2300      	movs	r3, #0
 80108da:	73fb      	strb	r3, [r7, #15]
    break;
 80108dc:	e00b      	b.n	80108f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108de:	2302      	movs	r3, #2
 80108e0:	73fb      	strb	r3, [r7, #15]
    break;
 80108e2:	e008      	b.n	80108f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108e4:	2301      	movs	r3, #1
 80108e6:	73fb      	strb	r3, [r7, #15]
    break;
 80108e8:	e005      	b.n	80108f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108ea:	2302      	movs	r3, #2
 80108ec:	73fb      	strb	r3, [r7, #15]
    break;
 80108ee:	e002      	b.n	80108f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108f0:	2302      	movs	r3, #2
 80108f2:	73fb      	strb	r3, [r7, #15]
    break;
 80108f4:	bf00      	nop
  }
  return usb_status;
 80108f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3714      	adds	r7, #20
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	4603      	mov	r3, r0
 801090c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d102      	bne.n	801091e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010918:	2301      	movs	r3, #1
 801091a:	73fb      	strb	r3, [r7, #15]
 801091c:	e001      	b.n	8010922 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801091e:	2300      	movs	r3, #0
 8010920:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010922:	7bfb      	ldrb	r3, [r7, #15]
 8010924:	461a      	mov	r2, r3
 8010926:	2101      	movs	r1, #1
 8010928:	4803      	ldr	r0, [pc, #12]	@ (8010938 <MX_DriverVbusFS+0x34>)
 801092a:	f7f3 fc1d 	bl	8004168 <HAL_GPIO_WritePin>
}
 801092e:	bf00      	nop
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	40020800 	.word	0x40020800

0801093c <atoi>:
 801093c:	220a      	movs	r2, #10
 801093e:	2100      	movs	r1, #0
 8010940:	f000 bf48 	b.w	80117d4 <strtol>

08010944 <malloc>:
 8010944:	4b02      	ldr	r3, [pc, #8]	@ (8010950 <malloc+0xc>)
 8010946:	4601      	mov	r1, r0
 8010948:	6818      	ldr	r0, [r3, #0]
 801094a:	f000 b82d 	b.w	80109a8 <_malloc_r>
 801094e:	bf00      	nop
 8010950:	200003d4 	.word	0x200003d4

08010954 <free>:
 8010954:	4b02      	ldr	r3, [pc, #8]	@ (8010960 <free+0xc>)
 8010956:	4601      	mov	r1, r0
 8010958:	6818      	ldr	r0, [r3, #0]
 801095a:	f002 bcad 	b.w	80132b8 <_free_r>
 801095e:	bf00      	nop
 8010960:	200003d4 	.word	0x200003d4

08010964 <sbrk_aligned>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	4e0f      	ldr	r6, [pc, #60]	@ (80109a4 <sbrk_aligned+0x40>)
 8010968:	460c      	mov	r4, r1
 801096a:	6831      	ldr	r1, [r6, #0]
 801096c:	4605      	mov	r5, r0
 801096e:	b911      	cbnz	r1, 8010976 <sbrk_aligned+0x12>
 8010970:	f001 fdc8 	bl	8012504 <_sbrk_r>
 8010974:	6030      	str	r0, [r6, #0]
 8010976:	4621      	mov	r1, r4
 8010978:	4628      	mov	r0, r5
 801097a:	f001 fdc3 	bl	8012504 <_sbrk_r>
 801097e:	1c43      	adds	r3, r0, #1
 8010980:	d103      	bne.n	801098a <sbrk_aligned+0x26>
 8010982:	f04f 34ff 	mov.w	r4, #4294967295
 8010986:	4620      	mov	r0, r4
 8010988:	bd70      	pop	{r4, r5, r6, pc}
 801098a:	1cc4      	adds	r4, r0, #3
 801098c:	f024 0403 	bic.w	r4, r4, #3
 8010990:	42a0      	cmp	r0, r4
 8010992:	d0f8      	beq.n	8010986 <sbrk_aligned+0x22>
 8010994:	1a21      	subs	r1, r4, r0
 8010996:	4628      	mov	r0, r5
 8010998:	f001 fdb4 	bl	8012504 <_sbrk_r>
 801099c:	3001      	adds	r0, #1
 801099e:	d1f2      	bne.n	8010986 <sbrk_aligned+0x22>
 80109a0:	e7ef      	b.n	8010982 <sbrk_aligned+0x1e>
 80109a2:	bf00      	nop
 80109a4:	200058c8 	.word	0x200058c8

080109a8 <_malloc_r>:
 80109a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109ac:	1ccd      	adds	r5, r1, #3
 80109ae:	f025 0503 	bic.w	r5, r5, #3
 80109b2:	3508      	adds	r5, #8
 80109b4:	2d0c      	cmp	r5, #12
 80109b6:	bf38      	it	cc
 80109b8:	250c      	movcc	r5, #12
 80109ba:	2d00      	cmp	r5, #0
 80109bc:	4606      	mov	r6, r0
 80109be:	db01      	blt.n	80109c4 <_malloc_r+0x1c>
 80109c0:	42a9      	cmp	r1, r5
 80109c2:	d904      	bls.n	80109ce <_malloc_r+0x26>
 80109c4:	230c      	movs	r3, #12
 80109c6:	6033      	str	r3, [r6, #0]
 80109c8:	2000      	movs	r0, #0
 80109ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010aa4 <_malloc_r+0xfc>
 80109d2:	f000 f869 	bl	8010aa8 <__malloc_lock>
 80109d6:	f8d8 3000 	ldr.w	r3, [r8]
 80109da:	461c      	mov	r4, r3
 80109dc:	bb44      	cbnz	r4, 8010a30 <_malloc_r+0x88>
 80109de:	4629      	mov	r1, r5
 80109e0:	4630      	mov	r0, r6
 80109e2:	f7ff ffbf 	bl	8010964 <sbrk_aligned>
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	4604      	mov	r4, r0
 80109ea:	d158      	bne.n	8010a9e <_malloc_r+0xf6>
 80109ec:	f8d8 4000 	ldr.w	r4, [r8]
 80109f0:	4627      	mov	r7, r4
 80109f2:	2f00      	cmp	r7, #0
 80109f4:	d143      	bne.n	8010a7e <_malloc_r+0xd6>
 80109f6:	2c00      	cmp	r4, #0
 80109f8:	d04b      	beq.n	8010a92 <_malloc_r+0xea>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	4639      	mov	r1, r7
 80109fe:	4630      	mov	r0, r6
 8010a00:	eb04 0903 	add.w	r9, r4, r3
 8010a04:	f001 fd7e 	bl	8012504 <_sbrk_r>
 8010a08:	4581      	cmp	r9, r0
 8010a0a:	d142      	bne.n	8010a92 <_malloc_r+0xea>
 8010a0c:	6821      	ldr	r1, [r4, #0]
 8010a0e:	1a6d      	subs	r5, r5, r1
 8010a10:	4629      	mov	r1, r5
 8010a12:	4630      	mov	r0, r6
 8010a14:	f7ff ffa6 	bl	8010964 <sbrk_aligned>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d03a      	beq.n	8010a92 <_malloc_r+0xea>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	442b      	add	r3, r5
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	f8d8 3000 	ldr.w	r3, [r8]
 8010a26:	685a      	ldr	r2, [r3, #4]
 8010a28:	bb62      	cbnz	r2, 8010a84 <_malloc_r+0xdc>
 8010a2a:	f8c8 7000 	str.w	r7, [r8]
 8010a2e:	e00f      	b.n	8010a50 <_malloc_r+0xa8>
 8010a30:	6822      	ldr	r2, [r4, #0]
 8010a32:	1b52      	subs	r2, r2, r5
 8010a34:	d420      	bmi.n	8010a78 <_malloc_r+0xd0>
 8010a36:	2a0b      	cmp	r2, #11
 8010a38:	d917      	bls.n	8010a6a <_malloc_r+0xc2>
 8010a3a:	1961      	adds	r1, r4, r5
 8010a3c:	42a3      	cmp	r3, r4
 8010a3e:	6025      	str	r5, [r4, #0]
 8010a40:	bf18      	it	ne
 8010a42:	6059      	strne	r1, [r3, #4]
 8010a44:	6863      	ldr	r3, [r4, #4]
 8010a46:	bf08      	it	eq
 8010a48:	f8c8 1000 	streq.w	r1, [r8]
 8010a4c:	5162      	str	r2, [r4, r5]
 8010a4e:	604b      	str	r3, [r1, #4]
 8010a50:	4630      	mov	r0, r6
 8010a52:	f000 f82f 	bl	8010ab4 <__malloc_unlock>
 8010a56:	f104 000b 	add.w	r0, r4, #11
 8010a5a:	1d23      	adds	r3, r4, #4
 8010a5c:	f020 0007 	bic.w	r0, r0, #7
 8010a60:	1ac2      	subs	r2, r0, r3
 8010a62:	bf1c      	itt	ne
 8010a64:	1a1b      	subne	r3, r3, r0
 8010a66:	50a3      	strne	r3, [r4, r2]
 8010a68:	e7af      	b.n	80109ca <_malloc_r+0x22>
 8010a6a:	6862      	ldr	r2, [r4, #4]
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	bf0c      	ite	eq
 8010a70:	f8c8 2000 	streq.w	r2, [r8]
 8010a74:	605a      	strne	r2, [r3, #4]
 8010a76:	e7eb      	b.n	8010a50 <_malloc_r+0xa8>
 8010a78:	4623      	mov	r3, r4
 8010a7a:	6864      	ldr	r4, [r4, #4]
 8010a7c:	e7ae      	b.n	80109dc <_malloc_r+0x34>
 8010a7e:	463c      	mov	r4, r7
 8010a80:	687f      	ldr	r7, [r7, #4]
 8010a82:	e7b6      	b.n	80109f2 <_malloc_r+0x4a>
 8010a84:	461a      	mov	r2, r3
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	42a3      	cmp	r3, r4
 8010a8a:	d1fb      	bne.n	8010a84 <_malloc_r+0xdc>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	6053      	str	r3, [r2, #4]
 8010a90:	e7de      	b.n	8010a50 <_malloc_r+0xa8>
 8010a92:	230c      	movs	r3, #12
 8010a94:	6033      	str	r3, [r6, #0]
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f80c 	bl	8010ab4 <__malloc_unlock>
 8010a9c:	e794      	b.n	80109c8 <_malloc_r+0x20>
 8010a9e:	6005      	str	r5, [r0, #0]
 8010aa0:	e7d6      	b.n	8010a50 <_malloc_r+0xa8>
 8010aa2:	bf00      	nop
 8010aa4:	200058cc 	.word	0x200058cc

08010aa8 <__malloc_lock>:
 8010aa8:	4801      	ldr	r0, [pc, #4]	@ (8010ab0 <__malloc_lock+0x8>)
 8010aaa:	f001 bd78 	b.w	801259e <__retarget_lock_acquire_recursive>
 8010aae:	bf00      	nop
 8010ab0:	20005a10 	.word	0x20005a10

08010ab4 <__malloc_unlock>:
 8010ab4:	4801      	ldr	r0, [pc, #4]	@ (8010abc <__malloc_unlock+0x8>)
 8010ab6:	f001 bd73 	b.w	80125a0 <__retarget_lock_release_recursive>
 8010aba:	bf00      	nop
 8010abc:	20005a10 	.word	0x20005a10

08010ac0 <sulp>:
 8010ac0:	b570      	push	{r4, r5, r6, lr}
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	460d      	mov	r5, r1
 8010ac6:	ec45 4b10 	vmov	d0, r4, r5
 8010aca:	4616      	mov	r6, r2
 8010acc:	f003 fafe 	bl	80140cc <__ulp>
 8010ad0:	ec51 0b10 	vmov	r0, r1, d0
 8010ad4:	b17e      	cbz	r6, 8010af6 <sulp+0x36>
 8010ad6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ada:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	dd09      	ble.n	8010af6 <sulp+0x36>
 8010ae2:	051b      	lsls	r3, r3, #20
 8010ae4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010ae8:	2400      	movs	r4, #0
 8010aea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010aee:	4622      	mov	r2, r4
 8010af0:	462b      	mov	r3, r5
 8010af2:	f7ef fd81 	bl	80005f8 <__aeabi_dmul>
 8010af6:	ec41 0b10 	vmov	d0, r0, r1
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	0000      	movs	r0, r0
	...

08010b00 <_strtod_l>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	b09f      	sub	sp, #124	@ 0x7c
 8010b06:	460c      	mov	r4, r1
 8010b08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010b0e:	9005      	str	r0, [sp, #20]
 8010b10:	f04f 0a00 	mov.w	sl, #0
 8010b14:	f04f 0b00 	mov.w	fp, #0
 8010b18:	460a      	mov	r2, r1
 8010b1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b1c:	7811      	ldrb	r1, [r2, #0]
 8010b1e:	292b      	cmp	r1, #43	@ 0x2b
 8010b20:	d04a      	beq.n	8010bb8 <_strtod_l+0xb8>
 8010b22:	d838      	bhi.n	8010b96 <_strtod_l+0x96>
 8010b24:	290d      	cmp	r1, #13
 8010b26:	d832      	bhi.n	8010b8e <_strtod_l+0x8e>
 8010b28:	2908      	cmp	r1, #8
 8010b2a:	d832      	bhi.n	8010b92 <_strtod_l+0x92>
 8010b2c:	2900      	cmp	r1, #0
 8010b2e:	d03b      	beq.n	8010ba8 <_strtod_l+0xa8>
 8010b30:	2200      	movs	r2, #0
 8010b32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010b36:	782a      	ldrb	r2, [r5, #0]
 8010b38:	2a30      	cmp	r2, #48	@ 0x30
 8010b3a:	f040 80b3 	bne.w	8010ca4 <_strtod_l+0x1a4>
 8010b3e:	786a      	ldrb	r2, [r5, #1]
 8010b40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b44:	2a58      	cmp	r2, #88	@ 0x58
 8010b46:	d16e      	bne.n	8010c26 <_strtod_l+0x126>
 8010b48:	9302      	str	r3, [sp, #8]
 8010b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	4a8e      	ldr	r2, [pc, #568]	@ (8010d8c <_strtod_l+0x28c>)
 8010b54:	9805      	ldr	r0, [sp, #20]
 8010b56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010b58:	a919      	add	r1, sp, #100	@ 0x64
 8010b5a:	f002 fc5f 	bl	801341c <__gethex>
 8010b5e:	f010 060f 	ands.w	r6, r0, #15
 8010b62:	4604      	mov	r4, r0
 8010b64:	d005      	beq.n	8010b72 <_strtod_l+0x72>
 8010b66:	2e06      	cmp	r6, #6
 8010b68:	d128      	bne.n	8010bbc <_strtod_l+0xbc>
 8010b6a:	3501      	adds	r5, #1
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f040 858e 	bne.w	8011696 <_strtod_l+0xb96>
 8010b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b7c:	b1cb      	cbz	r3, 8010bb2 <_strtod_l+0xb2>
 8010b7e:	4652      	mov	r2, sl
 8010b80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010b84:	ec43 2b10 	vmov	d0, r2, r3
 8010b88:	b01f      	add	sp, #124	@ 0x7c
 8010b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8e:	2920      	cmp	r1, #32
 8010b90:	d1ce      	bne.n	8010b30 <_strtod_l+0x30>
 8010b92:	3201      	adds	r2, #1
 8010b94:	e7c1      	b.n	8010b1a <_strtod_l+0x1a>
 8010b96:	292d      	cmp	r1, #45	@ 0x2d
 8010b98:	d1ca      	bne.n	8010b30 <_strtod_l+0x30>
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010b9e:	1c51      	adds	r1, r2, #1
 8010ba0:	9119      	str	r1, [sp, #100]	@ 0x64
 8010ba2:	7852      	ldrb	r2, [r2, #1]
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	d1c5      	bne.n	8010b34 <_strtod_l+0x34>
 8010ba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010baa:	9419      	str	r4, [sp, #100]	@ 0x64
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 8570 	bne.w	8011692 <_strtod_l+0xb92>
 8010bb2:	4652      	mov	r2, sl
 8010bb4:	465b      	mov	r3, fp
 8010bb6:	e7e5      	b.n	8010b84 <_strtod_l+0x84>
 8010bb8:	2100      	movs	r1, #0
 8010bba:	e7ef      	b.n	8010b9c <_strtod_l+0x9c>
 8010bbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010bbe:	b13a      	cbz	r2, 8010bd0 <_strtod_l+0xd0>
 8010bc0:	2135      	movs	r1, #53	@ 0x35
 8010bc2:	a81c      	add	r0, sp, #112	@ 0x70
 8010bc4:	f003 fb7c 	bl	80142c0 <__copybits>
 8010bc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bca:	9805      	ldr	r0, [sp, #20]
 8010bcc:	f002 ff4a 	bl	8013a64 <_Bfree>
 8010bd0:	3e01      	subs	r6, #1
 8010bd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010bd4:	2e04      	cmp	r6, #4
 8010bd6:	d806      	bhi.n	8010be6 <_strtod_l+0xe6>
 8010bd8:	e8df f006 	tbb	[pc, r6]
 8010bdc:	201d0314 	.word	0x201d0314
 8010be0:	14          	.byte	0x14
 8010be1:	00          	.byte	0x00
 8010be2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010be6:	05e1      	lsls	r1, r4, #23
 8010be8:	bf48      	it	mi
 8010bea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010bee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010bf2:	0d1b      	lsrs	r3, r3, #20
 8010bf4:	051b      	lsls	r3, r3, #20
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1bb      	bne.n	8010b72 <_strtod_l+0x72>
 8010bfa:	f001 fca5 	bl	8012548 <__errno>
 8010bfe:	2322      	movs	r3, #34	@ 0x22
 8010c00:	6003      	str	r3, [r0, #0]
 8010c02:	e7b6      	b.n	8010b72 <_strtod_l+0x72>
 8010c04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010c08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010c0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010c10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010c14:	e7e7      	b.n	8010be6 <_strtod_l+0xe6>
 8010c16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010d94 <_strtod_l+0x294>
 8010c1a:	e7e4      	b.n	8010be6 <_strtod_l+0xe6>
 8010c1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010c20:	f04f 3aff 	mov.w	sl, #4294967295
 8010c24:	e7df      	b.n	8010be6 <_strtod_l+0xe6>
 8010c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c2c:	785b      	ldrb	r3, [r3, #1]
 8010c2e:	2b30      	cmp	r3, #48	@ 0x30
 8010c30:	d0f9      	beq.n	8010c26 <_strtod_l+0x126>
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d09d      	beq.n	8010b72 <_strtod_l+0x72>
 8010c36:	2301      	movs	r3, #1
 8010c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c3e:	2300      	movs	r3, #0
 8010c40:	9308      	str	r3, [sp, #32]
 8010c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c44:	461f      	mov	r7, r3
 8010c46:	220a      	movs	r2, #10
 8010c48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010c4a:	7805      	ldrb	r5, [r0, #0]
 8010c4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010c50:	b2d9      	uxtb	r1, r3
 8010c52:	2909      	cmp	r1, #9
 8010c54:	d928      	bls.n	8010ca8 <_strtod_l+0x1a8>
 8010c56:	494e      	ldr	r1, [pc, #312]	@ (8010d90 <_strtod_l+0x290>)
 8010c58:	2201      	movs	r2, #1
 8010c5a:	f001 fb57 	bl	801230c <strncmp>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d032      	beq.n	8010cc8 <_strtod_l+0x1c8>
 8010c62:	2000      	movs	r0, #0
 8010c64:	462a      	mov	r2, r5
 8010c66:	4681      	mov	r9, r0
 8010c68:	463d      	mov	r5, r7
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2a65      	cmp	r2, #101	@ 0x65
 8010c6e:	d001      	beq.n	8010c74 <_strtod_l+0x174>
 8010c70:	2a45      	cmp	r2, #69	@ 0x45
 8010c72:	d114      	bne.n	8010c9e <_strtod_l+0x19e>
 8010c74:	b91d      	cbnz	r5, 8010c7e <_strtod_l+0x17e>
 8010c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c78:	4302      	orrs	r2, r0
 8010c7a:	d095      	beq.n	8010ba8 <_strtod_l+0xa8>
 8010c7c:	2500      	movs	r5, #0
 8010c7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010c80:	1c62      	adds	r2, r4, #1
 8010c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c84:	7862      	ldrb	r2, [r4, #1]
 8010c86:	2a2b      	cmp	r2, #43	@ 0x2b
 8010c88:	d077      	beq.n	8010d7a <_strtod_l+0x27a>
 8010c8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010c8c:	d07b      	beq.n	8010d86 <_strtod_l+0x286>
 8010c8e:	f04f 0c00 	mov.w	ip, #0
 8010c92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010c96:	2909      	cmp	r1, #9
 8010c98:	f240 8082 	bls.w	8010da0 <_strtod_l+0x2a0>
 8010c9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c9e:	f04f 0800 	mov.w	r8, #0
 8010ca2:	e0a2      	b.n	8010dea <_strtod_l+0x2ea>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	e7c7      	b.n	8010c38 <_strtod_l+0x138>
 8010ca8:	2f08      	cmp	r7, #8
 8010caa:	bfd5      	itete	le
 8010cac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010cae:	9908      	ldrgt	r1, [sp, #32]
 8010cb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010cb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010cb8:	f100 0001 	add.w	r0, r0, #1
 8010cbc:	bfd4      	ite	le
 8010cbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010cc0:	9308      	strgt	r3, [sp, #32]
 8010cc2:	3701      	adds	r7, #1
 8010cc4:	9019      	str	r0, [sp, #100]	@ 0x64
 8010cc6:	e7bf      	b.n	8010c48 <_strtod_l+0x148>
 8010cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010cce:	785a      	ldrb	r2, [r3, #1]
 8010cd0:	b37f      	cbz	r7, 8010d32 <_strtod_l+0x232>
 8010cd2:	4681      	mov	r9, r0
 8010cd4:	463d      	mov	r5, r7
 8010cd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010cda:	2b09      	cmp	r3, #9
 8010cdc:	d912      	bls.n	8010d04 <_strtod_l+0x204>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e7c4      	b.n	8010c6c <_strtod_l+0x16c>
 8010ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ce8:	785a      	ldrb	r2, [r3, #1]
 8010cea:	3001      	adds	r0, #1
 8010cec:	2a30      	cmp	r2, #48	@ 0x30
 8010cee:	d0f8      	beq.n	8010ce2 <_strtod_l+0x1e2>
 8010cf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010cf4:	2b08      	cmp	r3, #8
 8010cf6:	f200 84d3 	bhi.w	80116a0 <_strtod_l+0xba0>
 8010cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cfe:	4681      	mov	r9, r0
 8010d00:	2000      	movs	r0, #0
 8010d02:	4605      	mov	r5, r0
 8010d04:	3a30      	subs	r2, #48	@ 0x30
 8010d06:	f100 0301 	add.w	r3, r0, #1
 8010d0a:	d02a      	beq.n	8010d62 <_strtod_l+0x262>
 8010d0c:	4499      	add	r9, r3
 8010d0e:	eb00 0c05 	add.w	ip, r0, r5
 8010d12:	462b      	mov	r3, r5
 8010d14:	210a      	movs	r1, #10
 8010d16:	4563      	cmp	r3, ip
 8010d18:	d10d      	bne.n	8010d36 <_strtod_l+0x236>
 8010d1a:	1c69      	adds	r1, r5, #1
 8010d1c:	4401      	add	r1, r0
 8010d1e:	4428      	add	r0, r5
 8010d20:	2808      	cmp	r0, #8
 8010d22:	dc16      	bgt.n	8010d52 <_strtod_l+0x252>
 8010d24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010d26:	230a      	movs	r3, #10
 8010d28:	fb03 2300 	mla	r3, r3, r0, r2
 8010d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d2e:	2300      	movs	r3, #0
 8010d30:	e018      	b.n	8010d64 <_strtod_l+0x264>
 8010d32:	4638      	mov	r0, r7
 8010d34:	e7da      	b.n	8010cec <_strtod_l+0x1ec>
 8010d36:	2b08      	cmp	r3, #8
 8010d38:	f103 0301 	add.w	r3, r3, #1
 8010d3c:	dc03      	bgt.n	8010d46 <_strtod_l+0x246>
 8010d3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010d40:	434e      	muls	r6, r1
 8010d42:	960a      	str	r6, [sp, #40]	@ 0x28
 8010d44:	e7e7      	b.n	8010d16 <_strtod_l+0x216>
 8010d46:	2b10      	cmp	r3, #16
 8010d48:	bfde      	ittt	le
 8010d4a:	9e08      	ldrle	r6, [sp, #32]
 8010d4c:	434e      	mulle	r6, r1
 8010d4e:	9608      	strle	r6, [sp, #32]
 8010d50:	e7e1      	b.n	8010d16 <_strtod_l+0x216>
 8010d52:	280f      	cmp	r0, #15
 8010d54:	dceb      	bgt.n	8010d2e <_strtod_l+0x22e>
 8010d56:	9808      	ldr	r0, [sp, #32]
 8010d58:	230a      	movs	r3, #10
 8010d5a:	fb03 2300 	mla	r3, r3, r0, r2
 8010d5e:	9308      	str	r3, [sp, #32]
 8010d60:	e7e5      	b.n	8010d2e <_strtod_l+0x22e>
 8010d62:	4629      	mov	r1, r5
 8010d64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d66:	1c50      	adds	r0, r2, #1
 8010d68:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d6a:	7852      	ldrb	r2, [r2, #1]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	460d      	mov	r5, r1
 8010d70:	e7b1      	b.n	8010cd6 <_strtod_l+0x1d6>
 8010d72:	f04f 0900 	mov.w	r9, #0
 8010d76:	2301      	movs	r3, #1
 8010d78:	e77d      	b.n	8010c76 <_strtod_l+0x176>
 8010d7a:	f04f 0c00 	mov.w	ip, #0
 8010d7e:	1ca2      	adds	r2, r4, #2
 8010d80:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d82:	78a2      	ldrb	r2, [r4, #2]
 8010d84:	e785      	b.n	8010c92 <_strtod_l+0x192>
 8010d86:	f04f 0c01 	mov.w	ip, #1
 8010d8a:	e7f8      	b.n	8010d7e <_strtod_l+0x27e>
 8010d8c:	080157f0 	.word	0x080157f0
 8010d90:	080157d8 	.word	0x080157d8
 8010d94:	7ff00000 	.word	0x7ff00000
 8010d98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d9a:	1c51      	adds	r1, r2, #1
 8010d9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010d9e:	7852      	ldrb	r2, [r2, #1]
 8010da0:	2a30      	cmp	r2, #48	@ 0x30
 8010da2:	d0f9      	beq.n	8010d98 <_strtod_l+0x298>
 8010da4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010da8:	2908      	cmp	r1, #8
 8010daa:	f63f af78 	bhi.w	8010c9e <_strtod_l+0x19e>
 8010dae:	3a30      	subs	r2, #48	@ 0x30
 8010db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010db2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010db4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010db6:	f04f 080a 	mov.w	r8, #10
 8010dba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010dbc:	1c56      	adds	r6, r2, #1
 8010dbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8010dc0:	7852      	ldrb	r2, [r2, #1]
 8010dc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010dc6:	f1be 0f09 	cmp.w	lr, #9
 8010dca:	d939      	bls.n	8010e40 <_strtod_l+0x340>
 8010dcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dce:	1a76      	subs	r6, r6, r1
 8010dd0:	2e08      	cmp	r6, #8
 8010dd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010dd6:	dc03      	bgt.n	8010de0 <_strtod_l+0x2e0>
 8010dd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010dda:	4588      	cmp	r8, r1
 8010ddc:	bfa8      	it	ge
 8010dde:	4688      	movge	r8, r1
 8010de0:	f1bc 0f00 	cmp.w	ip, #0
 8010de4:	d001      	beq.n	8010dea <_strtod_l+0x2ea>
 8010de6:	f1c8 0800 	rsb	r8, r8, #0
 8010dea:	2d00      	cmp	r5, #0
 8010dec:	d14e      	bne.n	8010e8c <_strtod_l+0x38c>
 8010dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010df0:	4308      	orrs	r0, r1
 8010df2:	f47f aebe 	bne.w	8010b72 <_strtod_l+0x72>
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f47f aed6 	bne.w	8010ba8 <_strtod_l+0xa8>
 8010dfc:	2a69      	cmp	r2, #105	@ 0x69
 8010dfe:	d028      	beq.n	8010e52 <_strtod_l+0x352>
 8010e00:	dc25      	bgt.n	8010e4e <_strtod_l+0x34e>
 8010e02:	2a49      	cmp	r2, #73	@ 0x49
 8010e04:	d025      	beq.n	8010e52 <_strtod_l+0x352>
 8010e06:	2a4e      	cmp	r2, #78	@ 0x4e
 8010e08:	f47f aece 	bne.w	8010ba8 <_strtod_l+0xa8>
 8010e0c:	499b      	ldr	r1, [pc, #620]	@ (801107c <_strtod_l+0x57c>)
 8010e0e:	a819      	add	r0, sp, #100	@ 0x64
 8010e10:	f002 fd26 	bl	8013860 <__match>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	f43f aec7 	beq.w	8010ba8 <_strtod_l+0xa8>
 8010e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	2b28      	cmp	r3, #40	@ 0x28
 8010e20:	d12e      	bne.n	8010e80 <_strtod_l+0x380>
 8010e22:	4997      	ldr	r1, [pc, #604]	@ (8011080 <_strtod_l+0x580>)
 8010e24:	aa1c      	add	r2, sp, #112	@ 0x70
 8010e26:	a819      	add	r0, sp, #100	@ 0x64
 8010e28:	f002 fd2e 	bl	8013888 <__hexnan>
 8010e2c:	2805      	cmp	r0, #5
 8010e2e:	d127      	bne.n	8010e80 <_strtod_l+0x380>
 8010e30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010e36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010e3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010e3e:	e698      	b.n	8010b72 <_strtod_l+0x72>
 8010e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e42:	fb08 2101 	mla	r1, r8, r1, r2
 8010e46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010e4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e4c:	e7b5      	b.n	8010dba <_strtod_l+0x2ba>
 8010e4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010e50:	e7da      	b.n	8010e08 <_strtod_l+0x308>
 8010e52:	498c      	ldr	r1, [pc, #560]	@ (8011084 <_strtod_l+0x584>)
 8010e54:	a819      	add	r0, sp, #100	@ 0x64
 8010e56:	f002 fd03 	bl	8013860 <__match>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	f43f aea4 	beq.w	8010ba8 <_strtod_l+0xa8>
 8010e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e62:	4989      	ldr	r1, [pc, #548]	@ (8011088 <_strtod_l+0x588>)
 8010e64:	3b01      	subs	r3, #1
 8010e66:	a819      	add	r0, sp, #100	@ 0x64
 8010e68:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e6a:	f002 fcf9 	bl	8013860 <__match>
 8010e6e:	b910      	cbnz	r0, 8010e76 <_strtod_l+0x376>
 8010e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e72:	3301      	adds	r3, #1
 8010e74:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011098 <_strtod_l+0x598>
 8010e7a:	f04f 0a00 	mov.w	sl, #0
 8010e7e:	e678      	b.n	8010b72 <_strtod_l+0x72>
 8010e80:	4882      	ldr	r0, [pc, #520]	@ (801108c <_strtod_l+0x58c>)
 8010e82:	f001 fba5 	bl	80125d0 <nan>
 8010e86:	ec5b ab10 	vmov	sl, fp, d0
 8010e8a:	e672      	b.n	8010b72 <_strtod_l+0x72>
 8010e8c:	eba8 0309 	sub.w	r3, r8, r9
 8010e90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e94:	2f00      	cmp	r7, #0
 8010e96:	bf08      	it	eq
 8010e98:	462f      	moveq	r7, r5
 8010e9a:	2d10      	cmp	r5, #16
 8010e9c:	462c      	mov	r4, r5
 8010e9e:	bfa8      	it	ge
 8010ea0:	2410      	movge	r4, #16
 8010ea2:	f7ef fb2f 	bl	8000504 <__aeabi_ui2d>
 8010ea6:	2d09      	cmp	r5, #9
 8010ea8:	4682      	mov	sl, r0
 8010eaa:	468b      	mov	fp, r1
 8010eac:	dc13      	bgt.n	8010ed6 <_strtod_l+0x3d6>
 8010eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f43f ae5e 	beq.w	8010b72 <_strtod_l+0x72>
 8010eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb8:	dd78      	ble.n	8010fac <_strtod_l+0x4ac>
 8010eba:	2b16      	cmp	r3, #22
 8010ebc:	dc5f      	bgt.n	8010f7e <_strtod_l+0x47e>
 8010ebe:	4974      	ldr	r1, [pc, #464]	@ (8011090 <_strtod_l+0x590>)
 8010ec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec8:	4652      	mov	r2, sl
 8010eca:	465b      	mov	r3, fp
 8010ecc:	f7ef fb94 	bl	80005f8 <__aeabi_dmul>
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	468b      	mov	fp, r1
 8010ed4:	e64d      	b.n	8010b72 <_strtod_l+0x72>
 8010ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8011090 <_strtod_l+0x590>)
 8010ed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010edc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010ee0:	f7ef fb8a 	bl	80005f8 <__aeabi_dmul>
 8010ee4:	4682      	mov	sl, r0
 8010ee6:	9808      	ldr	r0, [sp, #32]
 8010ee8:	468b      	mov	fp, r1
 8010eea:	f7ef fb0b 	bl	8000504 <__aeabi_ui2d>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	4650      	mov	r0, sl
 8010ef4:	4659      	mov	r1, fp
 8010ef6:	f7ef f9c9 	bl	800028c <__adddf3>
 8010efa:	2d0f      	cmp	r5, #15
 8010efc:	4682      	mov	sl, r0
 8010efe:	468b      	mov	fp, r1
 8010f00:	ddd5      	ble.n	8010eae <_strtod_l+0x3ae>
 8010f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f04:	1b2c      	subs	r4, r5, r4
 8010f06:	441c      	add	r4, r3
 8010f08:	2c00      	cmp	r4, #0
 8010f0a:	f340 8096 	ble.w	801103a <_strtod_l+0x53a>
 8010f0e:	f014 030f 	ands.w	r3, r4, #15
 8010f12:	d00a      	beq.n	8010f2a <_strtod_l+0x42a>
 8010f14:	495e      	ldr	r1, [pc, #376]	@ (8011090 <_strtod_l+0x590>)
 8010f16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f1a:	4652      	mov	r2, sl
 8010f1c:	465b      	mov	r3, fp
 8010f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f22:	f7ef fb69 	bl	80005f8 <__aeabi_dmul>
 8010f26:	4682      	mov	sl, r0
 8010f28:	468b      	mov	fp, r1
 8010f2a:	f034 040f 	bics.w	r4, r4, #15
 8010f2e:	d073      	beq.n	8011018 <_strtod_l+0x518>
 8010f30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010f34:	dd48      	ble.n	8010fc8 <_strtod_l+0x4c8>
 8010f36:	2400      	movs	r4, #0
 8010f38:	46a0      	mov	r8, r4
 8010f3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8010f3c:	46a1      	mov	r9, r4
 8010f3e:	9a05      	ldr	r2, [sp, #20]
 8010f40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011098 <_strtod_l+0x598>
 8010f44:	2322      	movs	r3, #34	@ 0x22
 8010f46:	6013      	str	r3, [r2, #0]
 8010f48:	f04f 0a00 	mov.w	sl, #0
 8010f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f43f ae0f 	beq.w	8010b72 <_strtod_l+0x72>
 8010f54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f56:	9805      	ldr	r0, [sp, #20]
 8010f58:	f002 fd84 	bl	8013a64 <_Bfree>
 8010f5c:	9805      	ldr	r0, [sp, #20]
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f002 fd80 	bl	8013a64 <_Bfree>
 8010f64:	9805      	ldr	r0, [sp, #20]
 8010f66:	4641      	mov	r1, r8
 8010f68:	f002 fd7c 	bl	8013a64 <_Bfree>
 8010f6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f6e:	9805      	ldr	r0, [sp, #20]
 8010f70:	f002 fd78 	bl	8013a64 <_Bfree>
 8010f74:	9805      	ldr	r0, [sp, #20]
 8010f76:	4621      	mov	r1, r4
 8010f78:	f002 fd74 	bl	8013a64 <_Bfree>
 8010f7c:	e5f9      	b.n	8010b72 <_strtod_l+0x72>
 8010f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010f84:	4293      	cmp	r3, r2
 8010f86:	dbbc      	blt.n	8010f02 <_strtod_l+0x402>
 8010f88:	4c41      	ldr	r4, [pc, #260]	@ (8011090 <_strtod_l+0x590>)
 8010f8a:	f1c5 050f 	rsb	r5, r5, #15
 8010f8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010f92:	4652      	mov	r2, sl
 8010f94:	465b      	mov	r3, fp
 8010f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f9a:	f7ef fb2d 	bl	80005f8 <__aeabi_dmul>
 8010f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fa0:	1b5d      	subs	r5, r3, r5
 8010fa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010faa:	e78f      	b.n	8010ecc <_strtod_l+0x3cc>
 8010fac:	3316      	adds	r3, #22
 8010fae:	dba8      	blt.n	8010f02 <_strtod_l+0x402>
 8010fb0:	4b37      	ldr	r3, [pc, #220]	@ (8011090 <_strtod_l+0x590>)
 8010fb2:	eba9 0808 	sub.w	r8, r9, r8
 8010fb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010fba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010fbe:	4650      	mov	r0, sl
 8010fc0:	4659      	mov	r1, fp
 8010fc2:	f7ef fc43 	bl	800084c <__aeabi_ddiv>
 8010fc6:	e783      	b.n	8010ed0 <_strtod_l+0x3d0>
 8010fc8:	4b32      	ldr	r3, [pc, #200]	@ (8011094 <_strtod_l+0x594>)
 8010fca:	9308      	str	r3, [sp, #32]
 8010fcc:	2300      	movs	r3, #0
 8010fce:	1124      	asrs	r4, r4, #4
 8010fd0:	4650      	mov	r0, sl
 8010fd2:	4659      	mov	r1, fp
 8010fd4:	461e      	mov	r6, r3
 8010fd6:	2c01      	cmp	r4, #1
 8010fd8:	dc21      	bgt.n	801101e <_strtod_l+0x51e>
 8010fda:	b10b      	cbz	r3, 8010fe0 <_strtod_l+0x4e0>
 8010fdc:	4682      	mov	sl, r0
 8010fde:	468b      	mov	fp, r1
 8010fe0:	492c      	ldr	r1, [pc, #176]	@ (8011094 <_strtod_l+0x594>)
 8010fe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010fe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010fea:	4652      	mov	r2, sl
 8010fec:	465b      	mov	r3, fp
 8010fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ff2:	f7ef fb01 	bl	80005f8 <__aeabi_dmul>
 8010ff6:	4b28      	ldr	r3, [pc, #160]	@ (8011098 <_strtod_l+0x598>)
 8010ff8:	460a      	mov	r2, r1
 8010ffa:	400b      	ands	r3, r1
 8010ffc:	4927      	ldr	r1, [pc, #156]	@ (801109c <_strtod_l+0x59c>)
 8010ffe:	428b      	cmp	r3, r1
 8011000:	4682      	mov	sl, r0
 8011002:	d898      	bhi.n	8010f36 <_strtod_l+0x436>
 8011004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011008:	428b      	cmp	r3, r1
 801100a:	bf86      	itte	hi
 801100c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80110a0 <_strtod_l+0x5a0>
 8011010:	f04f 3aff 	movhi.w	sl, #4294967295
 8011014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011018:	2300      	movs	r3, #0
 801101a:	9308      	str	r3, [sp, #32]
 801101c:	e07a      	b.n	8011114 <_strtod_l+0x614>
 801101e:	07e2      	lsls	r2, r4, #31
 8011020:	d505      	bpl.n	801102e <_strtod_l+0x52e>
 8011022:	9b08      	ldr	r3, [sp, #32]
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	f7ef fae6 	bl	80005f8 <__aeabi_dmul>
 801102c:	2301      	movs	r3, #1
 801102e:	9a08      	ldr	r2, [sp, #32]
 8011030:	3208      	adds	r2, #8
 8011032:	3601      	adds	r6, #1
 8011034:	1064      	asrs	r4, r4, #1
 8011036:	9208      	str	r2, [sp, #32]
 8011038:	e7cd      	b.n	8010fd6 <_strtod_l+0x4d6>
 801103a:	d0ed      	beq.n	8011018 <_strtod_l+0x518>
 801103c:	4264      	negs	r4, r4
 801103e:	f014 020f 	ands.w	r2, r4, #15
 8011042:	d00a      	beq.n	801105a <_strtod_l+0x55a>
 8011044:	4b12      	ldr	r3, [pc, #72]	@ (8011090 <_strtod_l+0x590>)
 8011046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801104a:	4650      	mov	r0, sl
 801104c:	4659      	mov	r1, fp
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	f7ef fbfb 	bl	800084c <__aeabi_ddiv>
 8011056:	4682      	mov	sl, r0
 8011058:	468b      	mov	fp, r1
 801105a:	1124      	asrs	r4, r4, #4
 801105c:	d0dc      	beq.n	8011018 <_strtod_l+0x518>
 801105e:	2c1f      	cmp	r4, #31
 8011060:	dd20      	ble.n	80110a4 <_strtod_l+0x5a4>
 8011062:	2400      	movs	r4, #0
 8011064:	46a0      	mov	r8, r4
 8011066:	940a      	str	r4, [sp, #40]	@ 0x28
 8011068:	46a1      	mov	r9, r4
 801106a:	9a05      	ldr	r2, [sp, #20]
 801106c:	2322      	movs	r3, #34	@ 0x22
 801106e:	f04f 0a00 	mov.w	sl, #0
 8011072:	f04f 0b00 	mov.w	fp, #0
 8011076:	6013      	str	r3, [r2, #0]
 8011078:	e768      	b.n	8010f4c <_strtod_l+0x44c>
 801107a:	bf00      	nop
 801107c:	0801593e 	.word	0x0801593e
 8011080:	080157dc 	.word	0x080157dc
 8011084:	08015936 	.word	0x08015936
 8011088:	08015a1d 	.word	0x08015a1d
 801108c:	08015a19 	.word	0x08015a19
 8011090:	08015b80 	.word	0x08015b80
 8011094:	08015b58 	.word	0x08015b58
 8011098:	7ff00000 	.word	0x7ff00000
 801109c:	7ca00000 	.word	0x7ca00000
 80110a0:	7fefffff 	.word	0x7fefffff
 80110a4:	f014 0310 	ands.w	r3, r4, #16
 80110a8:	bf18      	it	ne
 80110aa:	236a      	movne	r3, #106	@ 0x6a
 80110ac:	4ea9      	ldr	r6, [pc, #676]	@ (8011354 <_strtod_l+0x854>)
 80110ae:	9308      	str	r3, [sp, #32]
 80110b0:	4650      	mov	r0, sl
 80110b2:	4659      	mov	r1, fp
 80110b4:	2300      	movs	r3, #0
 80110b6:	07e2      	lsls	r2, r4, #31
 80110b8:	d504      	bpl.n	80110c4 <_strtod_l+0x5c4>
 80110ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80110be:	f7ef fa9b 	bl	80005f8 <__aeabi_dmul>
 80110c2:	2301      	movs	r3, #1
 80110c4:	1064      	asrs	r4, r4, #1
 80110c6:	f106 0608 	add.w	r6, r6, #8
 80110ca:	d1f4      	bne.n	80110b6 <_strtod_l+0x5b6>
 80110cc:	b10b      	cbz	r3, 80110d2 <_strtod_l+0x5d2>
 80110ce:	4682      	mov	sl, r0
 80110d0:	468b      	mov	fp, r1
 80110d2:	9b08      	ldr	r3, [sp, #32]
 80110d4:	b1b3      	cbz	r3, 8011104 <_strtod_l+0x604>
 80110d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80110da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80110de:	2b00      	cmp	r3, #0
 80110e0:	4659      	mov	r1, fp
 80110e2:	dd0f      	ble.n	8011104 <_strtod_l+0x604>
 80110e4:	2b1f      	cmp	r3, #31
 80110e6:	dd55      	ble.n	8011194 <_strtod_l+0x694>
 80110e8:	2b34      	cmp	r3, #52	@ 0x34
 80110ea:	bfde      	ittt	le
 80110ec:	f04f 33ff 	movle.w	r3, #4294967295
 80110f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80110f4:	4093      	lslle	r3, r2
 80110f6:	f04f 0a00 	mov.w	sl, #0
 80110fa:	bfcc      	ite	gt
 80110fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011100:	ea03 0b01 	andle.w	fp, r3, r1
 8011104:	2200      	movs	r2, #0
 8011106:	2300      	movs	r3, #0
 8011108:	4650      	mov	r0, sl
 801110a:	4659      	mov	r1, fp
 801110c:	f7ef fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011110:	2800      	cmp	r0, #0
 8011112:	d1a6      	bne.n	8011062 <_strtod_l+0x562>
 8011114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801111a:	9805      	ldr	r0, [sp, #20]
 801111c:	462b      	mov	r3, r5
 801111e:	463a      	mov	r2, r7
 8011120:	f002 fd08 	bl	8013b34 <__s2b>
 8011124:	900a      	str	r0, [sp, #40]	@ 0x28
 8011126:	2800      	cmp	r0, #0
 8011128:	f43f af05 	beq.w	8010f36 <_strtod_l+0x436>
 801112c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801112e:	2a00      	cmp	r2, #0
 8011130:	eba9 0308 	sub.w	r3, r9, r8
 8011134:	bfa8      	it	ge
 8011136:	2300      	movge	r3, #0
 8011138:	9312      	str	r3, [sp, #72]	@ 0x48
 801113a:	2400      	movs	r4, #0
 801113c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011140:	9316      	str	r3, [sp, #88]	@ 0x58
 8011142:	46a0      	mov	r8, r4
 8011144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011146:	9805      	ldr	r0, [sp, #20]
 8011148:	6859      	ldr	r1, [r3, #4]
 801114a:	f002 fc4b 	bl	80139e4 <_Balloc>
 801114e:	4681      	mov	r9, r0
 8011150:	2800      	cmp	r0, #0
 8011152:	f43f aef4 	beq.w	8010f3e <_strtod_l+0x43e>
 8011156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011158:	691a      	ldr	r2, [r3, #16]
 801115a:	3202      	adds	r2, #2
 801115c:	f103 010c 	add.w	r1, r3, #12
 8011160:	0092      	lsls	r2, r2, #2
 8011162:	300c      	adds	r0, #12
 8011164:	f001 fa25 	bl	80125b2 <memcpy>
 8011168:	ec4b ab10 	vmov	d0, sl, fp
 801116c:	9805      	ldr	r0, [sp, #20]
 801116e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011170:	a91b      	add	r1, sp, #108	@ 0x6c
 8011172:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011176:	f003 f819 	bl	80141ac <__d2b>
 801117a:	901a      	str	r0, [sp, #104]	@ 0x68
 801117c:	2800      	cmp	r0, #0
 801117e:	f43f aede 	beq.w	8010f3e <_strtod_l+0x43e>
 8011182:	9805      	ldr	r0, [sp, #20]
 8011184:	2101      	movs	r1, #1
 8011186:	f002 fd6b 	bl	8013c60 <__i2b>
 801118a:	4680      	mov	r8, r0
 801118c:	b948      	cbnz	r0, 80111a2 <_strtod_l+0x6a2>
 801118e:	f04f 0800 	mov.w	r8, #0
 8011192:	e6d4      	b.n	8010f3e <_strtod_l+0x43e>
 8011194:	f04f 32ff 	mov.w	r2, #4294967295
 8011198:	fa02 f303 	lsl.w	r3, r2, r3
 801119c:	ea03 0a0a 	and.w	sl, r3, sl
 80111a0:	e7b0      	b.n	8011104 <_strtod_l+0x604>
 80111a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80111a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80111a6:	2d00      	cmp	r5, #0
 80111a8:	bfab      	itete	ge
 80111aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80111ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80111ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80111b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80111b2:	bfac      	ite	ge
 80111b4:	18ef      	addge	r7, r5, r3
 80111b6:	1b5e      	sublt	r6, r3, r5
 80111b8:	9b08      	ldr	r3, [sp, #32]
 80111ba:	1aed      	subs	r5, r5, r3
 80111bc:	4415      	add	r5, r2
 80111be:	4b66      	ldr	r3, [pc, #408]	@ (8011358 <_strtod_l+0x858>)
 80111c0:	3d01      	subs	r5, #1
 80111c2:	429d      	cmp	r5, r3
 80111c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80111c8:	da50      	bge.n	801126c <_strtod_l+0x76c>
 80111ca:	1b5b      	subs	r3, r3, r5
 80111cc:	2b1f      	cmp	r3, #31
 80111ce:	eba2 0203 	sub.w	r2, r2, r3
 80111d2:	f04f 0101 	mov.w	r1, #1
 80111d6:	dc3d      	bgt.n	8011254 <_strtod_l+0x754>
 80111d8:	fa01 f303 	lsl.w	r3, r1, r3
 80111dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80111de:	2300      	movs	r3, #0
 80111e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80111e2:	18bd      	adds	r5, r7, r2
 80111e4:	9b08      	ldr	r3, [sp, #32]
 80111e6:	42af      	cmp	r7, r5
 80111e8:	4416      	add	r6, r2
 80111ea:	441e      	add	r6, r3
 80111ec:	463b      	mov	r3, r7
 80111ee:	bfa8      	it	ge
 80111f0:	462b      	movge	r3, r5
 80111f2:	42b3      	cmp	r3, r6
 80111f4:	bfa8      	it	ge
 80111f6:	4633      	movge	r3, r6
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	bfc2      	ittt	gt
 80111fc:	1aed      	subgt	r5, r5, r3
 80111fe:	1af6      	subgt	r6, r6, r3
 8011200:	1aff      	subgt	r7, r7, r3
 8011202:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011204:	2b00      	cmp	r3, #0
 8011206:	dd16      	ble.n	8011236 <_strtod_l+0x736>
 8011208:	4641      	mov	r1, r8
 801120a:	9805      	ldr	r0, [sp, #20]
 801120c:	461a      	mov	r2, r3
 801120e:	f002 fde7 	bl	8013de0 <__pow5mult>
 8011212:	4680      	mov	r8, r0
 8011214:	2800      	cmp	r0, #0
 8011216:	d0ba      	beq.n	801118e <_strtod_l+0x68e>
 8011218:	4601      	mov	r1, r0
 801121a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801121c:	9805      	ldr	r0, [sp, #20]
 801121e:	f002 fd35 	bl	8013c8c <__multiply>
 8011222:	900e      	str	r0, [sp, #56]	@ 0x38
 8011224:	2800      	cmp	r0, #0
 8011226:	f43f ae8a 	beq.w	8010f3e <_strtod_l+0x43e>
 801122a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801122c:	9805      	ldr	r0, [sp, #20]
 801122e:	f002 fc19 	bl	8013a64 <_Bfree>
 8011232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011234:	931a      	str	r3, [sp, #104]	@ 0x68
 8011236:	2d00      	cmp	r5, #0
 8011238:	dc1d      	bgt.n	8011276 <_strtod_l+0x776>
 801123a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801123c:	2b00      	cmp	r3, #0
 801123e:	dd23      	ble.n	8011288 <_strtod_l+0x788>
 8011240:	4649      	mov	r1, r9
 8011242:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011244:	9805      	ldr	r0, [sp, #20]
 8011246:	f002 fdcb 	bl	8013de0 <__pow5mult>
 801124a:	4681      	mov	r9, r0
 801124c:	b9e0      	cbnz	r0, 8011288 <_strtod_l+0x788>
 801124e:	f04f 0900 	mov.w	r9, #0
 8011252:	e674      	b.n	8010f3e <_strtod_l+0x43e>
 8011254:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011258:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801125c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011260:	35e2      	adds	r5, #226	@ 0xe2
 8011262:	fa01 f305 	lsl.w	r3, r1, r5
 8011266:	9310      	str	r3, [sp, #64]	@ 0x40
 8011268:	9113      	str	r1, [sp, #76]	@ 0x4c
 801126a:	e7ba      	b.n	80111e2 <_strtod_l+0x6e2>
 801126c:	2300      	movs	r3, #0
 801126e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011270:	2301      	movs	r3, #1
 8011272:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011274:	e7b5      	b.n	80111e2 <_strtod_l+0x6e2>
 8011276:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011278:	9805      	ldr	r0, [sp, #20]
 801127a:	462a      	mov	r2, r5
 801127c:	f002 fe0a 	bl	8013e94 <__lshift>
 8011280:	901a      	str	r0, [sp, #104]	@ 0x68
 8011282:	2800      	cmp	r0, #0
 8011284:	d1d9      	bne.n	801123a <_strtod_l+0x73a>
 8011286:	e65a      	b.n	8010f3e <_strtod_l+0x43e>
 8011288:	2e00      	cmp	r6, #0
 801128a:	dd07      	ble.n	801129c <_strtod_l+0x79c>
 801128c:	4649      	mov	r1, r9
 801128e:	9805      	ldr	r0, [sp, #20]
 8011290:	4632      	mov	r2, r6
 8011292:	f002 fdff 	bl	8013e94 <__lshift>
 8011296:	4681      	mov	r9, r0
 8011298:	2800      	cmp	r0, #0
 801129a:	d0d8      	beq.n	801124e <_strtod_l+0x74e>
 801129c:	2f00      	cmp	r7, #0
 801129e:	dd08      	ble.n	80112b2 <_strtod_l+0x7b2>
 80112a0:	4641      	mov	r1, r8
 80112a2:	9805      	ldr	r0, [sp, #20]
 80112a4:	463a      	mov	r2, r7
 80112a6:	f002 fdf5 	bl	8013e94 <__lshift>
 80112aa:	4680      	mov	r8, r0
 80112ac:	2800      	cmp	r0, #0
 80112ae:	f43f ae46 	beq.w	8010f3e <_strtod_l+0x43e>
 80112b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112b4:	9805      	ldr	r0, [sp, #20]
 80112b6:	464a      	mov	r2, r9
 80112b8:	f002 fe74 	bl	8013fa4 <__mdiff>
 80112bc:	4604      	mov	r4, r0
 80112be:	2800      	cmp	r0, #0
 80112c0:	f43f ae3d 	beq.w	8010f3e <_strtod_l+0x43e>
 80112c4:	68c3      	ldr	r3, [r0, #12]
 80112c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112c8:	2300      	movs	r3, #0
 80112ca:	60c3      	str	r3, [r0, #12]
 80112cc:	4641      	mov	r1, r8
 80112ce:	f002 fe4d 	bl	8013f6c <__mcmp>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	da46      	bge.n	8011364 <_strtod_l+0x864>
 80112d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112d8:	ea53 030a 	orrs.w	r3, r3, sl
 80112dc:	d16c      	bne.n	80113b8 <_strtod_l+0x8b8>
 80112de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d168      	bne.n	80113b8 <_strtod_l+0x8b8>
 80112e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112ea:	0d1b      	lsrs	r3, r3, #20
 80112ec:	051b      	lsls	r3, r3, #20
 80112ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80112f2:	d961      	bls.n	80113b8 <_strtod_l+0x8b8>
 80112f4:	6963      	ldr	r3, [r4, #20]
 80112f6:	b913      	cbnz	r3, 80112fe <_strtod_l+0x7fe>
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	dd5c      	ble.n	80113b8 <_strtod_l+0x8b8>
 80112fe:	4621      	mov	r1, r4
 8011300:	2201      	movs	r2, #1
 8011302:	9805      	ldr	r0, [sp, #20]
 8011304:	f002 fdc6 	bl	8013e94 <__lshift>
 8011308:	4641      	mov	r1, r8
 801130a:	4604      	mov	r4, r0
 801130c:	f002 fe2e 	bl	8013f6c <__mcmp>
 8011310:	2800      	cmp	r0, #0
 8011312:	dd51      	ble.n	80113b8 <_strtod_l+0x8b8>
 8011314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011318:	9a08      	ldr	r2, [sp, #32]
 801131a:	0d1b      	lsrs	r3, r3, #20
 801131c:	051b      	lsls	r3, r3, #20
 801131e:	2a00      	cmp	r2, #0
 8011320:	d06b      	beq.n	80113fa <_strtod_l+0x8fa>
 8011322:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011326:	d868      	bhi.n	80113fa <_strtod_l+0x8fa>
 8011328:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801132c:	f67f ae9d 	bls.w	801106a <_strtod_l+0x56a>
 8011330:	4b0a      	ldr	r3, [pc, #40]	@ (801135c <_strtod_l+0x85c>)
 8011332:	4650      	mov	r0, sl
 8011334:	4659      	mov	r1, fp
 8011336:	2200      	movs	r2, #0
 8011338:	f7ef f95e 	bl	80005f8 <__aeabi_dmul>
 801133c:	4b08      	ldr	r3, [pc, #32]	@ (8011360 <_strtod_l+0x860>)
 801133e:	400b      	ands	r3, r1
 8011340:	4682      	mov	sl, r0
 8011342:	468b      	mov	fp, r1
 8011344:	2b00      	cmp	r3, #0
 8011346:	f47f ae05 	bne.w	8010f54 <_strtod_l+0x454>
 801134a:	9a05      	ldr	r2, [sp, #20]
 801134c:	2322      	movs	r3, #34	@ 0x22
 801134e:	6013      	str	r3, [r2, #0]
 8011350:	e600      	b.n	8010f54 <_strtod_l+0x454>
 8011352:	bf00      	nop
 8011354:	08015808 	.word	0x08015808
 8011358:	fffffc02 	.word	0xfffffc02
 801135c:	39500000 	.word	0x39500000
 8011360:	7ff00000 	.word	0x7ff00000
 8011364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011368:	d165      	bne.n	8011436 <_strtod_l+0x936>
 801136a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801136c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011370:	b35a      	cbz	r2, 80113ca <_strtod_l+0x8ca>
 8011372:	4a9f      	ldr	r2, [pc, #636]	@ (80115f0 <_strtod_l+0xaf0>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d12b      	bne.n	80113d0 <_strtod_l+0x8d0>
 8011378:	9b08      	ldr	r3, [sp, #32]
 801137a:	4651      	mov	r1, sl
 801137c:	b303      	cbz	r3, 80113c0 <_strtod_l+0x8c0>
 801137e:	4b9d      	ldr	r3, [pc, #628]	@ (80115f4 <_strtod_l+0xaf4>)
 8011380:	465a      	mov	r2, fp
 8011382:	4013      	ands	r3, r2
 8011384:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011388:	f04f 32ff 	mov.w	r2, #4294967295
 801138c:	d81b      	bhi.n	80113c6 <_strtod_l+0x8c6>
 801138e:	0d1b      	lsrs	r3, r3, #20
 8011390:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011394:	fa02 f303 	lsl.w	r3, r2, r3
 8011398:	4299      	cmp	r1, r3
 801139a:	d119      	bne.n	80113d0 <_strtod_l+0x8d0>
 801139c:	4b96      	ldr	r3, [pc, #600]	@ (80115f8 <_strtod_l+0xaf8>)
 801139e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d102      	bne.n	80113aa <_strtod_l+0x8aa>
 80113a4:	3101      	adds	r1, #1
 80113a6:	f43f adca 	beq.w	8010f3e <_strtod_l+0x43e>
 80113aa:	4b92      	ldr	r3, [pc, #584]	@ (80115f4 <_strtod_l+0xaf4>)
 80113ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113ae:	401a      	ands	r2, r3
 80113b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80113b4:	f04f 0a00 	mov.w	sl, #0
 80113b8:	9b08      	ldr	r3, [sp, #32]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d1b8      	bne.n	8011330 <_strtod_l+0x830>
 80113be:	e5c9      	b.n	8010f54 <_strtod_l+0x454>
 80113c0:	f04f 33ff 	mov.w	r3, #4294967295
 80113c4:	e7e8      	b.n	8011398 <_strtod_l+0x898>
 80113c6:	4613      	mov	r3, r2
 80113c8:	e7e6      	b.n	8011398 <_strtod_l+0x898>
 80113ca:	ea53 030a 	orrs.w	r3, r3, sl
 80113ce:	d0a1      	beq.n	8011314 <_strtod_l+0x814>
 80113d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113d2:	b1db      	cbz	r3, 801140c <_strtod_l+0x90c>
 80113d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113d6:	4213      	tst	r3, r2
 80113d8:	d0ee      	beq.n	80113b8 <_strtod_l+0x8b8>
 80113da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113dc:	9a08      	ldr	r2, [sp, #32]
 80113de:	4650      	mov	r0, sl
 80113e0:	4659      	mov	r1, fp
 80113e2:	b1bb      	cbz	r3, 8011414 <_strtod_l+0x914>
 80113e4:	f7ff fb6c 	bl	8010ac0 <sulp>
 80113e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113ec:	ec53 2b10 	vmov	r2, r3, d0
 80113f0:	f7ee ff4c 	bl	800028c <__adddf3>
 80113f4:	4682      	mov	sl, r0
 80113f6:	468b      	mov	fp, r1
 80113f8:	e7de      	b.n	80113b8 <_strtod_l+0x8b8>
 80113fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80113fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011402:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011406:	f04f 3aff 	mov.w	sl, #4294967295
 801140a:	e7d5      	b.n	80113b8 <_strtod_l+0x8b8>
 801140c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801140e:	ea13 0f0a 	tst.w	r3, sl
 8011412:	e7e1      	b.n	80113d8 <_strtod_l+0x8d8>
 8011414:	f7ff fb54 	bl	8010ac0 <sulp>
 8011418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801141c:	ec53 2b10 	vmov	r2, r3, d0
 8011420:	f7ee ff32 	bl	8000288 <__aeabi_dsub>
 8011424:	2200      	movs	r2, #0
 8011426:	2300      	movs	r3, #0
 8011428:	4682      	mov	sl, r0
 801142a:	468b      	mov	fp, r1
 801142c:	f7ef fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011430:	2800      	cmp	r0, #0
 8011432:	d0c1      	beq.n	80113b8 <_strtod_l+0x8b8>
 8011434:	e619      	b.n	801106a <_strtod_l+0x56a>
 8011436:	4641      	mov	r1, r8
 8011438:	4620      	mov	r0, r4
 801143a:	f002 ff0f 	bl	801425c <__ratio>
 801143e:	ec57 6b10 	vmov	r6, r7, d0
 8011442:	2200      	movs	r2, #0
 8011444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011448:	4630      	mov	r0, r6
 801144a:	4639      	mov	r1, r7
 801144c:	f7ef fb50 	bl	8000af0 <__aeabi_dcmple>
 8011450:	2800      	cmp	r0, #0
 8011452:	d06f      	beq.n	8011534 <_strtod_l+0xa34>
 8011454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011456:	2b00      	cmp	r3, #0
 8011458:	d17a      	bne.n	8011550 <_strtod_l+0xa50>
 801145a:	f1ba 0f00 	cmp.w	sl, #0
 801145e:	d158      	bne.n	8011512 <_strtod_l+0xa12>
 8011460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011466:	2b00      	cmp	r3, #0
 8011468:	d15a      	bne.n	8011520 <_strtod_l+0xa20>
 801146a:	4b64      	ldr	r3, [pc, #400]	@ (80115fc <_strtod_l+0xafc>)
 801146c:	2200      	movs	r2, #0
 801146e:	4630      	mov	r0, r6
 8011470:	4639      	mov	r1, r7
 8011472:	f7ef fb33 	bl	8000adc <__aeabi_dcmplt>
 8011476:	2800      	cmp	r0, #0
 8011478:	d159      	bne.n	801152e <_strtod_l+0xa2e>
 801147a:	4630      	mov	r0, r6
 801147c:	4639      	mov	r1, r7
 801147e:	4b60      	ldr	r3, [pc, #384]	@ (8011600 <_strtod_l+0xb00>)
 8011480:	2200      	movs	r2, #0
 8011482:	f7ef f8b9 	bl	80005f8 <__aeabi_dmul>
 8011486:	4606      	mov	r6, r0
 8011488:	460f      	mov	r7, r1
 801148a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801148e:	9606      	str	r6, [sp, #24]
 8011490:	9307      	str	r3, [sp, #28]
 8011492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011496:	4d57      	ldr	r5, [pc, #348]	@ (80115f4 <_strtod_l+0xaf4>)
 8011498:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801149c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801149e:	401d      	ands	r5, r3
 80114a0:	4b58      	ldr	r3, [pc, #352]	@ (8011604 <_strtod_l+0xb04>)
 80114a2:	429d      	cmp	r5, r3
 80114a4:	f040 80b2 	bne.w	801160c <_strtod_l+0xb0c>
 80114a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80114ae:	ec4b ab10 	vmov	d0, sl, fp
 80114b2:	f002 fe0b 	bl	80140cc <__ulp>
 80114b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80114ba:	ec51 0b10 	vmov	r0, r1, d0
 80114be:	f7ef f89b 	bl	80005f8 <__aeabi_dmul>
 80114c2:	4652      	mov	r2, sl
 80114c4:	465b      	mov	r3, fp
 80114c6:	f7ee fee1 	bl	800028c <__adddf3>
 80114ca:	460b      	mov	r3, r1
 80114cc:	4949      	ldr	r1, [pc, #292]	@ (80115f4 <_strtod_l+0xaf4>)
 80114ce:	4a4e      	ldr	r2, [pc, #312]	@ (8011608 <_strtod_l+0xb08>)
 80114d0:	4019      	ands	r1, r3
 80114d2:	4291      	cmp	r1, r2
 80114d4:	4682      	mov	sl, r0
 80114d6:	d942      	bls.n	801155e <_strtod_l+0xa5e>
 80114d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114da:	4b47      	ldr	r3, [pc, #284]	@ (80115f8 <_strtod_l+0xaf8>)
 80114dc:	429a      	cmp	r2, r3
 80114de:	d103      	bne.n	80114e8 <_strtod_l+0x9e8>
 80114e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114e2:	3301      	adds	r3, #1
 80114e4:	f43f ad2b 	beq.w	8010f3e <_strtod_l+0x43e>
 80114e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80115f8 <_strtod_l+0xaf8>
 80114ec:	f04f 3aff 	mov.w	sl, #4294967295
 80114f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114f2:	9805      	ldr	r0, [sp, #20]
 80114f4:	f002 fab6 	bl	8013a64 <_Bfree>
 80114f8:	9805      	ldr	r0, [sp, #20]
 80114fa:	4649      	mov	r1, r9
 80114fc:	f002 fab2 	bl	8013a64 <_Bfree>
 8011500:	9805      	ldr	r0, [sp, #20]
 8011502:	4641      	mov	r1, r8
 8011504:	f002 faae 	bl	8013a64 <_Bfree>
 8011508:	9805      	ldr	r0, [sp, #20]
 801150a:	4621      	mov	r1, r4
 801150c:	f002 faaa 	bl	8013a64 <_Bfree>
 8011510:	e618      	b.n	8011144 <_strtod_l+0x644>
 8011512:	f1ba 0f01 	cmp.w	sl, #1
 8011516:	d103      	bne.n	8011520 <_strtod_l+0xa20>
 8011518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801151a:	2b00      	cmp	r3, #0
 801151c:	f43f ada5 	beq.w	801106a <_strtod_l+0x56a>
 8011520:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80115d0 <_strtod_l+0xad0>
 8011524:	4f35      	ldr	r7, [pc, #212]	@ (80115fc <_strtod_l+0xafc>)
 8011526:	ed8d 7b06 	vstr	d7, [sp, #24]
 801152a:	2600      	movs	r6, #0
 801152c:	e7b1      	b.n	8011492 <_strtod_l+0x992>
 801152e:	4f34      	ldr	r7, [pc, #208]	@ (8011600 <_strtod_l+0xb00>)
 8011530:	2600      	movs	r6, #0
 8011532:	e7aa      	b.n	801148a <_strtod_l+0x98a>
 8011534:	4b32      	ldr	r3, [pc, #200]	@ (8011600 <_strtod_l+0xb00>)
 8011536:	4630      	mov	r0, r6
 8011538:	4639      	mov	r1, r7
 801153a:	2200      	movs	r2, #0
 801153c:	f7ef f85c 	bl	80005f8 <__aeabi_dmul>
 8011540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011542:	4606      	mov	r6, r0
 8011544:	460f      	mov	r7, r1
 8011546:	2b00      	cmp	r3, #0
 8011548:	d09f      	beq.n	801148a <_strtod_l+0x98a>
 801154a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801154e:	e7a0      	b.n	8011492 <_strtod_l+0x992>
 8011550:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80115d8 <_strtod_l+0xad8>
 8011554:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011558:	ec57 6b17 	vmov	r6, r7, d7
 801155c:	e799      	b.n	8011492 <_strtod_l+0x992>
 801155e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011562:	9b08      	ldr	r3, [sp, #32]
 8011564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1c1      	bne.n	80114f0 <_strtod_l+0x9f0>
 801156c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011570:	0d1b      	lsrs	r3, r3, #20
 8011572:	051b      	lsls	r3, r3, #20
 8011574:	429d      	cmp	r5, r3
 8011576:	d1bb      	bne.n	80114f0 <_strtod_l+0x9f0>
 8011578:	4630      	mov	r0, r6
 801157a:	4639      	mov	r1, r7
 801157c:	f7ef fb4c 	bl	8000c18 <__aeabi_d2lz>
 8011580:	f7ef f80c 	bl	800059c <__aeabi_l2d>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4630      	mov	r0, r6
 801158a:	4639      	mov	r1, r7
 801158c:	f7ee fe7c 	bl	8000288 <__aeabi_dsub>
 8011590:	460b      	mov	r3, r1
 8011592:	4602      	mov	r2, r0
 8011594:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011598:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801159c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801159e:	ea46 060a 	orr.w	r6, r6, sl
 80115a2:	431e      	orrs	r6, r3
 80115a4:	d06f      	beq.n	8011686 <_strtod_l+0xb86>
 80115a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80115e0 <_strtod_l+0xae0>)
 80115a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ac:	f7ef fa96 	bl	8000adc <__aeabi_dcmplt>
 80115b0:	2800      	cmp	r0, #0
 80115b2:	f47f accf 	bne.w	8010f54 <_strtod_l+0x454>
 80115b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80115e8 <_strtod_l+0xae8>)
 80115b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80115c0:	f7ef faaa 	bl	8000b18 <__aeabi_dcmpgt>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	d093      	beq.n	80114f0 <_strtod_l+0x9f0>
 80115c8:	e4c4      	b.n	8010f54 <_strtod_l+0x454>
 80115ca:	bf00      	nop
 80115cc:	f3af 8000 	nop.w
 80115d0:	00000000 	.word	0x00000000
 80115d4:	bff00000 	.word	0xbff00000
 80115d8:	00000000 	.word	0x00000000
 80115dc:	3ff00000 	.word	0x3ff00000
 80115e0:	94a03595 	.word	0x94a03595
 80115e4:	3fdfffff 	.word	0x3fdfffff
 80115e8:	35afe535 	.word	0x35afe535
 80115ec:	3fe00000 	.word	0x3fe00000
 80115f0:	000fffff 	.word	0x000fffff
 80115f4:	7ff00000 	.word	0x7ff00000
 80115f8:	7fefffff 	.word	0x7fefffff
 80115fc:	3ff00000 	.word	0x3ff00000
 8011600:	3fe00000 	.word	0x3fe00000
 8011604:	7fe00000 	.word	0x7fe00000
 8011608:	7c9fffff 	.word	0x7c9fffff
 801160c:	9b08      	ldr	r3, [sp, #32]
 801160e:	b323      	cbz	r3, 801165a <_strtod_l+0xb5a>
 8011610:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011614:	d821      	bhi.n	801165a <_strtod_l+0xb5a>
 8011616:	a328      	add	r3, pc, #160	@ (adr r3, 80116b8 <_strtod_l+0xbb8>)
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	4630      	mov	r0, r6
 801161e:	4639      	mov	r1, r7
 8011620:	f7ef fa66 	bl	8000af0 <__aeabi_dcmple>
 8011624:	b1a0      	cbz	r0, 8011650 <_strtod_l+0xb50>
 8011626:	4639      	mov	r1, r7
 8011628:	4630      	mov	r0, r6
 801162a:	f7ef fabd 	bl	8000ba8 <__aeabi_d2uiz>
 801162e:	2801      	cmp	r0, #1
 8011630:	bf38      	it	cc
 8011632:	2001      	movcc	r0, #1
 8011634:	f7ee ff66 	bl	8000504 <__aeabi_ui2d>
 8011638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801163a:	4606      	mov	r6, r0
 801163c:	460f      	mov	r7, r1
 801163e:	b9fb      	cbnz	r3, 8011680 <_strtod_l+0xb80>
 8011640:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011644:	9014      	str	r0, [sp, #80]	@ 0x50
 8011646:	9315      	str	r3, [sp, #84]	@ 0x54
 8011648:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801164c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011652:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011656:	1b5b      	subs	r3, r3, r5
 8011658:	9311      	str	r3, [sp, #68]	@ 0x44
 801165a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801165e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011662:	f002 fd33 	bl	80140cc <__ulp>
 8011666:	4650      	mov	r0, sl
 8011668:	ec53 2b10 	vmov	r2, r3, d0
 801166c:	4659      	mov	r1, fp
 801166e:	f7ee ffc3 	bl	80005f8 <__aeabi_dmul>
 8011672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011676:	f7ee fe09 	bl	800028c <__adddf3>
 801167a:	4682      	mov	sl, r0
 801167c:	468b      	mov	fp, r1
 801167e:	e770      	b.n	8011562 <_strtod_l+0xa62>
 8011680:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011684:	e7e0      	b.n	8011648 <_strtod_l+0xb48>
 8011686:	a30e      	add	r3, pc, #56	@ (adr r3, 80116c0 <_strtod_l+0xbc0>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	f7ef fa26 	bl	8000adc <__aeabi_dcmplt>
 8011690:	e798      	b.n	80115c4 <_strtod_l+0xac4>
 8011692:	2300      	movs	r3, #0
 8011694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011696:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801169a:	6013      	str	r3, [r2, #0]
 801169c:	f7ff ba6d 	b.w	8010b7a <_strtod_l+0x7a>
 80116a0:	2a65      	cmp	r2, #101	@ 0x65
 80116a2:	f43f ab66 	beq.w	8010d72 <_strtod_l+0x272>
 80116a6:	2a45      	cmp	r2, #69	@ 0x45
 80116a8:	f43f ab63 	beq.w	8010d72 <_strtod_l+0x272>
 80116ac:	2301      	movs	r3, #1
 80116ae:	f7ff bb9e 	b.w	8010dee <_strtod_l+0x2ee>
 80116b2:	bf00      	nop
 80116b4:	f3af 8000 	nop.w
 80116b8:	ffc00000 	.word	0xffc00000
 80116bc:	41dfffff 	.word	0x41dfffff
 80116c0:	94a03595 	.word	0x94a03595
 80116c4:	3fcfffff 	.word	0x3fcfffff

080116c8 <strtod>:
 80116c8:	460a      	mov	r2, r1
 80116ca:	4601      	mov	r1, r0
 80116cc:	4802      	ldr	r0, [pc, #8]	@ (80116d8 <strtod+0x10>)
 80116ce:	4b03      	ldr	r3, [pc, #12]	@ (80116dc <strtod+0x14>)
 80116d0:	6800      	ldr	r0, [r0, #0]
 80116d2:	f7ff ba15 	b.w	8010b00 <_strtod_l>
 80116d6:	bf00      	nop
 80116d8:	200003d4 	.word	0x200003d4
 80116dc:	20000268 	.word	0x20000268

080116e0 <_strtol_l.constprop.0>:
 80116e0:	2b24      	cmp	r3, #36	@ 0x24
 80116e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e6:	4686      	mov	lr, r0
 80116e8:	4690      	mov	r8, r2
 80116ea:	d801      	bhi.n	80116f0 <_strtol_l.constprop.0+0x10>
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d106      	bne.n	80116fe <_strtol_l.constprop.0+0x1e>
 80116f0:	f000 ff2a 	bl	8012548 <__errno>
 80116f4:	2316      	movs	r3, #22
 80116f6:	6003      	str	r3, [r0, #0]
 80116f8:	2000      	movs	r0, #0
 80116fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fe:	4834      	ldr	r0, [pc, #208]	@ (80117d0 <_strtol_l.constprop.0+0xf0>)
 8011700:	460d      	mov	r5, r1
 8011702:	462a      	mov	r2, r5
 8011704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011708:	5d06      	ldrb	r6, [r0, r4]
 801170a:	f016 0608 	ands.w	r6, r6, #8
 801170e:	d1f8      	bne.n	8011702 <_strtol_l.constprop.0+0x22>
 8011710:	2c2d      	cmp	r4, #45	@ 0x2d
 8011712:	d12d      	bne.n	8011770 <_strtol_l.constprop.0+0x90>
 8011714:	782c      	ldrb	r4, [r5, #0]
 8011716:	2601      	movs	r6, #1
 8011718:	1c95      	adds	r5, r2, #2
 801171a:	f033 0210 	bics.w	r2, r3, #16
 801171e:	d109      	bne.n	8011734 <_strtol_l.constprop.0+0x54>
 8011720:	2c30      	cmp	r4, #48	@ 0x30
 8011722:	d12a      	bne.n	801177a <_strtol_l.constprop.0+0x9a>
 8011724:	782a      	ldrb	r2, [r5, #0]
 8011726:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801172a:	2a58      	cmp	r2, #88	@ 0x58
 801172c:	d125      	bne.n	801177a <_strtol_l.constprop.0+0x9a>
 801172e:	786c      	ldrb	r4, [r5, #1]
 8011730:	2310      	movs	r3, #16
 8011732:	3502      	adds	r5, #2
 8011734:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011738:	f10c 3cff 	add.w	ip, ip, #4294967295
 801173c:	2200      	movs	r2, #0
 801173e:	fbbc f9f3 	udiv	r9, ip, r3
 8011742:	4610      	mov	r0, r2
 8011744:	fb03 ca19 	mls	sl, r3, r9, ip
 8011748:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801174c:	2f09      	cmp	r7, #9
 801174e:	d81b      	bhi.n	8011788 <_strtol_l.constprop.0+0xa8>
 8011750:	463c      	mov	r4, r7
 8011752:	42a3      	cmp	r3, r4
 8011754:	dd27      	ble.n	80117a6 <_strtol_l.constprop.0+0xc6>
 8011756:	1c57      	adds	r7, r2, #1
 8011758:	d007      	beq.n	801176a <_strtol_l.constprop.0+0x8a>
 801175a:	4581      	cmp	r9, r0
 801175c:	d320      	bcc.n	80117a0 <_strtol_l.constprop.0+0xc0>
 801175e:	d101      	bne.n	8011764 <_strtol_l.constprop.0+0x84>
 8011760:	45a2      	cmp	sl, r4
 8011762:	db1d      	blt.n	80117a0 <_strtol_l.constprop.0+0xc0>
 8011764:	fb00 4003 	mla	r0, r0, r3, r4
 8011768:	2201      	movs	r2, #1
 801176a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801176e:	e7eb      	b.n	8011748 <_strtol_l.constprop.0+0x68>
 8011770:	2c2b      	cmp	r4, #43	@ 0x2b
 8011772:	bf04      	itt	eq
 8011774:	782c      	ldrbeq	r4, [r5, #0]
 8011776:	1c95      	addeq	r5, r2, #2
 8011778:	e7cf      	b.n	801171a <_strtol_l.constprop.0+0x3a>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1da      	bne.n	8011734 <_strtol_l.constprop.0+0x54>
 801177e:	2c30      	cmp	r4, #48	@ 0x30
 8011780:	bf0c      	ite	eq
 8011782:	2308      	moveq	r3, #8
 8011784:	230a      	movne	r3, #10
 8011786:	e7d5      	b.n	8011734 <_strtol_l.constprop.0+0x54>
 8011788:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801178c:	2f19      	cmp	r7, #25
 801178e:	d801      	bhi.n	8011794 <_strtol_l.constprop.0+0xb4>
 8011790:	3c37      	subs	r4, #55	@ 0x37
 8011792:	e7de      	b.n	8011752 <_strtol_l.constprop.0+0x72>
 8011794:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011798:	2f19      	cmp	r7, #25
 801179a:	d804      	bhi.n	80117a6 <_strtol_l.constprop.0+0xc6>
 801179c:	3c57      	subs	r4, #87	@ 0x57
 801179e:	e7d8      	b.n	8011752 <_strtol_l.constprop.0+0x72>
 80117a0:	f04f 32ff 	mov.w	r2, #4294967295
 80117a4:	e7e1      	b.n	801176a <_strtol_l.constprop.0+0x8a>
 80117a6:	1c53      	adds	r3, r2, #1
 80117a8:	d108      	bne.n	80117bc <_strtol_l.constprop.0+0xdc>
 80117aa:	2322      	movs	r3, #34	@ 0x22
 80117ac:	f8ce 3000 	str.w	r3, [lr]
 80117b0:	4660      	mov	r0, ip
 80117b2:	f1b8 0f00 	cmp.w	r8, #0
 80117b6:	d0a0      	beq.n	80116fa <_strtol_l.constprop.0+0x1a>
 80117b8:	1e69      	subs	r1, r5, #1
 80117ba:	e006      	b.n	80117ca <_strtol_l.constprop.0+0xea>
 80117bc:	b106      	cbz	r6, 80117c0 <_strtol_l.constprop.0+0xe0>
 80117be:	4240      	negs	r0, r0
 80117c0:	f1b8 0f00 	cmp.w	r8, #0
 80117c4:	d099      	beq.n	80116fa <_strtol_l.constprop.0+0x1a>
 80117c6:	2a00      	cmp	r2, #0
 80117c8:	d1f6      	bne.n	80117b8 <_strtol_l.constprop.0+0xd8>
 80117ca:	f8c8 1000 	str.w	r1, [r8]
 80117ce:	e794      	b.n	80116fa <_strtol_l.constprop.0+0x1a>
 80117d0:	08015831 	.word	0x08015831

080117d4 <strtol>:
 80117d4:	4613      	mov	r3, r2
 80117d6:	460a      	mov	r2, r1
 80117d8:	4601      	mov	r1, r0
 80117da:	4802      	ldr	r0, [pc, #8]	@ (80117e4 <strtol+0x10>)
 80117dc:	6800      	ldr	r0, [r0, #0]
 80117de:	f7ff bf7f 	b.w	80116e0 <_strtol_l.constprop.0>
 80117e2:	bf00      	nop
 80117e4:	200003d4 	.word	0x200003d4

080117e8 <__cvt>:
 80117e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117ec:	ec57 6b10 	vmov	r6, r7, d0
 80117f0:	2f00      	cmp	r7, #0
 80117f2:	460c      	mov	r4, r1
 80117f4:	4619      	mov	r1, r3
 80117f6:	463b      	mov	r3, r7
 80117f8:	bfbb      	ittet	lt
 80117fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80117fe:	461f      	movlt	r7, r3
 8011800:	2300      	movge	r3, #0
 8011802:	232d      	movlt	r3, #45	@ 0x2d
 8011804:	700b      	strb	r3, [r1, #0]
 8011806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011808:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801180c:	4691      	mov	r9, r2
 801180e:	f023 0820 	bic.w	r8, r3, #32
 8011812:	bfbc      	itt	lt
 8011814:	4632      	movlt	r2, r6
 8011816:	4616      	movlt	r6, r2
 8011818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801181c:	d005      	beq.n	801182a <__cvt+0x42>
 801181e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011822:	d100      	bne.n	8011826 <__cvt+0x3e>
 8011824:	3401      	adds	r4, #1
 8011826:	2102      	movs	r1, #2
 8011828:	e000      	b.n	801182c <__cvt+0x44>
 801182a:	2103      	movs	r1, #3
 801182c:	ab03      	add	r3, sp, #12
 801182e:	9301      	str	r3, [sp, #4]
 8011830:	ab02      	add	r3, sp, #8
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	ec47 6b10 	vmov	d0, r6, r7
 8011838:	4653      	mov	r3, sl
 801183a:	4622      	mov	r2, r4
 801183c:	f000 ff78 	bl	8012730 <_dtoa_r>
 8011840:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011844:	4605      	mov	r5, r0
 8011846:	d119      	bne.n	801187c <__cvt+0x94>
 8011848:	f019 0f01 	tst.w	r9, #1
 801184c:	d00e      	beq.n	801186c <__cvt+0x84>
 801184e:	eb00 0904 	add.w	r9, r0, r4
 8011852:	2200      	movs	r2, #0
 8011854:	2300      	movs	r3, #0
 8011856:	4630      	mov	r0, r6
 8011858:	4639      	mov	r1, r7
 801185a:	f7ef f935 	bl	8000ac8 <__aeabi_dcmpeq>
 801185e:	b108      	cbz	r0, 8011864 <__cvt+0x7c>
 8011860:	f8cd 900c 	str.w	r9, [sp, #12]
 8011864:	2230      	movs	r2, #48	@ 0x30
 8011866:	9b03      	ldr	r3, [sp, #12]
 8011868:	454b      	cmp	r3, r9
 801186a:	d31e      	bcc.n	80118aa <__cvt+0xc2>
 801186c:	9b03      	ldr	r3, [sp, #12]
 801186e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011870:	1b5b      	subs	r3, r3, r5
 8011872:	4628      	mov	r0, r5
 8011874:	6013      	str	r3, [r2, #0]
 8011876:	b004      	add	sp, #16
 8011878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011880:	eb00 0904 	add.w	r9, r0, r4
 8011884:	d1e5      	bne.n	8011852 <__cvt+0x6a>
 8011886:	7803      	ldrb	r3, [r0, #0]
 8011888:	2b30      	cmp	r3, #48	@ 0x30
 801188a:	d10a      	bne.n	80118a2 <__cvt+0xba>
 801188c:	2200      	movs	r2, #0
 801188e:	2300      	movs	r3, #0
 8011890:	4630      	mov	r0, r6
 8011892:	4639      	mov	r1, r7
 8011894:	f7ef f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8011898:	b918      	cbnz	r0, 80118a2 <__cvt+0xba>
 801189a:	f1c4 0401 	rsb	r4, r4, #1
 801189e:	f8ca 4000 	str.w	r4, [sl]
 80118a2:	f8da 3000 	ldr.w	r3, [sl]
 80118a6:	4499      	add	r9, r3
 80118a8:	e7d3      	b.n	8011852 <__cvt+0x6a>
 80118aa:	1c59      	adds	r1, r3, #1
 80118ac:	9103      	str	r1, [sp, #12]
 80118ae:	701a      	strb	r2, [r3, #0]
 80118b0:	e7d9      	b.n	8011866 <__cvt+0x7e>

080118b2 <__exponent>:
 80118b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118b4:	2900      	cmp	r1, #0
 80118b6:	bfba      	itte	lt
 80118b8:	4249      	neglt	r1, r1
 80118ba:	232d      	movlt	r3, #45	@ 0x2d
 80118bc:	232b      	movge	r3, #43	@ 0x2b
 80118be:	2909      	cmp	r1, #9
 80118c0:	7002      	strb	r2, [r0, #0]
 80118c2:	7043      	strb	r3, [r0, #1]
 80118c4:	dd29      	ble.n	801191a <__exponent+0x68>
 80118c6:	f10d 0307 	add.w	r3, sp, #7
 80118ca:	461d      	mov	r5, r3
 80118cc:	270a      	movs	r7, #10
 80118ce:	461a      	mov	r2, r3
 80118d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80118d4:	fb07 1416 	mls	r4, r7, r6, r1
 80118d8:	3430      	adds	r4, #48	@ 0x30
 80118da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80118de:	460c      	mov	r4, r1
 80118e0:	2c63      	cmp	r4, #99	@ 0x63
 80118e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118e6:	4631      	mov	r1, r6
 80118e8:	dcf1      	bgt.n	80118ce <__exponent+0x1c>
 80118ea:	3130      	adds	r1, #48	@ 0x30
 80118ec:	1e94      	subs	r4, r2, #2
 80118ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80118f2:	1c41      	adds	r1, r0, #1
 80118f4:	4623      	mov	r3, r4
 80118f6:	42ab      	cmp	r3, r5
 80118f8:	d30a      	bcc.n	8011910 <__exponent+0x5e>
 80118fa:	f10d 0309 	add.w	r3, sp, #9
 80118fe:	1a9b      	subs	r3, r3, r2
 8011900:	42ac      	cmp	r4, r5
 8011902:	bf88      	it	hi
 8011904:	2300      	movhi	r3, #0
 8011906:	3302      	adds	r3, #2
 8011908:	4403      	add	r3, r0
 801190a:	1a18      	subs	r0, r3, r0
 801190c:	b003      	add	sp, #12
 801190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011910:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011914:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011918:	e7ed      	b.n	80118f6 <__exponent+0x44>
 801191a:	2330      	movs	r3, #48	@ 0x30
 801191c:	3130      	adds	r1, #48	@ 0x30
 801191e:	7083      	strb	r3, [r0, #2]
 8011920:	70c1      	strb	r1, [r0, #3]
 8011922:	1d03      	adds	r3, r0, #4
 8011924:	e7f1      	b.n	801190a <__exponent+0x58>
	...

08011928 <_printf_float>:
 8011928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	b08d      	sub	sp, #52	@ 0x34
 801192e:	460c      	mov	r4, r1
 8011930:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011934:	4616      	mov	r6, r2
 8011936:	461f      	mov	r7, r3
 8011938:	4605      	mov	r5, r0
 801193a:	f000 fd55 	bl	80123e8 <_localeconv_r>
 801193e:	6803      	ldr	r3, [r0, #0]
 8011940:	9304      	str	r3, [sp, #16]
 8011942:	4618      	mov	r0, r3
 8011944:	f7ee fc94 	bl	8000270 <strlen>
 8011948:	2300      	movs	r3, #0
 801194a:	930a      	str	r3, [sp, #40]	@ 0x28
 801194c:	f8d8 3000 	ldr.w	r3, [r8]
 8011950:	9005      	str	r0, [sp, #20]
 8011952:	3307      	adds	r3, #7
 8011954:	f023 0307 	bic.w	r3, r3, #7
 8011958:	f103 0208 	add.w	r2, r3, #8
 801195c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011960:	f8d4 b000 	ldr.w	fp, [r4]
 8011964:	f8c8 2000 	str.w	r2, [r8]
 8011968:	e9d3 8900 	ldrd	r8, r9, [r3]
 801196c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011970:	9307      	str	r3, [sp, #28]
 8011972:	f8cd 8018 	str.w	r8, [sp, #24]
 8011976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801197a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801197e:	4b9c      	ldr	r3, [pc, #624]	@ (8011bf0 <_printf_float+0x2c8>)
 8011980:	f04f 32ff 	mov.w	r2, #4294967295
 8011984:	f7ef f8d2 	bl	8000b2c <__aeabi_dcmpun>
 8011988:	bb70      	cbnz	r0, 80119e8 <_printf_float+0xc0>
 801198a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801198e:	4b98      	ldr	r3, [pc, #608]	@ (8011bf0 <_printf_float+0x2c8>)
 8011990:	f04f 32ff 	mov.w	r2, #4294967295
 8011994:	f7ef f8ac 	bl	8000af0 <__aeabi_dcmple>
 8011998:	bb30      	cbnz	r0, 80119e8 <_printf_float+0xc0>
 801199a:	2200      	movs	r2, #0
 801199c:	2300      	movs	r3, #0
 801199e:	4640      	mov	r0, r8
 80119a0:	4649      	mov	r1, r9
 80119a2:	f7ef f89b 	bl	8000adc <__aeabi_dcmplt>
 80119a6:	b110      	cbz	r0, 80119ae <_printf_float+0x86>
 80119a8:	232d      	movs	r3, #45	@ 0x2d
 80119aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119ae:	4a91      	ldr	r2, [pc, #580]	@ (8011bf4 <_printf_float+0x2cc>)
 80119b0:	4b91      	ldr	r3, [pc, #580]	@ (8011bf8 <_printf_float+0x2d0>)
 80119b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80119b6:	bf94      	ite	ls
 80119b8:	4690      	movls	r8, r2
 80119ba:	4698      	movhi	r8, r3
 80119bc:	2303      	movs	r3, #3
 80119be:	6123      	str	r3, [r4, #16]
 80119c0:	f02b 0304 	bic.w	r3, fp, #4
 80119c4:	6023      	str	r3, [r4, #0]
 80119c6:	f04f 0900 	mov.w	r9, #0
 80119ca:	9700      	str	r7, [sp, #0]
 80119cc:	4633      	mov	r3, r6
 80119ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80119d0:	4621      	mov	r1, r4
 80119d2:	4628      	mov	r0, r5
 80119d4:	f000 f9d2 	bl	8011d7c <_printf_common>
 80119d8:	3001      	adds	r0, #1
 80119da:	f040 808d 	bne.w	8011af8 <_printf_float+0x1d0>
 80119de:	f04f 30ff 	mov.w	r0, #4294967295
 80119e2:	b00d      	add	sp, #52	@ 0x34
 80119e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e8:	4642      	mov	r2, r8
 80119ea:	464b      	mov	r3, r9
 80119ec:	4640      	mov	r0, r8
 80119ee:	4649      	mov	r1, r9
 80119f0:	f7ef f89c 	bl	8000b2c <__aeabi_dcmpun>
 80119f4:	b140      	cbz	r0, 8011a08 <_printf_float+0xe0>
 80119f6:	464b      	mov	r3, r9
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	bfbc      	itt	lt
 80119fc:	232d      	movlt	r3, #45	@ 0x2d
 80119fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011a02:	4a7e      	ldr	r2, [pc, #504]	@ (8011bfc <_printf_float+0x2d4>)
 8011a04:	4b7e      	ldr	r3, [pc, #504]	@ (8011c00 <_printf_float+0x2d8>)
 8011a06:	e7d4      	b.n	80119b2 <_printf_float+0x8a>
 8011a08:	6863      	ldr	r3, [r4, #4]
 8011a0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011a0e:	9206      	str	r2, [sp, #24]
 8011a10:	1c5a      	adds	r2, r3, #1
 8011a12:	d13b      	bne.n	8011a8c <_printf_float+0x164>
 8011a14:	2306      	movs	r3, #6
 8011a16:	6063      	str	r3, [r4, #4]
 8011a18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	6022      	str	r2, [r4, #0]
 8011a20:	9303      	str	r3, [sp, #12]
 8011a22:	ab0a      	add	r3, sp, #40	@ 0x28
 8011a24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011a28:	ab09      	add	r3, sp, #36	@ 0x24
 8011a2a:	9300      	str	r3, [sp, #0]
 8011a2c:	6861      	ldr	r1, [r4, #4]
 8011a2e:	ec49 8b10 	vmov	d0, r8, r9
 8011a32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011a36:	4628      	mov	r0, r5
 8011a38:	f7ff fed6 	bl	80117e8 <__cvt>
 8011a3c:	9b06      	ldr	r3, [sp, #24]
 8011a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a40:	2b47      	cmp	r3, #71	@ 0x47
 8011a42:	4680      	mov	r8, r0
 8011a44:	d129      	bne.n	8011a9a <_printf_float+0x172>
 8011a46:	1cc8      	adds	r0, r1, #3
 8011a48:	db02      	blt.n	8011a50 <_printf_float+0x128>
 8011a4a:	6863      	ldr	r3, [r4, #4]
 8011a4c:	4299      	cmp	r1, r3
 8011a4e:	dd41      	ble.n	8011ad4 <_printf_float+0x1ac>
 8011a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8011a54:	fa5f fa8a 	uxtb.w	sl, sl
 8011a58:	3901      	subs	r1, #1
 8011a5a:	4652      	mov	r2, sl
 8011a5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011a60:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a62:	f7ff ff26 	bl	80118b2 <__exponent>
 8011a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a68:	1813      	adds	r3, r2, r0
 8011a6a:	2a01      	cmp	r2, #1
 8011a6c:	4681      	mov	r9, r0
 8011a6e:	6123      	str	r3, [r4, #16]
 8011a70:	dc02      	bgt.n	8011a78 <_printf_float+0x150>
 8011a72:	6822      	ldr	r2, [r4, #0]
 8011a74:	07d2      	lsls	r2, r2, #31
 8011a76:	d501      	bpl.n	8011a7c <_printf_float+0x154>
 8011a78:	3301      	adds	r3, #1
 8011a7a:	6123      	str	r3, [r4, #16]
 8011a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d0a2      	beq.n	80119ca <_printf_float+0xa2>
 8011a84:	232d      	movs	r3, #45	@ 0x2d
 8011a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a8a:	e79e      	b.n	80119ca <_printf_float+0xa2>
 8011a8c:	9a06      	ldr	r2, [sp, #24]
 8011a8e:	2a47      	cmp	r2, #71	@ 0x47
 8011a90:	d1c2      	bne.n	8011a18 <_printf_float+0xf0>
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1c0      	bne.n	8011a18 <_printf_float+0xf0>
 8011a96:	2301      	movs	r3, #1
 8011a98:	e7bd      	b.n	8011a16 <_printf_float+0xee>
 8011a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011a9e:	d9db      	bls.n	8011a58 <_printf_float+0x130>
 8011aa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011aa4:	d118      	bne.n	8011ad8 <_printf_float+0x1b0>
 8011aa6:	2900      	cmp	r1, #0
 8011aa8:	6863      	ldr	r3, [r4, #4]
 8011aaa:	dd0b      	ble.n	8011ac4 <_printf_float+0x19c>
 8011aac:	6121      	str	r1, [r4, #16]
 8011aae:	b913      	cbnz	r3, 8011ab6 <_printf_float+0x18e>
 8011ab0:	6822      	ldr	r2, [r4, #0]
 8011ab2:	07d0      	lsls	r0, r2, #31
 8011ab4:	d502      	bpl.n	8011abc <_printf_float+0x194>
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	440b      	add	r3, r1
 8011aba:	6123      	str	r3, [r4, #16]
 8011abc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011abe:	f04f 0900 	mov.w	r9, #0
 8011ac2:	e7db      	b.n	8011a7c <_printf_float+0x154>
 8011ac4:	b913      	cbnz	r3, 8011acc <_printf_float+0x1a4>
 8011ac6:	6822      	ldr	r2, [r4, #0]
 8011ac8:	07d2      	lsls	r2, r2, #31
 8011aca:	d501      	bpl.n	8011ad0 <_printf_float+0x1a8>
 8011acc:	3302      	adds	r3, #2
 8011ace:	e7f4      	b.n	8011aba <_printf_float+0x192>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e7f2      	b.n	8011aba <_printf_float+0x192>
 8011ad4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ada:	4299      	cmp	r1, r3
 8011adc:	db05      	blt.n	8011aea <_printf_float+0x1c2>
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	6121      	str	r1, [r4, #16]
 8011ae2:	07d8      	lsls	r0, r3, #31
 8011ae4:	d5ea      	bpl.n	8011abc <_printf_float+0x194>
 8011ae6:	1c4b      	adds	r3, r1, #1
 8011ae8:	e7e7      	b.n	8011aba <_printf_float+0x192>
 8011aea:	2900      	cmp	r1, #0
 8011aec:	bfd4      	ite	le
 8011aee:	f1c1 0202 	rsble	r2, r1, #2
 8011af2:	2201      	movgt	r2, #1
 8011af4:	4413      	add	r3, r2
 8011af6:	e7e0      	b.n	8011aba <_printf_float+0x192>
 8011af8:	6823      	ldr	r3, [r4, #0]
 8011afa:	055a      	lsls	r2, r3, #21
 8011afc:	d407      	bmi.n	8011b0e <_printf_float+0x1e6>
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	4642      	mov	r2, r8
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d12b      	bne.n	8011b64 <_printf_float+0x23c>
 8011b0c:	e767      	b.n	80119de <_printf_float+0xb6>
 8011b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011b12:	f240 80dd 	bls.w	8011cd0 <_printf_float+0x3a8>
 8011b16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f7ee ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d033      	beq.n	8011b8e <_printf_float+0x266>
 8011b26:	4a37      	ldr	r2, [pc, #220]	@ (8011c04 <_printf_float+0x2dc>)
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4631      	mov	r1, r6
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	47b8      	blx	r7
 8011b30:	3001      	adds	r0, #1
 8011b32:	f43f af54 	beq.w	80119de <_printf_float+0xb6>
 8011b36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011b3a:	4543      	cmp	r3, r8
 8011b3c:	db02      	blt.n	8011b44 <_printf_float+0x21c>
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	07d8      	lsls	r0, r3, #31
 8011b42:	d50f      	bpl.n	8011b64 <_printf_float+0x23c>
 8011b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b48:	4631      	mov	r1, r6
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	47b8      	blx	r7
 8011b4e:	3001      	adds	r0, #1
 8011b50:	f43f af45 	beq.w	80119de <_printf_float+0xb6>
 8011b54:	f04f 0900 	mov.w	r9, #0
 8011b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b5c:	f104 0a1a 	add.w	sl, r4, #26
 8011b60:	45c8      	cmp	r8, r9
 8011b62:	dc09      	bgt.n	8011b78 <_printf_float+0x250>
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	079b      	lsls	r3, r3, #30
 8011b68:	f100 8103 	bmi.w	8011d72 <_printf_float+0x44a>
 8011b6c:	68e0      	ldr	r0, [r4, #12]
 8011b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b70:	4298      	cmp	r0, r3
 8011b72:	bfb8      	it	lt
 8011b74:	4618      	movlt	r0, r3
 8011b76:	e734      	b.n	80119e2 <_printf_float+0xba>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f af2b 	beq.w	80119de <_printf_float+0xb6>
 8011b88:	f109 0901 	add.w	r9, r9, #1
 8011b8c:	e7e8      	b.n	8011b60 <_printf_float+0x238>
 8011b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dc39      	bgt.n	8011c08 <_printf_float+0x2e0>
 8011b94:	4a1b      	ldr	r2, [pc, #108]	@ (8011c04 <_printf_float+0x2dc>)
 8011b96:	2301      	movs	r3, #1
 8011b98:	4631      	mov	r1, r6
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	47b8      	blx	r7
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	f43f af1d 	beq.w	80119de <_printf_float+0xb6>
 8011ba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011ba8:	ea59 0303 	orrs.w	r3, r9, r3
 8011bac:	d102      	bne.n	8011bb4 <_printf_float+0x28c>
 8011bae:	6823      	ldr	r3, [r4, #0]
 8011bb0:	07d9      	lsls	r1, r3, #31
 8011bb2:	d5d7      	bpl.n	8011b64 <_printf_float+0x23c>
 8011bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bb8:	4631      	mov	r1, r6
 8011bba:	4628      	mov	r0, r5
 8011bbc:	47b8      	blx	r7
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	f43f af0d 	beq.w	80119de <_printf_float+0xb6>
 8011bc4:	f04f 0a00 	mov.w	sl, #0
 8011bc8:	f104 0b1a 	add.w	fp, r4, #26
 8011bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bce:	425b      	negs	r3, r3
 8011bd0:	4553      	cmp	r3, sl
 8011bd2:	dc01      	bgt.n	8011bd8 <_printf_float+0x2b0>
 8011bd4:	464b      	mov	r3, r9
 8011bd6:	e793      	b.n	8011b00 <_printf_float+0x1d8>
 8011bd8:	2301      	movs	r3, #1
 8011bda:	465a      	mov	r2, fp
 8011bdc:	4631      	mov	r1, r6
 8011bde:	4628      	mov	r0, r5
 8011be0:	47b8      	blx	r7
 8011be2:	3001      	adds	r0, #1
 8011be4:	f43f aefb 	beq.w	80119de <_printf_float+0xb6>
 8011be8:	f10a 0a01 	add.w	sl, sl, #1
 8011bec:	e7ee      	b.n	8011bcc <_printf_float+0x2a4>
 8011bee:	bf00      	nop
 8011bf0:	7fefffff 	.word	0x7fefffff
 8011bf4:	08015931 	.word	0x08015931
 8011bf8:	08015935 	.word	0x08015935
 8011bfc:	08015939 	.word	0x08015939
 8011c00:	0801593d 	.word	0x0801593d
 8011c04:	08015941 	.word	0x08015941
 8011c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011c0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011c0e:	4553      	cmp	r3, sl
 8011c10:	bfa8      	it	ge
 8011c12:	4653      	movge	r3, sl
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	4699      	mov	r9, r3
 8011c18:	dc36      	bgt.n	8011c88 <_printf_float+0x360>
 8011c1a:	f04f 0b00 	mov.w	fp, #0
 8011c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c22:	f104 021a 	add.w	r2, r4, #26
 8011c26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011c28:	9306      	str	r3, [sp, #24]
 8011c2a:	eba3 0309 	sub.w	r3, r3, r9
 8011c2e:	455b      	cmp	r3, fp
 8011c30:	dc31      	bgt.n	8011c96 <_printf_float+0x36e>
 8011c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c34:	459a      	cmp	sl, r3
 8011c36:	dc3a      	bgt.n	8011cae <_printf_float+0x386>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	07da      	lsls	r2, r3, #31
 8011c3c:	d437      	bmi.n	8011cae <_printf_float+0x386>
 8011c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c40:	ebaa 0903 	sub.w	r9, sl, r3
 8011c44:	9b06      	ldr	r3, [sp, #24]
 8011c46:	ebaa 0303 	sub.w	r3, sl, r3
 8011c4a:	4599      	cmp	r9, r3
 8011c4c:	bfa8      	it	ge
 8011c4e:	4699      	movge	r9, r3
 8011c50:	f1b9 0f00 	cmp.w	r9, #0
 8011c54:	dc33      	bgt.n	8011cbe <_printf_float+0x396>
 8011c56:	f04f 0800 	mov.w	r8, #0
 8011c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c5e:	f104 0b1a 	add.w	fp, r4, #26
 8011c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c64:	ebaa 0303 	sub.w	r3, sl, r3
 8011c68:	eba3 0309 	sub.w	r3, r3, r9
 8011c6c:	4543      	cmp	r3, r8
 8011c6e:	f77f af79 	ble.w	8011b64 <_printf_float+0x23c>
 8011c72:	2301      	movs	r3, #1
 8011c74:	465a      	mov	r2, fp
 8011c76:	4631      	mov	r1, r6
 8011c78:	4628      	mov	r0, r5
 8011c7a:	47b8      	blx	r7
 8011c7c:	3001      	adds	r0, #1
 8011c7e:	f43f aeae 	beq.w	80119de <_printf_float+0xb6>
 8011c82:	f108 0801 	add.w	r8, r8, #1
 8011c86:	e7ec      	b.n	8011c62 <_printf_float+0x33a>
 8011c88:	4642      	mov	r2, r8
 8011c8a:	4631      	mov	r1, r6
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	47b8      	blx	r7
 8011c90:	3001      	adds	r0, #1
 8011c92:	d1c2      	bne.n	8011c1a <_printf_float+0x2f2>
 8011c94:	e6a3      	b.n	80119de <_printf_float+0xb6>
 8011c96:	2301      	movs	r3, #1
 8011c98:	4631      	mov	r1, r6
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	9206      	str	r2, [sp, #24]
 8011c9e:	47b8      	blx	r7
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	f43f ae9c 	beq.w	80119de <_printf_float+0xb6>
 8011ca6:	9a06      	ldr	r2, [sp, #24]
 8011ca8:	f10b 0b01 	add.w	fp, fp, #1
 8011cac:	e7bb      	b.n	8011c26 <_printf_float+0x2fe>
 8011cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b8      	blx	r7
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d1c0      	bne.n	8011c3e <_printf_float+0x316>
 8011cbc:	e68f      	b.n	80119de <_printf_float+0xb6>
 8011cbe:	9a06      	ldr	r2, [sp, #24]
 8011cc0:	464b      	mov	r3, r9
 8011cc2:	4442      	add	r2, r8
 8011cc4:	4631      	mov	r1, r6
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	47b8      	blx	r7
 8011cca:	3001      	adds	r0, #1
 8011ccc:	d1c3      	bne.n	8011c56 <_printf_float+0x32e>
 8011cce:	e686      	b.n	80119de <_printf_float+0xb6>
 8011cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011cd4:	f1ba 0f01 	cmp.w	sl, #1
 8011cd8:	dc01      	bgt.n	8011cde <_printf_float+0x3b6>
 8011cda:	07db      	lsls	r3, r3, #31
 8011cdc:	d536      	bpl.n	8011d4c <_printf_float+0x424>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	4642      	mov	r2, r8
 8011ce2:	4631      	mov	r1, r6
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	47b8      	blx	r7
 8011ce8:	3001      	adds	r0, #1
 8011cea:	f43f ae78 	beq.w	80119de <_printf_float+0xb6>
 8011cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cf2:	4631      	mov	r1, r6
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	47b8      	blx	r7
 8011cf8:	3001      	adds	r0, #1
 8011cfa:	f43f ae70 	beq.w	80119de <_printf_float+0xb6>
 8011cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011d02:	2200      	movs	r2, #0
 8011d04:	2300      	movs	r3, #0
 8011d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d0a:	f7ee fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d0e:	b9c0      	cbnz	r0, 8011d42 <_printf_float+0x41a>
 8011d10:	4653      	mov	r3, sl
 8011d12:	f108 0201 	add.w	r2, r8, #1
 8011d16:	4631      	mov	r1, r6
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b8      	blx	r7
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	d10c      	bne.n	8011d3a <_printf_float+0x412>
 8011d20:	e65d      	b.n	80119de <_printf_float+0xb6>
 8011d22:	2301      	movs	r3, #1
 8011d24:	465a      	mov	r2, fp
 8011d26:	4631      	mov	r1, r6
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b8      	blx	r7
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	f43f ae56 	beq.w	80119de <_printf_float+0xb6>
 8011d32:	f108 0801 	add.w	r8, r8, #1
 8011d36:	45d0      	cmp	r8, sl
 8011d38:	dbf3      	blt.n	8011d22 <_printf_float+0x3fa>
 8011d3a:	464b      	mov	r3, r9
 8011d3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011d40:	e6df      	b.n	8011b02 <_printf_float+0x1da>
 8011d42:	f04f 0800 	mov.w	r8, #0
 8011d46:	f104 0b1a 	add.w	fp, r4, #26
 8011d4a:	e7f4      	b.n	8011d36 <_printf_float+0x40e>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	4642      	mov	r2, r8
 8011d50:	e7e1      	b.n	8011d16 <_printf_float+0x3ee>
 8011d52:	2301      	movs	r3, #1
 8011d54:	464a      	mov	r2, r9
 8011d56:	4631      	mov	r1, r6
 8011d58:	4628      	mov	r0, r5
 8011d5a:	47b8      	blx	r7
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	f43f ae3e 	beq.w	80119de <_printf_float+0xb6>
 8011d62:	f108 0801 	add.w	r8, r8, #1
 8011d66:	68e3      	ldr	r3, [r4, #12]
 8011d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d6a:	1a5b      	subs	r3, r3, r1
 8011d6c:	4543      	cmp	r3, r8
 8011d6e:	dcf0      	bgt.n	8011d52 <_printf_float+0x42a>
 8011d70:	e6fc      	b.n	8011b6c <_printf_float+0x244>
 8011d72:	f04f 0800 	mov.w	r8, #0
 8011d76:	f104 0919 	add.w	r9, r4, #25
 8011d7a:	e7f4      	b.n	8011d66 <_printf_float+0x43e>

08011d7c <_printf_common>:
 8011d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d80:	4616      	mov	r6, r2
 8011d82:	4698      	mov	r8, r3
 8011d84:	688a      	ldr	r2, [r1, #8]
 8011d86:	690b      	ldr	r3, [r1, #16]
 8011d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	bfb8      	it	lt
 8011d90:	4613      	movlt	r3, r2
 8011d92:	6033      	str	r3, [r6, #0]
 8011d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d98:	4607      	mov	r7, r0
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	b10a      	cbz	r2, 8011da2 <_printf_common+0x26>
 8011d9e:	3301      	adds	r3, #1
 8011da0:	6033      	str	r3, [r6, #0]
 8011da2:	6823      	ldr	r3, [r4, #0]
 8011da4:	0699      	lsls	r1, r3, #26
 8011da6:	bf42      	ittt	mi
 8011da8:	6833      	ldrmi	r3, [r6, #0]
 8011daa:	3302      	addmi	r3, #2
 8011dac:	6033      	strmi	r3, [r6, #0]
 8011dae:	6825      	ldr	r5, [r4, #0]
 8011db0:	f015 0506 	ands.w	r5, r5, #6
 8011db4:	d106      	bne.n	8011dc4 <_printf_common+0x48>
 8011db6:	f104 0a19 	add.w	sl, r4, #25
 8011dba:	68e3      	ldr	r3, [r4, #12]
 8011dbc:	6832      	ldr	r2, [r6, #0]
 8011dbe:	1a9b      	subs	r3, r3, r2
 8011dc0:	42ab      	cmp	r3, r5
 8011dc2:	dc26      	bgt.n	8011e12 <_printf_common+0x96>
 8011dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011dc8:	6822      	ldr	r2, [r4, #0]
 8011dca:	3b00      	subs	r3, #0
 8011dcc:	bf18      	it	ne
 8011dce:	2301      	movne	r3, #1
 8011dd0:	0692      	lsls	r2, r2, #26
 8011dd2:	d42b      	bmi.n	8011e2c <_printf_common+0xb0>
 8011dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011dd8:	4641      	mov	r1, r8
 8011dda:	4638      	mov	r0, r7
 8011ddc:	47c8      	blx	r9
 8011dde:	3001      	adds	r0, #1
 8011de0:	d01e      	beq.n	8011e20 <_printf_common+0xa4>
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	6922      	ldr	r2, [r4, #16]
 8011de6:	f003 0306 	and.w	r3, r3, #6
 8011dea:	2b04      	cmp	r3, #4
 8011dec:	bf02      	ittt	eq
 8011dee:	68e5      	ldreq	r5, [r4, #12]
 8011df0:	6833      	ldreq	r3, [r6, #0]
 8011df2:	1aed      	subeq	r5, r5, r3
 8011df4:	68a3      	ldr	r3, [r4, #8]
 8011df6:	bf0c      	ite	eq
 8011df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dfc:	2500      	movne	r5, #0
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	bfc4      	itt	gt
 8011e02:	1a9b      	subgt	r3, r3, r2
 8011e04:	18ed      	addgt	r5, r5, r3
 8011e06:	2600      	movs	r6, #0
 8011e08:	341a      	adds	r4, #26
 8011e0a:	42b5      	cmp	r5, r6
 8011e0c:	d11a      	bne.n	8011e44 <_printf_common+0xc8>
 8011e0e:	2000      	movs	r0, #0
 8011e10:	e008      	b.n	8011e24 <_printf_common+0xa8>
 8011e12:	2301      	movs	r3, #1
 8011e14:	4652      	mov	r2, sl
 8011e16:	4641      	mov	r1, r8
 8011e18:	4638      	mov	r0, r7
 8011e1a:	47c8      	blx	r9
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	d103      	bne.n	8011e28 <_printf_common+0xac>
 8011e20:	f04f 30ff 	mov.w	r0, #4294967295
 8011e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e28:	3501      	adds	r5, #1
 8011e2a:	e7c6      	b.n	8011dba <_printf_common+0x3e>
 8011e2c:	18e1      	adds	r1, r4, r3
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	2030      	movs	r0, #48	@ 0x30
 8011e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e36:	4422      	add	r2, r4
 8011e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e40:	3302      	adds	r3, #2
 8011e42:	e7c7      	b.n	8011dd4 <_printf_common+0x58>
 8011e44:	2301      	movs	r3, #1
 8011e46:	4622      	mov	r2, r4
 8011e48:	4641      	mov	r1, r8
 8011e4a:	4638      	mov	r0, r7
 8011e4c:	47c8      	blx	r9
 8011e4e:	3001      	adds	r0, #1
 8011e50:	d0e6      	beq.n	8011e20 <_printf_common+0xa4>
 8011e52:	3601      	adds	r6, #1
 8011e54:	e7d9      	b.n	8011e0a <_printf_common+0x8e>
	...

08011e58 <_printf_i>:
 8011e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e5c:	7e0f      	ldrb	r7, [r1, #24]
 8011e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e60:	2f78      	cmp	r7, #120	@ 0x78
 8011e62:	4691      	mov	r9, r2
 8011e64:	4680      	mov	r8, r0
 8011e66:	460c      	mov	r4, r1
 8011e68:	469a      	mov	sl, r3
 8011e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011e6e:	d807      	bhi.n	8011e80 <_printf_i+0x28>
 8011e70:	2f62      	cmp	r7, #98	@ 0x62
 8011e72:	d80a      	bhi.n	8011e8a <_printf_i+0x32>
 8011e74:	2f00      	cmp	r7, #0
 8011e76:	f000 80d2 	beq.w	801201e <_printf_i+0x1c6>
 8011e7a:	2f58      	cmp	r7, #88	@ 0x58
 8011e7c:	f000 80b9 	beq.w	8011ff2 <_printf_i+0x19a>
 8011e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e88:	e03a      	b.n	8011f00 <_printf_i+0xa8>
 8011e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e8e:	2b15      	cmp	r3, #21
 8011e90:	d8f6      	bhi.n	8011e80 <_printf_i+0x28>
 8011e92:	a101      	add	r1, pc, #4	@ (adr r1, 8011e98 <_printf_i+0x40>)
 8011e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e98:	08011ef1 	.word	0x08011ef1
 8011e9c:	08011f05 	.word	0x08011f05
 8011ea0:	08011e81 	.word	0x08011e81
 8011ea4:	08011e81 	.word	0x08011e81
 8011ea8:	08011e81 	.word	0x08011e81
 8011eac:	08011e81 	.word	0x08011e81
 8011eb0:	08011f05 	.word	0x08011f05
 8011eb4:	08011e81 	.word	0x08011e81
 8011eb8:	08011e81 	.word	0x08011e81
 8011ebc:	08011e81 	.word	0x08011e81
 8011ec0:	08011e81 	.word	0x08011e81
 8011ec4:	08012005 	.word	0x08012005
 8011ec8:	08011f2f 	.word	0x08011f2f
 8011ecc:	08011fbf 	.word	0x08011fbf
 8011ed0:	08011e81 	.word	0x08011e81
 8011ed4:	08011e81 	.word	0x08011e81
 8011ed8:	08012027 	.word	0x08012027
 8011edc:	08011e81 	.word	0x08011e81
 8011ee0:	08011f2f 	.word	0x08011f2f
 8011ee4:	08011e81 	.word	0x08011e81
 8011ee8:	08011e81 	.word	0x08011e81
 8011eec:	08011fc7 	.word	0x08011fc7
 8011ef0:	6833      	ldr	r3, [r6, #0]
 8011ef2:	1d1a      	adds	r2, r3, #4
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	6032      	str	r2, [r6, #0]
 8011ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f00:	2301      	movs	r3, #1
 8011f02:	e09d      	b.n	8012040 <_printf_i+0x1e8>
 8011f04:	6833      	ldr	r3, [r6, #0]
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	1d19      	adds	r1, r3, #4
 8011f0a:	6031      	str	r1, [r6, #0]
 8011f0c:	0606      	lsls	r6, r0, #24
 8011f0e:	d501      	bpl.n	8011f14 <_printf_i+0xbc>
 8011f10:	681d      	ldr	r5, [r3, #0]
 8011f12:	e003      	b.n	8011f1c <_printf_i+0xc4>
 8011f14:	0645      	lsls	r5, r0, #25
 8011f16:	d5fb      	bpl.n	8011f10 <_printf_i+0xb8>
 8011f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f1c:	2d00      	cmp	r5, #0
 8011f1e:	da03      	bge.n	8011f28 <_printf_i+0xd0>
 8011f20:	232d      	movs	r3, #45	@ 0x2d
 8011f22:	426d      	negs	r5, r5
 8011f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f28:	4859      	ldr	r0, [pc, #356]	@ (8012090 <_printf_i+0x238>)
 8011f2a:	230a      	movs	r3, #10
 8011f2c:	e011      	b.n	8011f52 <_printf_i+0xfa>
 8011f2e:	6821      	ldr	r1, [r4, #0]
 8011f30:	6833      	ldr	r3, [r6, #0]
 8011f32:	0608      	lsls	r0, r1, #24
 8011f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f38:	d402      	bmi.n	8011f40 <_printf_i+0xe8>
 8011f3a:	0649      	lsls	r1, r1, #25
 8011f3c:	bf48      	it	mi
 8011f3e:	b2ad      	uxthmi	r5, r5
 8011f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f42:	4853      	ldr	r0, [pc, #332]	@ (8012090 <_printf_i+0x238>)
 8011f44:	6033      	str	r3, [r6, #0]
 8011f46:	bf14      	ite	ne
 8011f48:	230a      	movne	r3, #10
 8011f4a:	2308      	moveq	r3, #8
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f52:	6866      	ldr	r6, [r4, #4]
 8011f54:	60a6      	str	r6, [r4, #8]
 8011f56:	2e00      	cmp	r6, #0
 8011f58:	bfa2      	ittt	ge
 8011f5a:	6821      	ldrge	r1, [r4, #0]
 8011f5c:	f021 0104 	bicge.w	r1, r1, #4
 8011f60:	6021      	strge	r1, [r4, #0]
 8011f62:	b90d      	cbnz	r5, 8011f68 <_printf_i+0x110>
 8011f64:	2e00      	cmp	r6, #0
 8011f66:	d04b      	beq.n	8012000 <_printf_i+0x1a8>
 8011f68:	4616      	mov	r6, r2
 8011f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8011f72:	5dc7      	ldrb	r7, [r0, r7]
 8011f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f78:	462f      	mov	r7, r5
 8011f7a:	42bb      	cmp	r3, r7
 8011f7c:	460d      	mov	r5, r1
 8011f7e:	d9f4      	bls.n	8011f6a <_printf_i+0x112>
 8011f80:	2b08      	cmp	r3, #8
 8011f82:	d10b      	bne.n	8011f9c <_printf_i+0x144>
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	07df      	lsls	r7, r3, #31
 8011f88:	d508      	bpl.n	8011f9c <_printf_i+0x144>
 8011f8a:	6923      	ldr	r3, [r4, #16]
 8011f8c:	6861      	ldr	r1, [r4, #4]
 8011f8e:	4299      	cmp	r1, r3
 8011f90:	bfde      	ittt	le
 8011f92:	2330      	movle	r3, #48	@ 0x30
 8011f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f9c:	1b92      	subs	r2, r2, r6
 8011f9e:	6122      	str	r2, [r4, #16]
 8011fa0:	f8cd a000 	str.w	sl, [sp]
 8011fa4:	464b      	mov	r3, r9
 8011fa6:	aa03      	add	r2, sp, #12
 8011fa8:	4621      	mov	r1, r4
 8011faa:	4640      	mov	r0, r8
 8011fac:	f7ff fee6 	bl	8011d7c <_printf_common>
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	d14a      	bne.n	801204a <_printf_i+0x1f2>
 8011fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb8:	b004      	add	sp, #16
 8011fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	f043 0320 	orr.w	r3, r3, #32
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	4833      	ldr	r0, [pc, #204]	@ (8012094 <_printf_i+0x23c>)
 8011fc8:	2778      	movs	r7, #120	@ 0x78
 8011fca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	6831      	ldr	r1, [r6, #0]
 8011fd2:	061f      	lsls	r7, r3, #24
 8011fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011fd8:	d402      	bmi.n	8011fe0 <_printf_i+0x188>
 8011fda:	065f      	lsls	r7, r3, #25
 8011fdc:	bf48      	it	mi
 8011fde:	b2ad      	uxthmi	r5, r5
 8011fe0:	6031      	str	r1, [r6, #0]
 8011fe2:	07d9      	lsls	r1, r3, #31
 8011fe4:	bf44      	itt	mi
 8011fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8011fea:	6023      	strmi	r3, [r4, #0]
 8011fec:	b11d      	cbz	r5, 8011ff6 <_printf_i+0x19e>
 8011fee:	2310      	movs	r3, #16
 8011ff0:	e7ac      	b.n	8011f4c <_printf_i+0xf4>
 8011ff2:	4827      	ldr	r0, [pc, #156]	@ (8012090 <_printf_i+0x238>)
 8011ff4:	e7e9      	b.n	8011fca <_printf_i+0x172>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	f023 0320 	bic.w	r3, r3, #32
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	e7f6      	b.n	8011fee <_printf_i+0x196>
 8012000:	4616      	mov	r6, r2
 8012002:	e7bd      	b.n	8011f80 <_printf_i+0x128>
 8012004:	6833      	ldr	r3, [r6, #0]
 8012006:	6825      	ldr	r5, [r4, #0]
 8012008:	6961      	ldr	r1, [r4, #20]
 801200a:	1d18      	adds	r0, r3, #4
 801200c:	6030      	str	r0, [r6, #0]
 801200e:	062e      	lsls	r6, r5, #24
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	d501      	bpl.n	8012018 <_printf_i+0x1c0>
 8012014:	6019      	str	r1, [r3, #0]
 8012016:	e002      	b.n	801201e <_printf_i+0x1c6>
 8012018:	0668      	lsls	r0, r5, #25
 801201a:	d5fb      	bpl.n	8012014 <_printf_i+0x1bc>
 801201c:	8019      	strh	r1, [r3, #0]
 801201e:	2300      	movs	r3, #0
 8012020:	6123      	str	r3, [r4, #16]
 8012022:	4616      	mov	r6, r2
 8012024:	e7bc      	b.n	8011fa0 <_printf_i+0x148>
 8012026:	6833      	ldr	r3, [r6, #0]
 8012028:	1d1a      	adds	r2, r3, #4
 801202a:	6032      	str	r2, [r6, #0]
 801202c:	681e      	ldr	r6, [r3, #0]
 801202e:	6862      	ldr	r2, [r4, #4]
 8012030:	2100      	movs	r1, #0
 8012032:	4630      	mov	r0, r6
 8012034:	f7ee f8cc 	bl	80001d0 <memchr>
 8012038:	b108      	cbz	r0, 801203e <_printf_i+0x1e6>
 801203a:	1b80      	subs	r0, r0, r6
 801203c:	6060      	str	r0, [r4, #4]
 801203e:	6863      	ldr	r3, [r4, #4]
 8012040:	6123      	str	r3, [r4, #16]
 8012042:	2300      	movs	r3, #0
 8012044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012048:	e7aa      	b.n	8011fa0 <_printf_i+0x148>
 801204a:	6923      	ldr	r3, [r4, #16]
 801204c:	4632      	mov	r2, r6
 801204e:	4649      	mov	r1, r9
 8012050:	4640      	mov	r0, r8
 8012052:	47d0      	blx	sl
 8012054:	3001      	adds	r0, #1
 8012056:	d0ad      	beq.n	8011fb4 <_printf_i+0x15c>
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	079b      	lsls	r3, r3, #30
 801205c:	d413      	bmi.n	8012086 <_printf_i+0x22e>
 801205e:	68e0      	ldr	r0, [r4, #12]
 8012060:	9b03      	ldr	r3, [sp, #12]
 8012062:	4298      	cmp	r0, r3
 8012064:	bfb8      	it	lt
 8012066:	4618      	movlt	r0, r3
 8012068:	e7a6      	b.n	8011fb8 <_printf_i+0x160>
 801206a:	2301      	movs	r3, #1
 801206c:	4632      	mov	r2, r6
 801206e:	4649      	mov	r1, r9
 8012070:	4640      	mov	r0, r8
 8012072:	47d0      	blx	sl
 8012074:	3001      	adds	r0, #1
 8012076:	d09d      	beq.n	8011fb4 <_printf_i+0x15c>
 8012078:	3501      	adds	r5, #1
 801207a:	68e3      	ldr	r3, [r4, #12]
 801207c:	9903      	ldr	r1, [sp, #12]
 801207e:	1a5b      	subs	r3, r3, r1
 8012080:	42ab      	cmp	r3, r5
 8012082:	dcf2      	bgt.n	801206a <_printf_i+0x212>
 8012084:	e7eb      	b.n	801205e <_printf_i+0x206>
 8012086:	2500      	movs	r5, #0
 8012088:	f104 0619 	add.w	r6, r4, #25
 801208c:	e7f5      	b.n	801207a <_printf_i+0x222>
 801208e:	bf00      	nop
 8012090:	08015943 	.word	0x08015943
 8012094:	08015954 	.word	0x08015954

08012098 <std>:
 8012098:	2300      	movs	r3, #0
 801209a:	b510      	push	{r4, lr}
 801209c:	4604      	mov	r4, r0
 801209e:	e9c0 3300 	strd	r3, r3, [r0]
 80120a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120a6:	6083      	str	r3, [r0, #8]
 80120a8:	8181      	strh	r1, [r0, #12]
 80120aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80120ac:	81c2      	strh	r2, [r0, #14]
 80120ae:	6183      	str	r3, [r0, #24]
 80120b0:	4619      	mov	r1, r3
 80120b2:	2208      	movs	r2, #8
 80120b4:	305c      	adds	r0, #92	@ 0x5c
 80120b6:	f000 f914 	bl	80122e2 <memset>
 80120ba:	4b0d      	ldr	r3, [pc, #52]	@ (80120f0 <std+0x58>)
 80120bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80120be:	4b0d      	ldr	r3, [pc, #52]	@ (80120f4 <std+0x5c>)
 80120c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80120c2:	4b0d      	ldr	r3, [pc, #52]	@ (80120f8 <std+0x60>)
 80120c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80120c6:	4b0d      	ldr	r3, [pc, #52]	@ (80120fc <std+0x64>)
 80120c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80120ca:	4b0d      	ldr	r3, [pc, #52]	@ (8012100 <std+0x68>)
 80120cc:	6224      	str	r4, [r4, #32]
 80120ce:	429c      	cmp	r4, r3
 80120d0:	d006      	beq.n	80120e0 <std+0x48>
 80120d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80120d6:	4294      	cmp	r4, r2
 80120d8:	d002      	beq.n	80120e0 <std+0x48>
 80120da:	33d0      	adds	r3, #208	@ 0xd0
 80120dc:	429c      	cmp	r4, r3
 80120de:	d105      	bne.n	80120ec <std+0x54>
 80120e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80120e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e8:	f000 ba58 	b.w	801259c <__retarget_lock_init_recursive>
 80120ec:	bd10      	pop	{r4, pc}
 80120ee:	bf00      	nop
 80120f0:	0801225d 	.word	0x0801225d
 80120f4:	0801227f 	.word	0x0801227f
 80120f8:	080122b7 	.word	0x080122b7
 80120fc:	080122db 	.word	0x080122db
 8012100:	200058d0 	.word	0x200058d0

08012104 <stdio_exit_handler>:
 8012104:	4a02      	ldr	r2, [pc, #8]	@ (8012110 <stdio_exit_handler+0xc>)
 8012106:	4903      	ldr	r1, [pc, #12]	@ (8012114 <stdio_exit_handler+0x10>)
 8012108:	4803      	ldr	r0, [pc, #12]	@ (8012118 <stdio_exit_handler+0x14>)
 801210a:	f000 b869 	b.w	80121e0 <_fwalk_sglue>
 801210e:	bf00      	nop
 8012110:	2000025c 	.word	0x2000025c
 8012114:	08014719 	.word	0x08014719
 8012118:	200003d8 	.word	0x200003d8

0801211c <cleanup_stdio>:
 801211c:	6841      	ldr	r1, [r0, #4]
 801211e:	4b0c      	ldr	r3, [pc, #48]	@ (8012150 <cleanup_stdio+0x34>)
 8012120:	4299      	cmp	r1, r3
 8012122:	b510      	push	{r4, lr}
 8012124:	4604      	mov	r4, r0
 8012126:	d001      	beq.n	801212c <cleanup_stdio+0x10>
 8012128:	f002 faf6 	bl	8014718 <_fflush_r>
 801212c:	68a1      	ldr	r1, [r4, #8]
 801212e:	4b09      	ldr	r3, [pc, #36]	@ (8012154 <cleanup_stdio+0x38>)
 8012130:	4299      	cmp	r1, r3
 8012132:	d002      	beq.n	801213a <cleanup_stdio+0x1e>
 8012134:	4620      	mov	r0, r4
 8012136:	f002 faef 	bl	8014718 <_fflush_r>
 801213a:	68e1      	ldr	r1, [r4, #12]
 801213c:	4b06      	ldr	r3, [pc, #24]	@ (8012158 <cleanup_stdio+0x3c>)
 801213e:	4299      	cmp	r1, r3
 8012140:	d004      	beq.n	801214c <cleanup_stdio+0x30>
 8012142:	4620      	mov	r0, r4
 8012144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012148:	f002 bae6 	b.w	8014718 <_fflush_r>
 801214c:	bd10      	pop	{r4, pc}
 801214e:	bf00      	nop
 8012150:	200058d0 	.word	0x200058d0
 8012154:	20005938 	.word	0x20005938
 8012158:	200059a0 	.word	0x200059a0

0801215c <global_stdio_init.part.0>:
 801215c:	b510      	push	{r4, lr}
 801215e:	4b0b      	ldr	r3, [pc, #44]	@ (801218c <global_stdio_init.part.0+0x30>)
 8012160:	4c0b      	ldr	r4, [pc, #44]	@ (8012190 <global_stdio_init.part.0+0x34>)
 8012162:	4a0c      	ldr	r2, [pc, #48]	@ (8012194 <global_stdio_init.part.0+0x38>)
 8012164:	601a      	str	r2, [r3, #0]
 8012166:	4620      	mov	r0, r4
 8012168:	2200      	movs	r2, #0
 801216a:	2104      	movs	r1, #4
 801216c:	f7ff ff94 	bl	8012098 <std>
 8012170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012174:	2201      	movs	r2, #1
 8012176:	2109      	movs	r1, #9
 8012178:	f7ff ff8e 	bl	8012098 <std>
 801217c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012180:	2202      	movs	r2, #2
 8012182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012186:	2112      	movs	r1, #18
 8012188:	f7ff bf86 	b.w	8012098 <std>
 801218c:	20005a08 	.word	0x20005a08
 8012190:	200058d0 	.word	0x200058d0
 8012194:	08012105 	.word	0x08012105

08012198 <__sfp_lock_acquire>:
 8012198:	4801      	ldr	r0, [pc, #4]	@ (80121a0 <__sfp_lock_acquire+0x8>)
 801219a:	f000 ba00 	b.w	801259e <__retarget_lock_acquire_recursive>
 801219e:	bf00      	nop
 80121a0:	20005a11 	.word	0x20005a11

080121a4 <__sfp_lock_release>:
 80121a4:	4801      	ldr	r0, [pc, #4]	@ (80121ac <__sfp_lock_release+0x8>)
 80121a6:	f000 b9fb 	b.w	80125a0 <__retarget_lock_release_recursive>
 80121aa:	bf00      	nop
 80121ac:	20005a11 	.word	0x20005a11

080121b0 <__sinit>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	4604      	mov	r4, r0
 80121b4:	f7ff fff0 	bl	8012198 <__sfp_lock_acquire>
 80121b8:	6a23      	ldr	r3, [r4, #32]
 80121ba:	b11b      	cbz	r3, 80121c4 <__sinit+0x14>
 80121bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c0:	f7ff bff0 	b.w	80121a4 <__sfp_lock_release>
 80121c4:	4b04      	ldr	r3, [pc, #16]	@ (80121d8 <__sinit+0x28>)
 80121c6:	6223      	str	r3, [r4, #32]
 80121c8:	4b04      	ldr	r3, [pc, #16]	@ (80121dc <__sinit+0x2c>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1f5      	bne.n	80121bc <__sinit+0xc>
 80121d0:	f7ff ffc4 	bl	801215c <global_stdio_init.part.0>
 80121d4:	e7f2      	b.n	80121bc <__sinit+0xc>
 80121d6:	bf00      	nop
 80121d8:	0801211d 	.word	0x0801211d
 80121dc:	20005a08 	.word	0x20005a08

080121e0 <_fwalk_sglue>:
 80121e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121e4:	4607      	mov	r7, r0
 80121e6:	4688      	mov	r8, r1
 80121e8:	4614      	mov	r4, r2
 80121ea:	2600      	movs	r6, #0
 80121ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121f0:	f1b9 0901 	subs.w	r9, r9, #1
 80121f4:	d505      	bpl.n	8012202 <_fwalk_sglue+0x22>
 80121f6:	6824      	ldr	r4, [r4, #0]
 80121f8:	2c00      	cmp	r4, #0
 80121fa:	d1f7      	bne.n	80121ec <_fwalk_sglue+0xc>
 80121fc:	4630      	mov	r0, r6
 80121fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012202:	89ab      	ldrh	r3, [r5, #12]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d907      	bls.n	8012218 <_fwalk_sglue+0x38>
 8012208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801220c:	3301      	adds	r3, #1
 801220e:	d003      	beq.n	8012218 <_fwalk_sglue+0x38>
 8012210:	4629      	mov	r1, r5
 8012212:	4638      	mov	r0, r7
 8012214:	47c0      	blx	r8
 8012216:	4306      	orrs	r6, r0
 8012218:	3568      	adds	r5, #104	@ 0x68
 801221a:	e7e9      	b.n	80121f0 <_fwalk_sglue+0x10>

0801221c <siprintf>:
 801221c:	b40e      	push	{r1, r2, r3}
 801221e:	b500      	push	{lr}
 8012220:	b09c      	sub	sp, #112	@ 0x70
 8012222:	ab1d      	add	r3, sp, #116	@ 0x74
 8012224:	9002      	str	r0, [sp, #8]
 8012226:	9006      	str	r0, [sp, #24]
 8012228:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801222c:	4809      	ldr	r0, [pc, #36]	@ (8012254 <siprintf+0x38>)
 801222e:	9107      	str	r1, [sp, #28]
 8012230:	9104      	str	r1, [sp, #16]
 8012232:	4909      	ldr	r1, [pc, #36]	@ (8012258 <siprintf+0x3c>)
 8012234:	f853 2b04 	ldr.w	r2, [r3], #4
 8012238:	9105      	str	r1, [sp, #20]
 801223a:	6800      	ldr	r0, [r0, #0]
 801223c:	9301      	str	r3, [sp, #4]
 801223e:	a902      	add	r1, sp, #8
 8012240:	f002 f8ea 	bl	8014418 <_svfiprintf_r>
 8012244:	9b02      	ldr	r3, [sp, #8]
 8012246:	2200      	movs	r2, #0
 8012248:	701a      	strb	r2, [r3, #0]
 801224a:	b01c      	add	sp, #112	@ 0x70
 801224c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012250:	b003      	add	sp, #12
 8012252:	4770      	bx	lr
 8012254:	200003d4 	.word	0x200003d4
 8012258:	ffff0208 	.word	0xffff0208

0801225c <__sread>:
 801225c:	b510      	push	{r4, lr}
 801225e:	460c      	mov	r4, r1
 8012260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012264:	f000 f93c 	bl	80124e0 <_read_r>
 8012268:	2800      	cmp	r0, #0
 801226a:	bfab      	itete	ge
 801226c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801226e:	89a3      	ldrhlt	r3, [r4, #12]
 8012270:	181b      	addge	r3, r3, r0
 8012272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012276:	bfac      	ite	ge
 8012278:	6563      	strge	r3, [r4, #84]	@ 0x54
 801227a:	81a3      	strhlt	r3, [r4, #12]
 801227c:	bd10      	pop	{r4, pc}

0801227e <__swrite>:
 801227e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012282:	461f      	mov	r7, r3
 8012284:	898b      	ldrh	r3, [r1, #12]
 8012286:	05db      	lsls	r3, r3, #23
 8012288:	4605      	mov	r5, r0
 801228a:	460c      	mov	r4, r1
 801228c:	4616      	mov	r6, r2
 801228e:	d505      	bpl.n	801229c <__swrite+0x1e>
 8012290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012294:	2302      	movs	r3, #2
 8012296:	2200      	movs	r2, #0
 8012298:	f000 f910 	bl	80124bc <_lseek_r>
 801229c:	89a3      	ldrh	r3, [r4, #12]
 801229e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80122a6:	81a3      	strh	r3, [r4, #12]
 80122a8:	4632      	mov	r2, r6
 80122aa:	463b      	mov	r3, r7
 80122ac:	4628      	mov	r0, r5
 80122ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122b2:	f000 b937 	b.w	8012524 <_write_r>

080122b6 <__sseek>:
 80122b6:	b510      	push	{r4, lr}
 80122b8:	460c      	mov	r4, r1
 80122ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122be:	f000 f8fd 	bl	80124bc <_lseek_r>
 80122c2:	1c43      	adds	r3, r0, #1
 80122c4:	89a3      	ldrh	r3, [r4, #12]
 80122c6:	bf15      	itete	ne
 80122c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80122ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80122ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80122d2:	81a3      	strheq	r3, [r4, #12]
 80122d4:	bf18      	it	ne
 80122d6:	81a3      	strhne	r3, [r4, #12]
 80122d8:	bd10      	pop	{r4, pc}

080122da <__sclose>:
 80122da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122de:	f000 b887 	b.w	80123f0 <_close_r>

080122e2 <memset>:
 80122e2:	4402      	add	r2, r0
 80122e4:	4603      	mov	r3, r0
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d100      	bne.n	80122ec <memset+0xa>
 80122ea:	4770      	bx	lr
 80122ec:	f803 1b01 	strb.w	r1, [r3], #1
 80122f0:	e7f9      	b.n	80122e6 <memset+0x4>

080122f2 <strchr>:
 80122f2:	b2c9      	uxtb	r1, r1
 80122f4:	4603      	mov	r3, r0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122fc:	b112      	cbz	r2, 8012304 <strchr+0x12>
 80122fe:	428a      	cmp	r2, r1
 8012300:	d1f9      	bne.n	80122f6 <strchr+0x4>
 8012302:	4770      	bx	lr
 8012304:	2900      	cmp	r1, #0
 8012306:	bf18      	it	ne
 8012308:	2000      	movne	r0, #0
 801230a:	4770      	bx	lr

0801230c <strncmp>:
 801230c:	b510      	push	{r4, lr}
 801230e:	b16a      	cbz	r2, 801232c <strncmp+0x20>
 8012310:	3901      	subs	r1, #1
 8012312:	1884      	adds	r4, r0, r2
 8012314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012318:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801231c:	429a      	cmp	r2, r3
 801231e:	d103      	bne.n	8012328 <strncmp+0x1c>
 8012320:	42a0      	cmp	r0, r4
 8012322:	d001      	beq.n	8012328 <strncmp+0x1c>
 8012324:	2a00      	cmp	r2, #0
 8012326:	d1f5      	bne.n	8012314 <strncmp+0x8>
 8012328:	1ad0      	subs	r0, r2, r3
 801232a:	bd10      	pop	{r4, pc}
 801232c:	4610      	mov	r0, r2
 801232e:	e7fc      	b.n	801232a <strncmp+0x1e>

08012330 <strtok>:
 8012330:	4b16      	ldr	r3, [pc, #88]	@ (801238c <strtok+0x5c>)
 8012332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012336:	681f      	ldr	r7, [r3, #0]
 8012338:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801233a:	4605      	mov	r5, r0
 801233c:	460e      	mov	r6, r1
 801233e:	b9ec      	cbnz	r4, 801237c <strtok+0x4c>
 8012340:	2050      	movs	r0, #80	@ 0x50
 8012342:	f7fe faff 	bl	8010944 <malloc>
 8012346:	4602      	mov	r2, r0
 8012348:	6478      	str	r0, [r7, #68]	@ 0x44
 801234a:	b920      	cbnz	r0, 8012356 <strtok+0x26>
 801234c:	4b10      	ldr	r3, [pc, #64]	@ (8012390 <strtok+0x60>)
 801234e:	4811      	ldr	r0, [pc, #68]	@ (8012394 <strtok+0x64>)
 8012350:	215b      	movs	r1, #91	@ 0x5b
 8012352:	f000 f945 	bl	80125e0 <__assert_func>
 8012356:	e9c0 4400 	strd	r4, r4, [r0]
 801235a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801235e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012362:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012366:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801236a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801236e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012372:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012376:	6184      	str	r4, [r0, #24]
 8012378:	7704      	strb	r4, [r0, #28]
 801237a:	6244      	str	r4, [r0, #36]	@ 0x24
 801237c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801237e:	4631      	mov	r1, r6
 8012380:	4628      	mov	r0, r5
 8012382:	2301      	movs	r3, #1
 8012384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012388:	f000 b806 	b.w	8012398 <__strtok_r>
 801238c:	200003d4 	.word	0x200003d4
 8012390:	08015965 	.word	0x08015965
 8012394:	0801597c 	.word	0x0801597c

08012398 <__strtok_r>:
 8012398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801239a:	4604      	mov	r4, r0
 801239c:	b908      	cbnz	r0, 80123a2 <__strtok_r+0xa>
 801239e:	6814      	ldr	r4, [r2, #0]
 80123a0:	b144      	cbz	r4, 80123b4 <__strtok_r+0x1c>
 80123a2:	4620      	mov	r0, r4
 80123a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80123a8:	460f      	mov	r7, r1
 80123aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80123ae:	b91e      	cbnz	r6, 80123b8 <__strtok_r+0x20>
 80123b0:	b965      	cbnz	r5, 80123cc <__strtok_r+0x34>
 80123b2:	6015      	str	r5, [r2, #0]
 80123b4:	2000      	movs	r0, #0
 80123b6:	e005      	b.n	80123c4 <__strtok_r+0x2c>
 80123b8:	42b5      	cmp	r5, r6
 80123ba:	d1f6      	bne.n	80123aa <__strtok_r+0x12>
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1f0      	bne.n	80123a2 <__strtok_r+0xa>
 80123c0:	6014      	str	r4, [r2, #0]
 80123c2:	7003      	strb	r3, [r0, #0]
 80123c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123c6:	461c      	mov	r4, r3
 80123c8:	e00c      	b.n	80123e4 <__strtok_r+0x4c>
 80123ca:	b915      	cbnz	r5, 80123d2 <__strtok_r+0x3a>
 80123cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123d0:	460e      	mov	r6, r1
 80123d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80123d6:	42ab      	cmp	r3, r5
 80123d8:	d1f7      	bne.n	80123ca <__strtok_r+0x32>
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d0f3      	beq.n	80123c6 <__strtok_r+0x2e>
 80123de:	2300      	movs	r3, #0
 80123e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80123e4:	6014      	str	r4, [r2, #0]
 80123e6:	e7ed      	b.n	80123c4 <__strtok_r+0x2c>

080123e8 <_localeconv_r>:
 80123e8:	4800      	ldr	r0, [pc, #0]	@ (80123ec <_localeconv_r+0x4>)
 80123ea:	4770      	bx	lr
 80123ec:	20000358 	.word	0x20000358

080123f0 <_close_r>:
 80123f0:	b538      	push	{r3, r4, r5, lr}
 80123f2:	4d06      	ldr	r5, [pc, #24]	@ (801240c <_close_r+0x1c>)
 80123f4:	2300      	movs	r3, #0
 80123f6:	4604      	mov	r4, r0
 80123f8:	4608      	mov	r0, r1
 80123fa:	602b      	str	r3, [r5, #0]
 80123fc:	f7f1 fa80 	bl	8003900 <_close>
 8012400:	1c43      	adds	r3, r0, #1
 8012402:	d102      	bne.n	801240a <_close_r+0x1a>
 8012404:	682b      	ldr	r3, [r5, #0]
 8012406:	b103      	cbz	r3, 801240a <_close_r+0x1a>
 8012408:	6023      	str	r3, [r4, #0]
 801240a:	bd38      	pop	{r3, r4, r5, pc}
 801240c:	20005a0c 	.word	0x20005a0c

08012410 <_reclaim_reent>:
 8012410:	4b29      	ldr	r3, [pc, #164]	@ (80124b8 <_reclaim_reent+0xa8>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4283      	cmp	r3, r0
 8012416:	b570      	push	{r4, r5, r6, lr}
 8012418:	4604      	mov	r4, r0
 801241a:	d04b      	beq.n	80124b4 <_reclaim_reent+0xa4>
 801241c:	69c3      	ldr	r3, [r0, #28]
 801241e:	b1ab      	cbz	r3, 801244c <_reclaim_reent+0x3c>
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	b16b      	cbz	r3, 8012440 <_reclaim_reent+0x30>
 8012424:	2500      	movs	r5, #0
 8012426:	69e3      	ldr	r3, [r4, #28]
 8012428:	68db      	ldr	r3, [r3, #12]
 801242a:	5959      	ldr	r1, [r3, r5]
 801242c:	2900      	cmp	r1, #0
 801242e:	d13b      	bne.n	80124a8 <_reclaim_reent+0x98>
 8012430:	3504      	adds	r5, #4
 8012432:	2d80      	cmp	r5, #128	@ 0x80
 8012434:	d1f7      	bne.n	8012426 <_reclaim_reent+0x16>
 8012436:	69e3      	ldr	r3, [r4, #28]
 8012438:	4620      	mov	r0, r4
 801243a:	68d9      	ldr	r1, [r3, #12]
 801243c:	f000 ff3c 	bl	80132b8 <_free_r>
 8012440:	69e3      	ldr	r3, [r4, #28]
 8012442:	6819      	ldr	r1, [r3, #0]
 8012444:	b111      	cbz	r1, 801244c <_reclaim_reent+0x3c>
 8012446:	4620      	mov	r0, r4
 8012448:	f000 ff36 	bl	80132b8 <_free_r>
 801244c:	6961      	ldr	r1, [r4, #20]
 801244e:	b111      	cbz	r1, 8012456 <_reclaim_reent+0x46>
 8012450:	4620      	mov	r0, r4
 8012452:	f000 ff31 	bl	80132b8 <_free_r>
 8012456:	69e1      	ldr	r1, [r4, #28]
 8012458:	b111      	cbz	r1, 8012460 <_reclaim_reent+0x50>
 801245a:	4620      	mov	r0, r4
 801245c:	f000 ff2c 	bl	80132b8 <_free_r>
 8012460:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012462:	b111      	cbz	r1, 801246a <_reclaim_reent+0x5a>
 8012464:	4620      	mov	r0, r4
 8012466:	f000 ff27 	bl	80132b8 <_free_r>
 801246a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801246c:	b111      	cbz	r1, 8012474 <_reclaim_reent+0x64>
 801246e:	4620      	mov	r0, r4
 8012470:	f000 ff22 	bl	80132b8 <_free_r>
 8012474:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012476:	b111      	cbz	r1, 801247e <_reclaim_reent+0x6e>
 8012478:	4620      	mov	r0, r4
 801247a:	f000 ff1d 	bl	80132b8 <_free_r>
 801247e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012480:	b111      	cbz	r1, 8012488 <_reclaim_reent+0x78>
 8012482:	4620      	mov	r0, r4
 8012484:	f000 ff18 	bl	80132b8 <_free_r>
 8012488:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801248a:	b111      	cbz	r1, 8012492 <_reclaim_reent+0x82>
 801248c:	4620      	mov	r0, r4
 801248e:	f000 ff13 	bl	80132b8 <_free_r>
 8012492:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012494:	b111      	cbz	r1, 801249c <_reclaim_reent+0x8c>
 8012496:	4620      	mov	r0, r4
 8012498:	f000 ff0e 	bl	80132b8 <_free_r>
 801249c:	6a23      	ldr	r3, [r4, #32]
 801249e:	b14b      	cbz	r3, 80124b4 <_reclaim_reent+0xa4>
 80124a0:	4620      	mov	r0, r4
 80124a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124a6:	4718      	bx	r3
 80124a8:	680e      	ldr	r6, [r1, #0]
 80124aa:	4620      	mov	r0, r4
 80124ac:	f000 ff04 	bl	80132b8 <_free_r>
 80124b0:	4631      	mov	r1, r6
 80124b2:	e7bb      	b.n	801242c <_reclaim_reent+0x1c>
 80124b4:	bd70      	pop	{r4, r5, r6, pc}
 80124b6:	bf00      	nop
 80124b8:	200003d4 	.word	0x200003d4

080124bc <_lseek_r>:
 80124bc:	b538      	push	{r3, r4, r5, lr}
 80124be:	4d07      	ldr	r5, [pc, #28]	@ (80124dc <_lseek_r+0x20>)
 80124c0:	4604      	mov	r4, r0
 80124c2:	4608      	mov	r0, r1
 80124c4:	4611      	mov	r1, r2
 80124c6:	2200      	movs	r2, #0
 80124c8:	602a      	str	r2, [r5, #0]
 80124ca:	461a      	mov	r2, r3
 80124cc:	f7f1 fa3f 	bl	800394e <_lseek>
 80124d0:	1c43      	adds	r3, r0, #1
 80124d2:	d102      	bne.n	80124da <_lseek_r+0x1e>
 80124d4:	682b      	ldr	r3, [r5, #0]
 80124d6:	b103      	cbz	r3, 80124da <_lseek_r+0x1e>
 80124d8:	6023      	str	r3, [r4, #0]
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	20005a0c 	.word	0x20005a0c

080124e0 <_read_r>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4d07      	ldr	r5, [pc, #28]	@ (8012500 <_read_r+0x20>)
 80124e4:	4604      	mov	r4, r0
 80124e6:	4608      	mov	r0, r1
 80124e8:	4611      	mov	r1, r2
 80124ea:	2200      	movs	r2, #0
 80124ec:	602a      	str	r2, [r5, #0]
 80124ee:	461a      	mov	r2, r3
 80124f0:	f7f1 f9cd 	bl	800388e <_read>
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	d102      	bne.n	80124fe <_read_r+0x1e>
 80124f8:	682b      	ldr	r3, [r5, #0]
 80124fa:	b103      	cbz	r3, 80124fe <_read_r+0x1e>
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	20005a0c 	.word	0x20005a0c

08012504 <_sbrk_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d06      	ldr	r5, [pc, #24]	@ (8012520 <_sbrk_r+0x1c>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	602b      	str	r3, [r5, #0]
 8012510:	f7f1 fa2a 	bl	8003968 <_sbrk>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_sbrk_r+0x1a>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_sbrk_r+0x1a>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	20005a0c 	.word	0x20005a0c

08012524 <_write_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4d07      	ldr	r5, [pc, #28]	@ (8012544 <_write_r+0x20>)
 8012528:	4604      	mov	r4, r0
 801252a:	4608      	mov	r0, r1
 801252c:	4611      	mov	r1, r2
 801252e:	2200      	movs	r2, #0
 8012530:	602a      	str	r2, [r5, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	f7f1 f9c8 	bl	80038c8 <_write>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_write_r+0x1e>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_write_r+0x1e>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	20005a0c 	.word	0x20005a0c

08012548 <__errno>:
 8012548:	4b01      	ldr	r3, [pc, #4]	@ (8012550 <__errno+0x8>)
 801254a:	6818      	ldr	r0, [r3, #0]
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	200003d4 	.word	0x200003d4

08012554 <__libc_init_array>:
 8012554:	b570      	push	{r4, r5, r6, lr}
 8012556:	4d0d      	ldr	r5, [pc, #52]	@ (801258c <__libc_init_array+0x38>)
 8012558:	4c0d      	ldr	r4, [pc, #52]	@ (8012590 <__libc_init_array+0x3c>)
 801255a:	1b64      	subs	r4, r4, r5
 801255c:	10a4      	asrs	r4, r4, #2
 801255e:	2600      	movs	r6, #0
 8012560:	42a6      	cmp	r6, r4
 8012562:	d109      	bne.n	8012578 <__libc_init_array+0x24>
 8012564:	4d0b      	ldr	r5, [pc, #44]	@ (8012594 <__libc_init_array+0x40>)
 8012566:	4c0c      	ldr	r4, [pc, #48]	@ (8012598 <__libc_init_array+0x44>)
 8012568:	f002 fc18 	bl	8014d9c <_init>
 801256c:	1b64      	subs	r4, r4, r5
 801256e:	10a4      	asrs	r4, r4, #2
 8012570:	2600      	movs	r6, #0
 8012572:	42a6      	cmp	r6, r4
 8012574:	d105      	bne.n	8012582 <__libc_init_array+0x2e>
 8012576:	bd70      	pop	{r4, r5, r6, pc}
 8012578:	f855 3b04 	ldr.w	r3, [r5], #4
 801257c:	4798      	blx	r3
 801257e:	3601      	adds	r6, #1
 8012580:	e7ee      	b.n	8012560 <__libc_init_array+0xc>
 8012582:	f855 3b04 	ldr.w	r3, [r5], #4
 8012586:	4798      	blx	r3
 8012588:	3601      	adds	r6, #1
 801258a:	e7f2      	b.n	8012572 <__libc_init_array+0x1e>
 801258c:	08015c64 	.word	0x08015c64
 8012590:	08015c64 	.word	0x08015c64
 8012594:	08015c64 	.word	0x08015c64
 8012598:	08015c68 	.word	0x08015c68

0801259c <__retarget_lock_init_recursive>:
 801259c:	4770      	bx	lr

0801259e <__retarget_lock_acquire_recursive>:
 801259e:	4770      	bx	lr

080125a0 <__retarget_lock_release_recursive>:
 80125a0:	4770      	bx	lr

080125a2 <strcpy>:
 80125a2:	4603      	mov	r3, r0
 80125a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125a8:	f803 2b01 	strb.w	r2, [r3], #1
 80125ac:	2a00      	cmp	r2, #0
 80125ae:	d1f9      	bne.n	80125a4 <strcpy+0x2>
 80125b0:	4770      	bx	lr

080125b2 <memcpy>:
 80125b2:	440a      	add	r2, r1
 80125b4:	4291      	cmp	r1, r2
 80125b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80125ba:	d100      	bne.n	80125be <memcpy+0xc>
 80125bc:	4770      	bx	lr
 80125be:	b510      	push	{r4, lr}
 80125c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125c8:	4291      	cmp	r1, r2
 80125ca:	d1f9      	bne.n	80125c0 <memcpy+0xe>
 80125cc:	bd10      	pop	{r4, pc}
	...

080125d0 <nan>:
 80125d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125d8 <nan+0x8>
 80125d4:	4770      	bx	lr
 80125d6:	bf00      	nop
 80125d8:	00000000 	.word	0x00000000
 80125dc:	7ff80000 	.word	0x7ff80000

080125e0 <__assert_func>:
 80125e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125e2:	4614      	mov	r4, r2
 80125e4:	461a      	mov	r2, r3
 80125e6:	4b09      	ldr	r3, [pc, #36]	@ (801260c <__assert_func+0x2c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4605      	mov	r5, r0
 80125ec:	68d8      	ldr	r0, [r3, #12]
 80125ee:	b954      	cbnz	r4, 8012606 <__assert_func+0x26>
 80125f0:	4b07      	ldr	r3, [pc, #28]	@ (8012610 <__assert_func+0x30>)
 80125f2:	461c      	mov	r4, r3
 80125f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125f8:	9100      	str	r1, [sp, #0]
 80125fa:	462b      	mov	r3, r5
 80125fc:	4905      	ldr	r1, [pc, #20]	@ (8012614 <__assert_func+0x34>)
 80125fe:	f002 f8b3 	bl	8014768 <fiprintf>
 8012602:	f002 f8dd 	bl	80147c0 <abort>
 8012606:	4b04      	ldr	r3, [pc, #16]	@ (8012618 <__assert_func+0x38>)
 8012608:	e7f4      	b.n	80125f4 <__assert_func+0x14>
 801260a:	bf00      	nop
 801260c:	200003d4 	.word	0x200003d4
 8012610:	08015a19 	.word	0x08015a19
 8012614:	080159eb 	.word	0x080159eb
 8012618:	080159de 	.word	0x080159de

0801261c <quorem>:
 801261c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012620:	6903      	ldr	r3, [r0, #16]
 8012622:	690c      	ldr	r4, [r1, #16]
 8012624:	42a3      	cmp	r3, r4
 8012626:	4607      	mov	r7, r0
 8012628:	db7e      	blt.n	8012728 <quorem+0x10c>
 801262a:	3c01      	subs	r4, #1
 801262c:	f101 0814 	add.w	r8, r1, #20
 8012630:	00a3      	lsls	r3, r4, #2
 8012632:	f100 0514 	add.w	r5, r0, #20
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801263c:	9301      	str	r3, [sp, #4]
 801263e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012646:	3301      	adds	r3, #1
 8012648:	429a      	cmp	r2, r3
 801264a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801264e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012652:	d32e      	bcc.n	80126b2 <quorem+0x96>
 8012654:	f04f 0a00 	mov.w	sl, #0
 8012658:	46c4      	mov	ip, r8
 801265a:	46ae      	mov	lr, r5
 801265c:	46d3      	mov	fp, sl
 801265e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012662:	b298      	uxth	r0, r3
 8012664:	fb06 a000 	mla	r0, r6, r0, sl
 8012668:	0c02      	lsrs	r2, r0, #16
 801266a:	0c1b      	lsrs	r3, r3, #16
 801266c:	fb06 2303 	mla	r3, r6, r3, r2
 8012670:	f8de 2000 	ldr.w	r2, [lr]
 8012674:	b280      	uxth	r0, r0
 8012676:	b292      	uxth	r2, r2
 8012678:	1a12      	subs	r2, r2, r0
 801267a:	445a      	add	r2, fp
 801267c:	f8de 0000 	ldr.w	r0, [lr]
 8012680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012684:	b29b      	uxth	r3, r3
 8012686:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801268a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801268e:	b292      	uxth	r2, r2
 8012690:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012694:	45e1      	cmp	r9, ip
 8012696:	f84e 2b04 	str.w	r2, [lr], #4
 801269a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801269e:	d2de      	bcs.n	801265e <quorem+0x42>
 80126a0:	9b00      	ldr	r3, [sp, #0]
 80126a2:	58eb      	ldr	r3, [r5, r3]
 80126a4:	b92b      	cbnz	r3, 80126b2 <quorem+0x96>
 80126a6:	9b01      	ldr	r3, [sp, #4]
 80126a8:	3b04      	subs	r3, #4
 80126aa:	429d      	cmp	r5, r3
 80126ac:	461a      	mov	r2, r3
 80126ae:	d32f      	bcc.n	8012710 <quorem+0xf4>
 80126b0:	613c      	str	r4, [r7, #16]
 80126b2:	4638      	mov	r0, r7
 80126b4:	f001 fc5a 	bl	8013f6c <__mcmp>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	db25      	blt.n	8012708 <quorem+0xec>
 80126bc:	4629      	mov	r1, r5
 80126be:	2000      	movs	r0, #0
 80126c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80126c4:	f8d1 c000 	ldr.w	ip, [r1]
 80126c8:	fa1f fe82 	uxth.w	lr, r2
 80126cc:	fa1f f38c 	uxth.w	r3, ip
 80126d0:	eba3 030e 	sub.w	r3, r3, lr
 80126d4:	4403      	add	r3, r0
 80126d6:	0c12      	lsrs	r2, r2, #16
 80126d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80126dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126e6:	45c1      	cmp	r9, r8
 80126e8:	f841 3b04 	str.w	r3, [r1], #4
 80126ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80126f0:	d2e6      	bcs.n	80126c0 <quorem+0xa4>
 80126f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126fa:	b922      	cbnz	r2, 8012706 <quorem+0xea>
 80126fc:	3b04      	subs	r3, #4
 80126fe:	429d      	cmp	r5, r3
 8012700:	461a      	mov	r2, r3
 8012702:	d30b      	bcc.n	801271c <quorem+0x100>
 8012704:	613c      	str	r4, [r7, #16]
 8012706:	3601      	adds	r6, #1
 8012708:	4630      	mov	r0, r6
 801270a:	b003      	add	sp, #12
 801270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012710:	6812      	ldr	r2, [r2, #0]
 8012712:	3b04      	subs	r3, #4
 8012714:	2a00      	cmp	r2, #0
 8012716:	d1cb      	bne.n	80126b0 <quorem+0x94>
 8012718:	3c01      	subs	r4, #1
 801271a:	e7c6      	b.n	80126aa <quorem+0x8e>
 801271c:	6812      	ldr	r2, [r2, #0]
 801271e:	3b04      	subs	r3, #4
 8012720:	2a00      	cmp	r2, #0
 8012722:	d1ef      	bne.n	8012704 <quorem+0xe8>
 8012724:	3c01      	subs	r4, #1
 8012726:	e7ea      	b.n	80126fe <quorem+0xe2>
 8012728:	2000      	movs	r0, #0
 801272a:	e7ee      	b.n	801270a <quorem+0xee>
 801272c:	0000      	movs	r0, r0
	...

08012730 <_dtoa_r>:
 8012730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012734:	69c7      	ldr	r7, [r0, #28]
 8012736:	b099      	sub	sp, #100	@ 0x64
 8012738:	ed8d 0b02 	vstr	d0, [sp, #8]
 801273c:	ec55 4b10 	vmov	r4, r5, d0
 8012740:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012742:	9109      	str	r1, [sp, #36]	@ 0x24
 8012744:	4683      	mov	fp, r0
 8012746:	920e      	str	r2, [sp, #56]	@ 0x38
 8012748:	9313      	str	r3, [sp, #76]	@ 0x4c
 801274a:	b97f      	cbnz	r7, 801276c <_dtoa_r+0x3c>
 801274c:	2010      	movs	r0, #16
 801274e:	f7fe f8f9 	bl	8010944 <malloc>
 8012752:	4602      	mov	r2, r0
 8012754:	f8cb 001c 	str.w	r0, [fp, #28]
 8012758:	b920      	cbnz	r0, 8012764 <_dtoa_r+0x34>
 801275a:	4ba7      	ldr	r3, [pc, #668]	@ (80129f8 <_dtoa_r+0x2c8>)
 801275c:	21ef      	movs	r1, #239	@ 0xef
 801275e:	48a7      	ldr	r0, [pc, #668]	@ (80129fc <_dtoa_r+0x2cc>)
 8012760:	f7ff ff3e 	bl	80125e0 <__assert_func>
 8012764:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012768:	6007      	str	r7, [r0, #0]
 801276a:	60c7      	str	r7, [r0, #12]
 801276c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012770:	6819      	ldr	r1, [r3, #0]
 8012772:	b159      	cbz	r1, 801278c <_dtoa_r+0x5c>
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	604a      	str	r2, [r1, #4]
 8012778:	2301      	movs	r3, #1
 801277a:	4093      	lsls	r3, r2
 801277c:	608b      	str	r3, [r1, #8]
 801277e:	4658      	mov	r0, fp
 8012780:	f001 f970 	bl	8013a64 <_Bfree>
 8012784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]
 801278c:	1e2b      	subs	r3, r5, #0
 801278e:	bfb9      	ittee	lt
 8012790:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012794:	9303      	strlt	r3, [sp, #12]
 8012796:	2300      	movge	r3, #0
 8012798:	6033      	strge	r3, [r6, #0]
 801279a:	9f03      	ldr	r7, [sp, #12]
 801279c:	4b98      	ldr	r3, [pc, #608]	@ (8012a00 <_dtoa_r+0x2d0>)
 801279e:	bfbc      	itt	lt
 80127a0:	2201      	movlt	r2, #1
 80127a2:	6032      	strlt	r2, [r6, #0]
 80127a4:	43bb      	bics	r3, r7
 80127a6:	d112      	bne.n	80127ce <_dtoa_r+0x9e>
 80127a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80127aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80127ae:	6013      	str	r3, [r2, #0]
 80127b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80127b4:	4323      	orrs	r3, r4
 80127b6:	f000 854d 	beq.w	8013254 <_dtoa_r+0xb24>
 80127ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012a14 <_dtoa_r+0x2e4>
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f000 854f 	beq.w	8013264 <_dtoa_r+0xb34>
 80127c6:	f10a 0303 	add.w	r3, sl, #3
 80127ca:	f000 bd49 	b.w	8013260 <_dtoa_r+0xb30>
 80127ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127d2:	2200      	movs	r2, #0
 80127d4:	ec51 0b17 	vmov	r0, r1, d7
 80127d8:	2300      	movs	r3, #0
 80127da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80127de:	f7ee f973 	bl	8000ac8 <__aeabi_dcmpeq>
 80127e2:	4680      	mov	r8, r0
 80127e4:	b158      	cbz	r0, 80127fe <_dtoa_r+0xce>
 80127e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80127e8:	2301      	movs	r3, #1
 80127ea:	6013      	str	r3, [r2, #0]
 80127ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127ee:	b113      	cbz	r3, 80127f6 <_dtoa_r+0xc6>
 80127f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80127f2:	4b84      	ldr	r3, [pc, #528]	@ (8012a04 <_dtoa_r+0x2d4>)
 80127f4:	6013      	str	r3, [r2, #0]
 80127f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012a18 <_dtoa_r+0x2e8>
 80127fa:	f000 bd33 	b.w	8013264 <_dtoa_r+0xb34>
 80127fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012802:	aa16      	add	r2, sp, #88	@ 0x58
 8012804:	a917      	add	r1, sp, #92	@ 0x5c
 8012806:	4658      	mov	r0, fp
 8012808:	f001 fcd0 	bl	80141ac <__d2b>
 801280c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012810:	4681      	mov	r9, r0
 8012812:	2e00      	cmp	r6, #0
 8012814:	d077      	beq.n	8012906 <_dtoa_r+0x1d6>
 8012816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012818:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801281c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012824:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012828:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801282c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012830:	4619      	mov	r1, r3
 8012832:	2200      	movs	r2, #0
 8012834:	4b74      	ldr	r3, [pc, #464]	@ (8012a08 <_dtoa_r+0x2d8>)
 8012836:	f7ed fd27 	bl	8000288 <__aeabi_dsub>
 801283a:	a369      	add	r3, pc, #420	@ (adr r3, 80129e0 <_dtoa_r+0x2b0>)
 801283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012840:	f7ed feda 	bl	80005f8 <__aeabi_dmul>
 8012844:	a368      	add	r3, pc, #416	@ (adr r3, 80129e8 <_dtoa_r+0x2b8>)
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	f7ed fd1f 	bl	800028c <__adddf3>
 801284e:	4604      	mov	r4, r0
 8012850:	4630      	mov	r0, r6
 8012852:	460d      	mov	r5, r1
 8012854:	f7ed fe66 	bl	8000524 <__aeabi_i2d>
 8012858:	a365      	add	r3, pc, #404	@ (adr r3, 80129f0 <_dtoa_r+0x2c0>)
 801285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285e:	f7ed fecb 	bl	80005f8 <__aeabi_dmul>
 8012862:	4602      	mov	r2, r0
 8012864:	460b      	mov	r3, r1
 8012866:	4620      	mov	r0, r4
 8012868:	4629      	mov	r1, r5
 801286a:	f7ed fd0f 	bl	800028c <__adddf3>
 801286e:	4604      	mov	r4, r0
 8012870:	460d      	mov	r5, r1
 8012872:	f7ee f971 	bl	8000b58 <__aeabi_d2iz>
 8012876:	2200      	movs	r2, #0
 8012878:	4607      	mov	r7, r0
 801287a:	2300      	movs	r3, #0
 801287c:	4620      	mov	r0, r4
 801287e:	4629      	mov	r1, r5
 8012880:	f7ee f92c 	bl	8000adc <__aeabi_dcmplt>
 8012884:	b140      	cbz	r0, 8012898 <_dtoa_r+0x168>
 8012886:	4638      	mov	r0, r7
 8012888:	f7ed fe4c 	bl	8000524 <__aeabi_i2d>
 801288c:	4622      	mov	r2, r4
 801288e:	462b      	mov	r3, r5
 8012890:	f7ee f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012894:	b900      	cbnz	r0, 8012898 <_dtoa_r+0x168>
 8012896:	3f01      	subs	r7, #1
 8012898:	2f16      	cmp	r7, #22
 801289a:	d851      	bhi.n	8012940 <_dtoa_r+0x210>
 801289c:	4b5b      	ldr	r3, [pc, #364]	@ (8012a0c <_dtoa_r+0x2dc>)
 801289e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80128aa:	f7ee f917 	bl	8000adc <__aeabi_dcmplt>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d048      	beq.n	8012944 <_dtoa_r+0x214>
 80128b2:	3f01      	subs	r7, #1
 80128b4:	2300      	movs	r3, #0
 80128b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80128b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80128ba:	1b9b      	subs	r3, r3, r6
 80128bc:	1e5a      	subs	r2, r3, #1
 80128be:	bf44      	itt	mi
 80128c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80128c4:	2300      	movmi	r3, #0
 80128c6:	9208      	str	r2, [sp, #32]
 80128c8:	bf54      	ite	pl
 80128ca:	f04f 0800 	movpl.w	r8, #0
 80128ce:	9308      	strmi	r3, [sp, #32]
 80128d0:	2f00      	cmp	r7, #0
 80128d2:	db39      	blt.n	8012948 <_dtoa_r+0x218>
 80128d4:	9b08      	ldr	r3, [sp, #32]
 80128d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80128d8:	443b      	add	r3, r7
 80128da:	9308      	str	r3, [sp, #32]
 80128dc:	2300      	movs	r3, #0
 80128de:	930a      	str	r3, [sp, #40]	@ 0x28
 80128e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128e2:	2b09      	cmp	r3, #9
 80128e4:	d864      	bhi.n	80129b0 <_dtoa_r+0x280>
 80128e6:	2b05      	cmp	r3, #5
 80128e8:	bfc4      	itt	gt
 80128ea:	3b04      	subgt	r3, #4
 80128ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80128ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128f0:	f1a3 0302 	sub.w	r3, r3, #2
 80128f4:	bfcc      	ite	gt
 80128f6:	2400      	movgt	r4, #0
 80128f8:	2401      	movle	r4, #1
 80128fa:	2b03      	cmp	r3, #3
 80128fc:	d863      	bhi.n	80129c6 <_dtoa_r+0x296>
 80128fe:	e8df f003 	tbb	[pc, r3]
 8012902:	372a      	.short	0x372a
 8012904:	5535      	.short	0x5535
 8012906:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801290a:	441e      	add	r6, r3
 801290c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012910:	2b20      	cmp	r3, #32
 8012912:	bfc1      	itttt	gt
 8012914:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012918:	409f      	lslgt	r7, r3
 801291a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801291e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012922:	bfd6      	itet	le
 8012924:	f1c3 0320 	rsble	r3, r3, #32
 8012928:	ea47 0003 	orrgt.w	r0, r7, r3
 801292c:	fa04 f003 	lslle.w	r0, r4, r3
 8012930:	f7ed fde8 	bl	8000504 <__aeabi_ui2d>
 8012934:	2201      	movs	r2, #1
 8012936:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801293a:	3e01      	subs	r6, #1
 801293c:	9214      	str	r2, [sp, #80]	@ 0x50
 801293e:	e777      	b.n	8012830 <_dtoa_r+0x100>
 8012940:	2301      	movs	r3, #1
 8012942:	e7b8      	b.n	80128b6 <_dtoa_r+0x186>
 8012944:	9012      	str	r0, [sp, #72]	@ 0x48
 8012946:	e7b7      	b.n	80128b8 <_dtoa_r+0x188>
 8012948:	427b      	negs	r3, r7
 801294a:	930a      	str	r3, [sp, #40]	@ 0x28
 801294c:	2300      	movs	r3, #0
 801294e:	eba8 0807 	sub.w	r8, r8, r7
 8012952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012954:	e7c4      	b.n	80128e0 <_dtoa_r+0x1b0>
 8012956:	2300      	movs	r3, #0
 8012958:	930b      	str	r3, [sp, #44]	@ 0x2c
 801295a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801295c:	2b00      	cmp	r3, #0
 801295e:	dc35      	bgt.n	80129cc <_dtoa_r+0x29c>
 8012960:	2301      	movs	r3, #1
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	9307      	str	r3, [sp, #28]
 8012966:	461a      	mov	r2, r3
 8012968:	920e      	str	r2, [sp, #56]	@ 0x38
 801296a:	e00b      	b.n	8012984 <_dtoa_r+0x254>
 801296c:	2301      	movs	r3, #1
 801296e:	e7f3      	b.n	8012958 <_dtoa_r+0x228>
 8012970:	2300      	movs	r3, #0
 8012972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012976:	18fb      	adds	r3, r7, r3
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	3301      	adds	r3, #1
 801297c:	2b01      	cmp	r3, #1
 801297e:	9307      	str	r3, [sp, #28]
 8012980:	bfb8      	it	lt
 8012982:	2301      	movlt	r3, #1
 8012984:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012988:	2100      	movs	r1, #0
 801298a:	2204      	movs	r2, #4
 801298c:	f102 0514 	add.w	r5, r2, #20
 8012990:	429d      	cmp	r5, r3
 8012992:	d91f      	bls.n	80129d4 <_dtoa_r+0x2a4>
 8012994:	6041      	str	r1, [r0, #4]
 8012996:	4658      	mov	r0, fp
 8012998:	f001 f824 	bl	80139e4 <_Balloc>
 801299c:	4682      	mov	sl, r0
 801299e:	2800      	cmp	r0, #0
 80129a0:	d13c      	bne.n	8012a1c <_dtoa_r+0x2ec>
 80129a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012a10 <_dtoa_r+0x2e0>)
 80129a4:	4602      	mov	r2, r0
 80129a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80129aa:	e6d8      	b.n	801275e <_dtoa_r+0x2e>
 80129ac:	2301      	movs	r3, #1
 80129ae:	e7e0      	b.n	8012972 <_dtoa_r+0x242>
 80129b0:	2401      	movs	r4, #1
 80129b2:	2300      	movs	r3, #0
 80129b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80129b8:	f04f 33ff 	mov.w	r3, #4294967295
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	9307      	str	r3, [sp, #28]
 80129c0:	2200      	movs	r2, #0
 80129c2:	2312      	movs	r3, #18
 80129c4:	e7d0      	b.n	8012968 <_dtoa_r+0x238>
 80129c6:	2301      	movs	r3, #1
 80129c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129ca:	e7f5      	b.n	80129b8 <_dtoa_r+0x288>
 80129cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	9307      	str	r3, [sp, #28]
 80129d2:	e7d7      	b.n	8012984 <_dtoa_r+0x254>
 80129d4:	3101      	adds	r1, #1
 80129d6:	0052      	lsls	r2, r2, #1
 80129d8:	e7d8      	b.n	801298c <_dtoa_r+0x25c>
 80129da:	bf00      	nop
 80129dc:	f3af 8000 	nop.w
 80129e0:	636f4361 	.word	0x636f4361
 80129e4:	3fd287a7 	.word	0x3fd287a7
 80129e8:	8b60c8b3 	.word	0x8b60c8b3
 80129ec:	3fc68a28 	.word	0x3fc68a28
 80129f0:	509f79fb 	.word	0x509f79fb
 80129f4:	3fd34413 	.word	0x3fd34413
 80129f8:	08015965 	.word	0x08015965
 80129fc:	08015a27 	.word	0x08015a27
 8012a00:	7ff00000 	.word	0x7ff00000
 8012a04:	08015942 	.word	0x08015942
 8012a08:	3ff80000 	.word	0x3ff80000
 8012a0c:	08015b80 	.word	0x08015b80
 8012a10:	08015a7f 	.word	0x08015a7f
 8012a14:	08015a23 	.word	0x08015a23
 8012a18:	08015941 	.word	0x08015941
 8012a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a20:	6018      	str	r0, [r3, #0]
 8012a22:	9b07      	ldr	r3, [sp, #28]
 8012a24:	2b0e      	cmp	r3, #14
 8012a26:	f200 80a4 	bhi.w	8012b72 <_dtoa_r+0x442>
 8012a2a:	2c00      	cmp	r4, #0
 8012a2c:	f000 80a1 	beq.w	8012b72 <_dtoa_r+0x442>
 8012a30:	2f00      	cmp	r7, #0
 8012a32:	dd33      	ble.n	8012a9c <_dtoa_r+0x36c>
 8012a34:	4bad      	ldr	r3, [pc, #692]	@ (8012cec <_dtoa_r+0x5bc>)
 8012a36:	f007 020f 	and.w	r2, r7, #15
 8012a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a3e:	ed93 7b00 	vldr	d7, [r3]
 8012a42:	05f8      	lsls	r0, r7, #23
 8012a44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012a4c:	d516      	bpl.n	8012a7c <_dtoa_r+0x34c>
 8012a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8012cf0 <_dtoa_r+0x5c0>)
 8012a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a58:	f7ed fef8 	bl	800084c <__aeabi_ddiv>
 8012a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a60:	f004 040f 	and.w	r4, r4, #15
 8012a64:	2603      	movs	r6, #3
 8012a66:	4da2      	ldr	r5, [pc, #648]	@ (8012cf0 <_dtoa_r+0x5c0>)
 8012a68:	b954      	cbnz	r4, 8012a80 <_dtoa_r+0x350>
 8012a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a72:	f7ed feeb 	bl	800084c <__aeabi_ddiv>
 8012a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a7a:	e028      	b.n	8012ace <_dtoa_r+0x39e>
 8012a7c:	2602      	movs	r6, #2
 8012a7e:	e7f2      	b.n	8012a66 <_dtoa_r+0x336>
 8012a80:	07e1      	lsls	r1, r4, #31
 8012a82:	d508      	bpl.n	8012a96 <_dtoa_r+0x366>
 8012a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a8c:	f7ed fdb4 	bl	80005f8 <__aeabi_dmul>
 8012a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a94:	3601      	adds	r6, #1
 8012a96:	1064      	asrs	r4, r4, #1
 8012a98:	3508      	adds	r5, #8
 8012a9a:	e7e5      	b.n	8012a68 <_dtoa_r+0x338>
 8012a9c:	f000 80d2 	beq.w	8012c44 <_dtoa_r+0x514>
 8012aa0:	427c      	negs	r4, r7
 8012aa2:	4b92      	ldr	r3, [pc, #584]	@ (8012cec <_dtoa_r+0x5bc>)
 8012aa4:	4d92      	ldr	r5, [pc, #584]	@ (8012cf0 <_dtoa_r+0x5c0>)
 8012aa6:	f004 020f 	and.w	r2, r4, #15
 8012aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ab6:	f7ed fd9f 	bl	80005f8 <__aeabi_dmul>
 8012aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012abe:	1124      	asrs	r4, r4, #4
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	2602      	movs	r6, #2
 8012ac4:	2c00      	cmp	r4, #0
 8012ac6:	f040 80b2 	bne.w	8012c2e <_dtoa_r+0x4fe>
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1d3      	bne.n	8012a76 <_dtoa_r+0x346>
 8012ace:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ad0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f000 80b7 	beq.w	8012c48 <_dtoa_r+0x518>
 8012ada:	4b86      	ldr	r3, [pc, #536]	@ (8012cf4 <_dtoa_r+0x5c4>)
 8012adc:	2200      	movs	r2, #0
 8012ade:	4620      	mov	r0, r4
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	f7ed fffb 	bl	8000adc <__aeabi_dcmplt>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	f000 80ae 	beq.w	8012c48 <_dtoa_r+0x518>
 8012aec:	9b07      	ldr	r3, [sp, #28]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 80aa 	beq.w	8012c48 <_dtoa_r+0x518>
 8012af4:	9b00      	ldr	r3, [sp, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	dd37      	ble.n	8012b6a <_dtoa_r+0x43a>
 8012afa:	1e7b      	subs	r3, r7, #1
 8012afc:	9304      	str	r3, [sp, #16]
 8012afe:	4620      	mov	r0, r4
 8012b00:	4b7d      	ldr	r3, [pc, #500]	@ (8012cf8 <_dtoa_r+0x5c8>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	4629      	mov	r1, r5
 8012b06:	f7ed fd77 	bl	80005f8 <__aeabi_dmul>
 8012b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b0e:	9c00      	ldr	r4, [sp, #0]
 8012b10:	3601      	adds	r6, #1
 8012b12:	4630      	mov	r0, r6
 8012b14:	f7ed fd06 	bl	8000524 <__aeabi_i2d>
 8012b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b1c:	f7ed fd6c 	bl	80005f8 <__aeabi_dmul>
 8012b20:	4b76      	ldr	r3, [pc, #472]	@ (8012cfc <_dtoa_r+0x5cc>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	f7ed fbb2 	bl	800028c <__adddf3>
 8012b28:	4605      	mov	r5, r0
 8012b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012b2e:	2c00      	cmp	r4, #0
 8012b30:	f040 808d 	bne.w	8012c4e <_dtoa_r+0x51e>
 8012b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b38:	4b71      	ldr	r3, [pc, #452]	@ (8012d00 <_dtoa_r+0x5d0>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f7ed fba4 	bl	8000288 <__aeabi_dsub>
 8012b40:	4602      	mov	r2, r0
 8012b42:	460b      	mov	r3, r1
 8012b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b48:	462a      	mov	r2, r5
 8012b4a:	4633      	mov	r3, r6
 8012b4c:	f7ed ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	f040 828b 	bne.w	801306c <_dtoa_r+0x93c>
 8012b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b5a:	462a      	mov	r2, r5
 8012b5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012b60:	f7ed ffbc 	bl	8000adc <__aeabi_dcmplt>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	f040 8128 	bne.w	8012dba <_dtoa_r+0x68a>
 8012b6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	f2c0 815a 	blt.w	8012e2e <_dtoa_r+0x6fe>
 8012b7a:	2f0e      	cmp	r7, #14
 8012b7c:	f300 8157 	bgt.w	8012e2e <_dtoa_r+0x6fe>
 8012b80:	4b5a      	ldr	r3, [pc, #360]	@ (8012cec <_dtoa_r+0x5bc>)
 8012b82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b86:	ed93 7b00 	vldr	d7, [r3]
 8012b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	ed8d 7b00 	vstr	d7, [sp]
 8012b92:	da03      	bge.n	8012b9c <_dtoa_r+0x46c>
 8012b94:	9b07      	ldr	r3, [sp, #28]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f340 8101 	ble.w	8012d9e <_dtoa_r+0x66e>
 8012b9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ba0:	4656      	mov	r6, sl
 8012ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	4629      	mov	r1, r5
 8012baa:	f7ed fe4f 	bl	800084c <__aeabi_ddiv>
 8012bae:	f7ed ffd3 	bl	8000b58 <__aeabi_d2iz>
 8012bb2:	4680      	mov	r8, r0
 8012bb4:	f7ed fcb6 	bl	8000524 <__aeabi_i2d>
 8012bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bbc:	f7ed fd1c 	bl	80005f8 <__aeabi_dmul>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	4629      	mov	r1, r5
 8012bc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012bcc:	f7ed fb5c 	bl	8000288 <__aeabi_dsub>
 8012bd0:	f806 4b01 	strb.w	r4, [r6], #1
 8012bd4:	9d07      	ldr	r5, [sp, #28]
 8012bd6:	eba6 040a 	sub.w	r4, r6, sl
 8012bda:	42a5      	cmp	r5, r4
 8012bdc:	4602      	mov	r2, r0
 8012bde:	460b      	mov	r3, r1
 8012be0:	f040 8117 	bne.w	8012e12 <_dtoa_r+0x6e2>
 8012be4:	f7ed fb52 	bl	800028c <__adddf3>
 8012be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bec:	4604      	mov	r4, r0
 8012bee:	460d      	mov	r5, r1
 8012bf0:	f7ed ff92 	bl	8000b18 <__aeabi_dcmpgt>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	f040 80f9 	bne.w	8012dec <_dtoa_r+0x6bc>
 8012bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	f7ed ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c06:	b118      	cbz	r0, 8012c10 <_dtoa_r+0x4e0>
 8012c08:	f018 0f01 	tst.w	r8, #1
 8012c0c:	f040 80ee 	bne.w	8012dec <_dtoa_r+0x6bc>
 8012c10:	4649      	mov	r1, r9
 8012c12:	4658      	mov	r0, fp
 8012c14:	f000 ff26 	bl	8013a64 <_Bfree>
 8012c18:	2300      	movs	r3, #0
 8012c1a:	7033      	strb	r3, [r6, #0]
 8012c1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012c1e:	3701      	adds	r7, #1
 8012c20:	601f      	str	r7, [r3, #0]
 8012c22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f000 831d 	beq.w	8013264 <_dtoa_r+0xb34>
 8012c2a:	601e      	str	r6, [r3, #0]
 8012c2c:	e31a      	b.n	8013264 <_dtoa_r+0xb34>
 8012c2e:	07e2      	lsls	r2, r4, #31
 8012c30:	d505      	bpl.n	8012c3e <_dtoa_r+0x50e>
 8012c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c36:	f7ed fcdf 	bl	80005f8 <__aeabi_dmul>
 8012c3a:	3601      	adds	r6, #1
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	1064      	asrs	r4, r4, #1
 8012c40:	3508      	adds	r5, #8
 8012c42:	e73f      	b.n	8012ac4 <_dtoa_r+0x394>
 8012c44:	2602      	movs	r6, #2
 8012c46:	e742      	b.n	8012ace <_dtoa_r+0x39e>
 8012c48:	9c07      	ldr	r4, [sp, #28]
 8012c4a:	9704      	str	r7, [sp, #16]
 8012c4c:	e761      	b.n	8012b12 <_dtoa_r+0x3e2>
 8012c4e:	4b27      	ldr	r3, [pc, #156]	@ (8012cec <_dtoa_r+0x5bc>)
 8012c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c5a:	4454      	add	r4, sl
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	d053      	beq.n	8012d08 <_dtoa_r+0x5d8>
 8012c60:	4928      	ldr	r1, [pc, #160]	@ (8012d04 <_dtoa_r+0x5d4>)
 8012c62:	2000      	movs	r0, #0
 8012c64:	f7ed fdf2 	bl	800084c <__aeabi_ddiv>
 8012c68:	4633      	mov	r3, r6
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	f7ed fb0c 	bl	8000288 <__aeabi_dsub>
 8012c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012c74:	4656      	mov	r6, sl
 8012c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c7a:	f7ed ff6d 	bl	8000b58 <__aeabi_d2iz>
 8012c7e:	4605      	mov	r5, r0
 8012c80:	f7ed fc50 	bl	8000524 <__aeabi_i2d>
 8012c84:	4602      	mov	r2, r0
 8012c86:	460b      	mov	r3, r1
 8012c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c8c:	f7ed fafc 	bl	8000288 <__aeabi_dsub>
 8012c90:	3530      	adds	r5, #48	@ 0x30
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012c9a:	f806 5b01 	strb.w	r5, [r6], #1
 8012c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012ca2:	f7ed ff1b 	bl	8000adc <__aeabi_dcmplt>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d171      	bne.n	8012d8e <_dtoa_r+0x65e>
 8012caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cae:	4911      	ldr	r1, [pc, #68]	@ (8012cf4 <_dtoa_r+0x5c4>)
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	f7ed fae9 	bl	8000288 <__aeabi_dsub>
 8012cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012cba:	f7ed ff0f 	bl	8000adc <__aeabi_dcmplt>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	f040 8095 	bne.w	8012dee <_dtoa_r+0x6be>
 8012cc4:	42a6      	cmp	r6, r4
 8012cc6:	f43f af50 	beq.w	8012b6a <_dtoa_r+0x43a>
 8012cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012cce:	4b0a      	ldr	r3, [pc, #40]	@ (8012cf8 <_dtoa_r+0x5c8>)
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f7ed fc91 	bl	80005f8 <__aeabi_dmul>
 8012cd6:	4b08      	ldr	r3, [pc, #32]	@ (8012cf8 <_dtoa_r+0x5c8>)
 8012cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012cdc:	2200      	movs	r2, #0
 8012cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ce2:	f7ed fc89 	bl	80005f8 <__aeabi_dmul>
 8012ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cea:	e7c4      	b.n	8012c76 <_dtoa_r+0x546>
 8012cec:	08015b80 	.word	0x08015b80
 8012cf0:	08015b58 	.word	0x08015b58
 8012cf4:	3ff00000 	.word	0x3ff00000
 8012cf8:	40240000 	.word	0x40240000
 8012cfc:	401c0000 	.word	0x401c0000
 8012d00:	40140000 	.word	0x40140000
 8012d04:	3fe00000 	.word	0x3fe00000
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7ed fc74 	bl	80005f8 <__aeabi_dmul>
 8012d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012d14:	9415      	str	r4, [sp, #84]	@ 0x54
 8012d16:	4656      	mov	r6, sl
 8012d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d1c:	f7ed ff1c 	bl	8000b58 <__aeabi_d2iz>
 8012d20:	4605      	mov	r5, r0
 8012d22:	f7ed fbff 	bl	8000524 <__aeabi_i2d>
 8012d26:	4602      	mov	r2, r0
 8012d28:	460b      	mov	r3, r1
 8012d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d2e:	f7ed faab 	bl	8000288 <__aeabi_dsub>
 8012d32:	3530      	adds	r5, #48	@ 0x30
 8012d34:	f806 5b01 	strb.w	r5, [r6], #1
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	42a6      	cmp	r6, r4
 8012d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d42:	f04f 0200 	mov.w	r2, #0
 8012d46:	d124      	bne.n	8012d92 <_dtoa_r+0x662>
 8012d48:	4bac      	ldr	r3, [pc, #688]	@ (8012ffc <_dtoa_r+0x8cc>)
 8012d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012d4e:	f7ed fa9d 	bl	800028c <__adddf3>
 8012d52:	4602      	mov	r2, r0
 8012d54:	460b      	mov	r3, r1
 8012d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d5a:	f7ed fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d145      	bne.n	8012dee <_dtoa_r+0x6be>
 8012d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012d66:	49a5      	ldr	r1, [pc, #660]	@ (8012ffc <_dtoa_r+0x8cc>)
 8012d68:	2000      	movs	r0, #0
 8012d6a:	f7ed fa8d 	bl	8000288 <__aeabi_dsub>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	460b      	mov	r3, r1
 8012d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d76:	f7ed feb1 	bl	8000adc <__aeabi_dcmplt>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	f43f aef5 	beq.w	8012b6a <_dtoa_r+0x43a>
 8012d80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012d82:	1e73      	subs	r3, r6, #1
 8012d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8012d86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d8a:	2b30      	cmp	r3, #48	@ 0x30
 8012d8c:	d0f8      	beq.n	8012d80 <_dtoa_r+0x650>
 8012d8e:	9f04      	ldr	r7, [sp, #16]
 8012d90:	e73e      	b.n	8012c10 <_dtoa_r+0x4e0>
 8012d92:	4b9b      	ldr	r3, [pc, #620]	@ (8013000 <_dtoa_r+0x8d0>)
 8012d94:	f7ed fc30 	bl	80005f8 <__aeabi_dmul>
 8012d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d9c:	e7bc      	b.n	8012d18 <_dtoa_r+0x5e8>
 8012d9e:	d10c      	bne.n	8012dba <_dtoa_r+0x68a>
 8012da0:	4b98      	ldr	r3, [pc, #608]	@ (8013004 <_dtoa_r+0x8d4>)
 8012da2:	2200      	movs	r2, #0
 8012da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012da8:	f7ed fc26 	bl	80005f8 <__aeabi_dmul>
 8012dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012db0:	f7ed fea8 	bl	8000b04 <__aeabi_dcmpge>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	f000 8157 	beq.w	8013068 <_dtoa_r+0x938>
 8012dba:	2400      	movs	r4, #0
 8012dbc:	4625      	mov	r5, r4
 8012dbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dc0:	43db      	mvns	r3, r3
 8012dc2:	9304      	str	r3, [sp, #16]
 8012dc4:	4656      	mov	r6, sl
 8012dc6:	2700      	movs	r7, #0
 8012dc8:	4621      	mov	r1, r4
 8012dca:	4658      	mov	r0, fp
 8012dcc:	f000 fe4a 	bl	8013a64 <_Bfree>
 8012dd0:	2d00      	cmp	r5, #0
 8012dd2:	d0dc      	beq.n	8012d8e <_dtoa_r+0x65e>
 8012dd4:	b12f      	cbz	r7, 8012de2 <_dtoa_r+0x6b2>
 8012dd6:	42af      	cmp	r7, r5
 8012dd8:	d003      	beq.n	8012de2 <_dtoa_r+0x6b2>
 8012dda:	4639      	mov	r1, r7
 8012ddc:	4658      	mov	r0, fp
 8012dde:	f000 fe41 	bl	8013a64 <_Bfree>
 8012de2:	4629      	mov	r1, r5
 8012de4:	4658      	mov	r0, fp
 8012de6:	f000 fe3d 	bl	8013a64 <_Bfree>
 8012dea:	e7d0      	b.n	8012d8e <_dtoa_r+0x65e>
 8012dec:	9704      	str	r7, [sp, #16]
 8012dee:	4633      	mov	r3, r6
 8012df0:	461e      	mov	r6, r3
 8012df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012df6:	2a39      	cmp	r2, #57	@ 0x39
 8012df8:	d107      	bne.n	8012e0a <_dtoa_r+0x6da>
 8012dfa:	459a      	cmp	sl, r3
 8012dfc:	d1f8      	bne.n	8012df0 <_dtoa_r+0x6c0>
 8012dfe:	9a04      	ldr	r2, [sp, #16]
 8012e00:	3201      	adds	r2, #1
 8012e02:	9204      	str	r2, [sp, #16]
 8012e04:	2230      	movs	r2, #48	@ 0x30
 8012e06:	f88a 2000 	strb.w	r2, [sl]
 8012e0a:	781a      	ldrb	r2, [r3, #0]
 8012e0c:	3201      	adds	r2, #1
 8012e0e:	701a      	strb	r2, [r3, #0]
 8012e10:	e7bd      	b.n	8012d8e <_dtoa_r+0x65e>
 8012e12:	4b7b      	ldr	r3, [pc, #492]	@ (8013000 <_dtoa_r+0x8d0>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	f7ed fbef 	bl	80005f8 <__aeabi_dmul>
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4604      	mov	r4, r0
 8012e20:	460d      	mov	r5, r1
 8012e22:	f7ed fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e26:	2800      	cmp	r0, #0
 8012e28:	f43f aebb 	beq.w	8012ba2 <_dtoa_r+0x472>
 8012e2c:	e6f0      	b.n	8012c10 <_dtoa_r+0x4e0>
 8012e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012e30:	2a00      	cmp	r2, #0
 8012e32:	f000 80db 	beq.w	8012fec <_dtoa_r+0x8bc>
 8012e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e38:	2a01      	cmp	r2, #1
 8012e3a:	f300 80bf 	bgt.w	8012fbc <_dtoa_r+0x88c>
 8012e3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012e40:	2a00      	cmp	r2, #0
 8012e42:	f000 80b7 	beq.w	8012fb4 <_dtoa_r+0x884>
 8012e46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012e4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012e4c:	4646      	mov	r6, r8
 8012e4e:	9a08      	ldr	r2, [sp, #32]
 8012e50:	2101      	movs	r1, #1
 8012e52:	441a      	add	r2, r3
 8012e54:	4658      	mov	r0, fp
 8012e56:	4498      	add	r8, r3
 8012e58:	9208      	str	r2, [sp, #32]
 8012e5a:	f000 ff01 	bl	8013c60 <__i2b>
 8012e5e:	4605      	mov	r5, r0
 8012e60:	b15e      	cbz	r6, 8012e7a <_dtoa_r+0x74a>
 8012e62:	9b08      	ldr	r3, [sp, #32]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	dd08      	ble.n	8012e7a <_dtoa_r+0x74a>
 8012e68:	42b3      	cmp	r3, r6
 8012e6a:	9a08      	ldr	r2, [sp, #32]
 8012e6c:	bfa8      	it	ge
 8012e6e:	4633      	movge	r3, r6
 8012e70:	eba8 0803 	sub.w	r8, r8, r3
 8012e74:	1af6      	subs	r6, r6, r3
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	9308      	str	r3, [sp, #32]
 8012e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e7c:	b1f3      	cbz	r3, 8012ebc <_dtoa_r+0x78c>
 8012e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 80b7 	beq.w	8012ff4 <_dtoa_r+0x8c4>
 8012e86:	b18c      	cbz	r4, 8012eac <_dtoa_r+0x77c>
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4622      	mov	r2, r4
 8012e8c:	4658      	mov	r0, fp
 8012e8e:	f000 ffa7 	bl	8013de0 <__pow5mult>
 8012e92:	464a      	mov	r2, r9
 8012e94:	4601      	mov	r1, r0
 8012e96:	4605      	mov	r5, r0
 8012e98:	4658      	mov	r0, fp
 8012e9a:	f000 fef7 	bl	8013c8c <__multiply>
 8012e9e:	4649      	mov	r1, r9
 8012ea0:	9004      	str	r0, [sp, #16]
 8012ea2:	4658      	mov	r0, fp
 8012ea4:	f000 fdde 	bl	8013a64 <_Bfree>
 8012ea8:	9b04      	ldr	r3, [sp, #16]
 8012eaa:	4699      	mov	r9, r3
 8012eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012eae:	1b1a      	subs	r2, r3, r4
 8012eb0:	d004      	beq.n	8012ebc <_dtoa_r+0x78c>
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	4658      	mov	r0, fp
 8012eb6:	f000 ff93 	bl	8013de0 <__pow5mult>
 8012eba:	4681      	mov	r9, r0
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	4658      	mov	r0, fp
 8012ec0:	f000 fece 	bl	8013c60 <__i2b>
 8012ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f000 81cf 	beq.w	801326c <_dtoa_r+0xb3c>
 8012ece:	461a      	mov	r2, r3
 8012ed0:	4601      	mov	r1, r0
 8012ed2:	4658      	mov	r0, fp
 8012ed4:	f000 ff84 	bl	8013de0 <__pow5mult>
 8012ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	4604      	mov	r4, r0
 8012ede:	f300 8095 	bgt.w	801300c <_dtoa_r+0x8dc>
 8012ee2:	9b02      	ldr	r3, [sp, #8]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	f040 8087 	bne.w	8012ff8 <_dtoa_r+0x8c8>
 8012eea:	9b03      	ldr	r3, [sp, #12]
 8012eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f040 8089 	bne.w	8013008 <_dtoa_r+0x8d8>
 8012ef6:	9b03      	ldr	r3, [sp, #12]
 8012ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012efc:	0d1b      	lsrs	r3, r3, #20
 8012efe:	051b      	lsls	r3, r3, #20
 8012f00:	b12b      	cbz	r3, 8012f0e <_dtoa_r+0x7de>
 8012f02:	9b08      	ldr	r3, [sp, #32]
 8012f04:	3301      	adds	r3, #1
 8012f06:	9308      	str	r3, [sp, #32]
 8012f08:	f108 0801 	add.w	r8, r8, #1
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f000 81b0 	beq.w	8013278 <_dtoa_r+0xb48>
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012f1e:	6918      	ldr	r0, [r3, #16]
 8012f20:	f000 fe52 	bl	8013bc8 <__hi0bits>
 8012f24:	f1c0 0020 	rsb	r0, r0, #32
 8012f28:	9b08      	ldr	r3, [sp, #32]
 8012f2a:	4418      	add	r0, r3
 8012f2c:	f010 001f 	ands.w	r0, r0, #31
 8012f30:	d077      	beq.n	8013022 <_dtoa_r+0x8f2>
 8012f32:	f1c0 0320 	rsb	r3, r0, #32
 8012f36:	2b04      	cmp	r3, #4
 8012f38:	dd6b      	ble.n	8013012 <_dtoa_r+0x8e2>
 8012f3a:	9b08      	ldr	r3, [sp, #32]
 8012f3c:	f1c0 001c 	rsb	r0, r0, #28
 8012f40:	4403      	add	r3, r0
 8012f42:	4480      	add	r8, r0
 8012f44:	4406      	add	r6, r0
 8012f46:	9308      	str	r3, [sp, #32]
 8012f48:	f1b8 0f00 	cmp.w	r8, #0
 8012f4c:	dd05      	ble.n	8012f5a <_dtoa_r+0x82a>
 8012f4e:	4649      	mov	r1, r9
 8012f50:	4642      	mov	r2, r8
 8012f52:	4658      	mov	r0, fp
 8012f54:	f000 ff9e 	bl	8013e94 <__lshift>
 8012f58:	4681      	mov	r9, r0
 8012f5a:	9b08      	ldr	r3, [sp, #32]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	dd05      	ble.n	8012f6c <_dtoa_r+0x83c>
 8012f60:	4621      	mov	r1, r4
 8012f62:	461a      	mov	r2, r3
 8012f64:	4658      	mov	r0, fp
 8012f66:	f000 ff95 	bl	8013e94 <__lshift>
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d059      	beq.n	8013026 <_dtoa_r+0x8f6>
 8012f72:	4621      	mov	r1, r4
 8012f74:	4648      	mov	r0, r9
 8012f76:	f000 fff9 	bl	8013f6c <__mcmp>
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	da53      	bge.n	8013026 <_dtoa_r+0x8f6>
 8012f7e:	1e7b      	subs	r3, r7, #1
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	4649      	mov	r1, r9
 8012f84:	2300      	movs	r3, #0
 8012f86:	220a      	movs	r2, #10
 8012f88:	4658      	mov	r0, fp
 8012f8a:	f000 fd8d 	bl	8013aa8 <__multadd>
 8012f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f90:	4681      	mov	r9, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f000 8172 	beq.w	801327c <_dtoa_r+0xb4c>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	4629      	mov	r1, r5
 8012f9c:	220a      	movs	r2, #10
 8012f9e:	4658      	mov	r0, fp
 8012fa0:	f000 fd82 	bl	8013aa8 <__multadd>
 8012fa4:	9b00      	ldr	r3, [sp, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	4605      	mov	r5, r0
 8012faa:	dc67      	bgt.n	801307c <_dtoa_r+0x94c>
 8012fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	dc41      	bgt.n	8013036 <_dtoa_r+0x906>
 8012fb2:	e063      	b.n	801307c <_dtoa_r+0x94c>
 8012fb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012fba:	e746      	b.n	8012e4a <_dtoa_r+0x71a>
 8012fbc:	9b07      	ldr	r3, [sp, #28]
 8012fbe:	1e5c      	subs	r4, r3, #1
 8012fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fc2:	42a3      	cmp	r3, r4
 8012fc4:	bfbf      	itttt	lt
 8012fc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012fc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012fca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012fcc:	1ae3      	sublt	r3, r4, r3
 8012fce:	bfb4      	ite	lt
 8012fd0:	18d2      	addlt	r2, r2, r3
 8012fd2:	1b1c      	subge	r4, r3, r4
 8012fd4:	9b07      	ldr	r3, [sp, #28]
 8012fd6:	bfbc      	itt	lt
 8012fd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012fda:	2400      	movlt	r4, #0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	bfb5      	itete	lt
 8012fe0:	eba8 0603 	sublt.w	r6, r8, r3
 8012fe4:	9b07      	ldrge	r3, [sp, #28]
 8012fe6:	2300      	movlt	r3, #0
 8012fe8:	4646      	movge	r6, r8
 8012fea:	e730      	b.n	8012e4e <_dtoa_r+0x71e>
 8012fec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012fee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012ff0:	4646      	mov	r6, r8
 8012ff2:	e735      	b.n	8012e60 <_dtoa_r+0x730>
 8012ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ff6:	e75c      	b.n	8012eb2 <_dtoa_r+0x782>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	e788      	b.n	8012f0e <_dtoa_r+0x7de>
 8012ffc:	3fe00000 	.word	0x3fe00000
 8013000:	40240000 	.word	0x40240000
 8013004:	40140000 	.word	0x40140000
 8013008:	9b02      	ldr	r3, [sp, #8]
 801300a:	e780      	b.n	8012f0e <_dtoa_r+0x7de>
 801300c:	2300      	movs	r3, #0
 801300e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013010:	e782      	b.n	8012f18 <_dtoa_r+0x7e8>
 8013012:	d099      	beq.n	8012f48 <_dtoa_r+0x818>
 8013014:	9a08      	ldr	r2, [sp, #32]
 8013016:	331c      	adds	r3, #28
 8013018:	441a      	add	r2, r3
 801301a:	4498      	add	r8, r3
 801301c:	441e      	add	r6, r3
 801301e:	9208      	str	r2, [sp, #32]
 8013020:	e792      	b.n	8012f48 <_dtoa_r+0x818>
 8013022:	4603      	mov	r3, r0
 8013024:	e7f6      	b.n	8013014 <_dtoa_r+0x8e4>
 8013026:	9b07      	ldr	r3, [sp, #28]
 8013028:	9704      	str	r7, [sp, #16]
 801302a:	2b00      	cmp	r3, #0
 801302c:	dc20      	bgt.n	8013070 <_dtoa_r+0x940>
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013032:	2b02      	cmp	r3, #2
 8013034:	dd1e      	ble.n	8013074 <_dtoa_r+0x944>
 8013036:	9b00      	ldr	r3, [sp, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	f47f aec0 	bne.w	8012dbe <_dtoa_r+0x68e>
 801303e:	4621      	mov	r1, r4
 8013040:	2205      	movs	r2, #5
 8013042:	4658      	mov	r0, fp
 8013044:	f000 fd30 	bl	8013aa8 <__multadd>
 8013048:	4601      	mov	r1, r0
 801304a:	4604      	mov	r4, r0
 801304c:	4648      	mov	r0, r9
 801304e:	f000 ff8d 	bl	8013f6c <__mcmp>
 8013052:	2800      	cmp	r0, #0
 8013054:	f77f aeb3 	ble.w	8012dbe <_dtoa_r+0x68e>
 8013058:	4656      	mov	r6, sl
 801305a:	2331      	movs	r3, #49	@ 0x31
 801305c:	f806 3b01 	strb.w	r3, [r6], #1
 8013060:	9b04      	ldr	r3, [sp, #16]
 8013062:	3301      	adds	r3, #1
 8013064:	9304      	str	r3, [sp, #16]
 8013066:	e6ae      	b.n	8012dc6 <_dtoa_r+0x696>
 8013068:	9c07      	ldr	r4, [sp, #28]
 801306a:	9704      	str	r7, [sp, #16]
 801306c:	4625      	mov	r5, r4
 801306e:	e7f3      	b.n	8013058 <_dtoa_r+0x928>
 8013070:	9b07      	ldr	r3, [sp, #28]
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013076:	2b00      	cmp	r3, #0
 8013078:	f000 8104 	beq.w	8013284 <_dtoa_r+0xb54>
 801307c:	2e00      	cmp	r6, #0
 801307e:	dd05      	ble.n	801308c <_dtoa_r+0x95c>
 8013080:	4629      	mov	r1, r5
 8013082:	4632      	mov	r2, r6
 8013084:	4658      	mov	r0, fp
 8013086:	f000 ff05 	bl	8013e94 <__lshift>
 801308a:	4605      	mov	r5, r0
 801308c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801308e:	2b00      	cmp	r3, #0
 8013090:	d05a      	beq.n	8013148 <_dtoa_r+0xa18>
 8013092:	6869      	ldr	r1, [r5, #4]
 8013094:	4658      	mov	r0, fp
 8013096:	f000 fca5 	bl	80139e4 <_Balloc>
 801309a:	4606      	mov	r6, r0
 801309c:	b928      	cbnz	r0, 80130aa <_dtoa_r+0x97a>
 801309e:	4b84      	ldr	r3, [pc, #528]	@ (80132b0 <_dtoa_r+0xb80>)
 80130a0:	4602      	mov	r2, r0
 80130a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80130a6:	f7ff bb5a 	b.w	801275e <_dtoa_r+0x2e>
 80130aa:	692a      	ldr	r2, [r5, #16]
 80130ac:	3202      	adds	r2, #2
 80130ae:	0092      	lsls	r2, r2, #2
 80130b0:	f105 010c 	add.w	r1, r5, #12
 80130b4:	300c      	adds	r0, #12
 80130b6:	f7ff fa7c 	bl	80125b2 <memcpy>
 80130ba:	2201      	movs	r2, #1
 80130bc:	4631      	mov	r1, r6
 80130be:	4658      	mov	r0, fp
 80130c0:	f000 fee8 	bl	8013e94 <__lshift>
 80130c4:	f10a 0301 	add.w	r3, sl, #1
 80130c8:	9307      	str	r3, [sp, #28]
 80130ca:	9b00      	ldr	r3, [sp, #0]
 80130cc:	4453      	add	r3, sl
 80130ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130d0:	9b02      	ldr	r3, [sp, #8]
 80130d2:	f003 0301 	and.w	r3, r3, #1
 80130d6:	462f      	mov	r7, r5
 80130d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80130da:	4605      	mov	r5, r0
 80130dc:	9b07      	ldr	r3, [sp, #28]
 80130de:	4621      	mov	r1, r4
 80130e0:	3b01      	subs	r3, #1
 80130e2:	4648      	mov	r0, r9
 80130e4:	9300      	str	r3, [sp, #0]
 80130e6:	f7ff fa99 	bl	801261c <quorem>
 80130ea:	4639      	mov	r1, r7
 80130ec:	9002      	str	r0, [sp, #8]
 80130ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80130f2:	4648      	mov	r0, r9
 80130f4:	f000 ff3a 	bl	8013f6c <__mcmp>
 80130f8:	462a      	mov	r2, r5
 80130fa:	9008      	str	r0, [sp, #32]
 80130fc:	4621      	mov	r1, r4
 80130fe:	4658      	mov	r0, fp
 8013100:	f000 ff50 	bl	8013fa4 <__mdiff>
 8013104:	68c2      	ldr	r2, [r0, #12]
 8013106:	4606      	mov	r6, r0
 8013108:	bb02      	cbnz	r2, 801314c <_dtoa_r+0xa1c>
 801310a:	4601      	mov	r1, r0
 801310c:	4648      	mov	r0, r9
 801310e:	f000 ff2d 	bl	8013f6c <__mcmp>
 8013112:	4602      	mov	r2, r0
 8013114:	4631      	mov	r1, r6
 8013116:	4658      	mov	r0, fp
 8013118:	920e      	str	r2, [sp, #56]	@ 0x38
 801311a:	f000 fca3 	bl	8013a64 <_Bfree>
 801311e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013122:	9e07      	ldr	r6, [sp, #28]
 8013124:	ea43 0102 	orr.w	r1, r3, r2
 8013128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801312a:	4319      	orrs	r1, r3
 801312c:	d110      	bne.n	8013150 <_dtoa_r+0xa20>
 801312e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013132:	d029      	beq.n	8013188 <_dtoa_r+0xa58>
 8013134:	9b08      	ldr	r3, [sp, #32]
 8013136:	2b00      	cmp	r3, #0
 8013138:	dd02      	ble.n	8013140 <_dtoa_r+0xa10>
 801313a:	9b02      	ldr	r3, [sp, #8]
 801313c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013140:	9b00      	ldr	r3, [sp, #0]
 8013142:	f883 8000 	strb.w	r8, [r3]
 8013146:	e63f      	b.n	8012dc8 <_dtoa_r+0x698>
 8013148:	4628      	mov	r0, r5
 801314a:	e7bb      	b.n	80130c4 <_dtoa_r+0x994>
 801314c:	2201      	movs	r2, #1
 801314e:	e7e1      	b.n	8013114 <_dtoa_r+0x9e4>
 8013150:	9b08      	ldr	r3, [sp, #32]
 8013152:	2b00      	cmp	r3, #0
 8013154:	db04      	blt.n	8013160 <_dtoa_r+0xa30>
 8013156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013158:	430b      	orrs	r3, r1
 801315a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801315c:	430b      	orrs	r3, r1
 801315e:	d120      	bne.n	80131a2 <_dtoa_r+0xa72>
 8013160:	2a00      	cmp	r2, #0
 8013162:	dded      	ble.n	8013140 <_dtoa_r+0xa10>
 8013164:	4649      	mov	r1, r9
 8013166:	2201      	movs	r2, #1
 8013168:	4658      	mov	r0, fp
 801316a:	f000 fe93 	bl	8013e94 <__lshift>
 801316e:	4621      	mov	r1, r4
 8013170:	4681      	mov	r9, r0
 8013172:	f000 fefb 	bl	8013f6c <__mcmp>
 8013176:	2800      	cmp	r0, #0
 8013178:	dc03      	bgt.n	8013182 <_dtoa_r+0xa52>
 801317a:	d1e1      	bne.n	8013140 <_dtoa_r+0xa10>
 801317c:	f018 0f01 	tst.w	r8, #1
 8013180:	d0de      	beq.n	8013140 <_dtoa_r+0xa10>
 8013182:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013186:	d1d8      	bne.n	801313a <_dtoa_r+0xa0a>
 8013188:	9a00      	ldr	r2, [sp, #0]
 801318a:	2339      	movs	r3, #57	@ 0x39
 801318c:	7013      	strb	r3, [r2, #0]
 801318e:	4633      	mov	r3, r6
 8013190:	461e      	mov	r6, r3
 8013192:	3b01      	subs	r3, #1
 8013194:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013198:	2a39      	cmp	r2, #57	@ 0x39
 801319a:	d052      	beq.n	8013242 <_dtoa_r+0xb12>
 801319c:	3201      	adds	r2, #1
 801319e:	701a      	strb	r2, [r3, #0]
 80131a0:	e612      	b.n	8012dc8 <_dtoa_r+0x698>
 80131a2:	2a00      	cmp	r2, #0
 80131a4:	dd07      	ble.n	80131b6 <_dtoa_r+0xa86>
 80131a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80131aa:	d0ed      	beq.n	8013188 <_dtoa_r+0xa58>
 80131ac:	9a00      	ldr	r2, [sp, #0]
 80131ae:	f108 0301 	add.w	r3, r8, #1
 80131b2:	7013      	strb	r3, [r2, #0]
 80131b4:	e608      	b.n	8012dc8 <_dtoa_r+0x698>
 80131b6:	9b07      	ldr	r3, [sp, #28]
 80131b8:	9a07      	ldr	r2, [sp, #28]
 80131ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80131be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d028      	beq.n	8013216 <_dtoa_r+0xae6>
 80131c4:	4649      	mov	r1, r9
 80131c6:	2300      	movs	r3, #0
 80131c8:	220a      	movs	r2, #10
 80131ca:	4658      	mov	r0, fp
 80131cc:	f000 fc6c 	bl	8013aa8 <__multadd>
 80131d0:	42af      	cmp	r7, r5
 80131d2:	4681      	mov	r9, r0
 80131d4:	f04f 0300 	mov.w	r3, #0
 80131d8:	f04f 020a 	mov.w	r2, #10
 80131dc:	4639      	mov	r1, r7
 80131de:	4658      	mov	r0, fp
 80131e0:	d107      	bne.n	80131f2 <_dtoa_r+0xac2>
 80131e2:	f000 fc61 	bl	8013aa8 <__multadd>
 80131e6:	4607      	mov	r7, r0
 80131e8:	4605      	mov	r5, r0
 80131ea:	9b07      	ldr	r3, [sp, #28]
 80131ec:	3301      	adds	r3, #1
 80131ee:	9307      	str	r3, [sp, #28]
 80131f0:	e774      	b.n	80130dc <_dtoa_r+0x9ac>
 80131f2:	f000 fc59 	bl	8013aa8 <__multadd>
 80131f6:	4629      	mov	r1, r5
 80131f8:	4607      	mov	r7, r0
 80131fa:	2300      	movs	r3, #0
 80131fc:	220a      	movs	r2, #10
 80131fe:	4658      	mov	r0, fp
 8013200:	f000 fc52 	bl	8013aa8 <__multadd>
 8013204:	4605      	mov	r5, r0
 8013206:	e7f0      	b.n	80131ea <_dtoa_r+0xaba>
 8013208:	9b00      	ldr	r3, [sp, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	bfcc      	ite	gt
 801320e:	461e      	movgt	r6, r3
 8013210:	2601      	movle	r6, #1
 8013212:	4456      	add	r6, sl
 8013214:	2700      	movs	r7, #0
 8013216:	4649      	mov	r1, r9
 8013218:	2201      	movs	r2, #1
 801321a:	4658      	mov	r0, fp
 801321c:	f000 fe3a 	bl	8013e94 <__lshift>
 8013220:	4621      	mov	r1, r4
 8013222:	4681      	mov	r9, r0
 8013224:	f000 fea2 	bl	8013f6c <__mcmp>
 8013228:	2800      	cmp	r0, #0
 801322a:	dcb0      	bgt.n	801318e <_dtoa_r+0xa5e>
 801322c:	d102      	bne.n	8013234 <_dtoa_r+0xb04>
 801322e:	f018 0f01 	tst.w	r8, #1
 8013232:	d1ac      	bne.n	801318e <_dtoa_r+0xa5e>
 8013234:	4633      	mov	r3, r6
 8013236:	461e      	mov	r6, r3
 8013238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801323c:	2a30      	cmp	r2, #48	@ 0x30
 801323e:	d0fa      	beq.n	8013236 <_dtoa_r+0xb06>
 8013240:	e5c2      	b.n	8012dc8 <_dtoa_r+0x698>
 8013242:	459a      	cmp	sl, r3
 8013244:	d1a4      	bne.n	8013190 <_dtoa_r+0xa60>
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	3301      	adds	r3, #1
 801324a:	9304      	str	r3, [sp, #16]
 801324c:	2331      	movs	r3, #49	@ 0x31
 801324e:	f88a 3000 	strb.w	r3, [sl]
 8013252:	e5b9      	b.n	8012dc8 <_dtoa_r+0x698>
 8013254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013256:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80132b4 <_dtoa_r+0xb84>
 801325a:	b11b      	cbz	r3, 8013264 <_dtoa_r+0xb34>
 801325c:	f10a 0308 	add.w	r3, sl, #8
 8013260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013262:	6013      	str	r3, [r2, #0]
 8013264:	4650      	mov	r0, sl
 8013266:	b019      	add	sp, #100	@ 0x64
 8013268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801326e:	2b01      	cmp	r3, #1
 8013270:	f77f ae37 	ble.w	8012ee2 <_dtoa_r+0x7b2>
 8013274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013276:	930a      	str	r3, [sp, #40]	@ 0x28
 8013278:	2001      	movs	r0, #1
 801327a:	e655      	b.n	8012f28 <_dtoa_r+0x7f8>
 801327c:	9b00      	ldr	r3, [sp, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	f77f aed6 	ble.w	8013030 <_dtoa_r+0x900>
 8013284:	4656      	mov	r6, sl
 8013286:	4621      	mov	r1, r4
 8013288:	4648      	mov	r0, r9
 801328a:	f7ff f9c7 	bl	801261c <quorem>
 801328e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013292:	f806 8b01 	strb.w	r8, [r6], #1
 8013296:	9b00      	ldr	r3, [sp, #0]
 8013298:	eba6 020a 	sub.w	r2, r6, sl
 801329c:	4293      	cmp	r3, r2
 801329e:	ddb3      	ble.n	8013208 <_dtoa_r+0xad8>
 80132a0:	4649      	mov	r1, r9
 80132a2:	2300      	movs	r3, #0
 80132a4:	220a      	movs	r2, #10
 80132a6:	4658      	mov	r0, fp
 80132a8:	f000 fbfe 	bl	8013aa8 <__multadd>
 80132ac:	4681      	mov	r9, r0
 80132ae:	e7ea      	b.n	8013286 <_dtoa_r+0xb56>
 80132b0:	08015a7f 	.word	0x08015a7f
 80132b4:	08015a1a 	.word	0x08015a1a

080132b8 <_free_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	4605      	mov	r5, r0
 80132bc:	2900      	cmp	r1, #0
 80132be:	d041      	beq.n	8013344 <_free_r+0x8c>
 80132c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132c4:	1f0c      	subs	r4, r1, #4
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	bfb8      	it	lt
 80132ca:	18e4      	addlt	r4, r4, r3
 80132cc:	f7fd fbec 	bl	8010aa8 <__malloc_lock>
 80132d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013348 <_free_r+0x90>)
 80132d2:	6813      	ldr	r3, [r2, #0]
 80132d4:	b933      	cbnz	r3, 80132e4 <_free_r+0x2c>
 80132d6:	6063      	str	r3, [r4, #4]
 80132d8:	6014      	str	r4, [r2, #0]
 80132da:	4628      	mov	r0, r5
 80132dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132e0:	f7fd bbe8 	b.w	8010ab4 <__malloc_unlock>
 80132e4:	42a3      	cmp	r3, r4
 80132e6:	d908      	bls.n	80132fa <_free_r+0x42>
 80132e8:	6820      	ldr	r0, [r4, #0]
 80132ea:	1821      	adds	r1, r4, r0
 80132ec:	428b      	cmp	r3, r1
 80132ee:	bf01      	itttt	eq
 80132f0:	6819      	ldreq	r1, [r3, #0]
 80132f2:	685b      	ldreq	r3, [r3, #4]
 80132f4:	1809      	addeq	r1, r1, r0
 80132f6:	6021      	streq	r1, [r4, #0]
 80132f8:	e7ed      	b.n	80132d6 <_free_r+0x1e>
 80132fa:	461a      	mov	r2, r3
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	b10b      	cbz	r3, 8013304 <_free_r+0x4c>
 8013300:	42a3      	cmp	r3, r4
 8013302:	d9fa      	bls.n	80132fa <_free_r+0x42>
 8013304:	6811      	ldr	r1, [r2, #0]
 8013306:	1850      	adds	r0, r2, r1
 8013308:	42a0      	cmp	r0, r4
 801330a:	d10b      	bne.n	8013324 <_free_r+0x6c>
 801330c:	6820      	ldr	r0, [r4, #0]
 801330e:	4401      	add	r1, r0
 8013310:	1850      	adds	r0, r2, r1
 8013312:	4283      	cmp	r3, r0
 8013314:	6011      	str	r1, [r2, #0]
 8013316:	d1e0      	bne.n	80132da <_free_r+0x22>
 8013318:	6818      	ldr	r0, [r3, #0]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	6053      	str	r3, [r2, #4]
 801331e:	4408      	add	r0, r1
 8013320:	6010      	str	r0, [r2, #0]
 8013322:	e7da      	b.n	80132da <_free_r+0x22>
 8013324:	d902      	bls.n	801332c <_free_r+0x74>
 8013326:	230c      	movs	r3, #12
 8013328:	602b      	str	r3, [r5, #0]
 801332a:	e7d6      	b.n	80132da <_free_r+0x22>
 801332c:	6820      	ldr	r0, [r4, #0]
 801332e:	1821      	adds	r1, r4, r0
 8013330:	428b      	cmp	r3, r1
 8013332:	bf04      	itt	eq
 8013334:	6819      	ldreq	r1, [r3, #0]
 8013336:	685b      	ldreq	r3, [r3, #4]
 8013338:	6063      	str	r3, [r4, #4]
 801333a:	bf04      	itt	eq
 801333c:	1809      	addeq	r1, r1, r0
 801333e:	6021      	streq	r1, [r4, #0]
 8013340:	6054      	str	r4, [r2, #4]
 8013342:	e7ca      	b.n	80132da <_free_r+0x22>
 8013344:	bd38      	pop	{r3, r4, r5, pc}
 8013346:	bf00      	nop
 8013348:	200058cc 	.word	0x200058cc

0801334c <rshift>:
 801334c:	6903      	ldr	r3, [r0, #16]
 801334e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013356:	ea4f 1261 	mov.w	r2, r1, asr #5
 801335a:	f100 0414 	add.w	r4, r0, #20
 801335e:	dd45      	ble.n	80133ec <rshift+0xa0>
 8013360:	f011 011f 	ands.w	r1, r1, #31
 8013364:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013368:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801336c:	d10c      	bne.n	8013388 <rshift+0x3c>
 801336e:	f100 0710 	add.w	r7, r0, #16
 8013372:	4629      	mov	r1, r5
 8013374:	42b1      	cmp	r1, r6
 8013376:	d334      	bcc.n	80133e2 <rshift+0x96>
 8013378:	1a9b      	subs	r3, r3, r2
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	1eea      	subs	r2, r5, #3
 801337e:	4296      	cmp	r6, r2
 8013380:	bf38      	it	cc
 8013382:	2300      	movcc	r3, #0
 8013384:	4423      	add	r3, r4
 8013386:	e015      	b.n	80133b4 <rshift+0x68>
 8013388:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801338c:	f1c1 0820 	rsb	r8, r1, #32
 8013390:	40cf      	lsrs	r7, r1
 8013392:	f105 0e04 	add.w	lr, r5, #4
 8013396:	46a1      	mov	r9, r4
 8013398:	4576      	cmp	r6, lr
 801339a:	46f4      	mov	ip, lr
 801339c:	d815      	bhi.n	80133ca <rshift+0x7e>
 801339e:	1a9a      	subs	r2, r3, r2
 80133a0:	0092      	lsls	r2, r2, #2
 80133a2:	3a04      	subs	r2, #4
 80133a4:	3501      	adds	r5, #1
 80133a6:	42ae      	cmp	r6, r5
 80133a8:	bf38      	it	cc
 80133aa:	2200      	movcc	r2, #0
 80133ac:	18a3      	adds	r3, r4, r2
 80133ae:	50a7      	str	r7, [r4, r2]
 80133b0:	b107      	cbz	r7, 80133b4 <rshift+0x68>
 80133b2:	3304      	adds	r3, #4
 80133b4:	1b1a      	subs	r2, r3, r4
 80133b6:	42a3      	cmp	r3, r4
 80133b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133bc:	bf08      	it	eq
 80133be:	2300      	moveq	r3, #0
 80133c0:	6102      	str	r2, [r0, #16]
 80133c2:	bf08      	it	eq
 80133c4:	6143      	streq	r3, [r0, #20]
 80133c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ca:	f8dc c000 	ldr.w	ip, [ip]
 80133ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80133d2:	ea4c 0707 	orr.w	r7, ip, r7
 80133d6:	f849 7b04 	str.w	r7, [r9], #4
 80133da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133de:	40cf      	lsrs	r7, r1
 80133e0:	e7da      	b.n	8013398 <rshift+0x4c>
 80133e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80133e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80133ea:	e7c3      	b.n	8013374 <rshift+0x28>
 80133ec:	4623      	mov	r3, r4
 80133ee:	e7e1      	b.n	80133b4 <rshift+0x68>

080133f0 <__hexdig_fun>:
 80133f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80133f4:	2b09      	cmp	r3, #9
 80133f6:	d802      	bhi.n	80133fe <__hexdig_fun+0xe>
 80133f8:	3820      	subs	r0, #32
 80133fa:	b2c0      	uxtb	r0, r0
 80133fc:	4770      	bx	lr
 80133fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013402:	2b05      	cmp	r3, #5
 8013404:	d801      	bhi.n	801340a <__hexdig_fun+0x1a>
 8013406:	3847      	subs	r0, #71	@ 0x47
 8013408:	e7f7      	b.n	80133fa <__hexdig_fun+0xa>
 801340a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801340e:	2b05      	cmp	r3, #5
 8013410:	d801      	bhi.n	8013416 <__hexdig_fun+0x26>
 8013412:	3827      	subs	r0, #39	@ 0x27
 8013414:	e7f1      	b.n	80133fa <__hexdig_fun+0xa>
 8013416:	2000      	movs	r0, #0
 8013418:	4770      	bx	lr
	...

0801341c <__gethex>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	b085      	sub	sp, #20
 8013422:	468a      	mov	sl, r1
 8013424:	9302      	str	r3, [sp, #8]
 8013426:	680b      	ldr	r3, [r1, #0]
 8013428:	9001      	str	r0, [sp, #4]
 801342a:	4690      	mov	r8, r2
 801342c:	1c9c      	adds	r4, r3, #2
 801342e:	46a1      	mov	r9, r4
 8013430:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013434:	2830      	cmp	r0, #48	@ 0x30
 8013436:	d0fa      	beq.n	801342e <__gethex+0x12>
 8013438:	eba9 0303 	sub.w	r3, r9, r3
 801343c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013440:	f7ff ffd6 	bl	80133f0 <__hexdig_fun>
 8013444:	4605      	mov	r5, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d168      	bne.n	801351c <__gethex+0x100>
 801344a:	49a0      	ldr	r1, [pc, #640]	@ (80136cc <__gethex+0x2b0>)
 801344c:	2201      	movs	r2, #1
 801344e:	4648      	mov	r0, r9
 8013450:	f7fe ff5c 	bl	801230c <strncmp>
 8013454:	4607      	mov	r7, r0
 8013456:	2800      	cmp	r0, #0
 8013458:	d167      	bne.n	801352a <__gethex+0x10e>
 801345a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801345e:	4626      	mov	r6, r4
 8013460:	f7ff ffc6 	bl	80133f0 <__hexdig_fun>
 8013464:	2800      	cmp	r0, #0
 8013466:	d062      	beq.n	801352e <__gethex+0x112>
 8013468:	4623      	mov	r3, r4
 801346a:	7818      	ldrb	r0, [r3, #0]
 801346c:	2830      	cmp	r0, #48	@ 0x30
 801346e:	4699      	mov	r9, r3
 8013470:	f103 0301 	add.w	r3, r3, #1
 8013474:	d0f9      	beq.n	801346a <__gethex+0x4e>
 8013476:	f7ff ffbb 	bl	80133f0 <__hexdig_fun>
 801347a:	fab0 f580 	clz	r5, r0
 801347e:	096d      	lsrs	r5, r5, #5
 8013480:	f04f 0b01 	mov.w	fp, #1
 8013484:	464a      	mov	r2, r9
 8013486:	4616      	mov	r6, r2
 8013488:	3201      	adds	r2, #1
 801348a:	7830      	ldrb	r0, [r6, #0]
 801348c:	f7ff ffb0 	bl	80133f0 <__hexdig_fun>
 8013490:	2800      	cmp	r0, #0
 8013492:	d1f8      	bne.n	8013486 <__gethex+0x6a>
 8013494:	498d      	ldr	r1, [pc, #564]	@ (80136cc <__gethex+0x2b0>)
 8013496:	2201      	movs	r2, #1
 8013498:	4630      	mov	r0, r6
 801349a:	f7fe ff37 	bl	801230c <strncmp>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d13f      	bne.n	8013522 <__gethex+0x106>
 80134a2:	b944      	cbnz	r4, 80134b6 <__gethex+0x9a>
 80134a4:	1c74      	adds	r4, r6, #1
 80134a6:	4622      	mov	r2, r4
 80134a8:	4616      	mov	r6, r2
 80134aa:	3201      	adds	r2, #1
 80134ac:	7830      	ldrb	r0, [r6, #0]
 80134ae:	f7ff ff9f 	bl	80133f0 <__hexdig_fun>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d1f8      	bne.n	80134a8 <__gethex+0x8c>
 80134b6:	1ba4      	subs	r4, r4, r6
 80134b8:	00a7      	lsls	r7, r4, #2
 80134ba:	7833      	ldrb	r3, [r6, #0]
 80134bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80134c0:	2b50      	cmp	r3, #80	@ 0x50
 80134c2:	d13e      	bne.n	8013542 <__gethex+0x126>
 80134c4:	7873      	ldrb	r3, [r6, #1]
 80134c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80134c8:	d033      	beq.n	8013532 <__gethex+0x116>
 80134ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80134cc:	d034      	beq.n	8013538 <__gethex+0x11c>
 80134ce:	1c71      	adds	r1, r6, #1
 80134d0:	2400      	movs	r4, #0
 80134d2:	7808      	ldrb	r0, [r1, #0]
 80134d4:	f7ff ff8c 	bl	80133f0 <__hexdig_fun>
 80134d8:	1e43      	subs	r3, r0, #1
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	2b18      	cmp	r3, #24
 80134de:	d830      	bhi.n	8013542 <__gethex+0x126>
 80134e0:	f1a0 0210 	sub.w	r2, r0, #16
 80134e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134e8:	f7ff ff82 	bl	80133f0 <__hexdig_fun>
 80134ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80134f0:	fa5f fc8c 	uxtb.w	ip, ip
 80134f4:	f1bc 0f18 	cmp.w	ip, #24
 80134f8:	f04f 030a 	mov.w	r3, #10
 80134fc:	d91e      	bls.n	801353c <__gethex+0x120>
 80134fe:	b104      	cbz	r4, 8013502 <__gethex+0xe6>
 8013500:	4252      	negs	r2, r2
 8013502:	4417      	add	r7, r2
 8013504:	f8ca 1000 	str.w	r1, [sl]
 8013508:	b1ed      	cbz	r5, 8013546 <__gethex+0x12a>
 801350a:	f1bb 0f00 	cmp.w	fp, #0
 801350e:	bf0c      	ite	eq
 8013510:	2506      	moveq	r5, #6
 8013512:	2500      	movne	r5, #0
 8013514:	4628      	mov	r0, r5
 8013516:	b005      	add	sp, #20
 8013518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351c:	2500      	movs	r5, #0
 801351e:	462c      	mov	r4, r5
 8013520:	e7b0      	b.n	8013484 <__gethex+0x68>
 8013522:	2c00      	cmp	r4, #0
 8013524:	d1c7      	bne.n	80134b6 <__gethex+0x9a>
 8013526:	4627      	mov	r7, r4
 8013528:	e7c7      	b.n	80134ba <__gethex+0x9e>
 801352a:	464e      	mov	r6, r9
 801352c:	462f      	mov	r7, r5
 801352e:	2501      	movs	r5, #1
 8013530:	e7c3      	b.n	80134ba <__gethex+0x9e>
 8013532:	2400      	movs	r4, #0
 8013534:	1cb1      	adds	r1, r6, #2
 8013536:	e7cc      	b.n	80134d2 <__gethex+0xb6>
 8013538:	2401      	movs	r4, #1
 801353a:	e7fb      	b.n	8013534 <__gethex+0x118>
 801353c:	fb03 0002 	mla	r0, r3, r2, r0
 8013540:	e7ce      	b.n	80134e0 <__gethex+0xc4>
 8013542:	4631      	mov	r1, r6
 8013544:	e7de      	b.n	8013504 <__gethex+0xe8>
 8013546:	eba6 0309 	sub.w	r3, r6, r9
 801354a:	3b01      	subs	r3, #1
 801354c:	4629      	mov	r1, r5
 801354e:	2b07      	cmp	r3, #7
 8013550:	dc0a      	bgt.n	8013568 <__gethex+0x14c>
 8013552:	9801      	ldr	r0, [sp, #4]
 8013554:	f000 fa46 	bl	80139e4 <_Balloc>
 8013558:	4604      	mov	r4, r0
 801355a:	b940      	cbnz	r0, 801356e <__gethex+0x152>
 801355c:	4b5c      	ldr	r3, [pc, #368]	@ (80136d0 <__gethex+0x2b4>)
 801355e:	4602      	mov	r2, r0
 8013560:	21e4      	movs	r1, #228	@ 0xe4
 8013562:	485c      	ldr	r0, [pc, #368]	@ (80136d4 <__gethex+0x2b8>)
 8013564:	f7ff f83c 	bl	80125e0 <__assert_func>
 8013568:	3101      	adds	r1, #1
 801356a:	105b      	asrs	r3, r3, #1
 801356c:	e7ef      	b.n	801354e <__gethex+0x132>
 801356e:	f100 0a14 	add.w	sl, r0, #20
 8013572:	2300      	movs	r3, #0
 8013574:	4655      	mov	r5, sl
 8013576:	469b      	mov	fp, r3
 8013578:	45b1      	cmp	r9, r6
 801357a:	d337      	bcc.n	80135ec <__gethex+0x1d0>
 801357c:	f845 bb04 	str.w	fp, [r5], #4
 8013580:	eba5 050a 	sub.w	r5, r5, sl
 8013584:	10ad      	asrs	r5, r5, #2
 8013586:	6125      	str	r5, [r4, #16]
 8013588:	4658      	mov	r0, fp
 801358a:	f000 fb1d 	bl	8013bc8 <__hi0bits>
 801358e:	016d      	lsls	r5, r5, #5
 8013590:	f8d8 6000 	ldr.w	r6, [r8]
 8013594:	1a2d      	subs	r5, r5, r0
 8013596:	42b5      	cmp	r5, r6
 8013598:	dd54      	ble.n	8013644 <__gethex+0x228>
 801359a:	1bad      	subs	r5, r5, r6
 801359c:	4629      	mov	r1, r5
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 feb1 	bl	8014306 <__any_on>
 80135a4:	4681      	mov	r9, r0
 80135a6:	b178      	cbz	r0, 80135c8 <__gethex+0x1ac>
 80135a8:	1e6b      	subs	r3, r5, #1
 80135aa:	1159      	asrs	r1, r3, #5
 80135ac:	f003 021f 	and.w	r2, r3, #31
 80135b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135b4:	f04f 0901 	mov.w	r9, #1
 80135b8:	fa09 f202 	lsl.w	r2, r9, r2
 80135bc:	420a      	tst	r2, r1
 80135be:	d003      	beq.n	80135c8 <__gethex+0x1ac>
 80135c0:	454b      	cmp	r3, r9
 80135c2:	dc36      	bgt.n	8013632 <__gethex+0x216>
 80135c4:	f04f 0902 	mov.w	r9, #2
 80135c8:	4629      	mov	r1, r5
 80135ca:	4620      	mov	r0, r4
 80135cc:	f7ff febe 	bl	801334c <rshift>
 80135d0:	442f      	add	r7, r5
 80135d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135d6:	42bb      	cmp	r3, r7
 80135d8:	da42      	bge.n	8013660 <__gethex+0x244>
 80135da:	9801      	ldr	r0, [sp, #4]
 80135dc:	4621      	mov	r1, r4
 80135de:	f000 fa41 	bl	8013a64 <_Bfree>
 80135e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135e4:	2300      	movs	r3, #0
 80135e6:	6013      	str	r3, [r2, #0]
 80135e8:	25a3      	movs	r5, #163	@ 0xa3
 80135ea:	e793      	b.n	8013514 <__gethex+0xf8>
 80135ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80135f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80135f2:	d012      	beq.n	801361a <__gethex+0x1fe>
 80135f4:	2b20      	cmp	r3, #32
 80135f6:	d104      	bne.n	8013602 <__gethex+0x1e6>
 80135f8:	f845 bb04 	str.w	fp, [r5], #4
 80135fc:	f04f 0b00 	mov.w	fp, #0
 8013600:	465b      	mov	r3, fp
 8013602:	7830      	ldrb	r0, [r6, #0]
 8013604:	9303      	str	r3, [sp, #12]
 8013606:	f7ff fef3 	bl	80133f0 <__hexdig_fun>
 801360a:	9b03      	ldr	r3, [sp, #12]
 801360c:	f000 000f 	and.w	r0, r0, #15
 8013610:	4098      	lsls	r0, r3
 8013612:	ea4b 0b00 	orr.w	fp, fp, r0
 8013616:	3304      	adds	r3, #4
 8013618:	e7ae      	b.n	8013578 <__gethex+0x15c>
 801361a:	45b1      	cmp	r9, r6
 801361c:	d8ea      	bhi.n	80135f4 <__gethex+0x1d8>
 801361e:	492b      	ldr	r1, [pc, #172]	@ (80136cc <__gethex+0x2b0>)
 8013620:	9303      	str	r3, [sp, #12]
 8013622:	2201      	movs	r2, #1
 8013624:	4630      	mov	r0, r6
 8013626:	f7fe fe71 	bl	801230c <strncmp>
 801362a:	9b03      	ldr	r3, [sp, #12]
 801362c:	2800      	cmp	r0, #0
 801362e:	d1e1      	bne.n	80135f4 <__gethex+0x1d8>
 8013630:	e7a2      	b.n	8013578 <__gethex+0x15c>
 8013632:	1ea9      	subs	r1, r5, #2
 8013634:	4620      	mov	r0, r4
 8013636:	f000 fe66 	bl	8014306 <__any_on>
 801363a:	2800      	cmp	r0, #0
 801363c:	d0c2      	beq.n	80135c4 <__gethex+0x1a8>
 801363e:	f04f 0903 	mov.w	r9, #3
 8013642:	e7c1      	b.n	80135c8 <__gethex+0x1ac>
 8013644:	da09      	bge.n	801365a <__gethex+0x23e>
 8013646:	1b75      	subs	r5, r6, r5
 8013648:	4621      	mov	r1, r4
 801364a:	9801      	ldr	r0, [sp, #4]
 801364c:	462a      	mov	r2, r5
 801364e:	f000 fc21 	bl	8013e94 <__lshift>
 8013652:	1b7f      	subs	r7, r7, r5
 8013654:	4604      	mov	r4, r0
 8013656:	f100 0a14 	add.w	sl, r0, #20
 801365a:	f04f 0900 	mov.w	r9, #0
 801365e:	e7b8      	b.n	80135d2 <__gethex+0x1b6>
 8013660:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013664:	42bd      	cmp	r5, r7
 8013666:	dd6f      	ble.n	8013748 <__gethex+0x32c>
 8013668:	1bed      	subs	r5, r5, r7
 801366a:	42ae      	cmp	r6, r5
 801366c:	dc34      	bgt.n	80136d8 <__gethex+0x2bc>
 801366e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013672:	2b02      	cmp	r3, #2
 8013674:	d022      	beq.n	80136bc <__gethex+0x2a0>
 8013676:	2b03      	cmp	r3, #3
 8013678:	d024      	beq.n	80136c4 <__gethex+0x2a8>
 801367a:	2b01      	cmp	r3, #1
 801367c:	d115      	bne.n	80136aa <__gethex+0x28e>
 801367e:	42ae      	cmp	r6, r5
 8013680:	d113      	bne.n	80136aa <__gethex+0x28e>
 8013682:	2e01      	cmp	r6, #1
 8013684:	d10b      	bne.n	801369e <__gethex+0x282>
 8013686:	9a02      	ldr	r2, [sp, #8]
 8013688:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801368c:	6013      	str	r3, [r2, #0]
 801368e:	2301      	movs	r3, #1
 8013690:	6123      	str	r3, [r4, #16]
 8013692:	f8ca 3000 	str.w	r3, [sl]
 8013696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013698:	2562      	movs	r5, #98	@ 0x62
 801369a:	601c      	str	r4, [r3, #0]
 801369c:	e73a      	b.n	8013514 <__gethex+0xf8>
 801369e:	1e71      	subs	r1, r6, #1
 80136a0:	4620      	mov	r0, r4
 80136a2:	f000 fe30 	bl	8014306 <__any_on>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d1ed      	bne.n	8013686 <__gethex+0x26a>
 80136aa:	9801      	ldr	r0, [sp, #4]
 80136ac:	4621      	mov	r1, r4
 80136ae:	f000 f9d9 	bl	8013a64 <_Bfree>
 80136b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136b4:	2300      	movs	r3, #0
 80136b6:	6013      	str	r3, [r2, #0]
 80136b8:	2550      	movs	r5, #80	@ 0x50
 80136ba:	e72b      	b.n	8013514 <__gethex+0xf8>
 80136bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1f3      	bne.n	80136aa <__gethex+0x28e>
 80136c2:	e7e0      	b.n	8013686 <__gethex+0x26a>
 80136c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1dd      	bne.n	8013686 <__gethex+0x26a>
 80136ca:	e7ee      	b.n	80136aa <__gethex+0x28e>
 80136cc:	080157d8 	.word	0x080157d8
 80136d0:	08015a7f 	.word	0x08015a7f
 80136d4:	08015a90 	.word	0x08015a90
 80136d8:	1e6f      	subs	r7, r5, #1
 80136da:	f1b9 0f00 	cmp.w	r9, #0
 80136de:	d130      	bne.n	8013742 <__gethex+0x326>
 80136e0:	b127      	cbz	r7, 80136ec <__gethex+0x2d0>
 80136e2:	4639      	mov	r1, r7
 80136e4:	4620      	mov	r0, r4
 80136e6:	f000 fe0e 	bl	8014306 <__any_on>
 80136ea:	4681      	mov	r9, r0
 80136ec:	117a      	asrs	r2, r7, #5
 80136ee:	2301      	movs	r3, #1
 80136f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80136f4:	f007 071f 	and.w	r7, r7, #31
 80136f8:	40bb      	lsls	r3, r7
 80136fa:	4213      	tst	r3, r2
 80136fc:	4629      	mov	r1, r5
 80136fe:	4620      	mov	r0, r4
 8013700:	bf18      	it	ne
 8013702:	f049 0902 	orrne.w	r9, r9, #2
 8013706:	f7ff fe21 	bl	801334c <rshift>
 801370a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801370e:	1b76      	subs	r6, r6, r5
 8013710:	2502      	movs	r5, #2
 8013712:	f1b9 0f00 	cmp.w	r9, #0
 8013716:	d047      	beq.n	80137a8 <__gethex+0x38c>
 8013718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801371c:	2b02      	cmp	r3, #2
 801371e:	d015      	beq.n	801374c <__gethex+0x330>
 8013720:	2b03      	cmp	r3, #3
 8013722:	d017      	beq.n	8013754 <__gethex+0x338>
 8013724:	2b01      	cmp	r3, #1
 8013726:	d109      	bne.n	801373c <__gethex+0x320>
 8013728:	f019 0f02 	tst.w	r9, #2
 801372c:	d006      	beq.n	801373c <__gethex+0x320>
 801372e:	f8da 3000 	ldr.w	r3, [sl]
 8013732:	ea49 0903 	orr.w	r9, r9, r3
 8013736:	f019 0f01 	tst.w	r9, #1
 801373a:	d10e      	bne.n	801375a <__gethex+0x33e>
 801373c:	f045 0510 	orr.w	r5, r5, #16
 8013740:	e032      	b.n	80137a8 <__gethex+0x38c>
 8013742:	f04f 0901 	mov.w	r9, #1
 8013746:	e7d1      	b.n	80136ec <__gethex+0x2d0>
 8013748:	2501      	movs	r5, #1
 801374a:	e7e2      	b.n	8013712 <__gethex+0x2f6>
 801374c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801374e:	f1c3 0301 	rsb	r3, r3, #1
 8013752:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013756:	2b00      	cmp	r3, #0
 8013758:	d0f0      	beq.n	801373c <__gethex+0x320>
 801375a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801375e:	f104 0314 	add.w	r3, r4, #20
 8013762:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013766:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801376a:	f04f 0c00 	mov.w	ip, #0
 801376e:	4618      	mov	r0, r3
 8013770:	f853 2b04 	ldr.w	r2, [r3], #4
 8013774:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013778:	d01b      	beq.n	80137b2 <__gethex+0x396>
 801377a:	3201      	adds	r2, #1
 801377c:	6002      	str	r2, [r0, #0]
 801377e:	2d02      	cmp	r5, #2
 8013780:	f104 0314 	add.w	r3, r4, #20
 8013784:	d13c      	bne.n	8013800 <__gethex+0x3e4>
 8013786:	f8d8 2000 	ldr.w	r2, [r8]
 801378a:	3a01      	subs	r2, #1
 801378c:	42b2      	cmp	r2, r6
 801378e:	d109      	bne.n	80137a4 <__gethex+0x388>
 8013790:	1171      	asrs	r1, r6, #5
 8013792:	2201      	movs	r2, #1
 8013794:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013798:	f006 061f 	and.w	r6, r6, #31
 801379c:	fa02 f606 	lsl.w	r6, r2, r6
 80137a0:	421e      	tst	r6, r3
 80137a2:	d13a      	bne.n	801381a <__gethex+0x3fe>
 80137a4:	f045 0520 	orr.w	r5, r5, #32
 80137a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137aa:	601c      	str	r4, [r3, #0]
 80137ac:	9b02      	ldr	r3, [sp, #8]
 80137ae:	601f      	str	r7, [r3, #0]
 80137b0:	e6b0      	b.n	8013514 <__gethex+0xf8>
 80137b2:	4299      	cmp	r1, r3
 80137b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80137b8:	d8d9      	bhi.n	801376e <__gethex+0x352>
 80137ba:	68a3      	ldr	r3, [r4, #8]
 80137bc:	459b      	cmp	fp, r3
 80137be:	db17      	blt.n	80137f0 <__gethex+0x3d4>
 80137c0:	6861      	ldr	r1, [r4, #4]
 80137c2:	9801      	ldr	r0, [sp, #4]
 80137c4:	3101      	adds	r1, #1
 80137c6:	f000 f90d 	bl	80139e4 <_Balloc>
 80137ca:	4681      	mov	r9, r0
 80137cc:	b918      	cbnz	r0, 80137d6 <__gethex+0x3ba>
 80137ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013838 <__gethex+0x41c>)
 80137d0:	4602      	mov	r2, r0
 80137d2:	2184      	movs	r1, #132	@ 0x84
 80137d4:	e6c5      	b.n	8013562 <__gethex+0x146>
 80137d6:	6922      	ldr	r2, [r4, #16]
 80137d8:	3202      	adds	r2, #2
 80137da:	f104 010c 	add.w	r1, r4, #12
 80137de:	0092      	lsls	r2, r2, #2
 80137e0:	300c      	adds	r0, #12
 80137e2:	f7fe fee6 	bl	80125b2 <memcpy>
 80137e6:	4621      	mov	r1, r4
 80137e8:	9801      	ldr	r0, [sp, #4]
 80137ea:	f000 f93b 	bl	8013a64 <_Bfree>
 80137ee:	464c      	mov	r4, r9
 80137f0:	6923      	ldr	r3, [r4, #16]
 80137f2:	1c5a      	adds	r2, r3, #1
 80137f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80137f8:	6122      	str	r2, [r4, #16]
 80137fa:	2201      	movs	r2, #1
 80137fc:	615a      	str	r2, [r3, #20]
 80137fe:	e7be      	b.n	801377e <__gethex+0x362>
 8013800:	6922      	ldr	r2, [r4, #16]
 8013802:	455a      	cmp	r2, fp
 8013804:	dd0b      	ble.n	801381e <__gethex+0x402>
 8013806:	2101      	movs	r1, #1
 8013808:	4620      	mov	r0, r4
 801380a:	f7ff fd9f 	bl	801334c <rshift>
 801380e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013812:	3701      	adds	r7, #1
 8013814:	42bb      	cmp	r3, r7
 8013816:	f6ff aee0 	blt.w	80135da <__gethex+0x1be>
 801381a:	2501      	movs	r5, #1
 801381c:	e7c2      	b.n	80137a4 <__gethex+0x388>
 801381e:	f016 061f 	ands.w	r6, r6, #31
 8013822:	d0fa      	beq.n	801381a <__gethex+0x3fe>
 8013824:	4453      	add	r3, sl
 8013826:	f1c6 0620 	rsb	r6, r6, #32
 801382a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801382e:	f000 f9cb 	bl	8013bc8 <__hi0bits>
 8013832:	42b0      	cmp	r0, r6
 8013834:	dbe7      	blt.n	8013806 <__gethex+0x3ea>
 8013836:	e7f0      	b.n	801381a <__gethex+0x3fe>
 8013838:	08015a7f 	.word	0x08015a7f

0801383c <L_shift>:
 801383c:	f1c2 0208 	rsb	r2, r2, #8
 8013840:	0092      	lsls	r2, r2, #2
 8013842:	b570      	push	{r4, r5, r6, lr}
 8013844:	f1c2 0620 	rsb	r6, r2, #32
 8013848:	6843      	ldr	r3, [r0, #4]
 801384a:	6804      	ldr	r4, [r0, #0]
 801384c:	fa03 f506 	lsl.w	r5, r3, r6
 8013850:	432c      	orrs	r4, r5
 8013852:	40d3      	lsrs	r3, r2
 8013854:	6004      	str	r4, [r0, #0]
 8013856:	f840 3f04 	str.w	r3, [r0, #4]!
 801385a:	4288      	cmp	r0, r1
 801385c:	d3f4      	bcc.n	8013848 <L_shift+0xc>
 801385e:	bd70      	pop	{r4, r5, r6, pc}

08013860 <__match>:
 8013860:	b530      	push	{r4, r5, lr}
 8013862:	6803      	ldr	r3, [r0, #0]
 8013864:	3301      	adds	r3, #1
 8013866:	f811 4b01 	ldrb.w	r4, [r1], #1
 801386a:	b914      	cbnz	r4, 8013872 <__match+0x12>
 801386c:	6003      	str	r3, [r0, #0]
 801386e:	2001      	movs	r0, #1
 8013870:	bd30      	pop	{r4, r5, pc}
 8013872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013876:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801387a:	2d19      	cmp	r5, #25
 801387c:	bf98      	it	ls
 801387e:	3220      	addls	r2, #32
 8013880:	42a2      	cmp	r2, r4
 8013882:	d0f0      	beq.n	8013866 <__match+0x6>
 8013884:	2000      	movs	r0, #0
 8013886:	e7f3      	b.n	8013870 <__match+0x10>

08013888 <__hexnan>:
 8013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388c:	680b      	ldr	r3, [r1, #0]
 801388e:	6801      	ldr	r1, [r0, #0]
 8013890:	115e      	asrs	r6, r3, #5
 8013892:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013896:	f013 031f 	ands.w	r3, r3, #31
 801389a:	b087      	sub	sp, #28
 801389c:	bf18      	it	ne
 801389e:	3604      	addne	r6, #4
 80138a0:	2500      	movs	r5, #0
 80138a2:	1f37      	subs	r7, r6, #4
 80138a4:	4682      	mov	sl, r0
 80138a6:	4690      	mov	r8, r2
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80138ae:	46b9      	mov	r9, r7
 80138b0:	463c      	mov	r4, r7
 80138b2:	9502      	str	r5, [sp, #8]
 80138b4:	46ab      	mov	fp, r5
 80138b6:	784a      	ldrb	r2, [r1, #1]
 80138b8:	1c4b      	adds	r3, r1, #1
 80138ba:	9303      	str	r3, [sp, #12]
 80138bc:	b342      	cbz	r2, 8013910 <__hexnan+0x88>
 80138be:	4610      	mov	r0, r2
 80138c0:	9105      	str	r1, [sp, #20]
 80138c2:	9204      	str	r2, [sp, #16]
 80138c4:	f7ff fd94 	bl	80133f0 <__hexdig_fun>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d151      	bne.n	8013970 <__hexnan+0xe8>
 80138cc:	9a04      	ldr	r2, [sp, #16]
 80138ce:	9905      	ldr	r1, [sp, #20]
 80138d0:	2a20      	cmp	r2, #32
 80138d2:	d818      	bhi.n	8013906 <__hexnan+0x7e>
 80138d4:	9b02      	ldr	r3, [sp, #8]
 80138d6:	459b      	cmp	fp, r3
 80138d8:	dd13      	ble.n	8013902 <__hexnan+0x7a>
 80138da:	454c      	cmp	r4, r9
 80138dc:	d206      	bcs.n	80138ec <__hexnan+0x64>
 80138de:	2d07      	cmp	r5, #7
 80138e0:	dc04      	bgt.n	80138ec <__hexnan+0x64>
 80138e2:	462a      	mov	r2, r5
 80138e4:	4649      	mov	r1, r9
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7ff ffa8 	bl	801383c <L_shift>
 80138ec:	4544      	cmp	r4, r8
 80138ee:	d952      	bls.n	8013996 <__hexnan+0x10e>
 80138f0:	2300      	movs	r3, #0
 80138f2:	f1a4 0904 	sub.w	r9, r4, #4
 80138f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80138fa:	f8cd b008 	str.w	fp, [sp, #8]
 80138fe:	464c      	mov	r4, r9
 8013900:	461d      	mov	r5, r3
 8013902:	9903      	ldr	r1, [sp, #12]
 8013904:	e7d7      	b.n	80138b6 <__hexnan+0x2e>
 8013906:	2a29      	cmp	r2, #41	@ 0x29
 8013908:	d157      	bne.n	80139ba <__hexnan+0x132>
 801390a:	3102      	adds	r1, #2
 801390c:	f8ca 1000 	str.w	r1, [sl]
 8013910:	f1bb 0f00 	cmp.w	fp, #0
 8013914:	d051      	beq.n	80139ba <__hexnan+0x132>
 8013916:	454c      	cmp	r4, r9
 8013918:	d206      	bcs.n	8013928 <__hexnan+0xa0>
 801391a:	2d07      	cmp	r5, #7
 801391c:	dc04      	bgt.n	8013928 <__hexnan+0xa0>
 801391e:	462a      	mov	r2, r5
 8013920:	4649      	mov	r1, r9
 8013922:	4620      	mov	r0, r4
 8013924:	f7ff ff8a 	bl	801383c <L_shift>
 8013928:	4544      	cmp	r4, r8
 801392a:	d936      	bls.n	801399a <__hexnan+0x112>
 801392c:	f1a8 0204 	sub.w	r2, r8, #4
 8013930:	4623      	mov	r3, r4
 8013932:	f853 1b04 	ldr.w	r1, [r3], #4
 8013936:	f842 1f04 	str.w	r1, [r2, #4]!
 801393a:	429f      	cmp	r7, r3
 801393c:	d2f9      	bcs.n	8013932 <__hexnan+0xaa>
 801393e:	1b3b      	subs	r3, r7, r4
 8013940:	f023 0303 	bic.w	r3, r3, #3
 8013944:	3304      	adds	r3, #4
 8013946:	3401      	adds	r4, #1
 8013948:	3e03      	subs	r6, #3
 801394a:	42b4      	cmp	r4, r6
 801394c:	bf88      	it	hi
 801394e:	2304      	movhi	r3, #4
 8013950:	4443      	add	r3, r8
 8013952:	2200      	movs	r2, #0
 8013954:	f843 2b04 	str.w	r2, [r3], #4
 8013958:	429f      	cmp	r7, r3
 801395a:	d2fb      	bcs.n	8013954 <__hexnan+0xcc>
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	b91b      	cbnz	r3, 8013968 <__hexnan+0xe0>
 8013960:	4547      	cmp	r7, r8
 8013962:	d128      	bne.n	80139b6 <__hexnan+0x12e>
 8013964:	2301      	movs	r3, #1
 8013966:	603b      	str	r3, [r7, #0]
 8013968:	2005      	movs	r0, #5
 801396a:	b007      	add	sp, #28
 801396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013970:	3501      	adds	r5, #1
 8013972:	2d08      	cmp	r5, #8
 8013974:	f10b 0b01 	add.w	fp, fp, #1
 8013978:	dd06      	ble.n	8013988 <__hexnan+0x100>
 801397a:	4544      	cmp	r4, r8
 801397c:	d9c1      	bls.n	8013902 <__hexnan+0x7a>
 801397e:	2300      	movs	r3, #0
 8013980:	f844 3c04 	str.w	r3, [r4, #-4]
 8013984:	2501      	movs	r5, #1
 8013986:	3c04      	subs	r4, #4
 8013988:	6822      	ldr	r2, [r4, #0]
 801398a:	f000 000f 	and.w	r0, r0, #15
 801398e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013992:	6020      	str	r0, [r4, #0]
 8013994:	e7b5      	b.n	8013902 <__hexnan+0x7a>
 8013996:	2508      	movs	r5, #8
 8013998:	e7b3      	b.n	8013902 <__hexnan+0x7a>
 801399a:	9b01      	ldr	r3, [sp, #4]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d0dd      	beq.n	801395c <__hexnan+0xd4>
 80139a0:	f1c3 0320 	rsb	r3, r3, #32
 80139a4:	f04f 32ff 	mov.w	r2, #4294967295
 80139a8:	40da      	lsrs	r2, r3
 80139aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80139ae:	4013      	ands	r3, r2
 80139b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80139b4:	e7d2      	b.n	801395c <__hexnan+0xd4>
 80139b6:	3f04      	subs	r7, #4
 80139b8:	e7d0      	b.n	801395c <__hexnan+0xd4>
 80139ba:	2004      	movs	r0, #4
 80139bc:	e7d5      	b.n	801396a <__hexnan+0xe2>

080139be <__ascii_mbtowc>:
 80139be:	b082      	sub	sp, #8
 80139c0:	b901      	cbnz	r1, 80139c4 <__ascii_mbtowc+0x6>
 80139c2:	a901      	add	r1, sp, #4
 80139c4:	b142      	cbz	r2, 80139d8 <__ascii_mbtowc+0x1a>
 80139c6:	b14b      	cbz	r3, 80139dc <__ascii_mbtowc+0x1e>
 80139c8:	7813      	ldrb	r3, [r2, #0]
 80139ca:	600b      	str	r3, [r1, #0]
 80139cc:	7812      	ldrb	r2, [r2, #0]
 80139ce:	1e10      	subs	r0, r2, #0
 80139d0:	bf18      	it	ne
 80139d2:	2001      	movne	r0, #1
 80139d4:	b002      	add	sp, #8
 80139d6:	4770      	bx	lr
 80139d8:	4610      	mov	r0, r2
 80139da:	e7fb      	b.n	80139d4 <__ascii_mbtowc+0x16>
 80139dc:	f06f 0001 	mvn.w	r0, #1
 80139e0:	e7f8      	b.n	80139d4 <__ascii_mbtowc+0x16>
	...

080139e4 <_Balloc>:
 80139e4:	b570      	push	{r4, r5, r6, lr}
 80139e6:	69c6      	ldr	r6, [r0, #28]
 80139e8:	4604      	mov	r4, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	b976      	cbnz	r6, 8013a0c <_Balloc+0x28>
 80139ee:	2010      	movs	r0, #16
 80139f0:	f7fc ffa8 	bl	8010944 <malloc>
 80139f4:	4602      	mov	r2, r0
 80139f6:	61e0      	str	r0, [r4, #28]
 80139f8:	b920      	cbnz	r0, 8013a04 <_Balloc+0x20>
 80139fa:	4b18      	ldr	r3, [pc, #96]	@ (8013a5c <_Balloc+0x78>)
 80139fc:	4818      	ldr	r0, [pc, #96]	@ (8013a60 <_Balloc+0x7c>)
 80139fe:	216b      	movs	r1, #107	@ 0x6b
 8013a00:	f7fe fdee 	bl	80125e0 <__assert_func>
 8013a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a08:	6006      	str	r6, [r0, #0]
 8013a0a:	60c6      	str	r6, [r0, #12]
 8013a0c:	69e6      	ldr	r6, [r4, #28]
 8013a0e:	68f3      	ldr	r3, [r6, #12]
 8013a10:	b183      	cbz	r3, 8013a34 <_Balloc+0x50>
 8013a12:	69e3      	ldr	r3, [r4, #28]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a1a:	b9b8      	cbnz	r0, 8013a4c <_Balloc+0x68>
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8013a22:	1d72      	adds	r2, r6, #5
 8013a24:	0092      	lsls	r2, r2, #2
 8013a26:	4620      	mov	r0, r4
 8013a28:	f000 fed1 	bl	80147ce <_calloc_r>
 8013a2c:	b160      	cbz	r0, 8013a48 <_Balloc+0x64>
 8013a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a32:	e00e      	b.n	8013a52 <_Balloc+0x6e>
 8013a34:	2221      	movs	r2, #33	@ 0x21
 8013a36:	2104      	movs	r1, #4
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f000 fec8 	bl	80147ce <_calloc_r>
 8013a3e:	69e3      	ldr	r3, [r4, #28]
 8013a40:	60f0      	str	r0, [r6, #12]
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d1e4      	bne.n	8013a12 <_Balloc+0x2e>
 8013a48:	2000      	movs	r0, #0
 8013a4a:	bd70      	pop	{r4, r5, r6, pc}
 8013a4c:	6802      	ldr	r2, [r0, #0]
 8013a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a52:	2300      	movs	r3, #0
 8013a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a58:	e7f7      	b.n	8013a4a <_Balloc+0x66>
 8013a5a:	bf00      	nop
 8013a5c:	08015965 	.word	0x08015965
 8013a60:	08015af0 	.word	0x08015af0

08013a64 <_Bfree>:
 8013a64:	b570      	push	{r4, r5, r6, lr}
 8013a66:	69c6      	ldr	r6, [r0, #28]
 8013a68:	4605      	mov	r5, r0
 8013a6a:	460c      	mov	r4, r1
 8013a6c:	b976      	cbnz	r6, 8013a8c <_Bfree+0x28>
 8013a6e:	2010      	movs	r0, #16
 8013a70:	f7fc ff68 	bl	8010944 <malloc>
 8013a74:	4602      	mov	r2, r0
 8013a76:	61e8      	str	r0, [r5, #28]
 8013a78:	b920      	cbnz	r0, 8013a84 <_Bfree+0x20>
 8013a7a:	4b09      	ldr	r3, [pc, #36]	@ (8013aa0 <_Bfree+0x3c>)
 8013a7c:	4809      	ldr	r0, [pc, #36]	@ (8013aa4 <_Bfree+0x40>)
 8013a7e:	218f      	movs	r1, #143	@ 0x8f
 8013a80:	f7fe fdae 	bl	80125e0 <__assert_func>
 8013a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a88:	6006      	str	r6, [r0, #0]
 8013a8a:	60c6      	str	r6, [r0, #12]
 8013a8c:	b13c      	cbz	r4, 8013a9e <_Bfree+0x3a>
 8013a8e:	69eb      	ldr	r3, [r5, #28]
 8013a90:	6862      	ldr	r2, [r4, #4]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a98:	6021      	str	r1, [r4, #0]
 8013a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a9e:	bd70      	pop	{r4, r5, r6, pc}
 8013aa0:	08015965 	.word	0x08015965
 8013aa4:	08015af0 	.word	0x08015af0

08013aa8 <__multadd>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	690d      	ldr	r5, [r1, #16]
 8013aae:	4607      	mov	r7, r0
 8013ab0:	460c      	mov	r4, r1
 8013ab2:	461e      	mov	r6, r3
 8013ab4:	f101 0c14 	add.w	ip, r1, #20
 8013ab8:	2000      	movs	r0, #0
 8013aba:	f8dc 3000 	ldr.w	r3, [ip]
 8013abe:	b299      	uxth	r1, r3
 8013ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8013ac4:	0c1e      	lsrs	r6, r3, #16
 8013ac6:	0c0b      	lsrs	r3, r1, #16
 8013ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8013acc:	b289      	uxth	r1, r1
 8013ace:	3001      	adds	r0, #1
 8013ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ad4:	4285      	cmp	r5, r0
 8013ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8013ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ade:	dcec      	bgt.n	8013aba <__multadd+0x12>
 8013ae0:	b30e      	cbz	r6, 8013b26 <__multadd+0x7e>
 8013ae2:	68a3      	ldr	r3, [r4, #8]
 8013ae4:	42ab      	cmp	r3, r5
 8013ae6:	dc19      	bgt.n	8013b1c <__multadd+0x74>
 8013ae8:	6861      	ldr	r1, [r4, #4]
 8013aea:	4638      	mov	r0, r7
 8013aec:	3101      	adds	r1, #1
 8013aee:	f7ff ff79 	bl	80139e4 <_Balloc>
 8013af2:	4680      	mov	r8, r0
 8013af4:	b928      	cbnz	r0, 8013b02 <__multadd+0x5a>
 8013af6:	4602      	mov	r2, r0
 8013af8:	4b0c      	ldr	r3, [pc, #48]	@ (8013b2c <__multadd+0x84>)
 8013afa:	480d      	ldr	r0, [pc, #52]	@ (8013b30 <__multadd+0x88>)
 8013afc:	21ba      	movs	r1, #186	@ 0xba
 8013afe:	f7fe fd6f 	bl	80125e0 <__assert_func>
 8013b02:	6922      	ldr	r2, [r4, #16]
 8013b04:	3202      	adds	r2, #2
 8013b06:	f104 010c 	add.w	r1, r4, #12
 8013b0a:	0092      	lsls	r2, r2, #2
 8013b0c:	300c      	adds	r0, #12
 8013b0e:	f7fe fd50 	bl	80125b2 <memcpy>
 8013b12:	4621      	mov	r1, r4
 8013b14:	4638      	mov	r0, r7
 8013b16:	f7ff ffa5 	bl	8013a64 <_Bfree>
 8013b1a:	4644      	mov	r4, r8
 8013b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b20:	3501      	adds	r5, #1
 8013b22:	615e      	str	r6, [r3, #20]
 8013b24:	6125      	str	r5, [r4, #16]
 8013b26:	4620      	mov	r0, r4
 8013b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b2c:	08015a7f 	.word	0x08015a7f
 8013b30:	08015af0 	.word	0x08015af0

08013b34 <__s2b>:
 8013b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b38:	460c      	mov	r4, r1
 8013b3a:	4615      	mov	r5, r2
 8013b3c:	461f      	mov	r7, r3
 8013b3e:	2209      	movs	r2, #9
 8013b40:	3308      	adds	r3, #8
 8013b42:	4606      	mov	r6, r0
 8013b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b48:	2100      	movs	r1, #0
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	db09      	blt.n	8013b64 <__s2b+0x30>
 8013b50:	4630      	mov	r0, r6
 8013b52:	f7ff ff47 	bl	80139e4 <_Balloc>
 8013b56:	b940      	cbnz	r0, 8013b6a <__s2b+0x36>
 8013b58:	4602      	mov	r2, r0
 8013b5a:	4b19      	ldr	r3, [pc, #100]	@ (8013bc0 <__s2b+0x8c>)
 8013b5c:	4819      	ldr	r0, [pc, #100]	@ (8013bc4 <__s2b+0x90>)
 8013b5e:	21d3      	movs	r1, #211	@ 0xd3
 8013b60:	f7fe fd3e 	bl	80125e0 <__assert_func>
 8013b64:	0052      	lsls	r2, r2, #1
 8013b66:	3101      	adds	r1, #1
 8013b68:	e7f0      	b.n	8013b4c <__s2b+0x18>
 8013b6a:	9b08      	ldr	r3, [sp, #32]
 8013b6c:	6143      	str	r3, [r0, #20]
 8013b6e:	2d09      	cmp	r5, #9
 8013b70:	f04f 0301 	mov.w	r3, #1
 8013b74:	6103      	str	r3, [r0, #16]
 8013b76:	dd16      	ble.n	8013ba6 <__s2b+0x72>
 8013b78:	f104 0909 	add.w	r9, r4, #9
 8013b7c:	46c8      	mov	r8, r9
 8013b7e:	442c      	add	r4, r5
 8013b80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013b84:	4601      	mov	r1, r0
 8013b86:	3b30      	subs	r3, #48	@ 0x30
 8013b88:	220a      	movs	r2, #10
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f7ff ff8c 	bl	8013aa8 <__multadd>
 8013b90:	45a0      	cmp	r8, r4
 8013b92:	d1f5      	bne.n	8013b80 <__s2b+0x4c>
 8013b94:	f1a5 0408 	sub.w	r4, r5, #8
 8013b98:	444c      	add	r4, r9
 8013b9a:	1b2d      	subs	r5, r5, r4
 8013b9c:	1963      	adds	r3, r4, r5
 8013b9e:	42bb      	cmp	r3, r7
 8013ba0:	db04      	blt.n	8013bac <__s2b+0x78>
 8013ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ba6:	340a      	adds	r4, #10
 8013ba8:	2509      	movs	r5, #9
 8013baa:	e7f6      	b.n	8013b9a <__s2b+0x66>
 8013bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013bb0:	4601      	mov	r1, r0
 8013bb2:	3b30      	subs	r3, #48	@ 0x30
 8013bb4:	220a      	movs	r2, #10
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f7ff ff76 	bl	8013aa8 <__multadd>
 8013bbc:	e7ee      	b.n	8013b9c <__s2b+0x68>
 8013bbe:	bf00      	nop
 8013bc0:	08015a7f 	.word	0x08015a7f
 8013bc4:	08015af0 	.word	0x08015af0

08013bc8 <__hi0bits>:
 8013bc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013bcc:	4603      	mov	r3, r0
 8013bce:	bf36      	itet	cc
 8013bd0:	0403      	lslcc	r3, r0, #16
 8013bd2:	2000      	movcs	r0, #0
 8013bd4:	2010      	movcc	r0, #16
 8013bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013bda:	bf3c      	itt	cc
 8013bdc:	021b      	lslcc	r3, r3, #8
 8013bde:	3008      	addcc	r0, #8
 8013be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013be4:	bf3c      	itt	cc
 8013be6:	011b      	lslcc	r3, r3, #4
 8013be8:	3004      	addcc	r0, #4
 8013bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bee:	bf3c      	itt	cc
 8013bf0:	009b      	lslcc	r3, r3, #2
 8013bf2:	3002      	addcc	r0, #2
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	db05      	blt.n	8013c04 <__hi0bits+0x3c>
 8013bf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013bfc:	f100 0001 	add.w	r0, r0, #1
 8013c00:	bf08      	it	eq
 8013c02:	2020      	moveq	r0, #32
 8013c04:	4770      	bx	lr

08013c06 <__lo0bits>:
 8013c06:	6803      	ldr	r3, [r0, #0]
 8013c08:	4602      	mov	r2, r0
 8013c0a:	f013 0007 	ands.w	r0, r3, #7
 8013c0e:	d00b      	beq.n	8013c28 <__lo0bits+0x22>
 8013c10:	07d9      	lsls	r1, r3, #31
 8013c12:	d421      	bmi.n	8013c58 <__lo0bits+0x52>
 8013c14:	0798      	lsls	r0, r3, #30
 8013c16:	bf49      	itett	mi
 8013c18:	085b      	lsrmi	r3, r3, #1
 8013c1a:	089b      	lsrpl	r3, r3, #2
 8013c1c:	2001      	movmi	r0, #1
 8013c1e:	6013      	strmi	r3, [r2, #0]
 8013c20:	bf5c      	itt	pl
 8013c22:	6013      	strpl	r3, [r2, #0]
 8013c24:	2002      	movpl	r0, #2
 8013c26:	4770      	bx	lr
 8013c28:	b299      	uxth	r1, r3
 8013c2a:	b909      	cbnz	r1, 8013c30 <__lo0bits+0x2a>
 8013c2c:	0c1b      	lsrs	r3, r3, #16
 8013c2e:	2010      	movs	r0, #16
 8013c30:	b2d9      	uxtb	r1, r3
 8013c32:	b909      	cbnz	r1, 8013c38 <__lo0bits+0x32>
 8013c34:	3008      	adds	r0, #8
 8013c36:	0a1b      	lsrs	r3, r3, #8
 8013c38:	0719      	lsls	r1, r3, #28
 8013c3a:	bf04      	itt	eq
 8013c3c:	091b      	lsreq	r3, r3, #4
 8013c3e:	3004      	addeq	r0, #4
 8013c40:	0799      	lsls	r1, r3, #30
 8013c42:	bf04      	itt	eq
 8013c44:	089b      	lsreq	r3, r3, #2
 8013c46:	3002      	addeq	r0, #2
 8013c48:	07d9      	lsls	r1, r3, #31
 8013c4a:	d403      	bmi.n	8013c54 <__lo0bits+0x4e>
 8013c4c:	085b      	lsrs	r3, r3, #1
 8013c4e:	f100 0001 	add.w	r0, r0, #1
 8013c52:	d003      	beq.n	8013c5c <__lo0bits+0x56>
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	4770      	bx	lr
 8013c58:	2000      	movs	r0, #0
 8013c5a:	4770      	bx	lr
 8013c5c:	2020      	movs	r0, #32
 8013c5e:	4770      	bx	lr

08013c60 <__i2b>:
 8013c60:	b510      	push	{r4, lr}
 8013c62:	460c      	mov	r4, r1
 8013c64:	2101      	movs	r1, #1
 8013c66:	f7ff febd 	bl	80139e4 <_Balloc>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	b928      	cbnz	r0, 8013c7a <__i2b+0x1a>
 8013c6e:	4b05      	ldr	r3, [pc, #20]	@ (8013c84 <__i2b+0x24>)
 8013c70:	4805      	ldr	r0, [pc, #20]	@ (8013c88 <__i2b+0x28>)
 8013c72:	f240 1145 	movw	r1, #325	@ 0x145
 8013c76:	f7fe fcb3 	bl	80125e0 <__assert_func>
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	6144      	str	r4, [r0, #20]
 8013c7e:	6103      	str	r3, [r0, #16]
 8013c80:	bd10      	pop	{r4, pc}
 8013c82:	bf00      	nop
 8013c84:	08015a7f 	.word	0x08015a7f
 8013c88:	08015af0 	.word	0x08015af0

08013c8c <__multiply>:
 8013c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c90:	4614      	mov	r4, r2
 8013c92:	690a      	ldr	r2, [r1, #16]
 8013c94:	6923      	ldr	r3, [r4, #16]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	bfa8      	it	ge
 8013c9a:	4623      	movge	r3, r4
 8013c9c:	460f      	mov	r7, r1
 8013c9e:	bfa4      	itt	ge
 8013ca0:	460c      	movge	r4, r1
 8013ca2:	461f      	movge	r7, r3
 8013ca4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013ca8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013cac:	68a3      	ldr	r3, [r4, #8]
 8013cae:	6861      	ldr	r1, [r4, #4]
 8013cb0:	eb0a 0609 	add.w	r6, sl, r9
 8013cb4:	42b3      	cmp	r3, r6
 8013cb6:	b085      	sub	sp, #20
 8013cb8:	bfb8      	it	lt
 8013cba:	3101      	addlt	r1, #1
 8013cbc:	f7ff fe92 	bl	80139e4 <_Balloc>
 8013cc0:	b930      	cbnz	r0, 8013cd0 <__multiply+0x44>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	4b44      	ldr	r3, [pc, #272]	@ (8013dd8 <__multiply+0x14c>)
 8013cc6:	4845      	ldr	r0, [pc, #276]	@ (8013ddc <__multiply+0x150>)
 8013cc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013ccc:	f7fe fc88 	bl	80125e0 <__assert_func>
 8013cd0:	f100 0514 	add.w	r5, r0, #20
 8013cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013cd8:	462b      	mov	r3, r5
 8013cda:	2200      	movs	r2, #0
 8013cdc:	4543      	cmp	r3, r8
 8013cde:	d321      	bcc.n	8013d24 <__multiply+0x98>
 8013ce0:	f107 0114 	add.w	r1, r7, #20
 8013ce4:	f104 0214 	add.w	r2, r4, #20
 8013ce8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013cec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013cf0:	9302      	str	r3, [sp, #8]
 8013cf2:	1b13      	subs	r3, r2, r4
 8013cf4:	3b15      	subs	r3, #21
 8013cf6:	f023 0303 	bic.w	r3, r3, #3
 8013cfa:	3304      	adds	r3, #4
 8013cfc:	f104 0715 	add.w	r7, r4, #21
 8013d00:	42ba      	cmp	r2, r7
 8013d02:	bf38      	it	cc
 8013d04:	2304      	movcc	r3, #4
 8013d06:	9301      	str	r3, [sp, #4]
 8013d08:	9b02      	ldr	r3, [sp, #8]
 8013d0a:	9103      	str	r1, [sp, #12]
 8013d0c:	428b      	cmp	r3, r1
 8013d0e:	d80c      	bhi.n	8013d2a <__multiply+0x9e>
 8013d10:	2e00      	cmp	r6, #0
 8013d12:	dd03      	ble.n	8013d1c <__multiply+0x90>
 8013d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d05b      	beq.n	8013dd4 <__multiply+0x148>
 8013d1c:	6106      	str	r6, [r0, #16]
 8013d1e:	b005      	add	sp, #20
 8013d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d24:	f843 2b04 	str.w	r2, [r3], #4
 8013d28:	e7d8      	b.n	8013cdc <__multiply+0x50>
 8013d2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013d2e:	f1ba 0f00 	cmp.w	sl, #0
 8013d32:	d024      	beq.n	8013d7e <__multiply+0xf2>
 8013d34:	f104 0e14 	add.w	lr, r4, #20
 8013d38:	46a9      	mov	r9, r5
 8013d3a:	f04f 0c00 	mov.w	ip, #0
 8013d3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013d42:	f8d9 3000 	ldr.w	r3, [r9]
 8013d46:	fa1f fb87 	uxth.w	fp, r7
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013d50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013d54:	f8d9 7000 	ldr.w	r7, [r9]
 8013d58:	4463      	add	r3, ip
 8013d5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013d62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d6c:	4572      	cmp	r2, lr
 8013d6e:	f849 3b04 	str.w	r3, [r9], #4
 8013d72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d76:	d8e2      	bhi.n	8013d3e <__multiply+0xb2>
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	f845 c003 	str.w	ip, [r5, r3]
 8013d7e:	9b03      	ldr	r3, [sp, #12]
 8013d80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013d84:	3104      	adds	r1, #4
 8013d86:	f1b9 0f00 	cmp.w	r9, #0
 8013d8a:	d021      	beq.n	8013dd0 <__multiply+0x144>
 8013d8c:	682b      	ldr	r3, [r5, #0]
 8013d8e:	f104 0c14 	add.w	ip, r4, #20
 8013d92:	46ae      	mov	lr, r5
 8013d94:	f04f 0a00 	mov.w	sl, #0
 8013d98:	f8bc b000 	ldrh.w	fp, [ip]
 8013d9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013da0:	fb09 770b 	mla	r7, r9, fp, r7
 8013da4:	4457      	add	r7, sl
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013dac:	f84e 3b04 	str.w	r3, [lr], #4
 8013db0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013db8:	f8be 3000 	ldrh.w	r3, [lr]
 8013dbc:	fb09 330a 	mla	r3, r9, sl, r3
 8013dc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013dc4:	4562      	cmp	r2, ip
 8013dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013dca:	d8e5      	bhi.n	8013d98 <__multiply+0x10c>
 8013dcc:	9f01      	ldr	r7, [sp, #4]
 8013dce:	51eb      	str	r3, [r5, r7]
 8013dd0:	3504      	adds	r5, #4
 8013dd2:	e799      	b.n	8013d08 <__multiply+0x7c>
 8013dd4:	3e01      	subs	r6, #1
 8013dd6:	e79b      	b.n	8013d10 <__multiply+0x84>
 8013dd8:	08015a7f 	.word	0x08015a7f
 8013ddc:	08015af0 	.word	0x08015af0

08013de0 <__pow5mult>:
 8013de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013de4:	4615      	mov	r5, r2
 8013de6:	f012 0203 	ands.w	r2, r2, #3
 8013dea:	4607      	mov	r7, r0
 8013dec:	460e      	mov	r6, r1
 8013dee:	d007      	beq.n	8013e00 <__pow5mult+0x20>
 8013df0:	4c25      	ldr	r4, [pc, #148]	@ (8013e88 <__pow5mult+0xa8>)
 8013df2:	3a01      	subs	r2, #1
 8013df4:	2300      	movs	r3, #0
 8013df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013dfa:	f7ff fe55 	bl	8013aa8 <__multadd>
 8013dfe:	4606      	mov	r6, r0
 8013e00:	10ad      	asrs	r5, r5, #2
 8013e02:	d03d      	beq.n	8013e80 <__pow5mult+0xa0>
 8013e04:	69fc      	ldr	r4, [r7, #28]
 8013e06:	b97c      	cbnz	r4, 8013e28 <__pow5mult+0x48>
 8013e08:	2010      	movs	r0, #16
 8013e0a:	f7fc fd9b 	bl	8010944 <malloc>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	61f8      	str	r0, [r7, #28]
 8013e12:	b928      	cbnz	r0, 8013e20 <__pow5mult+0x40>
 8013e14:	4b1d      	ldr	r3, [pc, #116]	@ (8013e8c <__pow5mult+0xac>)
 8013e16:	481e      	ldr	r0, [pc, #120]	@ (8013e90 <__pow5mult+0xb0>)
 8013e18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e1c:	f7fe fbe0 	bl	80125e0 <__assert_func>
 8013e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e24:	6004      	str	r4, [r0, #0]
 8013e26:	60c4      	str	r4, [r0, #12]
 8013e28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e30:	b94c      	cbnz	r4, 8013e46 <__pow5mult+0x66>
 8013e32:	f240 2171 	movw	r1, #625	@ 0x271
 8013e36:	4638      	mov	r0, r7
 8013e38:	f7ff ff12 	bl	8013c60 <__i2b>
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e42:	4604      	mov	r4, r0
 8013e44:	6003      	str	r3, [r0, #0]
 8013e46:	f04f 0900 	mov.w	r9, #0
 8013e4a:	07eb      	lsls	r3, r5, #31
 8013e4c:	d50a      	bpl.n	8013e64 <__pow5mult+0x84>
 8013e4e:	4631      	mov	r1, r6
 8013e50:	4622      	mov	r2, r4
 8013e52:	4638      	mov	r0, r7
 8013e54:	f7ff ff1a 	bl	8013c8c <__multiply>
 8013e58:	4631      	mov	r1, r6
 8013e5a:	4680      	mov	r8, r0
 8013e5c:	4638      	mov	r0, r7
 8013e5e:	f7ff fe01 	bl	8013a64 <_Bfree>
 8013e62:	4646      	mov	r6, r8
 8013e64:	106d      	asrs	r5, r5, #1
 8013e66:	d00b      	beq.n	8013e80 <__pow5mult+0xa0>
 8013e68:	6820      	ldr	r0, [r4, #0]
 8013e6a:	b938      	cbnz	r0, 8013e7c <__pow5mult+0x9c>
 8013e6c:	4622      	mov	r2, r4
 8013e6e:	4621      	mov	r1, r4
 8013e70:	4638      	mov	r0, r7
 8013e72:	f7ff ff0b 	bl	8013c8c <__multiply>
 8013e76:	6020      	str	r0, [r4, #0]
 8013e78:	f8c0 9000 	str.w	r9, [r0]
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	e7e4      	b.n	8013e4a <__pow5mult+0x6a>
 8013e80:	4630      	mov	r0, r6
 8013e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e86:	bf00      	nop
 8013e88:	08015b4c 	.word	0x08015b4c
 8013e8c:	08015965 	.word	0x08015965
 8013e90:	08015af0 	.word	0x08015af0

08013e94 <__lshift>:
 8013e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e98:	460c      	mov	r4, r1
 8013e9a:	6849      	ldr	r1, [r1, #4]
 8013e9c:	6923      	ldr	r3, [r4, #16]
 8013e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ea2:	68a3      	ldr	r3, [r4, #8]
 8013ea4:	4607      	mov	r7, r0
 8013ea6:	4691      	mov	r9, r2
 8013ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013eac:	f108 0601 	add.w	r6, r8, #1
 8013eb0:	42b3      	cmp	r3, r6
 8013eb2:	db0b      	blt.n	8013ecc <__lshift+0x38>
 8013eb4:	4638      	mov	r0, r7
 8013eb6:	f7ff fd95 	bl	80139e4 <_Balloc>
 8013eba:	4605      	mov	r5, r0
 8013ebc:	b948      	cbnz	r0, 8013ed2 <__lshift+0x3e>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	4b28      	ldr	r3, [pc, #160]	@ (8013f64 <__lshift+0xd0>)
 8013ec2:	4829      	ldr	r0, [pc, #164]	@ (8013f68 <__lshift+0xd4>)
 8013ec4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ec8:	f7fe fb8a 	bl	80125e0 <__assert_func>
 8013ecc:	3101      	adds	r1, #1
 8013ece:	005b      	lsls	r3, r3, #1
 8013ed0:	e7ee      	b.n	8013eb0 <__lshift+0x1c>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	f100 0114 	add.w	r1, r0, #20
 8013ed8:	f100 0210 	add.w	r2, r0, #16
 8013edc:	4618      	mov	r0, r3
 8013ede:	4553      	cmp	r3, sl
 8013ee0:	db33      	blt.n	8013f4a <__lshift+0xb6>
 8013ee2:	6920      	ldr	r0, [r4, #16]
 8013ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ee8:	f104 0314 	add.w	r3, r4, #20
 8013eec:	f019 091f 	ands.w	r9, r9, #31
 8013ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ef8:	d02b      	beq.n	8013f52 <__lshift+0xbe>
 8013efa:	f1c9 0e20 	rsb	lr, r9, #32
 8013efe:	468a      	mov	sl, r1
 8013f00:	2200      	movs	r2, #0
 8013f02:	6818      	ldr	r0, [r3, #0]
 8013f04:	fa00 f009 	lsl.w	r0, r0, r9
 8013f08:	4310      	orrs	r0, r2
 8013f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8013f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f12:	459c      	cmp	ip, r3
 8013f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f18:	d8f3      	bhi.n	8013f02 <__lshift+0x6e>
 8013f1a:	ebac 0304 	sub.w	r3, ip, r4
 8013f1e:	3b15      	subs	r3, #21
 8013f20:	f023 0303 	bic.w	r3, r3, #3
 8013f24:	3304      	adds	r3, #4
 8013f26:	f104 0015 	add.w	r0, r4, #21
 8013f2a:	4584      	cmp	ip, r0
 8013f2c:	bf38      	it	cc
 8013f2e:	2304      	movcc	r3, #4
 8013f30:	50ca      	str	r2, [r1, r3]
 8013f32:	b10a      	cbz	r2, 8013f38 <__lshift+0xa4>
 8013f34:	f108 0602 	add.w	r6, r8, #2
 8013f38:	3e01      	subs	r6, #1
 8013f3a:	4638      	mov	r0, r7
 8013f3c:	612e      	str	r6, [r5, #16]
 8013f3e:	4621      	mov	r1, r4
 8013f40:	f7ff fd90 	bl	8013a64 <_Bfree>
 8013f44:	4628      	mov	r0, r5
 8013f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f4e:	3301      	adds	r3, #1
 8013f50:	e7c5      	b.n	8013ede <__lshift+0x4a>
 8013f52:	3904      	subs	r1, #4
 8013f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f5c:	459c      	cmp	ip, r3
 8013f5e:	d8f9      	bhi.n	8013f54 <__lshift+0xc0>
 8013f60:	e7ea      	b.n	8013f38 <__lshift+0xa4>
 8013f62:	bf00      	nop
 8013f64:	08015a7f 	.word	0x08015a7f
 8013f68:	08015af0 	.word	0x08015af0

08013f6c <__mcmp>:
 8013f6c:	690a      	ldr	r2, [r1, #16]
 8013f6e:	4603      	mov	r3, r0
 8013f70:	6900      	ldr	r0, [r0, #16]
 8013f72:	1a80      	subs	r0, r0, r2
 8013f74:	b530      	push	{r4, r5, lr}
 8013f76:	d10e      	bne.n	8013f96 <__mcmp+0x2a>
 8013f78:	3314      	adds	r3, #20
 8013f7a:	3114      	adds	r1, #20
 8013f7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013f80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013f84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f8c:	4295      	cmp	r5, r2
 8013f8e:	d003      	beq.n	8013f98 <__mcmp+0x2c>
 8013f90:	d205      	bcs.n	8013f9e <__mcmp+0x32>
 8013f92:	f04f 30ff 	mov.w	r0, #4294967295
 8013f96:	bd30      	pop	{r4, r5, pc}
 8013f98:	42a3      	cmp	r3, r4
 8013f9a:	d3f3      	bcc.n	8013f84 <__mcmp+0x18>
 8013f9c:	e7fb      	b.n	8013f96 <__mcmp+0x2a>
 8013f9e:	2001      	movs	r0, #1
 8013fa0:	e7f9      	b.n	8013f96 <__mcmp+0x2a>
	...

08013fa4 <__mdiff>:
 8013fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa8:	4689      	mov	r9, r1
 8013faa:	4606      	mov	r6, r0
 8013fac:	4611      	mov	r1, r2
 8013fae:	4648      	mov	r0, r9
 8013fb0:	4614      	mov	r4, r2
 8013fb2:	f7ff ffdb 	bl	8013f6c <__mcmp>
 8013fb6:	1e05      	subs	r5, r0, #0
 8013fb8:	d112      	bne.n	8013fe0 <__mdiff+0x3c>
 8013fba:	4629      	mov	r1, r5
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	f7ff fd11 	bl	80139e4 <_Balloc>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	b928      	cbnz	r0, 8013fd2 <__mdiff+0x2e>
 8013fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80140c4 <__mdiff+0x120>)
 8013fc8:	f240 2137 	movw	r1, #567	@ 0x237
 8013fcc:	483e      	ldr	r0, [pc, #248]	@ (80140c8 <__mdiff+0x124>)
 8013fce:	f7fe fb07 	bl	80125e0 <__assert_func>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013fd8:	4610      	mov	r0, r2
 8013fda:	b003      	add	sp, #12
 8013fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe0:	bfbc      	itt	lt
 8013fe2:	464b      	movlt	r3, r9
 8013fe4:	46a1      	movlt	r9, r4
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013fec:	bfba      	itte	lt
 8013fee:	461c      	movlt	r4, r3
 8013ff0:	2501      	movlt	r5, #1
 8013ff2:	2500      	movge	r5, #0
 8013ff4:	f7ff fcf6 	bl	80139e4 <_Balloc>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	b918      	cbnz	r0, 8014004 <__mdiff+0x60>
 8013ffc:	4b31      	ldr	r3, [pc, #196]	@ (80140c4 <__mdiff+0x120>)
 8013ffe:	f240 2145 	movw	r1, #581	@ 0x245
 8014002:	e7e3      	b.n	8013fcc <__mdiff+0x28>
 8014004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014008:	6926      	ldr	r6, [r4, #16]
 801400a:	60c5      	str	r5, [r0, #12]
 801400c:	f109 0310 	add.w	r3, r9, #16
 8014010:	f109 0514 	add.w	r5, r9, #20
 8014014:	f104 0e14 	add.w	lr, r4, #20
 8014018:	f100 0b14 	add.w	fp, r0, #20
 801401c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014020:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	46d9      	mov	r9, fp
 8014028:	f04f 0c00 	mov.w	ip, #0
 801402c:	9b01      	ldr	r3, [sp, #4]
 801402e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014032:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014036:	9301      	str	r3, [sp, #4]
 8014038:	fa1f f38a 	uxth.w	r3, sl
 801403c:	4619      	mov	r1, r3
 801403e:	b283      	uxth	r3, r0
 8014040:	1acb      	subs	r3, r1, r3
 8014042:	0c00      	lsrs	r0, r0, #16
 8014044:	4463      	add	r3, ip
 8014046:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801404a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801404e:	b29b      	uxth	r3, r3
 8014050:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014054:	4576      	cmp	r6, lr
 8014056:	f849 3b04 	str.w	r3, [r9], #4
 801405a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801405e:	d8e5      	bhi.n	801402c <__mdiff+0x88>
 8014060:	1b33      	subs	r3, r6, r4
 8014062:	3b15      	subs	r3, #21
 8014064:	f023 0303 	bic.w	r3, r3, #3
 8014068:	3415      	adds	r4, #21
 801406a:	3304      	adds	r3, #4
 801406c:	42a6      	cmp	r6, r4
 801406e:	bf38      	it	cc
 8014070:	2304      	movcc	r3, #4
 8014072:	441d      	add	r5, r3
 8014074:	445b      	add	r3, fp
 8014076:	461e      	mov	r6, r3
 8014078:	462c      	mov	r4, r5
 801407a:	4544      	cmp	r4, r8
 801407c:	d30e      	bcc.n	801409c <__mdiff+0xf8>
 801407e:	f108 0103 	add.w	r1, r8, #3
 8014082:	1b49      	subs	r1, r1, r5
 8014084:	f021 0103 	bic.w	r1, r1, #3
 8014088:	3d03      	subs	r5, #3
 801408a:	45a8      	cmp	r8, r5
 801408c:	bf38      	it	cc
 801408e:	2100      	movcc	r1, #0
 8014090:	440b      	add	r3, r1
 8014092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014096:	b191      	cbz	r1, 80140be <__mdiff+0x11a>
 8014098:	6117      	str	r7, [r2, #16]
 801409a:	e79d      	b.n	8013fd8 <__mdiff+0x34>
 801409c:	f854 1b04 	ldr.w	r1, [r4], #4
 80140a0:	46e6      	mov	lr, ip
 80140a2:	0c08      	lsrs	r0, r1, #16
 80140a4:	fa1c fc81 	uxtah	ip, ip, r1
 80140a8:	4471      	add	r1, lr
 80140aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80140ae:	b289      	uxth	r1, r1
 80140b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80140b4:	f846 1b04 	str.w	r1, [r6], #4
 80140b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140bc:	e7dd      	b.n	801407a <__mdiff+0xd6>
 80140be:	3f01      	subs	r7, #1
 80140c0:	e7e7      	b.n	8014092 <__mdiff+0xee>
 80140c2:	bf00      	nop
 80140c4:	08015a7f 	.word	0x08015a7f
 80140c8:	08015af0 	.word	0x08015af0

080140cc <__ulp>:
 80140cc:	b082      	sub	sp, #8
 80140ce:	ed8d 0b00 	vstr	d0, [sp]
 80140d2:	9a01      	ldr	r2, [sp, #4]
 80140d4:	4b0f      	ldr	r3, [pc, #60]	@ (8014114 <__ulp+0x48>)
 80140d6:	4013      	ands	r3, r2
 80140d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80140dc:	2b00      	cmp	r3, #0
 80140de:	dc08      	bgt.n	80140f2 <__ulp+0x26>
 80140e0:	425b      	negs	r3, r3
 80140e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80140e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80140ea:	da04      	bge.n	80140f6 <__ulp+0x2a>
 80140ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80140f0:	4113      	asrs	r3, r2
 80140f2:	2200      	movs	r2, #0
 80140f4:	e008      	b.n	8014108 <__ulp+0x3c>
 80140f6:	f1a2 0314 	sub.w	r3, r2, #20
 80140fa:	2b1e      	cmp	r3, #30
 80140fc:	bfda      	itte	le
 80140fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014102:	40da      	lsrle	r2, r3
 8014104:	2201      	movgt	r2, #1
 8014106:	2300      	movs	r3, #0
 8014108:	4619      	mov	r1, r3
 801410a:	4610      	mov	r0, r2
 801410c:	ec41 0b10 	vmov	d0, r0, r1
 8014110:	b002      	add	sp, #8
 8014112:	4770      	bx	lr
 8014114:	7ff00000 	.word	0x7ff00000

08014118 <__b2d>:
 8014118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801411c:	6906      	ldr	r6, [r0, #16]
 801411e:	f100 0814 	add.w	r8, r0, #20
 8014122:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014126:	1f37      	subs	r7, r6, #4
 8014128:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801412c:	4610      	mov	r0, r2
 801412e:	f7ff fd4b 	bl	8013bc8 <__hi0bits>
 8014132:	f1c0 0320 	rsb	r3, r0, #32
 8014136:	280a      	cmp	r0, #10
 8014138:	600b      	str	r3, [r1, #0]
 801413a:	491b      	ldr	r1, [pc, #108]	@ (80141a8 <__b2d+0x90>)
 801413c:	dc15      	bgt.n	801416a <__b2d+0x52>
 801413e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014142:	fa22 f30c 	lsr.w	r3, r2, ip
 8014146:	45b8      	cmp	r8, r7
 8014148:	ea43 0501 	orr.w	r5, r3, r1
 801414c:	bf34      	ite	cc
 801414e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014152:	2300      	movcs	r3, #0
 8014154:	3015      	adds	r0, #21
 8014156:	fa02 f000 	lsl.w	r0, r2, r0
 801415a:	fa23 f30c 	lsr.w	r3, r3, ip
 801415e:	4303      	orrs	r3, r0
 8014160:	461c      	mov	r4, r3
 8014162:	ec45 4b10 	vmov	d0, r4, r5
 8014166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416a:	45b8      	cmp	r8, r7
 801416c:	bf3a      	itte	cc
 801416e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014172:	f1a6 0708 	subcc.w	r7, r6, #8
 8014176:	2300      	movcs	r3, #0
 8014178:	380b      	subs	r0, #11
 801417a:	d012      	beq.n	80141a2 <__b2d+0x8a>
 801417c:	f1c0 0120 	rsb	r1, r0, #32
 8014180:	fa23 f401 	lsr.w	r4, r3, r1
 8014184:	4082      	lsls	r2, r0
 8014186:	4322      	orrs	r2, r4
 8014188:	4547      	cmp	r7, r8
 801418a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801418e:	bf8c      	ite	hi
 8014190:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014194:	2200      	movls	r2, #0
 8014196:	4083      	lsls	r3, r0
 8014198:	40ca      	lsrs	r2, r1
 801419a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801419e:	4313      	orrs	r3, r2
 80141a0:	e7de      	b.n	8014160 <__b2d+0x48>
 80141a2:	ea42 0501 	orr.w	r5, r2, r1
 80141a6:	e7db      	b.n	8014160 <__b2d+0x48>
 80141a8:	3ff00000 	.word	0x3ff00000

080141ac <__d2b>:
 80141ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141b0:	460f      	mov	r7, r1
 80141b2:	2101      	movs	r1, #1
 80141b4:	ec59 8b10 	vmov	r8, r9, d0
 80141b8:	4616      	mov	r6, r2
 80141ba:	f7ff fc13 	bl	80139e4 <_Balloc>
 80141be:	4604      	mov	r4, r0
 80141c0:	b930      	cbnz	r0, 80141d0 <__d2b+0x24>
 80141c2:	4602      	mov	r2, r0
 80141c4:	4b23      	ldr	r3, [pc, #140]	@ (8014254 <__d2b+0xa8>)
 80141c6:	4824      	ldr	r0, [pc, #144]	@ (8014258 <__d2b+0xac>)
 80141c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80141cc:	f7fe fa08 	bl	80125e0 <__assert_func>
 80141d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80141d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141d8:	b10d      	cbz	r5, 80141de <__d2b+0x32>
 80141da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80141de:	9301      	str	r3, [sp, #4]
 80141e0:	f1b8 0300 	subs.w	r3, r8, #0
 80141e4:	d023      	beq.n	801422e <__d2b+0x82>
 80141e6:	4668      	mov	r0, sp
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	f7ff fd0c 	bl	8013c06 <__lo0bits>
 80141ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80141f2:	b1d0      	cbz	r0, 801422a <__d2b+0x7e>
 80141f4:	f1c0 0320 	rsb	r3, r0, #32
 80141f8:	fa02 f303 	lsl.w	r3, r2, r3
 80141fc:	430b      	orrs	r3, r1
 80141fe:	40c2      	lsrs	r2, r0
 8014200:	6163      	str	r3, [r4, #20]
 8014202:	9201      	str	r2, [sp, #4]
 8014204:	9b01      	ldr	r3, [sp, #4]
 8014206:	61a3      	str	r3, [r4, #24]
 8014208:	2b00      	cmp	r3, #0
 801420a:	bf0c      	ite	eq
 801420c:	2201      	moveq	r2, #1
 801420e:	2202      	movne	r2, #2
 8014210:	6122      	str	r2, [r4, #16]
 8014212:	b1a5      	cbz	r5, 801423e <__d2b+0x92>
 8014214:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014218:	4405      	add	r5, r0
 801421a:	603d      	str	r5, [r7, #0]
 801421c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014220:	6030      	str	r0, [r6, #0]
 8014222:	4620      	mov	r0, r4
 8014224:	b003      	add	sp, #12
 8014226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801422a:	6161      	str	r1, [r4, #20]
 801422c:	e7ea      	b.n	8014204 <__d2b+0x58>
 801422e:	a801      	add	r0, sp, #4
 8014230:	f7ff fce9 	bl	8013c06 <__lo0bits>
 8014234:	9b01      	ldr	r3, [sp, #4]
 8014236:	6163      	str	r3, [r4, #20]
 8014238:	3020      	adds	r0, #32
 801423a:	2201      	movs	r2, #1
 801423c:	e7e8      	b.n	8014210 <__d2b+0x64>
 801423e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014242:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014246:	6038      	str	r0, [r7, #0]
 8014248:	6918      	ldr	r0, [r3, #16]
 801424a:	f7ff fcbd 	bl	8013bc8 <__hi0bits>
 801424e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014252:	e7e5      	b.n	8014220 <__d2b+0x74>
 8014254:	08015a7f 	.word	0x08015a7f
 8014258:	08015af0 	.word	0x08015af0

0801425c <__ratio>:
 801425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014260:	b085      	sub	sp, #20
 8014262:	e9cd 1000 	strd	r1, r0, [sp]
 8014266:	a902      	add	r1, sp, #8
 8014268:	f7ff ff56 	bl	8014118 <__b2d>
 801426c:	9800      	ldr	r0, [sp, #0]
 801426e:	a903      	add	r1, sp, #12
 8014270:	ec55 4b10 	vmov	r4, r5, d0
 8014274:	f7ff ff50 	bl	8014118 <__b2d>
 8014278:	9b01      	ldr	r3, [sp, #4]
 801427a:	6919      	ldr	r1, [r3, #16]
 801427c:	9b00      	ldr	r3, [sp, #0]
 801427e:	691b      	ldr	r3, [r3, #16]
 8014280:	1ac9      	subs	r1, r1, r3
 8014282:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014286:	1a9b      	subs	r3, r3, r2
 8014288:	ec5b ab10 	vmov	sl, fp, d0
 801428c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014290:	2b00      	cmp	r3, #0
 8014292:	bfce      	itee	gt
 8014294:	462a      	movgt	r2, r5
 8014296:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801429a:	465a      	movle	r2, fp
 801429c:	462f      	mov	r7, r5
 801429e:	46d9      	mov	r9, fp
 80142a0:	bfcc      	ite	gt
 80142a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80142a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80142aa:	464b      	mov	r3, r9
 80142ac:	4652      	mov	r2, sl
 80142ae:	4620      	mov	r0, r4
 80142b0:	4639      	mov	r1, r7
 80142b2:	f7ec facb 	bl	800084c <__aeabi_ddiv>
 80142b6:	ec41 0b10 	vmov	d0, r0, r1
 80142ba:	b005      	add	sp, #20
 80142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142c0 <__copybits>:
 80142c0:	3901      	subs	r1, #1
 80142c2:	b570      	push	{r4, r5, r6, lr}
 80142c4:	1149      	asrs	r1, r1, #5
 80142c6:	6914      	ldr	r4, [r2, #16]
 80142c8:	3101      	adds	r1, #1
 80142ca:	f102 0314 	add.w	r3, r2, #20
 80142ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80142d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142d6:	1f05      	subs	r5, r0, #4
 80142d8:	42a3      	cmp	r3, r4
 80142da:	d30c      	bcc.n	80142f6 <__copybits+0x36>
 80142dc:	1aa3      	subs	r3, r4, r2
 80142de:	3b11      	subs	r3, #17
 80142e0:	f023 0303 	bic.w	r3, r3, #3
 80142e4:	3211      	adds	r2, #17
 80142e6:	42a2      	cmp	r2, r4
 80142e8:	bf88      	it	hi
 80142ea:	2300      	movhi	r3, #0
 80142ec:	4418      	add	r0, r3
 80142ee:	2300      	movs	r3, #0
 80142f0:	4288      	cmp	r0, r1
 80142f2:	d305      	bcc.n	8014300 <__copybits+0x40>
 80142f4:	bd70      	pop	{r4, r5, r6, pc}
 80142f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80142fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80142fe:	e7eb      	b.n	80142d8 <__copybits+0x18>
 8014300:	f840 3b04 	str.w	r3, [r0], #4
 8014304:	e7f4      	b.n	80142f0 <__copybits+0x30>

08014306 <__any_on>:
 8014306:	f100 0214 	add.w	r2, r0, #20
 801430a:	6900      	ldr	r0, [r0, #16]
 801430c:	114b      	asrs	r3, r1, #5
 801430e:	4298      	cmp	r0, r3
 8014310:	b510      	push	{r4, lr}
 8014312:	db11      	blt.n	8014338 <__any_on+0x32>
 8014314:	dd0a      	ble.n	801432c <__any_on+0x26>
 8014316:	f011 011f 	ands.w	r1, r1, #31
 801431a:	d007      	beq.n	801432c <__any_on+0x26>
 801431c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014320:	fa24 f001 	lsr.w	r0, r4, r1
 8014324:	fa00 f101 	lsl.w	r1, r0, r1
 8014328:	428c      	cmp	r4, r1
 801432a:	d10b      	bne.n	8014344 <__any_on+0x3e>
 801432c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014330:	4293      	cmp	r3, r2
 8014332:	d803      	bhi.n	801433c <__any_on+0x36>
 8014334:	2000      	movs	r0, #0
 8014336:	bd10      	pop	{r4, pc}
 8014338:	4603      	mov	r3, r0
 801433a:	e7f7      	b.n	801432c <__any_on+0x26>
 801433c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014340:	2900      	cmp	r1, #0
 8014342:	d0f5      	beq.n	8014330 <__any_on+0x2a>
 8014344:	2001      	movs	r0, #1
 8014346:	e7f6      	b.n	8014336 <__any_on+0x30>

08014348 <__ascii_wctomb>:
 8014348:	4603      	mov	r3, r0
 801434a:	4608      	mov	r0, r1
 801434c:	b141      	cbz	r1, 8014360 <__ascii_wctomb+0x18>
 801434e:	2aff      	cmp	r2, #255	@ 0xff
 8014350:	d904      	bls.n	801435c <__ascii_wctomb+0x14>
 8014352:	228a      	movs	r2, #138	@ 0x8a
 8014354:	601a      	str	r2, [r3, #0]
 8014356:	f04f 30ff 	mov.w	r0, #4294967295
 801435a:	4770      	bx	lr
 801435c:	700a      	strb	r2, [r1, #0]
 801435e:	2001      	movs	r0, #1
 8014360:	4770      	bx	lr

08014362 <__ssputs_r>:
 8014362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014366:	688e      	ldr	r6, [r1, #8]
 8014368:	461f      	mov	r7, r3
 801436a:	42be      	cmp	r6, r7
 801436c:	680b      	ldr	r3, [r1, #0]
 801436e:	4682      	mov	sl, r0
 8014370:	460c      	mov	r4, r1
 8014372:	4690      	mov	r8, r2
 8014374:	d82d      	bhi.n	80143d2 <__ssputs_r+0x70>
 8014376:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801437a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801437e:	d026      	beq.n	80143ce <__ssputs_r+0x6c>
 8014380:	6965      	ldr	r5, [r4, #20]
 8014382:	6909      	ldr	r1, [r1, #16]
 8014384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014388:	eba3 0901 	sub.w	r9, r3, r1
 801438c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014390:	1c7b      	adds	r3, r7, #1
 8014392:	444b      	add	r3, r9
 8014394:	106d      	asrs	r5, r5, #1
 8014396:	429d      	cmp	r5, r3
 8014398:	bf38      	it	cc
 801439a:	461d      	movcc	r5, r3
 801439c:	0553      	lsls	r3, r2, #21
 801439e:	d527      	bpl.n	80143f0 <__ssputs_r+0x8e>
 80143a0:	4629      	mov	r1, r5
 80143a2:	f7fc fb01 	bl	80109a8 <_malloc_r>
 80143a6:	4606      	mov	r6, r0
 80143a8:	b360      	cbz	r0, 8014404 <__ssputs_r+0xa2>
 80143aa:	6921      	ldr	r1, [r4, #16]
 80143ac:	464a      	mov	r2, r9
 80143ae:	f7fe f900 	bl	80125b2 <memcpy>
 80143b2:	89a3      	ldrh	r3, [r4, #12]
 80143b4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143bc:	81a3      	strh	r3, [r4, #12]
 80143be:	6126      	str	r6, [r4, #16]
 80143c0:	6165      	str	r5, [r4, #20]
 80143c2:	444e      	add	r6, r9
 80143c4:	eba5 0509 	sub.w	r5, r5, r9
 80143c8:	6026      	str	r6, [r4, #0]
 80143ca:	60a5      	str	r5, [r4, #8]
 80143cc:	463e      	mov	r6, r7
 80143ce:	42be      	cmp	r6, r7
 80143d0:	d900      	bls.n	80143d4 <__ssputs_r+0x72>
 80143d2:	463e      	mov	r6, r7
 80143d4:	6820      	ldr	r0, [r4, #0]
 80143d6:	4632      	mov	r2, r6
 80143d8:	4641      	mov	r1, r8
 80143da:	f000 f9d7 	bl	801478c <memmove>
 80143de:	68a3      	ldr	r3, [r4, #8]
 80143e0:	1b9b      	subs	r3, r3, r6
 80143e2:	60a3      	str	r3, [r4, #8]
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	4433      	add	r3, r6
 80143e8:	6023      	str	r3, [r4, #0]
 80143ea:	2000      	movs	r0, #0
 80143ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f0:	462a      	mov	r2, r5
 80143f2:	f000 fa00 	bl	80147f6 <_realloc_r>
 80143f6:	4606      	mov	r6, r0
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d1e0      	bne.n	80143be <__ssputs_r+0x5c>
 80143fc:	6921      	ldr	r1, [r4, #16]
 80143fe:	4650      	mov	r0, sl
 8014400:	f7fe ff5a 	bl	80132b8 <_free_r>
 8014404:	230c      	movs	r3, #12
 8014406:	f8ca 3000 	str.w	r3, [sl]
 801440a:	89a3      	ldrh	r3, [r4, #12]
 801440c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014410:	81a3      	strh	r3, [r4, #12]
 8014412:	f04f 30ff 	mov.w	r0, #4294967295
 8014416:	e7e9      	b.n	80143ec <__ssputs_r+0x8a>

08014418 <_svfiprintf_r>:
 8014418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441c:	4698      	mov	r8, r3
 801441e:	898b      	ldrh	r3, [r1, #12]
 8014420:	061b      	lsls	r3, r3, #24
 8014422:	b09d      	sub	sp, #116	@ 0x74
 8014424:	4607      	mov	r7, r0
 8014426:	460d      	mov	r5, r1
 8014428:	4614      	mov	r4, r2
 801442a:	d510      	bpl.n	801444e <_svfiprintf_r+0x36>
 801442c:	690b      	ldr	r3, [r1, #16]
 801442e:	b973      	cbnz	r3, 801444e <_svfiprintf_r+0x36>
 8014430:	2140      	movs	r1, #64	@ 0x40
 8014432:	f7fc fab9 	bl	80109a8 <_malloc_r>
 8014436:	6028      	str	r0, [r5, #0]
 8014438:	6128      	str	r0, [r5, #16]
 801443a:	b930      	cbnz	r0, 801444a <_svfiprintf_r+0x32>
 801443c:	230c      	movs	r3, #12
 801443e:	603b      	str	r3, [r7, #0]
 8014440:	f04f 30ff 	mov.w	r0, #4294967295
 8014444:	b01d      	add	sp, #116	@ 0x74
 8014446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801444a:	2340      	movs	r3, #64	@ 0x40
 801444c:	616b      	str	r3, [r5, #20]
 801444e:	2300      	movs	r3, #0
 8014450:	9309      	str	r3, [sp, #36]	@ 0x24
 8014452:	2320      	movs	r3, #32
 8014454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014458:	f8cd 800c 	str.w	r8, [sp, #12]
 801445c:	2330      	movs	r3, #48	@ 0x30
 801445e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80145fc <_svfiprintf_r+0x1e4>
 8014462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014466:	f04f 0901 	mov.w	r9, #1
 801446a:	4623      	mov	r3, r4
 801446c:	469a      	mov	sl, r3
 801446e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014472:	b10a      	cbz	r2, 8014478 <_svfiprintf_r+0x60>
 8014474:	2a25      	cmp	r2, #37	@ 0x25
 8014476:	d1f9      	bne.n	801446c <_svfiprintf_r+0x54>
 8014478:	ebba 0b04 	subs.w	fp, sl, r4
 801447c:	d00b      	beq.n	8014496 <_svfiprintf_r+0x7e>
 801447e:	465b      	mov	r3, fp
 8014480:	4622      	mov	r2, r4
 8014482:	4629      	mov	r1, r5
 8014484:	4638      	mov	r0, r7
 8014486:	f7ff ff6c 	bl	8014362 <__ssputs_r>
 801448a:	3001      	adds	r0, #1
 801448c:	f000 80a7 	beq.w	80145de <_svfiprintf_r+0x1c6>
 8014490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014492:	445a      	add	r2, fp
 8014494:	9209      	str	r2, [sp, #36]	@ 0x24
 8014496:	f89a 3000 	ldrb.w	r3, [sl]
 801449a:	2b00      	cmp	r3, #0
 801449c:	f000 809f 	beq.w	80145de <_svfiprintf_r+0x1c6>
 80144a0:	2300      	movs	r3, #0
 80144a2:	f04f 32ff 	mov.w	r2, #4294967295
 80144a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144aa:	f10a 0a01 	add.w	sl, sl, #1
 80144ae:	9304      	str	r3, [sp, #16]
 80144b0:	9307      	str	r3, [sp, #28]
 80144b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80144b8:	4654      	mov	r4, sl
 80144ba:	2205      	movs	r2, #5
 80144bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144c0:	484e      	ldr	r0, [pc, #312]	@ (80145fc <_svfiprintf_r+0x1e4>)
 80144c2:	f7eb fe85 	bl	80001d0 <memchr>
 80144c6:	9a04      	ldr	r2, [sp, #16]
 80144c8:	b9d8      	cbnz	r0, 8014502 <_svfiprintf_r+0xea>
 80144ca:	06d0      	lsls	r0, r2, #27
 80144cc:	bf44      	itt	mi
 80144ce:	2320      	movmi	r3, #32
 80144d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144d4:	0711      	lsls	r1, r2, #28
 80144d6:	bf44      	itt	mi
 80144d8:	232b      	movmi	r3, #43	@ 0x2b
 80144da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144de:	f89a 3000 	ldrb.w	r3, [sl]
 80144e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80144e4:	d015      	beq.n	8014512 <_svfiprintf_r+0xfa>
 80144e6:	9a07      	ldr	r2, [sp, #28]
 80144e8:	4654      	mov	r4, sl
 80144ea:	2000      	movs	r0, #0
 80144ec:	f04f 0c0a 	mov.w	ip, #10
 80144f0:	4621      	mov	r1, r4
 80144f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144f6:	3b30      	subs	r3, #48	@ 0x30
 80144f8:	2b09      	cmp	r3, #9
 80144fa:	d94b      	bls.n	8014594 <_svfiprintf_r+0x17c>
 80144fc:	b1b0      	cbz	r0, 801452c <_svfiprintf_r+0x114>
 80144fe:	9207      	str	r2, [sp, #28]
 8014500:	e014      	b.n	801452c <_svfiprintf_r+0x114>
 8014502:	eba0 0308 	sub.w	r3, r0, r8
 8014506:	fa09 f303 	lsl.w	r3, r9, r3
 801450a:	4313      	orrs	r3, r2
 801450c:	9304      	str	r3, [sp, #16]
 801450e:	46a2      	mov	sl, r4
 8014510:	e7d2      	b.n	80144b8 <_svfiprintf_r+0xa0>
 8014512:	9b03      	ldr	r3, [sp, #12]
 8014514:	1d19      	adds	r1, r3, #4
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	9103      	str	r1, [sp, #12]
 801451a:	2b00      	cmp	r3, #0
 801451c:	bfbb      	ittet	lt
 801451e:	425b      	neglt	r3, r3
 8014520:	f042 0202 	orrlt.w	r2, r2, #2
 8014524:	9307      	strge	r3, [sp, #28]
 8014526:	9307      	strlt	r3, [sp, #28]
 8014528:	bfb8      	it	lt
 801452a:	9204      	strlt	r2, [sp, #16]
 801452c:	7823      	ldrb	r3, [r4, #0]
 801452e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014530:	d10a      	bne.n	8014548 <_svfiprintf_r+0x130>
 8014532:	7863      	ldrb	r3, [r4, #1]
 8014534:	2b2a      	cmp	r3, #42	@ 0x2a
 8014536:	d132      	bne.n	801459e <_svfiprintf_r+0x186>
 8014538:	9b03      	ldr	r3, [sp, #12]
 801453a:	1d1a      	adds	r2, r3, #4
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	9203      	str	r2, [sp, #12]
 8014540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014544:	3402      	adds	r4, #2
 8014546:	9305      	str	r3, [sp, #20]
 8014548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801460c <_svfiprintf_r+0x1f4>
 801454c:	7821      	ldrb	r1, [r4, #0]
 801454e:	2203      	movs	r2, #3
 8014550:	4650      	mov	r0, sl
 8014552:	f7eb fe3d 	bl	80001d0 <memchr>
 8014556:	b138      	cbz	r0, 8014568 <_svfiprintf_r+0x150>
 8014558:	9b04      	ldr	r3, [sp, #16]
 801455a:	eba0 000a 	sub.w	r0, r0, sl
 801455e:	2240      	movs	r2, #64	@ 0x40
 8014560:	4082      	lsls	r2, r0
 8014562:	4313      	orrs	r3, r2
 8014564:	3401      	adds	r4, #1
 8014566:	9304      	str	r3, [sp, #16]
 8014568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801456c:	4824      	ldr	r0, [pc, #144]	@ (8014600 <_svfiprintf_r+0x1e8>)
 801456e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014572:	2206      	movs	r2, #6
 8014574:	f7eb fe2c 	bl	80001d0 <memchr>
 8014578:	2800      	cmp	r0, #0
 801457a:	d036      	beq.n	80145ea <_svfiprintf_r+0x1d2>
 801457c:	4b21      	ldr	r3, [pc, #132]	@ (8014604 <_svfiprintf_r+0x1ec>)
 801457e:	bb1b      	cbnz	r3, 80145c8 <_svfiprintf_r+0x1b0>
 8014580:	9b03      	ldr	r3, [sp, #12]
 8014582:	3307      	adds	r3, #7
 8014584:	f023 0307 	bic.w	r3, r3, #7
 8014588:	3308      	adds	r3, #8
 801458a:	9303      	str	r3, [sp, #12]
 801458c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801458e:	4433      	add	r3, r6
 8014590:	9309      	str	r3, [sp, #36]	@ 0x24
 8014592:	e76a      	b.n	801446a <_svfiprintf_r+0x52>
 8014594:	fb0c 3202 	mla	r2, ip, r2, r3
 8014598:	460c      	mov	r4, r1
 801459a:	2001      	movs	r0, #1
 801459c:	e7a8      	b.n	80144f0 <_svfiprintf_r+0xd8>
 801459e:	2300      	movs	r3, #0
 80145a0:	3401      	adds	r4, #1
 80145a2:	9305      	str	r3, [sp, #20]
 80145a4:	4619      	mov	r1, r3
 80145a6:	f04f 0c0a 	mov.w	ip, #10
 80145aa:	4620      	mov	r0, r4
 80145ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145b0:	3a30      	subs	r2, #48	@ 0x30
 80145b2:	2a09      	cmp	r2, #9
 80145b4:	d903      	bls.n	80145be <_svfiprintf_r+0x1a6>
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d0c6      	beq.n	8014548 <_svfiprintf_r+0x130>
 80145ba:	9105      	str	r1, [sp, #20]
 80145bc:	e7c4      	b.n	8014548 <_svfiprintf_r+0x130>
 80145be:	fb0c 2101 	mla	r1, ip, r1, r2
 80145c2:	4604      	mov	r4, r0
 80145c4:	2301      	movs	r3, #1
 80145c6:	e7f0      	b.n	80145aa <_svfiprintf_r+0x192>
 80145c8:	ab03      	add	r3, sp, #12
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	462a      	mov	r2, r5
 80145ce:	4b0e      	ldr	r3, [pc, #56]	@ (8014608 <_svfiprintf_r+0x1f0>)
 80145d0:	a904      	add	r1, sp, #16
 80145d2:	4638      	mov	r0, r7
 80145d4:	f7fd f9a8 	bl	8011928 <_printf_float>
 80145d8:	1c42      	adds	r2, r0, #1
 80145da:	4606      	mov	r6, r0
 80145dc:	d1d6      	bne.n	801458c <_svfiprintf_r+0x174>
 80145de:	89ab      	ldrh	r3, [r5, #12]
 80145e0:	065b      	lsls	r3, r3, #25
 80145e2:	f53f af2d 	bmi.w	8014440 <_svfiprintf_r+0x28>
 80145e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145e8:	e72c      	b.n	8014444 <_svfiprintf_r+0x2c>
 80145ea:	ab03      	add	r3, sp, #12
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	462a      	mov	r2, r5
 80145f0:	4b05      	ldr	r3, [pc, #20]	@ (8014608 <_svfiprintf_r+0x1f0>)
 80145f2:	a904      	add	r1, sp, #16
 80145f4:	4638      	mov	r0, r7
 80145f6:	f7fd fc2f 	bl	8011e58 <_printf_i>
 80145fa:	e7ed      	b.n	80145d8 <_svfiprintf_r+0x1c0>
 80145fc:	08015c48 	.word	0x08015c48
 8014600:	08015c52 	.word	0x08015c52
 8014604:	08011929 	.word	0x08011929
 8014608:	08014363 	.word	0x08014363
 801460c:	08015c4e 	.word	0x08015c4e

08014610 <__sflush_r>:
 8014610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014618:	0716      	lsls	r6, r2, #28
 801461a:	4605      	mov	r5, r0
 801461c:	460c      	mov	r4, r1
 801461e:	d454      	bmi.n	80146ca <__sflush_r+0xba>
 8014620:	684b      	ldr	r3, [r1, #4]
 8014622:	2b00      	cmp	r3, #0
 8014624:	dc02      	bgt.n	801462c <__sflush_r+0x1c>
 8014626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014628:	2b00      	cmp	r3, #0
 801462a:	dd48      	ble.n	80146be <__sflush_r+0xae>
 801462c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801462e:	2e00      	cmp	r6, #0
 8014630:	d045      	beq.n	80146be <__sflush_r+0xae>
 8014632:	2300      	movs	r3, #0
 8014634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014638:	682f      	ldr	r7, [r5, #0]
 801463a:	6a21      	ldr	r1, [r4, #32]
 801463c:	602b      	str	r3, [r5, #0]
 801463e:	d030      	beq.n	80146a2 <__sflush_r+0x92>
 8014640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014642:	89a3      	ldrh	r3, [r4, #12]
 8014644:	0759      	lsls	r1, r3, #29
 8014646:	d505      	bpl.n	8014654 <__sflush_r+0x44>
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	1ad2      	subs	r2, r2, r3
 801464c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801464e:	b10b      	cbz	r3, 8014654 <__sflush_r+0x44>
 8014650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014652:	1ad2      	subs	r2, r2, r3
 8014654:	2300      	movs	r3, #0
 8014656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014658:	6a21      	ldr	r1, [r4, #32]
 801465a:	4628      	mov	r0, r5
 801465c:	47b0      	blx	r6
 801465e:	1c43      	adds	r3, r0, #1
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	d106      	bne.n	8014672 <__sflush_r+0x62>
 8014664:	6829      	ldr	r1, [r5, #0]
 8014666:	291d      	cmp	r1, #29
 8014668:	d82b      	bhi.n	80146c2 <__sflush_r+0xb2>
 801466a:	4a2a      	ldr	r2, [pc, #168]	@ (8014714 <__sflush_r+0x104>)
 801466c:	410a      	asrs	r2, r1
 801466e:	07d6      	lsls	r6, r2, #31
 8014670:	d427      	bmi.n	80146c2 <__sflush_r+0xb2>
 8014672:	2200      	movs	r2, #0
 8014674:	6062      	str	r2, [r4, #4]
 8014676:	04d9      	lsls	r1, r3, #19
 8014678:	6922      	ldr	r2, [r4, #16]
 801467a:	6022      	str	r2, [r4, #0]
 801467c:	d504      	bpl.n	8014688 <__sflush_r+0x78>
 801467e:	1c42      	adds	r2, r0, #1
 8014680:	d101      	bne.n	8014686 <__sflush_r+0x76>
 8014682:	682b      	ldr	r3, [r5, #0]
 8014684:	b903      	cbnz	r3, 8014688 <__sflush_r+0x78>
 8014686:	6560      	str	r0, [r4, #84]	@ 0x54
 8014688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801468a:	602f      	str	r7, [r5, #0]
 801468c:	b1b9      	cbz	r1, 80146be <__sflush_r+0xae>
 801468e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014692:	4299      	cmp	r1, r3
 8014694:	d002      	beq.n	801469c <__sflush_r+0x8c>
 8014696:	4628      	mov	r0, r5
 8014698:	f7fe fe0e 	bl	80132b8 <_free_r>
 801469c:	2300      	movs	r3, #0
 801469e:	6363      	str	r3, [r4, #52]	@ 0x34
 80146a0:	e00d      	b.n	80146be <__sflush_r+0xae>
 80146a2:	2301      	movs	r3, #1
 80146a4:	4628      	mov	r0, r5
 80146a6:	47b0      	blx	r6
 80146a8:	4602      	mov	r2, r0
 80146aa:	1c50      	adds	r0, r2, #1
 80146ac:	d1c9      	bne.n	8014642 <__sflush_r+0x32>
 80146ae:	682b      	ldr	r3, [r5, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d0c6      	beq.n	8014642 <__sflush_r+0x32>
 80146b4:	2b1d      	cmp	r3, #29
 80146b6:	d001      	beq.n	80146bc <__sflush_r+0xac>
 80146b8:	2b16      	cmp	r3, #22
 80146ba:	d11e      	bne.n	80146fa <__sflush_r+0xea>
 80146bc:	602f      	str	r7, [r5, #0]
 80146be:	2000      	movs	r0, #0
 80146c0:	e022      	b.n	8014708 <__sflush_r+0xf8>
 80146c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146c6:	b21b      	sxth	r3, r3
 80146c8:	e01b      	b.n	8014702 <__sflush_r+0xf2>
 80146ca:	690f      	ldr	r7, [r1, #16]
 80146cc:	2f00      	cmp	r7, #0
 80146ce:	d0f6      	beq.n	80146be <__sflush_r+0xae>
 80146d0:	0793      	lsls	r3, r2, #30
 80146d2:	680e      	ldr	r6, [r1, #0]
 80146d4:	bf08      	it	eq
 80146d6:	694b      	ldreq	r3, [r1, #20]
 80146d8:	600f      	str	r7, [r1, #0]
 80146da:	bf18      	it	ne
 80146dc:	2300      	movne	r3, #0
 80146de:	eba6 0807 	sub.w	r8, r6, r7
 80146e2:	608b      	str	r3, [r1, #8]
 80146e4:	f1b8 0f00 	cmp.w	r8, #0
 80146e8:	dde9      	ble.n	80146be <__sflush_r+0xae>
 80146ea:	6a21      	ldr	r1, [r4, #32]
 80146ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80146ee:	4643      	mov	r3, r8
 80146f0:	463a      	mov	r2, r7
 80146f2:	4628      	mov	r0, r5
 80146f4:	47b0      	blx	r6
 80146f6:	2800      	cmp	r0, #0
 80146f8:	dc08      	bgt.n	801470c <__sflush_r+0xfc>
 80146fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014702:	81a3      	strh	r3, [r4, #12]
 8014704:	f04f 30ff 	mov.w	r0, #4294967295
 8014708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470c:	4407      	add	r7, r0
 801470e:	eba8 0800 	sub.w	r8, r8, r0
 8014712:	e7e7      	b.n	80146e4 <__sflush_r+0xd4>
 8014714:	dfbffffe 	.word	0xdfbffffe

08014718 <_fflush_r>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	690b      	ldr	r3, [r1, #16]
 801471c:	4605      	mov	r5, r0
 801471e:	460c      	mov	r4, r1
 8014720:	b913      	cbnz	r3, 8014728 <_fflush_r+0x10>
 8014722:	2500      	movs	r5, #0
 8014724:	4628      	mov	r0, r5
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	b118      	cbz	r0, 8014732 <_fflush_r+0x1a>
 801472a:	6a03      	ldr	r3, [r0, #32]
 801472c:	b90b      	cbnz	r3, 8014732 <_fflush_r+0x1a>
 801472e:	f7fd fd3f 	bl	80121b0 <__sinit>
 8014732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d0f3      	beq.n	8014722 <_fflush_r+0xa>
 801473a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801473c:	07d0      	lsls	r0, r2, #31
 801473e:	d404      	bmi.n	801474a <_fflush_r+0x32>
 8014740:	0599      	lsls	r1, r3, #22
 8014742:	d402      	bmi.n	801474a <_fflush_r+0x32>
 8014744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014746:	f7fd ff2a 	bl	801259e <__retarget_lock_acquire_recursive>
 801474a:	4628      	mov	r0, r5
 801474c:	4621      	mov	r1, r4
 801474e:	f7ff ff5f 	bl	8014610 <__sflush_r>
 8014752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014754:	07da      	lsls	r2, r3, #31
 8014756:	4605      	mov	r5, r0
 8014758:	d4e4      	bmi.n	8014724 <_fflush_r+0xc>
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	059b      	lsls	r3, r3, #22
 801475e:	d4e1      	bmi.n	8014724 <_fflush_r+0xc>
 8014760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014762:	f7fd ff1d 	bl	80125a0 <__retarget_lock_release_recursive>
 8014766:	e7dd      	b.n	8014724 <_fflush_r+0xc>

08014768 <fiprintf>:
 8014768:	b40e      	push	{r1, r2, r3}
 801476a:	b503      	push	{r0, r1, lr}
 801476c:	4601      	mov	r1, r0
 801476e:	ab03      	add	r3, sp, #12
 8014770:	4805      	ldr	r0, [pc, #20]	@ (8014788 <fiprintf+0x20>)
 8014772:	f853 2b04 	ldr.w	r2, [r3], #4
 8014776:	6800      	ldr	r0, [r0, #0]
 8014778:	9301      	str	r3, [sp, #4]
 801477a:	f000 f893 	bl	80148a4 <_vfiprintf_r>
 801477e:	b002      	add	sp, #8
 8014780:	f85d eb04 	ldr.w	lr, [sp], #4
 8014784:	b003      	add	sp, #12
 8014786:	4770      	bx	lr
 8014788:	200003d4 	.word	0x200003d4

0801478c <memmove>:
 801478c:	4288      	cmp	r0, r1
 801478e:	b510      	push	{r4, lr}
 8014790:	eb01 0402 	add.w	r4, r1, r2
 8014794:	d902      	bls.n	801479c <memmove+0x10>
 8014796:	4284      	cmp	r4, r0
 8014798:	4623      	mov	r3, r4
 801479a:	d807      	bhi.n	80147ac <memmove+0x20>
 801479c:	1e43      	subs	r3, r0, #1
 801479e:	42a1      	cmp	r1, r4
 80147a0:	d008      	beq.n	80147b4 <memmove+0x28>
 80147a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147aa:	e7f8      	b.n	801479e <memmove+0x12>
 80147ac:	4402      	add	r2, r0
 80147ae:	4601      	mov	r1, r0
 80147b0:	428a      	cmp	r2, r1
 80147b2:	d100      	bne.n	80147b6 <memmove+0x2a>
 80147b4:	bd10      	pop	{r4, pc}
 80147b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147be:	e7f7      	b.n	80147b0 <memmove+0x24>

080147c0 <abort>:
 80147c0:	b508      	push	{r3, lr}
 80147c2:	2006      	movs	r0, #6
 80147c4:	f000 fa42 	bl	8014c4c <raise>
 80147c8:	2001      	movs	r0, #1
 80147ca:	f7ef f855 	bl	8003878 <_exit>

080147ce <_calloc_r>:
 80147ce:	b570      	push	{r4, r5, r6, lr}
 80147d0:	fba1 5402 	umull	r5, r4, r1, r2
 80147d4:	b93c      	cbnz	r4, 80147e6 <_calloc_r+0x18>
 80147d6:	4629      	mov	r1, r5
 80147d8:	f7fc f8e6 	bl	80109a8 <_malloc_r>
 80147dc:	4606      	mov	r6, r0
 80147de:	b928      	cbnz	r0, 80147ec <_calloc_r+0x1e>
 80147e0:	2600      	movs	r6, #0
 80147e2:	4630      	mov	r0, r6
 80147e4:	bd70      	pop	{r4, r5, r6, pc}
 80147e6:	220c      	movs	r2, #12
 80147e8:	6002      	str	r2, [r0, #0]
 80147ea:	e7f9      	b.n	80147e0 <_calloc_r+0x12>
 80147ec:	462a      	mov	r2, r5
 80147ee:	4621      	mov	r1, r4
 80147f0:	f7fd fd77 	bl	80122e2 <memset>
 80147f4:	e7f5      	b.n	80147e2 <_calloc_r+0x14>

080147f6 <_realloc_r>:
 80147f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147fa:	4680      	mov	r8, r0
 80147fc:	4615      	mov	r5, r2
 80147fe:	460c      	mov	r4, r1
 8014800:	b921      	cbnz	r1, 801480c <_realloc_r+0x16>
 8014802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014806:	4611      	mov	r1, r2
 8014808:	f7fc b8ce 	b.w	80109a8 <_malloc_r>
 801480c:	b92a      	cbnz	r2, 801481a <_realloc_r+0x24>
 801480e:	f7fe fd53 	bl	80132b8 <_free_r>
 8014812:	2400      	movs	r4, #0
 8014814:	4620      	mov	r0, r4
 8014816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481a:	f000 fa33 	bl	8014c84 <_malloc_usable_size_r>
 801481e:	4285      	cmp	r5, r0
 8014820:	4606      	mov	r6, r0
 8014822:	d802      	bhi.n	801482a <_realloc_r+0x34>
 8014824:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014828:	d8f4      	bhi.n	8014814 <_realloc_r+0x1e>
 801482a:	4629      	mov	r1, r5
 801482c:	4640      	mov	r0, r8
 801482e:	f7fc f8bb 	bl	80109a8 <_malloc_r>
 8014832:	4607      	mov	r7, r0
 8014834:	2800      	cmp	r0, #0
 8014836:	d0ec      	beq.n	8014812 <_realloc_r+0x1c>
 8014838:	42b5      	cmp	r5, r6
 801483a:	462a      	mov	r2, r5
 801483c:	4621      	mov	r1, r4
 801483e:	bf28      	it	cs
 8014840:	4632      	movcs	r2, r6
 8014842:	f7fd feb6 	bl	80125b2 <memcpy>
 8014846:	4621      	mov	r1, r4
 8014848:	4640      	mov	r0, r8
 801484a:	f7fe fd35 	bl	80132b8 <_free_r>
 801484e:	463c      	mov	r4, r7
 8014850:	e7e0      	b.n	8014814 <_realloc_r+0x1e>

08014852 <__sfputc_r>:
 8014852:	6893      	ldr	r3, [r2, #8]
 8014854:	3b01      	subs	r3, #1
 8014856:	2b00      	cmp	r3, #0
 8014858:	b410      	push	{r4}
 801485a:	6093      	str	r3, [r2, #8]
 801485c:	da08      	bge.n	8014870 <__sfputc_r+0x1e>
 801485e:	6994      	ldr	r4, [r2, #24]
 8014860:	42a3      	cmp	r3, r4
 8014862:	db01      	blt.n	8014868 <__sfputc_r+0x16>
 8014864:	290a      	cmp	r1, #10
 8014866:	d103      	bne.n	8014870 <__sfputc_r+0x1e>
 8014868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801486c:	f000 b932 	b.w	8014ad4 <__swbuf_r>
 8014870:	6813      	ldr	r3, [r2, #0]
 8014872:	1c58      	adds	r0, r3, #1
 8014874:	6010      	str	r0, [r2, #0]
 8014876:	7019      	strb	r1, [r3, #0]
 8014878:	4608      	mov	r0, r1
 801487a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801487e:	4770      	bx	lr

08014880 <__sfputs_r>:
 8014880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014882:	4606      	mov	r6, r0
 8014884:	460f      	mov	r7, r1
 8014886:	4614      	mov	r4, r2
 8014888:	18d5      	adds	r5, r2, r3
 801488a:	42ac      	cmp	r4, r5
 801488c:	d101      	bne.n	8014892 <__sfputs_r+0x12>
 801488e:	2000      	movs	r0, #0
 8014890:	e007      	b.n	80148a2 <__sfputs_r+0x22>
 8014892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014896:	463a      	mov	r2, r7
 8014898:	4630      	mov	r0, r6
 801489a:	f7ff ffda 	bl	8014852 <__sfputc_r>
 801489e:	1c43      	adds	r3, r0, #1
 80148a0:	d1f3      	bne.n	801488a <__sfputs_r+0xa>
 80148a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148a4 <_vfiprintf_r>:
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	460d      	mov	r5, r1
 80148aa:	b09d      	sub	sp, #116	@ 0x74
 80148ac:	4614      	mov	r4, r2
 80148ae:	4698      	mov	r8, r3
 80148b0:	4606      	mov	r6, r0
 80148b2:	b118      	cbz	r0, 80148bc <_vfiprintf_r+0x18>
 80148b4:	6a03      	ldr	r3, [r0, #32]
 80148b6:	b90b      	cbnz	r3, 80148bc <_vfiprintf_r+0x18>
 80148b8:	f7fd fc7a 	bl	80121b0 <__sinit>
 80148bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148be:	07d9      	lsls	r1, r3, #31
 80148c0:	d405      	bmi.n	80148ce <_vfiprintf_r+0x2a>
 80148c2:	89ab      	ldrh	r3, [r5, #12]
 80148c4:	059a      	lsls	r2, r3, #22
 80148c6:	d402      	bmi.n	80148ce <_vfiprintf_r+0x2a>
 80148c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ca:	f7fd fe68 	bl	801259e <__retarget_lock_acquire_recursive>
 80148ce:	89ab      	ldrh	r3, [r5, #12]
 80148d0:	071b      	lsls	r3, r3, #28
 80148d2:	d501      	bpl.n	80148d8 <_vfiprintf_r+0x34>
 80148d4:	692b      	ldr	r3, [r5, #16]
 80148d6:	b99b      	cbnz	r3, 8014900 <_vfiprintf_r+0x5c>
 80148d8:	4629      	mov	r1, r5
 80148da:	4630      	mov	r0, r6
 80148dc:	f000 f938 	bl	8014b50 <__swsetup_r>
 80148e0:	b170      	cbz	r0, 8014900 <_vfiprintf_r+0x5c>
 80148e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148e4:	07dc      	lsls	r4, r3, #31
 80148e6:	d504      	bpl.n	80148f2 <_vfiprintf_r+0x4e>
 80148e8:	f04f 30ff 	mov.w	r0, #4294967295
 80148ec:	b01d      	add	sp, #116	@ 0x74
 80148ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f2:	89ab      	ldrh	r3, [r5, #12]
 80148f4:	0598      	lsls	r0, r3, #22
 80148f6:	d4f7      	bmi.n	80148e8 <_vfiprintf_r+0x44>
 80148f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fa:	f7fd fe51 	bl	80125a0 <__retarget_lock_release_recursive>
 80148fe:	e7f3      	b.n	80148e8 <_vfiprintf_r+0x44>
 8014900:	2300      	movs	r3, #0
 8014902:	9309      	str	r3, [sp, #36]	@ 0x24
 8014904:	2320      	movs	r3, #32
 8014906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801490a:	f8cd 800c 	str.w	r8, [sp, #12]
 801490e:	2330      	movs	r3, #48	@ 0x30
 8014910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ac0 <_vfiprintf_r+0x21c>
 8014914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014918:	f04f 0901 	mov.w	r9, #1
 801491c:	4623      	mov	r3, r4
 801491e:	469a      	mov	sl, r3
 8014920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014924:	b10a      	cbz	r2, 801492a <_vfiprintf_r+0x86>
 8014926:	2a25      	cmp	r2, #37	@ 0x25
 8014928:	d1f9      	bne.n	801491e <_vfiprintf_r+0x7a>
 801492a:	ebba 0b04 	subs.w	fp, sl, r4
 801492e:	d00b      	beq.n	8014948 <_vfiprintf_r+0xa4>
 8014930:	465b      	mov	r3, fp
 8014932:	4622      	mov	r2, r4
 8014934:	4629      	mov	r1, r5
 8014936:	4630      	mov	r0, r6
 8014938:	f7ff ffa2 	bl	8014880 <__sfputs_r>
 801493c:	3001      	adds	r0, #1
 801493e:	f000 80a7 	beq.w	8014a90 <_vfiprintf_r+0x1ec>
 8014942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014944:	445a      	add	r2, fp
 8014946:	9209      	str	r2, [sp, #36]	@ 0x24
 8014948:	f89a 3000 	ldrb.w	r3, [sl]
 801494c:	2b00      	cmp	r3, #0
 801494e:	f000 809f 	beq.w	8014a90 <_vfiprintf_r+0x1ec>
 8014952:	2300      	movs	r3, #0
 8014954:	f04f 32ff 	mov.w	r2, #4294967295
 8014958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801495c:	f10a 0a01 	add.w	sl, sl, #1
 8014960:	9304      	str	r3, [sp, #16]
 8014962:	9307      	str	r3, [sp, #28]
 8014964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014968:	931a      	str	r3, [sp, #104]	@ 0x68
 801496a:	4654      	mov	r4, sl
 801496c:	2205      	movs	r2, #5
 801496e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014972:	4853      	ldr	r0, [pc, #332]	@ (8014ac0 <_vfiprintf_r+0x21c>)
 8014974:	f7eb fc2c 	bl	80001d0 <memchr>
 8014978:	9a04      	ldr	r2, [sp, #16]
 801497a:	b9d8      	cbnz	r0, 80149b4 <_vfiprintf_r+0x110>
 801497c:	06d1      	lsls	r1, r2, #27
 801497e:	bf44      	itt	mi
 8014980:	2320      	movmi	r3, #32
 8014982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014986:	0713      	lsls	r3, r2, #28
 8014988:	bf44      	itt	mi
 801498a:	232b      	movmi	r3, #43	@ 0x2b
 801498c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014990:	f89a 3000 	ldrb.w	r3, [sl]
 8014994:	2b2a      	cmp	r3, #42	@ 0x2a
 8014996:	d015      	beq.n	80149c4 <_vfiprintf_r+0x120>
 8014998:	9a07      	ldr	r2, [sp, #28]
 801499a:	4654      	mov	r4, sl
 801499c:	2000      	movs	r0, #0
 801499e:	f04f 0c0a 	mov.w	ip, #10
 80149a2:	4621      	mov	r1, r4
 80149a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149a8:	3b30      	subs	r3, #48	@ 0x30
 80149aa:	2b09      	cmp	r3, #9
 80149ac:	d94b      	bls.n	8014a46 <_vfiprintf_r+0x1a2>
 80149ae:	b1b0      	cbz	r0, 80149de <_vfiprintf_r+0x13a>
 80149b0:	9207      	str	r2, [sp, #28]
 80149b2:	e014      	b.n	80149de <_vfiprintf_r+0x13a>
 80149b4:	eba0 0308 	sub.w	r3, r0, r8
 80149b8:	fa09 f303 	lsl.w	r3, r9, r3
 80149bc:	4313      	orrs	r3, r2
 80149be:	9304      	str	r3, [sp, #16]
 80149c0:	46a2      	mov	sl, r4
 80149c2:	e7d2      	b.n	801496a <_vfiprintf_r+0xc6>
 80149c4:	9b03      	ldr	r3, [sp, #12]
 80149c6:	1d19      	adds	r1, r3, #4
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	9103      	str	r1, [sp, #12]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	bfbb      	ittet	lt
 80149d0:	425b      	neglt	r3, r3
 80149d2:	f042 0202 	orrlt.w	r2, r2, #2
 80149d6:	9307      	strge	r3, [sp, #28]
 80149d8:	9307      	strlt	r3, [sp, #28]
 80149da:	bfb8      	it	lt
 80149dc:	9204      	strlt	r2, [sp, #16]
 80149de:	7823      	ldrb	r3, [r4, #0]
 80149e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80149e2:	d10a      	bne.n	80149fa <_vfiprintf_r+0x156>
 80149e4:	7863      	ldrb	r3, [r4, #1]
 80149e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80149e8:	d132      	bne.n	8014a50 <_vfiprintf_r+0x1ac>
 80149ea:	9b03      	ldr	r3, [sp, #12]
 80149ec:	1d1a      	adds	r2, r3, #4
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	9203      	str	r2, [sp, #12]
 80149f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149f6:	3402      	adds	r4, #2
 80149f8:	9305      	str	r3, [sp, #20]
 80149fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ad0 <_vfiprintf_r+0x22c>
 80149fe:	7821      	ldrb	r1, [r4, #0]
 8014a00:	2203      	movs	r2, #3
 8014a02:	4650      	mov	r0, sl
 8014a04:	f7eb fbe4 	bl	80001d0 <memchr>
 8014a08:	b138      	cbz	r0, 8014a1a <_vfiprintf_r+0x176>
 8014a0a:	9b04      	ldr	r3, [sp, #16]
 8014a0c:	eba0 000a 	sub.w	r0, r0, sl
 8014a10:	2240      	movs	r2, #64	@ 0x40
 8014a12:	4082      	lsls	r2, r0
 8014a14:	4313      	orrs	r3, r2
 8014a16:	3401      	adds	r4, #1
 8014a18:	9304      	str	r3, [sp, #16]
 8014a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a1e:	4829      	ldr	r0, [pc, #164]	@ (8014ac4 <_vfiprintf_r+0x220>)
 8014a20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a24:	2206      	movs	r2, #6
 8014a26:	f7eb fbd3 	bl	80001d0 <memchr>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d03f      	beq.n	8014aae <_vfiprintf_r+0x20a>
 8014a2e:	4b26      	ldr	r3, [pc, #152]	@ (8014ac8 <_vfiprintf_r+0x224>)
 8014a30:	bb1b      	cbnz	r3, 8014a7a <_vfiprintf_r+0x1d6>
 8014a32:	9b03      	ldr	r3, [sp, #12]
 8014a34:	3307      	adds	r3, #7
 8014a36:	f023 0307 	bic.w	r3, r3, #7
 8014a3a:	3308      	adds	r3, #8
 8014a3c:	9303      	str	r3, [sp, #12]
 8014a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a40:	443b      	add	r3, r7
 8014a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a44:	e76a      	b.n	801491c <_vfiprintf_r+0x78>
 8014a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a4a:	460c      	mov	r4, r1
 8014a4c:	2001      	movs	r0, #1
 8014a4e:	e7a8      	b.n	80149a2 <_vfiprintf_r+0xfe>
 8014a50:	2300      	movs	r3, #0
 8014a52:	3401      	adds	r4, #1
 8014a54:	9305      	str	r3, [sp, #20]
 8014a56:	4619      	mov	r1, r3
 8014a58:	f04f 0c0a 	mov.w	ip, #10
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a62:	3a30      	subs	r2, #48	@ 0x30
 8014a64:	2a09      	cmp	r2, #9
 8014a66:	d903      	bls.n	8014a70 <_vfiprintf_r+0x1cc>
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d0c6      	beq.n	80149fa <_vfiprintf_r+0x156>
 8014a6c:	9105      	str	r1, [sp, #20]
 8014a6e:	e7c4      	b.n	80149fa <_vfiprintf_r+0x156>
 8014a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a74:	4604      	mov	r4, r0
 8014a76:	2301      	movs	r3, #1
 8014a78:	e7f0      	b.n	8014a5c <_vfiprintf_r+0x1b8>
 8014a7a:	ab03      	add	r3, sp, #12
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	462a      	mov	r2, r5
 8014a80:	4b12      	ldr	r3, [pc, #72]	@ (8014acc <_vfiprintf_r+0x228>)
 8014a82:	a904      	add	r1, sp, #16
 8014a84:	4630      	mov	r0, r6
 8014a86:	f7fc ff4f 	bl	8011928 <_printf_float>
 8014a8a:	4607      	mov	r7, r0
 8014a8c:	1c78      	adds	r0, r7, #1
 8014a8e:	d1d6      	bne.n	8014a3e <_vfiprintf_r+0x19a>
 8014a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a92:	07d9      	lsls	r1, r3, #31
 8014a94:	d405      	bmi.n	8014aa2 <_vfiprintf_r+0x1fe>
 8014a96:	89ab      	ldrh	r3, [r5, #12]
 8014a98:	059a      	lsls	r2, r3, #22
 8014a9a:	d402      	bmi.n	8014aa2 <_vfiprintf_r+0x1fe>
 8014a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a9e:	f7fd fd7f 	bl	80125a0 <__retarget_lock_release_recursive>
 8014aa2:	89ab      	ldrh	r3, [r5, #12]
 8014aa4:	065b      	lsls	r3, r3, #25
 8014aa6:	f53f af1f 	bmi.w	80148e8 <_vfiprintf_r+0x44>
 8014aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014aac:	e71e      	b.n	80148ec <_vfiprintf_r+0x48>
 8014aae:	ab03      	add	r3, sp, #12
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	462a      	mov	r2, r5
 8014ab4:	4b05      	ldr	r3, [pc, #20]	@ (8014acc <_vfiprintf_r+0x228>)
 8014ab6:	a904      	add	r1, sp, #16
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f7fd f9cd 	bl	8011e58 <_printf_i>
 8014abe:	e7e4      	b.n	8014a8a <_vfiprintf_r+0x1e6>
 8014ac0:	08015c48 	.word	0x08015c48
 8014ac4:	08015c52 	.word	0x08015c52
 8014ac8:	08011929 	.word	0x08011929
 8014acc:	08014881 	.word	0x08014881
 8014ad0:	08015c4e 	.word	0x08015c4e

08014ad4 <__swbuf_r>:
 8014ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ad6:	460e      	mov	r6, r1
 8014ad8:	4614      	mov	r4, r2
 8014ada:	4605      	mov	r5, r0
 8014adc:	b118      	cbz	r0, 8014ae6 <__swbuf_r+0x12>
 8014ade:	6a03      	ldr	r3, [r0, #32]
 8014ae0:	b90b      	cbnz	r3, 8014ae6 <__swbuf_r+0x12>
 8014ae2:	f7fd fb65 	bl	80121b0 <__sinit>
 8014ae6:	69a3      	ldr	r3, [r4, #24]
 8014ae8:	60a3      	str	r3, [r4, #8]
 8014aea:	89a3      	ldrh	r3, [r4, #12]
 8014aec:	071a      	lsls	r2, r3, #28
 8014aee:	d501      	bpl.n	8014af4 <__swbuf_r+0x20>
 8014af0:	6923      	ldr	r3, [r4, #16]
 8014af2:	b943      	cbnz	r3, 8014b06 <__swbuf_r+0x32>
 8014af4:	4621      	mov	r1, r4
 8014af6:	4628      	mov	r0, r5
 8014af8:	f000 f82a 	bl	8014b50 <__swsetup_r>
 8014afc:	b118      	cbz	r0, 8014b06 <__swbuf_r+0x32>
 8014afe:	f04f 37ff 	mov.w	r7, #4294967295
 8014b02:	4638      	mov	r0, r7
 8014b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b06:	6823      	ldr	r3, [r4, #0]
 8014b08:	6922      	ldr	r2, [r4, #16]
 8014b0a:	1a98      	subs	r0, r3, r2
 8014b0c:	6963      	ldr	r3, [r4, #20]
 8014b0e:	b2f6      	uxtb	r6, r6
 8014b10:	4283      	cmp	r3, r0
 8014b12:	4637      	mov	r7, r6
 8014b14:	dc05      	bgt.n	8014b22 <__swbuf_r+0x4e>
 8014b16:	4621      	mov	r1, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f7ff fdfd 	bl	8014718 <_fflush_r>
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	d1ed      	bne.n	8014afe <__swbuf_r+0x2a>
 8014b22:	68a3      	ldr	r3, [r4, #8]
 8014b24:	3b01      	subs	r3, #1
 8014b26:	60a3      	str	r3, [r4, #8]
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	1c5a      	adds	r2, r3, #1
 8014b2c:	6022      	str	r2, [r4, #0]
 8014b2e:	701e      	strb	r6, [r3, #0]
 8014b30:	6962      	ldr	r2, [r4, #20]
 8014b32:	1c43      	adds	r3, r0, #1
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d004      	beq.n	8014b42 <__swbuf_r+0x6e>
 8014b38:	89a3      	ldrh	r3, [r4, #12]
 8014b3a:	07db      	lsls	r3, r3, #31
 8014b3c:	d5e1      	bpl.n	8014b02 <__swbuf_r+0x2e>
 8014b3e:	2e0a      	cmp	r6, #10
 8014b40:	d1df      	bne.n	8014b02 <__swbuf_r+0x2e>
 8014b42:	4621      	mov	r1, r4
 8014b44:	4628      	mov	r0, r5
 8014b46:	f7ff fde7 	bl	8014718 <_fflush_r>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d0d9      	beq.n	8014b02 <__swbuf_r+0x2e>
 8014b4e:	e7d6      	b.n	8014afe <__swbuf_r+0x2a>

08014b50 <__swsetup_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4b29      	ldr	r3, [pc, #164]	@ (8014bf8 <__swsetup_r+0xa8>)
 8014b54:	4605      	mov	r5, r0
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	460c      	mov	r4, r1
 8014b5a:	b118      	cbz	r0, 8014b64 <__swsetup_r+0x14>
 8014b5c:	6a03      	ldr	r3, [r0, #32]
 8014b5e:	b90b      	cbnz	r3, 8014b64 <__swsetup_r+0x14>
 8014b60:	f7fd fb26 	bl	80121b0 <__sinit>
 8014b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b68:	0719      	lsls	r1, r3, #28
 8014b6a:	d422      	bmi.n	8014bb2 <__swsetup_r+0x62>
 8014b6c:	06da      	lsls	r2, r3, #27
 8014b6e:	d407      	bmi.n	8014b80 <__swsetup_r+0x30>
 8014b70:	2209      	movs	r2, #9
 8014b72:	602a      	str	r2, [r5, #0]
 8014b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b78:	81a3      	strh	r3, [r4, #12]
 8014b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b7e:	e033      	b.n	8014be8 <__swsetup_r+0x98>
 8014b80:	0758      	lsls	r0, r3, #29
 8014b82:	d512      	bpl.n	8014baa <__swsetup_r+0x5a>
 8014b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b86:	b141      	cbz	r1, 8014b9a <__swsetup_r+0x4a>
 8014b88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b8c:	4299      	cmp	r1, r3
 8014b8e:	d002      	beq.n	8014b96 <__swsetup_r+0x46>
 8014b90:	4628      	mov	r0, r5
 8014b92:	f7fe fb91 	bl	80132b8 <_free_r>
 8014b96:	2300      	movs	r3, #0
 8014b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b9a:	89a3      	ldrh	r3, [r4, #12]
 8014b9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ba0:	81a3      	strh	r3, [r4, #12]
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	6063      	str	r3, [r4, #4]
 8014ba6:	6923      	ldr	r3, [r4, #16]
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	89a3      	ldrh	r3, [r4, #12]
 8014bac:	f043 0308 	orr.w	r3, r3, #8
 8014bb0:	81a3      	strh	r3, [r4, #12]
 8014bb2:	6923      	ldr	r3, [r4, #16]
 8014bb4:	b94b      	cbnz	r3, 8014bca <__swsetup_r+0x7a>
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bc0:	d003      	beq.n	8014bca <__swsetup_r+0x7a>
 8014bc2:	4621      	mov	r1, r4
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	f000 f88b 	bl	8014ce0 <__smakebuf_r>
 8014bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bce:	f013 0201 	ands.w	r2, r3, #1
 8014bd2:	d00a      	beq.n	8014bea <__swsetup_r+0x9a>
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	60a2      	str	r2, [r4, #8]
 8014bd8:	6962      	ldr	r2, [r4, #20]
 8014bda:	4252      	negs	r2, r2
 8014bdc:	61a2      	str	r2, [r4, #24]
 8014bde:	6922      	ldr	r2, [r4, #16]
 8014be0:	b942      	cbnz	r2, 8014bf4 <__swsetup_r+0xa4>
 8014be2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014be6:	d1c5      	bne.n	8014b74 <__swsetup_r+0x24>
 8014be8:	bd38      	pop	{r3, r4, r5, pc}
 8014bea:	0799      	lsls	r1, r3, #30
 8014bec:	bf58      	it	pl
 8014bee:	6962      	ldrpl	r2, [r4, #20]
 8014bf0:	60a2      	str	r2, [r4, #8]
 8014bf2:	e7f4      	b.n	8014bde <__swsetup_r+0x8e>
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	e7f7      	b.n	8014be8 <__swsetup_r+0x98>
 8014bf8:	200003d4 	.word	0x200003d4

08014bfc <_raise_r>:
 8014bfc:	291f      	cmp	r1, #31
 8014bfe:	b538      	push	{r3, r4, r5, lr}
 8014c00:	4605      	mov	r5, r0
 8014c02:	460c      	mov	r4, r1
 8014c04:	d904      	bls.n	8014c10 <_raise_r+0x14>
 8014c06:	2316      	movs	r3, #22
 8014c08:	6003      	str	r3, [r0, #0]
 8014c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c0e:	bd38      	pop	{r3, r4, r5, pc}
 8014c10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014c12:	b112      	cbz	r2, 8014c1a <_raise_r+0x1e>
 8014c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c18:	b94b      	cbnz	r3, 8014c2e <_raise_r+0x32>
 8014c1a:	4628      	mov	r0, r5
 8014c1c:	f000 f830 	bl	8014c80 <_getpid_r>
 8014c20:	4622      	mov	r2, r4
 8014c22:	4601      	mov	r1, r0
 8014c24:	4628      	mov	r0, r5
 8014c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c2a:	f000 b817 	b.w	8014c5c <_kill_r>
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d00a      	beq.n	8014c48 <_raise_r+0x4c>
 8014c32:	1c59      	adds	r1, r3, #1
 8014c34:	d103      	bne.n	8014c3e <_raise_r+0x42>
 8014c36:	2316      	movs	r3, #22
 8014c38:	6003      	str	r3, [r0, #0]
 8014c3a:	2001      	movs	r0, #1
 8014c3c:	e7e7      	b.n	8014c0e <_raise_r+0x12>
 8014c3e:	2100      	movs	r1, #0
 8014c40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014c44:	4620      	mov	r0, r4
 8014c46:	4798      	blx	r3
 8014c48:	2000      	movs	r0, #0
 8014c4a:	e7e0      	b.n	8014c0e <_raise_r+0x12>

08014c4c <raise>:
 8014c4c:	4b02      	ldr	r3, [pc, #8]	@ (8014c58 <raise+0xc>)
 8014c4e:	4601      	mov	r1, r0
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	f7ff bfd3 	b.w	8014bfc <_raise_r>
 8014c56:	bf00      	nop
 8014c58:	200003d4 	.word	0x200003d4

08014c5c <_kill_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	4d07      	ldr	r5, [pc, #28]	@ (8014c7c <_kill_r+0x20>)
 8014c60:	2300      	movs	r3, #0
 8014c62:	4604      	mov	r4, r0
 8014c64:	4608      	mov	r0, r1
 8014c66:	4611      	mov	r1, r2
 8014c68:	602b      	str	r3, [r5, #0]
 8014c6a:	f7ee fdf5 	bl	8003858 <_kill>
 8014c6e:	1c43      	adds	r3, r0, #1
 8014c70:	d102      	bne.n	8014c78 <_kill_r+0x1c>
 8014c72:	682b      	ldr	r3, [r5, #0]
 8014c74:	b103      	cbz	r3, 8014c78 <_kill_r+0x1c>
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	bd38      	pop	{r3, r4, r5, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20005a0c 	.word	0x20005a0c

08014c80 <_getpid_r>:
 8014c80:	f7ee bde2 	b.w	8003848 <_getpid>

08014c84 <_malloc_usable_size_r>:
 8014c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c88:	1f18      	subs	r0, r3, #4
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	bfbc      	itt	lt
 8014c8e:	580b      	ldrlt	r3, [r1, r0]
 8014c90:	18c0      	addlt	r0, r0, r3
 8014c92:	4770      	bx	lr

08014c94 <__swhatbuf_r>:
 8014c94:	b570      	push	{r4, r5, r6, lr}
 8014c96:	460c      	mov	r4, r1
 8014c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	b096      	sub	sp, #88	@ 0x58
 8014ca0:	4615      	mov	r5, r2
 8014ca2:	461e      	mov	r6, r3
 8014ca4:	da0d      	bge.n	8014cc2 <__swhatbuf_r+0x2e>
 8014ca6:	89a3      	ldrh	r3, [r4, #12]
 8014ca8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014cac:	f04f 0100 	mov.w	r1, #0
 8014cb0:	bf14      	ite	ne
 8014cb2:	2340      	movne	r3, #64	@ 0x40
 8014cb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014cb8:	2000      	movs	r0, #0
 8014cba:	6031      	str	r1, [r6, #0]
 8014cbc:	602b      	str	r3, [r5, #0]
 8014cbe:	b016      	add	sp, #88	@ 0x58
 8014cc0:	bd70      	pop	{r4, r5, r6, pc}
 8014cc2:	466a      	mov	r2, sp
 8014cc4:	f000 f848 	bl	8014d58 <_fstat_r>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	dbec      	blt.n	8014ca6 <__swhatbuf_r+0x12>
 8014ccc:	9901      	ldr	r1, [sp, #4]
 8014cce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014cd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014cd6:	4259      	negs	r1, r3
 8014cd8:	4159      	adcs	r1, r3
 8014cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014cde:	e7eb      	b.n	8014cb8 <__swhatbuf_r+0x24>

08014ce0 <__smakebuf_r>:
 8014ce0:	898b      	ldrh	r3, [r1, #12]
 8014ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ce4:	079d      	lsls	r5, r3, #30
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	460c      	mov	r4, r1
 8014cea:	d507      	bpl.n	8014cfc <__smakebuf_r+0x1c>
 8014cec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	6123      	str	r3, [r4, #16]
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	6163      	str	r3, [r4, #20]
 8014cf8:	b003      	add	sp, #12
 8014cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cfc:	ab01      	add	r3, sp, #4
 8014cfe:	466a      	mov	r2, sp
 8014d00:	f7ff ffc8 	bl	8014c94 <__swhatbuf_r>
 8014d04:	9f00      	ldr	r7, [sp, #0]
 8014d06:	4605      	mov	r5, r0
 8014d08:	4639      	mov	r1, r7
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f7fb fe4c 	bl	80109a8 <_malloc_r>
 8014d10:	b948      	cbnz	r0, 8014d26 <__smakebuf_r+0x46>
 8014d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d16:	059a      	lsls	r2, r3, #22
 8014d18:	d4ee      	bmi.n	8014cf8 <__smakebuf_r+0x18>
 8014d1a:	f023 0303 	bic.w	r3, r3, #3
 8014d1e:	f043 0302 	orr.w	r3, r3, #2
 8014d22:	81a3      	strh	r3, [r4, #12]
 8014d24:	e7e2      	b.n	8014cec <__smakebuf_r+0xc>
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	6020      	str	r0, [r4, #0]
 8014d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d2e:	81a3      	strh	r3, [r4, #12]
 8014d30:	9b01      	ldr	r3, [sp, #4]
 8014d32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d36:	b15b      	cbz	r3, 8014d50 <__smakebuf_r+0x70>
 8014d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f000 f81d 	bl	8014d7c <_isatty_r>
 8014d42:	b128      	cbz	r0, 8014d50 <__smakebuf_r+0x70>
 8014d44:	89a3      	ldrh	r3, [r4, #12]
 8014d46:	f023 0303 	bic.w	r3, r3, #3
 8014d4a:	f043 0301 	orr.w	r3, r3, #1
 8014d4e:	81a3      	strh	r3, [r4, #12]
 8014d50:	89a3      	ldrh	r3, [r4, #12]
 8014d52:	431d      	orrs	r5, r3
 8014d54:	81a5      	strh	r5, [r4, #12]
 8014d56:	e7cf      	b.n	8014cf8 <__smakebuf_r+0x18>

08014d58 <_fstat_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4d07      	ldr	r5, [pc, #28]	@ (8014d78 <_fstat_r+0x20>)
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4604      	mov	r4, r0
 8014d60:	4608      	mov	r0, r1
 8014d62:	4611      	mov	r1, r2
 8014d64:	602b      	str	r3, [r5, #0]
 8014d66:	f7ee fdd7 	bl	8003918 <_fstat>
 8014d6a:	1c43      	adds	r3, r0, #1
 8014d6c:	d102      	bne.n	8014d74 <_fstat_r+0x1c>
 8014d6e:	682b      	ldr	r3, [r5, #0]
 8014d70:	b103      	cbz	r3, 8014d74 <_fstat_r+0x1c>
 8014d72:	6023      	str	r3, [r4, #0]
 8014d74:	bd38      	pop	{r3, r4, r5, pc}
 8014d76:	bf00      	nop
 8014d78:	20005a0c 	.word	0x20005a0c

08014d7c <_isatty_r>:
 8014d7c:	b538      	push	{r3, r4, r5, lr}
 8014d7e:	4d06      	ldr	r5, [pc, #24]	@ (8014d98 <_isatty_r+0x1c>)
 8014d80:	2300      	movs	r3, #0
 8014d82:	4604      	mov	r4, r0
 8014d84:	4608      	mov	r0, r1
 8014d86:	602b      	str	r3, [r5, #0]
 8014d88:	f7ee fdd6 	bl	8003938 <_isatty>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_isatty_r+0x1a>
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_isatty_r+0x1a>
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	20005a0c 	.word	0x20005a0c

08014d9c <_init>:
 8014d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d9e:	bf00      	nop
 8014da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014da2:	bc08      	pop	{r3}
 8014da4:	469e      	mov	lr, r3
 8014da6:	4770      	bx	lr

08014da8 <_fini>:
 8014da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014daa:	bf00      	nop
 8014dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dae:	bc08      	pop	{r3}
 8014db0:	469e      	mov	lr, r3
 8014db2:	4770      	bx	lr
