
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08014da8  08014da8  00015da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c44  08015c44  00017424  2**0
                  CONTENTS
  4 .ARM          00000008  08015c44  08015c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c4c  08015c4c  00017424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c4c  08015c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c50  08015c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08015c54  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055ec  20000428  08016078  00017428  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005a14  08016078  00017a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ea05  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075f3  00000000  00000000  00045e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  0004d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2b  00000000  00000000  0004fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7ba  00000000  00000000  0005174b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003561b  00000000  00000000  0007df05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4938  00000000  00000000  000b3520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b29c  00000000  00000000  00197e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a3138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d8c 	.word	0x08014d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	08014d8c 	.word	0x08014d8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <toggle_led+0x30>)
 8000f54:	f003 f913 	bl	800417e <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f00b f871 	bl	800c040 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <toggle_led+0x30>)
 8000f66:	f003 f90a 	bl	800417e <HAL_GPIO_TogglePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <ARM_keys_IRQ+0x58>)
 8000f82:	f001 fdc5 	bl	8002b10 <UART_puts>
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <ARM_keys_IRQ+0x5c>)
 8000f88:	f001 fdc2 	bl	8002b10 <UART_puts>
 8000f8c:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <ARM_keys_IRQ+0x60>)
 8000f8e:	f001 fdbf 	bl	8002b10 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <ARM_keys_IRQ+0x64>)
 8000f94:	f00d f966 	bl	800e264 <xTaskGetHandle>
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <ARM_keys_IRQ+0x68>)
 8000fa2:	f000 fb17 	bl	80015d4 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <ARM_keys_IRQ+0x6c>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fb8:	f00b f9dc 	bl	800c374 <xEventGroupWaitBits>
 8000fbc:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f00e f87d 	bl	800f0c4 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fca:	bf00      	nop
 8000fcc:	e7eb      	b.n	8000fa6 <ARM_keys_IRQ+0x2e>
 8000fce:	bf00      	nop
 8000fd0:	08014da8 	.word	0x08014da8
 8000fd4:	0801570c 	.word	0x0801570c
 8000fd8:	08014dac 	.word	0x08014dac
 8000fdc:	08014db8 	.word	0x08014db8
 8000fe0:	08014dc8 	.word	0x08014dc8
 8000fe4:	20000454 	.word	0x20000454

08000fe8 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f00e f801 	bl	800f004 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <ARM_keys_task+0xb4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	4618      	mov	r0, r3
 800100c:	f00c f802 	bl	800d014 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fd2f 	bl	8002a78 <LED_put>
	    BUZZER_put (500);
 800101a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800101e:	f001 fa1d 	bl	800245c <BUZZER_put>
		osDelay(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001026:	f00b f80b 	bl	800c040 <osDelay>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <ARM_keys_task+0xb8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <ARM_keys_task+0x5c>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001036:	481b      	ldr	r0, [pc, #108]	@ (80010a4 <ARM_keys_task+0xbc>)
 8001038:	f001 fd6a 	bl	8002b10 <UART_puts>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fd82 	bl	8002b48 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <ARM_keys_task+0xb4>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	f00b fd5f 	bl	800cb10 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e015      	b.n	8001084 <ARM_keys_task+0x9c>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <ARM_keys_task+0x88>
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <ARM_keys_task+0x82>
 8001064:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001068:	e004      	b.n	8001074 <ARM_keys_task+0x8c>
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	e001      	b.n	8001074 <ARM_keys_task+0x8c>
 8001070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001074:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff63 	bl	8000f44 <toggle_led>
		for (i=0; i<3; i++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b02      	cmp	r3, #2
 8001088:	dde6      	ble.n	8001058 <ARM_keys_task+0x70>
	  	}
     	taskYIELD(); // done, force context switch
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <ARM_keys_task+0xc0>)
 800108c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	f3bf 8f4f 	dsb	sy
 8001096:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800109a:	e7a9      	b.n	8000ff0 <ARM_keys_task+0x8>
 800109c:	20000450 	.word	0x20000450
 80010a0:	20000444 	.word	0x20000444
 80010a4:	08014dd8 	.word	0x08014dd8
 80010a8:	e000ed04 	.word	0xe000ed04

080010ac <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 80010bc:	4847      	ldr	r0, [pc, #284]	@ (80011dc <UART_keys_IRQ+0x130>)
 80010be:	f001 fd27 	bl	8002b10 <UART_puts>
 80010c2:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <UART_keys_IRQ+0x134>)
 80010c4:	f001 fd24 	bl	8002b10 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 80010c8:	4846      	ldr	r0, [pc, #280]	@ (80011e4 <UART_keys_IRQ+0x138>)
 80010ca:	f00d f8cb 	bl	800e264 <xTaskGetHandle>
 80010ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 80010d6:	4844      	ldr	r0, [pc, #272]	@ (80011e8 <UART_keys_IRQ+0x13c>)
 80010d8:	f000 fa7c 	bl	80015d4 <error_HaltOS>
	while(TRUE)
    {
		// laat de VIC de q vullen, tot LFEED gedrukt is of qsize - 1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80010dc:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <UART_keys_IRQ+0x140>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f107 0218 	add.w	r2, r7, #24
 80010e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e6:	4413      	add	r3, r2
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	4619      	mov	r1, r3
 80010ee:	f00b feaf 	bl	800ce50 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 80010f2:	f107 0218 	add.w	r2, r7, #24
 80010f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d06b      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 8001100:	f107 0218 	add.w	r2, r7, #24
 8001104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2bff      	cmp	r3, #255	@ 0xff
 800110c:	d064      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 800110e:	f107 0218 	add.w	r2, r7, #24
 8001112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b0d      	cmp	r3, #13
 800111a:	d05d      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
 800111c:	f107 0218 	add.w	r2, r7, #24
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b20      	cmp	r3, #32
 8001128:	d056      	beq.n	80011d8 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 800112a:	f107 0218 	add.w	r2, r7, #24
 800112e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d108      	bne.n	800114a <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001138:	f107 0218 	add.w	r2, r7, #24
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001148:	e00d      	b.n	8001166 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 800114a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114c:	2b08      	cmp	r3, #8
 800114e:	d10a      	bne.n	8001166 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001152:	3301      	adds	r3, #1
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001156:	f107 0218 	add.w	r2, r7, #24
 800115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115c:	4413      	add	r3, r2
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	2b00      	cmp	r3, #0
 800116a:	d031      	beq.n	80011d0 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 800116c:	f107 0218 	add.w	r2, r7, #24
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f011 fa0b 	bl	8012592 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	220a      	movs	r2, #10
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f011 f8a4 	bl	80122d2 <memset>
			finish = FALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	2300      	movs	r3, #0
 8001198:	2203      	movs	r2, #3
 800119a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800119c:	f00d ff92 	bl	800f0c4 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <UART_keys_IRQ+0x144>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d097      	beq.n	80010dc <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 80011ac:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <UART_keys_IRQ+0x148>)
 80011ae:	f001 fcaf 	bl	8002b10 <UART_puts>
 80011b2:	480a      	ldr	r0, [pc, #40]	@ (80011dc <UART_keys_IRQ+0x130>)
 80011b4:	f001 fcac 	bl	8002b10 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 80011b8:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <UART_keys_IRQ+0x14c>)
 80011ba:	f001 fca9 	bl	8002b10 <UART_puts>
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fca4 	bl	8002b10 <UART_puts>
				UART_puts("\r\n");
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <UART_keys_IRQ+0x150>)
 80011ca:	f001 fca1 	bl	8002b10 <UART_puts>
 80011ce:	e785      	b.n	80010dc <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	3301      	adds	r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d6:	e781      	b.n	80010dc <UART_keys_IRQ+0x30>
			continue;
 80011d8:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 80011da:	e77f      	b.n	80010dc <UART_keys_IRQ+0x30>
 80011dc:	0801571c 	.word	0x0801571c
 80011e0:	08014e44 	.word	0x08014e44
 80011e4:	08014df8 	.word	0x08014df8
 80011e8:	08014e68 	.word	0x08014e68
 80011ec:	20000448 	.word	0x20000448
 80011f0:	20000444 	.word	0x20000444
 80011f4:	08014e28 	.word	0x08014e28
 80011f8:	08014e78 	.word	0x08014e78
 80011fc:	08014e40 	.word	0x08014e40

08001200 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001208:	4bab      	ldr	r3, [pc, #684]	@ (80014b8 <UART_menu+0x2b8>)
 800120a:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 800120c:	48ab      	ldr	r0, [pc, #684]	@ (80014bc <UART_menu+0x2bc>)
 800120e:	f001 fc7f 	bl	8002b10 <UART_puts>
 8001212:	48ab      	ldr	r0, [pc, #684]	@ (80014c0 <UART_menu+0x2c0>)
 8001214:	f001 fc7c 	bl	8002b10 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	2001      	movs	r0, #1
 800121e:	f00d fea5 	bl	800ef6c <ulTaskNotifyTake>
 8001222:	4603      	mov	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	75fb      	strb	r3, [r7, #23]
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	3301      	adds	r3, #1
 8001230:	4aa4      	ldr	r2, [pc, #656]	@ (80014c4 <UART_menu+0x2c4>)
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d102      	bne.n	8001244 <UART_menu+0x44>
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	3b20      	subs	r3, #32
 8001242:	e000      	b.n	8001246 <UART_menu+0x46>
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	3b30      	subs	r3, #48	@ 0x30
 8001248:	2b24      	cmp	r3, #36	@ 0x24
 800124a:	d84d      	bhi.n	80012e8 <UART_menu+0xe8>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <UART_menu+0x54>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	080012f7 	.word	0x080012f7
 8001258:	08001333 	.word	0x08001333
 800125c:	0800135f 	.word	0x0800135f
 8001260:	0800138b 	.word	0x0800138b
 8001264:	080013b7 	.word	0x080013b7
 8001268:	080013e3 	.word	0x080013e3
 800126c:	080012e9 	.word	0x080012e9
 8001270:	080012e9 	.word	0x080012e9
 8001274:	080012e9 	.word	0x080012e9
 8001278:	080012e9 	.word	0x080012e9
 800127c:	080012e9 	.word	0x080012e9
 8001280:	080012e9 	.word	0x080012e9
 8001284:	080012e9 	.word	0x080012e9
 8001288:	080012e9 	.word	0x080012e9
 800128c:	080012e9 	.word	0x080012e9
 8001290:	080012e9 	.word	0x080012e9
 8001294:	080012e9 	.word	0x080012e9
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012e9 	.word	0x080012e9
 80012a0:	080012e9 	.word	0x080012e9
 80012a4:	0800140f 	.word	0x0800140f
 80012a8:	080012e9 	.word	0x080012e9
 80012ac:	080012e9 	.word	0x080012e9
 80012b0:	080012e9 	.word	0x080012e9
 80012b4:	080012e9 	.word	0x080012e9
 80012b8:	080012e9 	.word	0x080012e9
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	080012e9 	.word	0x080012e9
 80012c8:	08001433 	.word	0x08001433
 80012cc:	080012e9 	.word	0x080012e9
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	0800143f 	.word	0x0800143f
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012e9 	.word	0x080012e9
 80012e0:	08001483 	.word	0x08001483
 80012e4:	08001439 	.word	0x08001439
		{
		default:  UART_puts(s);
 80012e8:	69b8      	ldr	r0, [r7, #24]
 80012ea:	f001 fc11 	bl	8002b10 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 80012ee:	4876      	ldr	r0, [pc, #472]	@ (80014c8 <UART_menu+0x2c8>)
 80012f0:	f001 fc0e 	bl	8002b10 <UART_puts>
				  break;
 80012f4:	e0df      	b.n	80014b6 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 80012f6:	4b75      	ldr	r3, [pc, #468]	@ (80014cc <UART_menu+0x2cc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <UART_menu+0x102>
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <UART_menu+0x104>
 8001302:	23ff      	movs	r3, #255	@ 0xff
 8001304:	4a71      	ldr	r2, [pc, #452]	@ (80014cc <UART_menu+0x2cc>)
 8001306:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001308:	4871      	ldr	r0, [pc, #452]	@ (80014d0 <UART_menu+0x2d0>)
 800130a:	f001 fc01 	bl	8002b10 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 800130e:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <UART_menu+0x2cc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2bff      	cmp	r3, #255	@ 0xff
 8001314:	d101      	bne.n	800131a <UART_menu+0x11a>
 8001316:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <UART_menu+0x2d4>)
 8001318:	e000      	b.n	800131c <UART_menu+0x11c>
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <UART_menu+0x2d8>)
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fbf7 	bl	8002b10 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 8001322:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <UART_menu+0x2cc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80c0 	bne.w	80014ac <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 800132c:	f000 f944 	bl	80015b8 <DisplayMenu>
				  break;
 8001330:	e0bc      	b.n	80014ac <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 8001332:	4b66      	ldr	r3, [pc, #408]	@ (80014cc <UART_menu+0x2cc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f083 0301 	eor.w	r3, r3, #1
 800133a:	4a64      	ldr	r2, [pc, #400]	@ (80014cc <UART_menu+0x2cc>)
 800133c:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 800133e:	4867      	ldr	r0, [pc, #412]	@ (80014dc <UART_menu+0x2dc>)
 8001340:	f001 fbe6 	bl	8002b10 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001344:	4b61      	ldr	r3, [pc, #388]	@ (80014cc <UART_menu+0x2cc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <UART_menu+0x154>
 8001350:	4b60      	ldr	r3, [pc, #384]	@ (80014d4 <UART_menu+0x2d4>)
 8001352:	e000      	b.n	8001356 <UART_menu+0x156>
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <UART_menu+0x2d8>)
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fbda 	bl	8002b10 <UART_puts>
				  break;
 800135c:	e0ab      	b.n	80014b6 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 800135e:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <UART_menu+0x2cc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f083 0302 	eor.w	r3, r3, #2
 8001366:	4a59      	ldr	r2, [pc, #356]	@ (80014cc <UART_menu+0x2cc>)
 8001368:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 800136a:	485d      	ldr	r0, [pc, #372]	@ (80014e0 <UART_menu+0x2e0>)
 800136c:	f001 fbd0 	bl	8002b10 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001370:	4b56      	ldr	r3, [pc, #344]	@ (80014cc <UART_menu+0x2cc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <UART_menu+0x180>
 800137c:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <UART_menu+0x2d4>)
 800137e:	e000      	b.n	8001382 <UART_menu+0x182>
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <UART_menu+0x2d8>)
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fbc4 	bl	8002b10 <UART_puts>
				  break;
 8001388:	e095      	b.n	80014b6 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 800138a:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <UART_menu+0x2cc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f083 0304 	eor.w	r3, r3, #4
 8001392:	4a4e      	ldr	r2, [pc, #312]	@ (80014cc <UART_menu+0x2cc>)
 8001394:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001396:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <UART_menu+0x2e4>)
 8001398:	f001 fbba 	bl	8002b10 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800139c:	4b4b      	ldr	r3, [pc, #300]	@ (80014cc <UART_menu+0x2cc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <UART_menu+0x1ac>
 80013a8:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <UART_menu+0x2d4>)
 80013aa:	e000      	b.n	80013ae <UART_menu+0x1ae>
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <UART_menu+0x2d8>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fbae 	bl	8002b10 <UART_puts>
				  break;
 80013b4:	e07f      	b.n	80014b6 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 80013b6:	4b45      	ldr	r3, [pc, #276]	@ (80014cc <UART_menu+0x2cc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f083 0308 	eor.w	r3, r3, #8
 80013be:	4a43      	ldr	r2, [pc, #268]	@ (80014cc <UART_menu+0x2cc>)
 80013c0:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 80013c2:	4849      	ldr	r0, [pc, #292]	@ (80014e8 <UART_menu+0x2e8>)
 80013c4:	f001 fba4 	bl	8002b10 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013c8:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <UART_menu+0x2cc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <UART_menu+0x1d8>
 80013d4:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <UART_menu+0x2d4>)
 80013d6:	e000      	b.n	80013da <UART_menu+0x1da>
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <UART_menu+0x2d8>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fb98 	bl	8002b10 <UART_puts>
				  break;
 80013e0:	e069      	b.n	80014b6 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 80013e2:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <UART_menu+0x2cc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f083 0310 	eor.w	r3, r3, #16
 80013ea:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <UART_menu+0x2cc>)
 80013ec:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 80013ee:	483f      	ldr	r0, [pc, #252]	@ (80014ec <UART_menu+0x2ec>)
 80013f0:	f001 fb8e 	bl	8002b10 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <UART_menu+0x2cc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <UART_menu+0x204>
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <UART_menu+0x2d4>)
 8001402:	e000      	b.n	8001406 <UART_menu+0x206>
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <UART_menu+0x2d8>)
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fb82 	bl	8002b10 <UART_puts>
				  break;
 800140c:	e053      	b.n	80014b6 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3302      	adds	r3, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f00f fa8a 	bl	801092c <atoi>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <UART_menu+0x2f0>)
 800141e:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8001420:	4834      	ldr	r0, [pc, #208]	@ (80014f4 <UART_menu+0x2f4>)
 8001422:	f001 fb75 	bl	8002b10 <UART_puts>
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <UART_menu+0x2f0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fb8c 	bl	8002b48 <UART_putint>
				  break;
 8001430:	e041      	b.n	80014b6 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8001432:	f000 f8c1 	bl	80015b8 <DisplayMenu>
				  break;
 8001436:	e03e      	b.n	80014b6 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8001438:	f000 fa28 	bl	800188c <DisplayTaskData>
				  break;
 800143c:	e03b      	b.n	80014b6 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 800143e:	69f9      	ldr	r1, [r7, #28]
 8001440:	69b8      	ldr	r0, [r7, #24]
 8001442:	f010 ff6d 	bl	8012320 <strtok>
 8001446:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001448:	69f9      	ldr	r1, [r7, #28]
 800144a:	2000      	movs	r0, #0
 800144c:	f010 ff68 	bl	8012320 <strtok>
 8001450:	61b8      	str	r0, [r7, #24]
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f00f fa6a 	bl	801092c <atoi>
 8001458:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 800145a:	69f9      	ldr	r1, [r7, #28]
 800145c:	2000      	movs	r0, #0
 800145e:	f010 ff5f 	bl	8012320 <strtok>
 8001462:	61b8      	str	r0, [r7, #24]
 8001464:	69b8      	ldr	r0, [r7, #24]
 8001466:	f00f fa61 	bl	801092c <atoi>
 800146a:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01e      	beq.n	80014b0 <UART_menu+0x2b0>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f000 f982 	bl	8001784 <SetTaskPriority>
				  break;
 8001480:	e016      	b.n	80014b0 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001482:	69f9      	ldr	r1, [r7, #28]
 8001484:	69b8      	ldr	r0, [r7, #24]
 8001486:	f010 ff4b 	bl	8012320 <strtok>
 800148a:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 800148c:	69f9      	ldr	r1, [r7, #28]
 800148e:	2000      	movs	r0, #0
 8001490:	f010 ff46 	bl	8012320 <strtok>
 8001494:	61b8      	str	r0, [r7, #24]
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f00f fa48 	bl	801092c <atoi>
 800149c:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <UART_menu+0x2b4>
					  StartStopTask(val1);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f000 f9a9 	bl	80017fc <StartStopTask>
				  break;
 80014aa:	e003      	b.n	80014b4 <UART_menu+0x2b4>
				  break;
 80014ac:	bf00      	nop
 80014ae:	e6b3      	b.n	8001218 <UART_menu+0x18>
				  break;
 80014b0:	bf00      	nop
 80014b2:	e6b1      	b.n	8001218 <UART_menu+0x18>
				  break;
 80014b4:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80014b6:	e6af      	b.n	8001218 <UART_menu+0x18>
 80014b8:	08014e94 	.word	0x08014e94
 80014bc:	0801572c 	.word	0x0801572c
 80014c0:	08014e98 	.word	0x08014e98
 80014c4:	08015818 	.word	0x08015818
 80014c8:	08014ea4 	.word	0x08014ea4
 80014cc:	20000444 	.word	0x20000444
 80014d0:	08014eb8 	.word	0x08014eb8
 80014d4:	08014ed0 	.word	0x08014ed0
 80014d8:	08014ed8 	.word	0x08014ed8
 80014dc:	08014ee0 	.word	0x08014ee0
 80014e0:	08014ef4 	.word	0x08014ef4
 80014e4:	08014f08 	.word	0x08014f08
 80014e8:	08014f1c 	.word	0x08014f1c
 80014ec:	08014f30 	.word	0x08014f30
 80014f0:	20000218 	.word	0x20000218
 80014f4:	08014f40 	.word	0x08014f40

080014f8 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	@ 0x70
 80014fc:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <DisplayVersion+0x98>)
 8001500:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (tasks.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8001502:	f001 f8ed 	bl	80026e0 <LCD_clear>
	LCD_puts(app_nameLCD);
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <DisplayVersion+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fa0e 	bl	800292c <LCD_puts>

	UART_puts(app_name);
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <DisplayVersion+0xa0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fafb 	bl	8002b10 <UART_puts>
	UART_puts(functionality);
 800151a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800151c:	f001 faf8 	bl	8002b10 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8001520:	f107 0108 	add.w	r1, r7, #8
 8001524:	463b      	mov	r3, r7
 8001526:	2264      	movs	r2, #100	@ 0x64
 8001528:	4618      	mov	r0, r3
 800152a:	f00a fc93 	bl	800be54 <osKernelGetInfo>
	UART_puts("\t-----");
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <DisplayVersion+0xa4>)
 8001530:	f001 faee 	bl	8002b10 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8001534:	481a      	ldr	r0, [pc, #104]	@ (80015a0 <DisplayVersion+0xa8>)
 8001536:	f001 faeb 	bl	8002b10 <UART_puts>
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fae6 	bl	8002b10 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001544:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <DisplayVersion+0xac>)
 8001546:	f001 fae3 	bl	8002b10 <UART_puts>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fafb 	bl	8002b48 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <DisplayVersion+0xb0>)
 8001554:	f001 fadc 	bl	8002b10 <UART_puts>
 8001558:	f00a fcd4 	bl	800bf04 <osKernelGetSysTimerFreq>
 800155c:	4603      	mov	r3, r0
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <DisplayVersion+0xb4>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	4618      	mov	r0, r3
 8001568:	f001 faee 	bl	8002b48 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <DisplayVersion+0xb8>)
 800156e:	f001 facf 	bl	8002b10 <UART_puts>
 8001572:	f00a fcbd 	bl	800bef0 <osKernelGetTickFreq>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fae5 	bl	8002b48 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <DisplayVersion+0xbc>)
 8001580:	f001 fac6 	bl	8002b10 <UART_puts>

    DisplayMenu();
 8001584:	f000 f818 	bl	80015b8 <DisplayMenu>
}
 8001588:	bf00      	nop
 800158a:	3770      	adds	r7, #112	@ 0x70
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	08015014 	.word	0x08015014
 8001594:	20000004 	.word	0x20000004
 8001598:	20000000 	.word	0x20000000
 800159c:	08015184 	.word	0x08015184
 80015a0:	0801518c 	.word	0x0801518c
 80015a4:	08015190 	.word	0x08015190
 80015a8:	080151a0 	.word	0x080151a0
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	080151bc 	.word	0x080151bc
 80015b4:	080151d4 	.word	0x080151d4

080015b8 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	char *menu =
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <DisplayMenu+0x18>)
 80015c0:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. p,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f001 faa4 	bl	8002b10 <UART_puts>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	080151e0 	.word	0x080151e0

080015d4 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f001 f9a5 	bl	800292c <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fa94 	bl	8002b10 <UART_puts>
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <error_HaltOS+0x2c>)
 80015ea:	f001 fa91 	bl	8002b10 <UART_puts>

	BUZZER_put(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f2:	f000 ff33 	bl	800245c <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 80015f6:	f00c fd0b 	bl	800e010 <vTaskSuspendAll>

	while (TRUE)
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <error_HaltOS+0x26>
 80015fe:	bf00      	nop
 8001600:	08015420 	.word	0x08015420

08001604 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 800160a:	2001      	movs	r0, #1
 800160c:	f00b fa67 	bl	800cade <xQueueCreateMutex>
 8001610:	4603      	mov	r3, r0
 8001612:	4a30      	ldr	r2, [pc, #192]	@ (80016d4 <CreateHandles+0xd0>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b2f      	ldr	r3, [pc, #188]	@ (80016d4 <CreateHandles+0xd0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 800161e:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <CreateHandles+0xd4>)
 8001620:	f7ff ffd8 	bl	80015d4 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	200a      	movs	r0, #10
 800162a:	f00b f9e0 	bl	800c9ee <xQueueGenericCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a2a      	ldr	r2, [pc, #168]	@ (80016dc <CreateHandles+0xd8>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <CreateHandles+0xd8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 800163c:	4828      	ldr	r0, [pc, #160]	@ (80016e0 <CreateHandles+0xdc>)
 800163e:	f7ff ffc9 	bl	80015d4 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8001642:	2200      	movs	r2, #0
 8001644:	2101      	movs	r1, #1
 8001646:	2053      	movs	r0, #83	@ 0x53
 8001648:	f00b f9d1 	bl	800c9ee <xQueueGenericCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a25      	ldr	r2, [pc, #148]	@ (80016e4 <CreateHandles+0xe0>)
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <CreateHandles+0xe0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <CreateHandles+0xe4>)
 800165c:	f7ff ffba 	bl	80015d4 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8001660:	f00a fe6e 	bl	800c340 <xEventGroupCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a21      	ldr	r2, [pc, #132]	@ (80016ec <CreateHandles+0xe8>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <CreateHandles+0xe8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8001672:	481f      	ldr	r0, [pc, #124]	@ (80016f0 <CreateHandles+0xec>)
 8001674:	f7ff ffae 	bl	80015d4 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <CreateHandles+0xf0>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001684:	481c      	ldr	r0, [pc, #112]	@ (80016f8 <CreateHandles+0xf4>)
 8001686:	f00d fe7d 	bl	800f384 <xTimerCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <CreateHandles+0xf8>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <CreateHandles+0xf8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001698:	4819      	ldr	r0, [pc, #100]	@ (8001700 <CreateHandles+0xfc>)
 800169a:	f7ff ff9b 	bl	80015d4 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 800169e:	4819      	ldr	r0, [pc, #100]	@ (8001704 <CreateHandles+0x100>)
 80016a0:	f001 fa36 	bl	8002b10 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 80016a4:	4818      	ldr	r0, [pc, #96]	@ (8001708 <CreateHandles+0x104>)
 80016a6:	f001 fa33 	bl	8002b10 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 80016aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ae:	f001 fa4b 	bl	8002b48 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <CreateHandles+0xf8>)
 80016b4:	681c      	ldr	r4, [r3, #0]
 80016b6:	f00c fd57 	bl	800e168 <xTaskGetTickCount>
 80016ba:	4602      	mov	r2, r0
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2101      	movs	r1, #1
 80016c4:	4620      	mov	r0, r4
 80016c6:	f00d febb 	bl	800f440 <xTimerGenericCommand>
}
 80016ca:	bf00      	nop
 80016cc:	3704      	adds	r7, #4
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000450 	.word	0x20000450
 80016d8:	08015438 	.word	0x08015438
 80016dc:	20000448 	.word	0x20000448
 80016e0:	08015448 	.word	0x08015448
 80016e4:	2000044c 	.word	0x2000044c
 80016e8:	08015458 	.word	0x08015458
 80016ec:	20000454 	.word	0x20000454
 80016f0:	08015468 	.word	0x08015468
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	0801547c 	.word	0x0801547c
 80016fc:	20000458 	.word	0x20000458
 8001700:	08015484 	.word	0x08015484
 8001704:	08015494 	.word	0x08015494
 8001708:	080154b8 	.word	0x080154b8

0800170c <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <Timer1_Handler+0x14>)
 8001716:	f002 fd32 	bl	800417e <HAL_GPIO_TogglePin>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020c00 	.word	0x40020c00

08001724 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <CreateTasks+0x58>)
 800172c:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800172e:	f00c fc6f 	bl	800e010 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001732:	e016      	b.n	8001762 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <CreateTasks+0x5c>)
 8001736:	f001 f9eb 	bl	8002b10 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f9e6 	bl	8002b10 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	461a      	mov	r2, r3
 8001752:	f00a fbe3 	bl	800bf1c <osThreadNew>
 8001756:	4602      	mov	r2, r0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3330      	adds	r3, #48	@ 0x30
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800176a:	f00c fc5f 	bl	800e02c <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800176e:	f000 f88d 	bl	800188c <DisplayTaskData>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	080154cc 	.word	0x080154cc

08001784 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <SetTaskPriority+0x6c>)
 8001790:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001792:	2301      	movs	r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	e023      	b.n	80017e0 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d119      	bne.n	80017d4 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00c fa18 	bl	800dbe4 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 80017b4:	480f      	ldr	r0, [pc, #60]	@ (80017f4 <SetTaskPriority+0x70>)
 80017b6:	f001 f9ab 	bl	8002b10 <UART_puts>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f9a6 	bl	8002b10 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <SetTaskPriority+0x74>)
 80017c6:	f001 f9a3 	bl	8002b10 <UART_puts>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 f9bb 	bl	8002b48 <UART_putint>
			return;
 80017d2:	e009      	b.n	80017e8 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3330      	adds	r3, #48	@ 0x30
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1d7      	bne.n	8001798 <SetTaskPriority+0x14>
		}
}
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	080154d8 	.word	0x080154d8
 80017f8:	080154e4 	.word	0x080154e4

080017fc <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	@ 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <StartStopTask+0x80>)
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
 800180c:	e02e      	b.n	800186c <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001812:	429a      	cmp	r2, r3
 8001814:	d124      	bne.n	8001860 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001818:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800181a:	f107 010c 	add.w	r1, r7, #12
 800181e:	2305      	movs	r3, #5
 8001820:	2201      	movs	r2, #1
 8001822:	f00d f909 	bl	800ea38 <vTaskGetInfo>
			UART_puts("\r\n");
 8001826:	4816      	ldr	r0, [pc, #88]	@ (8001880 <StartStopTask+0x84>)
 8001828:	f001 f972 	bl	8002b10 <UART_puts>
			UART_puts(ptd->attr.name);
 800182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f96d 	bl	8002b10 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001836:	7e3b      	ldrb	r3, [r7, #24]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d108      	bne.n	800184e <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 800183c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	4618      	mov	r0, r3
 8001842:	f00c fb15 	bl	800de70 <vTaskResume>
				UART_puts(" resumed.");
 8001846:	480f      	ldr	r0, [pc, #60]	@ (8001884 <StartStopTask+0x88>)
 8001848:	f001 f962 	bl	8002b10 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 800184c:	e012      	b.n	8001874 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 800184e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	4618      	mov	r0, r3
 8001854:	f00c fa64 	bl	800dd20 <vTaskSuspend>
				UART_puts(" suspended.");
 8001858:	480b      	ldr	r0, [pc, #44]	@ (8001888 <StartStopTask+0x8c>)
 800185a:	f001 f959 	bl	8002b10 <UART_puts>
 800185e:	e009      	b.n	8001874 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	3330      	adds	r3, #48	@ 0x30
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
 8001866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001868:	3301      	adds	r3, #1
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1cc      	bne.n	800180e <StartStopTask+0x12>
		}
}
 8001874:	3738      	adds	r7, #56	@ 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008
 8001880:	080154f8 	.word	0x080154f8
 8001884:	080154fc 	.word	0x080154fc
 8001888:	08015508 	.word	0x08015508

0800188c <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	@ 0x38
 8001890:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <DisplayTaskData+0xcc>)
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  freespace;
	TaskStatus_t xTaskDetails;
	unsigned int used;
	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001896:	2301      	movs	r3, #1
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
 800189a:	e052      	b.n	8001942 <DisplayTaskData+0xb6>
	{
		freespace = uxTaskGetStackHighWaterMark(ptd->hTask) * 4; 	// amount of free bytes
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00d f94b 	bl	800eb3c <uxTaskGetStackHighWaterMark>
 80018a6:	4603      	mov	r3, r0
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		used = 100 - (freespace * 100) / ptd->attr.stack_size; 		// in percentage
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	2264      	movs	r2, #100	@ 0x64
 80018b0:	fb03 f202 	mul.w	r2, r3, r2
 80018b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80018c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80018c6:	1d39      	adds	r1, r7, #4
 80018c8:	2305      	movs	r3, #5
 80018ca:	2201      	movs	r2, #1
 80018cc:	f00d f8b4 	bl	800ea38 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 80018d0:	4822      	ldr	r0, [pc, #136]	@ (800195c <DisplayTaskData+0xd0>)
 80018d2:	f001 f91d 	bl	8002b10 <UART_puts>
 80018d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018d8:	f001 f936 	bl	8002b48 <UART_putint>
 80018dc:	4820      	ldr	r0, [pc, #128]	@ (8001960 <DisplayTaskData+0xd4>)
 80018de:	f001 f917 	bl	8002b10 <UART_puts>
		UART_puts(ptd->attr.name);
 80018e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f912 	bl	8002b10 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 80018ec:	481d      	ldr	r0, [pc, #116]	@ (8001964 <DisplayTaskData+0xd8>)
 80018ee:	f001 f90f 	bl	8002b10 <UART_puts>
 80018f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f926 	bl	8002b48 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size);
 80018fc:	481a      	ldr	r0, [pc, #104]	@ (8001968 <DisplayTaskData+0xdc>)
 80018fe:	f001 f907 	bl	8002b10 <UART_puts>
 8001902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f91e 	bl	8002b48 <UART_putint>
		UART_puts("\t used: ");      UART_putint(used); UART_puts("%");
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <DisplayTaskData+0xe0>)
 800190e:	f001 f8ff 	bl	8002b10 <UART_puts>
 8001912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001914:	f001 f918 	bl	8002b48 <UART_putint>
 8001918:	4815      	ldr	r0, [pc, #84]	@ (8001970 <DisplayTaskData+0xe4>)
 800191a:	f001 f8f9 	bl	8002b10 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <DisplayTaskData+0xe8>)
 8001920:	f001 f8f6 	bl	8002b10 <UART_puts>
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d101      	bne.n	800192e <DisplayTaskData+0xa2>
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <DisplayTaskData+0xec>)
 800192c:	e000      	b.n	8001930 <DisplayTaskData+0xa4>
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <DisplayTaskData+0xf0>)
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f8ed 	bl	8002b10 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001938:	3330      	adds	r3, #48	@ 0x30
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
 800193c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193e:	3301      	adds	r3, #1
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
 8001942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1a8      	bne.n	800189c <DisplayTaskData+0x10>
	}
	UART_puts("\r\n");
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <DisplayTaskData+0xf4>)
 800194c:	f001 f8e0 	bl	8002b10 <UART_puts>
}
 8001950:	bf00      	nop
 8001952:	3738      	adds	r7, #56	@ 0x38
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000008 	.word	0x20000008
 800195c:	08015514 	.word	0x08015514
 8001960:	0801551c 	.word	0x0801551c
 8001964:	08015520 	.word	0x08015520
 8001968:	08015530 	.word	0x08015530
 800196c:	08015540 	.word	0x08015540
 8001970:	0801554c 	.word	0x0801554c
 8001974:	08015550 	.word	0x08015550
 8001978:	0801555c 	.word	0x0801555c
 800197c:	08015568 	.word	0x08015568
 8001980:	080154f8 	.word	0x080154f8

08001984 <gps_get_GNRMC>:

GNRMC gnrmc; // global struct for GNRMC-messages
SemaphoreHandle_t gps_access_semaphore;

void gps_get_GNRMC(GNRMC *latestgnrmc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <gps_get_GNRMC+0x3c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	4618      	mov	r0, r3
 8001996:	f00b fb3d 	bl	800d014 <xQueueSemaphoreTake>

	memcpy(latestgnrmc, &gnrmc, sizeof(GNRMC));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <gps_get_GNRMC+0x40>)
 800199e:	4618      	mov	r0, r3
 80019a0:	4611      	mov	r1, r2
 80019a2:	2347      	movs	r3, #71	@ 0x47
 80019a4:	461a      	mov	r2, r3
 80019a6:	f010 fdfc 	bl	80125a2 <memcpy>

	xSemaphoreGive(gps_access_semaphore);
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <gps_get_GNRMC+0x3c>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	f00b f8ac 	bl	800cb10 <xQueueGenericSend>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200004a4 	.word	0x200004a4
 80019c4:	2000045c 	.word	0x2000045c

080019c8 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 80019d0:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <fill_GNRMC+0x11c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	4618      	mov	r0, r3
 80019da:	f00b fb1b 	bl	800d014 <xQueueSemaphoreTake>
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <fill_GNRMC+0x120>)
 80019e0:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 80019e2:	2247      	movs	r2, #71	@ 0x47
 80019e4:	2100      	movs	r1, #0
 80019e6:	4841      	ldr	r0, [pc, #260]	@ (8001aec <fill_GNRMC+0x124>)
 80019e8:	f010 fc73 	bl	80122d2 <memset>

	s = strtok(message, tok); // 0. header;
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f010 fc96 	bl	8012320 <strtok>
 80019f4:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	483c      	ldr	r0, [pc, #240]	@ (8001aec <fill_GNRMC+0x124>)
 80019fa:	f010 fdca 	bl	8012592 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	2000      	movs	r0, #0
 8001a02:	f010 fc8d 	bl	8012320 <strtok>
 8001a06:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f010 fc88 	bl	8012320 <strtok>
 8001a10:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <fill_GNRMC+0x124>)
 8001a18:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f010 fc7f 	bl	8012320 <strtok>
 8001a22:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	4832      	ldr	r0, [pc, #200]	@ (8001af0 <fill_GNRMC+0x128>)
 8001a28:	f010 fdb3 	bl	8012592 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f010 fc76 	bl	8012320 <strtok>
 8001a34:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f010 fc71 	bl	8012320 <strtok>
 8001a3e:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	482c      	ldr	r0, [pc, #176]	@ (8001af4 <fill_GNRMC+0x12c>)
 8001a44:	f010 fda5 	bl	8012592 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f010 fc68 	bl	8012320 <strtok>
 8001a50:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	2000      	movs	r0, #0
 8001a56:	f010 fc63 	bl	8012320 <strtok>
 8001a5a:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4826      	ldr	r0, [pc, #152]	@ (8001af8 <fill_GNRMC+0x130>)
 8001a60:	f010 fd97 	bl	8012592 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	2000      	movs	r0, #0
 8001a68:	f010 fc5a 	bl	8012320 <strtok>
 8001a6c:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	4822      	ldr	r0, [pc, #136]	@ (8001afc <fill_GNRMC+0x134>)
 8001a72:	f010 fd8e 	bl	8012592 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <fill_GNRMC+0x138>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d025      	beq.n	8001ace <fill_GNRMC+0x106>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001a82:	4820      	ldr	r0, [pc, #128]	@ (8001b04 <fill_GNRMC+0x13c>)
 8001a84:	f001 f844 	bl	8002b10 <UART_puts>
 8001a88:	4818      	ldr	r0, [pc, #96]	@ (8001aec <fill_GNRMC+0x124>)
 8001a8a:	f001 f841 	bl	8002b10 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001a8e:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <fill_GNRMC+0x140>)
 8001a90:	f001 f83e 	bl	8002b10 <UART_puts>
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <fill_GNRMC+0x124>)
 8001a96:	7c5b      	ldrb	r3, [r3, #17]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 f827 	bl	8002aec <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001a9e:	481b      	ldr	r0, [pc, #108]	@ (8001b0c <fill_GNRMC+0x144>)
 8001aa0:	f001 f836 	bl	8002b10 <UART_puts>
 8001aa4:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <fill_GNRMC+0x128>)
 8001aa6:	f001 f833 	bl	8002b10 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001aaa:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <fill_GNRMC+0x148>)
 8001aac:	f001 f830 	bl	8002b10 <UART_puts>
 8001ab0:	4810      	ldr	r0, [pc, #64]	@ (8001af4 <fill_GNRMC+0x12c>)
 8001ab2:	f001 f82d 	bl	8002b10 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001ab6:	4817      	ldr	r0, [pc, #92]	@ (8001b14 <fill_GNRMC+0x14c>)
 8001ab8:	f001 f82a 	bl	8002b10 <UART_puts>
 8001abc:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <fill_GNRMC+0x130>)
 8001abe:	f001 f827 	bl	8002b10 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <fill_GNRMC+0x150>)
 8001ac4:	f001 f824 	bl	8002b10 <UART_puts>
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <fill_GNRMC+0x134>)
 8001aca:	f001 f821 	bl	8002b10 <UART_puts>
	}

	xSemaphoreGive(gps_access_semaphore);
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <fill_GNRMC+0x11c>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f00b f81a 	bl	800cb10 <xQueueGenericSend>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200004a4 	.word	0x200004a4
 8001ae8:	08015570 	.word	0x08015570
 8001aec:	2000045c 	.word	0x2000045c
 8001af0:	2000046e 	.word	0x2000046e
 8001af4:	20000479 	.word	0x20000479
 8001af8:	20000484 	.word	0x20000484
 8001afc:	2000048a 	.word	0x2000048a
 8001b00:	20000444 	.word	0x20000444
 8001b04:	08015574 	.word	0x08015574
 8001b08:	08015584 	.word	0x08015584
 8001b0c:	08015594 	.word	0x08015594
 8001b10:	080155a4 	.word	0x080155a4
 8001b14:	080155b4 	.word	0x080155b4
 8001b18:	080155c4 	.word	0x080155c4

08001b1c <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	gps_access_semaphore=xSemaphoreCreateMutex();
 8001b24:	2001      	movs	r0, #1
 8001b26:	f00a ffda 	bl	800cade <xQueueCreateMutex>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a67      	ldr	r2, [pc, #412]	@ (8001ccc <GPS_getNMEA+0x1b0>)
 8001b2e:	6013      	str	r3, [r2, #0]

    char  Q_buff[GPS_MAXLEN];   // buffer for chars in queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001b42:	4863      	ldr	r0, [pc, #396]	@ (8001cd0 <GPS_getNMEA+0x1b4>)
 8001b44:	f000 ffe4 	bl	8002b10 <UART_puts>
 8001b48:	4862      	ldr	r0, [pc, #392]	@ (8001cd4 <GPS_getNMEA+0x1b8>)
 8001b4a:	f000 ffe1 	bl	8002b10 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001b4e:	4b62      	ldr	r3, [pc, #392]	@ (8001cd8 <GPS_getNMEA+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00b f978 	bl	800ce50 <xQueueReceive>

		//UART_putchar(*Q_buff);  // echo, for testing

		if (*Q_buff == '$') // gotcha, new datastring started
 8001b60:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001b64:	2b24      	cmp	r3, #36	@ 0x24
 8001b66:	d10c      	bne.n	8001b82 <GPS_getNMEA+0x66>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	2253      	movs	r2, #83	@ 0x53
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 fbae 	bl	80122d2 <memset>
			pos = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			new_msg = TRUE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 809d 	beq.w	8001cc6 <GPS_getNMEA+0x1aa>
			continue;

		MSG_buff[pos] = *Q_buff; // copy char read from Q into the msg-buf
 8001b8c:	f897 105c 	ldrb.w	r1, [r7, #92]	@ 0x5c
 8001b90:	f107 0208 	add.w	r2, r7, #8
 8001b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d136      	bne.n	8001c14 <GPS_getNMEA+0xf8>
		{
			msg_type = 0; // reset
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	4949      	ldr	r1, [pc, #292]	@ (8001cdc <GPS_getNMEA+0x1c0>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f010 fba0 	bl	80122fc <strncmp>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <GPS_getNMEA+0xae>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bc8:	e01c      	b.n	8001c04 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	4943      	ldr	r1, [pc, #268]	@ (8001ce0 <GPS_getNMEA+0x1c4>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f010 fb91 	bl	80122fc <strncmp>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <GPS_getNMEA+0xcc>
 8001be0:	2301      	movs	r3, #1
 8001be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001be6:	e00d      	b.n	8001c04 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	3301      	adds	r3, #1
 8001bee:	2205      	movs	r2, #5
 8001bf0:	493c      	ldr	r1, [pc, #240]	@ (8001ce4 <GPS_getNMEA+0x1c8>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f010 fb82 	bl	80122fc <strncmp>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <GPS_getNMEA+0xe8>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			if (!msg_type) // not an interesting message type
 8001c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <GPS_getNMEA+0xf8>
			{
				new_msg = FALSE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				continue;
 8001c12:	e059      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c18:	2b51      	cmp	r3, #81	@ 0x51
 8001c1a:	dd03      	ble.n	8001c24 <GPS_getNMEA+0x108>
		{
			new_msg = FALSE; // ignore it
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001c22:	e051      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001c24:	f107 0208 	add.w	r2, r7, #8
 8001c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0d      	cmp	r3, #13
 8001c32:	d142      	bne.n	8001cba <GPS_getNMEA+0x19e>
		{
			MSG_buff[pos] = '\0';          // close string
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f89a 	bl	8001d80 <checksum_valid>
 8001c4c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <GPS_getNMEA+0x1cc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d011      	beq.n	8001c80 <GPS_getNMEA+0x164>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001c5c:	4823      	ldr	r0, [pc, #140]	@ (8001cec <GPS_getNMEA+0x1d0>)
 8001c5e:	f000 ff57 	bl	8002b10 <UART_puts>
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 ff52 	bl	8002b10 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <GPS_getNMEA+0x15c>
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <GPS_getNMEA+0x1d4>)
 8001c76:	e000      	b.n	8001c7a <GPS_getNMEA+0x15e>
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <GPS_getNMEA+0x1d8>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 ff48 	bl	8002b10 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <GPS_getNMEA+0x196>
			{
				switch(msg_type) // extract data from msg into right struct
 8001c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <GPS_getNMEA+0x188>
 8001c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0b      	blt.n	8001cb0 <GPS_getNMEA+0x194>
 8001c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d806      	bhi.n	8001cb0 <GPS_getNMEA+0x194>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001ca2:	e006      	b.n	8001cb2 <GPS_getNMEA+0x196>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe8d 	bl	80019c8 <fill_GNRMC>
						     break;
 8001cae:	e000      	b.n	8001cb2 <GPS_getNMEA+0x196>
				default:     break;
 8001cb0:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001cb8:	e006      	b.n	8001cc8 <GPS_getNMEA+0x1ac>
		}
		pos++; // proceed reading next char from the queue
 8001cba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001cc4:	e743      	b.n	8001b4e <GPS_getNMEA+0x32>
			continue;
 8001cc6:	bf00      	nop
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001cc8:	e741      	b.n	8001b4e <GPS_getNMEA+0x32>
 8001cca:	bf00      	nop
 8001ccc:	200004a4 	.word	0x200004a4
 8001cd0:	08015738 	.word	0x08015738
 8001cd4:	080155d4 	.word	0x080155d4
 8001cd8:	2000044c 	.word	0x2000044c
 8001cdc:	080155e0 	.word	0x080155e0
 8001ce0:	080155e8 	.word	0x080155e8
 8001ce4:	080155f0 	.word	0x080155f0
 8001ce8:	20000444 	.word	0x20000444
 8001cec:	080155f8 	.word	0x080155f8
 8001cf0:	08015608 	.word	0x08015608
 8001cf4:	08015614 	.word	0x08015614

08001cf8 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f813 	bl	8001d30 <hexchar2int>
 8001d0a:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3301      	adds	r3, #1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f809 	bl	8001d30 <hexchar2int>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

	return value;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <hexchar2int>:


int hexchar2int(char c)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d3e:	d905      	bls.n	8001d4c <hexchar2int+0x1c>
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b39      	cmp	r3, #57	@ 0x39
 8001d44:	d802      	bhi.n	8001d4c <hexchar2int+0x1c>
        return (c - '0');
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	3b30      	subs	r3, #48	@ 0x30
 8001d4a:	e013      	b.n	8001d74 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b40      	cmp	r3, #64	@ 0x40
 8001d50:	d905      	bls.n	8001d5e <hexchar2int+0x2e>
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b46      	cmp	r3, #70	@ 0x46
 8001d56:	d802      	bhi.n	8001d5e <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	3b37      	subs	r3, #55	@ 0x37
 8001d5c:	e00a      	b.n	8001d74 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b60      	cmp	r3, #96	@ 0x60
 8001d62:	d905      	bls.n	8001d70 <hexchar2int+0x40>
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2b66      	cmp	r3, #102	@ 0x66
 8001d68:	d802      	bhi.n	8001d70 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	3b57      	subs	r3, #87	@ 0x57
 8001d6e:	e001      	b.n	8001d74 <hexchar2int+0x44>
    return (-1);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001d8c:	212a      	movs	r1, #42	@ 0x2a
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f010 faa7 	bl	80122e2 <strchr>
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	4053      	eors	r3, r2
 8001db4:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fa57 	bl	8000270 <strlen>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8ee      	bhi.n	8001da8 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff92 	bl	8001cf8 <hex2int>
 8001dd4:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d101      	bne.n	8001de2 <checksum_valid+0x62>
			return (1);
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <checksum_valid+0x64>
	}

	return (0);
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001df4:	4820      	ldr	r0, [pc, #128]	@ (8001e78 <LED_Task1+0x8c>)
 8001df6:	f000 fe8b 	bl	8002b10 <UART_puts>
 8001dfa:	4820      	ldr	r0, [pc, #128]	@ (8001e7c <LED_Task1+0x90>)
 8001dfc:	f000 fe88 	bl	8002b10 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <LED_Task1+0x94>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00b f903 	bl	800d014 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e01c      	b.n	8001e52 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fe2b 	bl	8002a78 <LED_put>
           	osDelay(os_delay);
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <LED_Task1+0x98>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00a f90a 	bl	800c040 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001e2c:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <LED_Task1+0x9c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8001e38:	4814      	ldr	r0, [pc, #80]	@ (8001e8c <LED_Task1+0xa0>)
 8001e3a:	f000 fe69 	bl	8002b10 <UART_puts>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fe81 	bl	8002b48 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	105b      	asrs	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	dddf      	ble.n	8001e18 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <LED_Task1+0x94>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	f00a fe55 	bl	800cb10 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <LED_Task1+0xa4>)
 8001e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001e76:	e7c3      	b.n	8001e00 <LED_Task1+0x14>
 8001e78:	08015744 	.word	0x08015744
 8001e7c:	08015620 	.word	0x08015620
 8001e80:	20000450 	.word	0x20000450
 8001e84:	20000218 	.word	0x20000218
 8001e88:	20000444 	.word	0x20000444
 8001e8c:	0801562c 	.word	0x0801562c
 8001e90:	e000ed04 	.word	0xe000ed04

08001e94 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001e9c:	4820      	ldr	r0, [pc, #128]	@ (8001f20 <LED_Task2+0x8c>)
 8001e9e:	f000 fe37 	bl	8002b10 <UART_puts>
 8001ea2:	4820      	ldr	r0, [pc, #128]	@ (8001f24 <LED_Task2+0x90>)
 8001ea4:	f000 fe34 	bl	8002b10 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <LED_Task2+0x94>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00b f8af 	bl	800d014 <xQueueSemaphoreTake>
		leds = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e01c      	b.n	8001efa <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fdd7 	bl	8002a78 <LED_put>
          	osDelay(os_delay);
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <LED_Task2+0x98>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00a f8b6 	bl	800c040 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <LED_Task2+0x9c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001ee0:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <LED_Task2+0xa0>)
 8001ee2:	f000 fe15 	bl	8002b10 <UART_puts>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe2d 	bl	8002b48 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b07      	cmp	r3, #7
 8001efe:	dddf      	ble.n	8001ec0 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <LED_Task2+0x94>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f00a fe01 	bl	800cb10 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <LED_Task2+0xa4>)
 8001f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001f1e:	e7c3      	b.n	8001ea8 <LED_Task2+0x14>
 8001f20:	08015750 	.word	0x08015750
 8001f24:	08015620 	.word	0x08015620
 8001f28:	20000450 	.word	0x20000450
 8001f2c:	20000218 	.word	0x20000218
 8001f30:	20000444 	.word	0x20000444
 8001f34:	08015638 	.word	0x08015638
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8001f44:	4830      	ldr	r0, [pc, #192]	@ (8002008 <LED_Task3+0xcc>)
 8001f46:	f00c f98d 	bl	800e264 <xTaskGetHandle>
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8001f52:	482e      	ldr	r0, [pc, #184]	@ (800200c <LED_Task3+0xd0>)
 8001f54:	f7ff fb3e 	bl	80015d4 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001f58:	482d      	ldr	r0, [pc, #180]	@ (8002010 <LED_Task3+0xd4>)
 8001f5a:	f000 fdd9 	bl	8002b10 <UART_puts>
 8001f5e:	482d      	ldr	r0, [pc, #180]	@ (8002014 <LED_Task3+0xd8>)
 8001f60:	f000 fdd6 	bl	8002b10 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8001f64:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <LED_Task3+0xdc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00b f851 	bl	800d014 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e02d      	b.n	8001fd4 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <LED_Task3+0x48>
 8001f7e:	2318      	movs	r3, #24
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e00d      	b.n	8001fa0 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <LED_Task3+0x54>
 8001f8a:	2324      	movs	r3, #36	@ 0x24
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e007      	b.n	8001fa0 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d102      	bne.n	8001f9c <LED_Task3+0x60>
 8001f96:	2342      	movs	r3, #66	@ 0x42
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e001      	b.n	8001fa0 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8001f9c:	2381      	movs	r3, #129	@ 0x81
 8001f9e:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fd67 	bl	8002a78 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <LED_Task3+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00a f846 	bl	800c040 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <LED_Task3+0xe4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8001fc0:	4818      	ldr	r0, [pc, #96]	@ (8002024 <LED_Task3+0xe8>)
 8001fc2:	f000 fda5 	bl	8002b10 <UART_puts>
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fdbd 	bl	8002b48 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	ddce      	ble.n	8001f78 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <LED_Task3+0xdc>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f00a fd94 	bl	800cb10 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2202      	movs	r2, #2
 8001fec:	2100      	movs	r1, #0
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f00d f868 	bl	800f0c4 <xTaskGenericNotify>
		osDelay(200);
 8001ff4:	20c8      	movs	r0, #200	@ 0xc8
 8001ff6:	f00a f823 	bl	800c040 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 8001ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffe:	2001      	movs	r0, #1
 8002000:	f00c ffb4 	bl	800ef6c <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002004:	e7ae      	b.n	8001f64 <LED_Task3+0x28>
 8002006:	bf00      	nop
 8002008:	08015644 	.word	0x08015644
 800200c:	08015650 	.word	0x08015650
 8002010:	0801575c 	.word	0x0801575c
 8002014:	08015620 	.word	0x08015620
 8002018:	20000450 	.word	0x20000450
 800201c:	20000218 	.word	0x20000218
 8002020:	20000444 	.word	0x20000444
 8002024:	0801565c 	.word	0x0801565c

08002028 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002030:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <LED_Task4+0xcc>)
 8002032:	f00c f917 	bl	800e264 <xTaskGetHandle>
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 800203e:	482e      	ldr	r0, [pc, #184]	@ (80020f8 <LED_Task4+0xd0>)
 8002040:	f7ff fac8 	bl	80015d4 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002044:	482d      	ldr	r0, [pc, #180]	@ (80020fc <LED_Task4+0xd4>)
 8002046:	f000 fd63 	bl	8002b10 <UART_puts>
 800204a:	482d      	ldr	r0, [pc, #180]	@ (8002100 <LED_Task4+0xd8>)
 800204c:	f000 fd60 	bl	8002b10 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	2001      	movs	r0, #1
 8002056:	f00c ff89 	bl	800ef6c <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <LED_Task4+0xdc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 31ff 	mov.w	r1, #4294967295
 8002062:	4618      	mov	r0, r3
 8002064:	f00a ffd6 	bl	800d014 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e02d      	b.n	80020ca <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <LED_Task4+0x52>
 8002074:	2381      	movs	r3, #129	@ 0x81
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e00d      	b.n	8002096 <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <LED_Task4+0x5e>
 8002080:	2342      	movs	r3, #66	@ 0x42
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e007      	b.n	8002096 <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d102      	bne.n	8002092 <LED_Task4+0x6a>
 800208c:	2324      	movs	r3, #36	@ 0x24
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e001      	b.n	8002096 <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8002092:	2318      	movs	r3, #24
 8002094:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fcec 	bl	8002a78 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <LED_Task4+0xe0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f009 ffcb 	bl	800c040 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <LED_Task4+0xe4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80020b6:	4816      	ldr	r0, [pc, #88]	@ (8002110 <LED_Task4+0xe8>)
 80020b8:	f000 fd2a 	bl	8002b10 <UART_puts>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fd42 	bl	8002b48 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	ddce      	ble.n	800206e <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <LED_Task4+0xdc>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	f00a fd19 	bl	800cb10 <xQueueGenericSend>
		osDelay(200);
 80020de:	20c8      	movs	r0, #200	@ 0xc8
 80020e0:	f009 ffae 	bl	800c040 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80020e4:	2300      	movs	r3, #0
 80020e6:	2202      	movs	r2, #2
 80020e8:	2100      	movs	r1, #0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f00c ffea 	bl	800f0c4 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80020f0:	e7ae      	b.n	8002050 <LED_Task4+0x28>
 80020f2:	bf00      	nop
 80020f4:	0801566c 	.word	0x0801566c
 80020f8:	08015678 	.word	0x08015678
 80020fc:	08015768 	.word	0x08015768
 8002100:	08015620 	.word	0x08015620
 8002104:	20000450 	.word	0x20000450
 8002108:	20000218 	.word	0x20000218
 800210c:	20000444 	.word	0x20000444
 8002110:	08015684 	.word	0x08015684

08002114 <waypointsReset>:
vector2d_t globalVec;

SemaphoreHandle_t student_SemaphoreWaypoints;

void waypointsReset()
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
    for(int i=0;i<20;i++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e017      	b.n	8002150 <waypointsReset+0x3c>
    {
        vector2d_t vec;
        vec.x=0;
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c7 2300 	strd	r2, r3, [r7]
        vec.y=0;
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9c7 2302 	strd	r2, r3, [r7, #8]
        waypoints[i]=vec;
 8002138:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <waypointsReset+0x50>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	461c      	mov	r4, r3
 8002142:	463b      	mov	r3, r7
 8002144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i=0;i<20;i++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b13      	cmp	r3, #19
 8002154:	dde4      	ble.n	8002120 <waypointsReset+0xc>
    }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bc90      	pop	{r4, r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200004a8 	.word	0x200004a8

08002168 <LCD_print_fix>:

void LCD_print_fix(char* msg)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	uint8_t line=0;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
	LCD_clear();
 8002174:	f000 fab4 	bl	80026e0 <LCD_clear>
	for(uint8_t i=0;i<strlen(msg);i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73bb      	strb	r3, [r7, #14]
 800217c:	e01e      	b.n	80021bc <LCD_print_fix+0x54>
	{
		if(msg[i]=='\0') break;
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d020      	beq.n	80021cc <LCD_print_fix+0x64>
		if(msg[i]=='\n')
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d108      	bne.n	80021a8 <LCD_print_fix+0x40>
		{
			LCD_XY(0, ++line);
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4619      	mov	r1, r3
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 faad 	bl	8002700 <LCD_XY>
			continue;
 80021a6:	e006      	b.n	80021b6 <LCD_print_fix+0x4e>
		}
		LCD_putchar(msg[i]);
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fb69 	bl	8002888 <LCD_putchar>
	for(uint8_t i=0;i<strlen(msg);i++)
 80021b6:	7bbb      	ldrb	r3, [r7, #14]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73bb      	strb	r3, [r7, #14]
 80021bc:	7bbc      	ldrb	r4, [r7, #14]
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe f856 	bl	8000270 <strlen>
 80021c4:	4603      	mov	r3, r0
 80021c6:	429c      	cmp	r4, r3
 80021c8:	d3d9      	bcc.n	800217e <LCD_print_fix+0x16>
	}
}
 80021ca:	e000      	b.n	80021ce <LCD_print_fix+0x66>
		if(msg[i]=='\0') break;
 80021cc:	bf00      	nop
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
	...

080021d8 <test_gps_coords>:

void test_gps_coords()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b0b8      	sub	sp, #224	@ 0xe0
 80021dc:	af02      	add	r7, sp, #8
	GNRMC latestgnrmc;
	gps_get_GNRMC(&latestgnrmc);
 80021de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fbce 	bl	8001984 <gps_get_GNRMC>
	double x, y;
	x = lonDMtoM(&latestgnrmc);
 80021e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f86b 	bl	80022c8 <lonDMtoM>
 80021f2:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
	y = latDMtoM(&latestgnrmc);
 80021f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8d4 	bl	80023a8 <latDMtoM>
 8002200:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
	char msg[128];
	sprintf(msg, "X: %2.2f\nY: %2.2f\n", x, y);
 8002204:	4638      	mov	r0, r7
 8002206:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800220a:	e9cd 2300 	strd	r2, r3, [sp]
 800220e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002212:	4905      	ldr	r1, [pc, #20]	@ (8002228 <test_gps_coords+0x50>)
 8002214:	f00f fffa 	bl	801220c <siprintf>
	LCD_print_fix(msg);
 8002218:	463b      	mov	r3, r7
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffa4 	bl	8002168 <LCD_print_fix>

}
 8002220:	bf00      	nop
 8002222:	37d8      	adds	r7, #216	@ 0xd8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08015694 	.word	0x08015694

0800222c <Student_task1>:

void Student_task1 (void *argument)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b098      	sub	sp, #96	@ 0x60
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	student_SemaphoreWaypoints = xSemaphoreCreateBinary();
 8002234:	2203      	movs	r2, #3
 8002236:	2100      	movs	r1, #0
 8002238:	2001      	movs	r0, #1
 800223a:	f00a fbd8 	bl	800c9ee <xQueueGenericCreate>
 800223e:	4603      	mov	r3, r0
 8002240:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <Student_task1+0x84>)
 8002242:	6013      	str	r3, [r2, #0]
	waypointsReset();
 8002244:	f7ff ff66 	bl	8002114 <waypointsReset>
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002248:	481a      	ldr	r0, [pc, #104]	@ (80022b4 <Student_task1+0x88>)
 800224a:	f000 fc61 	bl	8002b10 <UART_puts>
 800224e:	481a      	ldr	r0, [pc, #104]	@ (80022b8 <Student_task1+0x8c>)
 8002250:	f000 fc5e 	bl	8002b10 <UART_puts>
	globalVec.x=0;
 8002254:	4919      	ldr	r1, [pc, #100]	@ (80022bc <Student_task1+0x90>)
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	e9c1 2300 	strd	r2, r3, [r1]
	globalVec.y=0;
 8002262:	4916      	ldr	r1, [pc, #88]	@ (80022bc <Student_task1+0x90>)
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	char buf[80];
	unsigned int i = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint8_t testvar=0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	while(TRUE)
	{
       	osDelay(1000);
 800227a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800227e:	f009 fedf 	bl	800c040 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <Student_task1+0x94>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <Student_task1+0x7e>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 800228e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002294:	f107 0008 	add.w	r0, r7, #8
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <Student_task1+0x88>)
 800229a:	490a      	ldr	r1, [pc, #40]	@ (80022c4 <Student_task1+0x98>)
 800229c:	f00f ffb6 	bl	801220c <siprintf>
			UART_puts(buf);
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc33 	bl	8002b10 <UART_puts>
    	}
		test_gps_coords();
 80022aa:	f7ff ff95 	bl	80021d8 <test_gps_coords>
       	osDelay(1000);
 80022ae:	e7e4      	b.n	800227a <Student_task1+0x4e>
 80022b0:	200005f8 	.word	0x200005f8
 80022b4:	08015774 	.word	0x08015774
 80022b8:	080156a8 	.word	0x080156a8
 80022bc:	200005e8 	.word	0x200005e8
 80022c0:	20000444 	.word	0x20000444
 80022c4:	080156b4 	.word	0x080156b4

080022c8 <lonDMtoM>:

	}
}

double lonDMtoM(GNRMC *gnrmc)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	char *lon=gnrmc->longitude;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	331d      	adds	r3, #29
 80022d4:	617b      	str	r3, [r7, #20]
	char lonEW=gnrmc->EW_ind;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80022dc:	74fb      	strb	r3, [r7, #19]
	double minX=0;
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char* pEnd;
    minX=(*lon-'0')*6000;          //10^2*60
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3b30      	subs	r3, #48	@ 0x30
 80022f0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f913 	bl	8000524 <__aeabi_i2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+1)-'0')*600;      //10^1*60
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3b30      	subs	r3, #48	@ 0x30
 800230e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f904 	bl	8000524 <__aeabi_i2d>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002324:	f7fd ffb2 	bl	800028c <__adddf3>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+2)-'0')*60;       //10^0*60
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3302      	adds	r3, #2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8ee 	bl	8000524 <__aeabi_i2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002350:	f7fd ff9c 	bl	800028c <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=strtod(lon+3,&pEnd);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3303      	adds	r3, #3
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f00f f9a6 	bl	80116b8 <strtod>
 800236c:	ec53 2b10 	vmov	r2, r3, d0
 8002370:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002374:	f7fd ff8a 	bl	800028c <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(lonEW=='W')
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b57      	cmp	r3, #87	@ 0x57
 8002384:	d105      	bne.n	8002392 <lonDMtoM+0xca>
    	minX=minX*-1;
 8002386:	69bc      	ldr	r4, [r7, #24]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800238e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minX;
 8002392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002396:	ec43 2b17 	vmov	d7, r2, r3
}
 800239a:	eeb0 0a47 	vmov.f32	s0, s14
 800239e:	eef0 0a67 	vmov.f32	s1, s15
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}

080023a8 <latDMtoM>:

double latDMtoM(GNRMC *gnrmc)
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	char *lat=gnrmc->latitude;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3312      	adds	r3, #18
 80023b4:	617b      	str	r3, [r7, #20]
	char latNS=gnrmc->NS_ind;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7f1b      	ldrb	r3, [r3, #28]
 80023ba:	74fb      	strb	r3, [r7, #19]
	double minY=0;
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	char* pEnd;
    minY=(*lat-'0')*600;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3b30      	subs	r3, #48	@ 0x30
 80023ce:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f8a4 	bl	8000524 <__aeabi_i2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=(*(lat+1)-'0')*60;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3301      	adds	r3, #1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f894 	bl	8000524 <__aeabi_i2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002404:	f7fd ff42 	bl	800028c <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=strtod(lat+2,&pEnd);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3302      	adds	r3, #2
 8002414:	f107 020c 	add.w	r2, r7, #12
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f00f f94c 	bl	80116b8 <strtod>
 8002420:	ec53 2b10 	vmov	r2, r3, d0
 8002424:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002428:	f7fd ff30 	bl	800028c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(latNS=='S')
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b53      	cmp	r3, #83	@ 0x53
 8002438:	d105      	bne.n	8002446 <latDMtoM+0x9e>
    	minY=minY*-1;
 800243a:	69bc      	ldr	r4, [r7, #24]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002442:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minY;
 8002446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244a:	ec43 2b17 	vmov	d7, r2, r3
}
 800244e:	eeb0 0a47 	vmov.f32	s0, s14
 8002452:	eef0 0a67 	vmov.f32	s1, s15
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}

0800245c <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002468:	e023      	b.n	80024b2 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002470:	4815      	ldr	r0, [pc, #84]	@ (80024c8 <BUZZER_put+0x6c>)
 8002472:	f001 fe6b 	bl	800414c <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e002      	b.n	8002482 <BUZZER_put+0x26>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	429a      	cmp	r2, r3
 800248c:	d8f6      	bhi.n	800247c <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002494:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <BUZZER_put+0x6c>)
 8002496:	f001 fe59 	bl	800414c <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e002      	b.n	80024a6 <BUZZER_put+0x4a>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	441a      	add	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d8f6      	bhi.n	80024a0 <BUZZER_put+0x44>
	while (k++<100)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	60ba      	str	r2, [r7, #8]
 80024b8:	2b63      	cmp	r3, #99	@ 0x63
 80024ba:	d9d6      	bls.n	800246a <BUZZER_put+0xe>
	}
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40020800 	.word	0x40020800

080024cc <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <KEYS_init+0x6c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <KEYS_init+0x6c>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <KEYS_init+0x6c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 80024fa:	f640 030e 	movw	r3, #2062	@ 0x80e
 80024fe:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	4619      	mov	r1, r3
 8002504:	480d      	ldr	r0, [pc, #52]	@ (800253c <KEYS_init+0x70>)
 8002506:	f001 fc6d 	bl	8003de4 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 800250a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800250e:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002514:	2302      	movs	r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4807      	ldr	r0, [pc, #28]	@ (800253c <KEYS_init+0x70>)
 800251e:	f001 fc61 	bl	8003de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <KEYS_init+0x70>)
 800252a:	f001 fe0f 	bl	800414c <HAL_GPIO_WritePin>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40020c00 	.word	0x40020c00

08002540 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002552:	480e      	ldr	r0, [pc, #56]	@ (800258c <KEYS_initISR+0x4c>)
 8002554:	f001 fdfa 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	2102      	movs	r1, #2
 8002560:	480a      	ldr	r0, [pc, #40]	@ (800258c <KEYS_initISR+0x4c>)
 8002562:	f001 fdf3 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	2108      	movs	r1, #8
 800256e:	4807      	ldr	r0, [pc, #28]	@ (800258c <KEYS_initISR+0x4c>)
 8002570:	f001 fdec 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	2104      	movs	r1, #4
 800257c:	4803      	ldr	r0, [pc, #12]	@ (800258c <KEYS_initISR+0x4c>)
 800257e:	f001 fde5 	bl	800414c <HAL_GPIO_WritePin>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40020c00 	.word	0x40020c00

08002590 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025a4:	4827      	ldr	r0, [pc, #156]	@ (8002644 <KEYS_read+0xb4>)
 80025a6:	f001 fdd1 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80025aa:	2201      	movs	r2, #1
 80025ac:	2108      	movs	r1, #8
 80025ae:	4825      	ldr	r0, [pc, #148]	@ (8002644 <KEYS_read+0xb4>)
 80025b0:	f001 fdcc 	bl	800414c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80025b4:	f000 f848 	bl	8002648 <KEYS_kolom>
 80025b8:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <KEYS_read+0x36>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2108      	movs	r1, #8
 80025ca:	481e      	ldr	r0, [pc, #120]	@ (8002644 <KEYS_read+0xb4>)
 80025cc:	f001 fdbe 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80025d0:	2201      	movs	r2, #1
 80025d2:	2104      	movs	r1, #4
 80025d4:	481b      	ldr	r0, [pc, #108]	@ (8002644 <KEYS_read+0xb4>)
 80025d6:	f001 fdb9 	bl	800414c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80025da:	f000 f835 	bl	8002648 <KEYS_kolom>
 80025de:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <KEYS_read+0x5c>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	3308      	adds	r3, #8
 80025ea:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2104      	movs	r1, #4
 80025f0:	4814      	ldr	r0, [pc, #80]	@ (8002644 <KEYS_read+0xb4>)
 80025f2:	f001 fdab 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2102      	movs	r1, #2
 80025fa:	4812      	ldr	r0, [pc, #72]	@ (8002644 <KEYS_read+0xb4>)
 80025fc:	f001 fda6 	bl	800414c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002600:	f000 f822 	bl	8002648 <KEYS_kolom>
 8002604:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <KEYS_read+0x82>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3304      	adds	r3, #4
 8002610:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2102      	movs	r1, #2
 8002616:	480b      	ldr	r0, [pc, #44]	@ (8002644 <KEYS_read+0xb4>)
 8002618:	f001 fd98 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002622:	4808      	ldr	r0, [pc, #32]	@ (8002644 <KEYS_read+0xb4>)
 8002624:	f001 fd92 	bl	800414c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002628:	f000 f80e 	bl	8002648 <KEYS_kolom>
 800262c:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <KEYS_read+0xa8>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	607b      	str	r3, [r7, #4]

	return out;
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40020c00 	.word	0x40020c00

08002648 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8002652:	2140      	movs	r1, #64	@ 0x40
 8002654:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <KEYS_kolom+0x60>)
 8002656:	f001 fd61 	bl	800411c <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <KEYS_kolom+0x1c>
 8002660:	2301      	movs	r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002664:	2180      	movs	r1, #128	@ 0x80
 8002666:	4810      	ldr	r0, [pc, #64]	@ (80026a8 <KEYS_kolom+0x60>)
 8002668:	f001 fd58 	bl	800411c <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <KEYS_kolom+0x2e>
 8002672:	2302      	movs	r3, #2
 8002674:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800267a:	480b      	ldr	r0, [pc, #44]	@ (80026a8 <KEYS_kolom+0x60>)
 800267c:	f001 fd4e 	bl	800411c <HAL_GPIO_ReadPin>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <KEYS_kolom+0x42>
 8002686:	2303      	movs	r3, #3
 8002688:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 800268a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800268e:	4806      	ldr	r0, [pc, #24]	@ (80026a8 <KEYS_kolom+0x60>)
 8002690:	f001 fd44 	bl	800411c <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <KEYS_kolom+0x56>
 800269a:	2304      	movs	r3, #4
 800269c:	607b      	str	r3, [r7, #4]
	return key;
 800269e:	687b      	ldr	r3, [r7, #4]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40020c00 	.word	0x40020c00

080026ac <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2108      	movs	r1, #8
 80026b4:	4809      	ldr	r0, [pc, #36]	@ (80026dc <ClearBits+0x30>)
 80026b6:	f001 fd49 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2110      	movs	r1, #16
 80026be:	4807      	ldr	r0, [pc, #28]	@ (80026dc <ClearBits+0x30>)
 80026c0:	f001 fd44 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2120      	movs	r1, #32
 80026c8:	4804      	ldr	r0, [pc, #16]	@ (80026dc <ClearBits+0x30>)
 80026ca:	f001 fd3f 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2140      	movs	r1, #64	@ 0x40
 80026d2:	4802      	ldr	r0, [pc, #8]	@ (80026dc <ClearBits+0x30>)
 80026d4:	f001 fd3a 	bl	800414c <HAL_GPIO_WritePin>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 f995 	bl	8002a14 <LCD_writecontrol>
   curpos=0;               // reset position
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <LCD_clear+0x1c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 80026f0:	2005      	movs	r0, #5
 80026f2:	f001 f9df 	bl	8003ab4 <HAL_Delay>
//   busyflag();

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200005fc 	.word	0x200005fc

08002700 <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d013      	beq.n	8002738 <LCD_XY+0x38>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d815      	bhi.n	8002742 <LCD_XY+0x42>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <LCD_XY+0x24>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <LCD_XY+0x2e>
 8002722:	e00e      	b.n	8002742 <LCD_XY+0x42>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3b80      	subs	r3, #128	@ 0x80
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e00e      	b.n	800274c <LCD_XY+0x4c>
	case 1:  data = (1<<7)+0x40+x; break;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b40      	subs	r3, #64	@ 0x40
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e009      	b.n	800274c <LCD_XY+0x4c>
	case 2:  data = (1<<7)+0x14+x; break;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3b6c      	subs	r3, #108	@ 0x6c
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e004      	b.n	800274c <LCD_XY+0x4c>
	default: data = (1<<7)+0x54+x; break;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3b2c      	subs	r3, #44	@ 0x2c
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	bf00      	nop
	}
	LCD_writecontrol(data);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f960 	bl	8002a14 <LCD_writecontrol>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <LCD_init+0x11c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	4a43      	ldr	r2, [pc, #268]	@ (8002878 <LCD_init+0x11c>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6313      	str	r3, [r2, #48]	@ 0x30
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <LCD_init+0x11c>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <LCD_init+0x11c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a3c      	ldr	r2, [pc, #240]	@ (8002878 <LCD_init+0x11c>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <LCD_init+0x11c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <LCD_init+0x11c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a35      	ldr	r2, [pc, #212]	@ (8002878 <LCD_init+0x11c>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <LCD_init+0x11c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80027c2:	2378      	movs	r3, #120	@ 0x78
 80027c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	482b      	ldr	r0, [pc, #172]	@ (800287c <LCD_init+0x120>)
 80027ce:	f001 fb09 	bl	8003de4 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 80027d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80027d6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	4619      	mov	r1, r3
 80027de:	4828      	ldr	r0, [pc, #160]	@ (8002880 <LCD_init+0x124>)
 80027e0:	f001 fb00 	bl	8003de4 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 80027e4:	2301      	movs	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4825      	ldr	r0, [pc, #148]	@ (8002884 <LCD_init+0x128>)
 80027f0:	f001 faf8 	bl	8003de4 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027fa:	4821      	ldr	r0, [pc, #132]	@ (8002880 <LCD_init+0x124>)
 80027fc:	f001 fca6 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2101      	movs	r1, #1
 8002804:	481f      	ldr	r0, [pc, #124]	@ (8002884 <LCD_init+0x128>)
 8002806:	f001 fca1 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002810:	481b      	ldr	r0, [pc, #108]	@ (8002880 <LCD_init+0x124>)
 8002812:	f001 fc9b 	bl	800414c <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8002816:	200f      	movs	r0, #15
 8002818:	f001 f94c 	bl	8003ab4 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 800281c:	2030      	movs	r0, #48	@ 0x30
 800281e:	f000 f8c7 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(70);
 8002822:	2046      	movs	r0, #70	@ 0x46
 8002824:	f001 f946 	bl	8003ab4 <HAL_Delay>
    LCD_writebyte(0x30);
 8002828:	2030      	movs	r0, #48	@ 0x30
 800282a:	f000 f8c1 	bl	80029b0 <LCD_writebyte>
    LCD_writebyte(0x30);
 800282e:	2030      	movs	r0, #48	@ 0x30
 8002830:	f000 f8be 	bl	80029b0 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8002834:	2002      	movs	r0, #2
 8002836:	f000 f8bb 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(5);
 800283a:	2005      	movs	r0, #5
 800283c:	f001 f93a 	bl	8003ab4 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8002840:	202c      	movs	r0, #44	@ 0x2c
 8002842:	f000 f8b5 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(15);
 8002846:	200f      	movs	r0, #15
 8002848:	f001 f934 	bl	8003ab4 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 800284c:	200c      	movs	r0, #12
 800284e:	f000 f8af 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(15);
 8002852:	200f      	movs	r0, #15
 8002854:	f001 f92e 	bl	8003ab4 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002858:	2001      	movs	r0, #1
 800285a:	f000 f8a9 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(15);
 800285e:	200f      	movs	r0, #15
 8002860:	f001 f928 	bl	8003ab4 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8002864:	2006      	movs	r0, #6
 8002866:	f000 f8a3 	bl	80029b0 <LCD_writebyte>
    HAL_Delay(15);
 800286a:	200f      	movs	r0, #15
 800286c:	f001 f922 	bl	8003ab4 <HAL_Delay>
}
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	40021000 	.word	0x40021000
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00

08002888 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002898:	480b      	ldr	r0, [pc, #44]	@ (80028c8 <LCD_putchar+0x40>)
 800289a:	f001 fc57 	bl	800414c <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f885 	bl	80029b0 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <LCD_putchar+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <LCD_putchar+0x44>)
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <LCD_putchar+0x44>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d102      	bne.n	80028c0 <LCD_putchar+0x38>
    	curpos=0;
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <LCD_putchar+0x44>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40020800 	.word	0x40020800
 80028cc:	200005fc 	.word	0x200005fc

080028d0 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 80028d8:	2300      	movs	r3, #0
 80028da:	73bb      	strb	r3, [r7, #14]
 80028dc:	e019      	b.n	8002912 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <LCD_put+0x58>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d10b      	bne.n	80028fe <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e005      	b.n	80028f8 <LCD_put+0x28>
 80028ec:	2014      	movs	r0, #20
 80028ee:	f000 f891 	bl	8002a14 <LCD_writecontrol>
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	3301      	adds	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b1f      	cmp	r3, #31
 80028fc:	d9f6      	bls.n	80028ec <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffbe 	bl	8002888 <LCD_putchar>
    for (k=0; string[k]; k++)
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	3301      	adds	r3, #1
 8002910:	73bb      	strb	r3, [r7, #14]
 8002912:	7bbb      	ldrb	r3, [r7, #14]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1df      	bne.n	80028de <LCD_put+0xe>
    }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200005fc 	.word	0x200005fc

0800292c <LCD_puts>:

void LCD_puts(char *c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ffcb 	bl	80028d0 <LCD_put>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 800294e:	f7ff fead 	bl	80026ac <ClearBits>

    if (data & 0x01)
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 800295c:	2201      	movs	r2, #1
 800295e:	2140      	movs	r1, #64	@ 0x40
 8002960:	4812      	ldr	r0, [pc, #72]	@ (80029ac <LCD_writenibble+0x68>)
 8002962:	f001 fbf3 	bl	800414c <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	2120      	movs	r1, #32
 8002974:	480d      	ldr	r0, [pc, #52]	@ (80029ac <LCD_writenibble+0x68>)
 8002976:	f001 fbe9 	bl	800414c <HAL_GPIO_WritePin>

	if (data & 0x04)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002984:	2201      	movs	r2, #1
 8002986:	2110      	movs	r1, #16
 8002988:	4808      	ldr	r0, [pc, #32]	@ (80029ac <LCD_writenibble+0x68>)
 800298a:	f001 fbdf 	bl	800414c <HAL_GPIO_WritePin>

	if (data & 0x08)
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2108      	movs	r1, #8
 800299c:	4803      	ldr	r0, [pc, #12]	@ (80029ac <LCD_writenibble+0x68>)
 800299e:	f001 fbd5 	bl	800414c <HAL_GPIO_WritePin>

}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	2101      	movs	r1, #1
 80029be:	4814      	ldr	r0, [pc, #80]	@ (8002a10 <LCD_writebyte+0x60>)
 80029c0:	f001 fbc4 	bl	800414c <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffba 	bl	8002944 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2101      	movs	r1, #1
 80029d4:	480e      	ldr	r0, [pc, #56]	@ (8002a10 <LCD_writebyte+0x60>)
 80029d6:	f001 fbb9 	bl	800414c <HAL_GPIO_WritePin>

    HAL_Delay(2);
 80029da:	2002      	movs	r0, #2
 80029dc:	f001 f86a 	bl	8003ab4 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2101      	movs	r1, #1
 80029e4:	480a      	ldr	r0, [pc, #40]	@ (8002a10 <LCD_writebyte+0x60>)
 80029e6:	f001 fbb1 	bl	800414c <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ffa6 	bl	8002944 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <LCD_writebyte+0x60>)
 80029fe:	f001 fba5 	bl	800414c <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f001 f856 	bl	8003ab4 <HAL_Delay>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40020c00 	.word	0x40020c00

08002a14 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a24:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <LCD_writecontrol+0x28>)
 8002a26:	f001 fb91 	bl	800414c <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ffbf 	bl	80029b0 <LCD_writebyte>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40020800 	.word	0x40020800

08002a40 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a4a:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <LED_init+0x30>)
 8002a4c:	f001 fb7e 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a56:	4807      	ldr	r0, [pc, #28]	@ (8002a74 <LED_init+0x34>)
 8002a58:	f001 fb78 	bl	800414c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4804      	ldr	r0, [pc, #16]	@ (8002a74 <LED_init+0x34>)
 8002a62:	f001 fb73 	bl	800414c <HAL_GPIO_WritePin>
    LED_put(0);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 f806 	bl	8002a78 <LED_put>
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400

08002a78 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e01c      	b.n	8002ac2 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a9e:	4811      	ldr	r0, [pc, #68]	@ (8002ae4 <LED_put+0x6c>)
 8002aa0:	f001 fb54 	bl	800414c <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aaa:	480f      	ldr	r0, [pc, #60]	@ (8002ae8 <LED_put+0x70>)
 8002aac:	f001 fb4e 	bl	800414c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ab6:	480c      	ldr	r0, [pc, #48]	@ (8002ae8 <LED_put+0x70>)
 8002ab8:	f001 fb48 	bl	800414c <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1df      	bne.n	8002a88 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2102      	movs	r1, #2
 8002acc:	4806      	ldr	r0, [pc, #24]	@ (8002ae8 <LED_put+0x70>)
 8002ace:	f001 fb3d 	bl	800414c <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4804      	ldr	r0, [pc, #16]	@ (8002ae8 <LED_put+0x70>)
 8002ad8:	f001 fb38 	bl	800414c <HAL_GPIO_WritePin>
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400

08002aec <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002af6:	1df9      	adds	r1, r7, #7
 8002af8:	2364      	movs	r3, #100	@ 0x64
 8002afa:	2201      	movs	r2, #1
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <UART_putchar+0x20>)
 8002afe:	f004 fef8 	bl	80078f2 <HAL_UART_Transmit>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000738 	.word	0x20000738

08002b10 <UART_puts>:

void UART_puts(const char *s)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e009      	b.n	8002b32 <UART_puts+0x22>
		UART_putchar(s[i]);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffe0 	bl	8002aec <UART_putchar>
	for (i=0; s[i]; i++)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ef      	bne.n	8002b1e <UART_puts+0xe>
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002b50:	210a      	movs	r1, #10
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f804 	bl	8002b60 <UART_putnum>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d129      	bne.n	8002bca <UART_putnum+0x6a>
    {
        c[i]='0';
 8002b76:	f107 0208 	add.w	r2, r7, #8
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	2230      	movs	r2, #48	@ 0x30
 8002b80:	701a      	strb	r2, [r3, #0]
        i--;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e030      	b.n	8002bec <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b92:	fb01 f202 	mul.w	r2, r1, r2
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002ba4:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <UART_putnum+0x9c>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b259      	sxtb	r1, r3
 8002bae:	f107 0208 	add.w	r2, r7, #8
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
            i--;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <UART_putnum+0x6a>
                num=0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1dc      	bne.n	8002b8a <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002bd0:	e00c      	b.n	8002bec <UART_putnum+0x8c>
    {
        i++;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002bd8:	f107 0208 	add.w	r2, r7, #8
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	4413      	add	r3, r2
 8002be0:	f993 3000 	ldrsb.w	r3, [r3]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff80 	bl	8002aec <UART_putchar>
    while(i<15)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b0e      	cmp	r3, #14
 8002bf0:	ddef      	ble.n	8002bd2 <UART_putnum+0x72>
    }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	2000021c 	.word	0x2000021c

08002c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c04:	f000 ff14 	bl	8003a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c08:	f000 f830 	bl	8002c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c0c:	f000 f980 	bl	8002f10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c10:	f000 f896 	bl	8002d40 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002c14:	f000 f8c2 	bl	8002d9c <MX_I2S3_Init>
  MX_SPI1_Init();
 8002c18:	f000 f8f0 	bl	8002dfc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c1c:	f000 f94e 	bl	8002ebc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002c20:	f000 f922 	bl	8002e68 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002c24:	f7ff fd9a 	bl	800275c <LCD_init>
  KEYS_init();
 8002c28:	f7ff fc50 	bl	80024cc <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7ff fc87 	bl	8002540 <KEYS_initISR>
  LED_init();
 8002c32:	f7ff ff05 	bl	8002a40 <LED_init>

  DisplayVersion();
 8002c36:	f7fe fc5f 	bl	80014f8 <DisplayVersion>
  osDelay(500); // time to read version
 8002c3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c3e:	f009 f9ff 	bl	800c040 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c42:	f009 f8e3 	bl	800be0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c46:	4a06      	ldr	r2, [pc, #24]	@ (8002c60 <main+0x60>)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4806      	ldr	r0, [pc, #24]	@ (8002c64 <main+0x64>)
 8002c4c:	f009 f966 	bl	800bf1c <osThreadNew>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <main+0x68>)
 8002c54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c56:	f009 f925 	bl	800bea4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c5a:	bf00      	nop
 8002c5c:	e7fd      	b.n	8002c5a <main+0x5a>
 8002c5e:	bf00      	nop
 8002c60:	08015784 	.word	0x08015784
 8002c64:	08003239 	.word	0x08003239
 8002c68:	2000077c 	.word	0x2000077c

08002c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b094      	sub	sp, #80	@ 0x50
 8002c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c72:	f107 0320 	add.w	r3, r7, #32
 8002c76:	2230      	movs	r2, #48	@ 0x30
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f00f fb29 	bl	80122d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <SystemClock_Config+0xcc>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	4a27      	ldr	r2, [pc, #156]	@ (8002d38 <SystemClock_Config+0xcc>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <SystemClock_Config+0xcc>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <SystemClock_Config+0xd0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <SystemClock_Config+0xd0>)
 8002cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d3c <SystemClock_Config+0xd0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ce0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cea:	2307      	movs	r3, #7
 8002cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cee:	f107 0320 	add.w	r3, r7, #32
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fc70 	bl	80065d8 <HAL_RCC_OscConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002cfe:	f000 fadf 	bl	80032c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d02:	230f      	movs	r3, #15
 8002d04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d06:	2302      	movs	r3, #2
 8002d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	2105      	movs	r1, #5
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fed1 	bl	8006ac8 <HAL_RCC_ClockConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002d2c:	f000 fac8 	bl	80032c0 <Error_Handler>
  }
}
 8002d30:	bf00      	nop
 8002d32:	3750      	adds	r7, #80	@ 0x50
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000

08002d40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d44:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d46:	4a13      	ldr	r2, [pc, #76]	@ (8002d94 <MX_I2C1_Init+0x54>)
 8002d48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d4c:	4a12      	ldr	r2, [pc, #72]	@ (8002d98 <MX_I2C1_Init+0x58>)
 8002d4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d70:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d7c:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <MX_I2C1_Init+0x50>)
 8002d7e:	f002 fe47 	bl	8005a10 <HAL_I2C_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d88:	f000 fa9a 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000600 	.word	0x20000600
 8002d94:	40005400 	.word	0x40005400
 8002d98:	000186a0 	.word	0x000186a0

08002d9c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002da2:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <MX_I2S3_Init+0x58>)
 8002da4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <MX_I2S3_Init+0x5c>)
 8002dc6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002dda:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <MX_I2S3_Init+0x54>)
 8002ddc:	f002 ff5c 	bl	8005c98 <HAL_I2S_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002de6:	f000 fa6b 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000654 	.word	0x20000654
 8002df4:	40003c00 	.word	0x40003c00
 8002df8:	00017700 	.word	0x00017700

08002dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e00:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <MX_SPI1_Init+0x68>)
 8002e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e34:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e40:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e48:	220a      	movs	r2, #10
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e4c:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <MX_SPI1_Init+0x64>)
 8002e4e:	f004 f9cd 	bl	80071ec <HAL_SPI_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e58:	f000 fa32 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000069c 	.word	0x2000069c
 8002e64:	40013000 	.word	0x40013000

08002e68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	@ (8002eb8 <MX_UART4_Init+0x50>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_UART4_Init+0x4c>)
 8002ea0:	f004 fcda 	bl	8007858 <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002eaa:	f000 fa09 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200006f4 	.word	0x200006f4
 8002eb8:	40004c00 	.word	0x40004c00

08002ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ec2:	4a12      	ldr	r2, [pc, #72]	@ (8002f0c <MX_USART2_UART_Init+0x50>)
 8002ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef2:	4805      	ldr	r0, [pc, #20]	@ (8002f08 <MX_USART2_UART_Init+0x4c>)
 8002ef4:	f004 fcb0 	bl	8007858 <HAL_UART_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002efe:	f000 f9df 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000738 	.word	0x20000738
 8002f0c:	40004400 	.word	0x40004400

08002f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	4a8d      	ldr	r2, [pc, #564]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f30:	f043 0310 	orr.w	r3, r3, #16
 8002f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f36:	4b8b      	ldr	r3, [pc, #556]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4b87      	ldr	r3, [pc, #540]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a86      	ldr	r2, [pc, #536]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b84      	ldr	r3, [pc, #528]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b80      	ldr	r3, [pc, #512]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	4a7f      	ldr	r2, [pc, #508]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b79      	ldr	r3, [pc, #484]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	4a78      	ldr	r2, [pc, #480]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8a:	4b76      	ldr	r3, [pc, #472]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b72      	ldr	r3, [pc, #456]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	4a71      	ldr	r2, [pc, #452]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	4b6b      	ldr	r3, [pc, #428]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a6a      	ldr	r2, [pc, #424]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b68      	ldr	r3, [pc, #416]	@ (8003164 <MX_GPIO_Init+0x254>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	4865      	ldr	r0, [pc, #404]	@ (8003168 <MX_GPIO_Init+0x258>)
 8002fd4:	f001 f8ba 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4863      	ldr	r0, [pc, #396]	@ (800316c <MX_GPIO_Init+0x25c>)
 8002fde:	f001 f8b5 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002fe8:	4861      	ldr	r0, [pc, #388]	@ (8003170 <MX_GPIO_Init+0x260>)
 8002fea:	f001 f8af 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002ff4:	485f      	ldr	r0, [pc, #380]	@ (8003174 <MX_GPIO_Init+0x264>)
 8002ff6:	f001 f8a9 	bl	800414c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003000:	485a      	ldr	r0, [pc, #360]	@ (800316c <MX_GPIO_Init+0x25c>)
 8003002:	f001 f8a3 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800300c:	485a      	ldr	r0, [pc, #360]	@ (8003178 <MX_GPIO_Init+0x268>)
 800300e:	f001 f89d 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003012:	2308      	movs	r3, #8
 8003014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003016:	2301      	movs	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 031c 	add.w	r3, r7, #28
 8003026:	4619      	mov	r1, r3
 8003028:	484f      	ldr	r0, [pc, #316]	@ (8003168 <MX_GPIO_Init+0x258>)
 800302a:	f000 fedb 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 800302e:	f240 1301 	movw	r3, #257	@ 0x101
 8003032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	2301      	movs	r3, #1
 8003036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4619      	mov	r1, r3
 8003046:	4849      	ldr	r0, [pc, #292]	@ (800316c <MX_GPIO_Init+0x25c>)
 8003048:	f000 fecc 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800304c:	2308      	movs	r3, #8
 800304e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800305c:	2305      	movs	r3, #5
 800305e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	4841      	ldr	r0, [pc, #260]	@ (800316c <MX_GPIO_Init+0x25c>)
 8003068:	f000 febc 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 800306c:	2301      	movs	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003070:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	4619      	mov	r1, r3
 8003080:	483b      	ldr	r0, [pc, #236]	@ (8003170 <MX_GPIO_Init+0x260>)
 8003082:	f000 feaf 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8003086:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4834      	ldr	r0, [pc, #208]	@ (8003170 <MX_GPIO_Init+0x260>)
 80030a0:	f000 fea0 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80030a4:	2304      	movs	r3, #4
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	4619      	mov	r1, r3
 80030b6:	482e      	ldr	r0, [pc, #184]	@ (8003170 <MX_GPIO_Init+0x260>)
 80030b8:	f000 fe94 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80030bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ce:	2305      	movs	r3, #5
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	4619      	mov	r1, r3
 80030d8:	4825      	ldr	r0, [pc, #148]	@ (8003170 <MX_GPIO_Init+0x260>)
 80030da:	f000 fe83 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030de:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80030e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	481f      	ldr	r0, [pc, #124]	@ (8003174 <MX_GPIO_Init+0x264>)
 80030f8:	f000 fe74 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80030fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4619      	mov	r1, r3
 8003114:	4818      	ldr	r0, [pc, #96]	@ (8003178 <MX_GPIO_Init+0x268>)
 8003116:	f000 fe65 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800311a:	2320      	movs	r3, #32
 800311c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4811      	ldr	r0, [pc, #68]	@ (8003174 <MX_GPIO_Init+0x264>)
 800312e:	f000 fe59 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003132:	2302      	movs	r3, #2
 8003134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003136:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800313a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4808      	ldr	r0, [pc, #32]	@ (8003168 <MX_GPIO_Init+0x258>)
 8003148:	f000 fe4c 	bl	8003de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2105      	movs	r1, #5
 8003150:	2006      	movs	r0, #6
 8003152:	f000 fd8b 	bl	8003c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003156:	2006      	movs	r0, #6
 8003158:	f000 fda4 	bl	8003ca4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800315c:	bf00      	nop
 800315e:	3730      	adds	r7, #48	@ 0x30
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	40021000 	.word	0x40021000
 800316c:	40020800 	.word	0x40020800
 8003170:	40020400 	.word	0x40020400
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40020000 	.word	0x40020000

0800317c <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a23      	ldr	r2, [pc, #140]	@ (800321c <HAL_UART_RxCpltCallback+0xa0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d11d      	bne.n	80031ce <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 8003192:	f107 030e 	add.w	r3, r7, #14
 8003196:	2201      	movs	r2, #1
 8003198:	4619      	mov	r1, r3
 800319a:	4821      	ldr	r0, [pc, #132]	@ (8003220 <HAL_UART_RxCpltCallback+0xa4>)
 800319c:	f004 fc3b 	bl	8007a16 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 80031a0:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_UART_RxCpltCallback+0xa8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	f107 010e 	add.w	r1, r7, #14
 80031ac:	2300      	movs	r3, #0
 80031ae:	f009 fdb1 	bl	800cd14 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_UART_RxCpltCallback+0x52>
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_UART_RxCpltCallback+0xac>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a16      	ldr	r2, [pc, #88]	@ (800322c <HAL_UART_RxCpltCallback+0xb0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d11d      	bne.n	8003214 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80031d8:	f107 030f 	add.w	r3, r7, #15
 80031dc:	2201      	movs	r2, #1
 80031de:	4619      	mov	r1, r3
 80031e0:	4813      	ldr	r0, [pc, #76]	@ (8003230 <HAL_UART_RxCpltCallback+0xb4>)
 80031e2:	f004 fc18 	bl	8007a16 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 80031e6:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <HAL_UART_RxCpltCallback+0xb8>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f107 0208 	add.w	r2, r7, #8
 80031ee:	f107 010f 	add.w	r1, r7, #15
 80031f2:	2300      	movs	r3, #0
 80031f4:	f009 fd8e 	bl	800cd14 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_UART_RxCpltCallback+0x98>
 8003204:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <HAL_UART_RxCpltCallback+0xac>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
	}

}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40004400 	.word	0x40004400
 8003220:	20000738 	.word	0x20000738
 8003224:	20000448 	.word	0x20000448
 8003228:	e000ed04 	.word	0xe000ed04
 800322c:	40004c00 	.word	0x40004c00
 8003230:	200006f4 	.word	0x200006f4
 8003234:	2000044c 	.word	0x2000044c

08003238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003240:	f00d f872 	bl	8010328 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8003244:	f7fe f9de 	bl	8001604 <CreateHandles>
  CreateTasks();
 8003248:	f7fe fa6c 	bl	8001724 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 800324c:	f107 030e 	add.w	r3, r7, #14
 8003250:	2201      	movs	r2, #1
 8003252:	4619      	mov	r1, r3
 8003254:	480d      	ldr	r0, [pc, #52]	@ (800328c <StartDefaultTask+0x54>)
 8003256:	f004 fbde 	bl	8007a16 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART1 interrupt engine GPS
 800325a:	f107 030f 	add.w	r3, r7, #15
 800325e:	2201      	movs	r2, #1
 8003260:	4619      	mov	r1, r3
 8003262:	480b      	ldr	r0, [pc, #44]	@ (8003290 <StartDefaultTask+0x58>)
 8003264:	f004 fbd7 	bl	8007a16 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte is nog een bug.
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fc6c 	bl	8002b48 <UART_putint>
 8003270:	4808      	ldr	r0, [pc, #32]	@ (8003294 <StartDefaultTask+0x5c>)
 8003272:	f7ff fc4d 	bl	8002b10 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003276:	2001      	movs	r0, #1
 8003278:	f008 fee2 	bl	800c040 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <StartDefaultTask+0x60>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f00a fb9d 	bl	800d9c0 <vTaskDelete>
    osDelay(1);
 8003286:	bf00      	nop
 8003288:	e7f5      	b.n	8003276 <StartDefaultTask+0x3e>
 800328a:	bf00      	nop
 800328c:	20000738 	.word	0x20000738
 8003290:	200006f4 	.word	0x200006f4
 8003294:	080156cc 	.word	0x080156cc
 8003298:	2000077c 	.word	0x2000077c

0800329c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ae:	f000 fbe1 	bl	8003a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000

080032c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c4:	b672      	cpsid	i
}
 80032c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <Error_Handler+0x8>

080032cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_MspInit+0x54>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	4a11      	ldr	r2, [pc, #68]	@ (8003320 <HAL_MspInit+0x54>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_MspInit+0x54>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_MspInit+0x54>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <HAL_MspInit+0x54>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <HAL_MspInit+0x54>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	210f      	movs	r1, #15
 800330e:	f06f 0001 	mvn.w	r0, #1
 8003312:	f000 fcab 	bl	8003c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	@ 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_I2C_MspInit+0x84>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12c      	bne.n	80033a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003362:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003368:	2312      	movs	r3, #18
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800336c:	2301      	movs	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003374:	2304      	movs	r3, #4
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <HAL_I2C_MspInit+0x8c>)
 8003380:	f000 fd30 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	4a07      	ldr	r2, [pc, #28]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 800338e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003392:	6413      	str	r3, [r2, #64]	@ 0x40
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <HAL_I2C_MspInit+0x88>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	@ 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40005400 	.word	0x40005400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400

080033b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	@ 0x38
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a31      	ldr	r2, [pc, #196]	@ (80034a4 <HAL_I2S_MspInit+0xf0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d15a      	bne.n	800349a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80033e4:	2301      	movs	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80033e8:	23c0      	movs	r3, #192	@ 0xc0
 80033ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80033ec:	2302      	movs	r3, #2
 80033ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fdb9 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003400:	f7ff ff5e 	bl	80032c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	4b27      	ldr	r3, [pc, #156]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a26      	ldr	r2, [pc, #152]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 800340e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003412:	6413      	str	r3, [r2, #64]	@ 0x40
 8003414:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6313      	str	r3, [r2, #48]	@ 0x30
 800344c:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <HAL_I2S_MspInit+0xf4>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003458:	2310      	movs	r3, #16
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003468:	2306      	movs	r3, #6
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003470:	4619      	mov	r1, r3
 8003472:	480e      	ldr	r0, [pc, #56]	@ (80034ac <HAL_I2S_MspInit+0xf8>)
 8003474:	f000 fcb6 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003478:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800348a:	2306      	movs	r3, #6
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800348e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	4806      	ldr	r0, [pc, #24]	@ (80034b0 <HAL_I2S_MspInit+0xfc>)
 8003496:	f000 fca5 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800349a:	bf00      	nop
 800349c:	3738      	adds	r7, #56	@ 0x38
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40003c00 	.word	0x40003c00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020800 	.word	0x40020800

080034b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_SPI_MspInit+0x84>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d12b      	bne.n	800352e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	4b18      	ldr	r3, [pc, #96]	@ (800353c <HAL_SPI_MspInit+0x88>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	4a17      	ldr	r2, [pc, #92]	@ (800353c <HAL_SPI_MspInit+0x88>)
 80034e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_SPI_MspInit+0x88>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_SPI_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	4a10      	ldr	r2, [pc, #64]	@ (800353c <HAL_SPI_MspInit+0x88>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	@ 0x30
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_SPI_MspInit+0x88>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800350e:	23e0      	movs	r3, #224	@ 0xe0
 8003510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800351e:	2305      	movs	r3, #5
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	4619      	mov	r1, r3
 8003528:	4805      	ldr	r0, [pc, #20]	@ (8003540 <HAL_SPI_MspInit+0x8c>)
 800352a:	f000 fc5b 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800352e:	bf00      	nop
 8003530:	3728      	adds	r7, #40	@ 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40013000 	.word	0x40013000
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000

08003544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	@ 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3a      	ldr	r2, [pc, #232]	@ (800364c <HAL_UART_MspInit+0x108>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d134      	bne.n	80035d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	4a38      	ldr	r2, [pc, #224]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003570:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003574:	6413      	str	r3, [r2, #64]	@ 0x40
 8003576:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	4b32      	ldr	r3, [pc, #200]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6313      	str	r3, [r2, #48]	@ 0x30
 8003592:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800359e:	2303      	movs	r3, #3
 80035a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035ae:	2308      	movs	r3, #8
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 031c 	add.w	r3, r7, #28
 80035b6:	4619      	mov	r1, r3
 80035b8:	4826      	ldr	r0, [pc, #152]	@ (8003654 <HAL_UART_MspInit+0x110>)
 80035ba:	f000 fc13 	bl	8003de4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2105      	movs	r1, #5
 80035c2:	2034      	movs	r0, #52	@ 0x34
 80035c4:	f000 fb52 	bl	8003c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035c8:	2034      	movs	r0, #52	@ 0x34
 80035ca:	f000 fb6b 	bl	8003ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ce:	e038      	b.n	8003642 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a20      	ldr	r2, [pc, #128]	@ (8003658 <HAL_UART_MspInit+0x114>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d133      	bne.n	8003642 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 80035e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_UART_MspInit+0x10c>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003612:	230c      	movs	r3, #12
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361e:	2303      	movs	r3, #3
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003622:	2307      	movs	r3, #7
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003626:	f107 031c 	add.w	r3, r7, #28
 800362a:	4619      	mov	r1, r3
 800362c:	4809      	ldr	r0, [pc, #36]	@ (8003654 <HAL_UART_MspInit+0x110>)
 800362e:	f000 fbd9 	bl	8003de4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2105      	movs	r1, #5
 8003636:	2026      	movs	r0, #38	@ 0x26
 8003638:	f000 fb18 	bl	8003c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800363c:	2026      	movs	r0, #38	@ 0x26
 800363e:	f000 fb31 	bl	8003ca4 <HAL_NVIC_EnableIRQ>
}
 8003642:	bf00      	nop
 8003644:	3730      	adds	r7, #48	@ 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40004c00 	.word	0x40004c00
 8003650:	40023800 	.word	0x40023800
 8003654:	40020000 	.word	0x40020000
 8003658:	40004400 	.word	0x40004400

0800365c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	@ 0x30
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <HAL_InitTick+0xd4>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003674:	4a2e      	ldr	r2, [pc, #184]	@ (8003730 <HAL_InitTick+0xd4>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6453      	str	r3, [r2, #68]	@ 0x44
 800367c:	4b2c      	ldr	r3, [pc, #176]	@ (8003730 <HAL_InitTick+0xd4>)
 800367e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003688:	f107 020c 	add.w	r2, r7, #12
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fc38 	bl	8006f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003698:	f003 fc22 	bl	8006ee0 <HAL_RCC_GetPCLK2Freq>
 800369c:	4603      	mov	r3, r0
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	4a23      	ldr	r2, [pc, #140]	@ (8003734 <HAL_InitTick+0xd8>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	3b01      	subs	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_InitTick+0xdc>)
 80036b2:	4a22      	ldr	r2, [pc, #136]	@ (800373c <HAL_InitTick+0xe0>)
 80036b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <HAL_InitTick+0xdc>)
 80036b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036be:	4a1e      	ldr	r2, [pc, #120]	@ (8003738 <HAL_InitTick+0xdc>)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <HAL_InitTick+0xdc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_InitTick+0xdc>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d0:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_InitTick+0xdc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80036d6:	4818      	ldr	r0, [pc, #96]	@ (8003738 <HAL_InitTick+0xdc>)
 80036d8:	f003 fe11 	bl	80072fe <HAL_TIM_Base_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80036e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11b      	bne.n	8003722 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80036ea:	4813      	ldr	r0, [pc, #76]	@ (8003738 <HAL_InitTick+0xdc>)
 80036ec:	f003 fe60 	bl	80073b0 <HAL_TIM_Base_Start_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80036f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d111      	bne.n	8003722 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036fe:	2019      	movs	r0, #25
 8003700:	f000 fad0 	bl	8003ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	d808      	bhi.n	800371c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800370a:	2200      	movs	r2, #0
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	2019      	movs	r0, #25
 8003710:	f000 faac 	bl	8003c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <HAL_InitTick+0xe4>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e002      	b.n	8003722 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003726:	4618      	mov	r0, r3
 8003728:	3730      	adds	r7, #48	@ 0x30
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	431bde83 	.word	0x431bde83
 8003738:	20000780 	.word	0x20000780
 800373c:	40010000 	.word	0x40010000
 8003740:	20000230 	.word	0x20000230

08003744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <NMI_Handler+0x4>

0800374c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <HardFault_Handler+0x4>

08003754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003758:	bf00      	nop
 800375a:	e7fd      	b.n	8003758 <MemManage_Handler+0x4>

0800375c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <BusFault_Handler+0x4>

08003764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <UsageFault_Handler+0x4>

0800376c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003786:	2001      	movs	r0, #1
 8003788:	f000 fd14 	bl	80041b4 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 800378c:	f7fe ff00 	bl	8002590 <KEYS_read>
 8003790:	4603      	mov	r3, r0
 8003792:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <EXTI0_IRQHandler+0x58>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	463a      	mov	r2, r7
 800379c:	4618      	mov	r0, r3
 800379e:	f008 ff77 	bl	800c690 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fe fecc 	bl	8002540 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <EXTI0_IRQHandler+0x48>
 80037b4:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <EXTI0_IRQHandler+0x5c>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f000 fcf5 	bl	80041b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000454 	.word	0x20000454
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037e0:	4802      	ldr	r0, [pc, #8]	@ (80037ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037e2:	f003 fe55 	bl	8007490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000780 	.word	0x20000780

080037f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037f4:	4802      	ldr	r0, [pc, #8]	@ (8003800 <USART2_IRQHandler+0x10>)
 80037f6:	f004 f93f 	bl	8007a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000738 	.word	0x20000738

08003804 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <UART4_IRQHandler+0x10>)
 800380a:	f004 f935 	bl	8007a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200006f4 	.word	0x200006f4

08003818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800381c:	4802      	ldr	r0, [pc, #8]	@ (8003828 <OTG_FS_IRQHandler+0x10>)
 800381e:	f000 ff57 	bl	80046d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200055c4 	.word	0x200055c4

0800382c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
	return 1;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <_kill>:

int _kill(int pid, int sig)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003846:	f00e fe77 	bl	8012538 <__errno>
 800384a:	4603      	mov	r3, r0
 800384c:	2216      	movs	r2, #22
 800384e:	601a      	str	r2, [r3, #0]
	return -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_exit>:

void _exit (int status)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003864:	f04f 31ff 	mov.w	r1, #4294967295
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffe7 	bl	800383c <_kill>
	while (1) {}		/* Make sure we hang here */
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <_exit+0x12>

08003872 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e00a      	b.n	800389a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003884:	f3af 8000 	nop.w
 8003888:	4601      	mov	r1, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	60ba      	str	r2, [r7, #8]
 8003890:	b2ca      	uxtb	r2, r1
 8003892:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3301      	adds	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	dbf0      	blt.n	8003884 <_read+0x12>
	}

return len;
 80038a2:	687b      	ldr	r3, [r7, #4]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e009      	b.n	80038d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	60ba      	str	r2, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3301      	adds	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	dbf1      	blt.n	80038be <_write+0x12>
	}
	return len;
 80038da:	687b      	ldr	r3, [r7, #4]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_close>:

int _close(int file)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	return -1;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800390c:	605a      	str	r2, [r3, #4]
	return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <_isatty>:

int _isatty(int file)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	return 1;
 8003924:	2301      	movs	r3, #1
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
	return 0;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003954:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <_sbrk+0x5c>)
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <_sbrk+0x60>)
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003960:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <_sbrk+0x64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <_sbrk+0x64>)
 800396a:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <_sbrk+0x68>)
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800396e:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <_sbrk+0x64>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800397c:	f00e fddc 	bl	8012538 <__errno>
 8003980:	4603      	mov	r3, r0
 8003982:	220c      	movs	r2, #12
 8003984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	e009      	b.n	80039a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800398c:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <_sbrk+0x64>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	4a05      	ldr	r2, [pc, #20]	@ (80039b0 <_sbrk+0x64>)
 800399c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20020000 	.word	0x20020000
 80039ac:	00000400 	.word	0x00000400
 80039b0:	200007c8 	.word	0x200007c8
 80039b4:	20005a18 	.word	0x20005a18

080039b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <SystemInit+0x20>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	4a05      	ldr	r2, [pc, #20]	@ (80039d8 <SystemInit+0x20>)
 80039c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039e0:	480d      	ldr	r0, [pc, #52]	@ (8003a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039e2:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e8:	e002      	b.n	80039f0 <LoopCopyDataInit>

080039ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ee:	3304      	adds	r3, #4

080039f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f4:	d3f9      	bcc.n	80039ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039fc:	e001      	b.n	8003a02 <LoopFillZerobss>

080039fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a00:	3204      	adds	r2, #4

08003a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a04:	d3fb      	bcc.n	80039fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a06:	f7ff ffd7 	bl	80039b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a0a:	f00e fd9b 	bl	8012544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a0e:	f7ff f8f7 	bl	8002c00 <main>
  bx  lr    
 8003a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a1c:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8003a20:	08015c54 	.word	0x08015c54
  ldr r2, =_sbss
 8003a24:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8003a28:	20005a14 	.word	0x20005a14

08003a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a2c:	e7fe      	b.n	8003a2c <ADC_IRQHandler>
	...

08003a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a34:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_Init+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <HAL_Init+0x40>)
 8003a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_Init+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <HAL_Init+0x40>)
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4c:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_Init+0x40>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <HAL_Init+0x40>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f000 f8fc 	bl	8003c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7ff fdfc 	bl	800365c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a64:	f7ff fc32 	bl	80032cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023c00 	.word	0x40023c00

08003a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_IncTick+0x20>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_IncTick+0x24>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4a04      	ldr	r2, [pc, #16]	@ (8003a98 <HAL_IncTick+0x24>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000234 	.word	0x20000234
 8003a98:	200007cc 	.word	0x200007cc

08003a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <HAL_GetTick+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200007cc 	.word	0x200007cc

08003ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff ffee 	bl	8003a9c <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d005      	beq.n	8003ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <HAL_Delay+0x44>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ada:	bf00      	nop
 8003adc:	f7ff ffde 	bl	8003a9c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d8f7      	bhi.n	8003adc <HAL_Delay+0x28>
  {
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000234 	.word	0x20000234

08003afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b48:	4b04      	ldr	r3, [pc, #16]	@ (8003b5c <__NVIC_GetPriorityGrouping+0x18>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	f003 0307 	and.w	r3, r3, #7
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db0b      	blt.n	8003b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	f003 021f 	and.w	r2, r3, #31
 8003b78:	4907      	ldr	r1, [pc, #28]	@ (8003b98 <__NVIC_EnableIRQ+0x38>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2001      	movs	r0, #1
 8003b82:	fa00 f202 	lsl.w	r2, r0, r2
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	db0a      	blt.n	8003bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <__NVIC_SetPriority+0x4c>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc4:	e00a      	b.n	8003bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4908      	ldr	r1, [pc, #32]	@ (8003bec <__NVIC_SetPriority+0x50>)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3b04      	subs	r3, #4
 8003bd4:	0112      	lsls	r2, r2, #4
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	440b      	add	r3, r1
 8003bda:	761a      	strb	r2, [r3, #24]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000e100 	.word	0xe000e100
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f1c3 0307 	rsb	r3, r3, #7
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	bf28      	it	cs
 8003c0e:	2304      	movcs	r3, #4
 8003c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d902      	bls.n	8003c20 <NVIC_EncodePriority+0x30>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3b03      	subs	r3, #3
 8003c1e:	e000      	b.n	8003c22 <NVIC_EncodePriority+0x32>
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	401a      	ands	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43d9      	mvns	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	4313      	orrs	r3, r2
         );
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff4c 	bl	8003afc <__NVIC_SetPriorityGrouping>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7e:	f7ff ff61 	bl	8003b44 <__NVIC_GetPriorityGrouping>
 8003c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6978      	ldr	r0, [r7, #20]
 8003c8a:	f7ff ffb1 	bl	8003bf0 <NVIC_EncodePriority>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff80 	bl	8003b9c <__NVIC_SetPriority>
}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff54 	bl	8003b60 <__NVIC_EnableIRQ>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cce:	f7ff fee5 	bl	8003a9c <HAL_GetTick>
 8003cd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2280      	movs	r2, #128	@ 0x80
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e052      	b.n	8003d98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0216 	bic.w	r2, r2, #22
 8003d00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_DMA_Abort+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0208 	bic.w	r2, r2, #8
 8003d30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d42:	e013      	b.n	8003d6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d44:	f7ff feaa 	bl	8003a9c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d90c      	bls.n	8003d6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e015      	b.n	8003d98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e4      	bne.n	8003d44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	223f      	movs	r2, #63	@ 0x3f
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2280      	movs	r2, #128	@ 0x80
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00c      	b.n	8003dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2205      	movs	r2, #5
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e16b      	b.n	80040d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e00:	2201      	movs	r2, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f040 815a 	bne.w	80040d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d005      	beq.n	8003e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d130      	bne.n	8003e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 0201 	and.w	r2, r3, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d017      	beq.n	8003ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2203      	movs	r2, #3
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d123      	bne.n	8003f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	08da      	lsrs	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3208      	adds	r2, #8
 8003ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80b4 	beq.w	80040d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b60      	ldr	r3, [pc, #384]	@ (80040f0 <HAL_GPIO_Init+0x30c>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	4a5f      	ldr	r2, [pc, #380]	@ (80040f0 <HAL_GPIO_Init+0x30c>)
 8003f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80040f0 <HAL_GPIO_Init+0x30c>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f86:	4a5b      	ldr	r2, [pc, #364]	@ (80040f4 <HAL_GPIO_Init+0x310>)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a52      	ldr	r2, [pc, #328]	@ (80040f8 <HAL_GPIO_Init+0x314>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d02b      	beq.n	800400a <HAL_GPIO_Init+0x226>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a51      	ldr	r2, [pc, #324]	@ (80040fc <HAL_GPIO_Init+0x318>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d025      	beq.n	8004006 <HAL_GPIO_Init+0x222>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a50      	ldr	r2, [pc, #320]	@ (8004100 <HAL_GPIO_Init+0x31c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <HAL_GPIO_Init+0x21e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8004104 <HAL_GPIO_Init+0x320>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d019      	beq.n	8003ffe <HAL_GPIO_Init+0x21a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8004108 <HAL_GPIO_Init+0x324>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_GPIO_Init+0x216>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800410c <HAL_GPIO_Init+0x328>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8004110 <HAL_GPIO_Init+0x32c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <HAL_GPIO_Init+0x20e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8004114 <HAL_GPIO_Init+0x330>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_GPIO_Init+0x20a>
 8003fea:	2307      	movs	r3, #7
 8003fec:	e00e      	b.n	800400c <HAL_GPIO_Init+0x228>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	e00c      	b.n	800400c <HAL_GPIO_Init+0x228>
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	e00a      	b.n	800400c <HAL_GPIO_Init+0x228>
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	e008      	b.n	800400c <HAL_GPIO_Init+0x228>
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	e006      	b.n	800400c <HAL_GPIO_Init+0x228>
 8003ffe:	2303      	movs	r3, #3
 8004000:	e004      	b.n	800400c <HAL_GPIO_Init+0x228>
 8004002:	2302      	movs	r3, #2
 8004004:	e002      	b.n	800400c <HAL_GPIO_Init+0x228>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_GPIO_Init+0x228>
 800400a:	2300      	movs	r3, #0
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f002 0203 	and.w	r2, r2, #3
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	4093      	lsls	r3, r2
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800401c:	4935      	ldr	r1, [pc, #212]	@ (80040f4 <HAL_GPIO_Init+0x310>)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3302      	adds	r3, #2
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_GPIO_Init+0x334>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800404e:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <HAL_GPIO_Init+0x334>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004054:	4b30      	ldr	r3, [pc, #192]	@ (8004118 <HAL_GPIO_Init+0x334>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004078:	4a27      	ldr	r2, [pc, #156]	@ (8004118 <HAL_GPIO_Init+0x334>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800407e:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <HAL_GPIO_Init+0x334>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <HAL_GPIO_Init+0x334>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_GPIO_Init+0x334>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040cc:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <HAL_GPIO_Init+0x334>)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	f67f ae90 	bls.w	8003e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40013800 	.word	0x40013800
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020400 	.word	0x40020400
 8004100:	40020800 	.word	0x40020800
 8004104:	40020c00 	.word	0x40020c00
 8004108:	40021000 	.word	0x40021000
 800410c:	40021400 	.word	0x40021400
 8004110:	40021800 	.word	0x40021800
 8004114:	40021c00 	.word	0x40021c00
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e001      	b.n	800413e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	041a      	lsls	r2, r3, #16
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43d9      	mvns	r1, r3
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	400b      	ands	r3, r1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	619a      	str	r2, [r3, #24]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041be:	4b08      	ldr	r3, [pc, #32]	@ (80041e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d006      	beq.n	80041d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ca:	4a05      	ldr	r2, [pc, #20]	@ (80041e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f806 	bl	80041e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80041fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fc:	b08f      	sub	sp, #60	@ 0x3c
 80041fe:	af0a      	add	r7, sp, #40	@ 0x28
 8004200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e054      	b.n	80042b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f00c f8d2 	bl	80103d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2203      	movs	r2, #3
 8004230:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fbee 	bl	8008a2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	687e      	ldr	r6, [r7, #4]
 8004258:	466d      	mov	r5, sp
 800425a:	f106 0410 	add.w	r4, r6, #16
 800425e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800426a:	e885 0003 	stmia.w	r5, {r0, r1}
 800426e:	1d33      	adds	r3, r6, #4
 8004270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	f004 fb68 	bl	8008948 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fbe5 	bl	8008a4e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	687e      	ldr	r6, [r7, #4]
 800428c:	466d      	mov	r5, sp
 800428e:	f106 0410 	add.w	r4, r6, #16
 8004292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800429a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800429e:	e885 0003 	stmia.w	r5, {r0, r1}
 80042a2:	1d33      	adds	r3, r6, #4
 80042a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a6:	6838      	ldr	r0, [r7, #0]
 80042a8:	f004 fd6e 	bl	8008d88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80042be:	b590      	push	{r4, r7, lr}
 80042c0:	b089      	sub	sp, #36	@ 0x24
 80042c2:	af04      	add	r7, sp, #16
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4603      	mov	r3, r0
 80042ce:	70fb      	strb	r3, [r7, #3]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70bb      	strb	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_HCD_HC_Init+0x28>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e076      	b.n	80043d4 <HAL_HCD_HC_Init+0x116>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	212c      	movs	r1, #44	@ 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	333d      	adds	r3, #61	@ 0x3d
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	212c      	movs	r1, #44	@ 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	3338      	adds	r3, #56	@ 0x38
 800430e:	787a      	ldrb	r2, [r7, #1]
 8004310:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	212c      	movs	r1, #44	@ 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3340      	adds	r3, #64	@ 0x40
 8004320:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004322:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	212c      	movs	r1, #44	@ 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	3339      	adds	r3, #57	@ 0x39
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	212c      	movs	r1, #44	@ 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	333f      	adds	r3, #63	@ 0x3f
 8004344:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004348:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	78ba      	ldrb	r2, [r7, #2]
 800434e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004352:	b2d0      	uxtb	r0, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	212c      	movs	r1, #44	@ 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	333a      	adds	r3, #58	@ 0x3a
 8004360:	4602      	mov	r2, r0
 8004362:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004368:	2b00      	cmp	r3, #0
 800436a:	da09      	bge.n	8004380 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	212c      	movs	r1, #44	@ 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	333b      	adds	r3, #59	@ 0x3b
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e008      	b.n	8004392 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	212c      	movs	r1, #44	@ 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	333b      	adds	r3, #59	@ 0x3b
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	212c      	movs	r1, #44	@ 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	333c      	adds	r3, #60	@ 0x3c
 80043a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	787c      	ldrb	r4, [r7, #1]
 80043ac:	78ba      	ldrb	r2, [r7, #2]
 80043ae:	78f9      	ldrb	r1, [r7, #3]
 80043b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4623      	mov	r3, r4
 80043c2:	f004 fe67 	bl	8009094 <USB_HC_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd90      	pop	{r4, r7, pc}

080043dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_HCD_HC_Halt+0x1e>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e00f      	b.n	800441a <HAL_HCD_HC_Halt+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f005 f8b7 	bl	800957e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4603      	mov	r3, r0
 8004434:	70fb      	strb	r3, [r7, #3]
 8004436:	460b      	mov	r3, r1
 8004438:	70bb      	strb	r3, [r7, #2]
 800443a:	4613      	mov	r3, r2
 800443c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	212c      	movs	r1, #44	@ 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	333b      	adds	r3, #59	@ 0x3b
 800444c:	78ba      	ldrb	r2, [r7, #2]
 800444e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	212c      	movs	r1, #44	@ 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	333f      	adds	r3, #63	@ 0x3f
 800445e:	787a      	ldrb	r2, [r7, #1]
 8004460:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004462:	7c3b      	ldrb	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d112      	bne.n	800448e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	212c      	movs	r1, #44	@ 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3342      	adds	r3, #66	@ 0x42
 8004476:	2203      	movs	r2, #3
 8004478:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	212c      	movs	r1, #44	@ 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	333d      	adds	r3, #61	@ 0x3d
 8004488:	7f3a      	ldrb	r2, [r7, #28]
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e008      	b.n	80044a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	212c      	movs	r1, #44	@ 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3342      	adds	r3, #66	@ 0x42
 800449c:	2202      	movs	r2, #2
 800449e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80044a0:	787b      	ldrb	r3, [r7, #1]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	f200 80c6 	bhi.w	8004634 <HAL_HCD_HC_SubmitRequest+0x210>
 80044a8:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	08004621 	.word	0x08004621
 80044b8:	08004525 	.word	0x08004525
 80044bc:	080045a3 	.word	0x080045a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80044c0:	7c3b      	ldrb	r3, [r7, #16]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 80b8 	bne.w	8004638 <HAL_HCD_HC_SubmitRequest+0x214>
 80044c8:	78bb      	ldrb	r3, [r7, #2]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80b4 	bne.w	8004638 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80044d0:	8b3b      	ldrh	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	212c      	movs	r1, #44	@ 0x2c
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	3355      	adds	r3, #85	@ 0x55
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	212c      	movs	r1, #44	@ 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3355      	adds	r3, #85	@ 0x55
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	212c      	movs	r1, #44	@ 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3342      	adds	r3, #66	@ 0x42
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800450e:	e093      	b.n	8004638 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	212c      	movs	r1, #44	@ 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3342      	adds	r3, #66	@ 0x42
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]
      break;
 8004522:	e089      	b.n	8004638 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004524:	78bb      	ldrb	r3, [r7, #2]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11d      	bne.n	8004566 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	212c      	movs	r1, #44	@ 0x2c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	3355      	adds	r3, #85	@ 0x55
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	212c      	movs	r1, #44	@ 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3342      	adds	r3, #66	@ 0x42
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004550:	e073      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	212c      	movs	r1, #44	@ 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3342      	adds	r3, #66	@ 0x42
 8004560:	2202      	movs	r2, #2
 8004562:	701a      	strb	r2, [r3, #0]
      break;
 8004564:	e069      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	212c      	movs	r1, #44	@ 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3354      	adds	r3, #84	@ 0x54
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	212c      	movs	r1, #44	@ 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3342      	adds	r3, #66	@ 0x42
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
      break;
 800458c:	e055      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	212c      	movs	r1, #44	@ 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3342      	adds	r3, #66	@ 0x42
 800459c:	2202      	movs	r2, #2
 800459e:	701a      	strb	r2, [r3, #0]
      break;
 80045a0:	e04b      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80045a2:	78bb      	ldrb	r3, [r7, #2]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11d      	bne.n	80045e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	212c      	movs	r1, #44	@ 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	3355      	adds	r3, #85	@ 0x55
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	212c      	movs	r1, #44	@ 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3342      	adds	r3, #66	@ 0x42
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045ce:	e034      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	212c      	movs	r1, #44	@ 0x2c
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	3342      	adds	r3, #66	@ 0x42
 80045de:	2202      	movs	r2, #2
 80045e0:	701a      	strb	r2, [r3, #0]
      break;
 80045e2:	e02a      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	212c      	movs	r1, #44	@ 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3354      	adds	r3, #84	@ 0x54
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	212c      	movs	r1, #44	@ 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3342      	adds	r3, #66	@ 0x42
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
      break;
 800460a:	e016      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	212c      	movs	r1, #44	@ 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	3342      	adds	r3, #66	@ 0x42
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
      break;
 800461e:	e00c      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	212c      	movs	r1, #44	@ 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	3342      	adds	r3, #66	@ 0x42
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
      break;
 8004632:	e002      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004638:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	212c      	movs	r1, #44	@ 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3344      	adds	r3, #68	@ 0x44
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	8b3a      	ldrh	r2, [r7, #24]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	202c      	movs	r0, #44	@ 0x2c
 8004654:	fb00 f303 	mul.w	r3, r0, r3
 8004658:	440b      	add	r3, r1
 800465a:	334c      	adds	r3, #76	@ 0x4c
 800465c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	212c      	movs	r1, #44	@ 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3360      	adds	r3, #96	@ 0x60
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	212c      	movs	r1, #44	@ 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3350      	adds	r3, #80	@ 0x50
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	212c      	movs	r1, #44	@ 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3339      	adds	r3, #57	@ 0x39
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	212c      	movs	r1, #44	@ 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	3361      	adds	r3, #97	@ 0x61
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	222c      	movs	r2, #44	@ 0x2c
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	3338      	adds	r3, #56	@ 0x38
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	18d1      	adds	r1, r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	f004 fe0a 	bl	80092d8 <USB_HC_StartXfer>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 fb0b 	bl	8008d02 <USB_GetMode>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	f040 80f6 	bne.w	80048e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 faef 	bl	8008cdc <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80ec 	beq.w	80048de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f004 fae6 	bl	8008cdc <USB_ReadInterrupts>
 8004710:	4603      	mov	r3, r0
 8004712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800471a:	d104      	bne.n	8004726 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004724:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 fad6 	bl	8008cdc <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473a:	d104      	bne.n	8004746 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004744:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f004 fac6 	bl	8008cdc <USB_ReadInterrupts>
 8004750:	4603      	mov	r3, r0
 8004752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800475a:	d104      	bne.n	8004766 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004764:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f004 fab6 	bl	8008cdc <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2202      	movs	r2, #2
 8004780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f004 faa8 	bl	8008cdc <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004796:	d11c      	bne.n	80047d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80047a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80047b2:	2110      	movs	r1, #16
 80047b4:	6938      	ldr	r0, [r7, #16]
 80047b6:	f004 f997 	bl	8008ae8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047ba:	6938      	ldr	r0, [r7, #16]
 80047bc:	f004 f9c8 	bl	8008b50 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f004 fb9e 	bl	8008f08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f00b fe7d 	bl	80104cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 fa80 	bl	8008cdc <USB_ReadInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047e6:	d102      	bne.n	80047ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 f89e 	bl	800592a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fa72 	bl	8008cdc <USB_ReadInterrupts>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d106      	bne.n	8004810 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f00b fe46 	bl	8010494 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2208      	movs	r2, #8
 800480e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fa61 	bl	8008cdc <USB_ReadInterrupts>
 800481a:	4603      	mov	r3, r0
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d101      	bne.n	8004828 <HAL_HCD_IRQHandler+0x158>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_HCD_IRQHandler+0x15a>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0210 	bic.w	r2, r2, #16
 800483c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 ffa1 	bl	8005786 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0210 	orr.w	r2, r2, #16
 8004852:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f004 fa3f 	bl	8008cdc <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004868:	d13a      	bne.n	80048e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fe74 	bl	800955c <USB_HC_ReadInterrupt>
 8004874:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e025      	b.n	80048c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d018      	beq.n	80048c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a6:	d106      	bne.n	80048b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8ab 	bl	8004a0a <HCD_HC_IN_IRQHandler>
 80048b4:	e005      	b.n	80048c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fbf9 	bl	80050b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3301      	adds	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3d4      	bcc.n	800487c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048da:	615a      	str	r2, [r3, #20]
 80048dc:	e000      	b.n	80048e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80048de:	bf00      	nop
    }
  }
}
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_HCD_Start+0x16>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e013      	b.n	8004924 <HAL_HCD_Start+0x3e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f004 fb60 	bl	8008fd0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f004 f878 	bl	8008a0a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_HCD_Stop+0x16>
 800493e:	2302      	movs	r3, #2
 8004940:	e00d      	b.n	800495e <HAL_HCD_Stop+0x32>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f004 ff4e 	bl	80097f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f004 fb02 	bl	8008f7c <USB_ResetPort>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	212c      	movs	r1, #44	@ 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	3360      	adds	r3, #96	@ 0x60
 800499c:	781b      	ldrb	r3, [r3, #0]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	212c      	movs	r1, #44	@ 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	3350      	adds	r3, #80	@ 0x50
 80049c4:	681b      	ldr	r3, [r3, #0]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 fb46 	bl	8009070 <USB_GetCurrentFrame>
 80049e4:	4603      	mov	r3, r0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f004 fb21 	bl	8009042 <USB_GetHostSpeed>
 8004a00:	4603      	mov	r3, r0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d11a      	bne.n	8004a70 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	2304      	movs	r3, #4
 8004a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	212c      	movs	r1, #44	@ 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3361      	adds	r3, #97	@ 0x61
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f004 fd88 	bl	800957e <USB_HC_Halt>
 8004a6e:	e0af      	b.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a86:	d11b      	bne.n	8004ac0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	212c      	movs	r1, #44	@ 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3361      	adds	r3, #97	@ 0x61
 8004aaa:	2207      	movs	r2, #7
 8004aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 fd60 	bl	800957e <USB_HC_Halt>
 8004abe:	e087      	b.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d109      	bne.n	8004aea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	6093      	str	r3, [r2, #8]
 8004ae8:	e072      	b.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11a      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2308      	movs	r3, #8
 8004b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	212c      	movs	r1, #44	@ 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3361      	adds	r3, #97	@ 0x61
 8004b20:	2205      	movs	r2, #5
 8004b22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 fd25 	bl	800957e <USB_HC_Halt>
 8004b34:	e04c      	b.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4c:	d11b      	bne.n	8004b86 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	212c      	movs	r1, #44	@ 0x2c
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3361      	adds	r3, #97	@ 0x61
 8004b70:	2208      	movs	r2, #8
 8004b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f004 fcfd 	bl	800957e <USB_HC_Halt>
 8004b84:	e024      	b.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b98:	2b80      	cmp	r3, #128	@ 0x80
 8004b9a:	d119      	bne.n	8004bd0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	212c      	movs	r1, #44	@ 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	3361      	adds	r3, #97	@ 0x61
 8004bbc:	2206      	movs	r2, #6
 8004bbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 fcd7 	bl	800957e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be6:	d112      	bne.n	8004c0e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 fcc3 	bl	800957e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c04:	461a      	mov	r2, r3
 8004c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c0c:	e24e      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 80df 	bne.w	8004de4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d019      	beq.n	8004c62 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	212c      	movs	r1, #44	@ 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3348      	adds	r3, #72	@ 0x48
 8004c3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	0159      	lsls	r1, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c50:	1ad2      	subs	r2, r2, r3
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	202c      	movs	r0, #44	@ 0x2c
 8004c58:	fb00 f303 	mul.w	r3, r0, r3
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3350      	adds	r3, #80	@ 0x50
 8004c60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	212c      	movs	r1, #44	@ 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3361      	adds	r3, #97	@ 0x61
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	212c      	movs	r1, #44	@ 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	335c      	adds	r3, #92	@ 0x5c
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	2301      	movs	r3, #1
 8004c96:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	212c      	movs	r1, #44	@ 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	333f      	adds	r3, #63	@ 0x3f
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	212c      	movs	r1, #44	@ 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	333f      	adds	r3, #63	@ 0x3f
 8004cba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d111      	bne.n	8004ce4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fc57 	bl	800957e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2310      	movs	r3, #16
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	e03a      	b.n	8004d5a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	212c      	movs	r1, #44	@ 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	333f      	adds	r3, #63	@ 0x3f
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d009      	beq.n	8004d0c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	212c      	movs	r1, #44	@ 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	333f      	adds	r3, #63	@ 0x3f
 8004d06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d126      	bne.n	8004d5a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d2a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	212c      	movs	r1, #44	@ 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3360      	adds	r3, #96	@ 0x60
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	b2d9      	uxtb	r1, r3
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	202c      	movs	r0, #44	@ 0x2c
 8004d48:	fb00 f303 	mul.w	r3, r0, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3360      	adds	r3, #96	@ 0x60
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f00b fbc7 	bl	80104e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d12b      	bne.n	8004dba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	212c      	movs	r1, #44	@ 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3348      	adds	r3, #72	@ 0x48
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	202c      	movs	r0, #44	@ 0x2c
 8004d78:	fb00 f202 	mul.w	r2, r0, r2
 8004d7c:	440a      	add	r2, r1
 8004d7e:	3240      	adds	r2, #64	@ 0x40
 8004d80:	8812      	ldrh	r2, [r2, #0]
 8004d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 818e 	beq.w	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	212c      	movs	r1, #44	@ 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3354      	adds	r3, #84	@ 0x54
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2d8      	uxtb	r0, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	212c      	movs	r1, #44	@ 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3354      	adds	r3, #84	@ 0x54
 8004db4:	4602      	mov	r2, r0
 8004db6:	701a      	strb	r2, [r3, #0]
}
 8004db8:	e178      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	212c      	movs	r1, #44	@ 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3354      	adds	r3, #84	@ 0x54
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f083 0301 	eor.w	r3, r3, #1
 8004dce:	b2d8      	uxtb	r0, r3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	212c      	movs	r1, #44	@ 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3354      	adds	r3, #84	@ 0x54
 8004dde:	4602      	mov	r2, r0
 8004de0:	701a      	strb	r2, [r3, #0]
}
 8004de2:	e163      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	f040 80f6 	bne.w	8004fe8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	212c      	movs	r1, #44	@ 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3361      	adds	r3, #97	@ 0x61
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d109      	bne.n	8004e24 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	212c      	movs	r1, #44	@ 0x2c
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3360      	adds	r3, #96	@ 0x60
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e0c9      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	212c      	movs	r1, #44	@ 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3361      	adds	r3, #97	@ 0x61
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d109      	bne.n	8004e4c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	212c      	movs	r1, #44	@ 0x2c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3360      	adds	r3, #96	@ 0x60
 8004e46:	2205      	movs	r2, #5
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e0b5      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	@ 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3361      	adds	r3, #97	@ 0x61
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d009      	beq.n	8004e74 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	212c      	movs	r1, #44	@ 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3361      	adds	r3, #97	@ 0x61
 8004e6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d150      	bne.n	8004f16 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	212c      	movs	r1, #44	@ 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	335c      	adds	r3, #92	@ 0x5c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	202c      	movs	r0, #44	@ 0x2c
 8004e8c:	fb00 f303 	mul.w	r3, r0, r3
 8004e90:	440b      	add	r3, r1
 8004e92:	335c      	adds	r3, #92	@ 0x5c
 8004e94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	212c      	movs	r1, #44	@ 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	335c      	adds	r3, #92	@ 0x5c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d912      	bls.n	8004ed0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	212c      	movs	r1, #44	@ 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	335c      	adds	r3, #92	@ 0x5c
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	212c      	movs	r1, #44	@ 0x2c
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3360      	adds	r3, #96	@ 0x60
 8004eca:	2204      	movs	r2, #4
 8004ecc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ece:	e073      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	212c      	movs	r1, #44	@ 0x2c
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	3360      	adds	r3, #96	@ 0x60
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ef8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f14:	e050      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	212c      	movs	r1, #44	@ 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3361      	adds	r3, #97	@ 0x61
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d122      	bne.n	8004f70 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	212c      	movs	r1, #44	@ 0x2c
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	3360      	adds	r3, #96	@ 0x60
 8004f38:	2202      	movs	r2, #2
 8004f3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e023      	b.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	212c      	movs	r1, #44	@ 0x2c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3361      	adds	r3, #97	@ 0x61
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	d119      	bne.n	8004fb8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	212c      	movs	r1, #44	@ 0x2c
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	335c      	adds	r3, #92	@ 0x5c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	202c      	movs	r0, #44	@ 0x2c
 8004f9c:	fb00 f303 	mul.w	r3, r0, r3
 8004fa0:	440b      	add	r3, r1
 8004fa2:	335c      	adds	r3, #92	@ 0x5c
 8004fa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	212c      	movs	r1, #44	@ 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3360      	adds	r3, #96	@ 0x60
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	b2d9      	uxtb	r1, r3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	202c      	movs	r0, #44	@ 0x2c
 8004fd4:	fb00 f303 	mul.w	r3, r0, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3360      	adds	r3, #96	@ 0x60
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f00b fa81 	bl	80104e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004fe6:	e061      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d156      	bne.n	80050ac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	212c      	movs	r1, #44	@ 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	333f      	adds	r3, #63	@ 0x3f
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d111      	bne.n	8005036 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	212c      	movs	r1, #44	@ 0x2c
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	4413      	add	r3, r2
 800501e:	335c      	adds	r3, #92	@ 0x5c
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f004 faa5 	bl	800957e <USB_HC_Halt>
 8005034:	e031      	b.n	800509a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	212c      	movs	r1, #44	@ 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	333f      	adds	r3, #63	@ 0x3f
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	212c      	movs	r1, #44	@ 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	333f      	adds	r3, #63	@ 0x3f
 8005058:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800505a:	2b02      	cmp	r3, #2
 800505c:	d11d      	bne.n	800509a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	212c      	movs	r1, #44	@ 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	335c      	adds	r3, #92	@ 0x5c
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	212c      	movs	r1, #44	@ 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3361      	adds	r3, #97	@ 0x61
 8005086:	2203      	movs	r2, #3
 8005088:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fa72 	bl	800957e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	2310      	movs	r3, #16
 80050aa:	6093      	str	r3, [r2, #8]
}
 80050ac:	bf00      	nop
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d11a      	bne.n	800511a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	461a      	mov	r2, r3
 80050f2:	2304      	movs	r3, #4
 80050f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	212c      	movs	r1, #44	@ 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	3361      	adds	r3, #97	@ 0x61
 8005104:	2206      	movs	r2, #6
 8005106:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f004 fa33 	bl	800957e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005118:	e331      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b20      	cmp	r3, #32
 800512e:	d12e      	bne.n	800518e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513c:	461a      	mov	r2, r3
 800513e:	2320      	movs	r3, #32
 8005140:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	212c      	movs	r1, #44	@ 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	333d      	adds	r3, #61	@ 0x3d
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	f040 8313 	bne.w	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	212c      	movs	r1, #44	@ 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	333d      	adds	r3, #61	@ 0x3d
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	212c      	movs	r1, #44	@ 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	3360      	adds	r3, #96	@ 0x60
 8005178:	2202      	movs	r2, #2
 800517a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f004 f9f9 	bl	800957e <USB_HC_Halt>
}
 800518c:	e2f7      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a4:	d112      	bne.n	80051cc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f004 f9da 	bl	800957e <USB_HC_Halt>
}
 80051ca:	e2d8      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d140      	bne.n	8005264 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	212c      	movs	r1, #44	@ 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	335c      	adds	r3, #92	@ 0x5c
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d111      	bne.n	800522e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	212c      	movs	r1, #44	@ 0x2c
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	333d      	adds	r3, #61	@ 0x3d
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	2340      	movs	r3, #64	@ 0x40
 800522c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523a:	461a      	mov	r2, r3
 800523c:	2301      	movs	r3, #1
 800523e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	212c      	movs	r1, #44	@ 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3361      	adds	r3, #97	@ 0x61
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f004 f98e 	bl	800957e <USB_HC_Halt>
}
 8005262:	e28c      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005276:	2b40      	cmp	r3, #64	@ 0x40
 8005278:	d12c      	bne.n	80052d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	212c      	movs	r1, #44	@ 0x2c
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3361      	adds	r3, #97	@ 0x61
 8005288:	2204      	movs	r2, #4
 800528a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	212c      	movs	r1, #44	@ 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	333d      	adds	r3, #61	@ 0x3d
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	212c      	movs	r1, #44	@ 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	335c      	adds	r3, #92	@ 0x5c
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f004 f95f 	bl	800957e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	2340      	movs	r3, #64	@ 0x40
 80052d0:	6093      	str	r3, [r2, #8]
}
 80052d2:	e254      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d11a      	bne.n	8005320 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f6:	461a      	mov	r2, r3
 80052f8:	2308      	movs	r3, #8
 80052fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	212c      	movs	r1, #44	@ 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3361      	adds	r3, #97	@ 0x61
 800530a:	2205      	movs	r2, #5
 800530c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f004 f930 	bl	800957e <USB_HC_Halt>
}
 800531e:	e22e      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b10      	cmp	r3, #16
 8005334:	d140      	bne.n	80053b8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	212c      	movs	r1, #44	@ 0x2c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	335c      	adds	r3, #92	@ 0x5c
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	212c      	movs	r1, #44	@ 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	3361      	adds	r3, #97	@ 0x61
 8005356:	2203      	movs	r2, #3
 8005358:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	212c      	movs	r1, #44	@ 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	333d      	adds	r3, #61	@ 0x3d
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	212c      	movs	r1, #44	@ 0x2c
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	4413      	add	r3, r2
 800537a:	333c      	adds	r3, #60	@ 0x3c
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	212c      	movs	r1, #44	@ 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	333d      	adds	r3, #61	@ 0x3d
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f004 f8ed 	bl	800957e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b0:	461a      	mov	r2, r3
 80053b2:	2310      	movs	r3, #16
 80053b4:	6093      	str	r3, [r2, #8]
}
 80053b6:	e1e2      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d164      	bne.n	8005498 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d111      	bne.n	80053fa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	212c      	movs	r1, #44	@ 0x2c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	3361      	adds	r3, #97	@ 0x61
 80053e4:	2206      	movs	r2, #6
 80053e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 f8c3 	bl	800957e <USB_HC_Halt>
 80053f8:	e044      	b.n	8005484 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	212c      	movs	r1, #44	@ 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	335c      	adds	r3, #92	@ 0x5c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	202c      	movs	r0, #44	@ 0x2c
 8005412:	fb00 f303 	mul.w	r3, r0, r3
 8005416:	440b      	add	r3, r1
 8005418:	335c      	adds	r3, #92	@ 0x5c
 800541a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	212c      	movs	r1, #44	@ 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	335c      	adds	r3, #92	@ 0x5c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d920      	bls.n	8005472 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	212c      	movs	r1, #44	@ 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	335c      	adds	r3, #92	@ 0x5c
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	212c      	movs	r1, #44	@ 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	3360      	adds	r3, #96	@ 0x60
 8005450:	2204      	movs	r2, #4
 8005452:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	b2d9      	uxtb	r1, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	202c      	movs	r0, #44	@ 0x2c
 800545e:	fb00 f303 	mul.w	r3, r0, r3
 8005462:	4413      	add	r3, r2
 8005464:	3360      	adds	r3, #96	@ 0x60
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f00b f83c 	bl	80104e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005470:	e008      	b.n	8005484 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	212c      	movs	r1, #44	@ 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	3360      	adds	r3, #96	@ 0x60
 8005480:	2202      	movs	r2, #2
 8005482:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005490:	461a      	mov	r2, r3
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	6093      	str	r3, [r2, #8]
}
 8005496:	e172      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ae:	d11b      	bne.n	80054e8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	@ 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3361      	adds	r3, #97	@ 0x61
 80054be:	2208      	movs	r2, #8
 80054c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 f856 	bl	800957e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054de:	461a      	mov	r2, r3
 80054e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054e4:	6093      	str	r3, [r2, #8]
}
 80054e6:	e14a      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	f040 813f 	bne.w	800577e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	212c      	movs	r1, #44	@ 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3361      	adds	r3, #97	@ 0x61
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d17d      	bne.n	8005610 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	212c      	movs	r1, #44	@ 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3360      	adds	r3, #96	@ 0x60
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	212c      	movs	r1, #44	@ 0x2c
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	4413      	add	r3, r2
 8005532:	333f      	adds	r3, #63	@ 0x3f
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d00a      	beq.n	8005550 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	212c      	movs	r1, #44	@ 0x2c
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	333f      	adds	r3, #63	@ 0x3f
 8005548:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800554a:	2b03      	cmp	r3, #3
 800554c:	f040 8100 	bne.w	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d113      	bne.n	8005580 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	212c      	movs	r1, #44	@ 0x2c
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	3355      	adds	r3, #85	@ 0x55
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f083 0301 	eor.w	r3, r3, #1
 800556c:	b2d8      	uxtb	r0, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	212c      	movs	r1, #44	@ 0x2c
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	3355      	adds	r3, #85	@ 0x55
 800557c:	4602      	mov	r2, r0
 800557e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	f040 80e3 	bne.w	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	212c      	movs	r1, #44	@ 0x2c
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	334c      	adds	r3, #76	@ 0x4c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80d8 	beq.w	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	212c      	movs	r1, #44	@ 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	334c      	adds	r3, #76	@ 0x4c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	202c      	movs	r0, #44	@ 0x2c
 80055b6:	fb00 f202 	mul.w	r2, r0, r2
 80055ba:	440a      	add	r2, r1
 80055bc:	3240      	adds	r2, #64	@ 0x40
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	4413      	add	r3, r2
 80055c2:	3b01      	subs	r3, #1
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	202c      	movs	r0, #44	@ 0x2c
 80055ca:	fb00 f202 	mul.w	r2, r0, r2
 80055ce:	440a      	add	r2, r1
 80055d0:	3240      	adds	r2, #64	@ 0x40
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80b5 	beq.w	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	212c      	movs	r1, #44	@ 0x2c
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	3355      	adds	r3, #85	@ 0x55
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f083 0301 	eor.w	r3, r3, #1
 80055fa:	b2d8      	uxtb	r0, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	212c      	movs	r1, #44	@ 0x2c
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	3355      	adds	r3, #85	@ 0x55
 800560a:	4602      	mov	r2, r0
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e09f      	b.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	212c      	movs	r1, #44	@ 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3361      	adds	r3, #97	@ 0x61
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d109      	bne.n	8005638 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	212c      	movs	r1, #44	@ 0x2c
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	3360      	adds	r3, #96	@ 0x60
 8005632:	2202      	movs	r2, #2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e08b      	b.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	212c      	movs	r1, #44	@ 0x2c
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	3361      	adds	r3, #97	@ 0x61
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d109      	bne.n	8005660 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	212c      	movs	r1, #44	@ 0x2c
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	3360      	adds	r3, #96	@ 0x60
 800565a:	2202      	movs	r2, #2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e077      	b.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	212c      	movs	r1, #44	@ 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	3361      	adds	r3, #97	@ 0x61
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b05      	cmp	r3, #5
 8005672:	d109      	bne.n	8005688 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	212c      	movs	r1, #44	@ 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3360      	adds	r3, #96	@ 0x60
 8005682:	2205      	movs	r2, #5
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e063      	b.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	212c      	movs	r1, #44	@ 0x2c
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	3361      	adds	r3, #97	@ 0x61
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d009      	beq.n	80056b0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	212c      	movs	r1, #44	@ 0x2c
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	3361      	adds	r3, #97	@ 0x61
 80056aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d14f      	bne.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	212c      	movs	r1, #44	@ 0x2c
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	335c      	adds	r3, #92	@ 0x5c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	202c      	movs	r0, #44	@ 0x2c
 80056c8:	fb00 f303 	mul.w	r3, r0, r3
 80056cc:	440b      	add	r3, r1
 80056ce:	335c      	adds	r3, #92	@ 0x5c
 80056d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	212c      	movs	r1, #44	@ 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	335c      	adds	r3, #92	@ 0x5c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d912      	bls.n	800570c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	212c      	movs	r1, #44	@ 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	335c      	adds	r3, #92	@ 0x5c
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	212c      	movs	r1, #44	@ 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3360      	adds	r3, #96	@ 0x60
 8005706:	2204      	movs	r2, #4
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e021      	b.n	8005750 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	212c      	movs	r1, #44	@ 0x2c
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	3360      	adds	r3, #96	@ 0x60
 800571a:	2202      	movs	r2, #2
 800571c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005734:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800573c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574a:	461a      	mov	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	2302      	movs	r3, #2
 8005760:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	b2d9      	uxtb	r1, r3
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	202c      	movs	r0, #44	@ 0x2c
 800576c:	fb00 f303 	mul.w	r3, r0, r3
 8005770:	4413      	add	r3, r2
 8005772:	3360      	adds	r3, #96	@ 0x60
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f00a feb5 	bl	80104e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800577e:	bf00      	nop
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b08a      	sub	sp, #40	@ 0x28
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	0c5b      	lsrs	r3, r3, #17
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d004      	beq.n	80057cc <HCD_RXQLVL_IRQHandler+0x46>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	f000 80a9 	beq.w	800591c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057ca:	e0aa      	b.n	8005922 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a6 	beq.w	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	212c      	movs	r1, #44	@ 0x2c
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	4413      	add	r3, r2
 80057e0:	3344      	adds	r3, #68	@ 0x44
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 809b 	beq.w	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	212c      	movs	r1, #44	@ 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	3350      	adds	r3, #80	@ 0x50
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	441a      	add	r2, r3
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	202c      	movs	r0, #44	@ 0x2c
 8005804:	fb00 f303 	mul.w	r3, r0, r3
 8005808:	440b      	add	r3, r1
 800580a:	334c      	adds	r3, #76	@ 0x4c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d87a      	bhi.n	8005908 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	212c      	movs	r1, #44	@ 0x2c
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	3344      	adds	r3, #68	@ 0x44
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	b292      	uxth	r2, r2
 800582a:	4619      	mov	r1, r3
 800582c:	f003 f9fe 	bl	8008c2c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	212c      	movs	r1, #44	@ 0x2c
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	3344      	adds	r3, #68	@ 0x44
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	441a      	add	r2, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	202c      	movs	r0, #44	@ 0x2c
 800584a:	fb00 f303 	mul.w	r3, r0, r3
 800584e:	440b      	add	r3, r1
 8005850:	3344      	adds	r3, #68	@ 0x44
 8005852:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	212c      	movs	r1, #44	@ 0x2c
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	3350      	adds	r3, #80	@ 0x50
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	441a      	add	r2, r3
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	202c      	movs	r0, #44	@ 0x2c
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	440b      	add	r3, r1
 8005874:	3350      	adds	r3, #80	@ 0x50
 8005876:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	4413      	add	r3, r2
 8005880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	0cdb      	lsrs	r3, r3, #19
 8005888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	212c      	movs	r1, #44	@ 0x2c
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	4413      	add	r3, r2
 800589a:	3340      	adds	r3, #64	@ 0x40
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d13c      	bne.n	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d039      	beq.n	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	212c      	movs	r1, #44	@ 0x2c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	3354      	adds	r3, #84	@ 0x54
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f083 0301 	eor.w	r3, r3, #1
 80058f2:	b2d8      	uxtb	r0, r3
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	212c      	movs	r1, #44	@ 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3354      	adds	r3, #84	@ 0x54
 8005902:	4602      	mov	r2, r0
 8005904:	701a      	strb	r2, [r3, #0]
      break;
 8005906:	e00b      	b.n	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	212c      	movs	r1, #44	@ 0x2c
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	4413      	add	r3, r2
 8005914:	3360      	adds	r3, #96	@ 0x60
 8005916:	2204      	movs	r2, #4
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	e001      	b.n	8005920 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005920:	bf00      	nop
  }
}
 8005922:	bf00      	nop
 8005924:	3728      	adds	r7, #40	@ 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005956:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d10b      	bne.n	800597a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f00a fd9f 	bl	80104b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d132      	bne.n	80059ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f043 0308 	orr.w	r3, r3, #8
 800598a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d126      	bne.n	80059e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d113      	bne.n	80059c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80059a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059a8:	d106      	bne.n	80059b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f003 faa9 	bl	8008f08 <USB_InitFSLSPClkSel>
 80059b6:	e011      	b.n	80059dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f003 faa2 	bl	8008f08 <USB_InitFSLSPClkSel>
 80059c4:	e00a      	b.n	80059dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d106      	bne.n	80059dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059d4:	461a      	mov	r2, r3
 80059d6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80059da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f00a fd95 	bl	801050c <HAL_HCD_PortEnabled_Callback>
 80059e2:	e002      	b.n	80059ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f00a fd9f 	bl	8010528 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d103      	bne.n	80059fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f043 0320 	orr.w	r3, r3, #32
 80059fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6013      	str	r3, [r2, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e12b      	b.n	8005c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fd fc74 	bl	8003324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	@ 0x24
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a74:	f001 fa20 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 8005a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4a81      	ldr	r2, [pc, #516]	@ (8005c84 <HAL_I2C_Init+0x274>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d807      	bhi.n	8005a94 <HAL_I2C_Init+0x84>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <HAL_I2C_Init+0x278>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bf94      	ite	ls
 8005a8c:	2301      	movls	r3, #1
 8005a8e:	2300      	movhi	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e006      	b.n	8005aa2 <HAL_I2C_Init+0x92>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a7d      	ldr	r2, [pc, #500]	@ (8005c8c <HAL_I2C_Init+0x27c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	bf94      	ite	ls
 8005a9c:	2301      	movls	r3, #1
 8005a9e:	2300      	movhi	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0e7      	b.n	8005c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a78      	ldr	r2, [pc, #480]	@ (8005c90 <HAL_I2C_Init+0x280>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0c9b      	lsrs	r3, r3, #18
 8005ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8005c84 <HAL_I2C_Init+0x274>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d802      	bhi.n	8005ae4 <HAL_I2C_Init+0xd4>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	e009      	b.n	8005af8 <HAL_I2C_Init+0xe8>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	4a69      	ldr	r2, [pc, #420]	@ (8005c94 <HAL_I2C_Init+0x284>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	099b      	lsrs	r3, r3, #6
 8005af6:	3301      	adds	r3, #1
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	495c      	ldr	r1, [pc, #368]	@ (8005c84 <HAL_I2C_Init+0x274>)
 8005b14:	428b      	cmp	r3, r1
 8005b16:	d819      	bhi.n	8005b4c <HAL_I2C_Init+0x13c>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1e59      	subs	r1, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b2c:	400b      	ands	r3, r1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_I2C_Init+0x138>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1e59      	subs	r1, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b46:	e051      	b.n	8005bec <HAL_I2C_Init+0x1dc>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	e04f      	b.n	8005bec <HAL_I2C_Init+0x1dc>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d111      	bne.n	8005b78 <HAL_I2C_Init+0x168>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1e58      	subs	r0, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6859      	ldr	r1, [r3, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	440b      	add	r3, r1
 8005b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e012      	b.n	8005b9e <HAL_I2C_Init+0x18e>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1e58      	subs	r0, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	0099      	lsls	r1, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_I2C_Init+0x196>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e022      	b.n	8005bec <HAL_I2C_Init+0x1dc>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10e      	bne.n	8005bcc <HAL_I2C_Init+0x1bc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1e58      	subs	r0, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	440b      	add	r3, r1
 8005bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bca:	e00f      	b.n	8005bec <HAL_I2C_Init+0x1dc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1e58      	subs	r0, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	0099      	lsls	r1, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be2:	3301      	adds	r3, #1
 8005be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	6809      	ldr	r1, [r1, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69da      	ldr	r2, [r3, #28]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6911      	ldr	r1, [r2, #16]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68d2      	ldr	r2, [r2, #12]
 8005c26:	4311      	orrs	r1, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	000186a0 	.word	0x000186a0
 8005c88:	001e847f 	.word	0x001e847f
 8005c8c:	003d08ff 	.word	0x003d08ff
 8005c90:	431bde83 	.word	0x431bde83
 8005c94:	10624dd3 	.word	0x10624dd3

08005c98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e128      	b.n	8005efc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a90      	ldr	r2, [pc, #576]	@ (8005f04 <HAL_I2S_Init+0x26c>)
 8005cc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fd fb75 	bl	80033b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ce0:	f023 030f 	bic.w	r3, r3, #15
 8005ce4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2202      	movs	r2, #2
 8005cec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d060      	beq.n	8005db8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005cfe:	2310      	movs	r3, #16
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e001      	b.n	8005d08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d802      	bhi.n	8005d16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d16:	2001      	movs	r0, #1
 8005d18:	f001 fa0a 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d26:	d125      	bne.n	8005d74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	3305      	adds	r3, #5
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e01f      	b.n	8005d92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	3305      	adds	r3, #5
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e00e      	b.n	8005d92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	3305      	adds	r3, #5
 8005d90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4a5c      	ldr	r2, [pc, #368]	@ (8005f08 <HAL_I2S_Init+0x270>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e003      	b.n	8005dc0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005db8:	2302      	movs	r3, #2
 8005dba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d902      	bls.n	8005dcc <HAL_I2S_Init+0x134>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2bff      	cmp	r3, #255	@ 0xff
 8005dca:	d907      	bls.n	8005ddc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd0:	f043 0210 	orr.w	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e08f      	b.n	8005efc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	ea42 0103 	orr.w	r1, r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005dfa:	f023 030f 	bic.w	r3, r3, #15
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6851      	ldr	r1, [r2, #4]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	4311      	orrs	r1, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68d2      	ldr	r2, [r2, #12]
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6992      	ldr	r2, [r2, #24]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d161      	bne.n	8005eec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a38      	ldr	r2, [pc, #224]	@ (8005f0c <HAL_I2S_Init+0x274>)
 8005e2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a37      	ldr	r2, [pc, #220]	@ (8005f10 <HAL_I2S_Init+0x278>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <HAL_I2S_Init+0x1a4>
 8005e38:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <HAL_I2S_Init+0x27c>)
 8005e3a:	e001      	b.n	8005e40 <HAL_I2S_Init+0x1a8>
 8005e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	4932      	ldr	r1, [pc, #200]	@ (8005f10 <HAL_I2S_Init+0x278>)
 8005e48:	428a      	cmp	r2, r1
 8005e4a:	d101      	bne.n	8005e50 <HAL_I2S_Init+0x1b8>
 8005e4c:	4a31      	ldr	r2, [pc, #196]	@ (8005f14 <HAL_I2S_Init+0x27c>)
 8005e4e:	e001      	b.n	8005e54 <HAL_I2S_Init+0x1bc>
 8005e50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e58:	f023 030f 	bic.w	r3, r3, #15
 8005e5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2b      	ldr	r2, [pc, #172]	@ (8005f10 <HAL_I2S_Init+0x278>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_I2S_Init+0x1d4>
 8005e68:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <HAL_I2S_Init+0x27c>)
 8005e6a:	e001      	b.n	8005e70 <HAL_I2S_Init+0x1d8>
 8005e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e70:	2202      	movs	r2, #2
 8005e72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a25      	ldr	r2, [pc, #148]	@ (8005f10 <HAL_I2S_Init+0x278>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2S_Init+0x1ea>
 8005e7e:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_I2S_Init+0x27c>)
 8005e80:	e001      	b.n	8005e86 <HAL_I2S_Init+0x1ee>
 8005e82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e92:	d003      	beq.n	8005e9c <HAL_I2S_Init+0x204>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	e001      	b.n	8005ea8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	897b      	ldrh	r3, [r7, #10]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ed4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a0d      	ldr	r2, [pc, #52]	@ (8005f10 <HAL_I2S_Init+0x278>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <HAL_I2S_Init+0x24c>
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f14 <HAL_I2S_Init+0x27c>)
 8005ee2:	e001      	b.n	8005ee8 <HAL_I2S_Init+0x250>
 8005ee4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ee8:	897a      	ldrh	r2, [r7, #10]
 8005eea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0800600f 	.word	0x0800600f
 8005f08:	cccccccd 	.word	0xcccccccd
 8005f0c:	08006125 	.word	0x08006125
 8005f10:	40003800 	.word	0x40003800
 8005f14:	40003400 	.word	0x40003400

08005f18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	881a      	ldrh	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	1c9a      	adds	r2, r3, #2
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10e      	bne.n	8005fa8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f98:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ffb8 	bl	8005f18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	b292      	uxth	r2, r2
 8005fc4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10e      	bne.n	8006006 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff93 	bl	8005f2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b04      	cmp	r3, #4
 8006028:	d13a      	bne.n	80060a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d109      	bne.n	8006048 <I2S_IRQHandler+0x3a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b40      	cmp	r3, #64	@ 0x40
 8006040:	d102      	bne.n	8006048 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ffb4 	bl	8005fb0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d126      	bne.n	80060a0 <I2S_IRQHandler+0x92>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b20      	cmp	r3, #32
 800605e:	d11f      	bne.n	80060a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800606e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	f043 0202 	orr.w	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ff50 	bl	8005f40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d136      	bne.n	800611a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d109      	bne.n	80060ca <I2S_IRQHandler+0xbc>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c0:	2b80      	cmp	r3, #128	@ 0x80
 80060c2:	d102      	bne.n	80060ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ff45 	bl	8005f54 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d122      	bne.n	800611a <I2S_IRQHandler+0x10c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d11b      	bne.n	800611a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610c:	f043 0204 	orr.w	r2, r3, #4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff13 	bl	8005f40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a92      	ldr	r2, [pc, #584]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800613e:	4b92      	ldr	r3, [pc, #584]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006140:	e001      	b.n	8006146 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a8b      	ldr	r2, [pc, #556]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800615c:	4b8a      	ldr	r3, [pc, #552]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800615e:	e001      	b.n	8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006160:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006170:	d004      	beq.n	800617c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 8099 	bne.w	80062ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d107      	bne.n	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f925 	bl	80063e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b01      	cmp	r3, #1
 800619e:	d107      	bne.n	80061b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f9c8 	bl	8006540 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b40      	cmp	r3, #64	@ 0x40
 80061b8:	d13a      	bne.n	8006230 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d035      	beq.n	8006230 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d101      	bne.n	80061d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80061ce:	4b6e      	ldr	r3, [pc, #440]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061d0:	e001      	b.n	80061d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80061d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4969      	ldr	r1, [pc, #420]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061de:	428b      	cmp	r3, r1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80061e2:	4b69      	ldr	r3, [pc, #420]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061e4:	e001      	b.n	80061ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80061e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f043 0202 	orr.w	r2, r3, #2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe88 	bl	8005f40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b08      	cmp	r3, #8
 8006238:	f040 80c3 	bne.w	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80bd 	beq.w	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006256:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a49      	ldr	r2, [pc, #292]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006262:	4b49      	ldr	r3, [pc, #292]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006264:	e001      	b.n	800626a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006266:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4944      	ldr	r1, [pc, #272]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006272:	428b      	cmp	r3, r1
 8006274:	d101      	bne.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006276:	4b44      	ldr	r3, [pc, #272]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006278:	e001      	b.n	800627e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800627a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800627e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006282:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006284:	2300      	movs	r3, #0
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fe4a 	bl	8005f40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062ac:	e089      	b.n	80063c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d107      	bne.n	80062c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8be 	bl	8006444 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8fd 	bl	80064dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d12f      	bne.n	800634c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d02a      	beq.n	800634c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006304:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1e      	ldr	r2, [pc, #120]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006312:	e001      	b.n	8006318 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006314:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4919      	ldr	r1, [pc, #100]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006320:	428b      	cmp	r3, r1
 8006322:	d101      	bne.n	8006328 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006324:	4b18      	ldr	r3, [pc, #96]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006326:	e001      	b.n	800632c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800632c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006330:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	f043 0202 	orr.w	r2, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fdfa 	bl	8005f40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b08      	cmp	r3, #8
 8006354:	d136      	bne.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d031      	beq.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a07      	ldr	r2, [pc, #28]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800636a:	4b07      	ldr	r3, [pc, #28]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800636c:	e001      	b.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800636e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4902      	ldr	r1, [pc, #8]	@ (8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800637a:	428b      	cmp	r3, r1
 800637c:	d106      	bne.n	800638c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800637e:	4b02      	ldr	r3, [pc, #8]	@ (8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006380:	e006      	b.n	8006390 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006382:	bf00      	nop
 8006384:	40003800 	.word	0x40003800
 8006388:	40003400 	.word	0x40003400
 800638c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006390:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006394:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fdc0 	bl	8005f40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063c0:	e000      	b.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063c2:	bf00      	nop
}
 80063c4:	bf00      	nop
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	1c99      	adds	r1, r3, #2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80063f2:	881a      	ldrh	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d113      	bne.n	800643a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006420:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff ffc9 	bl	80063cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	1c99      	adds	r1, r3, #2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6251      	str	r1, [r2, #36]	@ 0x24
 8006456:	8819      	ldrh	r1, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1d      	ldr	r2, [pc, #116]	@ (80064d4 <I2SEx_TxISR_I2SExt+0x90>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <I2SEx_TxISR_I2SExt+0x22>
 8006462:	4b1d      	ldr	r3, [pc, #116]	@ (80064d8 <I2SEx_TxISR_I2SExt+0x94>)
 8006464:	e001      	b.n	800646a <I2SEx_TxISR_I2SExt+0x26>
 8006466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800646a:	460a      	mov	r2, r1
 800646c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d121      	bne.n	80064ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a12      	ldr	r2, [pc, #72]	@ (80064d4 <I2SEx_TxISR_I2SExt+0x90>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <I2SEx_TxISR_I2SExt+0x50>
 8006490:	4b11      	ldr	r3, [pc, #68]	@ (80064d8 <I2SEx_TxISR_I2SExt+0x94>)
 8006492:	e001      	b.n	8006498 <I2SEx_TxISR_I2SExt+0x54>
 8006494:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	490d      	ldr	r1, [pc, #52]	@ (80064d4 <I2SEx_TxISR_I2SExt+0x90>)
 80064a0:	428b      	cmp	r3, r1
 80064a2:	d101      	bne.n	80064a8 <I2SEx_TxISR_I2SExt+0x64>
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <I2SEx_TxISR_I2SExt+0x94>)
 80064a6:	e001      	b.n	80064ac <I2SEx_TxISR_I2SExt+0x68>
 80064a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff81 	bl	80063cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40003800 	.word	0x40003800
 80064d8:	40003400 	.word	0x40003400

080064dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68d8      	ldr	r0, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	1c99      	adds	r1, r3, #2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80064f4:	b282      	uxth	r2, r0
 80064f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d113      	bne.n	8006538 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800651e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff ff4a 	bl	80063cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a20      	ldr	r2, [pc, #128]	@ (80065d0 <I2SEx_RxISR_I2SExt+0x90>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <I2SEx_RxISR_I2SExt+0x16>
 8006552:	4b20      	ldr	r3, [pc, #128]	@ (80065d4 <I2SEx_RxISR_I2SExt+0x94>)
 8006554:	e001      	b.n	800655a <I2SEx_RxISR_I2SExt+0x1a>
 8006556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800655a:	68d8      	ldr	r0, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	1c99      	adds	r1, r3, #2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006566:	b282      	uxth	r2, r0
 8006568:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d121      	bne.n	80065c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a12      	ldr	r2, [pc, #72]	@ (80065d0 <I2SEx_RxISR_I2SExt+0x90>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <I2SEx_RxISR_I2SExt+0x50>
 800658c:	4b11      	ldr	r3, [pc, #68]	@ (80065d4 <I2SEx_RxISR_I2SExt+0x94>)
 800658e:	e001      	b.n	8006594 <I2SEx_RxISR_I2SExt+0x54>
 8006590:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	490d      	ldr	r1, [pc, #52]	@ (80065d0 <I2SEx_RxISR_I2SExt+0x90>)
 800659c:	428b      	cmp	r3, r1
 800659e:	d101      	bne.n	80065a4 <I2SEx_RxISR_I2SExt+0x64>
 80065a0:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <I2SEx_RxISR_I2SExt+0x94>)
 80065a2:	e001      	b.n	80065a8 <I2SEx_RxISR_I2SExt+0x68>
 80065a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff03 	bl	80063cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40003800 	.word	0x40003800
 80065d4:	40003400 	.word	0x40003400

080065d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e267      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d075      	beq.n	80066e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065f6:	4b88      	ldr	r3, [pc, #544]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d00c      	beq.n	800661c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006602:	4b85      	ldr	r3, [pc, #532]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800660a:	2b08      	cmp	r3, #8
 800660c:	d112      	bne.n	8006634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800660e:	4b82      	ldr	r3, [pc, #520]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800661a:	d10b      	bne.n	8006634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661c:	4b7e      	ldr	r3, [pc, #504]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05b      	beq.n	80066e0 <HAL_RCC_OscConfig+0x108>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d157      	bne.n	80066e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e242      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663c:	d106      	bne.n	800664c <HAL_RCC_OscConfig+0x74>
 800663e:	4b76      	ldr	r3, [pc, #472]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a75      	ldr	r2, [pc, #468]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e01d      	b.n	8006688 <HAL_RCC_OscConfig+0xb0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0x98>
 8006656:	4b70      	ldr	r3, [pc, #448]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a6f      	ldr	r2, [pc, #444]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800665c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b6d      	ldr	r3, [pc, #436]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6c      	ldr	r2, [pc, #432]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e00b      	b.n	8006688 <HAL_RCC_OscConfig+0xb0>
 8006670:	4b69      	ldr	r3, [pc, #420]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a68      	ldr	r2, [pc, #416]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	4b66      	ldr	r3, [pc, #408]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a65      	ldr	r2, [pc, #404]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fd fa04 	bl	8003a9c <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006698:	f7fd fa00 	bl	8003a9c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	@ 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e207      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0xc0>
 80066b6:	e014      	b.n	80066e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fd f9f0 	bl	8003a9c <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fd f9ec 	bl	8003a9c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	@ 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e1f3      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	4b51      	ldr	r3, [pc, #324]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0xe8>
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d063      	beq.n	80067b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066fa:	4b47      	ldr	r3, [pc, #284]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006702:	2b08      	cmp	r3, #8
 8006704:	d11c      	bne.n	8006740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006706:	4b44      	ldr	r3, [pc, #272]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d116      	bne.n	8006740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	4b41      	ldr	r3, [pc, #260]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_RCC_OscConfig+0x152>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d001      	beq.n	800672a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e1c7      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672a:	4b3b      	ldr	r3, [pc, #236]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4937      	ldr	r1, [pc, #220]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800673a:	4313      	orrs	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673e:	e03a      	b.n	80067b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d020      	beq.n	800678a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006748:	4b34      	ldr	r3, [pc, #208]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fd f9a5 	bl	8003a9c <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006756:	f7fd f9a1 	bl	8003a9c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e1a8      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006768:	4b2b      	ldr	r3, [pc, #172]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006774:	4b28      	ldr	r3, [pc, #160]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4925      	ldr	r1, [pc, #148]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 8006784:	4313      	orrs	r3, r2
 8006786:	600b      	str	r3, [r1, #0]
 8006788:	e015      	b.n	80067b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_RCC_OscConfig+0x244>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fd f984 	bl	8003a9c <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006798:	f7fd f980 	bl	8003a9c <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e187      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d036      	beq.n	8006830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ca:	4b15      	ldr	r3, [pc, #84]	@ (8006820 <HAL_RCC_OscConfig+0x248>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d0:	f7fd f964 	bl	8003a9c <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067d8:	f7fd f960 	bl	8003a9c <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e167      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <HAL_RCC_OscConfig+0x240>)
 80067ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x200>
 80067f6:	e01b      	b.n	8006830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f8:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <HAL_RCC_OscConfig+0x248>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fe:	f7fd f94d 	bl	8003a9c <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006804:	e00e      	b.n	8006824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006806:	f7fd f949 	bl	8003a9c <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d907      	bls.n	8006824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e150      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
 8006818:	40023800 	.word	0x40023800
 800681c:	42470000 	.word	0x42470000
 8006820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006824:	4b88      	ldr	r3, [pc, #544]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1ea      	bne.n	8006806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8097 	beq.w	800696c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006842:	4b81      	ldr	r3, [pc, #516]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10f      	bne.n	800686e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	4b7d      	ldr	r3, [pc, #500]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	4a7c      	ldr	r2, [pc, #496]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685c:	6413      	str	r3, [r2, #64]	@ 0x40
 800685e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686e:	4b77      	ldr	r3, [pc, #476]	@ (8006a4c <HAL_RCC_OscConfig+0x474>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d118      	bne.n	80068ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800687a:	4b74      	ldr	r3, [pc, #464]	@ (8006a4c <HAL_RCC_OscConfig+0x474>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a73      	ldr	r2, [pc, #460]	@ (8006a4c <HAL_RCC_OscConfig+0x474>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006886:	f7fd f909 	bl	8003a9c <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688e:	f7fd f905 	bl	8003a9c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e10c      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	4b6a      	ldr	r3, [pc, #424]	@ (8006a4c <HAL_RCC_OscConfig+0x474>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <HAL_RCC_OscConfig+0x2ea>
 80068b4:	4b64      	ldr	r3, [pc, #400]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a63      	ldr	r2, [pc, #396]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c0:	e01c      	b.n	80068fc <HAL_RCC_OscConfig+0x324>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x30c>
 80068ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068d0:	f043 0304 	orr.w	r3, r3, #4
 80068d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	4a5b      	ldr	r2, [pc, #364]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0x324>
 80068e4:	4b58      	ldr	r3, [pc, #352]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e8:	4a57      	ldr	r2, [pc, #348]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f0:	4b55      	ldr	r3, [pc, #340]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a54      	ldr	r2, [pc, #336]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068f6:	f023 0304 	bic.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fd f8ca 	bl	8003a9c <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fd f8c6 	bl	8003a9c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0cb      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006922:	4b49      	ldr	r3, [pc, #292]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ee      	beq.n	800690c <HAL_RCC_OscConfig+0x334>
 800692e:	e014      	b.n	800695a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006930:	f7fd f8b4 	bl	8003a9c <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006936:	e00a      	b.n	800694e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fd f8b0 	bl	8003a9c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006946:	4293      	cmp	r3, r2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e0b5      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ee      	bne.n	8006938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006960:	4b39      	ldr	r3, [pc, #228]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	4a38      	ldr	r2, [pc, #224]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800696a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80a1 	beq.w	8006ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006976:	4b34      	ldr	r3, [pc, #208]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
 800697e:	2b08      	cmp	r3, #8
 8006980:	d05c      	beq.n	8006a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d141      	bne.n	8006a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698a:	4b31      	ldr	r3, [pc, #196]	@ (8006a50 <HAL_RCC_OscConfig+0x478>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006990:	f7fd f884 	bl	8003a9c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006998:	f7fd f880 	bl	8003a9c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e087      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069aa:	4b27      	ldr	r3, [pc, #156]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	3b01      	subs	r3, #1
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	061b      	lsls	r3, r3, #24
 80069da:	491b      	ldr	r1, [pc, #108]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a50 <HAL_RCC_OscConfig+0x478>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e6:	f7fd f859 	bl	8003a9c <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ee:	f7fd f855 	bl	8003a9c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e05c      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a00:	4b11      	ldr	r3, [pc, #68]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f0      	beq.n	80069ee <HAL_RCC_OscConfig+0x416>
 8006a0c:	e054      	b.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <HAL_RCC_OscConfig+0x478>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7fd f842 	bl	8003a9c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fd f83e 	bl	8003a9c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e045      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x444>
 8006a3a:	e03d      	b.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e038      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40007000 	.word	0x40007000
 8006a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a54:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <HAL_RCC_OscConfig+0x4ec>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d028      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d121      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d11a      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d111      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800

08006ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0cc      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006adc:	4b68      	ldr	r3, [pc, #416]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d90c      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aea:	4b65      	ldr	r3, [pc, #404]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b63      	ldr	r3, [pc, #396]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0b8      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d020      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b1c:	4b59      	ldr	r3, [pc, #356]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4a58      	ldr	r2, [pc, #352]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b34:	4b53      	ldr	r3, [pc, #332]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a52      	ldr	r2, [pc, #328]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b40:	4b50      	ldr	r3, [pc, #320]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	494d      	ldr	r1, [pc, #308]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d044      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d107      	bne.n	8006b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	4b47      	ldr	r3, [pc, #284]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d119      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e07f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d107      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b86:	4b3f      	ldr	r3, [pc, #252]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e06f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b96:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e067      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ba6:	4b37      	ldr	r3, [pc, #220]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f023 0203 	bic.w	r2, r3, #3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4934      	ldr	r1, [pc, #208]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bb8:	f7fc ff70 	bl	8003a9c <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc0:	f7fc ff6c 	bl	8003a9c <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e04f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 020c 	and.w	r2, r3, #12
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d1eb      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006be8:	4b25      	ldr	r3, [pc, #148]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d20c      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b22      	ldr	r3, [pc, #136]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e032      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1c:	4b19      	ldr	r3, [pc, #100]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4916      	ldr	r1, [pc, #88]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c3a:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	490e      	ldr	r1, [pc, #56]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c4e:	f000 f821 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	490a      	ldr	r1, [pc, #40]	@ (8006c88 <HAL_RCC_ClockConfig+0x1c0>)
 8006c60:	5ccb      	ldrb	r3, [r1, r3]
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fc fcf4 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40023c00 	.word	0x40023c00
 8006c84:	40023800 	.word	0x40023800
 8006c88:	080157a8 	.word	0x080157a8
 8006c8c:	2000022c 	.word	0x2000022c
 8006c90:	20000230 	.word	0x20000230

08006c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c98:	b094      	sub	sp, #80	@ 0x50
 8006c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cac:	4b79      	ldr	r3, [pc, #484]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d00d      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	f200 80e1 	bhi.w	8006e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_GetSysClockFreq+0x3a>
 8006cc6:	e0db      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cc8:	4b73      	ldr	r3, [pc, #460]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006ccc:	e0db      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cce:	4b73      	ldr	r3, [pc, #460]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8006cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cd2:	e0d8      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cde:	4b6d      	ldr	r3, [pc, #436]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d063      	beq.n	8006db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cea:	4b6a      	ldr	r3, [pc, #424]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	f04f 0000 	mov.w	r0, #0
 8006d0e:	f04f 0100 	mov.w	r1, #0
 8006d12:	0159      	lsls	r1, r3, #5
 8006d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d18:	0150      	lsls	r0, r2, #5
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4621      	mov	r1, r4
 8006d20:	1a51      	subs	r1, r2, r1
 8006d22:	6139      	str	r1, [r7, #16]
 8006d24:	4629      	mov	r1, r5
 8006d26:	eb63 0301 	sbc.w	r3, r3, r1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d38:	4659      	mov	r1, fp
 8006d3a:	018b      	lsls	r3, r1, #6
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d42:	4651      	mov	r1, sl
 8006d44:	018a      	lsls	r2, r1, #6
 8006d46:	4651      	mov	r1, sl
 8006d48:	ebb2 0801 	subs.w	r8, r2, r1
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d66:	4690      	mov	r8, r2
 8006d68:	4699      	mov	r9, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	eb18 0303 	adds.w	r3, r8, r3
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	462b      	mov	r3, r5
 8006d74:	eb49 0303 	adc.w	r3, r9, r3
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d86:	4629      	mov	r1, r5
 8006d88:	024b      	lsls	r3, r1, #9
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d90:	4621      	mov	r1, r4
 8006d92:	024a      	lsls	r2, r1, #9
 8006d94:	4610      	mov	r0, r2
 8006d96:	4619      	mov	r1, r3
 8006d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006da4:	f7f9 ff20 	bl	8000be8 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4613      	mov	r3, r2
 8006dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006db0:	e058      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db2:	4b38      	ldr	r3, [pc, #224]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	2200      	movs	r2, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	f04f 0000 	mov.w	r0, #0
 8006dd4:	f04f 0100 	mov.w	r1, #0
 8006dd8:	0159      	lsls	r1, r3, #5
 8006dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dde:	0150      	lsls	r0, r2, #5
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4641      	mov	r1, r8
 8006de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dea:	4649      	mov	r1, r9
 8006dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e04:	ebb2 040a 	subs.w	r4, r2, sl
 8006e08:	eb63 050b 	sbc.w	r5, r3, fp
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	00eb      	lsls	r3, r5, #3
 8006e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1a:	00e2      	lsls	r2, r4, #3
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	18e3      	adds	r3, r4, r3
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	464b      	mov	r3, r9
 8006e28:	eb45 0303 	adc.w	r3, r5, r3
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	028b      	lsls	r3, r1, #10
 8006e3e:	4621      	mov	r1, r4
 8006e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e44:	4621      	mov	r1, r4
 8006e46:	028a      	lsls	r2, r1, #10
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4e:	2200      	movs	r2, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	61fa      	str	r2, [r7, #28]
 8006e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e58:	f7f9 fec6 	bl	8000be8 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4613      	mov	r3, r2
 8006e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e64:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	3301      	adds	r3, #1
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e7e:	e002      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3750      	adds	r7, #80	@ 0x50
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	007a1200 	.word	0x007a1200

08006ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ea4:	4b03      	ldr	r3, [pc, #12]	@ (8006eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	2000022c 	.word	0x2000022c

08006eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ebc:	f7ff fff0 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	0a9b      	lsrs	r3, r3, #10
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4903      	ldr	r1, [pc, #12]	@ (8006edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	080157b8 	.word	0x080157b8

08006ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ee4:	f7ff ffdc 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0b5b      	lsrs	r3, r3, #13
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4903      	ldr	r1, [pc, #12]	@ (8006f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40023800 	.word	0x40023800
 8006f04:	080157b8 	.word	0x080157b8

08006f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	220f      	movs	r2, #15
 8006f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f18:	4b12      	ldr	r3, [pc, #72]	@ (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0203 	and.w	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f24:	4b0f      	ldr	r3, [pc, #60]	@ (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f30:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f3c:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	08db      	lsrs	r3, r3, #3
 8006f42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f4a:	4b07      	ldr	r3, [pc, #28]	@ (8006f68 <HAL_RCC_GetClockConfig+0x60>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0207 	and.w	r2, r3, #7
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40023800 	.word	0x40023800
 8006f68:	40023c00 	.word	0x40023c00

08006f6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d035      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f94:	4b62      	ldr	r3, [pc, #392]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f9a:	f7fc fd7f 	bl	8003a9c <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fa2:	f7fc fd7b 	bl	8003a9c <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e0b0      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	071b      	lsls	r3, r3, #28
 8006fcc:	4955      	ldr	r1, [pc, #340]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fd4:	4b52      	ldr	r3, [pc, #328]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fc fd5f 	bl	8003a9c <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fc fd5b 	bl	8003a9c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e090      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8083 	beq.w	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	4b44      	ldr	r3, [pc, #272]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	4a43      	ldr	r2, [pc, #268]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800701c:	6413      	str	r3, [r2, #64]	@ 0x40
 800701e:	4b41      	ldr	r3, [pc, #260]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800702a:	4b3f      	ldr	r3, [pc, #252]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007034:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007036:	f7fc fd31 	bl	8003a9c <HAL_GetTick>
 800703a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800703c:	e008      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800703e:	f7fc fd2d 	bl	8003a9c <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e062      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007050:	4b35      	ldr	r3, [pc, #212]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800705c:	4b31      	ldr	r3, [pc, #196]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007064:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02f      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d028      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800707a:	4b2a      	ldr	r3, [pc, #168]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007082:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007084:	4b29      	ldr	r3, [pc, #164]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800708a:	4b28      	ldr	r3, [pc, #160]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007090:	4a24      	ldr	r2, [pc, #144]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007096:	4b23      	ldr	r3, [pc, #140]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d114      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070a2:	f7fc fcfb 	bl	8003a9c <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a8:	e00a      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070aa:	f7fc fcf7 	bl	8003a9c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e02a      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c0:	4b18      	ldr	r3, [pc, #96]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0ee      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d8:	d10d      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070da:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ee:	490d      	ldr	r1, [pc, #52]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	608b      	str	r3, [r1, #8]
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007100:	6093      	str	r3, [r2, #8]
 8007102:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007104:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710e:	4905      	ldr	r1, [pc, #20]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007110:	4313      	orrs	r3, r2
 8007112:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	42470068 	.word	0x42470068
 8007124:	40023800 	.word	0x40023800
 8007128:	40007000 	.word	0x40007000
 800712c:	42470e40 	.word	0x42470e40

08007130 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d13e      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800714e:	4b23      	ldr	r3, [pc, #140]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d12f      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007164:	4b1e      	ldr	r3, [pc, #120]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007166:	617b      	str	r3, [r7, #20]
          break;
 8007168:	e02f      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800716a:	4b1c      	ldr	r3, [pc, #112]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007176:	d108      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007178:	4b18      	ldr	r3, [pc, #96]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007180:	4a18      	ldr	r2, [pc, #96]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e007      	b.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800718a:	4b14      	ldr	r3, [pc, #80]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007192:	4a15      	ldr	r2, [pc, #84]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800719c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071a0:	099b      	lsrs	r3, r3, #6
 80071a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	fb02 f303 	mul.w	r3, r2, r3
 80071ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80071ae:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071b4:	0f1b      	lsrs	r3, r3, #28
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]
          break;
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
          break;
 80071c8:	bf00      	nop
        }
      }
      break;
 80071ca:	bf00      	nop
    }
  }
  return frequency;
 80071cc:	697b      	ldr	r3, [r7, #20]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40023800 	.word	0x40023800
 80071e0:	00bb8000 	.word	0x00bb8000
 80071e4:	007a1200 	.word	0x007a1200
 80071e8:	00f42400 	.word	0x00f42400

080071ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e07b      	b.n	80072f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d108      	bne.n	8007218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800720e:	d009      	beq.n	8007224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	61da      	str	r2, [r3, #28]
 8007216:	e005      	b.n	8007224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fc f938 	bl	80034b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800725a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	ea42 0103 	orr.w	r1, r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	f003 0104 	and.w	r1, r3, #4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	f003 0210 	and.w	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e041      	b.n	8007394 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d106      	bne.n	800732a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f839 	bl	800739c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f000 f9d7 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d001      	beq.n	80073c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e04e      	b.n	8007466 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a23      	ldr	r2, [pc, #140]	@ (8007474 <HAL_TIM_Base_Start_IT+0xc4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d022      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f2:	d01d      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007478 <HAL_TIM_Base_Start_IT+0xc8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d018      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1e      	ldr	r2, [pc, #120]	@ (800747c <HAL_TIM_Base_Start_IT+0xcc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d013      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1c      	ldr	r2, [pc, #112]	@ (8007480 <HAL_TIM_Base_Start_IT+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00e      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1b      	ldr	r2, [pc, #108]	@ (8007484 <HAL_TIM_Base_Start_IT+0xd4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d009      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a19      	ldr	r2, [pc, #100]	@ (8007488 <HAL_TIM_Base_Start_IT+0xd8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d004      	beq.n	8007430 <HAL_TIM_Base_Start_IT+0x80>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a18      	ldr	r2, [pc, #96]	@ (800748c <HAL_TIM_Base_Start_IT+0xdc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d111      	bne.n	8007454 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b06      	cmp	r3, #6
 8007440:	d010      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0201 	orr.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007452:	e007      	b.n	8007464 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40010400 	.word	0x40010400
 8007488:	40014000 	.word	0x40014000
 800748c:	40001800 	.word	0x40001800

08007490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d122      	bne.n	80074ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d11b      	bne.n	80074ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0202 	mvn.w	r2, #2
 80074bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8ee 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80074d8:	e005      	b.n	80074e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f8e0 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8f1 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d122      	bne.n	8007540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b04      	cmp	r3, #4
 8007506:	d11b      	bne.n	8007540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0204 	mvn.w	r2, #4
 8007510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8c4 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 800752c:	e005      	b.n	800753a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8b6 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8c7 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b08      	cmp	r3, #8
 800754c:	d122      	bne.n	8007594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b08      	cmp	r3, #8
 800755a:	d11b      	bne.n	8007594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0208 	mvn.w	r2, #8
 8007564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2204      	movs	r2, #4
 800756a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f89a 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 8007580:	e005      	b.n	800758e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f88c 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f89d 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d122      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0210 	mvn.w	r2, #16
 80075b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2208      	movs	r2, #8
 80075be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f870 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f862 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f873 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d10e      	bne.n	8007614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b01      	cmp	r3, #1
 8007602:	d107      	bne.n	8007614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0201 	mvn.w	r2, #1
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fb fe44 	bl	800329c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761e:	2b80      	cmp	r3, #128	@ 0x80
 8007620:	d10e      	bne.n	8007640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762c:	2b80      	cmp	r3, #128	@ 0x80
 800762e:	d107      	bne.n	8007640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f902 	bl	8007844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d10e      	bne.n	800766c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	d107      	bne.n	800766c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f838 	bl	80076dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b20      	cmp	r3, #32
 8007678:	d10e      	bne.n	8007698 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b20      	cmp	r3, #32
 8007686:	d107      	bne.n	8007698 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0220 	mvn.w	r2, #32
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8cc 	bl	8007830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	@ (8007804 <TIM_Base_SetConfig+0x114>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3d      	ldr	r2, [pc, #244]	@ (8007808 <TIM_Base_SetConfig+0x118>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3c      	ldr	r2, [pc, #240]	@ (800780c <TIM_Base_SetConfig+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a3b      	ldr	r2, [pc, #236]	@ (8007810 <TIM_Base_SetConfig+0x120>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3a      	ldr	r2, [pc, #232]	@ (8007814 <TIM_Base_SetConfig+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2f      	ldr	r2, [pc, #188]	@ (8007804 <TIM_Base_SetConfig+0x114>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d02b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007750:	d027      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2c      	ldr	r2, [pc, #176]	@ (8007808 <TIM_Base_SetConfig+0x118>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d023      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2b      	ldr	r2, [pc, #172]	@ (800780c <TIM_Base_SetConfig+0x11c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2a      	ldr	r2, [pc, #168]	@ (8007810 <TIM_Base_SetConfig+0x120>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a29      	ldr	r2, [pc, #164]	@ (8007814 <TIM_Base_SetConfig+0x124>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d017      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a28      	ldr	r2, [pc, #160]	@ (8007818 <TIM_Base_SetConfig+0x128>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a27      	ldr	r2, [pc, #156]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a26      	ldr	r2, [pc, #152]	@ (8007820 <TIM_Base_SetConfig+0x130>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a25      	ldr	r2, [pc, #148]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a24      	ldr	r2, [pc, #144]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a23      	ldr	r2, [pc, #140]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0a      	ldr	r2, [pc, #40]	@ (8007804 <TIM_Base_SetConfig+0x114>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007814 <TIM_Base_SetConfig+0x124>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40010000 	.word	0x40010000
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40010400 	.word	0x40010400
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800
 8007824:	40001800 	.word	0x40001800
 8007828:	40001c00 	.word	0x40001c00
 800782c:	40002000 	.word	0x40002000

08007830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e03f      	b.n	80078ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb fe60 	bl	8003544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2224      	movs	r2, #36	@ 0x24
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800789a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fddf 	bl	8008460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b08a      	sub	sp, #40	@ 0x28
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b20      	cmp	r3, #32
 8007910:	d17c      	bne.n	8007a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_UART_Transmit+0x2c>
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e075      	b.n	8007a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_UART_Transmit+0x3e>
 800792c:	2302      	movs	r3, #2
 800792e:	e06e      	b.n	8007a0e <HAL_UART_Transmit+0x11c>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2221      	movs	r2, #33	@ 0x21
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007946:	f7fc f8a9 	bl	8003a9c <HAL_GetTick>
 800794a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	88fa      	ldrh	r2, [r7, #6]
 8007950:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007960:	d108      	bne.n	8007974 <HAL_UART_Transmit+0x82>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e003      	b.n	800797c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007984:	e02a      	b.n	80079dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	2180      	movs	r1, #128	@ 0x80
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fb1f 	bl	8007fd4 <UART_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e036      	b.n	8007a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	3302      	adds	r3, #2
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e007      	b.n	80079ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1cf      	bne.n	8007986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2200      	movs	r2, #0
 80079ee:	2140      	movs	r1, #64	@ 0x40
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 faef 	bl	8007fd4 <UART_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e006      	b.n	8007a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a0c:	2302      	movs	r3, #2
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	4613      	mov	r3, r2
 8007a22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d11d      	bne.n	8007a6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_UART_Receive_IT+0x26>
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e016      	b.n	8007a6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_UART_Receive_IT+0x38>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e00f      	b.n	8007a6e <HAL_UART_Receive_IT+0x58>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fb24 	bl	80080b0 <UART_Start_Receive_IT>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	e000      	b.n	8007a6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10f      	bne.n	8007ade <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_UART_IRQHandler+0x66>
 8007aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fc07 	bl	80082ea <UART_Receive_IT>
      return;
 8007adc:	e256      	b.n	8007f8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80de 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x22c>
 8007ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80d1 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_UART_IRQHandler+0xae>
 8007b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1e:	f043 0201 	orr.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_UART_IRQHandler+0xd2>
 8007b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	f043 0202 	orr.w	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <HAL_UART_IRQHandler+0xf6>
 8007b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b66:	f043 0204 	orr.w	r2, r3, #4
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d011      	beq.n	8007b9e <HAL_UART_IRQHandler+0x126>
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	f043 0208 	orr.w	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 81ed 	beq.w	8007f82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x14e>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb92 	bl	80082ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x17a>
 8007bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04f      	beq.n	8007c92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa9a 	bl	800812c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b40      	cmp	r3, #64	@ 0x40
 8007c04:	d141      	bne.n	8007c8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1d9      	bne.n	8007c06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8007e54 <HAL_UART_IRQHandler+0x3dc>)
 8007c60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fc f89a 	bl	8003da0 <HAL_DMA_Abort_IT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e00e      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f990 	bl	8007fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	e00a      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f98c 	bl	8007fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	e006      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f988 	bl	8007fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007c9e:	e170      	b.n	8007f82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	bf00      	nop
    return;
 8007ca2:	e16e      	b.n	8007f82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	f040 814a 	bne.w	8007f42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8143 	beq.w	8007f42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 813c 	beq.w	8007f42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cea:	2b40      	cmp	r3, #64	@ 0x40
 8007cec:	f040 80b4 	bne.w	8007e58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8140 	beq.w	8007f86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	f080 8139 	bcs.w	8007f86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d26:	f000 8088 	beq.w	8007e3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d9      	bne.n	8007d2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3314      	adds	r3, #20
 8007d7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3314      	adds	r3, #20
 8007d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e1      	bne.n	8007d76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007dd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ddc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e3      	bne.n	8007df8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fb ff43 	bl	8003cc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8b6 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e50:	e099      	b.n	8007f86 <HAL_UART_IRQHandler+0x50e>
 8007e52:	bf00      	nop
 8007e54:	080081f3 	.word	0x080081f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 808b 	beq.w	8007f8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8086 	beq.w	8007f8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ea2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ea4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ea8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e3      	bne.n	8007e7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3314      	adds	r3, #20
 8007ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007eda:	633a      	str	r2, [r7, #48]	@ 0x30
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e3      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	330c      	adds	r3, #12
 8007f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0310 	bic.w	r3, r3, #16
 8007f12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f20:	61fa      	str	r2, [r7, #28]
 8007f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e3      	bne.n	8007efc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f83e 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f40:	e023      	b.n	8007f8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <HAL_UART_IRQHandler+0x4ea>
 8007f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f95d 	bl	800821a <UART_Transmit_IT>
    return;
 8007f60:	e014      	b.n	8007f8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <HAL_UART_IRQHandler+0x514>
 8007f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f99d 	bl	80082ba <UART_EndTransmit_IT>
    return;
 8007f80:	e004      	b.n	8007f8c <HAL_UART_IRQHandler+0x514>
    return;
 8007f82:	bf00      	nop
 8007f84:	e002      	b.n	8007f8c <HAL_UART_IRQHandler+0x514>
      return;
 8007f86:	bf00      	nop
 8007f88:	e000      	b.n	8007f8c <HAL_UART_IRQHandler+0x514>
      return;
 8007f8a:	bf00      	nop
  }
}
 8007f8c:	37e8      	adds	r7, #232	@ 0xe8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop

08007f94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b090      	sub	sp, #64	@ 0x40
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe4:	e050      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d04c      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d007      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff4:	f7fb fd52 	bl	8003a9c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008000:	429a      	cmp	r2, r3
 8008002:	d241      	bcs.n	8008088 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008024:	637a      	str	r2, [r7, #52]	@ 0x34
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800802a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3314      	adds	r3, #20
 800803e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	613b      	str	r3, [r7, #16]
   return(result);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3314      	adds	r3, #20
 8008056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008058:	623a      	str	r2, [r7, #32]
 800805a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	69f9      	ldr	r1, [r7, #28]
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	61bb      	str	r3, [r7, #24]
   return(result);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e00f      	b.n	80080a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d09f      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3740      	adds	r7, #64	@ 0x40
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	88fa      	ldrh	r2, [r7, #6]
 80080ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2222      	movs	r2, #34	@ 0x22
 80080da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0220 	orr.w	r2, r2, #32
 800811c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b095      	sub	sp, #84	@ 0x54
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	330c      	adds	r3, #12
 8008152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008154:	643a      	str	r2, [r7, #64]	@ 0x40
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800815a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	61fb      	str	r3, [r7, #28]
   return(result);
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3314      	adds	r3, #20
 8008186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800818a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800818e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e5      	bne.n	8008168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d119      	bne.n	80081d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	330c      	adds	r3, #12
 80081aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0310 	bic.w	r3, r3, #16
 80081ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	330c      	adds	r3, #12
 80081c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081c4:	61ba      	str	r2, [r7, #24]
 80081c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6979      	ldr	r1, [r7, #20]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	613b      	str	r3, [r7, #16]
   return(result);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e5      	bne.n	80081a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081e6:	bf00      	nop
 80081e8:	3754      	adds	r7, #84	@ 0x54
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fecb 	bl	8007fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b21      	cmp	r3, #33	@ 0x21
 800822c:	d13e      	bne.n	80082ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008236:	d114      	bne.n	8008262 <UART_Transmit_IT+0x48>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d110      	bne.n	8008262 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	621a      	str	r2, [r3, #32]
 8008260:	e008      	b.n	8008274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6211      	str	r1, [r2, #32]
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29b      	uxth	r3, r3
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4619      	mov	r1, r3
 8008282:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e000      	b.n	80082ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082ac:	2302      	movs	r3, #2
  }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fe5a 	bl	8007f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b08c      	sub	sp, #48	@ 0x30
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b22      	cmp	r3, #34	@ 0x22
 80082fc:	f040 80ab 	bne.w	8008456 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008308:	d117      	bne.n	800833a <UART_Receive_IT+0x50>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d113      	bne.n	800833a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b29b      	uxth	r3, r3
 8008324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008328:	b29a      	uxth	r2, r3
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	1c9a      	adds	r2, r3, #2
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	629a      	str	r2, [r3, #40]	@ 0x28
 8008338:	e026      	b.n	8008388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834c:	d007      	beq.n	800835e <UART_Receive_IT+0x74>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <UART_Receive_IT+0x82>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	b2da      	uxtb	r2, r3
 8008366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e008      	b.n	800837e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008378:	b2da      	uxtb	r2, r3
 800837a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29b      	uxth	r3, r3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4619      	mov	r1, r3
 8008396:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008398:	2b00      	cmp	r3, #0
 800839a:	d15a      	bne.n	8008452 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0220 	bic.w	r2, r2, #32
 80083aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0201 	bic.w	r2, r2, #1
 80083ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d135      	bne.n	8008448 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	613b      	str	r3, [r7, #16]
   return(result);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f023 0310 	bic.w	r3, r3, #16
 80083f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008402:	623a      	str	r2, [r7, #32]
 8008404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	69f9      	ldr	r1, [r7, #28]
 8008408:	6a3a      	ldr	r2, [r7, #32]
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e5      	bne.n	80083e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b10      	cmp	r3, #16
 8008422:	d10a      	bne.n	800843a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff fdbb 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
 8008446:	e002      	b.n	800844e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fa fe97 	bl	800317c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	e002      	b.n	8008458 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	e000      	b.n	8008458 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008456:	2302      	movs	r3, #2
  }
}
 8008458:	4618      	mov	r0, r3
 800845a:	3730      	adds	r7, #48	@ 0x30
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008464:	b0c0      	sub	sp, #256	@ 0x100
 8008466:	af00      	add	r7, sp, #0
 8008468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	68d9      	ldr	r1, [r3, #12]
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	ea40 0301 	orr.w	r3, r0, r1
 8008488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	431a      	orrs	r2, r3
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	431a      	orrs	r2, r3
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084b8:	f021 010c 	bic.w	r1, r1, #12
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084c6:	430b      	orrs	r3, r1
 80084c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084da:	6999      	ldr	r1, [r3, #24]
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	ea40 0301 	orr.w	r3, r0, r1
 80084e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b8f      	ldr	r3, [pc, #572]	@ (800872c <UART_SetConfig+0x2cc>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d005      	beq.n	8008500 <UART_SetConfig+0xa0>
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b8d      	ldr	r3, [pc, #564]	@ (8008730 <UART_SetConfig+0x2d0>)
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d104      	bne.n	800850a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008500:	f7fe fcee 	bl	8006ee0 <HAL_RCC_GetPCLK2Freq>
 8008504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008508:	e003      	b.n	8008512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800850a:	f7fe fcd5 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 800850e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800851c:	f040 810c 	bne.w	8008738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008524:	2200      	movs	r2, #0
 8008526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800852a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800852e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008532:	4622      	mov	r2, r4
 8008534:	462b      	mov	r3, r5
 8008536:	1891      	adds	r1, r2, r2
 8008538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800853a:	415b      	adcs	r3, r3
 800853c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800853e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008542:	4621      	mov	r1, r4
 8008544:	eb12 0801 	adds.w	r8, r2, r1
 8008548:	4629      	mov	r1, r5
 800854a:	eb43 0901 	adc.w	r9, r3, r1
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800855a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800855e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008562:	4690      	mov	r8, r2
 8008564:	4699      	mov	r9, r3
 8008566:	4623      	mov	r3, r4
 8008568:	eb18 0303 	adds.w	r3, r8, r3
 800856c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008570:	462b      	mov	r3, r5
 8008572:	eb49 0303 	adc.w	r3, r9, r3
 8008576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800858a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800858e:	460b      	mov	r3, r1
 8008590:	18db      	adds	r3, r3, r3
 8008592:	653b      	str	r3, [r7, #80]	@ 0x50
 8008594:	4613      	mov	r3, r2
 8008596:	eb42 0303 	adc.w	r3, r2, r3
 800859a:	657b      	str	r3, [r7, #84]	@ 0x54
 800859c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085a4:	f7f8 fb20 	bl	8000be8 <__aeabi_uldivmod>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4b61      	ldr	r3, [pc, #388]	@ (8008734 <UART_SetConfig+0x2d4>)
 80085ae:	fba3 2302 	umull	r2, r3, r3, r2
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	011c      	lsls	r4, r3, #4
 80085b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	1891      	adds	r1, r2, r2
 80085ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085d0:	415b      	adcs	r3, r3
 80085d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085d8:	4641      	mov	r1, r8
 80085da:	eb12 0a01 	adds.w	sl, r2, r1
 80085de:	4649      	mov	r1, r9
 80085e0:	eb43 0b01 	adc.w	fp, r3, r1
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	f04f 0300 	mov.w	r3, #0
 80085ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085f8:	4692      	mov	sl, r2
 80085fa:	469b      	mov	fp, r3
 80085fc:	4643      	mov	r3, r8
 80085fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008606:	464b      	mov	r3, r9
 8008608:	eb4b 0303 	adc.w	r3, fp, r3
 800860c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800861c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008624:	460b      	mov	r3, r1
 8008626:	18db      	adds	r3, r3, r3
 8008628:	643b      	str	r3, [r7, #64]	@ 0x40
 800862a:	4613      	mov	r3, r2
 800862c:	eb42 0303 	adc.w	r3, r2, r3
 8008630:	647b      	str	r3, [r7, #68]	@ 0x44
 8008632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800863a:	f7f8 fad5 	bl	8000be8 <__aeabi_uldivmod>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4611      	mov	r1, r2
 8008644:	4b3b      	ldr	r3, [pc, #236]	@ (8008734 <UART_SetConfig+0x2d4>)
 8008646:	fba3 2301 	umull	r2, r3, r3, r1
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	2264      	movs	r2, #100	@ 0x64
 800864e:	fb02 f303 	mul.w	r3, r2, r3
 8008652:	1acb      	subs	r3, r1, r3
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800865a:	4b36      	ldr	r3, [pc, #216]	@ (8008734 <UART_SetConfig+0x2d4>)
 800865c:	fba3 2302 	umull	r2, r3, r3, r2
 8008660:	095b      	lsrs	r3, r3, #5
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008668:	441c      	add	r4, r3
 800866a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800866e:	2200      	movs	r2, #0
 8008670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800867c:	4642      	mov	r2, r8
 800867e:	464b      	mov	r3, r9
 8008680:	1891      	adds	r1, r2, r2
 8008682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008684:	415b      	adcs	r3, r3
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800868c:	4641      	mov	r1, r8
 800868e:	1851      	adds	r1, r2, r1
 8008690:	6339      	str	r1, [r7, #48]	@ 0x30
 8008692:	4649      	mov	r1, r9
 8008694:	414b      	adcs	r3, r1
 8008696:	637b      	str	r3, [r7, #52]	@ 0x34
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086a4:	4659      	mov	r1, fp
 80086a6:	00cb      	lsls	r3, r1, #3
 80086a8:	4651      	mov	r1, sl
 80086aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ae:	4651      	mov	r1, sl
 80086b0:	00ca      	lsls	r2, r1, #3
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	4642      	mov	r2, r8
 80086ba:	189b      	adds	r3, r3, r2
 80086bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086c0:	464b      	mov	r3, r9
 80086c2:	460a      	mov	r2, r1
 80086c4:	eb42 0303 	adc.w	r3, r2, r3
 80086c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086e0:	460b      	mov	r3, r1
 80086e2:	18db      	adds	r3, r3, r3
 80086e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086e6:	4613      	mov	r3, r2
 80086e8:	eb42 0303 	adc.w	r3, r2, r3
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086f6:	f7f8 fa77 	bl	8000be8 <__aeabi_uldivmod>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <UART_SetConfig+0x2d4>)
 8008700:	fba3 1302 	umull	r1, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	2164      	movs	r1, #100	@ 0x64
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	3332      	adds	r3, #50	@ 0x32
 8008712:	4a08      	ldr	r2, [pc, #32]	@ (8008734 <UART_SetConfig+0x2d4>)
 8008714:	fba2 2303 	umull	r2, r3, r2, r3
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	f003 0207 	and.w	r2, r3, #7
 800871e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4422      	add	r2, r4
 8008726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008728:	e106      	b.n	8008938 <UART_SetConfig+0x4d8>
 800872a:	bf00      	nop
 800872c:	40011000 	.word	0x40011000
 8008730:	40011400 	.word	0x40011400
 8008734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800873c:	2200      	movs	r2, #0
 800873e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800874a:	4642      	mov	r2, r8
 800874c:	464b      	mov	r3, r9
 800874e:	1891      	adds	r1, r2, r2
 8008750:	6239      	str	r1, [r7, #32]
 8008752:	415b      	adcs	r3, r3
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
 8008756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800875a:	4641      	mov	r1, r8
 800875c:	1854      	adds	r4, r2, r1
 800875e:	4649      	mov	r1, r9
 8008760:	eb43 0501 	adc.w	r5, r3, r1
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	00eb      	lsls	r3, r5, #3
 800876e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008772:	00e2      	lsls	r2, r4, #3
 8008774:	4614      	mov	r4, r2
 8008776:	461d      	mov	r5, r3
 8008778:	4643      	mov	r3, r8
 800877a:	18e3      	adds	r3, r4, r3
 800877c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008780:	464b      	mov	r3, r9
 8008782:	eb45 0303 	adc.w	r3, r5, r3
 8008786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800879a:	f04f 0200 	mov.w	r2, #0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087a6:	4629      	mov	r1, r5
 80087a8:	008b      	lsls	r3, r1, #2
 80087aa:	4621      	mov	r1, r4
 80087ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b0:	4621      	mov	r1, r4
 80087b2:	008a      	lsls	r2, r1, #2
 80087b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087b8:	f7f8 fa16 	bl	8000be8 <__aeabi_uldivmod>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4b60      	ldr	r3, [pc, #384]	@ (8008944 <UART_SetConfig+0x4e4>)
 80087c2:	fba3 2302 	umull	r2, r3, r3, r2
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	011c      	lsls	r4, r3, #4
 80087ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087dc:	4642      	mov	r2, r8
 80087de:	464b      	mov	r3, r9
 80087e0:	1891      	adds	r1, r2, r2
 80087e2:	61b9      	str	r1, [r7, #24]
 80087e4:	415b      	adcs	r3, r3
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087ec:	4641      	mov	r1, r8
 80087ee:	1851      	adds	r1, r2, r1
 80087f0:	6139      	str	r1, [r7, #16]
 80087f2:	4649      	mov	r1, r9
 80087f4:	414b      	adcs	r3, r1
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008804:	4659      	mov	r1, fp
 8008806:	00cb      	lsls	r3, r1, #3
 8008808:	4651      	mov	r1, sl
 800880a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800880e:	4651      	mov	r1, sl
 8008810:	00ca      	lsls	r2, r1, #3
 8008812:	4610      	mov	r0, r2
 8008814:	4619      	mov	r1, r3
 8008816:	4603      	mov	r3, r0
 8008818:	4642      	mov	r2, r8
 800881a:	189b      	adds	r3, r3, r2
 800881c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008820:	464b      	mov	r3, r9
 8008822:	460a      	mov	r2, r1
 8008824:	eb42 0303 	adc.w	r3, r2, r3
 8008828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800882c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008844:	4649      	mov	r1, r9
 8008846:	008b      	lsls	r3, r1, #2
 8008848:	4641      	mov	r1, r8
 800884a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800884e:	4641      	mov	r1, r8
 8008850:	008a      	lsls	r2, r1, #2
 8008852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008856:	f7f8 f9c7 	bl	8000be8 <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4611      	mov	r1, r2
 8008860:	4b38      	ldr	r3, [pc, #224]	@ (8008944 <UART_SetConfig+0x4e4>)
 8008862:	fba3 2301 	umull	r2, r3, r3, r1
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	2264      	movs	r2, #100	@ 0x64
 800886a:	fb02 f303 	mul.w	r3, r2, r3
 800886e:	1acb      	subs	r3, r1, r3
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	3332      	adds	r3, #50	@ 0x32
 8008874:	4a33      	ldr	r2, [pc, #204]	@ (8008944 <UART_SetConfig+0x4e4>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008880:	441c      	add	r4, r3
 8008882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008886:	2200      	movs	r2, #0
 8008888:	673b      	str	r3, [r7, #112]	@ 0x70
 800888a:	677a      	str	r2, [r7, #116]	@ 0x74
 800888c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	1891      	adds	r1, r2, r2
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	415b      	adcs	r3, r3
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a0:	4641      	mov	r1, r8
 80088a2:	1851      	adds	r1, r2, r1
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	4649      	mov	r1, r9
 80088a8:	414b      	adcs	r3, r1
 80088aa:	607b      	str	r3, [r7, #4]
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088b8:	4659      	mov	r1, fp
 80088ba:	00cb      	lsls	r3, r1, #3
 80088bc:	4651      	mov	r1, sl
 80088be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088c2:	4651      	mov	r1, sl
 80088c4:	00ca      	lsls	r2, r1, #3
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	4642      	mov	r2, r8
 80088ce:	189b      	adds	r3, r3, r2
 80088d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088d2:	464b      	mov	r3, r9
 80088d4:	460a      	mov	r2, r1
 80088d6:	eb42 0303 	adc.w	r3, r2, r3
 80088da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80088e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088f4:	4649      	mov	r1, r9
 80088f6:	008b      	lsls	r3, r1, #2
 80088f8:	4641      	mov	r1, r8
 80088fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088fe:	4641      	mov	r1, r8
 8008900:	008a      	lsls	r2, r1, #2
 8008902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008906:	f7f8 f96f 	bl	8000be8 <__aeabi_uldivmod>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <UART_SetConfig+0x4e4>)
 8008910:	fba3 1302 	umull	r1, r3, r3, r2
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	2164      	movs	r1, #100	@ 0x64
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	3332      	adds	r3, #50	@ 0x32
 8008922:	4a08      	ldr	r2, [pc, #32]	@ (8008944 <UART_SetConfig+0x4e4>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	095b      	lsrs	r3, r3, #5
 800892a:	f003 020f 	and.w	r2, r3, #15
 800892e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4422      	add	r2, r4
 8008936:	609a      	str	r2, [r3, #8]
}
 8008938:	bf00      	nop
 800893a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800893e:	46bd      	mov	sp, r7
 8008940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008944:	51eb851f 	.word	0x51eb851f

08008948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008948:	b084      	sub	sp, #16
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	f107 001c 	add.w	r0, r7, #28
 8008956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2b01      	cmp	r3, #1
 800895e:	d122      	bne.n	80089a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008964:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d105      	bne.n	800899a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9c0 	bl	8008d20 <USB_CoreReset>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
 80089a4:	e01a      	b.n	80089dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9b4 	bl	8008d20 <USB_CoreReset>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80089ce:	e005      	b.n	80089dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d10b      	bne.n	80089fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f043 0206 	orr.w	r2, r3, #6
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f043 0220 	orr.w	r2, r3, #32
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a06:	b004      	add	sp, #16
 8008a08:	4770      	bx	lr

08008a0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f043 0201 	orr.w	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f023 0201 	bic.w	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d115      	bne.n	8008a9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	f7fb f819 	bl	8003ab4 <HAL_Delay>
      ms++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f93a 	bl	8008d02 <USB_GetMode>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d01e      	beq.n	8008ad2 <USB_SetCurrentMode+0x84>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b31      	cmp	r3, #49	@ 0x31
 8008a98:	d9f0      	bls.n	8008a7c <USB_SetCurrentMode+0x2e>
 8008a9a:	e01a      	b.n	8008ad2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d115      	bne.n	8008ace <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f7fb f800 	bl	8003ab4 <HAL_Delay>
      ms++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f921 	bl	8008d02 <USB_GetMode>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <USB_SetCurrentMode+0x84>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b31      	cmp	r3, #49	@ 0x31
 8008aca:	d9f0      	bls.n	8008aae <USB_SetCurrentMode+0x60>
 8008acc:	e001      	b.n	8008ad2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e005      	b.n	8008ade <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b32      	cmp	r3, #50	@ 0x32
 8008ad6:	d101      	bne.n	8008adc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <USB_FlushTxFifo+0x64>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d901      	bls.n	8008b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e01b      	b.n	8008b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	daf2      	bge.n	8008af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	019b      	lsls	r3, r3, #6
 8008b18:	f043 0220 	orr.w	r2, r3, #32
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4a08      	ldr	r2, [pc, #32]	@ (8008b4c <USB_FlushTxFifo+0x64>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d901      	bls.n	8008b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e006      	b.n	8008b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d0f0      	beq.n	8008b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	00030d40 	.word	0x00030d40

08008b50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4a11      	ldr	r2, [pc, #68]	@ (8008bac <USB_FlushRxFifo+0x5c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d901      	bls.n	8008b6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e018      	b.n	8008ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	daf2      	bge.n	8008b5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2210      	movs	r2, #16
 8008b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3301      	adds	r3, #1
 8008b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a08      	ldr	r2, [pc, #32]	@ (8008bac <USB_FlushRxFifo+0x5c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d901      	bls.n	8008b92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e006      	b.n	8008ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b10      	cmp	r3, #16
 8008b9c:	d0f0      	beq.n	8008b80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	00030d40 	.word	0x00030d40

08008bb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	@ 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	71fb      	strb	r3, [r7, #7]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d123      	bne.n	8008c1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bd6:	88bb      	ldrh	r3, [r7, #4]
 8008bd8:	3303      	adds	r3, #3
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bde:	2300      	movs	r3, #0
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	e018      	b.n	8008c16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	031a      	lsls	r2, r3, #12
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	3301      	adds	r3, #1
 8008c02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3e2      	bcc.n	8008be4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3724      	adds	r7, #36	@ 0x24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b08b      	sub	sp, #44	@ 0x2c
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	089b      	lsrs	r3, r3, #2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	623b      	str	r3, [r7, #32]
 8008c56:	e014      	b.n	8008c82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	3301      	adds	r3, #1
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	3301      	adds	r3, #1
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	3301      	adds	r3, #1
 8008c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	623b      	str	r3, [r7, #32]
 8008c82:	6a3a      	ldr	r2, [r7, #32]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d3e6      	bcc.n	8008c58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c8a:	8bfb      	ldrh	r3, [r7, #30]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01e      	beq.n	8008cce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f107 0310 	add.w	r3, r7, #16
 8008ca0:	6812      	ldr	r2, [r2, #0]
 8008ca2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	701a      	strb	r2, [r3, #0]
      i++;
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008cc2:	8bfb      	ldrh	r3, [r7, #30]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008cc8:	8bfb      	ldrh	r3, [r7, #30]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1ea      	bne.n	8008ca4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	372c      	adds	r7, #44	@ 0x2c
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a13      	ldr	r2, [pc, #76]	@ (8008d84 <USB_CoreReset+0x64>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e01b      	b.n	8008d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	daf2      	bge.n	8008d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f043 0201 	orr.w	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a09      	ldr	r2, [pc, #36]	@ (8008d84 <USB_CoreReset+0x64>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d901      	bls.n	8008d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e006      	b.n	8008d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d0f0      	beq.n	8008d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	00030d40 	.word	0x00030d40

08008d88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d88:	b084      	sub	sp, #16
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008da8:	461a      	mov	r2, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d018      	beq.n	8008e10 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d10a      	bne.n	8008dfa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008df2:	f043 0304 	orr.w	r3, r3, #4
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	e014      	b.n	8008e24 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e08:	f023 0304 	bic.w	r3, r3, #4
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	e009      	b.n	8008e24 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e1e:	f023 0304 	bic.w	r3, r3, #4
 8008e22:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e24:	2110      	movs	r1, #16
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fe5e 	bl	8008ae8 <USB_FlushTxFifo>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fe8a 	bl	8008b50 <USB_FlushRxFifo>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	e015      	b.n	8008e78 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3301      	adds	r3, #1
 8008e76:	613b      	str	r3, [r7, #16]
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d3e5      	bcc.n	8008e4c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a13      	ldr	r2, [pc, #76]	@ (8008ef4 <USB_HostInit+0x16c>)
 8008ea6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a13      	ldr	r2, [pc, #76]	@ (8008ef8 <USB_HostInit+0x170>)
 8008eac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008eb0:	e009      	b.n	8008ec6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2280      	movs	r2, #128	@ 0x80
 8008eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a10      	ldr	r2, [pc, #64]	@ (8008efc <USB_HostInit+0x174>)
 8008ebc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f00 <USB_HostInit+0x178>)
 8008ec2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	f043 0210 	orr.w	r2, r3, #16
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <USB_HostInit+0x17c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef0:	b004      	add	sp, #16
 8008ef2:	4770      	bx	lr
 8008ef4:	01000200 	.word	0x01000200
 8008ef8:	00e00300 	.word	0x00e00300
 8008efc:	00600080 	.word	0x00600080
 8008f00:	004000e0 	.word	0x004000e0
 8008f04:	a3200008 	.word	0xa3200008

08008f08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008f40:	4313      	orrs	r3, r2
 8008f42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d107      	bne.n	8008f5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f50:	461a      	mov	r2, r3
 8008f52:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f56:	6053      	str	r3, [r2, #4]
 8008f58:	e009      	b.n	8008f6e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d106      	bne.n	8008f6e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f66:	461a      	mov	r2, r3
 8008f68:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008f6c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008f9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008faa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008fac:	2064      	movs	r0, #100	@ 0x64
 8008fae:	f7fa fd81 	bl	8003ab4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008fc0:	200a      	movs	r0, #10
 8008fc2:	f7fa fd77 	bl	8003ab4 <HAL_Delay>

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008ff4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <USB_DriveVbus+0x44>
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d106      	bne.n	8009014 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800900e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009012:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800901e:	d109      	bne.n	8009034 <USB_DriveVbus+0x64>
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800902e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009032:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009042:	b480      	push	{r7}
 8009044:	b085      	sub	sp, #20
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	0c5b      	lsrs	r3, r3, #17
 8009060:	f003 0303 	and.w	r3, r3, #3
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	b29b      	uxth	r3, r3
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	70fb      	strb	r3, [r7, #3]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70bb      	strb	r3, [r7, #2]
 80090aa:	4613      	mov	r3, r2
 80090ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c2:	461a      	mov	r2, r3
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295
 80090c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80090ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d87e      	bhi.n	80091d0 <USB_HC_Init+0x13c>
 80090d2:	a201      	add	r2, pc, #4	@ (adr r2, 80090d8 <USB_HC_Init+0x44>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	08009193 	.word	0x08009193
 80090e0:	080090e9 	.word	0x080090e9
 80090e4:	08009155 	.word	0x08009155
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f4:	461a      	mov	r2, r3
 80090f6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80090fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80090fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da10      	bge.n	8009126 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	440a      	add	r2, r1
 800911a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800911e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009122:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009124:	e057      	b.n	80091d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800912a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800912e:	2b00      	cmp	r3, #0
 8009130:	d051      	beq.n	80091d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	440a      	add	r2, r1
 8009148:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009150:	60d3      	str	r3, [r2, #12]
      break;
 8009152:	e040      	b.n	80091d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	4413      	add	r3, r2
 800915c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009160:	461a      	mov	r2, r3
 8009162:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800916c:	2b00      	cmp	r3, #0
 800916e:	da34      	bge.n	80091da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4413      	add	r3, r2
 8009178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	440a      	add	r2, r1
 8009186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800918a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800918e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009190:	e023      	b.n	80091da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919e:	461a      	mov	r2, r3
 80091a0:	f240 2325 	movw	r3, #549	@ 0x225
 80091a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80091a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da17      	bge.n	80091de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	0151      	lsls	r1, r2, #5
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	440a      	add	r2, r1
 80091c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091c8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80091cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80091ce:	e006      	b.n	80091de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	77fb      	strb	r3, [r7, #31]
      break;
 80091d4:	e004      	b.n	80091e0 <USB_HC_Init+0x14c>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <USB_HC_Init+0x14c>
      break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <USB_HC_Init+0x14c>
      break;
 80091de:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091fa:	f043 0302 	orr.w	r3, r3, #2
 80091fe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	2101      	movs	r1, #1
 8009210:	fa01 f303 	lsl.w	r3, r1, r3
 8009214:	6939      	ldr	r1, [r7, #16]
 8009216:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800921a:	4313      	orrs	r3, r2
 800921c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800922a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da03      	bge.n	800923a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	e001      	b.n	800923e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7ff feff 	bl	8009042 <USB_GetHostSpeed>
 8009244:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009246:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800924a:	2b02      	cmp	r3, #2
 800924c:	d106      	bne.n	800925c <USB_HC_Init+0x1c8>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d003      	beq.n	800925c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e001      	b.n	8009260 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009260:	787b      	ldrb	r3, [r7, #1]
 8009262:	059b      	lsls	r3, r3, #22
 8009264:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009268:	78bb      	ldrb	r3, [r7, #2]
 800926a:	02db      	lsls	r3, r3, #11
 800926c:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009270:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009272:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009276:	049b      	lsls	r3, r3, #18
 8009278:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800927c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800927e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009280:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009284:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	0159      	lsls	r1, r3, #5
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	440b      	add	r3, r1
 8009292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009296:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800929c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800929e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d003      	beq.n	80092ae <USB_HC_Init+0x21a>
 80092a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d10f      	bne.n	80092ce <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80092ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	@ 0x30
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80092f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d02d      	beq.n	800935e <USB_HC_StartXfer+0x86>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d129      	bne.n	800935e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d117      	bne.n	8009340 <USB_HC_StartXfer+0x68>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	79db      	ldrb	r3, [r3, #7]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <USB_HC_StartXfer+0x48>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	79db      	ldrb	r3, [r3, #7]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d10f      	bne.n	8009340 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	4413      	add	r3, r2
 8009328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	6a3a      	ldr	r2, [r7, #32]
 8009334:	440a      	add	r2, r1
 8009336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800933a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <USB_HC_StartXfer+0x86>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	795b      	ldrb	r3, [r3, #5]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d107      	bne.n	800935e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fa0f 	bl	8009778 <USB_DoPing>
      return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e0f8      	b.n	8009550 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	8912      	ldrh	r2, [r2, #8]
 800936e:	4413      	add	r3, r2
 8009370:	3b01      	subs	r3, #1
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	8912      	ldrh	r2, [r2, #8]
 8009376:	fbb3 f3f2 	udiv	r3, r3, r2
 800937a:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 800937c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800937e:	8b7b      	ldrh	r3, [r7, #26]
 8009380:	429a      	cmp	r2, r3
 8009382:	d90b      	bls.n	800939c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009384:	8b7b      	ldrh	r3, [r7, #26]
 8009386:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009388:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	8912      	ldrh	r2, [r2, #8]
 800938e:	fb03 f202 	mul.w	r2, r3, r2
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	611a      	str	r2, [r3, #16]
 8009396:	e001      	b.n	800939c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009398:	2301      	movs	r3, #1
 800939a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	78db      	ldrb	r3, [r3, #3]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d007      	beq.n	80093b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	8912      	ldrh	r2, [r2, #8]
 80093aa:	fb03 f202 	mul.w	r2, r3, r2
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	611a      	str	r2, [r3, #16]
 80093b2:	e003      	b.n	80093bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	695a      	ldr	r2, [r3, #20]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093c6:	04d9      	lsls	r1, r3, #19
 80093c8:	4b63      	ldr	r3, [pc, #396]	@ (8009558 <USB_HC_StartXfer+0x280>)
 80093ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	7a9b      	ldrb	r3, [r3, #10]
 80093d2:	075b      	lsls	r3, r3, #29
 80093d4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093d8:	69f9      	ldr	r1, [r7, #28]
 80093da:	0148      	lsls	r0, r1, #5
 80093dc:	6a39      	ldr	r1, [r7, #32]
 80093de:	4401      	add	r1, r0
 80093e0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d009      	beq.n	8009402 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	68d9      	ldr	r1, [r3, #12]
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093fe:	460a      	mov	r2, r1
 8009400:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	bf0c      	ite	eq
 8009412:	2301      	moveq	r3, #1
 8009414:	2300      	movne	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	4413      	add	r3, r2
 8009422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	6a3a      	ldr	r2, [r7, #32]
 800942e:	440a      	add	r2, r1
 8009430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009434:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009438:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	4413      	add	r3, r2
 8009442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	7e7b      	ldrb	r3, [r7, #25]
 800944a:	075b      	lsls	r3, r3, #29
 800944c:	69f9      	ldr	r1, [r7, #28]
 800944e:	0148      	lsls	r0, r1, #5
 8009450:	6a39      	ldr	r1, [r7, #32]
 8009452:	4401      	add	r1, r0
 8009454:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009458:	4313      	orrs	r3, r2
 800945a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	4413      	add	r3, r2
 8009464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009472:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	e003      	b.n	800948e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800948c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009494:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	4413      	add	r3, r2
 800949e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a2:	461a      	mov	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e04e      	b.n	8009550 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	78db      	ldrb	r3, [r3, #3]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d149      	bne.n	800954e <USB_HC_StartXfer+0x276>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d045      	beq.n	800954e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	79db      	ldrb	r3, [r3, #7]
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d830      	bhi.n	800952c <USB_HC_StartXfer+0x254>
 80094ca:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <USB_HC_StartXfer+0x1f8>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	08009505 	.word	0x08009505
 80094d8:	080094e1 	.word	0x080094e1
 80094dc:	08009505 	.word	0x08009505
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	3303      	adds	r3, #3
 80094e6:	089b      	lsrs	r3, r3, #2
 80094e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80094ea:	8afa      	ldrh	r2, [r7, #22]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d91c      	bls.n	8009530 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	619a      	str	r2, [r3, #24]
        }
        break;
 8009502:	e015      	b.n	8009530 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	3303      	adds	r3, #3
 800950a:	089b      	lsrs	r3, r3, #2
 800950c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800950e:	8afa      	ldrh	r2, [r7, #22]
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	b29b      	uxth	r3, r3
 800951a:	429a      	cmp	r2, r3
 800951c:	d90a      	bls.n	8009534 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	619a      	str	r2, [r3, #24]
        }
        break;
 800952a:	e003      	b.n	8009534 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <USB_HC_StartXfer+0x25e>
        break;
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <USB_HC_StartXfer+0x25e>
        break;
 8009534:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	68d9      	ldr	r1, [r3, #12]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	785a      	ldrb	r2, [r3, #1]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	b29b      	uxth	r3, r3
 8009544:	2000      	movs	r0, #0
 8009546:	9000      	str	r0, [sp, #0]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fb31 	bl	8008bb0 <USB_WritePacket>
  }

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3728      	adds	r7, #40	@ 0x28
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	1ff80000 	.word	0x1ff80000

0800955c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	b29b      	uxth	r3, r3
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800957e:	b480      	push	{r7}
 8009580:	b089      	sub	sp, #36	@ 0x24
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	4413      	add	r3, r2
 800959e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	0c9b      	lsrs	r3, r3, #18
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	015a      	lsls	r2, r3, #5
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	4413      	add	r3, r2
 80095b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	0fdb      	lsrs	r3, r3, #31
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d104      	bne.n	80095d8 <USB_HC_Halt+0x5a>
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e0c8      	b.n	800976a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <USB_HC_Halt+0x66>
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d163      	bne.n	80096ac <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	69fa      	ldr	r2, [r7, #28]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009602:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 80ab 	bne.w	8009768 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d133      	bne.n	8009686 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	440a      	add	r2, r1
 8009634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800963c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	440a      	add	r2, r1
 8009654:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009658:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800965c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800966a:	d81d      	bhi.n	80096a8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800967e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009682:	d0ec      	beq.n	800965e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009684:	e070      	b.n	8009768 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	440a      	add	r2, r1
 800969c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096a4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096a6:	e05f      	b.n	8009768 <USB_HC_Halt+0x1ea>
            break;
 80096a8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096aa:	e05d      	b.n	8009768 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	0151      	lsls	r1, r2, #5
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	440a      	add	r2, r1
 80096c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096ca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d133      	bne.n	8009744 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	440a      	add	r2, r1
 8009712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009716:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800971a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009728:	d81d      	bhi.n	8009766 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800973c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009740:	d0ec      	beq.n	800971c <USB_HC_Halt+0x19e>
 8009742:	e011      	b.n	8009768 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	440a      	add	r2, r1
 800975a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800975e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	e000      	b.n	8009768 <USB_HC_Halt+0x1ea>
          break;
 8009766:	bf00      	nop
    }
  }

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3724      	adds	r7, #36	@ 0x24
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800978c:	2301      	movs	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	04da      	lsls	r2, r3, #19
 8009794:	4b15      	ldr	r3, [pc, #84]	@ (80097ec <USB_DoPing+0x74>)
 8009796:	4013      	ands	r3, r2
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	0151      	lsls	r1, r2, #5
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	440a      	add	r2, r1
 80097a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d6:	461a      	mov	r2, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	1ff80000 	.word	0x1ff80000

080097f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff f911 	bl	8008a2c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800980a:	2110      	movs	r1, #16
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff f96b 	bl	8008ae8 <USB_FlushTxFifo>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff f997 	bl	8008b50 <USB_FlushRxFifo>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800982c:	2300      	movs	r3, #0
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	e01f      	b.n	8009872 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	4413      	add	r3, r2
 800983a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009848:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009850:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009858:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	4413      	add	r3, r2
 8009862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009866:	461a      	mov	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	3301      	adds	r3, #1
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b0f      	cmp	r3, #15
 8009876:	d9dc      	bls.n	8009832 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009878:	2300      	movs	r3, #0
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	e034      	b.n	80098e8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009894:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800989c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098c4:	d80c      	bhi.n	80098e0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098dc:	d0ec      	beq.n	80098b8 <USB_StopHost+0xc8>
 80098de:	e000      	b.n	80098e2 <USB_StopHost+0xf2>
        break;
 80098e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	3301      	adds	r3, #1
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d9c7      	bls.n	800987e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098f4:	461a      	mov	r2, r3
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff f880 	bl	8008a0a <USB_EnableGlobalInt>

  return ret;
 800990a:	7ffb      	ldrb	r3, [r7, #31]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b089      	sub	sp, #36	@ 0x24
 8009918:	af04      	add	r7, sp, #16
 800991a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800991c:	2301      	movs	r3, #1
 800991e:	2202      	movs	r2, #2
 8009920:	2102      	movs	r1, #2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fcb2 	bl	800a28c <USBH_FindInterface>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2bff      	cmp	r3, #255	@ 0xff
 8009930:	d002      	beq.n	8009938 <USBH_CDC_InterfaceInit+0x24>
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d901      	bls.n	800993c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009938:	2302      	movs	r3, #2
 800993a:	e13d      	b.n	8009bb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc87 	bl	800a254 <USBH_SelectInterface>
 8009946:	4603      	mov	r3, r0
 8009948:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009950:	2302      	movs	r3, #2
 8009952:	e131      	b.n	8009bb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800995a:	2050      	movs	r0, #80	@ 0x50
 800995c:	f006 ffea 	bl	8010934 <malloc>
 8009960:	4603      	mov	r3, r0
 8009962:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009974:	2302      	movs	r3, #2
 8009976:	e11f      	b.n	8009bb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009978:	2250      	movs	r2, #80	@ 0x50
 800997a:	2100      	movs	r1, #0
 800997c:	68b8      	ldr	r0, [r7, #8]
 800997e:	f008 fca8 	bl	80122d2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	211a      	movs	r1, #26
 8009988:	fb01 f303 	mul.w	r3, r1, r3
 800998c:	4413      	add	r3, r2
 800998e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b25b      	sxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	da15      	bge.n	80099c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	211a      	movs	r1, #26
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	4413      	add	r3, r2
 80099a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	211a      	movs	r1, #26
 80099b6:	fb01 f303 	mul.w	r3, r1, r3
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f002 f976 	bl	800bcbe <USBH_AllocPipe>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	7819      	ldrb	r1, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	7858      	ldrb	r0, [r3, #1]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	8952      	ldrh	r2, [r2, #10]
 80099f2:	9202      	str	r2, [sp, #8]
 80099f4:	2203      	movs	r2, #3
 80099f6:	9201      	str	r2, [sp, #4]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	4623      	mov	r3, r4
 80099fc:	4602      	mov	r2, r0
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f002 f92e 	bl	800bc60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f006 ff09 	bl	8010824 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009a12:	2300      	movs	r3, #0
 8009a14:	2200      	movs	r2, #0
 8009a16:	210a      	movs	r1, #10
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fc37 	bl	800a28c <USBH_FindInterface>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2bff      	cmp	r3, #255	@ 0xff
 8009a26:	d002      	beq.n	8009a2e <USBH_CDC_InterfaceInit+0x11a>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d901      	bls.n	8009a32 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e0c2      	b.n	8009bb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	211a      	movs	r1, #26
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	da16      	bge.n	8009a78 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	211a      	movs	r1, #26
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	4413      	add	r3, r2
 8009a56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	211a      	movs	r1, #26
 8009a66:	fb01 f303 	mul.w	r3, r1, r3
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a70:	881a      	ldrh	r2, [r3, #0]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	835a      	strh	r2, [r3, #26]
 8009a76:	e015      	b.n	8009aa4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	211a      	movs	r1, #26
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	211a      	movs	r1, #26
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a9e:	881a      	ldrh	r2, [r3, #0]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	211a      	movs	r1, #26
 8009aaa:	fb01 f303 	mul.w	r3, r1, r3
 8009aae:	4413      	add	r3, r2
 8009ab0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	b25b      	sxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	da16      	bge.n	8009aea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	211a      	movs	r1, #26
 8009ac2:	fb01 f303 	mul.w	r3, r1, r3
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	211a      	movs	r1, #26
 8009ad8:	fb01 f303 	mul.w	r3, r1, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ae2:	881a      	ldrh	r2, [r3, #0]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	835a      	strh	r2, [r3, #26]
 8009ae8:	e015      	b.n	8009b16 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	211a      	movs	r1, #26
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009afa:	781a      	ldrb	r2, [r3, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	211a      	movs	r1, #26
 8009b06:	fb01 f303 	mul.w	r3, r1, r3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b10:	881a      	ldrh	r2, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	7b9b      	ldrb	r3, [r3, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f002 f8ce 	bl	800bcbe <USBH_AllocPipe>
 8009b22:	4603      	mov	r3, r0
 8009b24:	461a      	mov	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	7bdb      	ldrb	r3, [r3, #15]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f002 f8c4 	bl	800bcbe <USBH_AllocPipe>
 8009b36:	4603      	mov	r3, r0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	7b59      	ldrb	r1, [r3, #13]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	7b98      	ldrb	r0, [r3, #14]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	8b12      	ldrh	r2, [r2, #24]
 8009b56:	9202      	str	r2, [sp, #8]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	9201      	str	r2, [sp, #4]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4623      	mov	r3, r4
 8009b60:	4602      	mov	r2, r0
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f002 f87c 	bl	800bc60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	7b19      	ldrb	r1, [r3, #12]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	7bd8      	ldrb	r0, [r3, #15]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	8b52      	ldrh	r2, [r2, #26]
 8009b80:	9202      	str	r2, [sp, #8]
 8009b82:	2202      	movs	r2, #2
 8009b84:	9201      	str	r2, [sp, #4]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	4623      	mov	r3, r4
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f002 f867 	bl	800bc60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	7b5b      	ldrb	r3, [r3, #13]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f006 fe3e 	bl	8010824 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	7b1b      	ldrb	r3, [r3, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f006 fe37 	bl	8010824 <USBH_LL_SetToggle>

  return USBH_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd90      	pop	{r4, r7, pc}

08009bc0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00e      	beq.n	8009bf8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f002 f85c 	bl	800bc9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f002 f887 	bl	800bd00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	7b1b      	ldrb	r3, [r3, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00e      	beq.n	8009c1e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	7b1b      	ldrb	r3, [r3, #12]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f002 f849 	bl	800bc9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	7b1b      	ldrb	r3, [r3, #12]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f002 f874 	bl	800bd00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7b5b      	ldrb	r3, [r3, #13]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	7b5b      	ldrb	r3, [r3, #13]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f002 f836 	bl	800bc9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	7b5b      	ldrb	r3, [r3, #13]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f002 f861 	bl	800bd00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f006 fe73 	bl	8010944 <free>
    phost->pActiveClass->pData = 0U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c64:	2200      	movs	r2, #0
 8009c66:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3340      	adds	r3, #64	@ 0x40
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f8b1 	bl	8009df2 <GetLineCoding>
 8009c90:	4603      	mov	r3, r0
 8009c92:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ca0:	2102      	movs	r1, #2
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d877      	bhi.n	8009dc4 <USBH_CDC_Process+0x114>
 8009cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <USBH_CDC_Process+0x2c>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009cf1 	.word	0x08009cf1
 8009ce0:	08009cf7 	.word	0x08009cf7
 8009ce4:	08009d27 	.word	0x08009d27
 8009ce8:	08009d9b 	.word	0x08009d9b
 8009cec:	08009da9 	.word	0x08009da9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cf4:	e06d      	b.n	8009dd2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f897 	bl	8009e30 <SetLineCoding>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d14:	e058      	b.n	8009dc8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d055      	beq.n	8009dc8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2204      	movs	r2, #4
 8009d20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d24:	e050      	b.n	8009dc8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	3340      	adds	r3, #64	@ 0x40
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f860 	bl	8009df2 <GetLineCoding>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d126      	bne.n	8009d8a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d13b      	bne.n	8009dcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d5e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d133      	bne.n	8009dcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d6e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d12b      	bne.n	8009dcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d7c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d124      	bne.n	8009dcc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f982 	bl	800a08c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d88:	e020      	b.n	8009dcc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d01d      	beq.n	8009dcc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2204      	movs	r2, #4
 8009d94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d98:	e018      	b.n	8009dcc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f867 	bl	8009e6e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f8f6 	bl	8009f92 <CDC_ProcessReception>
      break;
 8009da6:	e014      	b.n	8009dd2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009da8:	2100      	movs	r1, #0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 f951 	bl	800b052 <USBH_ClrFeature>
 8009db0:	4603      	mov	r3, r0
 8009db2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10a      	bne.n	8009dd0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009dc2:	e005      	b.n	8009dd0 <USBH_CDC_Process+0x120>

    default:
      break;
 8009dc4:	bf00      	nop
 8009dc6:	e004      	b.n	8009dd2 <USBH_CDC_Process+0x122>
      break;
 8009dc8:	bf00      	nop
 8009dca:	e002      	b.n	8009dd2 <USBH_CDC_Process+0x122>
      break;
 8009dcc:	bf00      	nop
 8009dce:	e000      	b.n	8009dd2 <USBH_CDC_Process+0x122>
      break;
 8009dd0:	bf00      	nop

  }

  return status;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	22a1      	movs	r2, #161	@ 0xa1
 8009e00:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2221      	movs	r2, #33	@ 0x21
 8009e06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2207      	movs	r2, #7
 8009e18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2207      	movs	r2, #7
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 fbdc 	bl	800b5de <USBH_CtlReq>
 8009e26:	4603      	mov	r3, r0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2221      	movs	r2, #33	@ 0x21
 8009e3e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2207      	movs	r2, #7
 8009e56:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	2207      	movs	r2, #7
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 fbbd 	bl	800b5de <USBH_CtlReq>
 8009e64:	4603      	mov	r3, r0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b086      	sub	sp, #24
 8009e72:	af02      	add	r7, sp, #8
 8009e74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d002      	beq.n	8009e94 <CDC_ProcessTransmission+0x26>
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d023      	beq.n	8009eda <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009e92:	e07a      	b.n	8009f8a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	8b12      	ldrh	r2, [r2, #24]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d90b      	bls.n	8009eb8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	69d9      	ldr	r1, [r3, #28]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8b1a      	ldrh	r2, [r3, #24]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	7b5b      	ldrb	r3, [r3, #13]
 8009eac:	2001      	movs	r0, #1
 8009eae:	9000      	str	r0, [sp, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 fe92 	bl	800bbda <USBH_BulkSendData>
 8009eb6:	e00b      	b.n	8009ed0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	7b5b      	ldrb	r3, [r3, #13]
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	9000      	str	r0, [sp, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fe85 	bl	800bbda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ed8:	e057      	b.n	8009f8a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	7b5b      	ldrb	r3, [r3, #13]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f006 fc75 	bl	80107d0 <USBH_LL_GetURBState>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d136      	bne.n	8009f5e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	8b12      	ldrh	r2, [r2, #24]
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d90e      	bls.n	8009f1a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	8b12      	ldrh	r2, [r2, #24]
 8009f04:	1a9a      	subs	r2, r3, r2
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	8b12      	ldrh	r2, [r2, #24]
 8009f12:	441a      	add	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	61da      	str	r2, [r3, #28]
 8009f18:	e002      	b.n	8009f20 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009f30:	e006      	b.n	8009f40 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f892 	bl	800a064 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2204      	movs	r2, #4
 8009f44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f54:	2300      	movs	r3, #0
 8009f56:	2200      	movs	r2, #0
 8009f58:	f002 f900 	bl	800c15c <osMessageQueuePut>
      break;
 8009f5c:	e014      	b.n	8009f88 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d111      	bne.n	8009f88 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2204      	movs	r2, #4
 8009f70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f80:	2300      	movs	r3, #0
 8009f82:	2200      	movs	r2, #0
 8009f84:	f002 f8ea 	bl	800c15c <osMessageQueuePut>
      break;
 8009f88:	bf00      	nop
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d002      	beq.n	8009fb8 <CDC_ProcessReception+0x26>
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d00e      	beq.n	8009fd4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009fb6:	e051      	b.n	800a05c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	6a19      	ldr	r1, [r3, #32]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	8b5a      	ldrh	r2, [r3, #26]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	7b1b      	ldrb	r3, [r3, #12]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fe2d 	bl	800bc24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009fd2:	e043      	b.n	800a05c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	7b1b      	ldrb	r3, [r3, #12]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f006 fbf8 	bl	80107d0 <USBH_LL_GetURBState>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009fe4:	7cfb      	ldrb	r3, [r7, #19]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d137      	bne.n	800a05a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	7b1b      	ldrb	r3, [r3, #12]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f006 fb5b 	bl	80106ac <USBH_LL_GetLastXferSize>
 8009ff6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d016      	beq.n	800a030 <CDC_ProcessReception+0x9e>
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	8b5b      	ldrh	r3, [r3, #26]
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d910      	bls.n	800a030 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1ad2      	subs	r2, r2, r3
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	6a1a      	ldr	r2, [r3, #32]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	441a      	add	r2, r3
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2203      	movs	r2, #3
 800a02a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a02e:	e006      	b.n	800a03e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f81d 	bl	800a078 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2204      	movs	r2, #4
 800a042:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a052:	2300      	movs	r3, #0
 800a054:	2200      	movs	r2, #0
 800a056:	f002 f881 	bl	800c15c <osMessageQueuePut>
      break;
 800a05a:	bf00      	nop
  }
}
 800a05c:	bf00      	nop
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e044      	b.n	800a142 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	79fa      	ldrb	r2, [r7, #7]
 800a0bc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f841 	bl	800a158 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a104:	2200      	movs	r2, #0
 800a106:	2104      	movs	r1, #4
 800a108:	2010      	movs	r0, #16
 800a10a:	f001 ffb4 	bl	800c076 <osMessageQueueNew>
 800a10e:	4602      	mov	r2, r0
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a116:	4b0d      	ldr	r3, [pc, #52]	@ (800a14c <USBH_Init+0xac>)
 800a118:	4a0d      	ldr	r2, [pc, #52]	@ (800a150 <USBH_Init+0xb0>)
 800a11a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a11c:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <USBH_Init+0xac>)
 800a11e:	2280      	movs	r2, #128	@ 0x80
 800a120:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a122:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <USBH_Init+0xac>)
 800a124:	2218      	movs	r2, #24
 800a126:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a128:	4a08      	ldr	r2, [pc, #32]	@ (800a14c <USBH_Init+0xac>)
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	4809      	ldr	r0, [pc, #36]	@ (800a154 <USBH_Init+0xb4>)
 800a12e:	f001 fef5 	bl	800bf1c <osThreadNew>
 800a132:	4602      	mov	r2, r0
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f006 fa02 	bl	8010544 <USBH_LL_Init>

  return USBH_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	200007d0 	.word	0x200007d0
 800a150:	080156d4 	.word	0x080156d4
 800a154:	0800adc9 	.word	0x0800adc9

0800a158 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e009      	b.n	800a17e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	33e0      	adds	r3, #224	@ 0xe0
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3301      	adds	r3, #1
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b0f      	cmp	r3, #15
 800a182:	d9f2      	bls.n	800a16a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e009      	b.n	800a19e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a194:	2200      	movs	r2, #0
 800a196:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a4:	d3f1      	bcc.n	800a18a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2240      	movs	r2, #64	@ 0x40
 800a1ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d016      	beq.n	800a242 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10e      	bne.n	800a23c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	33de      	adds	r3, #222	@ 0xde
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
 800a23a:	e004      	b.n	800a246 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a23c:	2302      	movs	r3, #2
 800a23e:	73fb      	strb	r3, [r7, #15]
 800a240:	e001      	b.n	800a246 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a242:	2302      	movs	r3, #2
 800a244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a246:	7bfb      	ldrb	r3, [r7, #15]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a26a:	78fa      	ldrb	r2, [r7, #3]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d204      	bcs.n	800a27a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a278:	e001      	b.n	800a27e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a27a:	2302      	movs	r3, #2
 800a27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	70fb      	strb	r3, [r7, #3]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70bb      	strb	r3, [r7, #2]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a2b6:	e025      	b.n	800a304 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	221a      	movs	r2, #26
 800a2bc:	fb02 f303 	mul.w	r3, r2, r3
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	795b      	ldrb	r3, [r3, #5]
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d002      	beq.n	800a2da <USBH_FindInterface+0x4e>
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	2bff      	cmp	r3, #255	@ 0xff
 800a2d8:	d111      	bne.n	800a2fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2de:	78ba      	ldrb	r2, [r7, #2]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d002      	beq.n	800a2ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a2e4:	78bb      	ldrb	r3, [r7, #2]
 800a2e6:	2bff      	cmp	r3, #255	@ 0xff
 800a2e8:	d109      	bne.n	800a2fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a2ee:	787a      	ldrb	r2, [r7, #1]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d002      	beq.n	800a2fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a2f4:	787b      	ldrb	r3, [r7, #1]
 800a2f6:	2bff      	cmp	r3, #255	@ 0xff
 800a2f8:	d101      	bne.n	800a2fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	e006      	b.n	800a30c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	3301      	adds	r3, #1
 800a302:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d9d6      	bls.n	800a2b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a30a:	23ff      	movs	r3, #255	@ 0xff
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f006 f94b 	bl	80105bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a326:	2101      	movs	r1, #1
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f006 fa64 	bl	80107f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a340:	2302      	movs	r3, #2
 800a342:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	d102      	bne.n	800a35a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2203      	movs	r2, #3
 800a358:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b0b      	cmp	r3, #11
 800a362:	f200 8244 	bhi.w	800a7ee <USBH_Process+0x4b6>
 800a366:	a201      	add	r2, pc, #4	@ (adr r2, 800a36c <USBH_Process+0x34>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a39d 	.word	0x0800a39d
 800a370:	0800a3eb 	.word	0x0800a3eb
 800a374:	0800a46f 	.word	0x0800a46f
 800a378:	0800a76d 	.word	0x0800a76d
 800a37c:	0800a7ef 	.word	0x0800a7ef
 800a380:	0800a52b 	.word	0x0800a52b
 800a384:	0800a6f7 	.word	0x0800a6f7
 800a388:	0800a57d 	.word	0x0800a57d
 800a38c:	0800a5b9 	.word	0x0800a5b9
 800a390:	0800a5f1 	.word	0x0800a5f1
 800a394:	0800a64f 	.word	0x0800a64f
 800a398:	0800a755 	.word	0x0800a755
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 8224 	beq.w	800a7f2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a3b0:	20c8      	movs	r0, #200	@ 0xc8
 800a3b2:	f006 fa67 	bl	8010884 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f006 f95d 	bl	8010676 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f001 feba 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a3e8:	e203      	b.n	800a7f2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d107      	bne.n	800a404 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	e025      	b.n	800a450 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a40a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a40e:	d914      	bls.n	800a43a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a416:	3301      	adds	r3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a426:	2b03      	cmp	r3, #3
 800a428:	d903      	bls.n	800a432 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	220d      	movs	r2, #13
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	e00e      	b.n	800a450 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
 800a438:	e00a      	b.n	800a450 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a440:	f103 020a 	add.w	r2, r3, #10
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a44a:	200a      	movs	r0, #10
 800a44c:	f006 fa1a 	bl	8010884 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a464:	2300      	movs	r3, #0
 800a466:	2200      	movs	r2, #0
 800a468:	f001 fe78 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a46c:	e1c8      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a47e:	2104      	movs	r1, #4
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a484:	2064      	movs	r0, #100	@ 0x64
 800a486:	f006 f9fd 	bl	8010884 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f006 f8cc 	bl	8010628 <USBH_LL_GetSpeed>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2205      	movs	r2, #5
 800a49e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fc0b 	bl	800bcbe <USBH_AllocPipe>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4b0:	2180      	movs	r1, #128	@ 0x80
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fc03 	bl	800bcbe <USBH_AllocPipe>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7919      	ldrb	r1, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4d4:	9202      	str	r2, [sp, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	9201      	str	r2, [sp, #4]
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2280      	movs	r2, #128	@ 0x80
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 fbbd 	bl	800bc60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7959      	ldrb	r1, [r3, #5]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a4fa:	9202      	str	r2, [sp, #8]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	9201      	str	r2, [sp, #4]
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	4603      	mov	r3, r0
 800a504:	2200      	movs	r2, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 fbaa 	bl	800bc60 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	f001 fe1a 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a528:	e16a      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f96e 	bl	800a80c <USBH_HandleEnum>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f040 815c 	bne.w	800a7f6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d103      	bne.n	800a558 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2208      	movs	r2, #8
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e002      	b.n	800a55e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2207      	movs	r2, #7
 800a55c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2205      	movs	r2, #5
 800a562:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a572:	2300      	movs	r3, #0
 800a574:	2200      	movs	r2, #0
 800a576:	f001 fdf1 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a57a:	e13c      	b.n	800a7f6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8139 	beq.w	800a7fa <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a58e:	2101      	movs	r1, #1
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2208      	movs	r2, #8
 800a598:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2205      	movs	r2, #5
 800a59e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f001 fdd3 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a5b6:	e120      	b.n	800a7fa <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fcff 	bl	800afc4 <USBH_SetCfg>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2209      	movs	r2, #9
 800a5d0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f001 fdb7 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a5ee:	e107      	b.n	800a800 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d015      	beq.n	800a62a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a5fe:	2101      	movs	r1, #1
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fd02 	bl	800b00a <USBH_SetFeature>
 800a606:	4603      	mov	r3, r0
 800a608:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	220a      	movs	r2, #10
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	e00a      	b.n	800a630 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d106      	bne.n	800a630 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	220a      	movs	r2, #10
 800a626:	701a      	strb	r2, [r3, #0]
 800a628:	e002      	b.n	800a630 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	220a      	movs	r2, #10
 800a62e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a644:	2300      	movs	r3, #0
 800a646:	2200      	movs	r2, #0
 800a648:	f001 fd88 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a64c:	e0d8      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a654:	2b00      	cmp	r3, #0
 800a656:	d03f      	beq.n	800a6d8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	e016      	b.n	800a694 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a666:	7bfa      	ldrb	r2, [r7, #15]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	32de      	adds	r2, #222	@ 0xde
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	791a      	ldrb	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a678:	429a      	cmp	r2, r3
 800a67a:	d108      	bne.n	800a68e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a67c:	7bfa      	ldrb	r2, [r7, #15]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32de      	adds	r2, #222	@ 0xde
 800a682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a68c:	e005      	b.n	800a69a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	3301      	adds	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0e5      	beq.n	800a666 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d016      	beq.n	800a6d2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	4798      	blx	r3
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2206      	movs	r2, #6
 800a6ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a6c2:	2103      	movs	r1, #3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
 800a6c8:	e006      	b.n	800a6d8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220d      	movs	r2, #13
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e002      	b.n	800a6d8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220d      	movs	r2, #13
 800a6d6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2205      	movs	r2, #5
 800a6dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f001 fd34 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a6f4:	e084      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d017      	beq.n	800a730 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d103      	bne.n	800a720 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	220b      	movs	r2, #11
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e00a      	b.n	800a736 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b02      	cmp	r3, #2
 800a726:	d106      	bne.n	800a736 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	220d      	movs	r2, #13
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	e002      	b.n	800a736 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	220d      	movs	r2, #13
 800a734:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2205      	movs	r2, #5
 800a73a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a74a:	2300      	movs	r3, #0
 800a74c:	2200      	movs	r2, #0
 800a74e:	f001 fd05 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a752:	e055      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d04f      	beq.n	800a7fe <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
      }
      break;
 800a76a:	e048      	b.n	800a7fe <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff fcef 	bl	800a158 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7a8:	2105      	movs	r1, #5
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d107      	bne.n	800a7ca <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff fda8 	bl	800a318 <USBH_Start>
 800a7c8:	e002      	b.n	800a7d0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f005 fef6 	bl	80105bc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f001 fcb8 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      break;
 800a7ec:	e008      	b.n	800a800 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a7ee:	bf00      	nop
 800a7f0:	e006      	b.n	800a800 <USBH_Process+0x4c8>
      break;
 800a7f2:	bf00      	nop
 800a7f4:	e004      	b.n	800a800 <USBH_Process+0x4c8>
      break;
 800a7f6:	bf00      	nop
 800a7f8:	e002      	b.n	800a800 <USBH_Process+0x4c8>
    break;
 800a7fa:	bf00      	nop
 800a7fc:	e000      	b.n	800a800 <USBH_Process+0x4c8>
      break;
 800a7fe:	bf00      	nop
  }
  return USBH_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop

0800a80c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af04      	add	r7, sp, #16
 800a812:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a814:	2301      	movs	r3, #1
 800a816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a818:	2301      	movs	r3, #1
 800a81a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	2b07      	cmp	r3, #7
 800a822:	f200 8204 	bhi.w	800ac2e <USBH_HandleEnum+0x422>
 800a826:	a201      	add	r2, pc, #4	@ (adr r2, 800a82c <USBH_HandleEnum+0x20>)
 800a828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82c:	0800a84d 	.word	0x0800a84d
 800a830:	0800a907 	.word	0x0800a907
 800a834:	0800a971 	.word	0x0800a971
 800a838:	0800a9fb 	.word	0x0800a9fb
 800a83c:	0800aa65 	.word	0x0800aa65
 800a840:	0800aad5 	.word	0x0800aad5
 800a844:	0800ab71 	.word	0x0800ab71
 800a848:	0800abef 	.word	0x0800abef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a84c:	2108      	movs	r1, #8
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fae8 	bl	800ae24 <USBH_Get_DevDesc>
 800a854:	4603      	mov	r3, r0
 800a856:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d12e      	bne.n	800a8bc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	7919      	ldrb	r1, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a882:	9202      	str	r2, [sp, #8]
 800a884:	2200      	movs	r2, #0
 800a886:	9201      	str	r2, [sp, #4]
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	4603      	mov	r3, r0
 800a88c:	2280      	movs	r2, #128	@ 0x80
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 f9e6 	bl	800bc60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7959      	ldrb	r1, [r3, #5]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8a8:	9202      	str	r2, [sp, #8]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	9201      	str	r2, [sp, #4]
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f9d3 	bl	800bc60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8ba:	e1ba      	b.n	800ac32 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	f040 81b7 	bne.w	800ac32 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d903      	bls.n	800a8e6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	220d      	movs	r2, #13
 800a8e2:	701a      	strb	r2, [r3, #0]
      break;
 800a8e4:	e1a5      	b.n	800ac32 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	795b      	ldrb	r3, [r3, #5]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 fa07 	bl	800bd00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	791b      	ldrb	r3, [r3, #4]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 fa01 	bl	800bd00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	701a      	strb	r2, [r3, #0]
      break;
 800a904:	e195      	b.n	800ac32 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a906:	2112      	movs	r1, #18
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa8b 	bl	800ae24 <USBH_Get_DevDesc>
 800a90e:	4603      	mov	r3, r0
 800a910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a91e:	e18a      	b.n	800ac36 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	2b03      	cmp	r3, #3
 800a924:	f040 8187 	bne.w	800ac36 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a92e:	3301      	adds	r3, #1
 800a930:	b2da      	uxtb	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d903      	bls.n	800a94a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	220d      	movs	r2, #13
 800a946:	701a      	strb	r2, [r3, #0]
      break;
 800a948:	e175      	b.n	800ac36 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	795b      	ldrb	r3, [r3, #5]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 f9d5 	bl	800bd00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	791b      	ldrb	r3, [r3, #4]
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 f9cf 	bl	800bd00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
      break;
 800a96e:	e162      	b.n	800ac36 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a970:	2101      	movs	r1, #1
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fb02 	bl	800af7c <USBH_SetAddress>
 800a978:	4603      	mov	r3, r0
 800a97a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d130      	bne.n	800a9e4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a982:	2002      	movs	r0, #2
 800a984:	f005 ff7e 	bl	8010884 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2203      	movs	r2, #3
 800a994:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7919      	ldrb	r1, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9aa:	9202      	str	r2, [sp, #8]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	9201      	str	r2, [sp, #4]
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2280      	movs	r2, #128	@ 0x80
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 f952 	bl	800bc60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7959      	ldrb	r1, [r3, #5]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9d0:	9202      	str	r2, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f93f 	bl	800bc60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9e2:	e12a      	b.n	800ac3a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	f040 8127 	bne.w	800ac3a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	220d      	movs	r2, #13
 800a9f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	705a      	strb	r2, [r3, #1]
      break;
 800a9f8:	e11f      	b.n	800ac3a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a9fa:	2109      	movs	r1, #9
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa39 	bl	800ae74 <USBH_Get_CfgDesc>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2204      	movs	r2, #4
 800aa10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa12:	e114      	b.n	800ac3e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	f040 8111 	bne.w	800ac3e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa22:	3301      	adds	r3, #1
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d903      	bls.n	800aa3e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	220d      	movs	r2, #13
 800aa3a:	701a      	strb	r2, [r3, #0]
      break;
 800aa3c:	e0ff      	b.n	800ac3e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	795b      	ldrb	r3, [r3, #5]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 f95b 	bl	800bd00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	791b      	ldrb	r3, [r3, #4]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 f955 	bl	800bd00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	701a      	strb	r2, [r3, #0]
      break;
 800aa62:	e0ec      	b.n	800ac3e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fa01 	bl	800ae74 <USBH_Get_CfgDesc>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2205      	movs	r2, #5
 800aa80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa82:	e0de      	b.n	800ac42 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	f040 80db 	bne.w	800ac42 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa92:	3301      	adds	r3, #1
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d903      	bls.n	800aaae <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	220d      	movs	r2, #13
 800aaaa:	701a      	strb	r2, [r3, #0]
      break;
 800aaac:	e0c9      	b.n	800ac42 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	795b      	ldrb	r3, [r3, #5]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f923 	bl	800bd00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	791b      	ldrb	r3, [r3, #4]
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f001 f91d 	bl	800bd00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	701a      	strb	r2, [r3, #0]
      break;
 800aad2:	e0b6      	b.n	800ac42 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d036      	beq.n	800ab4c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aaea:	23ff      	movs	r3, #255	@ 0xff
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9e5 	bl	800aebc <USBH_Get_StringDesc>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d111      	bne.n	800ab20 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2206      	movs	r2, #6
 800ab00:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2205      	movs	r2, #5
 800ab06:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab16:	2300      	movs	r3, #0
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f001 fb1f 	bl	800c15c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab1e:	e092      	b.n	800ac46 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	f040 808f 	bne.w	800ac46 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2206      	movs	r2, #6
 800ab2c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2205      	movs	r2, #5
 800ab32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab42:	2300      	movs	r3, #0
 800ab44:	2200      	movs	r2, #0
 800ab46:	f001 fb09 	bl	800c15c <osMessageQueuePut>
      break;
 800ab4a:	e07c      	b.n	800ac46 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2206      	movs	r2, #6
 800ab50:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2205      	movs	r2, #5
 800ab56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab66:	2300      	movs	r3, #0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f001 faf7 	bl	800c15c <osMessageQueuePut>
      break;
 800ab6e:	e06a      	b.n	800ac46 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d027      	beq.n	800abca <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab86:	23ff      	movs	r3, #255	@ 0xff
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f997 	bl	800aebc <USBH_Get_StringDesc>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2207      	movs	r2, #7
 800ab9c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab9e:	e054      	b.n	800ac4a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d151      	bne.n	800ac4a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2207      	movs	r2, #7
 800abaa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2205      	movs	r2, #5
 800abb0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abc0:	2300      	movs	r3, #0
 800abc2:	2200      	movs	r2, #0
 800abc4:	f001 faca 	bl	800c15c <osMessageQueuePut>
      break;
 800abc8:	e03f      	b.n	800ac4a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2207      	movs	r2, #7
 800abce:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2205      	movs	r2, #5
 800abd4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	f001 fab8 	bl	800c15c <osMessageQueuePut>
      break;
 800abec:	e02d      	b.n	800ac4a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d017      	beq.n	800ac28 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ac04:	23ff      	movs	r3, #255	@ 0xff
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f958 	bl	800aebc <USBH_Get_StringDesc>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ac1a:	e018      	b.n	800ac4e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d115      	bne.n	800ac4e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]
      break;
 800ac26:	e012      	b.n	800ac4e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac2c:	e00f      	b.n	800ac4e <USBH_HandleEnum+0x442>

    default:
      break;
 800ac2e:	bf00      	nop
 800ac30:	e00e      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac32:	bf00      	nop
 800ac34:	e00c      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac36:	bf00      	nop
 800ac38:	e00a      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac3a:	bf00      	nop
 800ac3c:	e008      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac3e:	bf00      	nop
 800ac40:	e006      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac42:	bf00      	nop
 800ac44:	e004      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac46:	bf00      	nop
 800ac48:	e002      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac4a:	bf00      	nop
 800ac4c:	e000      	b.n	800ac50 <USBH_HandleEnum+0x444>
      break;
 800ac4e:	bf00      	nop
  }
  return Status;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop

0800ac5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f804 	bl	800ac9e <USBH_HandleSof>
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b0b      	cmp	r3, #11
 800acae:	d10a      	bne.n	800acc6 <USBH_HandleSof+0x28>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d005      	beq.n	800acc6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
  }
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800acf2:	2300      	movs	r3, #0
 800acf4:	2200      	movs	r2, #0
 800acf6:	f001 fa31 	bl	800c15c <osMessageQueuePut>
#endif
#endif

  return;
 800acfa:	bf00      	nop
}
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ad12:	bf00      	nop
}
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad52:	2300      	movs	r3, #0
 800ad54:	2200      	movs	r2, #0
 800ad56:	f001 fa01 	bl	800c15c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f005 fc34 	bl	80105f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 ffb5 	bl	800bd00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	795b      	ldrb	r3, [r3, #5]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 ffaf 	bl	800bd00 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800adb6:	2300      	movs	r3, #0
 800adb8:	2200      	movs	r2, #0
 800adba:	f001 f9cf 	bl	800c15c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	2200      	movs	r2, #0
 800ade2:	f001 fa1b 	bl	800c21c <osMessageQueueGet>
 800ade6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f0      	bne.n	800add0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff faa2 	bl	800a338 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800adf4:	e7ec      	b.n	800add0 <USBH_Process_OS+0x8>

0800adf6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ae12:	2300      	movs	r3, #0
 800ae14:	2200      	movs	r2, #0
 800ae16:	f001 f9a1 	bl	800c15c <osMessageQueuePut>
#endif

  return USBH_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae42:	2100      	movs	r1, #0
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f864 	bl	800af12 <USBH_GetDescriptor>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae60:	78fa      	ldrb	r2, [r7, #3]
 800ae62:	b292      	uxth	r2, r2
 800ae64:	4619      	mov	r1, r3
 800ae66:	f000 f919 	bl	800b09c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af02      	add	r7, sp, #8
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	331c      	adds	r3, #28
 800ae84:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ae86:	887b      	ldrh	r3, [r7, #2]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae90:	2100      	movs	r1, #0
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f83d 	bl	800af12 <USBH_GetDescriptor>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d107      	bne.n	800aeb2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aea2:	887b      	ldrh	r3, [r7, #2]
 800aea4:	461a      	mov	r2, r3
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f985 	bl	800b1b8 <USBH_ParseCfgDesc>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	607a      	str	r2, [r7, #4]
 800aec6:	461a      	mov	r2, r3
 800aec8:	460b      	mov	r3, r1
 800aeca:	72fb      	strb	r3, [r7, #11]
 800aecc:	4613      	mov	r3, r2
 800aece:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800aed8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800aee0:	893b      	ldrh	r3, [r7, #8]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	460b      	mov	r3, r1
 800aee6:	2100      	movs	r1, #0
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f812 	bl	800af12 <USBH_GetDescriptor>
 800aeee:	4603      	mov	r3, r0
 800aef0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d107      	bne.n	800af08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aefe:	893a      	ldrh	r2, [r7, #8]
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fb1e 	bl	800b544 <USBH_ParseStringDesc>
  }

  return status;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	72fb      	strb	r3, [r7, #11]
 800af20:	4613      	mov	r3, r2
 800af22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	789b      	ldrb	r3, [r3, #2]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d11c      	bne.n	800af66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af2c:	7afb      	ldrb	r3, [r7, #11]
 800af2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af32:	b2da      	uxtb	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2206      	movs	r2, #6
 800af3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	893a      	ldrh	r2, [r7, #8]
 800af42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800af44:	893b      	ldrh	r3, [r7, #8]
 800af46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af4e:	d104      	bne.n	800af5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f240 4209 	movw	r2, #1033	@ 0x409
 800af56:	829a      	strh	r2, [r3, #20]
 800af58:	e002      	b.n	800af60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8b3a      	ldrh	r2, [r7, #24]
 800af64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af66:	8b3b      	ldrh	r3, [r7, #24]
 800af68:	461a      	mov	r2, r3
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fb36 	bl	800b5de <USBH_CtlReq>
 800af72:	4603      	mov	r3, r0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	789b      	ldrb	r3, [r3, #2]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d10f      	bne.n	800afb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2205      	movs	r2, #5
 800af9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2100      	movs	r1, #0
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb12 	bl	800b5de <USBH_CtlReq>
 800afba:	4603      	mov	r3, r0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	789b      	ldrb	r3, [r3, #2]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d10e      	bne.n	800aff6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2209      	movs	r2, #9
 800afe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	887a      	ldrh	r2, [r7, #2]
 800afe8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aff6:	2200      	movs	r2, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 faef 	bl	800b5de <USBH_CtlReq>
 800b000:	4603      	mov	r3, r0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	789b      	ldrb	r3, [r3, #2]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d10f      	bne.n	800b03e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2203      	movs	r2, #3
 800b028:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b03e:	2200      	movs	r2, #0
 800b040:	2100      	movs	r1, #0
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 facb 	bl	800b5de <USBH_CtlReq>
 800b048:	4603      	mov	r3, r0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	789b      	ldrb	r3, [r3, #2]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d10f      	bne.n	800b086 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 faa7 	bl	800b5de <USBH_CtlReq>
 800b090:	4603      	mov	r3, r0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	785a      	ldrb	r2, [r3, #1]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	3302      	adds	r3, #2
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	3303      	adds	r3, #3
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	791a      	ldrb	r2, [r3, #4]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	795a      	ldrb	r2, [r3, #5]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	799a      	ldrb	r2, [r3, #6]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	79da      	ldrb	r2, [r3, #7]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	79db      	ldrb	r3, [r3, #7]
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	dc0f      	bgt.n	800b11c <USBH_ParseDevDesc+0x80>
 800b0fc:	2b08      	cmp	r3, #8
 800b0fe:	db14      	blt.n	800b12a <USBH_ParseDevDesc+0x8e>
 800b100:	3b08      	subs	r3, #8
 800b102:	4a2c      	ldr	r2, [pc, #176]	@ (800b1b4 <USBH_ParseDevDesc+0x118>)
 800b104:	fa22 f303 	lsr.w	r3, r2, r3
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d102      	bne.n	800b120 <USBH_ParseDevDesc+0x84>
 800b11a:	e006      	b.n	800b12a <USBH_ParseDevDesc+0x8e>
 800b11c:	2b40      	cmp	r3, #64	@ 0x40
 800b11e:	d104      	bne.n	800b12a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	79da      	ldrb	r2, [r3, #7]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	71da      	strb	r2, [r3, #7]
      break;
 800b128:	e003      	b.n	800b132 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2240      	movs	r2, #64	@ 0x40
 800b12e:	71da      	strb	r2, [r3, #7]
      break;
 800b130:	bf00      	nop
  }

  if (length > 8U)
 800b132:	88fb      	ldrh	r3, [r7, #6]
 800b134:	2b08      	cmp	r3, #8
 800b136:	d936      	bls.n	800b1a6 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	3308      	adds	r3, #8
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	3309      	adds	r3, #9
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4313      	orrs	r3, r2
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	330a      	adds	r3, #10
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	330b      	adds	r3, #11
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	b29b      	uxth	r3, r3
 800b164:	4313      	orrs	r3, r2
 800b166:	b29a      	uxth	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	330c      	adds	r3, #12
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	330d      	adds	r3, #13
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	b29a      	uxth	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	7b9a      	ldrb	r2, [r3, #14]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	7bda      	ldrb	r2, [r3, #15]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	7c1a      	ldrb	r2, [r3, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	7c5a      	ldrb	r2, [r3, #17]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	745a      	strb	r2, [r3, #17]
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	01000101 	.word	0x01000101

0800b1b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08c      	sub	sp, #48	@ 0x30
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b1cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	785a      	ldrb	r2, [r3, #1]
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	3302      	adds	r3, #2
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	3303      	adds	r3, #3
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4313      	orrs	r3, r2
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b212:	bf28      	it	cs
 800b214:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	791a      	ldrb	r2, [r3, #4]
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	795a      	ldrb	r2, [r3, #5]
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	799a      	ldrb	r2, [r3, #6]
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	79da      	ldrb	r2, [r3, #7]
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	7a1a      	ldrb	r2, [r3, #8]
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d002      	beq.n	800b254 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	2209      	movs	r2, #9
 800b252:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b254:	88fb      	ldrh	r3, [r7, #6]
 800b256:	2b09      	cmp	r3, #9
 800b258:	f240 809d 	bls.w	800b396 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800b25c:	2309      	movs	r3, #9
 800b25e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b264:	e081      	b.n	800b36a <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b266:	f107 0316 	add.w	r3, r7, #22
 800b26a:	4619      	mov	r1, r3
 800b26c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26e:	f000 f99c 	bl	800b5aa <USBH_GetNextDesc>
 800b272:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d176      	bne.n	800b36a <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b09      	cmp	r3, #9
 800b282:	d002      	beq.n	800b28a <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	2209      	movs	r2, #9
 800b288:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b28a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b28e:	221a      	movs	r2, #26
 800b290:	fb02 f303 	mul.w	r3, r2, r3
 800b294:	3308      	adds	r3, #8
 800b296:	6a3a      	ldr	r2, [r7, #32]
 800b298:	4413      	add	r3, r2
 800b29a:	3302      	adds	r3, #2
 800b29c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b29e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2a0:	69f8      	ldr	r0, [r7, #28]
 800b2a2:	f000 f87e 	bl	800b3a2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2b0:	e043      	b.n	800b33a <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2b2:	f107 0316 	add.w	r3, r7, #22
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2ba:	f000 f976 	bl	800b5aa <USBH_GetNextDesc>
 800b2be:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d138      	bne.n	800b33a <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	795b      	ldrb	r3, [r3, #5]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d10f      	bne.n	800b2f0 <USBH_ParseCfgDesc+0x138>
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	799b      	ldrb	r3, [r3, #6]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d10b      	bne.n	800b2f0 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	79db      	ldrb	r3, [r3, #7]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10f      	bne.n	800b300 <USBH_ParseCfgDesc+0x148>
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d00b      	beq.n	800b300 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ea:	2209      	movs	r2, #9
 800b2ec:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2ee:	e007      	b.n	800b300 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b07      	cmp	r3, #7
 800b2f6:	d004      	beq.n	800b302 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	2207      	movs	r2, #7
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	e000      	b.n	800b302 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b300:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b306:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b30a:	3201      	adds	r2, #1
 800b30c:	00d2      	lsls	r2, r2, #3
 800b30e:	211a      	movs	r1, #26
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	4413      	add	r3, r2
 800b316:	3308      	adds	r3, #8
 800b318:	6a3a      	ldr	r2, [r7, #32]
 800b31a:	4413      	add	r3, r2
 800b31c:	3304      	adds	r3, #4
 800b31e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b322:	69b9      	ldr	r1, [r7, #24]
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f000 f86b 	bl	800b400 <USBH_ParseEPDesc>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b334:	3301      	adds	r3, #1
 800b336:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	791b      	ldrb	r3, [r3, #4]
 800b33e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b342:	429a      	cmp	r2, r3
 800b344:	d204      	bcs.n	800b350 <USBH_ParseCfgDesc+0x198>
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	885a      	ldrh	r2, [r3, #2]
 800b34a:	8afb      	ldrh	r3, [r7, #22]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d8b0      	bhi.n	800b2b2 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	791b      	ldrb	r3, [r3, #4]
 800b354:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b358:	429a      	cmp	r2, r3
 800b35a:	d201      	bcs.n	800b360 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e01c      	b.n	800b39a <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b364:	3301      	adds	r3, #1
 800b366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b36a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d805      	bhi.n	800b37e <USBH_ParseCfgDesc+0x1c6>
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	885a      	ldrh	r2, [r3, #2]
 800b376:	8afb      	ldrh	r3, [r7, #22]
 800b378:	429a      	cmp	r2, r3
 800b37a:	f63f af74 	bhi.w	800b266 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	791b      	ldrb	r3, [r3, #4]
 800b382:	2b02      	cmp	r3, #2
 800b384:	bf28      	it	cs
 800b386:	2302      	movcs	r3, #2
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b38e:	429a      	cmp	r2, r3
 800b390:	d201      	bcs.n	800b396 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b392:	2303      	movs	r3, #3
 800b394:	e001      	b.n	800b39a <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3730      	adds	r7, #48	@ 0x30
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	781a      	ldrb	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	785a      	ldrb	r2, [r3, #1]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	789a      	ldrb	r2, [r3, #2]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	78da      	ldrb	r2, [r3, #3]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	791a      	ldrb	r2, [r3, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	795a      	ldrb	r2, [r3, #5]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	799a      	ldrb	r2, [r3, #6]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	79da      	ldrb	r2, [r3, #7]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	7a1a      	ldrb	r2, [r3, #8]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	721a      	strb	r2, [r3, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b400:	b480      	push	{r7}
 800b402:	b087      	sub	sp, #28
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	785a      	ldrb	r2, [r3, #1]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	789a      	ldrb	r2, [r3, #2]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	78da      	ldrb	r2, [r3, #3]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3304      	adds	r3, #4
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3305      	adds	r3, #5
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	021b      	lsls	r3, r3, #8
 800b440:	b29b      	uxth	r3, r3
 800b442:	4313      	orrs	r3, r2
 800b444:	b29a      	uxth	r2, r3
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	799a      	ldrb	r2, [r3, #6]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	889b      	ldrh	r3, [r3, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b45a:	2303      	movs	r3, #3
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	e031      	b.n	800b4c4 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	889b      	ldrh	r3, [r3, #4]
 800b464:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b468:	f023 0307 	bic.w	r3, r3, #7
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	889b      	ldrh	r3, [r3, #4]
 800b476:	b21a      	sxth	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	4619      	mov	r1, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3305      	adds	r3, #5
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	b29b      	uxth	r3, r3
 800b48a:	430b      	orrs	r3, r1
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10f      	bne.n	800b4b6 <USBH_ParseEPDesc+0xb6>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3304      	adds	r3, #4
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	4619      	mov	r1, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3305      	adds	r3, #5
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	430b      	orrs	r3, r1
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	b21b      	sxth	r3, r3
 800b4ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4b2:	b21b      	sxth	r3, r3
 800b4b4:	e001      	b.n	800b4ba <USBH_ParseEPDesc+0xba>
 800b4b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	b21b      	sxth	r3, r3
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d116      	bne.n	800b4fc <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	78db      	ldrb	r3, [r3, #3]
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d005      	beq.n	800b4e6 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	78db      	ldrb	r3, [r3, #3]
 800b4de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d127      	bne.n	800b536 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	799b      	ldrb	r3, [r3, #6]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <USBH_ParseEPDesc+0xf6>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	799b      	ldrb	r3, [r3, #6]
 800b4f2:	2b10      	cmp	r3, #16
 800b4f4:	d91f      	bls.n	800b536 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	75fb      	strb	r3, [r7, #23]
 800b4fa:	e01c      	b.n	800b536 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	78db      	ldrb	r3, [r3, #3]
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	2b01      	cmp	r3, #1
 800b506:	d10a      	bne.n	800b51e <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	799b      	ldrb	r3, [r3, #6]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <USBH_ParseEPDesc+0x118>
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	799b      	ldrb	r3, [r3, #6]
 800b514:	2b10      	cmp	r3, #16
 800b516:	d90e      	bls.n	800b536 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b518:	2303      	movs	r3, #3
 800b51a:	75fb      	strb	r3, [r7, #23]
 800b51c:	e00b      	b.n	800b536 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	78db      	ldrb	r3, [r3, #3]
 800b522:	f003 0303 	and.w	r3, r3, #3
 800b526:	2b03      	cmp	r3, #3
 800b528:	d105      	bne.n	800b536 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	799b      	ldrb	r3, [r3, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b532:	2303      	movs	r3, #3
 800b534:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d120      	bne.n	800b59e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	1e9a      	subs	r2, r3, #2
 800b562:	88fb      	ldrh	r3, [r7, #6]
 800b564:	4293      	cmp	r3, r2
 800b566:	bf28      	it	cs
 800b568:	4613      	movcs	r3, r2
 800b56a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3302      	adds	r3, #2
 800b570:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b572:	2300      	movs	r3, #0
 800b574:	82fb      	strh	r3, [r7, #22]
 800b576:	e00b      	b.n	800b590 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b578:	8afb      	ldrh	r3, [r7, #22]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4413      	add	r3, r2
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	3301      	adds	r3, #1
 800b588:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b58a:	8afb      	ldrh	r3, [r7, #22]
 800b58c:	3302      	adds	r3, #2
 800b58e:	82fb      	strh	r3, [r7, #22]
 800b590:	8afa      	ldrh	r2, [r7, #22]
 800b592:	8abb      	ldrh	r3, [r7, #20]
 800b594:	429a      	cmp	r2, r3
 800b596:	d3ef      	bcc.n	800b578 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2200      	movs	r2, #0
 800b59c:	701a      	strb	r2, [r3, #0]
  }
}
 800b59e:	bf00      	nop
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	7812      	ldrb	r2, [r2, #0]
 800b5bc:	4413      	add	r3, r2
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	789b      	ldrb	r3, [r3, #2]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d002      	beq.n	800b5fe <USBH_CtlReq+0x20>
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d01d      	beq.n	800b638 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b5fc:	e043      	b.n	800b686 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	88fa      	ldrh	r2, [r7, #6]
 800b608:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2202      	movs	r2, #2
 800b614:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b616:	2301      	movs	r3, #1
 800b618:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2203      	movs	r2, #3
 800b61e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b62e:	2300      	movs	r3, #0
 800b630:	2200      	movs	r2, #0
 800b632:	f000 fd93 	bl	800c15c <osMessageQueuePut>
      break;
 800b636:	e026      	b.n	800b686 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f829 	bl	800b690 <USBH_HandleControl>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <USBH_CtlReq+0x70>
 800b648:	7dfb      	ldrb	r3, [r7, #23]
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d106      	bne.n	800b65c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	761a      	strb	r2, [r3, #24]
 800b65a:	e005      	b.n	800b668 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d102      	bne.n	800b668 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2203      	movs	r2, #3
 800b66c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	f000 fd6c 	bl	800c15c <osMessageQueuePut>
      break;
 800b684:	bf00      	nop
  }
  return status;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af02      	add	r7, sp, #8
 800b696:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b698:	2301      	movs	r3, #1
 800b69a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7e1b      	ldrb	r3, [r3, #24]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	2b0a      	cmp	r3, #10
 800b6a8:	f200 8229 	bhi.w	800bafe <USBH_HandleControl+0x46e>
 800b6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <USBH_HandleControl+0x24>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6e1 	.word	0x0800b6e1
 800b6b8:	0800b6fb 	.word	0x0800b6fb
 800b6bc:	0800b79d 	.word	0x0800b79d
 800b6c0:	0800b7c3 	.word	0x0800b7c3
 800b6c4:	0800b84f 	.word	0x0800b84f
 800b6c8:	0800b879 	.word	0x0800b879
 800b6cc:	0800b93b 	.word	0x0800b93b
 800b6d0:	0800b95d 	.word	0x0800b95d
 800b6d4:	0800b9ef 	.word	0x0800b9ef
 800b6d8:	0800ba15 	.word	0x0800ba15
 800b6dc:	0800baa7 	.word	0x0800baa7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0110 	add.w	r1, r3, #16
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	795b      	ldrb	r3, [r3, #5]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa17 	bl	800bb20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	761a      	strb	r2, [r3, #24]
      break;
 800b6f8:	e20c      	b.n	800bb14 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	795b      	ldrb	r3, [r3, #5]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f005 f865 	bl	80107d0 <USBH_LL_GetURBState>
 800b706:	4603      	mov	r3, r0
 800b708:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d12c      	bne.n	800b76a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7c1b      	ldrb	r3, [r3, #16]
 800b714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b718:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	8adb      	ldrh	r3, [r3, #22]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b722:	7b7b      	ldrb	r3, [r7, #13]
 800b724:	2b80      	cmp	r3, #128	@ 0x80
 800b726:	d103      	bne.n	800b730 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2203      	movs	r2, #3
 800b72c:	761a      	strb	r2, [r3, #24]
 800b72e:	e00d      	b.n	800b74c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2205      	movs	r2, #5
 800b734:	761a      	strb	r2, [r3, #24]
 800b736:	e009      	b.n	800b74c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b738:	7b7b      	ldrb	r3, [r7, #13]
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d103      	bne.n	800b746 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2209      	movs	r2, #9
 800b742:	761a      	strb	r2, [r3, #24]
 800b744:	e002      	b.n	800b74c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2207      	movs	r2, #7
 800b74a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2203      	movs	r2, #3
 800b750:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b760:	2300      	movs	r3, #0
 800b762:	2200      	movs	r2, #0
 800b764:	f000 fcfa 	bl	800c15c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b768:	e1cb      	b.n	800bb02 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	d003      	beq.n	800b778 <USBH_HandleControl+0xe8>
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b02      	cmp	r3, #2
 800b774:	f040 81c5 	bne.w	800bb02 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	220b      	movs	r2, #11
 800b77c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2203      	movs	r2, #3
 800b782:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b792:	2300      	movs	r3, #0
 800b794:	2200      	movs	r2, #0
 800b796:	f000 fce1 	bl	800c15c <osMessageQueuePut>
      break;
 800b79a:	e1b2      	b.n	800bb02 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6899      	ldr	r1, [r3, #8]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	899a      	ldrh	r2, [r3, #12]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	791b      	ldrb	r3, [r3, #4]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f9f2 	bl	800bb9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2204      	movs	r2, #4
 800b7be:	761a      	strb	r2, [r3, #24]
      break;
 800b7c0:	e1a8      	b.n	800bb14 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	791b      	ldrb	r3, [r3, #4]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f005 f801 	bl	80107d0 <USBH_LL_GetURBState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d110      	bne.n	800b7fa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2209      	movs	r2, #9
 800b7dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2203      	movs	r2, #3
 800b7e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f000 fcb1 	bl	800c15c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b05      	cmp	r3, #5
 800b7fe:	d110      	bne.n	800b822 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b800:	2303      	movs	r3, #3
 800b802:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2203      	movs	r2, #3
 800b808:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b818:	2300      	movs	r3, #0
 800b81a:	2200      	movs	r2, #0
 800b81c:	f000 fc9e 	bl	800c15c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b820:	e171      	b.n	800bb06 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b04      	cmp	r3, #4
 800b826:	f040 816e 	bne.w	800bb06 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	220b      	movs	r2, #11
 800b82e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2203      	movs	r2, #3
 800b834:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b844:	2300      	movs	r3, #0
 800b846:	2200      	movs	r2, #0
 800b848:	f000 fc88 	bl	800c15c <osMessageQueuePut>
      break;
 800b84c:	e15b      	b.n	800bb06 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6899      	ldr	r1, [r3, #8]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	899a      	ldrh	r2, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	795b      	ldrb	r3, [r3, #5]
 800b85a:	2001      	movs	r0, #1
 800b85c:	9000      	str	r0, [sp, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f978 	bl	800bb54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2206      	movs	r2, #6
 800b874:	761a      	strb	r2, [r3, #24]
      break;
 800b876:	e14d      	b.n	800bb14 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	795b      	ldrb	r3, [r3, #5]
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f004 ffa6 	bl	80107d0 <USBH_LL_GetURBState>
 800b884:	4603      	mov	r3, r0
 800b886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d111      	bne.n	800b8b2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2207      	movs	r2, #7
 800b892:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2203      	movs	r2, #3
 800b898:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f000 fc56 	bl	800c15c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8b0:	e12b      	b.n	800bb0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b05      	cmp	r3, #5
 800b8b6:	d113      	bne.n	800b8e0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	220c      	movs	r2, #12
 800b8bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f000 fc3f 	bl	800c15c <osMessageQueuePut>
      break;
 800b8de:	e114      	b.n	800bb0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d111      	bne.n	800b90a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2205      	movs	r2, #5
 800b8ea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2203      	movs	r2, #3
 800b8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	f000 fc2a 	bl	800c15c <osMessageQueuePut>
      break;
 800b908:	e0ff      	b.n	800bb0a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	f040 80fc 	bne.w	800bb0a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	220b      	movs	r2, #11
 800b916:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b918:	2302      	movs	r3, #2
 800b91a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2203      	movs	r2, #3
 800b920:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b930:	2300      	movs	r3, #0
 800b932:	2200      	movs	r2, #0
 800b934:	f000 fc12 	bl	800c15c <osMessageQueuePut>
      break;
 800b938:	e0e7      	b.n	800bb0a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	791b      	ldrb	r3, [r3, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f92b 	bl	800bb9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b94e:	b29a      	uxth	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2208      	movs	r2, #8
 800b958:	761a      	strb	r2, [r3, #24]

      break;
 800b95a:	e0db      	b.n	800bb14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	791b      	ldrb	r3, [r3, #4]
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f004 ff34 	bl	80107d0 <USBH_LL_GetURBState>
 800b968:	4603      	mov	r3, r0
 800b96a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d113      	bne.n	800b99a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	220d      	movs	r2, #13
 800b976:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2203      	movs	r2, #3
 800b980:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b990:	2300      	movs	r3, #0
 800b992:	2200      	movs	r2, #0
 800b994:	f000 fbe2 	bl	800c15c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b998:	e0b9      	b.n	800bb0e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	d111      	bne.n	800b9c4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	220b      	movs	r2, #11
 800b9a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2203      	movs	r2, #3
 800b9aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f000 fbcd 	bl	800c15c <osMessageQueuePut>
      break;
 800b9c2:	e0a4      	b.n	800bb0e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b05      	cmp	r3, #5
 800b9c8:	f040 80a1 	bne.w	800bb0e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f000 fbb8 	bl	800c15c <osMessageQueuePut>
      break;
 800b9ec:	e08f      	b.n	800bb0e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	795b      	ldrb	r3, [r3, #5]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	9200      	str	r2, [sp, #0]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f8aa 	bl	800bb54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	220a      	movs	r2, #10
 800ba10:	761a      	strb	r2, [r3, #24]
      break;
 800ba12:	e07f      	b.n	800bb14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	795b      	ldrb	r3, [r3, #5]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f004 fed8 	bl	80107d0 <USBH_LL_GetURBState>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d113      	bne.n	800ba52 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220d      	movs	r2, #13
 800ba32:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2203      	movs	r2, #3
 800ba38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f000 fb86 	bl	800c15c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba50:	e05f      	b.n	800bb12 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d111      	bne.n	800ba7c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2209      	movs	r2, #9
 800ba5c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2203      	movs	r2, #3
 800ba62:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba72:	2300      	movs	r3, #0
 800ba74:	2200      	movs	r2, #0
 800ba76:	f000 fb71 	bl	800c15c <osMessageQueuePut>
      break;
 800ba7a:	e04a      	b.n	800bb12 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b04      	cmp	r3, #4
 800ba80:	d147      	bne.n	800bb12 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	220b      	movs	r2, #11
 800ba86:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2203      	movs	r2, #3
 800ba8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f000 fb5c 	bl	800c15c <osMessageQueuePut>
      break;
 800baa4:	e035      	b.n	800bb12 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7e5b      	ldrb	r3, [r3, #25]
 800baaa:	3301      	adds	r3, #1
 800baac:	b2da      	uxtb	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	765a      	strb	r2, [r3, #25]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	7e5b      	ldrb	r3, [r3, #25]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d806      	bhi.n	800bac8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bac6:	e025      	b.n	800bb14 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bace:	2106      	movs	r1, #6
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	795b      	ldrb	r3, [r3, #5]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f90d 	bl	800bd00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	791b      	ldrb	r3, [r3, #4]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f907 	bl	800bd00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800baf8:	2302      	movs	r3, #2
 800bafa:	73fb      	strb	r3, [r7, #15]
      break;
 800bafc:	e00a      	b.n	800bb14 <USBH_HandleControl+0x484>

    default:
      break;
 800bafe:	bf00      	nop
 800bb00:	e008      	b.n	800bb14 <USBH_HandleControl+0x484>
      break;
 800bb02:	bf00      	nop
 800bb04:	e006      	b.n	800bb14 <USBH_HandleControl+0x484>
      break;
 800bb06:	bf00      	nop
 800bb08:	e004      	b.n	800bb14 <USBH_HandleControl+0x484>
      break;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <USBH_HandleControl+0x484>
      break;
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <USBH_HandleControl+0x484>
      break;
 800bb12:	bf00      	nop
  }

  return status;
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb2e:	79f9      	ldrb	r1, [r7, #7]
 800bb30:	2300      	movs	r3, #0
 800bb32:	9303      	str	r3, [sp, #12]
 800bb34:	2308      	movs	r3, #8
 800bb36:	9302      	str	r3, [sp, #8]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	2300      	movs	r3, #0
 800bb42:	2200      	movs	r2, #0
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f004 fe12 	bl	801076e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b088      	sub	sp, #32
 800bb58:	af04      	add	r7, sp, #16
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4611      	mov	r1, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	460b      	mov	r3, r1
 800bb64:	80fb      	strh	r3, [r7, #6]
 800bb66:	4613      	mov	r3, r2
 800bb68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb78:	7979      	ldrb	r1, [r7, #5]
 800bb7a:	7e3b      	ldrb	r3, [r7, #24]
 800bb7c:	9303      	str	r3, [sp, #12]
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	9302      	str	r3, [sp, #8]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	2301      	movs	r3, #1
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f004 fded 	bl	801076e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b088      	sub	sp, #32
 800bba2:	af04      	add	r7, sp, #16
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	461a      	mov	r2, r3
 800bbac:	460b      	mov	r3, r1
 800bbae:	80fb      	strh	r3, [r7, #6]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbb4:	7979      	ldrb	r1, [r7, #5]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9303      	str	r3, [sp, #12]
 800bbba:	88fb      	ldrh	r3, [r7, #6]
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	2201      	movs	r2, #1
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f004 fdcf 	bl	801076e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bbd0:	2300      	movs	r3, #0

}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b088      	sub	sp, #32
 800bbde:	af04      	add	r7, sp, #16
 800bbe0:	60f8      	str	r0, [r7, #12]
 800bbe2:	60b9      	str	r1, [r7, #8]
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	460b      	mov	r3, r1
 800bbea:	80fb      	strh	r3, [r7, #6]
 800bbec:	4613      	mov	r3, r2
 800bbee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbfe:	7979      	ldrb	r1, [r7, #5]
 800bc00:	7e3b      	ldrb	r3, [r7, #24]
 800bc02:	9303      	str	r3, [sp, #12]
 800bc04:	88fb      	ldrh	r3, [r7, #6]
 800bc06:	9302      	str	r3, [sp, #8]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2302      	movs	r3, #2
 800bc12:	2200      	movs	r2, #0
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f004 fdaa 	bl	801076e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af04      	add	r7, sp, #16
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	460b      	mov	r3, r1
 800bc34:	80fb      	strh	r3, [r7, #6]
 800bc36:	4613      	mov	r3, r2
 800bc38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc3a:	7979      	ldrb	r1, [r7, #5]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	88fb      	ldrh	r3, [r7, #6]
 800bc42:	9302      	str	r3, [sp, #8]
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	2201      	movs	r2, #1
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f004 fd8c 	bl	801076e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af04      	add	r7, sp, #16
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	70fb      	strb	r3, [r7, #3]
 800bc72:	460b      	mov	r3, r1
 800bc74:	70bb      	strb	r3, [r7, #2]
 800bc76:	4613      	mov	r3, r2
 800bc78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bc7a:	7878      	ldrb	r0, [r7, #1]
 800bc7c:	78ba      	ldrb	r2, [r7, #2]
 800bc7e:	78f9      	ldrb	r1, [r7, #3]
 800bc80:	8b3b      	ldrh	r3, [r7, #24]
 800bc82:	9302      	str	r3, [sp, #8]
 800bc84:	7d3b      	ldrb	r3, [r7, #20]
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	7c3b      	ldrb	r3, [r7, #16]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f004 fd1f 	bl	80106d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f004 fd3e 	bl	8010730 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f836 	bl	800bd3c <USBH_GetFreePipe>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
 800bcd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00a      	beq.n	800bcf4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bcde:	78fa      	ldrb	r2, [r7, #3]
 800bce0:	89fb      	ldrh	r3, [r7, #14]
 800bce2:	f003 030f 	and.w	r3, r3, #15
 800bce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	33e0      	adds	r3, #224	@ 0xe0
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	b2db      	uxtb	r3, r3
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	2b0f      	cmp	r3, #15
 800bd10:	d80d      	bhi.n	800bd2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd12:	78fb      	ldrb	r3, [r7, #3]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	33e0      	adds	r3, #224	@ 0xe0
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	33e0      	adds	r3, #224	@ 0xe0
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e00f      	b.n	800bd6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	33e0      	adds	r3, #224	@ 0xe0
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d102      	bne.n	800bd68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	e007      	b.n	800bd78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	73fb      	strb	r3, [r7, #15]
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	2b0f      	cmp	r3, #15
 800bd72:	d9ec      	bls.n	800bd4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bd74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <__NVIC_SetPriority>:
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	db0a      	blt.n	800bdae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	490c      	ldr	r1, [pc, #48]	@ (800bdd0 <__NVIC_SetPriority+0x4c>)
 800bd9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bda2:	0112      	lsls	r2, r2, #4
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	440b      	add	r3, r1
 800bda8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bdac:	e00a      	b.n	800bdc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	4908      	ldr	r1, [pc, #32]	@ (800bdd4 <__NVIC_SetPriority+0x50>)
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	3b04      	subs	r3, #4
 800bdbc:	0112      	lsls	r2, r2, #4
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	440b      	add	r3, r1
 800bdc2:	761a      	strb	r2, [r3, #24]
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	e000e100 	.word	0xe000e100
 800bdd4:	e000ed00 	.word	0xe000ed00

0800bdd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bddc:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <SysTick_Handler+0x1c>)
 800bdde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bde0:	f002 ff1e 	bl	800ec20 <xTaskGetSchedulerState>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d001      	beq.n	800bdee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bdea:	f004 f81d 	bl	800fe28 <xPortSysTickHandler>
  }
}
 800bdee:	bf00      	nop
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	e000e010 	.word	0xe000e010

0800bdf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f06f 0004 	mvn.w	r0, #4
 800be02:	f7ff ffbf 	bl	800bd84 <__NVIC_SetPriority>
#endif
}
 800be06:	bf00      	nop
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be12:	f3ef 8305 	mrs	r3, IPSR
 800be16:	603b      	str	r3, [r7, #0]
  return(result);
 800be18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be1e:	f06f 0305 	mvn.w	r3, #5
 800be22:	607b      	str	r3, [r7, #4]
 800be24:	e00c      	b.n	800be40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be26:	4b0a      	ldr	r3, [pc, #40]	@ (800be50 <osKernelInitialize+0x44>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d105      	bne.n	800be3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be2e:	4b08      	ldr	r3, [pc, #32]	@ (800be50 <osKernelInitialize+0x44>)
 800be30:	2201      	movs	r2, #1
 800be32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be34:	2300      	movs	r3, #0
 800be36:	607b      	str	r3, [r7, #4]
 800be38:	e002      	b.n	800be40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be3a:	f04f 33ff 	mov.w	r3, #4294967295
 800be3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be40:	687b      	ldr	r3, [r7, #4]
}
 800be42:	4618      	mov	r0, r3
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	200007f4 	.word	0x200007f4

0800be54 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4a0c      	ldr	r2, [pc, #48]	@ (800be9c <osKernelGetInfo+0x48>)
 800be6a:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4a0b      	ldr	r2, [pc, #44]	@ (800be9c <osKernelGetInfo+0x48>)
 800be70:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00c      	beq.n	800be92 <osKernelGetInfo+0x3e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b11      	cmp	r3, #17
 800be82:	d901      	bls.n	800be88 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800be84:	2311      	movs	r3, #17
 800be86:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	4905      	ldr	r1, [pc, #20]	@ (800bea0 <osKernelGetInfo+0x4c>)
 800be8c:	68b8      	ldr	r0, [r7, #8]
 800be8e:	f006 fb88 	bl	80125a2 <memcpy>
  }

  return (osOK);
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	05f5f531 	.word	0x05f5f531
 800bea0:	080156e0 	.word	0x080156e0

0800bea4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beaa:	f3ef 8305 	mrs	r3, IPSR
 800beae:	603b      	str	r3, [r7, #0]
  return(result);
 800beb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <osKernelStart+0x1a>
    stat = osErrorISR;
 800beb6:	f06f 0305 	mvn.w	r3, #5
 800beba:	607b      	str	r3, [r7, #4]
 800bebc:	e010      	b.n	800bee0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bebe:	4b0b      	ldr	r3, [pc, #44]	@ (800beec <osKernelStart+0x48>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d109      	bne.n	800beda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bec6:	f7ff ff97 	bl	800bdf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800beca:	4b08      	ldr	r3, [pc, #32]	@ (800beec <osKernelStart+0x48>)
 800becc:	2202      	movs	r2, #2
 800bece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bed0:	f002 f82e 	bl	800df30 <vTaskStartScheduler>
      stat = osOK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e002      	b.n	800bee0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800beda:	f04f 33ff 	mov.w	r3, #4294967295
 800bede:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bee0:	687b      	ldr	r3, [r7, #4]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	200007f4 	.word	0x200007f4

0800bef0 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800bef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800bef8:	4618      	mov	r0, r3
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
	...

0800bf04 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800bf08:	4b03      	ldr	r3, [pc, #12]	@ (800bf18 <osKernelGetSysTimerFreq+0x14>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	2000022c 	.word	0x2000022c

0800bf1c <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	@ 0x38
 800bf20:	af04      	add	r7, sp, #16
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2c:	f3ef 8305 	mrs	r3, IPSR
 800bf30:	617b      	str	r3, [r7, #20]
  return(result);
 800bf32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d17e      	bne.n	800c036 <osThreadNew+0x11a>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d07b      	beq.n	800c036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf3e:	2380      	movs	r3, #128	@ 0x80
 800bf40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf42:	2318      	movs	r3, #24
 800bf44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d045      	beq.n	800bfe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <osThreadNew+0x48>
        name = attr->name;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d008      	beq.n	800bf8a <osThreadNew+0x6e>
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	2b38      	cmp	r3, #56	@ 0x38
 800bf7c:	d805      	bhi.n	800bf8a <osThreadNew+0x6e>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <osThreadNew+0x72>
        return (NULL);
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e054      	b.n	800c038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	089b      	lsrs	r3, r3, #2
 800bf9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00e      	beq.n	800bfc4 <osThreadNew+0xa8>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	2ba7      	cmp	r3, #167	@ 0xa7
 800bfac:	d90a      	bls.n	800bfc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d006      	beq.n	800bfc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <osThreadNew+0xa8>
        mem = 1;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	e010      	b.n	800bfe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10c      	bne.n	800bfe6 <osThreadNew+0xca>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d108      	bne.n	800bfe6 <osThreadNew+0xca>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <osThreadNew+0xca>
          mem = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	e001      	b.n	800bfe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d110      	bne.n	800c00e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bff4:	9202      	str	r2, [sp, #8]
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	6a3a      	ldr	r2, [r7, #32]
 800c000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f001 fb1e 	bl	800d644 <xTaskCreateStatic>
 800c008:	4603      	mov	r3, r0
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	e013      	b.n	800c036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d110      	bne.n	800c036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	b29a      	uxth	r2, r3
 800c018:	f107 0310 	add.w	r3, r7, #16
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f001 fb6c 	bl	800d704 <xTaskCreate>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d001      	beq.n	800c036 <osThreadNew+0x11a>
            hTask = NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c036:	693b      	ldr	r3, [r7, #16]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3728      	adds	r7, #40	@ 0x28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c048:	f3ef 8305 	mrs	r3, IPSR
 800c04c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c04e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <osDelay+0x1c>
    stat = osErrorISR;
 800c054:	f06f 0305 	mvn.w	r3, #5
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	e007      	b.n	800c06c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 fd1e 	bl	800daa8 <vTaskDelay>
    }
  }

  return (stat);
 800c06c:	68fb      	ldr	r3, [r7, #12]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c076:	b580      	push	{r7, lr}
 800c078:	b08a      	sub	sp, #40	@ 0x28
 800c07a:	af02      	add	r7, sp, #8
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c082:	2300      	movs	r3, #0
 800c084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c086:	f3ef 8305 	mrs	r3, IPSR
 800c08a:	613b      	str	r3, [r7, #16]
  return(result);
 800c08c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d15f      	bne.n	800c152 <osMessageQueueNew+0xdc>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d05c      	beq.n	800c152 <osMessageQueueNew+0xdc>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d059      	beq.n	800c152 <osMessageQueueNew+0xdc>
    mem = -1;
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d029      	beq.n	800c0fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d012      	beq.n	800c0d8 <osMessageQueueNew+0x62>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	2b4f      	cmp	r3, #79	@ 0x4f
 800c0b8:	d90e      	bls.n	800c0d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695a      	ldr	r2, [r3, #20]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	fb01 f303 	mul.w	r3, r1, r3
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <osMessageQueueNew+0x62>
        mem = 1;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	61bb      	str	r3, [r7, #24]
 800c0d6:	e014      	b.n	800c102 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d110      	bne.n	800c102 <osMessageQueueNew+0x8c>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10c      	bne.n	800c102 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d108      	bne.n	800c102 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d104      	bne.n	800c102 <osMessageQueueNew+0x8c>
          mem = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	61bb      	str	r3, [r7, #24]
 800c0fc:	e001      	b.n	800c102 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d10b      	bne.n	800c120 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	2100      	movs	r1, #0
 800c112:	9100      	str	r1, [sp, #0]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 fbec 	bl	800c8f4 <xQueueGenericCreateStatic>
 800c11c:	61f8      	str	r0, [r7, #28]
 800c11e:	e008      	b.n	800c132 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d105      	bne.n	800c132 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c126:	2200      	movs	r2, #0
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fc5f 	bl	800c9ee <xQueueGenericCreate>
 800c130:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00c      	beq.n	800c152 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	617b      	str	r3, [r7, #20]
 800c144:	e001      	b.n	800c14a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c14a:	6979      	ldr	r1, [r7, #20]
 800c14c:	69f8      	ldr	r0, [r7, #28]
 800c14e:	f001 fa1b 	bl	800d588 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c152:	69fb      	ldr	r3, [r7, #28]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3720      	adds	r7, #32
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	603b      	str	r3, [r7, #0]
 800c168:	4613      	mov	r3, r2
 800c16a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c170:	2300      	movs	r3, #0
 800c172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c174:	f3ef 8305 	mrs	r3, IPSR
 800c178:	617b      	str	r3, [r7, #20]
  return(result);
 800c17a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d028      	beq.n	800c1d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d005      	beq.n	800c192 <osMessageQueuePut+0x36>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <osMessageQueuePut+0x36>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c192:	f06f 0303 	mvn.w	r3, #3
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	e038      	b.n	800c20c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c19a:	2300      	movs	r3, #0
 800c19c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c19e:	f107 0210 	add.w	r2, r7, #16
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	69b8      	ldr	r0, [r7, #24]
 800c1a8:	f000 fdb4 	bl	800cd14 <xQueueGenericSendFromISR>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d003      	beq.n	800c1ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1b2:	f06f 0302 	mvn.w	r3, #2
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e028      	b.n	800c20c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d025      	beq.n	800c20c <osMessageQueuePut+0xb0>
 800c1c0:	4b15      	ldr	r3, [pc, #84]	@ (800c218 <osMessageQueuePut+0xbc>)
 800c1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	e01c      	b.n	800c20c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <osMessageQueuePut+0x82>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c1de:	f06f 0303 	mvn.w	r3, #3
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	e012      	b.n	800c20c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	68b9      	ldr	r1, [r7, #8]
 800c1ec:	69b8      	ldr	r0, [r7, #24]
 800c1ee:	f000 fc8f 	bl	800cb10 <xQueueGenericSend>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d009      	beq.n	800c20c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c1fe:	f06f 0301 	mvn.w	r3, #1
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e002      	b.n	800c20c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c206:	f06f 0302 	mvn.w	r3, #2
 800c20a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c20c:	69fb      	ldr	r3, [r7, #28]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c22e:	2300      	movs	r3, #0
 800c230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c232:	f3ef 8305 	mrs	r3, IPSR
 800c236:	617b      	str	r3, [r7, #20]
  return(result);
 800c238:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d028      	beq.n	800c290 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <osMessageQueueGet+0x34>
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <osMessageQueueGet+0x34>
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c250:	f06f 0303 	mvn.w	r3, #3
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	e037      	b.n	800c2c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c25c:	f107 0310 	add.w	r3, r7, #16
 800c260:	461a      	mov	r2, r3
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	69b8      	ldr	r0, [r7, #24]
 800c266:	f000 ffe5 	bl	800d234 <xQueueReceiveFromISR>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d003      	beq.n	800c278 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c270:	f06f 0302 	mvn.w	r3, #2
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	e027      	b.n	800c2c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d024      	beq.n	800c2c8 <osMessageQueueGet+0xac>
 800c27e:	4b15      	ldr	r3, [pc, #84]	@ (800c2d4 <osMessageQueueGet+0xb8>)
 800c280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	e01b      	b.n	800c2c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <osMessageQueueGet+0x80>
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d103      	bne.n	800c2a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c29c:	f06f 0303 	mvn.w	r3, #3
 800c2a0:	61fb      	str	r3, [r7, #28]
 800c2a2:	e011      	b.n	800c2c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	69b8      	ldr	r0, [r7, #24]
 800c2aa:	f000 fdd1 	bl	800ce50 <xQueueReceive>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d009      	beq.n	800c2c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2ba:	f06f 0301 	mvn.w	r3, #1
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e002      	b.n	800c2c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2c2:	f06f 0302 	mvn.w	r3, #2
 800c2c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	e000ed04 	.word	0xe000ed04

0800c2d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4a07      	ldr	r2, [pc, #28]	@ (800c304 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	4a06      	ldr	r2, [pc, #24]	@ (800c308 <vApplicationGetIdleTaskMemory+0x30>)
 800c2ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2280      	movs	r2, #128	@ 0x80
 800c2f4:	601a      	str	r2, [r3, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	200007f8 	.word	0x200007f8
 800c308:	200008a0 	.word	0x200008a0

0800c30c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4a07      	ldr	r2, [pc, #28]	@ (800c338 <vApplicationGetTimerTaskMemory+0x2c>)
 800c31c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4a06      	ldr	r2, [pc, #24]	@ (800c33c <vApplicationGetTimerTaskMemory+0x30>)
 800c322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c32a:	601a      	str	r2, [r3, #0]
}
 800c32c:	bf00      	nop
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	20000aa0 	.word	0x20000aa0
 800c33c:	20000b48 	.word	0x20000b48

0800c340 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c346:	2020      	movs	r0, #32
 800c348:	f003 fe00 	bl	800ff4c <pvPortMalloc>
 800c34c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3304      	adds	r3, #4
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f9aa 	bl	800c6b8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c36a:	687b      	ldr	r3, [r7, #4]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b090      	sub	sp, #64	@ 0x40
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10b      	bne.n	800c3ac <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	e7fd      	b.n	800c3a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3b2:	d30b      	bcc.n	800c3cc <xEventGroupWaitBits+0x58>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	61fb      	str	r3, [r7, #28]
}
 800c3c6:	bf00      	nop
 800c3c8:	bf00      	nop
 800c3ca:	e7fd      	b.n	800c3c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10b      	bne.n	800c3ea <xEventGroupWaitBits+0x76>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	61bb      	str	r3, [r7, #24]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3ea:	f002 fc19 	bl	800ec20 <xTaskGetSchedulerState>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <xEventGroupWaitBits+0x86>
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <xEventGroupWaitBits+0x8a>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e000      	b.n	800c400 <xEventGroupWaitBits+0x8c>
 800c3fe:	2300      	movs	r3, #0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10b      	bne.n	800c41c <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	617b      	str	r3, [r7, #20]
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	e7fd      	b.n	800c418 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c41c:	f001 fdf8 	bl	800e010 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	68b9      	ldr	r1, [r7, #8]
 800c42a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c42c:	f000 f90d 	bl	800c64a <prvTestWaitCondition>
 800c430:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00e      	beq.n	800c456 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d028      	beq.n	800c498 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	43db      	mvns	r3, r3
 800c44e:	401a      	ands	r2, r3
 800c450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e020      	b.n	800c498 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c460:	2301      	movs	r3, #1
 800c462:	633b      	str	r3, [r7, #48]	@ 0x30
 800c464:	e018      	b.n	800c498 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c472:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c480:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c484:	1d18      	adds	r0, r3, #4
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48a:	4313      	orrs	r3, r2
 800c48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c48e:	4619      	mov	r1, r3
 800c490:	f002 f894 	bl	800e5bc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c498:	f001 fdc8 	bl	800e02c <xTaskResumeAll>
 800c49c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c49e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d031      	beq.n	800c508 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d107      	bne.n	800c4ba <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800c514 <xEventGroupWaitBits+0x1a0>)
 800c4ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c4ba:	f002 fd2b 	bl	800ef14 <uxTaskResetEventItemValue>
 800c4be:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d11a      	bne.n	800c500 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c4ca:	f003 fc1d 	bl	800fd08 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	68b9      	ldr	r1, [r7, #8]
 800c4d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4da:	f000 f8b6 	bl	800c64a <prvTestWaitCondition>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d009      	beq.n	800c4f8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	43db      	mvns	r3, r3
 800c4f2:	401a      	ands	r2, r3
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c4fc:	f003 fc36 	bl	800fd6c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c502:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c506:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3740      	adds	r7, #64	@ 0x40
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08e      	sub	sp, #56	@ 0x38
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c522:	2300      	movs	r3, #0
 800c524:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c52a:	2300      	movs	r3, #0
 800c52c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10b      	bne.n	800c54c <xEventGroupSetBits+0x34>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	613b      	str	r3, [r7, #16]
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	e7fd      	b.n	800c548 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c552:	d30b      	bcc.n	800c56c <xEventGroupSetBits+0x54>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
}
 800c566:	bf00      	nop
 800c568:	bf00      	nop
 800c56a:	e7fd      	b.n	800c568 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56e:	3304      	adds	r3, #4
 800c570:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	3308      	adds	r3, #8
 800c576:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c578:	f001 fd4a 	bl	800e010 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	431a      	orrs	r2, r3
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c58e:	e03c      	b.n	800c60a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c5a6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c5ae:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d108      	bne.n	800c5cc <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00b      	beq.n	800c5de <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5ca:	e008      	b.n	800c5de <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d101      	bne.n	800c5de <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d010      	beq.n	800c606 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d003      	beq.n	800c5f6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c5ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c5fe:	4619      	mov	r1, r3
 800c600:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c602:	f002 f8a9 	bl	800e758 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c60a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d1be      	bne.n	800c590 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	43db      	mvns	r3, r3
 800c61a:	401a      	ands	r2, r3
 800c61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c620:	f001 fd04 	bl	800e02c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	681b      	ldr	r3, [r3, #0]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3738      	adds	r7, #56	@ 0x38
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff ff6b 	bl	800c518 <xEventGroupSetBits>
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c64a:	b480      	push	{r7}
 800c64c:	b087      	sub	sp, #28
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d107      	bne.n	800c670 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00a      	beq.n	800c680 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c66a:	2301      	movs	r3, #1
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	e007      	b.n	800c680 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	4013      	ands	r3, r2
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d101      	bne.n	800c680 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c67c:	2301      	movs	r3, #1
 800c67e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c680:	697b      	ldr	r3, [r7, #20]
}
 800c682:	4618      	mov	r0, r3
 800c684:	371c      	adds	r7, #28
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
	...

0800c690 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	68f9      	ldr	r1, [r7, #12]
 800c6a2:	4804      	ldr	r0, [pc, #16]	@ (800c6b4 <xEventGroupSetBitsFromISR+0x24>)
 800c6a4:	f003 f9dc 	bl	800fa60 <xTimerPendFunctionCallFromISR>
 800c6a8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c6aa:	697b      	ldr	r3, [r7, #20]
	}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	0800c631 	.word	0x0800c631

0800c6b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f103 0208 	add.w	r2, r3, #8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f103 0208 	add.w	r2, r3, #8
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f103 0208 	add.w	r2, r3, #8
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c712:	b480      	push	{r7}
 800c714:	b085      	sub	sp, #20
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	689a      	ldr	r2, [r3, #8]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c75a:	b480      	push	{r7}
 800c75c:	b085      	sub	sp, #20
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c770:	d103      	bne.n	800c77a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	e00c      	b.n	800c794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3308      	adds	r3, #8
 800c77e:	60fb      	str	r3, [r7, #12]
 800c780:	e002      	b.n	800c788 <vListInsert+0x2e>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	429a      	cmp	r2, r3
 800c792:	d2f6      	bcs.n	800c782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	601a      	str	r2, [r3, #0]
}
 800c7c0:	bf00      	nop
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	6892      	ldr	r2, [r2, #8]
 800c7e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	6852      	ldr	r2, [r2, #4]
 800c7ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d103      	bne.n	800c800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	1e5a      	subs	r2, r3, #1
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10b      	bne.n	800c84c <xQueueGenericReset+0x2c>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60bb      	str	r3, [r7, #8]
}
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	e7fd      	b.n	800c848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c84c:	f003 fa5c 	bl	800fd08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c858:	68f9      	ldr	r1, [r7, #12]
 800c85a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c85c:	fb01 f303 	mul.w	r3, r1, r3
 800c860:	441a      	add	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c87c:	3b01      	subs	r3, #1
 800c87e:	68f9      	ldr	r1, [r7, #12]
 800c880:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c882:	fb01 f303 	mul.w	r3, r1, r3
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	22ff      	movs	r2, #255	@ 0xff
 800c890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	22ff      	movs	r2, #255	@ 0xff
 800c898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d114      	bne.n	800c8cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d01a      	beq.n	800c8e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3310      	adds	r3, #16
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f001 feee 	bl	800e690 <xTaskRemoveFromEventList>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d012      	beq.n	800c8e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <xQueueGenericReset+0xd0>)
 800c8bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	e009      	b.n	800c8e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	3310      	adds	r3, #16
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7ff fef1 	bl	800c6b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3324      	adds	r3, #36	@ 0x24
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff feec 	bl	800c6b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8e0:	f003 fa44 	bl	800fd6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8e4:	2301      	movs	r3, #1
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	e000ed04 	.word	0xe000ed04

0800c8f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08e      	sub	sp, #56	@ 0x38
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10b      	bne.n	800c920 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	e7fd      	b.n	800c91c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d10b      	bne.n	800c93e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	e7fd      	b.n	800c93a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <xQueueGenericCreateStatic+0x56>
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <xQueueGenericCreateStatic+0x5a>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e000      	b.n	800c950 <xQueueGenericCreateStatic+0x5c>
 800c94e:	2300      	movs	r3, #0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10b      	bne.n	800c96c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	623b      	str	r3, [r7, #32]
}
 800c966:	bf00      	nop
 800c968:	bf00      	nop
 800c96a:	e7fd      	b.n	800c968 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <xQueueGenericCreateStatic+0x84>
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <xQueueGenericCreateStatic+0x88>
 800c978:	2301      	movs	r3, #1
 800c97a:	e000      	b.n	800c97e <xQueueGenericCreateStatic+0x8a>
 800c97c:	2300      	movs	r3, #0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10b      	bne.n	800c99a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	61fb      	str	r3, [r7, #28]
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	e7fd      	b.n	800c996 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c99a:	2350      	movs	r3, #80	@ 0x50
 800c99c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	2b50      	cmp	r3, #80	@ 0x50
 800c9a2:	d00b      	beq.n	800c9bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	61bb      	str	r3, [r7, #24]
}
 800c9b6:	bf00      	nop
 800c9b8:	bf00      	nop
 800c9ba:	e7fd      	b.n	800c9b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00d      	beq.n	800c9e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f840 	bl	800ca64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3730      	adds	r7, #48	@ 0x30
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b08a      	sub	sp, #40	@ 0x28
 800c9f2:	af02      	add	r7, sp, #8
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10b      	bne.n	800ca1a <xQueueGenericCreate+0x2c>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	613b      	str	r3, [r7, #16]
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	e7fd      	b.n	800ca16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	fb02 f303 	mul.w	r3, r2, r3
 800ca22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	3350      	adds	r3, #80	@ 0x50
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f003 fa8f 	bl	800ff4c <pvPortMalloc>
 800ca2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d011      	beq.n	800ca5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	3350      	adds	r3, #80	@ 0x50
 800ca3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca48:	79fa      	ldrb	r2, [r7, #7]
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	68b9      	ldr	r1, [r7, #8]
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 f805 	bl	800ca64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
	}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
 800ca70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d103      	bne.n	800ca80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	e002      	b.n	800ca86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca92:	2101      	movs	r1, #1
 800ca94:	69b8      	ldr	r0, [r7, #24]
 800ca96:	f7ff fec3 	bl	800c820 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	78fa      	ldrb	r2, [r7, #3]
 800ca9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800caa2:	bf00      	nop
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b082      	sub	sp, #8
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00e      	beq.n	800cad6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800caca:	2300      	movs	r3, #0
 800cacc:	2200      	movs	r2, #0
 800cace:	2100      	movs	r1, #0
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f81d 	bl	800cb10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cad6:	bf00      	nop
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b086      	sub	sp, #24
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	4603      	mov	r3, r0
 800cae6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cae8:	2301      	movs	r3, #1
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	2300      	movs	r3, #0
 800caee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	461a      	mov	r2, r3
 800caf4:	6939      	ldr	r1, [r7, #16]
 800caf6:	6978      	ldr	r0, [r7, #20]
 800caf8:	f7ff ff79 	bl	800c9ee <xQueueGenericCreate>
 800cafc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f7ff ffd3 	bl	800caaa <prvInitialiseMutex>

		return xNewQueue;
 800cb04:	68fb      	ldr	r3, [r7, #12]
	}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08e      	sub	sp, #56	@ 0x38
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10b      	bne.n	800cb44 <xQueueGenericSend+0x34>
	__asm volatile
 800cb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb3e:	bf00      	nop
 800cb40:	bf00      	nop
 800cb42:	e7fd      	b.n	800cb40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <xQueueGenericSend+0x42>
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <xQueueGenericSend+0x46>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e000      	b.n	800cb58 <xQueueGenericSend+0x48>
 800cb56:	2300      	movs	r3, #0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10b      	bne.n	800cb74 <xQueueGenericSend+0x64>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb6e:	bf00      	nop
 800cb70:	bf00      	nop
 800cb72:	e7fd      	b.n	800cb70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d103      	bne.n	800cb82 <xQueueGenericSend+0x72>
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <xQueueGenericSend+0x76>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <xQueueGenericSend+0x78>
 800cb86:	2300      	movs	r3, #0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10b      	bne.n	800cba4 <xQueueGenericSend+0x94>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	623b      	str	r3, [r7, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cba4:	f002 f83c 	bl	800ec20 <xTaskGetSchedulerState>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <xQueueGenericSend+0xa4>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <xQueueGenericSend+0xa8>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e000      	b.n	800cbba <xQueueGenericSend+0xaa>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10b      	bne.n	800cbd6 <xQueueGenericSend+0xc6>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	61fb      	str	r3, [r7, #28]
}
 800cbd0:	bf00      	nop
 800cbd2:	bf00      	nop
 800cbd4:	e7fd      	b.n	800cbd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbd6:	f003 f897 	bl	800fd08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d302      	bcc.n	800cbec <xQueueGenericSend+0xdc>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d129      	bne.n	800cc40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbf2:	f000 fbb9 	bl	800d368 <prvCopyDataToQueue>
 800cbf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d010      	beq.n	800cc22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc02:	3324      	adds	r3, #36	@ 0x24
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 fd43 	bl	800e690 <xTaskRemoveFromEventList>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d013      	beq.n	800cc38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc10:	4b3f      	ldr	r3, [pc, #252]	@ (800cd10 <xQueueGenericSend+0x200>)
 800cc12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	e00a      	b.n	800cc38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc28:	4b39      	ldr	r3, [pc, #228]	@ (800cd10 <xQueueGenericSend+0x200>)
 800cc2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc38:	f003 f898 	bl	800fd6c <vPortExitCritical>
				return pdPASS;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e063      	b.n	800cd08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d103      	bne.n	800cc4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc46:	f003 f891 	bl	800fd6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e05c      	b.n	800cd08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc54:	f107 0314 	add.w	r3, r7, #20
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f001 fde1 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc62:	f003 f883 	bl	800fd6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc66:	f001 f9d3 	bl	800e010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc6a:	f003 f84d 	bl	800fd08 <vPortEnterCritical>
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc74:	b25b      	sxtb	r3, r3
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7a:	d103      	bne.n	800cc84 <xQueueGenericSend+0x174>
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc8a:	b25b      	sxtb	r3, r3
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d103      	bne.n	800cc9a <xQueueGenericSend+0x18a>
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc9a:	f003 f867 	bl	800fd6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc9e:	1d3a      	adds	r2, r7, #4
 800cca0:	f107 0314 	add.w	r3, r7, #20
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f001 fdd0 	bl	800e84c <xTaskCheckForTimeOut>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d124      	bne.n	800ccfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccb4:	f000 fc50 	bl	800d558 <prvIsQueueFull>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d018      	beq.n	800ccf0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	3310      	adds	r3, #16
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 fc52 	bl	800e570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccce:	f000 fbdb 	bl	800d488 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccd2:	f001 f9ab 	bl	800e02c <xTaskResumeAll>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f47f af7c 	bne.w	800cbd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccde:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <xQueueGenericSend+0x200>)
 800cce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	e772      	b.n	800cbd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccf2:	f000 fbc9 	bl	800d488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccf6:	f001 f999 	bl	800e02c <xTaskResumeAll>
 800ccfa:	e76c      	b.n	800cbd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccfe:	f000 fbc3 	bl	800d488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd02:	f001 f993 	bl	800e02c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3738      	adds	r7, #56	@ 0x38
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b090      	sub	sp, #64	@ 0x40
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10b      	bne.n	800cd44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd3e:	bf00      	nop
 800cd40:	bf00      	nop
 800cd42:	e7fd      	b.n	800cd40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d103      	bne.n	800cd52 <xQueueGenericSendFromISR+0x3e>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <xQueueGenericSendFromISR+0x42>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e000      	b.n	800cd58 <xQueueGenericSendFromISR+0x44>
 800cd56:	2300      	movs	r3, #0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10b      	bne.n	800cd74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	e7fd      	b.n	800cd70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d103      	bne.n	800cd82 <xQueueGenericSendFromISR+0x6e>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d101      	bne.n	800cd86 <xQueueGenericSendFromISR+0x72>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e000      	b.n	800cd88 <xQueueGenericSendFromISR+0x74>
 800cd86:	2300      	movs	r3, #0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10b      	bne.n	800cda4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	623b      	str	r3, [r7, #32]
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	e7fd      	b.n	800cda0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cda4:	f003 f890 	bl	800fec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cda8:	f3ef 8211 	mrs	r2, BASEPRI
 800cdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	61fa      	str	r2, [r7, #28]
 800cdbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d302      	bcc.n	800cdd6 <xQueueGenericSendFromISR+0xc2>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d12f      	bne.n	800ce36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdec:	f000 fabc 	bl	800d368 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d112      	bne.n	800ce20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d016      	beq.n	800ce30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce04:	3324      	adds	r3, #36	@ 0x24
 800ce06:	4618      	mov	r0, r3
 800ce08:	f001 fc42 	bl	800e690 <xTaskRemoveFromEventList>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00e      	beq.n	800ce30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	e007      	b.n	800ce30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ce24:	3301      	adds	r3, #1
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	b25a      	sxtb	r2, r3
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce30:	2301      	movs	r3, #1
 800ce32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce34:	e001      	b.n	800ce3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3740      	adds	r7, #64	@ 0x40
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08c      	sub	sp, #48	@ 0x30
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10b      	bne.n	800ce82 <xQueueReceive+0x32>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	623b      	str	r3, [r7, #32]
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	e7fd      	b.n	800ce7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <xQueueReceive+0x40>
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <xQueueReceive+0x44>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e000      	b.n	800ce96 <xQueueReceive+0x46>
 800ce94:	2300      	movs	r3, #0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10b      	bne.n	800ceb2 <xQueueReceive+0x62>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	61fb      	str	r3, [r7, #28]
}
 800ceac:	bf00      	nop
 800ceae:	bf00      	nop
 800ceb0:	e7fd      	b.n	800ceae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceb2:	f001 feb5 	bl	800ec20 <xTaskGetSchedulerState>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d102      	bne.n	800cec2 <xQueueReceive+0x72>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <xQueueReceive+0x76>
 800cec2:	2301      	movs	r3, #1
 800cec4:	e000      	b.n	800cec8 <xQueueReceive+0x78>
 800cec6:	2300      	movs	r3, #0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10b      	bne.n	800cee4 <xQueueReceive+0x94>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	61bb      	str	r3, [r7, #24]
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	e7fd      	b.n	800cee0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cee4:	f002 ff10 	bl	800fd08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d01f      	beq.n	800cf34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cef4:	68b9      	ldr	r1, [r7, #8]
 800cef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cef8:	f000 faa0 	bl	800d43c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	1e5a      	subs	r2, r3, #1
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00f      	beq.n	800cf2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf0e:	3310      	adds	r3, #16
 800cf10:	4618      	mov	r0, r3
 800cf12:	f001 fbbd 	bl	800e690 <xTaskRemoveFromEventList>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d007      	beq.n	800cf2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf1c:	4b3c      	ldr	r3, [pc, #240]	@ (800d010 <xQueueReceive+0x1c0>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf2c:	f002 ff1e 	bl	800fd6c <vPortExitCritical>
				return pdPASS;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e069      	b.n	800d008 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d103      	bne.n	800cf42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf3a:	f002 ff17 	bl	800fd6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e062      	b.n	800d008 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf48:	f107 0310 	add.w	r3, r7, #16
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 fc67 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf52:	2301      	movs	r3, #1
 800cf54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf56:	f002 ff09 	bl	800fd6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf5a:	f001 f859 	bl	800e010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf5e:	f002 fed3 	bl	800fd08 <vPortEnterCritical>
 800cf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf68:	b25b      	sxtb	r3, r3
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	d103      	bne.n	800cf78 <xQueueReceive+0x128>
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf7e:	b25b      	sxtb	r3, r3
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d103      	bne.n	800cf8e <xQueueReceive+0x13e>
 800cf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf8e:	f002 feed 	bl	800fd6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf92:	1d3a      	adds	r2, r7, #4
 800cf94:	f107 0310 	add.w	r3, r7, #16
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f001 fc56 	bl	800e84c <xTaskCheckForTimeOut>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d123      	bne.n	800cfee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfa8:	f000 fac0 	bl	800d52c <prvIsQueueEmpty>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d017      	beq.n	800cfe2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	3324      	adds	r3, #36	@ 0x24
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f001 fad8 	bl	800e570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc2:	f000 fa61 	bl	800d488 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfc6:	f001 f831 	bl	800e02c <xTaskResumeAll>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d189      	bne.n	800cee4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800d010 <xQueueReceive+0x1c0>)
 800cfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	e780      	b.n	800cee4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe4:	f000 fa50 	bl	800d488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfe8:	f001 f820 	bl	800e02c <xTaskResumeAll>
 800cfec:	e77a      	b.n	800cee4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cff0:	f000 fa4a 	bl	800d488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cff4:	f001 f81a 	bl	800e02c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cffa:	f000 fa97 	bl	800d52c <prvIsQueueEmpty>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	f43f af6f 	beq.w	800cee4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3730      	adds	r7, #48	@ 0x30
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	e000ed04 	.word	0xe000ed04

0800d014 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08e      	sub	sp, #56	@ 0x38
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d026:	2300      	movs	r3, #0
 800d028:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10b      	bne.n	800d048 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	623b      	str	r3, [r7, #32]
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	e7fd      	b.n	800d044 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00b      	beq.n	800d068 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	61fb      	str	r3, [r7, #28]
}
 800d062:	bf00      	nop
 800d064:	bf00      	nop
 800d066:	e7fd      	b.n	800d064 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d068:	f001 fdda 	bl	800ec20 <xTaskGetSchedulerState>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <xQueueSemaphoreTake+0x64>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <xQueueSemaphoreTake+0x68>
 800d078:	2301      	movs	r3, #1
 800d07a:	e000      	b.n	800d07e <xQueueSemaphoreTake+0x6a>
 800d07c:	2300      	movs	r3, #0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10b      	bne.n	800d09a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	61bb      	str	r3, [r7, #24]
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	e7fd      	b.n	800d096 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d09a:	f002 fe35 	bl	800fd08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d024      	beq.n	800d0f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ac:	1e5a      	subs	r2, r3, #1
 800d0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d104      	bne.n	800d0c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0ba:	f001 ff43 	bl	800ef44 <pvTaskIncrementMutexHeldCount>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00f      	beq.n	800d0ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ce:	3310      	adds	r3, #16
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f001 fadd 	bl	800e690 <xTaskRemoveFromEventList>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d007      	beq.n	800d0ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0dc:	4b54      	ldr	r3, [pc, #336]	@ (800d230 <xQueueSemaphoreTake+0x21c>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0ec:	f002 fe3e 	bl	800fd6c <vPortExitCritical>
				return pdPASS;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e098      	b.n	800d226 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d112      	bne.n	800d120 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00b      	beq.n	800d118 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	617b      	str	r3, [r7, #20]
}
 800d112:	bf00      	nop
 800d114:	bf00      	nop
 800d116:	e7fd      	b.n	800d114 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d118:	f002 fe28 	bl	800fd6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d11c:	2300      	movs	r3, #0
 800d11e:	e082      	b.n	800d226 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d126:	f107 030c 	add.w	r3, r7, #12
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 fb78 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d134:	f002 fe1a 	bl	800fd6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d138:	f000 ff6a 	bl	800e010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d13c:	f002 fde4 	bl	800fd08 <vPortEnterCritical>
 800d140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d142:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d146:	b25b      	sxtb	r3, r3
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d103      	bne.n	800d156 <xQueueSemaphoreTake+0x142>
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d15c:	b25b      	sxtb	r3, r3
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d103      	bne.n	800d16c <xQueueSemaphoreTake+0x158>
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	2200      	movs	r2, #0
 800d168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d16c:	f002 fdfe 	bl	800fd6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d170:	463a      	mov	r2, r7
 800d172:	f107 030c 	add.w	r3, r7, #12
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f001 fb67 	bl	800e84c <xTaskCheckForTimeOut>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d132      	bne.n	800d1ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d184:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d186:	f000 f9d1 	bl	800d52c <prvIsQueueEmpty>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d026      	beq.n	800d1de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d109      	bne.n	800d1ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d198:	f002 fdb6 	bl	800fd08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f001 fd5b 	bl	800ec5c <xTaskPriorityInherit>
 800d1a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1a8:	f002 fde0 	bl	800fd6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	3324      	adds	r3, #36	@ 0x24
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 f9db 	bl	800e570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1bc:	f000 f964 	bl	800d488 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1c0:	f000 ff34 	bl	800e02c <xTaskResumeAll>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f47f af67 	bne.w	800d09a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d1cc:	4b18      	ldr	r3, [pc, #96]	@ (800d230 <xQueueSemaphoreTake+0x21c>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	e75d      	b.n	800d09a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1e0:	f000 f952 	bl	800d488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1e4:	f000 ff22 	bl	800e02c <xTaskResumeAll>
 800d1e8:	e757      	b.n	800d09a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d1ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ec:	f000 f94c 	bl	800d488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1f0:	f000 ff1c 	bl	800e02c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1f6:	f000 f999 	bl	800d52c <prvIsQueueEmpty>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f43f af4c 	beq.w	800d09a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00d      	beq.n	800d224 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d208:	f002 fd7e 	bl	800fd08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d20c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d20e:	f000 f893 	bl	800d338 <prvGetDisinheritPriorityAfterTimeout>
 800d212:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f001 fdf6 	bl	800ee0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d220:	f002 fda4 	bl	800fd6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d226:	4618      	mov	r0, r3
 800d228:	3738      	adds	r7, #56	@ 0x38
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	e000ed04 	.word	0xe000ed04

0800d234 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	@ 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	623b      	str	r3, [r7, #32]
}
 800d25c:	bf00      	nop
 800d25e:	bf00      	nop
 800d260:	e7fd      	b.n	800d25e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d103      	bne.n	800d270 <xQueueReceiveFromISR+0x3c>
 800d268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <xQueueReceiveFromISR+0x40>
 800d270:	2301      	movs	r3, #1
 800d272:	e000      	b.n	800d276 <xQueueReceiveFromISR+0x42>
 800d274:	2300      	movs	r3, #0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10b      	bne.n	800d292 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	61fb      	str	r3, [r7, #28]
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	e7fd      	b.n	800d28e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d292:	f002 fe19 	bl	800fec8 <vPortValidateInterruptPriority>
	__asm volatile
 800d296:	f3ef 8211 	mrs	r2, BASEPRI
 800d29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	61ba      	str	r2, [r7, #24]
 800d2ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d02f      	beq.n	800d31e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2c8:	68b9      	ldr	r1, [r7, #8]
 800d2ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2cc:	f000 f8b6 	bl	800d43c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d2:	1e5a      	subs	r2, r3, #1
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e0:	d112      	bne.n	800d308 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d016      	beq.n	800d318 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	3310      	adds	r3, #16
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f001 f9ce 	bl	800e690 <xTaskRemoveFromEventList>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00e      	beq.n	800d318 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00b      	beq.n	800d318 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	e007      	b.n	800d318 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d30c:	3301      	adds	r3, #1
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	b25a      	sxtb	r2, r3
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d318:	2301      	movs	r3, #1
 800d31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d31c:	e001      	b.n	800d322 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d31e:	2300      	movs	r3, #0
 800d320:	637b      	str	r3, [r7, #52]	@ 0x34
 800d322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d324:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	f383 8811 	msr	BASEPRI, r3
}
 800d32c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d330:	4618      	mov	r0, r3
 800d332:	3738      	adds	r7, #56	@ 0x38
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	e001      	b.n	800d35a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d35a:	68fb      	ldr	r3, [r7, #12]
	}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d37c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10d      	bne.n	800d3a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d14d      	bne.n	800d42a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	4618      	mov	r0, r3
 800d394:	f001 fcca 	bl	800ed2c <xTaskPriorityDisinherit>
 800d398:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	609a      	str	r2, [r3, #8]
 800d3a0:	e043      	b.n	800d42a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d119      	bne.n	800d3dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6858      	ldr	r0, [r3, #4]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	f005 f8f5 	bl	80125a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c0:	441a      	add	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d32b      	bcc.n	800d42a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	605a      	str	r2, [r3, #4]
 800d3da:	e026      	b.n	800d42a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	68d8      	ldr	r0, [r3, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	f005 f8db 	bl	80125a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f4:	425b      	negs	r3, r3
 800d3f6:	441a      	add	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	68da      	ldr	r2, [r3, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d207      	bcs.n	800d418 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	689a      	ldr	r2, [r3, #8]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d410:	425b      	negs	r3, r3
 800d412:	441a      	add	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d105      	bne.n	800d42a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	3b01      	subs	r3, #1
 800d428:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d432:	697b      	ldr	r3, [r7, #20]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d018      	beq.n	800d480 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68da      	ldr	r2, [r3, #12]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d456:	441a      	add	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	429a      	cmp	r2, r3
 800d466:	d303      	bcc.n	800d470 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68d9      	ldr	r1, [r3, #12]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d478:	461a      	mov	r2, r3
 800d47a:	6838      	ldr	r0, [r7, #0]
 800d47c:	f005 f891 	bl	80125a2 <memcpy>
	}
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d490:	f002 fc3a 	bl	800fd08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d49a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d49c:	e011      	b.n	800d4c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d012      	beq.n	800d4cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3324      	adds	r3, #36	@ 0x24
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f001 f8f0 	bl	800e690 <xTaskRemoveFromEventList>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4b6:	f001 fa2d 	bl	800e914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	dce9      	bgt.n	800d49e <prvUnlockQueue+0x16>
 800d4ca:	e000      	b.n	800d4ce <prvUnlockQueue+0x46>
					break;
 800d4cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	22ff      	movs	r2, #255	@ 0xff
 800d4d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4d6:	f002 fc49 	bl	800fd6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4da:	f002 fc15 	bl	800fd08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4e6:	e011      	b.n	800d50c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d012      	beq.n	800d516 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3310      	adds	r3, #16
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f001 f8cb 	bl	800e690 <xTaskRemoveFromEventList>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d500:	f001 fa08 	bl	800e914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	3b01      	subs	r3, #1
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d50c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d510:	2b00      	cmp	r3, #0
 800d512:	dce9      	bgt.n	800d4e8 <prvUnlockQueue+0x60>
 800d514:	e000      	b.n	800d518 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d516:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	22ff      	movs	r2, #255	@ 0xff
 800d51c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d520:	f002 fc24 	bl	800fd6c <vPortExitCritical>
}
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d534:	f002 fbe8 	bl	800fd08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d540:	2301      	movs	r3, #1
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	e001      	b.n	800d54a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d546:	2300      	movs	r3, #0
 800d548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d54a:	f002 fc0f 	bl	800fd6c <vPortExitCritical>

	return xReturn;
 800d54e:	68fb      	ldr	r3, [r7, #12]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d560:	f002 fbd2 	bl	800fd08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d102      	bne.n	800d576 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d570:	2301      	movs	r3, #1
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	e001      	b.n	800d57a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d576:	2300      	movs	r3, #0
 800d578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d57a:	f002 fbf7 	bl	800fd6c <vPortExitCritical>

	return xReturn;
 800d57e:	68fb      	ldr	r3, [r7, #12]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d592:	2300      	movs	r3, #0
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	e014      	b.n	800d5c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d598:	4a0f      	ldr	r2, [pc, #60]	@ (800d5d8 <vQueueAddToRegistry+0x50>)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10b      	bne.n	800d5bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5a4:	490c      	ldr	r1, [pc, #48]	@ (800d5d8 <vQueueAddToRegistry+0x50>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5ae:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d8 <vQueueAddToRegistry+0x50>)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	4413      	add	r3, r2
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5ba:	e006      	b.n	800d5ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b07      	cmp	r3, #7
 800d5c6:	d9e7      	bls.n	800d598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	20000f48 	.word	0x20000f48

0800d5dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5ec:	f002 fb8c 	bl	800fd08 <vPortEnterCritical>
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fc:	d103      	bne.n	800d606 <vQueueWaitForMessageRestricted+0x2a>
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d103      	bne.n	800d61c <vQueueWaitForMessageRestricted+0x40>
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d61c:	f002 fba6 	bl	800fd6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	3324      	adds	r3, #36	@ 0x24
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	4618      	mov	r0, r3
 800d632:	f001 f801 	bl	800e638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d636:	6978      	ldr	r0, [r7, #20]
 800d638:	f7ff ff26 	bl	800d488 <prvUnlockQueue>
	}
 800d63c:	bf00      	nop
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08e      	sub	sp, #56	@ 0x38
 800d648:	af04      	add	r7, sp, #16
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10b      	bne.n	800d670 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	623b      	str	r3, [r7, #32]
}
 800d66a:	bf00      	nop
 800d66c:	bf00      	nop
 800d66e:	e7fd      	b.n	800d66c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	61fb      	str	r3, [r7, #28]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d68e:	23a8      	movs	r3, #168	@ 0xa8
 800d690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	2ba8      	cmp	r3, #168	@ 0xa8
 800d696:	d00b      	beq.n	800d6b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	61bb      	str	r3, [r7, #24]
}
 800d6aa:	bf00      	nop
 800d6ac:	bf00      	nop
 800d6ae:	e7fd      	b.n	800d6ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d01e      	beq.n	800d6f6 <xTaskCreateStatic+0xb2>
 800d6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01b      	beq.n	800d6f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9303      	str	r3, [sp, #12]
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d6:	9302      	str	r3, [sp, #8]
 800d6d8:	f107 0314 	add.w	r3, r7, #20
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 f851 	bl	800d790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6f0:	f000 f8f6 	bl	800d8e0 <prvAddNewTaskToReadyList>
 800d6f4:	e001      	b.n	800d6fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6fa:	697b      	ldr	r3, [r7, #20]
	}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3728      	adds	r7, #40	@ 0x28
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08c      	sub	sp, #48	@ 0x30
 800d708:	af04      	add	r7, sp, #16
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	4613      	mov	r3, r2
 800d712:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d714:	88fb      	ldrh	r3, [r7, #6]
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4618      	mov	r0, r3
 800d71a:	f002 fc17 	bl	800ff4c <pvPortMalloc>
 800d71e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00e      	beq.n	800d744 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d726:	20a8      	movs	r0, #168	@ 0xa8
 800d728:	f002 fc10 	bl	800ff4c <pvPortMalloc>
 800d72c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d003      	beq.n	800d73c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	631a      	str	r2, [r3, #48]	@ 0x30
 800d73a:	e005      	b.n	800d748 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d73c:	6978      	ldr	r0, [r7, #20]
 800d73e:	f002 fcd3 	bl	80100e8 <vPortFree>
 800d742:	e001      	b.n	800d748 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d744:	2300      	movs	r3, #0
 800d746:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d017      	beq.n	800d77e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d756:	88fa      	ldrh	r2, [r7, #6]
 800d758:	2300      	movs	r3, #0
 800d75a:	9303      	str	r3, [sp, #12]
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	9302      	str	r3, [sp, #8]
 800d760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d762:	9301      	str	r3, [sp, #4]
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f000 f80f 	bl	800d790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d772:	69f8      	ldr	r0, [r7, #28]
 800d774:	f000 f8b4 	bl	800d8e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d778:	2301      	movs	r3, #1
 800d77a:	61bb      	str	r3, [r7, #24]
 800d77c:	e002      	b.n	800d784 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d77e:	f04f 33ff 	mov.w	r3, #4294967295
 800d782:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d784:	69bb      	ldr	r3, [r7, #24]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	21a5      	movs	r1, #165	@ 0xa5
 800d7aa:	f004 fd92 	bl	80122d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	f023 0307 	bic.w	r3, r3, #7
 800d7c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00b      	beq.n	800d7ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	617b      	str	r3, [r7, #20]
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	e7fd      	b.n	800d7e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01f      	beq.n	800d830 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61fb      	str	r3, [r7, #28]
 800d7f4:	e012      	b.n	800d81c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	7819      	ldrb	r1, [r3, #0]
 800d7fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	4413      	add	r3, r2
 800d804:	3334      	adds	r3, #52	@ 0x34
 800d806:	460a      	mov	r2, r1
 800d808:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4413      	add	r3, r2
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d006      	beq.n	800d824 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	3301      	adds	r3, #1
 800d81a:	61fb      	str	r3, [r7, #28]
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	2b0f      	cmp	r3, #15
 800d820:	d9e9      	bls.n	800d7f6 <prvInitialiseNewTask+0x66>
 800d822:	e000      	b.n	800d826 <prvInitialiseNewTask+0x96>
			{
				break;
 800d824:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d82e:	e003      	b.n	800d838 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83a:	2b37      	cmp	r3, #55	@ 0x37
 800d83c:	d901      	bls.n	800d842 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d83e:	2337      	movs	r3, #55	@ 0x37
 800d840:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d846:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d84c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d850:	2200      	movs	r2, #0
 800d852:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d856:	3304      	adds	r3, #4
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fe ff4d 	bl	800c6f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d860:	3318      	adds	r3, #24
 800d862:	4618      	mov	r0, r3
 800d864:	f7fe ff48 	bl	800c6f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d86c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d870:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d87c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	2200      	movs	r2, #0
 800d882:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d890:	3354      	adds	r3, #84	@ 0x54
 800d892:	224c      	movs	r2, #76	@ 0x4c
 800d894:	2100      	movs	r1, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f004 fd1b 	bl	80122d2 <memset>
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	4a0d      	ldr	r2, [pc, #52]	@ (800d8d4 <prvInitialiseNewTask+0x144>)
 800d8a0:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d8d8 <prvInitialiseNewTask+0x148>)
 800d8a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d8dc <prvInitialiseNewTask+0x14c>)
 800d8ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	68f9      	ldr	r1, [r7, #12]
 800d8b2:	69b8      	ldr	r0, [r7, #24]
 800d8b4:	f002 f8f4 	bl	800faa0 <pxPortInitialiseStack>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ca:	bf00      	nop
 800d8cc:	3720      	adds	r7, #32
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	200058d0 	.word	0x200058d0
 800d8d8:	20005938 	.word	0x20005938
 800d8dc:	200059a0 	.word	0x200059a0

0800d8e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8e8:	f002 fa0e 	bl	800fd08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8ec:	4b2d      	ldr	r3, [pc, #180]	@ (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	4a2c      	ldr	r2, [pc, #176]	@ (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d8f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d109      	bne.n	800d912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d904:	4b27      	ldr	r3, [pc, #156]	@ (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d110      	bne.n	800d92e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d90c:	f001 f826 	bl	800e95c <prvInitialiseTaskLists>
 800d910:	e00d      	b.n	800d92e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d912:	4b26      	ldr	r3, [pc, #152]	@ (800d9ac <prvAddNewTaskToReadyList+0xcc>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d91a:	4b23      	ldr	r3, [pc, #140]	@ (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d924:	429a      	cmp	r2, r3
 800d926:	d802      	bhi.n	800d92e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d928:	4a1f      	ldr	r2, [pc, #124]	@ (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d92e:	4b20      	ldr	r3, [pc, #128]	@ (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a1e      	ldr	r2, [pc, #120]	@ (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d936:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d938:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d944:	4b1b      	ldr	r3, [pc, #108]	@ (800d9b4 <prvAddNewTaskToReadyList+0xd4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d903      	bls.n	800d954 <prvAddNewTaskToReadyList+0x74>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d950:	4a18      	ldr	r2, [pc, #96]	@ (800d9b4 <prvAddNewTaskToReadyList+0xd4>)
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d958:	4613      	mov	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4a15      	ldr	r2, [pc, #84]	@ (800d9b8 <prvAddNewTaskToReadyList+0xd8>)
 800d962:	441a      	add	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3304      	adds	r3, #4
 800d968:	4619      	mov	r1, r3
 800d96a:	4610      	mov	r0, r2
 800d96c:	f7fe fed1 	bl	800c712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d970:	f002 f9fc 	bl	800fd6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d974:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ac <prvAddNewTaskToReadyList+0xcc>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00e      	beq.n	800d99a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d97c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d986:	429a      	cmp	r2, r3
 800d988:	d207      	bcs.n	800d99a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d98a:	4b0c      	ldr	r3, [pc, #48]	@ (800d9bc <prvAddNewTaskToReadyList+0xdc>)
 800d98c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	2000145c 	.word	0x2000145c
 800d9a8:	20000f88 	.word	0x20000f88
 800d9ac:	20001468 	.word	0x20001468
 800d9b0:	20001478 	.word	0x20001478
 800d9b4:	20001464 	.word	0x20001464
 800d9b8:	20000f8c 	.word	0x20000f8c
 800d9bc:	e000ed04 	.word	0xe000ed04

0800d9c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d9c8:	f002 f99e 	bl	800fd08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <vTaskDelete+0x18>
 800d9d2:	4b2d      	ldr	r3, [pc, #180]	@ (800da88 <vTaskDelete+0xc8>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	e000      	b.n	800d9da <vTaskDelete+0x1a>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fef3 	bl	800c7cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d004      	beq.n	800d9f8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3318      	adds	r3, #24
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe feea 	bl	800c7cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d9f8:	4b24      	ldr	r3, [pc, #144]	@ (800da8c <vTaskDelete+0xcc>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	4a23      	ldr	r2, [pc, #140]	@ (800da8c <vTaskDelete+0xcc>)
 800da00:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800da02:	4b21      	ldr	r3, [pc, #132]	@ (800da88 <vTaskDelete+0xc8>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d10b      	bne.n	800da24 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3304      	adds	r3, #4
 800da10:	4619      	mov	r1, r3
 800da12:	481f      	ldr	r0, [pc, #124]	@ (800da90 <vTaskDelete+0xd0>)
 800da14:	f7fe fe7d 	bl	800c712 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800da18:	4b1e      	ldr	r3, [pc, #120]	@ (800da94 <vTaskDelete+0xd4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	4a1d      	ldr	r2, [pc, #116]	@ (800da94 <vTaskDelete+0xd4>)
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	e009      	b.n	800da38 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800da24:	4b1c      	ldr	r3, [pc, #112]	@ (800da98 <vTaskDelete+0xd8>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3b01      	subs	r3, #1
 800da2a:	4a1b      	ldr	r2, [pc, #108]	@ (800da98 <vTaskDelete+0xd8>)
 800da2c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f001 f8a0 	bl	800eb74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800da34:	f001 f8d4 	bl	800ebe0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800da38:	f002 f998 	bl	800fd6c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800da3c:	4b17      	ldr	r3, [pc, #92]	@ (800da9c <vTaskDelete+0xdc>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d01c      	beq.n	800da7e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800da44:	4b10      	ldr	r3, [pc, #64]	@ (800da88 <vTaskDelete+0xc8>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d117      	bne.n	800da7e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800da4e:	4b14      	ldr	r3, [pc, #80]	@ (800daa0 <vTaskDelete+0xe0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00b      	beq.n	800da6e <vTaskDelete+0xae>
	__asm volatile
 800da56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5a:	f383 8811 	msr	BASEPRI, r3
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f3bf 8f4f 	dsb	sy
 800da66:	60bb      	str	r3, [r7, #8]
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	e7fd      	b.n	800da6a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800da6e:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <vTaskDelete+0xe4>)
 800da70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da7e:	bf00      	nop
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20000f88 	.word	0x20000f88
 800da8c:	20001478 	.word	0x20001478
 800da90:	20001430 	.word	0x20001430
 800da94:	20001444 	.word	0x20001444
 800da98:	2000145c 	.word	0x2000145c
 800da9c:	20001468 	.word	0x20001468
 800daa0:	20001484 	.word	0x20001484
 800daa4:	e000ed04 	.word	0xe000ed04

0800daa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dab0:	2300      	movs	r3, #0
 800dab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d018      	beq.n	800daec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daba:	4b14      	ldr	r3, [pc, #80]	@ (800db0c <vTaskDelay+0x64>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00b      	beq.n	800dada <vTaskDelay+0x32>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	60bb      	str	r3, [r7, #8]
}
 800dad4:	bf00      	nop
 800dad6:	bf00      	nop
 800dad8:	e7fd      	b.n	800dad6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dada:	f000 fa99 	bl	800e010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dade:	2100      	movs	r1, #0
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f001 fbb1 	bl	800f248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dae6:	f000 faa1 	bl	800e02c <xTaskResumeAll>
 800daea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d107      	bne.n	800db02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800daf2:	4b07      	ldr	r3, [pc, #28]	@ (800db10 <vTaskDelay+0x68>)
 800daf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20001484 	.word	0x20001484
 800db10:	e000ed04 	.word	0xe000ed04

0800db14 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800db14:	b580      	push	{r7, lr}
 800db16:	b088      	sub	sp, #32
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10b      	bne.n	800db3e <eTaskGetState+0x2a>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	60bb      	str	r3, [r7, #8]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800db3e:	4b24      	ldr	r3, [pc, #144]	@ (800dbd0 <eTaskGetState+0xbc>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	429a      	cmp	r2, r3
 800db46:	d102      	bne.n	800db4e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800db48:	2300      	movs	r3, #0
 800db4a:	77fb      	strb	r3, [r7, #31]
 800db4c:	e03a      	b.n	800dbc4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800db4e:	f002 f8db 	bl	800fd08 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800db58:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd4 <eTaskGetState+0xc0>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800db5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd8 <eTaskGetState+0xc4>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800db64:	f002 f902 	bl	800fd6c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800db68:	697a      	ldr	r2, [r7, #20]
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d003      	beq.n	800db78 <eTaskGetState+0x64>
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	429a      	cmp	r2, r3
 800db76:	d102      	bne.n	800db7e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800db78:	2302      	movs	r3, #2
 800db7a:	77fb      	strb	r3, [r7, #31]
 800db7c:	e022      	b.n	800dbc4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	4a16      	ldr	r2, [pc, #88]	@ (800dbdc <eTaskGetState+0xc8>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d112      	bne.n	800dbac <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10b      	bne.n	800dba6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b01      	cmp	r3, #1
 800db98:	d102      	bne.n	800dba0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800db9a:	2302      	movs	r3, #2
 800db9c:	77fb      	strb	r3, [r7, #31]
 800db9e:	e011      	b.n	800dbc4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800dba0:	2303      	movs	r3, #3
 800dba2:	77fb      	strb	r3, [r7, #31]
 800dba4:	e00e      	b.n	800dbc4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dba6:	2302      	movs	r3, #2
 800dba8:	77fb      	strb	r3, [r7, #31]
 800dbaa:	e00b      	b.n	800dbc4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	4a0c      	ldr	r2, [pc, #48]	@ (800dbe0 <eTaskGetState+0xcc>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d002      	beq.n	800dbba <eTaskGetState+0xa6>
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d102      	bne.n	800dbc0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dbba:	2304      	movs	r3, #4
 800dbbc:	77fb      	strb	r3, [r7, #31]
 800dbbe:	e001      	b.n	800dbc4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dbc4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3720      	adds	r7, #32
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	20000f88 	.word	0x20000f88
 800dbd4:	20001414 	.word	0x20001414
 800dbd8:	20001418 	.word	0x20001418
 800dbdc:	20001448 	.word	0x20001448
 800dbe0:	20001430 	.word	0x20001430

0800dbe4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2b37      	cmp	r3, #55	@ 0x37
 800dbf6:	d90b      	bls.n	800dc10 <vTaskPrioritySet+0x2c>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	60fb      	str	r3, [r7, #12]
}
 800dc0a:	bf00      	nop
 800dc0c:	bf00      	nop
 800dc0e:	e7fd      	b.n	800dc0c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b37      	cmp	r3, #55	@ 0x37
 800dc14:	d901      	bls.n	800dc1a <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc16:	2337      	movs	r3, #55	@ 0x37
 800dc18:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dc1a:	f002 f875 	bl	800fd08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <vTaskPrioritySet+0x46>
 800dc24:	4b3a      	ldr	r3, [pc, #232]	@ (800dd10 <vTaskPrioritySet+0x12c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	e000      	b.n	800dc2c <vTaskPrioritySet+0x48>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc32:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d063      	beq.n	800dd04 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d90d      	bls.n	800dc60 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dc44:	4b32      	ldr	r3, [pc, #200]	@ (800dd10 <vTaskPrioritySet+0x12c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	69ba      	ldr	r2, [r7, #24]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d00f      	beq.n	800dc6e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dc4e:	4b30      	ldr	r3, [pc, #192]	@ (800dd10 <vTaskPrioritySet+0x12c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d309      	bcc.n	800dc6e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	61fb      	str	r3, [r7, #28]
 800dc5e:	e006      	b.n	800dc6e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dc60:	4b2b      	ldr	r3, [pc, #172]	@ (800dd10 <vTaskPrioritySet+0x12c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d101      	bne.n	800dc6e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc72:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d102      	bne.n	800dc86 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	db04      	blt.n	800dc9e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	6959      	ldr	r1, [r3, #20]
 800dca2:	693a      	ldr	r2, [r7, #16]
 800dca4:	4613      	mov	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4a19      	ldr	r2, [pc, #100]	@ (800dd14 <vTaskPrioritySet+0x130>)
 800dcae:	4413      	add	r3, r2
 800dcb0:	4299      	cmp	r1, r3
 800dcb2:	d11c      	bne.n	800dcee <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe fd87 	bl	800c7cc <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcc2:	4b15      	ldr	r3, [pc, #84]	@ (800dd18 <vTaskPrioritySet+0x134>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d903      	bls.n	800dcd2 <vTaskPrioritySet+0xee>
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcce:	4a12      	ldr	r2, [pc, #72]	@ (800dd18 <vTaskPrioritySet+0x134>)
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4a0d      	ldr	r2, [pc, #52]	@ (800dd14 <vTaskPrioritySet+0x130>)
 800dce0:	441a      	add	r2, r3
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	3304      	adds	r3, #4
 800dce6:	4619      	mov	r1, r3
 800dce8:	4610      	mov	r0, r2
 800dcea:	f7fe fd12 	bl	800c712 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d007      	beq.n	800dd04 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800dcf4:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <vTaskPrioritySet+0x138>)
 800dcf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcfa:	601a      	str	r2, [r3, #0]
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800dd04:	f002 f832 	bl	800fd6c <vPortExitCritical>
	}
 800dd08:	bf00      	nop
 800dd0a:	3720      	adds	r7, #32
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20000f88 	.word	0x20000f88
 800dd14:	20000f8c 	.word	0x20000f8c
 800dd18:	20001464 	.word	0x20001464
 800dd1c:	e000ed04 	.word	0xe000ed04

0800dd20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dd28:	f001 ffee 	bl	800fd08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <vTaskSuspend+0x18>
 800dd32:	4b30      	ldr	r3, [pc, #192]	@ (800ddf4 <vTaskSuspend+0xd4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	e000      	b.n	800dd3a <vTaskSuspend+0x1a>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fe fd43 	bl	800c7cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d004      	beq.n	800dd58 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3318      	adds	r3, #24
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fd3a 	bl	800c7cc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4826      	ldr	r0, [pc, #152]	@ (800ddf8 <vTaskSuspend+0xd8>)
 800dd60:	f7fe fcd7 	bl	800c712 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d103      	bne.n	800dd78 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dd78:	f001 fff8 	bl	800fd6c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dd7c:	4b1f      	ldr	r3, [pc, #124]	@ (800ddfc <vTaskSuspend+0xdc>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dd84:	f001 ffc0 	bl	800fd08 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dd88:	f000 ff2a 	bl	800ebe0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dd8c:	f001 ffee 	bl	800fd6c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dd90:	4b18      	ldr	r3, [pc, #96]	@ (800ddf4 <vTaskSuspend+0xd4>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d128      	bne.n	800ddec <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dd9a:	4b18      	ldr	r3, [pc, #96]	@ (800ddfc <vTaskSuspend+0xdc>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d018      	beq.n	800ddd4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dda2:	4b17      	ldr	r3, [pc, #92]	@ (800de00 <vTaskSuspend+0xe0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00b      	beq.n	800ddc2 <vTaskSuspend+0xa2>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	60bb      	str	r3, [r7, #8]
}
 800ddbc:	bf00      	nop
 800ddbe:	bf00      	nop
 800ddc0:	e7fd      	b.n	800ddbe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ddc2:	4b10      	ldr	r3, [pc, #64]	@ (800de04 <vTaskSuspend+0xe4>)
 800ddc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddd2:	e00b      	b.n	800ddec <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ddd4:	4b08      	ldr	r3, [pc, #32]	@ (800ddf8 <vTaskSuspend+0xd8>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	4b0b      	ldr	r3, [pc, #44]	@ (800de08 <vTaskSuspend+0xe8>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d103      	bne.n	800dde8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800dde0:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <vTaskSuspend+0xd4>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]
	}
 800dde6:	e001      	b.n	800ddec <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800dde8:	f000 fb5c 	bl	800e4a4 <vTaskSwitchContext>
	}
 800ddec:	bf00      	nop
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20000f88 	.word	0x20000f88
 800ddf8:	20001448 	.word	0x20001448
 800ddfc:	20001468 	.word	0x20001468
 800de00:	20001484 	.word	0x20001484
 800de04:	e000ed04 	.word	0xe000ed04
 800de08:	2000145c 	.word	0x2000145c

0800de0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800de0c:	b480      	push	{r7}
 800de0e:	b087      	sub	sp, #28
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10b      	bne.n	800de3a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60fb      	str	r3, [r7, #12]
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	e7fd      	b.n	800de36 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	695b      	ldr	r3, [r3, #20]
 800de3e:	4a0a      	ldr	r2, [pc, #40]	@ (800de68 <prvTaskIsTaskSuspended+0x5c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d10a      	bne.n	800de5a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de48:	4a08      	ldr	r2, [pc, #32]	@ (800de6c <prvTaskIsTaskSuspended+0x60>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d005      	beq.n	800de5a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800de56:	2301      	movs	r3, #1
 800de58:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de5a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800de5c:	4618      	mov	r0, r3
 800de5e:	371c      	adds	r7, #28
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr
 800de68:	20001448 	.word	0x20001448
 800de6c:	2000141c 	.word	0x2000141c

0800de70 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10b      	bne.n	800de9a <vTaskResume+0x2a>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	60bb      	str	r3, [r7, #8]
}
 800de94:	bf00      	nop
 800de96:	bf00      	nop
 800de98:	e7fd      	b.n	800de96 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800de9a:	4b21      	ldr	r3, [pc, #132]	@ (800df20 <vTaskResume+0xb0>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d038      	beq.n	800df16 <vTaskResume+0xa6>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d035      	beq.n	800df16 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800deaa:	f001 ff2d 	bl	800fd08 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f7ff ffac 	bl	800de0c <prvTaskIsTaskSuspended>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d02b      	beq.n	800df12 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fc84 	bl	800c7cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dec8:	4b16      	ldr	r3, [pc, #88]	@ (800df24 <vTaskResume+0xb4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d903      	bls.n	800ded8 <vTaskResume+0x68>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded4:	4a13      	ldr	r2, [pc, #76]	@ (800df24 <vTaskResume+0xb4>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4a10      	ldr	r2, [pc, #64]	@ (800df28 <vTaskResume+0xb8>)
 800dee6:	441a      	add	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3304      	adds	r3, #4
 800deec:	4619      	mov	r1, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f7fe fc0f 	bl	800c712 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800def8:	4b09      	ldr	r3, [pc, #36]	@ (800df20 <vTaskResume+0xb0>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defe:	429a      	cmp	r2, r3
 800df00:	d307      	bcc.n	800df12 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800df02:	4b0a      	ldr	r3, [pc, #40]	@ (800df2c <vTaskResume+0xbc>)
 800df04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800df12:	f001 ff2b 	bl	800fd6c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	20000f88 	.word	0x20000f88
 800df24:	20001464 	.word	0x20001464
 800df28:	20000f8c 	.word	0x20000f8c
 800df2c:	e000ed04 	.word	0xe000ed04

0800df30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b08a      	sub	sp, #40	@ 0x28
 800df34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df3e:	463a      	mov	r2, r7
 800df40:	1d39      	adds	r1, r7, #4
 800df42:	f107 0308 	add.w	r3, r7, #8
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe f9c6 	bl	800c2d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df4c:	6839      	ldr	r1, [r7, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	9202      	str	r2, [sp, #8]
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	2300      	movs	r3, #0
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	2300      	movs	r3, #0
 800df5c:	460a      	mov	r2, r1
 800df5e:	4924      	ldr	r1, [pc, #144]	@ (800dff0 <vTaskStartScheduler+0xc0>)
 800df60:	4824      	ldr	r0, [pc, #144]	@ (800dff4 <vTaskStartScheduler+0xc4>)
 800df62:	f7ff fb6f 	bl	800d644 <xTaskCreateStatic>
 800df66:	4603      	mov	r3, r0
 800df68:	4a23      	ldr	r2, [pc, #140]	@ (800dff8 <vTaskStartScheduler+0xc8>)
 800df6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df6c:	4b22      	ldr	r3, [pc, #136]	@ (800dff8 <vTaskStartScheduler+0xc8>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df74:	2301      	movs	r3, #1
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	e001      	b.n	800df7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d102      	bne.n	800df8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df84:	f001 f9b4 	bl	800f2f0 <xTimerCreateTimerTask>
 800df88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d11b      	bne.n	800dfc8 <vTaskStartScheduler+0x98>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	613b      	str	r3, [r7, #16]
}
 800dfa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfa4:	4b15      	ldr	r3, [pc, #84]	@ (800dffc <vTaskStartScheduler+0xcc>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3354      	adds	r3, #84	@ 0x54
 800dfaa:	4a15      	ldr	r2, [pc, #84]	@ (800e000 <vTaskStartScheduler+0xd0>)
 800dfac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfae:	4b15      	ldr	r3, [pc, #84]	@ (800e004 <vTaskStartScheduler+0xd4>)
 800dfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfb6:	4b14      	ldr	r3, [pc, #80]	@ (800e008 <vTaskStartScheduler+0xd8>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfbc:	4b13      	ldr	r3, [pc, #76]	@ (800e00c <vTaskStartScheduler+0xdc>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfc2:	f001 fdfd 	bl	800fbc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfc6:	e00f      	b.n	800dfe8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfce:	d10b      	bne.n	800dfe8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
}
 800dfe2:	bf00      	nop
 800dfe4:	bf00      	nop
 800dfe6:	e7fd      	b.n	800dfe4 <vTaskStartScheduler+0xb4>
}
 800dfe8:	bf00      	nop
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	080156f4 	.word	0x080156f4
 800dff4:	0800e92d 	.word	0x0800e92d
 800dff8:	20001480 	.word	0x20001480
 800dffc:	20000f88 	.word	0x20000f88
 800e000:	200003d4 	.word	0x200003d4
 800e004:	2000147c 	.word	0x2000147c
 800e008:	20001468 	.word	0x20001468
 800e00c:	20001460 	.word	0x20001460

0800e010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e010:	b480      	push	{r7}
 800e012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e014:	4b04      	ldr	r3, [pc, #16]	@ (800e028 <vTaskSuspendAll+0x18>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	3301      	adds	r3, #1
 800e01a:	4a03      	ldr	r2, [pc, #12]	@ (800e028 <vTaskSuspendAll+0x18>)
 800e01c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e01e:	bf00      	nop
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	20001484 	.word	0x20001484

0800e02c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e032:	2300      	movs	r3, #0
 800e034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e036:	2300      	movs	r3, #0
 800e038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e03a:	4b42      	ldr	r3, [pc, #264]	@ (800e144 <xTaskResumeAll+0x118>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10b      	bne.n	800e05a <xTaskResumeAll+0x2e>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	603b      	str	r3, [r7, #0]
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop
 800e058:	e7fd      	b.n	800e056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e05a:	f001 fe55 	bl	800fd08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e05e:	4b39      	ldr	r3, [pc, #228]	@ (800e144 <xTaskResumeAll+0x118>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3b01      	subs	r3, #1
 800e064:	4a37      	ldr	r2, [pc, #220]	@ (800e144 <xTaskResumeAll+0x118>)
 800e066:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e068:	4b36      	ldr	r3, [pc, #216]	@ (800e144 <xTaskResumeAll+0x118>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d162      	bne.n	800e136 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e070:	4b35      	ldr	r3, [pc, #212]	@ (800e148 <xTaskResumeAll+0x11c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d05e      	beq.n	800e136 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e078:	e02f      	b.n	800e0da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e07a:	4b34      	ldr	r3, [pc, #208]	@ (800e14c <xTaskResumeAll+0x120>)
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	3318      	adds	r3, #24
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fba0 	bl	800c7cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3304      	adds	r3, #4
 800e090:	4618      	mov	r0, r3
 800e092:	f7fe fb9b 	bl	800c7cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e09a:	4b2d      	ldr	r3, [pc, #180]	@ (800e150 <xTaskResumeAll+0x124>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d903      	bls.n	800e0aa <xTaskResumeAll+0x7e>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800e150 <xTaskResumeAll+0x124>)
 800e0a8:	6013      	str	r3, [r2, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4a27      	ldr	r2, [pc, #156]	@ (800e154 <xTaskResumeAll+0x128>)
 800e0b8:	441a      	add	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	3304      	adds	r3, #4
 800e0be:	4619      	mov	r1, r3
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	f7fe fb26 	bl	800c712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ca:	4b23      	ldr	r3, [pc, #140]	@ (800e158 <xTaskResumeAll+0x12c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d302      	bcc.n	800e0da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0d4:	4b21      	ldr	r3, [pc, #132]	@ (800e15c <xTaskResumeAll+0x130>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0da:	4b1c      	ldr	r3, [pc, #112]	@ (800e14c <xTaskResumeAll+0x120>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1cb      	bne.n	800e07a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0e8:	f000 fd7a 	bl	800ebe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800e160 <xTaskResumeAll+0x134>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d010      	beq.n	800e11a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0f8:	f000 f91a 	bl	800e330 <xTaskIncrementTick>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e102:	4b16      	ldr	r3, [pc, #88]	@ (800e15c <xTaskResumeAll+0x130>)
 800e104:	2201      	movs	r2, #1
 800e106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1f1      	bne.n	800e0f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e114:	4b12      	ldr	r3, [pc, #72]	@ (800e160 <xTaskResumeAll+0x134>)
 800e116:	2200      	movs	r2, #0
 800e118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e11a:	4b10      	ldr	r3, [pc, #64]	@ (800e15c <xTaskResumeAll+0x130>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d009      	beq.n	800e136 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e122:	2301      	movs	r3, #1
 800e124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e126:	4b0f      	ldr	r3, [pc, #60]	@ (800e164 <xTaskResumeAll+0x138>)
 800e128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e136:	f001 fe19 	bl	800fd6c <vPortExitCritical>

	return xAlreadyYielded;
 800e13a:	68bb      	ldr	r3, [r7, #8]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	20001484 	.word	0x20001484
 800e148:	2000145c 	.word	0x2000145c
 800e14c:	2000141c 	.word	0x2000141c
 800e150:	20001464 	.word	0x20001464
 800e154:	20000f8c 	.word	0x20000f8c
 800e158:	20000f88 	.word	0x20000f88
 800e15c:	20001470 	.word	0x20001470
 800e160:	2000146c 	.word	0x2000146c
 800e164:	e000ed04 	.word	0xe000ed04

0800e168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e16e:	4b05      	ldr	r3, [pc, #20]	@ (800e184 <xTaskGetTickCount+0x1c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e174:	687b      	ldr	r3, [r7, #4]
}
 800e176:	4618      	mov	r0, r3
 800e178:	370c      	adds	r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	20001460 	.word	0x20001460

0800e188 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e188:	b480      	push	{r7}
 800e18a:	b08b      	sub	sp, #44	@ 0x2c
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d05b      	beq.n	800e256 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	61bb      	str	r3, [r7, #24]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	605a      	str	r2, [r3, #4]
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	3308      	adds	r3, #8
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d104      	bne.n	800e1c2 <prvSearchForNameWithinSingleList+0x3a>
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	605a      	str	r2, [r3, #4]
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	613b      	str	r3, [r7, #16]
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	605a      	str	r2, [r3, #4]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	3308      	adds	r3, #8
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d104      	bne.n	800e1ee <prvSearchForNameWithinSingleList+0x66>
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	605a      	str	r2, [r3, #4]
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	623b      	str	r3, [r7, #32]
 800e1fe:	e01c      	b.n	800e23a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	4413      	add	r3, r2
 800e206:	3334      	adds	r3, #52	@ 0x34
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	4413      	add	r3, r2
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	7afa      	ldrb	r2, [r7, #11]
 800e216:	429a      	cmp	r2, r3
 800e218:	d002      	beq.n	800e220 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e21a:	2301      	movs	r3, #1
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	e006      	b.n	800e22e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e220:	7afb      	ldrb	r3, [r7, #11]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d103      	bne.n	800e22e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e22a:	2301      	movs	r3, #1
 800e22c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	3301      	adds	r3, #1
 800e238:	623b      	str	r3, [r7, #32]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	2b0f      	cmp	r3, #15
 800e23e:	d9df      	bls.n	800e200 <prvSearchForNameWithinSingleList+0x78>
 800e240:	e000      	b.n	800e244 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e242:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	d104      	bne.n	800e254 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d1bb      	bne.n	800e1ca <prvSearchForNameWithinSingleList+0x42>
 800e252:	e000      	b.n	800e256 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e254:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e258:	4618      	mov	r0, r3
 800e25a:	372c      	adds	r7, #44	@ 0x2c
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e26c:	2338      	movs	r3, #56	@ 0x38
 800e26e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f1 fffd 	bl	8000270 <strlen>
 800e276:	4603      	mov	r3, r0
 800e278:	2b0f      	cmp	r3, #15
 800e27a:	d90b      	bls.n	800e294 <xTaskGetHandle+0x30>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	60fb      	str	r3, [r7, #12]
}
 800e28e:	bf00      	nop
 800e290:	bf00      	nop
 800e292:	e7fd      	b.n	800e290 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e294:	f7ff febc 	bl	800e010 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	3b01      	subs	r3, #1
 800e29c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4413      	add	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4a1c      	ldr	r2, [pc, #112]	@ (800e31c <xTaskGetHandle+0xb8>)
 800e2aa:	4413      	add	r3, r2
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff ff6a 	bl	800e188 <prvSearchForNameWithinSingleList>
 800e2b4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d103      	bne.n	800e2c4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1ea      	bne.n	800e298 <xTaskGetHandle+0x34>
 800e2c2:	e000      	b.n	800e2c6 <xTaskGetHandle+0x62>
					break;
 800e2c4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e2cc:	4b14      	ldr	r3, [pc, #80]	@ (800e320 <xTaskGetHandle+0xbc>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff ff58 	bl	800e188 <prvSearchForNameWithinSingleList>
 800e2d8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d106      	bne.n	800e2ee <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e2e0:	4b10      	ldr	r3, [pc, #64]	@ (800e324 <xTaskGetHandle+0xc0>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6879      	ldr	r1, [r7, #4]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff ff4e 	bl	800e188 <prvSearchForNameWithinSingleList>
 800e2ec:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d104      	bne.n	800e2fe <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	480c      	ldr	r0, [pc, #48]	@ (800e328 <xTaskGetHandle+0xc4>)
 800e2f8:	f7ff ff46 	bl	800e188 <prvSearchForNameWithinSingleList>
 800e2fc:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d104      	bne.n	800e30e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	4809      	ldr	r0, [pc, #36]	@ (800e32c <xTaskGetHandle+0xc8>)
 800e308:	f7ff ff3e 	bl	800e188 <prvSearchForNameWithinSingleList>
 800e30c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e30e:	f7ff fe8d 	bl	800e02c <xTaskResumeAll>

		return pxTCB;
 800e312:	693b      	ldr	r3, [r7, #16]
	}
 800e314:	4618      	mov	r0, r3
 800e316:	3718      	adds	r7, #24
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	20000f8c 	.word	0x20000f8c
 800e320:	20001414 	.word	0x20001414
 800e324:	20001418 	.word	0x20001418
 800e328:	20001448 	.word	0x20001448
 800e32c:	20001430 	.word	0x20001430

0800e330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e336:	2300      	movs	r3, #0
 800e338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e33a:	4b4f      	ldr	r3, [pc, #316]	@ (800e478 <xTaskIncrementTick+0x148>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f040 8090 	bne.w	800e464 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e344:	4b4d      	ldr	r3, [pc, #308]	@ (800e47c <xTaskIncrementTick+0x14c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3301      	adds	r3, #1
 800e34a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e34c:	4a4b      	ldr	r2, [pc, #300]	@ (800e47c <xTaskIncrementTick+0x14c>)
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d121      	bne.n	800e39c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e358:	4b49      	ldr	r3, [pc, #292]	@ (800e480 <xTaskIncrementTick+0x150>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00b      	beq.n	800e37a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	603b      	str	r3, [r7, #0]
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	e7fd      	b.n	800e376 <xTaskIncrementTick+0x46>
 800e37a:	4b41      	ldr	r3, [pc, #260]	@ (800e480 <xTaskIncrementTick+0x150>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	4b40      	ldr	r3, [pc, #256]	@ (800e484 <xTaskIncrementTick+0x154>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a3e      	ldr	r2, [pc, #248]	@ (800e480 <xTaskIncrementTick+0x150>)
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	4a3e      	ldr	r2, [pc, #248]	@ (800e484 <xTaskIncrementTick+0x154>)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6013      	str	r3, [r2, #0]
 800e38e:	4b3e      	ldr	r3, [pc, #248]	@ (800e488 <xTaskIncrementTick+0x158>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3301      	adds	r3, #1
 800e394:	4a3c      	ldr	r2, [pc, #240]	@ (800e488 <xTaskIncrementTick+0x158>)
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	f000 fc22 	bl	800ebe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e39c:	4b3b      	ldr	r3, [pc, #236]	@ (800e48c <xTaskIncrementTick+0x15c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d349      	bcc.n	800e43a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3a6:	4b36      	ldr	r3, [pc, #216]	@ (800e480 <xTaskIncrementTick+0x150>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d104      	bne.n	800e3ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3b0:	4b36      	ldr	r3, [pc, #216]	@ (800e48c <xTaskIncrementTick+0x15c>)
 800e3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b6:	601a      	str	r2, [r3, #0]
					break;
 800e3b8:	e03f      	b.n	800e43a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ba:	4b31      	ldr	r3, [pc, #196]	@ (800e480 <xTaskIncrementTick+0x150>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d203      	bcs.n	800e3da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3d2:	4a2e      	ldr	r2, [pc, #184]	@ (800e48c <xTaskIncrementTick+0x15c>)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3d8:	e02f      	b.n	800e43a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe f9f4 	bl	800c7cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	3318      	adds	r3, #24
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe f9eb 	bl	800c7cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3fa:	4b25      	ldr	r3, [pc, #148]	@ (800e490 <xTaskIncrementTick+0x160>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d903      	bls.n	800e40a <xTaskIncrementTick+0xda>
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e406:	4a22      	ldr	r2, [pc, #136]	@ (800e490 <xTaskIncrementTick+0x160>)
 800e408:	6013      	str	r3, [r2, #0]
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e40e:	4613      	mov	r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4a1f      	ldr	r2, [pc, #124]	@ (800e494 <xTaskIncrementTick+0x164>)
 800e418:	441a      	add	r2, r3
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	3304      	adds	r3, #4
 800e41e:	4619      	mov	r1, r3
 800e420:	4610      	mov	r0, r2
 800e422:	f7fe f976 	bl	800c712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e42a:	4b1b      	ldr	r3, [pc, #108]	@ (800e498 <xTaskIncrementTick+0x168>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e430:	429a      	cmp	r2, r3
 800e432:	d3b8      	bcc.n	800e3a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e434:	2301      	movs	r3, #1
 800e436:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e438:	e7b5      	b.n	800e3a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e43a:	4b17      	ldr	r3, [pc, #92]	@ (800e498 <xTaskIncrementTick+0x168>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e440:	4914      	ldr	r1, [pc, #80]	@ (800e494 <xTaskIncrementTick+0x164>)
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	440b      	add	r3, r1
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d901      	bls.n	800e456 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e452:	2301      	movs	r3, #1
 800e454:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e456:	4b11      	ldr	r3, [pc, #68]	@ (800e49c <xTaskIncrementTick+0x16c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d007      	beq.n	800e46e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e45e:	2301      	movs	r3, #1
 800e460:	617b      	str	r3, [r7, #20]
 800e462:	e004      	b.n	800e46e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e464:	4b0e      	ldr	r3, [pc, #56]	@ (800e4a0 <xTaskIncrementTick+0x170>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3301      	adds	r3, #1
 800e46a:	4a0d      	ldr	r2, [pc, #52]	@ (800e4a0 <xTaskIncrementTick+0x170>)
 800e46c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e46e:	697b      	ldr	r3, [r7, #20]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20001484 	.word	0x20001484
 800e47c:	20001460 	.word	0x20001460
 800e480:	20001414 	.word	0x20001414
 800e484:	20001418 	.word	0x20001418
 800e488:	20001474 	.word	0x20001474
 800e48c:	2000147c 	.word	0x2000147c
 800e490:	20001464 	.word	0x20001464
 800e494:	20000f8c 	.word	0x20000f8c
 800e498:	20000f88 	.word	0x20000f88
 800e49c:	20001470 	.word	0x20001470
 800e4a0:	2000146c 	.word	0x2000146c

0800e4a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800e558 <vTaskSwitchContext+0xb4>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800e55c <vTaskSwitchContext+0xb8>)
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4b8:	e047      	b.n	800e54a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e4ba:	4b28      	ldr	r3, [pc, #160]	@ (800e55c <vTaskSwitchContext+0xb8>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4c0:	4b27      	ldr	r3, [pc, #156]	@ (800e560 <vTaskSwitchContext+0xbc>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	e011      	b.n	800e4ec <vTaskSwitchContext+0x48>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10b      	bne.n	800e4e6 <vTaskSwitchContext+0x42>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	607b      	str	r3, [r7, #4]
}
 800e4e0:	bf00      	nop
 800e4e2:	bf00      	nop
 800e4e4:	e7fd      	b.n	800e4e2 <vTaskSwitchContext+0x3e>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	491d      	ldr	r1, [pc, #116]	@ (800e564 <vTaskSwitchContext+0xc0>)
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	440b      	add	r3, r1
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d0e3      	beq.n	800e4c8 <vTaskSwitchContext+0x24>
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4613      	mov	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4413      	add	r3, r2
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4a16      	ldr	r2, [pc, #88]	@ (800e564 <vTaskSwitchContext+0xc0>)
 800e50c:	4413      	add	r3, r2
 800e50e:	60bb      	str	r3, [r7, #8]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	685a      	ldr	r2, [r3, #4]
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	605a      	str	r2, [r3, #4]
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	3308      	adds	r3, #8
 800e522:	429a      	cmp	r2, r3
 800e524:	d104      	bne.n	800e530 <vTaskSwitchContext+0x8c>
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	605a      	str	r2, [r3, #4]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	4a0c      	ldr	r2, [pc, #48]	@ (800e568 <vTaskSwitchContext+0xc4>)
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	4a09      	ldr	r2, [pc, #36]	@ (800e560 <vTaskSwitchContext+0xbc>)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e540:	4b09      	ldr	r3, [pc, #36]	@ (800e568 <vTaskSwitchContext+0xc4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3354      	adds	r3, #84	@ 0x54
 800e546:	4a09      	ldr	r2, [pc, #36]	@ (800e56c <vTaskSwitchContext+0xc8>)
 800e548:	6013      	str	r3, [r2, #0]
}
 800e54a:	bf00      	nop
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	20001484 	.word	0x20001484
 800e55c:	20001470 	.word	0x20001470
 800e560:	20001464 	.word	0x20001464
 800e564:	20000f8c 	.word	0x20000f8c
 800e568:	20000f88 	.word	0x20000f88
 800e56c:	200003d4 	.word	0x200003d4

0800e570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10b      	bne.n	800e598 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60fb      	str	r3, [r7, #12]
}
 800e592:	bf00      	nop
 800e594:	bf00      	nop
 800e596:	e7fd      	b.n	800e594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e598:	4b07      	ldr	r3, [pc, #28]	@ (800e5b8 <vTaskPlaceOnEventList+0x48>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3318      	adds	r3, #24
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7fe f8da 	bl	800c75a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	6838      	ldr	r0, [r7, #0]
 800e5aa:	f000 fe4d 	bl	800f248 <prvAddCurrentTaskToDelayedList>
}
 800e5ae:	bf00      	nop
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20000f88 	.word	0x20000f88

0800e5bc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10b      	bne.n	800e5e6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	617b      	str	r3, [r7, #20]
}
 800e5e0:	bf00      	nop
 800e5e2:	bf00      	nop
 800e5e4:	e7fd      	b.n	800e5e2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e5e6:	4b12      	ldr	r3, [pc, #72]	@ (800e630 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10b      	bne.n	800e606 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	613b      	str	r3, [r7, #16]
}
 800e600:	bf00      	nop
 800e602:	bf00      	nop
 800e604:	e7fd      	b.n	800e602 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e606:	4b0b      	ldr	r3, [pc, #44]	@ (800e634 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e610:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e612:	4b08      	ldr	r3, [pc, #32]	@ (800e634 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3318      	adds	r3, #24
 800e618:	4619      	mov	r1, r3
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7fe f879 	bl	800c712 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e620:	2101      	movs	r1, #1
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fe10 	bl	800f248 <prvAddCurrentTaskToDelayedList>
}
 800e628:	bf00      	nop
 800e62a:	3718      	adds	r7, #24
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	20001484 	.word	0x20001484
 800e634:	20000f88 	.word	0x20000f88

0800e638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10b      	bne.n	800e662 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	617b      	str	r3, [r7, #20]
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	e7fd      	b.n	800e65e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e662:	4b0a      	ldr	r3, [pc, #40]	@ (800e68c <vTaskPlaceOnEventListRestricted+0x54>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3318      	adds	r3, #24
 800e668:	4619      	mov	r1, r3
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7fe f851 	bl	800c712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d002      	beq.n	800e67c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e676:	f04f 33ff 	mov.w	r3, #4294967295
 800e67a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e67c:	6879      	ldr	r1, [r7, #4]
 800e67e:	68b8      	ldr	r0, [r7, #8]
 800e680:	f000 fde2 	bl	800f248 <prvAddCurrentTaskToDelayedList>
	}
 800e684:	bf00      	nop
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20000f88 	.word	0x20000f88

0800e690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10b      	bne.n	800e6be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	60fb      	str	r3, [r7, #12]
}
 800e6b8:	bf00      	nop
 800e6ba:	bf00      	nop
 800e6bc:	e7fd      	b.n	800e6ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	3318      	adds	r3, #24
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe f882 	bl	800c7cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c8:	4b1d      	ldr	r3, [pc, #116]	@ (800e740 <xTaskRemoveFromEventList+0xb0>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d11d      	bne.n	800e70c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe f879 	bl	800c7cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6de:	4b19      	ldr	r3, [pc, #100]	@ (800e744 <xTaskRemoveFromEventList+0xb4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d903      	bls.n	800e6ee <xTaskRemoveFromEventList+0x5e>
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ea:	4a16      	ldr	r2, [pc, #88]	@ (800e744 <xTaskRemoveFromEventList+0xb4>)
 800e6ec:	6013      	str	r3, [r2, #0]
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4a13      	ldr	r2, [pc, #76]	@ (800e748 <xTaskRemoveFromEventList+0xb8>)
 800e6fc:	441a      	add	r2, r3
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	3304      	adds	r3, #4
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	f7fe f804 	bl	800c712 <vListInsertEnd>
 800e70a:	e005      	b.n	800e718 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3318      	adds	r3, #24
 800e710:	4619      	mov	r1, r3
 800e712:	480e      	ldr	r0, [pc, #56]	@ (800e74c <xTaskRemoveFromEventList+0xbc>)
 800e714:	f7fd fffd 	bl	800c712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e71c:	4b0c      	ldr	r3, [pc, #48]	@ (800e750 <xTaskRemoveFromEventList+0xc0>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e722:	429a      	cmp	r2, r3
 800e724:	d905      	bls.n	800e732 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e726:	2301      	movs	r3, #1
 800e728:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e72a:	4b0a      	ldr	r3, [pc, #40]	@ (800e754 <xTaskRemoveFromEventList+0xc4>)
 800e72c:	2201      	movs	r2, #1
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	e001      	b.n	800e736 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e736:	697b      	ldr	r3, [r7, #20]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	20001484 	.word	0x20001484
 800e744:	20001464 	.word	0x20001464
 800e748:	20000f8c 	.word	0x20000f8c
 800e74c:	2000141c 	.word	0x2000141c
 800e750:	20000f88 	.word	0x20000f88
 800e754:	20001470 	.word	0x20001470

0800e758 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e762:	4b2a      	ldr	r3, [pc, #168]	@ (800e80c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10b      	bne.n	800e782 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	613b      	str	r3, [r7, #16]
}
 800e77c:	bf00      	nop
 800e77e:	bf00      	nop
 800e780:	e7fd      	b.n	800e77e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d10b      	bne.n	800e7b0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	60fb      	str	r3, [r7, #12]
}
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	e7fd      	b.n	800e7ac <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7fe f80b 	bl	800c7cc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe f806 	bl	800c7cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c4:	4b12      	ldr	r3, [pc, #72]	@ (800e810 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d903      	bls.n	800e7d4 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d0:	4a0f      	ldr	r2, [pc, #60]	@ (800e810 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7d2:	6013      	str	r3, [r2, #0]
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7d8:	4613      	mov	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e814 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e7e2:	441a      	add	r2, r3
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f7fd ff91 	bl	800c712 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f4:	4b08      	ldr	r3, [pc, #32]	@ (800e818 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d902      	bls.n	800e804 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e7fe:	4b07      	ldr	r3, [pc, #28]	@ (800e81c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e800:	2201      	movs	r2, #1
 800e802:	601a      	str	r2, [r3, #0]
	}
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20001484 	.word	0x20001484
 800e810:	20001464 	.word	0x20001464
 800e814:	20000f8c 	.word	0x20000f8c
 800e818:	20000f88 	.word	0x20000f88
 800e81c:	20001470 	.word	0x20001470

0800e820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e828:	4b06      	ldr	r3, [pc, #24]	@ (800e844 <vTaskInternalSetTimeOutState+0x24>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e830:	4b05      	ldr	r3, [pc, #20]	@ (800e848 <vTaskInternalSetTimeOutState+0x28>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	605a      	str	r2, [r3, #4]
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	20001474 	.word	0x20001474
 800e848:	20001460 	.word	0x20001460

0800e84c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10b      	bne.n	800e874 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	613b      	str	r3, [r7, #16]
}
 800e86e:	bf00      	nop
 800e870:	bf00      	nop
 800e872:	e7fd      	b.n	800e870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10b      	bne.n	800e892 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	60fb      	str	r3, [r7, #12]
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	e7fd      	b.n	800e88e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e892:	f001 fa39 	bl	800fd08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e896:	4b1d      	ldr	r3, [pc, #116]	@ (800e90c <xTaskCheckForTimeOut+0xc0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ae:	d102      	bne.n	800e8b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	61fb      	str	r3, [r7, #28]
 800e8b4:	e023      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4b15      	ldr	r3, [pc, #84]	@ (800e910 <xTaskCheckForTimeOut+0xc4>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d007      	beq.n	800e8d2 <xTaskCheckForTimeOut+0x86>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d302      	bcc.n	800e8d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e015      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d20b      	bcs.n	800e8f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	1ad2      	subs	r2, r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ff99 	bl	800e820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	e004      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8fe:	f001 fa35 	bl	800fd6c <vPortExitCritical>

	return xReturn;
 800e902:	69fb      	ldr	r3, [r7, #28]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3720      	adds	r7, #32
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	20001460 	.word	0x20001460
 800e910:	20001474 	.word	0x20001474

0800e914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e918:	4b03      	ldr	r3, [pc, #12]	@ (800e928 <vTaskMissedYield+0x14>)
 800e91a:	2201      	movs	r2, #1
 800e91c:	601a      	str	r2, [r3, #0]
}
 800e91e:	bf00      	nop
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	20001470 	.word	0x20001470

0800e92c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e934:	f000 f852 	bl	800e9dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e938:	4b06      	ldr	r3, [pc, #24]	@ (800e954 <prvIdleTask+0x28>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d9f9      	bls.n	800e934 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e940:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <prvIdleTask+0x2c>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e950:	e7f0      	b.n	800e934 <prvIdleTask+0x8>
 800e952:	bf00      	nop
 800e954:	20000f8c 	.word	0x20000f8c
 800e958:	e000ed04 	.word	0xe000ed04

0800e95c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e962:	2300      	movs	r3, #0
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	e00c      	b.n	800e982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	4613      	mov	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	4413      	add	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4a12      	ldr	r2, [pc, #72]	@ (800e9bc <prvInitialiseTaskLists+0x60>)
 800e974:	4413      	add	r3, r2
 800e976:	4618      	mov	r0, r3
 800e978:	f7fd fe9e 	bl	800c6b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3301      	adds	r3, #1
 800e980:	607b      	str	r3, [r7, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b37      	cmp	r3, #55	@ 0x37
 800e986:	d9ef      	bls.n	800e968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e988:	480d      	ldr	r0, [pc, #52]	@ (800e9c0 <prvInitialiseTaskLists+0x64>)
 800e98a:	f7fd fe95 	bl	800c6b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e98e:	480d      	ldr	r0, [pc, #52]	@ (800e9c4 <prvInitialiseTaskLists+0x68>)
 800e990:	f7fd fe92 	bl	800c6b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e994:	480c      	ldr	r0, [pc, #48]	@ (800e9c8 <prvInitialiseTaskLists+0x6c>)
 800e996:	f7fd fe8f 	bl	800c6b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e99a:	480c      	ldr	r0, [pc, #48]	@ (800e9cc <prvInitialiseTaskLists+0x70>)
 800e99c:	f7fd fe8c 	bl	800c6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9a0:	480b      	ldr	r0, [pc, #44]	@ (800e9d0 <prvInitialiseTaskLists+0x74>)
 800e9a2:	f7fd fe89 	bl	800c6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d4 <prvInitialiseTaskLists+0x78>)
 800e9a8:	4a05      	ldr	r2, [pc, #20]	@ (800e9c0 <prvInitialiseTaskLists+0x64>)
 800e9aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d8 <prvInitialiseTaskLists+0x7c>)
 800e9ae:	4a05      	ldr	r2, [pc, #20]	@ (800e9c4 <prvInitialiseTaskLists+0x68>)
 800e9b0:	601a      	str	r2, [r3, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000f8c 	.word	0x20000f8c
 800e9c0:	200013ec 	.word	0x200013ec
 800e9c4:	20001400 	.word	0x20001400
 800e9c8:	2000141c 	.word	0x2000141c
 800e9cc:	20001430 	.word	0x20001430
 800e9d0:	20001448 	.word	0x20001448
 800e9d4:	20001414 	.word	0x20001414
 800e9d8:	20001418 	.word	0x20001418

0800e9dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9e2:	e019      	b.n	800ea18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9e4:	f001 f990 	bl	800fd08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9e8:	4b10      	ldr	r3, [pc, #64]	@ (800ea2c <prvCheckTasksWaitingTermination+0x50>)
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fd fee9 	bl	800c7cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ea30 <prvCheckTasksWaitingTermination+0x54>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	4a0b      	ldr	r2, [pc, #44]	@ (800ea30 <prvCheckTasksWaitingTermination+0x54>)
 800ea02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea04:	4b0b      	ldr	r3, [pc, #44]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea0e:	f001 f9ad 	bl	800fd6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f8ae 	bl	800eb74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea18:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e1      	bne.n	800e9e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea20:	bf00      	nop
 800ea22:	bf00      	nop
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20001430 	.word	0x20001430
 800ea30:	2000145c 	.word	0x2000145c
 800ea34:	20001444 	.word	0x20001444

0800ea38 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <vTaskGetInfo+0x1a>
 800ea4c:	4b2c      	ldr	r3, [pc, #176]	@ (800eb00 <vTaskGetInfo+0xc8>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	e000      	b.n	800ea54 <vTaskGetInfo+0x1c>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	697a      	ldr	r2, [r7, #20]
 800ea5a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800ea8c:	78fb      	ldrb	r3, [r7, #3]
 800ea8e:	2b05      	cmp	r3, #5
 800ea90:	d01a      	beq.n	800eac8 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800ea92:	4b1b      	ldr	r3, [pc, #108]	@ (800eb00 <vTaskGetInfo+0xc8>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d103      	bne.n	800eaa4 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	731a      	strb	r2, [r3, #12]
 800eaa2:	e018      	b.n	800ead6 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	78fa      	ldrb	r2, [r7, #3]
 800eaa8:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eaaa:	78fb      	ldrb	r3, [r7, #3]
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d112      	bne.n	800ead6 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800eab0:	f7ff faae 	bl	800e010 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	2202      	movs	r2, #2
 800eac0:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eac2:	f7ff fab3 	bl	800e02c <xTaskResumeAll>
 800eac6:	e006      	b.n	800ead6 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eac8:	6978      	ldr	r0, [r7, #20]
 800eaca:	f7ff f823 	bl	800db14 <eTaskGetState>
 800eace:	4603      	mov	r3, r0
 800ead0:	461a      	mov	r2, r3
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d009      	beq.n	800eaf0 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eae0:	4618      	mov	r0, r3
 800eae2:	f000 f80f 	bl	800eb04 <prvTaskCheckFreeStackSpace>
 800eae6:	4603      	mov	r3, r0
 800eae8:	461a      	mov	r2, r3
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eaee:	e002      	b.n	800eaf6 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	841a      	strh	r2, [r3, #32]
	}
 800eaf6:	bf00      	nop
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20000f88 	.word	0x20000f88

0800eb04 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb10:	e005      	b.n	800eb1e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	3301      	adds	r3, #1
 800eb16:	607b      	str	r3, [r7, #4]
			ulCount++;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	2ba5      	cmp	r3, #165	@ 0xa5
 800eb24:	d0f5      	beq.n	800eb12 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	089b      	lsrs	r3, r3, #2
 800eb2a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	b29b      	uxth	r3, r3
	}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d102      	bne.n	800eb50 <uxTaskGetStackHighWaterMark+0x14>
 800eb4a:	4b09      	ldr	r3, [pc, #36]	@ (800eb70 <uxTaskGetStackHighWaterMark+0x34>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	e000      	b.n	800eb52 <uxTaskGetStackHighWaterMark+0x16>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb58:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800eb5a:	6938      	ldr	r0, [r7, #16]
 800eb5c:	f7ff ffd2 	bl	800eb04 <prvTaskCheckFreeStackSpace>
 800eb60:	4603      	mov	r3, r0
 800eb62:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800eb64:	68fb      	ldr	r3, [r7, #12]
	}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3718      	adds	r7, #24
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20000f88 	.word	0x20000f88

0800eb74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3354      	adds	r3, #84	@ 0x54
 800eb80:	4618      	mov	r0, r3
 800eb82:	f003 fc3d 	bl	8012400 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d108      	bne.n	800eba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb94:	4618      	mov	r0, r3
 800eb96:	f001 faa7 	bl	80100e8 <vPortFree>
				vPortFree( pxTCB );
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f001 faa4 	bl	80100e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eba0:	e019      	b.n	800ebd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d103      	bne.n	800ebb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f001 fa9b 	bl	80100e8 <vPortFree>
	}
 800ebb2:	e010      	b.n	800ebd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d00b      	beq.n	800ebd6 <prvDeleteTCB+0x62>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	60fb      	str	r3, [r7, #12]
}
 800ebd0:	bf00      	nop
 800ebd2:	bf00      	nop
 800ebd4:	e7fd      	b.n	800ebd2 <prvDeleteTCB+0x5e>
	}
 800ebd6:	bf00      	nop
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	@ (800ec18 <prvResetNextTaskUnblockTime+0x38>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ec1c <prvResetNextTaskUnblockTime+0x3c>)
 800ebf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebf8:	e008      	b.n	800ec0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfa:	4b07      	ldr	r3, [pc, #28]	@ (800ec18 <prvResetNextTaskUnblockTime+0x38>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a04      	ldr	r2, [pc, #16]	@ (800ec1c <prvResetNextTaskUnblockTime+0x3c>)
 800ec0a:	6013      	str	r3, [r2, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	20001414 	.word	0x20001414
 800ec1c:	2000147c 	.word	0x2000147c

0800ec20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec26:	4b0b      	ldr	r3, [pc, #44]	@ (800ec54 <xTaskGetSchedulerState+0x34>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d102      	bne.n	800ec34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	607b      	str	r3, [r7, #4]
 800ec32:	e008      	b.n	800ec46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec34:	4b08      	ldr	r3, [pc, #32]	@ (800ec58 <xTaskGetSchedulerState+0x38>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d102      	bne.n	800ec42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	607b      	str	r3, [r7, #4]
 800ec40:	e001      	b.n	800ec46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec42:	2300      	movs	r3, #0
 800ec44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec46:	687b      	ldr	r3, [r7, #4]
	}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	20001468 	.word	0x20001468
 800ec58:	20001484 	.word	0x20001484

0800ec5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d051      	beq.n	800ed16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec76:	4b2a      	ldr	r3, [pc, #168]	@ (800ed20 <xTaskPriorityInherit+0xc4>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d241      	bcs.n	800ed04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	db06      	blt.n	800ec96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec88:	4b25      	ldr	r3, [pc, #148]	@ (800ed20 <xTaskPriorityInherit+0xc4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6959      	ldr	r1, [r3, #20]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4a1f      	ldr	r2, [pc, #124]	@ (800ed24 <xTaskPriorityInherit+0xc8>)
 800eca8:	4413      	add	r3, r2
 800ecaa:	4299      	cmp	r1, r3
 800ecac:	d122      	bne.n	800ecf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fd fd8a 	bl	800c7cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecb8:	4b19      	ldr	r3, [pc, #100]	@ (800ed20 <xTaskPriorityInherit+0xc4>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc6:	4b18      	ldr	r3, [pc, #96]	@ (800ed28 <xTaskPriorityInherit+0xcc>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d903      	bls.n	800ecd6 <xTaskPriorityInherit+0x7a>
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd2:	4a15      	ldr	r2, [pc, #84]	@ (800ed28 <xTaskPriorityInherit+0xcc>)
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecda:	4613      	mov	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4a10      	ldr	r2, [pc, #64]	@ (800ed24 <xTaskPriorityInherit+0xc8>)
 800ece4:	441a      	add	r2, r3
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7fd fd10 	bl	800c712 <vListInsertEnd>
 800ecf2:	e004      	b.n	800ecfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ed20 <xTaskPriorityInherit+0xc4>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	60fb      	str	r3, [r7, #12]
 800ed02:	e008      	b.n	800ed16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed08:	4b05      	ldr	r3, [pc, #20]	@ (800ed20 <xTaskPriorityInherit+0xc4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d201      	bcs.n	800ed16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed12:	2301      	movs	r3, #1
 800ed14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed16:	68fb      	ldr	r3, [r7, #12]
	}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20000f88 	.word	0x20000f88
 800ed24:	20000f8c 	.word	0x20000f8c
 800ed28:	20001464 	.word	0x20001464

0800ed2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d058      	beq.n	800edf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed42:	4b2f      	ldr	r3, [pc, #188]	@ (800ee00 <xTaskPriorityDisinherit+0xd4>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d00b      	beq.n	800ed64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	60fb      	str	r3, [r7, #12]
}
 800ed5e:	bf00      	nop
 800ed60:	bf00      	nop
 800ed62:	e7fd      	b.n	800ed60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10b      	bne.n	800ed84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	60bb      	str	r3, [r7, #8]
}
 800ed7e:	bf00      	nop
 800ed80:	bf00      	nop
 800ed82:	e7fd      	b.n	800ed80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed88:	1e5a      	subs	r2, r3, #1
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d02c      	beq.n	800edf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d128      	bne.n	800edf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	3304      	adds	r3, #4
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd fd10 	bl	800c7cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ee04 <xTaskPriorityDisinherit+0xd8>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d903      	bls.n	800edd4 <xTaskPriorityDisinherit+0xa8>
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd0:	4a0c      	ldr	r2, [pc, #48]	@ (800ee04 <xTaskPriorityDisinherit+0xd8>)
 800edd2:	6013      	str	r3, [r2, #0]
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edd8:	4613      	mov	r3, r2
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	4a09      	ldr	r2, [pc, #36]	@ (800ee08 <xTaskPriorityDisinherit+0xdc>)
 800ede2:	441a      	add	r2, r3
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	3304      	adds	r3, #4
 800ede8:	4619      	mov	r1, r3
 800edea:	4610      	mov	r0, r2
 800edec:	f7fd fc91 	bl	800c712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edf0:	2301      	movs	r3, #1
 800edf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edf4:	697b      	ldr	r3, [r7, #20]
	}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20000f88 	.word	0x20000f88
 800ee04:	20001464 	.word	0x20001464
 800ee08:	20000f8c 	.word	0x20000f8c

0800ee0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b088      	sub	sp, #32
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d06c      	beq.n	800eefe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10b      	bne.n	800ee44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	60fb      	str	r3, [r7, #12]
}
 800ee3e:	bf00      	nop
 800ee40:	bf00      	nop
 800ee42:	e7fd      	b.n	800ee40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee48:	683a      	ldr	r2, [r7, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d902      	bls.n	800ee54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	61fb      	str	r3, [r7, #28]
 800ee52:	e002      	b.n	800ee5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5e:	69fa      	ldr	r2, [r7, #28]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d04c      	beq.n	800eefe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d147      	bne.n	800eefe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee6e:	4b26      	ldr	r3, [pc, #152]	@ (800ef08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d10b      	bne.n	800ee90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	60bb      	str	r3, [r7, #8]
}
 800ee8a:	bf00      	nop
 800ee8c:	bf00      	nop
 800ee8e:	e7fd      	b.n	800ee8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	69fa      	ldr	r2, [r7, #28]
 800ee9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	699b      	ldr	r3, [r3, #24]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	db04      	blt.n	800eeae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	6959      	ldr	r1, [r3, #20]
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4a13      	ldr	r2, [pc, #76]	@ (800ef0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eebe:	4413      	add	r3, r2
 800eec0:	4299      	cmp	r1, r3
 800eec2:	d11c      	bne.n	800eefe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd fc7f 	bl	800c7cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eed2:	4b0f      	ldr	r3, [pc, #60]	@ (800ef10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d903      	bls.n	800eee2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eede:	4a0c      	ldr	r2, [pc, #48]	@ (800ef10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eee0:	6013      	str	r3, [r2, #0]
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4a07      	ldr	r2, [pc, #28]	@ (800ef0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eef0:	441a      	add	r2, r3
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	3304      	adds	r3, #4
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7fd fc0a 	bl	800c712 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eefe:	bf00      	nop
 800ef00:	3720      	adds	r7, #32
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20000f88 	.word	0x20000f88
 800ef0c:	20000f8c 	.word	0x20000f8c
 800ef10:	20001464 	.word	0x20001464

0800ef14 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef1a:	4b09      	ldr	r3, [pc, #36]	@ (800ef40 <uxTaskResetEventItemValue+0x2c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef22:	4b07      	ldr	r3, [pc, #28]	@ (800ef40 <uxTaskResetEventItemValue+0x2c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef28:	4b05      	ldr	r3, [pc, #20]	@ (800ef40 <uxTaskResetEventItemValue+0x2c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ef30:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef32:	687b      	ldr	r3, [r7, #4]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr
 800ef40:	20000f88 	.word	0x20000f88

0800ef44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef44:	b480      	push	{r7}
 800ef46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef48:	4b07      	ldr	r3, [pc, #28]	@ (800ef68 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d004      	beq.n	800ef5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef50:	4b05      	ldr	r3, [pc, #20]	@ (800ef68 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef56:	3201      	adds	r2, #1
 800ef58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef5a:	4b03      	ldr	r3, [pc, #12]	@ (800ef68 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
	}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20000f88 	.word	0x20000f88

0800ef6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef76:	f000 fec7 	bl	800fd08 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef7a:	4b20      	ldr	r3, [pc, #128]	@ (800effc <ulTaskNotifyTake+0x90>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d113      	bne.n	800efae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ef86:	4b1d      	ldr	r3, [pc, #116]	@ (800effc <ulTaskNotifyTake+0x90>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00b      	beq.n	800efae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef96:	2101      	movs	r1, #1
 800ef98:	6838      	ldr	r0, [r7, #0]
 800ef9a:	f000 f955 	bl	800f248 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ef9e:	4b18      	ldr	r3, [pc, #96]	@ (800f000 <ulTaskNotifyTake+0x94>)
 800efa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	f3bf 8f4f 	dsb	sy
 800efaa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efae:	f000 fedd 	bl	800fd6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efb2:	f000 fea9 	bl	800fd08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800efb6:	4b11      	ldr	r3, [pc, #68]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efbe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00e      	beq.n	800efe4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d005      	beq.n	800efd8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efcc:	4b0b      	ldr	r3, [pc, #44]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800efd6:	e005      	b.n	800efe4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800efd8:	4b08      	ldr	r3, [pc, #32]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	3a01      	subs	r2, #1
 800efe0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efe4:	4b05      	ldr	r3, [pc, #20]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800efee:	f000 febd 	bl	800fd6c <vPortExitCritical>

		return ulReturn;
 800eff2:	68fb      	ldr	r3, [r7, #12]
	}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20000f88 	.word	0x20000f88
 800f000:	e000ed04 	.word	0xe000ed04

0800f004 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f012:	f000 fe79 	bl	800fd08 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f016:	4b29      	ldr	r3, [pc, #164]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b02      	cmp	r3, #2
 800f022:	d01c      	beq.n	800f05e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f024:	4b25      	ldr	r3, [pc, #148]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	43d2      	mvns	r2, r2
 800f030:	400a      	ands	r2, r1
 800f032:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f036:	4b21      	ldr	r3, [pc, #132]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00b      	beq.n	800f05e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f046:	2101      	movs	r1, #1
 800f048:	6838      	ldr	r0, [r7, #0]
 800f04a:	f000 f8fd 	bl	800f248 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f04e:	4b1c      	ldr	r3, [pc, #112]	@ (800f0c0 <xTaskNotifyWait+0xbc>)
 800f050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f05e:	f000 fe85 	bl	800fd6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f062:	f000 fe51 	bl	800fd08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d005      	beq.n	800f078 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f06c:	4b13      	ldr	r3, [pc, #76]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f078:	4b10      	ldr	r3, [pc, #64]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b02      	cmp	r3, #2
 800f084:	d002      	beq.n	800f08c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	e00a      	b.n	800f0a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f08c:	4b0b      	ldr	r3, [pc, #44]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	43d2      	mvns	r2, r2
 800f098:	400a      	ands	r2, r1
 800f09a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0a2:	4b06      	ldr	r3, [pc, #24]	@ (800f0bc <xTaskNotifyWait+0xb8>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f0ac:	f000 fe5e 	bl	800fd6c <vPortExitCritical>

		return xReturn;
 800f0b0:	697b      	ldr	r3, [r7, #20]
	}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20000f88 	.word	0x20000f88
 800f0c0:	e000ed04 	.word	0xe000ed04

0800f0c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08a      	sub	sp, #40	@ 0x28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	603b      	str	r3, [r7, #0]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10b      	bne.n	800f0f6 <xTaskGenericNotify+0x32>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	61bb      	str	r3, [r7, #24]
}
 800f0f0:	bf00      	nop
 800f0f2:	bf00      	nop
 800f0f4:	e7fd      	b.n	800f0f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f0fa:	f000 fe05 	bl	800fd08 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d004      	beq.n	800f10e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f114:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	2202      	movs	r2, #2
 800f11a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b04      	cmp	r3, #4
 800f122:	d82e      	bhi.n	800f182 <xTaskGenericNotify+0xbe>
 800f124:	a201      	add	r2, pc, #4	@ (adr r2, 800f12c <xTaskGenericNotify+0x68>)
 800f126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12a:	bf00      	nop
 800f12c:	0800f1a7 	.word	0x0800f1a7
 800f130:	0800f141 	.word	0x0800f141
 800f134:	0800f153 	.word	0x0800f153
 800f138:	0800f163 	.word	0x0800f163
 800f13c:	0800f16d 	.word	0x0800f16d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	431a      	orrs	r2, r3
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f150:	e02c      	b.n	800f1ac <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	6a3b      	ldr	r3, [r7, #32]
 800f15c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f160:	e024      	b.n	800f1ac <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f16a:	e01f      	b.n	800f1ac <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f16c:	7ffb      	ldrb	r3, [r7, #31]
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d004      	beq.n	800f17c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f17a:	e017      	b.n	800f1ac <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f180:	e014      	b.n	800f1ac <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18c:	d00d      	beq.n	800f1aa <xTaskGenericNotify+0xe6>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	617b      	str	r3, [r7, #20]
}
 800f1a0:	bf00      	nop
 800f1a2:	bf00      	nop
 800f1a4:	e7fd      	b.n	800f1a2 <xTaskGenericNotify+0xde>
					break;
 800f1a6:	bf00      	nop
 800f1a8:	e000      	b.n	800f1ac <xTaskGenericNotify+0xe8>

					break;
 800f1aa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f1ac:	7ffb      	ldrb	r3, [r7, #31]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d13b      	bne.n	800f22a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	3304      	adds	r3, #4
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fd fb08 	bl	800c7cc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f238 <xTaskGenericNotify+0x174>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d903      	bls.n	800f1d0 <xTaskGenericNotify+0x10c>
 800f1c8:	6a3b      	ldr	r3, [r7, #32]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	4a1a      	ldr	r2, [pc, #104]	@ (800f238 <xTaskGenericNotify+0x174>)
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4a17      	ldr	r2, [pc, #92]	@ (800f23c <xTaskGenericNotify+0x178>)
 800f1de:	441a      	add	r2, r3
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7fd fa93 	bl	800c712 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <xTaskGenericNotify+0x148>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	613b      	str	r3, [r7, #16]
}
 800f206:	bf00      	nop
 800f208:	bf00      	nop
 800f20a:	e7fd      	b.n	800f208 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f210:	4b0b      	ldr	r3, [pc, #44]	@ (800f240 <xTaskGenericNotify+0x17c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f216:	429a      	cmp	r2, r3
 800f218:	d907      	bls.n	800f22a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f21a:	4b0a      	ldr	r3, [pc, #40]	@ (800f244 <xTaskGenericNotify+0x180>)
 800f21c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f22a:	f000 fd9f 	bl	800fd6c <vPortExitCritical>

		return xReturn;
 800f22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f230:	4618      	mov	r0, r3
 800f232:	3728      	adds	r7, #40	@ 0x28
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	20001464 	.word	0x20001464
 800f23c:	20000f8c 	.word	0x20000f8c
 800f240:	20000f88 	.word	0x20000f88
 800f244:	e000ed04 	.word	0xe000ed04

0800f248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f252:	4b21      	ldr	r3, [pc, #132]	@ (800f2d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f258:	4b20      	ldr	r3, [pc, #128]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3304      	adds	r3, #4
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fd fab4 	bl	800c7cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26a:	d10a      	bne.n	800f282 <prvAddCurrentTaskToDelayedList+0x3a>
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d007      	beq.n	800f282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f272:	4b1a      	ldr	r3, [pc, #104]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3304      	adds	r3, #4
 800f278:	4619      	mov	r1, r3
 800f27a:	4819      	ldr	r0, [pc, #100]	@ (800f2e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f27c:	f7fd fa49 	bl	800c712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f280:	e026      	b.n	800f2d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4413      	add	r3, r2
 800f288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f28a:	4b14      	ldr	r3, [pc, #80]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	429a      	cmp	r2, r3
 800f298:	d209      	bcs.n	800f2ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f29a:	4b12      	ldr	r3, [pc, #72]	@ (800f2e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4b0f      	ldr	r3, [pc, #60]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	f7fd fa57 	bl	800c75a <vListInsert>
}
 800f2ac:	e010      	b.n	800f2d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3304      	adds	r3, #4
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	f7fd fa4d 	bl	800c75a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d202      	bcs.n	800f2d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2ca:	4a08      	ldr	r2, [pc, #32]	@ (800f2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	6013      	str	r3, [r2, #0]
}
 800f2d0:	bf00      	nop
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	20001460 	.word	0x20001460
 800f2dc:	20000f88 	.word	0x20000f88
 800f2e0:	20001448 	.word	0x20001448
 800f2e4:	20001418 	.word	0x20001418
 800f2e8:	20001414 	.word	0x20001414
 800f2ec:	2000147c 	.word	0x2000147c

0800f2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08a      	sub	sp, #40	@ 0x28
 800f2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2fa:	f000 fb71 	bl	800f9e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f374 <xTimerCreateTimerTask+0x84>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d021      	beq.n	800f34a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f306:	2300      	movs	r3, #0
 800f308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f30e:	1d3a      	adds	r2, r7, #4
 800f310:	f107 0108 	add.w	r1, r7, #8
 800f314:	f107 030c 	add.w	r3, r7, #12
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fc fff7 	bl	800c30c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f31e:	6879      	ldr	r1, [r7, #4]
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	9202      	str	r2, [sp, #8]
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	2302      	movs	r3, #2
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	2300      	movs	r3, #0
 800f32e:	460a      	mov	r2, r1
 800f330:	4911      	ldr	r1, [pc, #68]	@ (800f378 <xTimerCreateTimerTask+0x88>)
 800f332:	4812      	ldr	r0, [pc, #72]	@ (800f37c <xTimerCreateTimerTask+0x8c>)
 800f334:	f7fe f986 	bl	800d644 <xTaskCreateStatic>
 800f338:	4603      	mov	r3, r0
 800f33a:	4a11      	ldr	r2, [pc, #68]	@ (800f380 <xTimerCreateTimerTask+0x90>)
 800f33c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f33e:	4b10      	ldr	r3, [pc, #64]	@ (800f380 <xTimerCreateTimerTask+0x90>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d001      	beq.n	800f34a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f346:	2301      	movs	r3, #1
 800f348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10b      	bne.n	800f368 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	613b      	str	r3, [r7, #16]
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f368:	697b      	ldr	r3, [r7, #20]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	200014b8 	.word	0x200014b8
 800f378:	080156fc 	.word	0x080156fc
 800f37c:	0800f579 	.word	0x0800f579
 800f380:	200014bc 	.word	0x200014bc

0800f384 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f384:	b580      	push	{r7, lr}
 800f386:	b088      	sub	sp, #32
 800f388:	af02      	add	r7, sp, #8
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f392:	202c      	movs	r0, #44	@ 0x2c
 800f394:	f000 fdda 	bl	800ff4c <pvPortMalloc>
 800f398:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00d      	beq.n	800f3bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	68b9      	ldr	r1, [r7, #8]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f000 f805 	bl	800f3c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3bc:	697b      	ldr	r3, [r7, #20]
	}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3718      	adds	r7, #24
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b086      	sub	sp, #24
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	60b9      	str	r1, [r7, #8]
 800f3d0:	607a      	str	r2, [r7, #4]
 800f3d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10b      	bne.n	800f3f2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	617b      	str	r3, [r7, #20]
}
 800f3ec:	bf00      	nop
 800f3ee:	bf00      	nop
 800f3f0:	e7fd      	b.n	800f3ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d01e      	beq.n	800f436 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3f8:	f000 faf2 	bl	800f9e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f404:	68ba      	ldr	r2, [r7, #8]
 800f406:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f410:	6a3a      	ldr	r2, [r7, #32]
 800f412:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f416:	3304      	adds	r3, #4
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fd f96d 	bl	800c6f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d008      	beq.n	800f436 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f42a:	f043 0304 	orr.w	r3, r3, #4
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f436:	bf00      	nop
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
	...

0800f440 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	@ 0x28
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f44e:	2300      	movs	r3, #0
 800f450:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10b      	bne.n	800f470 <xTimerGenericCommand+0x30>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	623b      	str	r3, [r7, #32]
}
 800f46a:	bf00      	nop
 800f46c:	bf00      	nop
 800f46e:	e7fd      	b.n	800f46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f470:	4b19      	ldr	r3, [pc, #100]	@ (800f4d8 <xTimerGenericCommand+0x98>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d02a      	beq.n	800f4ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	2b05      	cmp	r3, #5
 800f488:	dc18      	bgt.n	800f4bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f48a:	f7ff fbc9 	bl	800ec20 <xTaskGetSchedulerState>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b02      	cmp	r3, #2
 800f492:	d109      	bne.n	800f4a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f494:	4b10      	ldr	r3, [pc, #64]	@ (800f4d8 <xTimerGenericCommand+0x98>)
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	f107 0110 	add.w	r1, r7, #16
 800f49c:	2300      	movs	r3, #0
 800f49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4a0:	f7fd fb36 	bl	800cb10 <xQueueGenericSend>
 800f4a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4a6:	e012      	b.n	800f4ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d8 <xTimerGenericCommand+0x98>)
 800f4aa:	6818      	ldr	r0, [r3, #0]
 800f4ac:	f107 0110 	add.w	r1, r7, #16
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f7fd fb2c 	bl	800cb10 <xQueueGenericSend>
 800f4b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4ba:	e008      	b.n	800f4ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4bc:	4b06      	ldr	r3, [pc, #24]	@ (800f4d8 <xTimerGenericCommand+0x98>)
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	f107 0110 	add.w	r1, r7, #16
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	f7fd fc24 	bl	800cd14 <xQueueGenericSendFromISR>
 800f4cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3728      	adds	r7, #40	@ 0x28
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200014b8 	.word	0x200014b8

0800f4dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af02      	add	r7, sp, #8
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4e6:	4b23      	ldr	r3, [pc, #140]	@ (800f574 <prvProcessExpiredTimer+0x98>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fd f969 	bl	800c7cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f500:	f003 0304 	and.w	r3, r3, #4
 800f504:	2b00      	cmp	r3, #0
 800f506:	d023      	beq.n	800f550 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	699a      	ldr	r2, [r3, #24]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	18d1      	adds	r1, r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	6978      	ldr	r0, [r7, #20]
 800f516:	f000 f8d5 	bl	800f6c4 <prvInsertTimerInActiveList>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d020      	beq.n	800f562 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f520:	2300      	movs	r3, #0
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	2300      	movs	r3, #0
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	2100      	movs	r1, #0
 800f52a:	6978      	ldr	r0, [r7, #20]
 800f52c:	f7ff ff88 	bl	800f440 <xTimerGenericCommand>
 800f530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d114      	bne.n	800f562 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53c:	f383 8811 	msr	BASEPRI, r3
 800f540:	f3bf 8f6f 	isb	sy
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	60fb      	str	r3, [r7, #12]
}
 800f54a:	bf00      	nop
 800f54c:	bf00      	nop
 800f54e:	e7fd      	b.n	800f54c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f556:	f023 0301 	bic.w	r3, r3, #1
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	6a1b      	ldr	r3, [r3, #32]
 800f566:	6978      	ldr	r0, [r7, #20]
 800f568:	4798      	blx	r3
}
 800f56a:	bf00      	nop
 800f56c:	3718      	adds	r7, #24
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	200014b0 	.word	0x200014b0

0800f578 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f580:	f107 0308 	add.w	r3, r7, #8
 800f584:	4618      	mov	r0, r3
 800f586:	f000 f859 	bl	800f63c <prvGetNextExpireTime>
 800f58a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	4619      	mov	r1, r3
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 f805 	bl	800f5a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f596:	f000 f8d7 	bl	800f748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f59a:	bf00      	nop
 800f59c:	e7f0      	b.n	800f580 <prvTimerTask+0x8>
	...

0800f5a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5aa:	f7fe fd31 	bl	800e010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5ae:	f107 0308 	add.w	r3, r7, #8
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f000 f866 	bl	800f684 <prvSampleTimeNow>
 800f5b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d130      	bne.n	800f622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10a      	bne.n	800f5dc <prvProcessTimerOrBlockTask+0x3c>
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d806      	bhi.n	800f5dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5ce:	f7fe fd2d 	bl	800e02c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5d2:	68f9      	ldr	r1, [r7, #12]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7ff ff81 	bl	800f4dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5da:	e024      	b.n	800f626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d008      	beq.n	800f5f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5e2:	4b13      	ldr	r3, [pc, #76]	@ (800f630 <prvProcessTimerOrBlockTask+0x90>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <prvProcessTimerOrBlockTask+0x50>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e000      	b.n	800f5f2 <prvProcessTimerOrBlockTask+0x52>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f634 <prvProcessTimerOrBlockTask+0x94>)
 800f5f6:	6818      	ldr	r0, [r3, #0]
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	4619      	mov	r1, r3
 800f602:	f7fd ffeb 	bl	800d5dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f606:	f7fe fd11 	bl	800e02c <xTaskResumeAll>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d10a      	bne.n	800f626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f610:	4b09      	ldr	r3, [pc, #36]	@ (800f638 <prvProcessTimerOrBlockTask+0x98>)
 800f612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	f3bf 8f6f 	isb	sy
}
 800f620:	e001      	b.n	800f626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f622:	f7fe fd03 	bl	800e02c <xTaskResumeAll>
}
 800f626:	bf00      	nop
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	200014b4 	.word	0x200014b4
 800f634:	200014b8 	.word	0x200014b8
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f644:	4b0e      	ldr	r3, [pc, #56]	@ (800f680 <prvGetNextExpireTime+0x44>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <prvGetNextExpireTime+0x16>
 800f64e:	2201      	movs	r2, #1
 800f650:	e000      	b.n	800f654 <prvGetNextExpireTime+0x18>
 800f652:	2200      	movs	r2, #0
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d105      	bne.n	800f66c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f660:	4b07      	ldr	r3, [pc, #28]	@ (800f680 <prvGetNextExpireTime+0x44>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	60fb      	str	r3, [r7, #12]
 800f66a:	e001      	b.n	800f670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f66c:	2300      	movs	r3, #0
 800f66e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f670:	68fb      	ldr	r3, [r7, #12]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	200014b0 	.word	0x200014b0

0800f684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f68c:	f7fe fd6c 	bl	800e168 <xTaskGetTickCount>
 800f690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f692:	4b0b      	ldr	r3, [pc, #44]	@ (800f6c0 <prvSampleTimeNow+0x3c>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d205      	bcs.n	800f6a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f69c:	f000 f93a 	bl	800f914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	e002      	b.n	800f6ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6ae:	4a04      	ldr	r2, [pc, #16]	@ (800f6c0 <prvSampleTimeNow+0x3c>)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	200014c0 	.word	0x200014c0

0800f6c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d812      	bhi.n	800f710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	1ad2      	subs	r2, r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	699b      	ldr	r3, [r3, #24]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d302      	bcc.n	800f6fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	e01b      	b.n	800f736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6fe:	4b10      	ldr	r3, [pc, #64]	@ (800f740 <prvInsertTimerInActiveList+0x7c>)
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3304      	adds	r3, #4
 800f706:	4619      	mov	r1, r3
 800f708:	4610      	mov	r0, r2
 800f70a:	f7fd f826 	bl	800c75a <vListInsert>
 800f70e:	e012      	b.n	800f736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d206      	bcs.n	800f726 <prvInsertTimerInActiveList+0x62>
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d302      	bcc.n	800f726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f720:	2301      	movs	r3, #1
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	e007      	b.n	800f736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f726:	4b07      	ldr	r3, [pc, #28]	@ (800f744 <prvInsertTimerInActiveList+0x80>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3304      	adds	r3, #4
 800f72e:	4619      	mov	r1, r3
 800f730:	4610      	mov	r0, r2
 800f732:	f7fd f812 	bl	800c75a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f736:	697b      	ldr	r3, [r7, #20]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	200014b4 	.word	0x200014b4
 800f744:	200014b0 	.word	0x200014b0

0800f748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08e      	sub	sp, #56	@ 0x38
 800f74c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f74e:	e0ce      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2b00      	cmp	r3, #0
 800f754:	da19      	bge.n	800f78a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f756:	1d3b      	adds	r3, r7, #4
 800f758:	3304      	adds	r3, #4
 800f75a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d10b      	bne.n	800f77a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f766:	f383 8811 	msr	BASEPRI, r3
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	61fb      	str	r3, [r7, #28]
}
 800f774:	bf00      	nop
 800f776:	bf00      	nop
 800f778:	e7fd      	b.n	800f776 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f780:	6850      	ldr	r0, [r2, #4]
 800f782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f784:	6892      	ldr	r2, [r2, #8]
 800f786:	4611      	mov	r1, r2
 800f788:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f2c0 80ae 	blt.w	800f8ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f798:	695b      	ldr	r3, [r3, #20]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d004      	beq.n	800f7a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fd f812 	bl	800c7cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7a8:	463b      	mov	r3, r7
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7ff ff6a 	bl	800f684 <prvSampleTimeNow>
 800f7b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b09      	cmp	r3, #9
 800f7b6:	f200 8097 	bhi.w	800f8e8 <prvProcessReceivedCommands+0x1a0>
 800f7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c0 <prvProcessReceivedCommands+0x78>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7e9 	.word	0x0800f7e9
 800f7c4:	0800f7e9 	.word	0x0800f7e9
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f85f 	.word	0x0800f85f
 800f7d0:	0800f873 	.word	0x0800f873
 800f7d4:	0800f8bf 	.word	0x0800f8bf
 800f7d8:	0800f7e9 	.word	0x0800f7e9
 800f7dc:	0800f7e9 	.word	0x0800f7e9
 800f7e0:	0800f85f 	.word	0x0800f85f
 800f7e4:	0800f873 	.word	0x0800f873
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7ee:	f043 0301 	orr.w	r3, r3, #1
 800f7f2:	b2da      	uxtb	r2, r3
 800f7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	18d1      	adds	r1, r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f808:	f7ff ff5c 	bl	800f6c4 <prvInsertTimerInActiveList>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d06c      	beq.n	800f8ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d061      	beq.n	800f8ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	441a      	add	r2, r3
 800f830:	2300      	movs	r3, #0
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	2100      	movs	r1, #0
 800f838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f83a:	f7ff fe01 	bl	800f440 <xTimerGenericCommand>
 800f83e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d152      	bne.n	800f8ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84a:	f383 8811 	msr	BASEPRI, r3
 800f84e:	f3bf 8f6f 	isb	sy
 800f852:	f3bf 8f4f 	dsb	sy
 800f856:	61bb      	str	r3, [r7, #24]
}
 800f858:	bf00      	nop
 800f85a:	bf00      	nop
 800f85c:	e7fd      	b.n	800f85a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f864:	f023 0301 	bic.w	r3, r3, #1
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f870:	e03d      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f878:	f043 0301 	orr.w	r3, r3, #1
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f888:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88c:	699b      	ldr	r3, [r3, #24]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10b      	bne.n	800f8aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	617b      	str	r3, [r7, #20]
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop
 800f8a8:	e7fd      	b.n	800f8a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ac:	699a      	ldr	r2, [r3, #24]
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b0:	18d1      	adds	r1, r2, r3
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8b8:	f7ff ff04 	bl	800f6c4 <prvInsertTimerInActiveList>
					break;
 800f8bc:	e017      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8c4:	f003 0302 	and.w	r3, r3, #2
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d103      	bne.n	800f8d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f8cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ce:	f000 fc0b 	bl	80100e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8d2:	e00c      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8da:	f023 0301 	bic.w	r3, r3, #1
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f8e6:	e002      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f8e8:	bf00      	nop
 800f8ea:	e000      	b.n	800f8ee <prvProcessReceivedCommands+0x1a6>
					break;
 800f8ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8ee:	4b08      	ldr	r3, [pc, #32]	@ (800f910 <prvProcessReceivedCommands+0x1c8>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	1d39      	adds	r1, r7, #4
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fd faaa 	bl	800ce50 <xQueueReceive>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f47f af26 	bne.w	800f750 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f904:	bf00      	nop
 800f906:	bf00      	nop
 800f908:	3730      	adds	r7, #48	@ 0x30
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	200014b8 	.word	0x200014b8

0800f914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f91a:	e049      	b.n	800f9b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f91c:	4b2e      	ldr	r3, [pc, #184]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f926:	4b2c      	ldr	r3, [pc, #176]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	3304      	adds	r3, #4
 800f934:	4618      	mov	r0, r3
 800f936:	f7fc ff49 	bl	800c7cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f948:	f003 0304 	and.w	r3, r3, #4
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d02f      	beq.n	800f9b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	699b      	ldr	r3, [r3, #24]
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	4413      	add	r3, r2
 800f958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f95a:	68ba      	ldr	r2, [r7, #8]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d90e      	bls.n	800f980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	68ba      	ldr	r2, [r7, #8]
 800f966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f96e:	4b1a      	ldr	r3, [pc, #104]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	3304      	adds	r3, #4
 800f976:	4619      	mov	r1, r3
 800f978:	4610      	mov	r0, r2
 800f97a:	f7fc feee 	bl	800c75a <vListInsert>
 800f97e:	e017      	b.n	800f9b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f980:	2300      	movs	r3, #0
 800f982:	9300      	str	r3, [sp, #0]
 800f984:	2300      	movs	r3, #0
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	2100      	movs	r1, #0
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f7ff fd58 	bl	800f440 <xTimerGenericCommand>
 800f990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10b      	bne.n	800f9b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	603b      	str	r3, [r7, #0]
}
 800f9aa:	bf00      	nop
 800f9ac:	bf00      	nop
 800f9ae:	e7fd      	b.n	800f9ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9b0:	4b09      	ldr	r3, [pc, #36]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1b0      	bne.n	800f91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9ba:	4b07      	ldr	r3, [pc, #28]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9c0:	4b06      	ldr	r3, [pc, #24]	@ (800f9dc <prvSwitchTimerLists+0xc8>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a04      	ldr	r2, [pc, #16]	@ (800f9d8 <prvSwitchTimerLists+0xc4>)
 800f9c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9c8:	4a04      	ldr	r2, [pc, #16]	@ (800f9dc <prvSwitchTimerLists+0xc8>)
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	6013      	str	r3, [r2, #0]
}
 800f9ce:	bf00      	nop
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	200014b0 	.word	0x200014b0
 800f9dc:	200014b4 	.word	0x200014b4

0800f9e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9e6:	f000 f98f 	bl	800fd08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9ea:	4b15      	ldr	r3, [pc, #84]	@ (800fa40 <prvCheckForValidListAndQueue+0x60>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d120      	bne.n	800fa34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9f2:	4814      	ldr	r0, [pc, #80]	@ (800fa44 <prvCheckForValidListAndQueue+0x64>)
 800f9f4:	f7fc fe60 	bl	800c6b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9f8:	4813      	ldr	r0, [pc, #76]	@ (800fa48 <prvCheckForValidListAndQueue+0x68>)
 800f9fa:	f7fc fe5d 	bl	800c6b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9fe:	4b13      	ldr	r3, [pc, #76]	@ (800fa4c <prvCheckForValidListAndQueue+0x6c>)
 800fa00:	4a10      	ldr	r2, [pc, #64]	@ (800fa44 <prvCheckForValidListAndQueue+0x64>)
 800fa02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa04:	4b12      	ldr	r3, [pc, #72]	@ (800fa50 <prvCheckForValidListAndQueue+0x70>)
 800fa06:	4a10      	ldr	r2, [pc, #64]	@ (800fa48 <prvCheckForValidListAndQueue+0x68>)
 800fa08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	4b11      	ldr	r3, [pc, #68]	@ (800fa54 <prvCheckForValidListAndQueue+0x74>)
 800fa10:	4a11      	ldr	r2, [pc, #68]	@ (800fa58 <prvCheckForValidListAndQueue+0x78>)
 800fa12:	2110      	movs	r1, #16
 800fa14:	200a      	movs	r0, #10
 800fa16:	f7fc ff6d 	bl	800c8f4 <xQueueGenericCreateStatic>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	4a08      	ldr	r2, [pc, #32]	@ (800fa40 <prvCheckForValidListAndQueue+0x60>)
 800fa1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa20:	4b07      	ldr	r3, [pc, #28]	@ (800fa40 <prvCheckForValidListAndQueue+0x60>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa28:	4b05      	ldr	r3, [pc, #20]	@ (800fa40 <prvCheckForValidListAndQueue+0x60>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	490b      	ldr	r1, [pc, #44]	@ (800fa5c <prvCheckForValidListAndQueue+0x7c>)
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fd fdaa 	bl	800d588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa34:	f000 f99a 	bl	800fd6c <vPortExitCritical>
}
 800fa38:	bf00      	nop
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	200014b8 	.word	0x200014b8
 800fa44:	20001488 	.word	0x20001488
 800fa48:	2000149c 	.word	0x2000149c
 800fa4c:	200014b0 	.word	0x200014b0
 800fa50:	200014b4 	.word	0x200014b4
 800fa54:	20001564 	.word	0x20001564
 800fa58:	200014c4 	.word	0x200014c4
 800fa5c:	08015704 	.word	0x08015704

0800fa60 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08a      	sub	sp, #40	@ 0x28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fa6e:	f06f 0301 	mvn.w	r3, #1
 800fa72:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa80:	4b06      	ldr	r3, [pc, #24]	@ (800fa9c <xTimerPendFunctionCallFromISR+0x3c>)
 800fa82:	6818      	ldr	r0, [r3, #0]
 800fa84:	f107 0114 	add.w	r1, r7, #20
 800fa88:	2300      	movs	r3, #0
 800fa8a:	683a      	ldr	r2, [r7, #0]
 800fa8c:	f7fd f942 	bl	800cd14 <xQueueGenericSendFromISR>
 800fa90:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3728      	adds	r7, #40	@ 0x28
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	200014b8 	.word	0x200014b8

0800faa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3b04      	subs	r3, #4
 800fab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	3b04      	subs	r3, #4
 800fabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	f023 0201 	bic.w	r2, r3, #1
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	3b04      	subs	r3, #4
 800face:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fad0:	4a0c      	ldr	r2, [pc, #48]	@ (800fb04 <pxPortInitialiseStack+0x64>)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3b14      	subs	r3, #20
 800fada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3b04      	subs	r3, #4
 800fae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f06f 0202 	mvn.w	r2, #2
 800faee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3b20      	subs	r3, #32
 800faf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800faf6:	68fb      	ldr	r3, [r7, #12]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	0800fb09 	.word	0x0800fb09

0800fb08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb12:	4b13      	ldr	r3, [pc, #76]	@ (800fb60 <prvTaskExitError+0x58>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1a:	d00b      	beq.n	800fb34 <prvTaskExitError+0x2c>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	60fb      	str	r3, [r7, #12]
}
 800fb2e:	bf00      	nop
 800fb30:	bf00      	nop
 800fb32:	e7fd      	b.n	800fb30 <prvTaskExitError+0x28>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	60bb      	str	r3, [r7, #8]
}
 800fb46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb48:	bf00      	nop
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d0fc      	beq.n	800fb4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb50:	bf00      	nop
 800fb52:	bf00      	nop
 800fb54:	3714      	adds	r7, #20
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	20000258 	.word	0x20000258
	...

0800fb70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb70:	4b07      	ldr	r3, [pc, #28]	@ (800fb90 <pxCurrentTCBConst2>)
 800fb72:	6819      	ldr	r1, [r3, #0]
 800fb74:	6808      	ldr	r0, [r1, #0]
 800fb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7a:	f380 8809 	msr	PSP, r0
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f04f 0000 	mov.w	r0, #0
 800fb86:	f380 8811 	msr	BASEPRI, r0
 800fb8a:	4770      	bx	lr
 800fb8c:	f3af 8000 	nop.w

0800fb90 <pxCurrentTCBConst2>:
 800fb90:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb94:	bf00      	nop
 800fb96:	bf00      	nop

0800fb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb98:	4808      	ldr	r0, [pc, #32]	@ (800fbbc <prvPortStartFirstTask+0x24>)
 800fb9a:	6800      	ldr	r0, [r0, #0]
 800fb9c:	6800      	ldr	r0, [r0, #0]
 800fb9e:	f380 8808 	msr	MSP, r0
 800fba2:	f04f 0000 	mov.w	r0, #0
 800fba6:	f380 8814 	msr	CONTROL, r0
 800fbaa:	b662      	cpsie	i
 800fbac:	b661      	cpsie	f
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	f3bf 8f6f 	isb	sy
 800fbb6:	df00      	svc	0
 800fbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbba:	bf00      	nop
 800fbbc:	e000ed08 	.word	0xe000ed08

0800fbc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b086      	sub	sp, #24
 800fbc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbc6:	4b47      	ldr	r3, [pc, #284]	@ (800fce4 <xPortStartScheduler+0x124>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a47      	ldr	r2, [pc, #284]	@ (800fce8 <xPortStartScheduler+0x128>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d10b      	bne.n	800fbe8 <xPortStartScheduler+0x28>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	613b      	str	r3, [r7, #16]
}
 800fbe2:	bf00      	nop
 800fbe4:	bf00      	nop
 800fbe6:	e7fd      	b.n	800fbe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbe8:	4b3e      	ldr	r3, [pc, #248]	@ (800fce4 <xPortStartScheduler+0x124>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a3f      	ldr	r2, [pc, #252]	@ (800fcec <xPortStartScheduler+0x12c>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d10b      	bne.n	800fc0a <xPortStartScheduler+0x4a>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	60fb      	str	r3, [r7, #12]
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop
 800fc08:	e7fd      	b.n	800fc06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc0a:	4b39      	ldr	r3, [pc, #228]	@ (800fcf0 <xPortStartScheduler+0x130>)
 800fc0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	22ff      	movs	r2, #255	@ 0xff
 800fc1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc24:	78fb      	ldrb	r3, [r7, #3]
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc2c:	b2da      	uxtb	r2, r3
 800fc2e:	4b31      	ldr	r3, [pc, #196]	@ (800fcf4 <xPortStartScheduler+0x134>)
 800fc30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc32:	4b31      	ldr	r3, [pc, #196]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc34:	2207      	movs	r2, #7
 800fc36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc38:	e009      	b.n	800fc4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	4a2d      	ldr	r2, [pc, #180]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc4e:	78fb      	ldrb	r3, [r7, #3]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc56:	2b80      	cmp	r3, #128	@ 0x80
 800fc58:	d0ef      	beq.n	800fc3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc5a:	4b27      	ldr	r3, [pc, #156]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f1c3 0307 	rsb	r3, r3, #7
 800fc62:	2b04      	cmp	r3, #4
 800fc64:	d00b      	beq.n	800fc7e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc6a:	f383 8811 	msr	BASEPRI, r3
 800fc6e:	f3bf 8f6f 	isb	sy
 800fc72:	f3bf 8f4f 	dsb	sy
 800fc76:	60bb      	str	r3, [r7, #8]
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	e7fd      	b.n	800fc7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc7e:	4b1e      	ldr	r3, [pc, #120]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	021b      	lsls	r3, r3, #8
 800fc84:	4a1c      	ldr	r2, [pc, #112]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc88:	4b1b      	ldr	r3, [pc, #108]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc90:	4a19      	ldr	r2, [pc, #100]	@ (800fcf8 <xPortStartScheduler+0x138>)
 800fc92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	b2da      	uxtb	r2, r3
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc9c:	4b17      	ldr	r3, [pc, #92]	@ (800fcfc <xPortStartScheduler+0x13c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a16      	ldr	r2, [pc, #88]	@ (800fcfc <xPortStartScheduler+0x13c>)
 800fca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fca8:	4b14      	ldr	r3, [pc, #80]	@ (800fcfc <xPortStartScheduler+0x13c>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a13      	ldr	r2, [pc, #76]	@ (800fcfc <xPortStartScheduler+0x13c>)
 800fcae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcb4:	f000 f8da 	bl	800fe6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcb8:	4b11      	ldr	r3, [pc, #68]	@ (800fd00 <xPortStartScheduler+0x140>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcbe:	f000 f8f9 	bl	800feb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcc2:	4b10      	ldr	r3, [pc, #64]	@ (800fd04 <xPortStartScheduler+0x144>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd04 <xPortStartScheduler+0x144>)
 800fcc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcce:	f7ff ff63 	bl	800fb98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcd2:	f7fe fbe7 	bl	800e4a4 <vTaskSwitchContext>
	prvTaskExitError();
 800fcd6:	f7ff ff17 	bl	800fb08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	e000ed00 	.word	0xe000ed00
 800fce8:	410fc271 	.word	0x410fc271
 800fcec:	410fc270 	.word	0x410fc270
 800fcf0:	e000e400 	.word	0xe000e400
 800fcf4:	200015b4 	.word	0x200015b4
 800fcf8:	200015b8 	.word	0x200015b8
 800fcfc:	e000ed20 	.word	0xe000ed20
 800fd00:	20000258 	.word	0x20000258
 800fd04:	e000ef34 	.word	0xe000ef34

0800fd08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	607b      	str	r3, [r7, #4]
}
 800fd20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd22:	4b10      	ldr	r3, [pc, #64]	@ (800fd64 <vPortEnterCritical+0x5c>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	4a0e      	ldr	r2, [pc, #56]	@ (800fd64 <vPortEnterCritical+0x5c>)
 800fd2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <vPortEnterCritical+0x5c>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d110      	bne.n	800fd56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd34:	4b0c      	ldr	r3, [pc, #48]	@ (800fd68 <vPortEnterCritical+0x60>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00b      	beq.n	800fd56 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	603b      	str	r3, [r7, #0]
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	e7fd      	b.n	800fd52 <vPortEnterCritical+0x4a>
	}
}
 800fd56:	bf00      	nop
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	20000258 	.word	0x20000258
 800fd68:	e000ed04 	.word	0xe000ed04

0800fd6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd72:	4b12      	ldr	r3, [pc, #72]	@ (800fdbc <vPortExitCritical+0x50>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10b      	bne.n	800fd92 <vPortExitCritical+0x26>
	__asm volatile
 800fd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	607b      	str	r3, [r7, #4]
}
 800fd8c:	bf00      	nop
 800fd8e:	bf00      	nop
 800fd90:	e7fd      	b.n	800fd8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd92:	4b0a      	ldr	r3, [pc, #40]	@ (800fdbc <vPortExitCritical+0x50>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	4a08      	ldr	r2, [pc, #32]	@ (800fdbc <vPortExitCritical+0x50>)
 800fd9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd9c:	4b07      	ldr	r3, [pc, #28]	@ (800fdbc <vPortExitCritical+0x50>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d105      	bne.n	800fdb0 <vPortExitCritical+0x44>
 800fda4:	2300      	movs	r3, #0
 800fda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	f383 8811 	msr	BASEPRI, r3
}
 800fdae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdb0:	bf00      	nop
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	20000258 	.word	0x20000258

0800fdc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdc0:	f3ef 8009 	mrs	r0, PSP
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	4b15      	ldr	r3, [pc, #84]	@ (800fe20 <pxCurrentTCBConst>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	f01e 0f10 	tst.w	lr, #16
 800fdd0:	bf08      	it	eq
 800fdd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdda:	6010      	str	r0, [r2, #0]
 800fddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fde0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fde4:	f380 8811 	msr	BASEPRI, r0
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f7fe fb58 	bl	800e4a4 <vTaskSwitchContext>
 800fdf4:	f04f 0000 	mov.w	r0, #0
 800fdf8:	f380 8811 	msr	BASEPRI, r0
 800fdfc:	bc09      	pop	{r0, r3}
 800fdfe:	6819      	ldr	r1, [r3, #0]
 800fe00:	6808      	ldr	r0, [r1, #0]
 800fe02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe06:	f01e 0f10 	tst.w	lr, #16
 800fe0a:	bf08      	it	eq
 800fe0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe10:	f380 8809 	msr	PSP, r0
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	f3af 8000 	nop.w

0800fe20 <pxCurrentTCBConst>:
 800fe20:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe24:	bf00      	nop
 800fe26:	bf00      	nop

0800fe28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	607b      	str	r3, [r7, #4]
}
 800fe40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe42:	f7fe fa75 	bl	800e330 <xTaskIncrementTick>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe4c:	4b06      	ldr	r3, [pc, #24]	@ (800fe68 <xPortSysTickHandler+0x40>)
 800fe4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	2300      	movs	r3, #0
 800fe56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	f383 8811 	msr	BASEPRI, r3
}
 800fe5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe60:	bf00      	nop
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	e000ed04 	.word	0xe000ed04

0800fe6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe70:	4b0b      	ldr	r3, [pc, #44]	@ (800fea0 <vPortSetupTimerInterrupt+0x34>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe76:	4b0b      	ldr	r3, [pc, #44]	@ (800fea4 <vPortSetupTimerInterrupt+0x38>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fea8 <vPortSetupTimerInterrupt+0x3c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a0a      	ldr	r2, [pc, #40]	@ (800feac <vPortSetupTimerInterrupt+0x40>)
 800fe82:	fba2 2303 	umull	r2, r3, r2, r3
 800fe86:	099b      	lsrs	r3, r3, #6
 800fe88:	4a09      	ldr	r2, [pc, #36]	@ (800feb0 <vPortSetupTimerInterrupt+0x44>)
 800fe8a:	3b01      	subs	r3, #1
 800fe8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe8e:	4b04      	ldr	r3, [pc, #16]	@ (800fea0 <vPortSetupTimerInterrupt+0x34>)
 800fe90:	2207      	movs	r2, #7
 800fe92:	601a      	str	r2, [r3, #0]
}
 800fe94:	bf00      	nop
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	e000e010 	.word	0xe000e010
 800fea4:	e000e018 	.word	0xe000e018
 800fea8:	2000022c 	.word	0x2000022c
 800feac:	10624dd3 	.word	0x10624dd3
 800feb0:	e000e014 	.word	0xe000e014

0800feb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800feb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fec4 <vPortEnableVFP+0x10>
 800feb8:	6801      	ldr	r1, [r0, #0]
 800feba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800febe:	6001      	str	r1, [r0, #0]
 800fec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fec2:	bf00      	nop
 800fec4:	e000ed88 	.word	0xe000ed88

0800fec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fece:	f3ef 8305 	mrs	r3, IPSR
 800fed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b0f      	cmp	r3, #15
 800fed8:	d915      	bls.n	800ff06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feda:	4a18      	ldr	r2, [pc, #96]	@ (800ff3c <vPortValidateInterruptPriority+0x74>)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4413      	add	r3, r2
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fee4:	4b16      	ldr	r3, [pc, #88]	@ (800ff40 <vPortValidateInterruptPriority+0x78>)
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	7afa      	ldrb	r2, [r7, #11]
 800feea:	429a      	cmp	r2, r3
 800feec:	d20b      	bcs.n	800ff06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	607b      	str	r3, [r7, #4]
}
 800ff00:	bf00      	nop
 800ff02:	bf00      	nop
 800ff04:	e7fd      	b.n	800ff02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff06:	4b0f      	ldr	r3, [pc, #60]	@ (800ff44 <vPortValidateInterruptPriority+0x7c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff48 <vPortValidateInterruptPriority+0x80>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d90b      	bls.n	800ff2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	603b      	str	r3, [r7, #0]
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	e7fd      	b.n	800ff2a <vPortValidateInterruptPriority+0x62>
	}
 800ff2e:	bf00      	nop
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	e000e3f0 	.word	0xe000e3f0
 800ff40:	200015b4 	.word	0x200015b4
 800ff44:	e000ed0c 	.word	0xe000ed0c
 800ff48:	200015b8 	.word	0x200015b8

0800ff4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08a      	sub	sp, #40	@ 0x28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff54:	2300      	movs	r3, #0
 800ff56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff58:	f7fe f85a 	bl	800e010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff5c:	4b5c      	ldr	r3, [pc, #368]	@ (80100d0 <pvPortMalloc+0x184>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff64:	f000 f924 	bl	80101b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff68:	4b5a      	ldr	r3, [pc, #360]	@ (80100d4 <pvPortMalloc+0x188>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4013      	ands	r3, r2
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f040 8095 	bne.w	80100a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01e      	beq.n	800ffba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff7c:	2208      	movs	r2, #8
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4413      	add	r3, r2
 800ff82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d015      	beq.n	800ffba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f023 0307 	bic.w	r3, r3, #7
 800ff94:	3308      	adds	r3, #8
 800ff96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f003 0307 	and.w	r3, r3, #7
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00b      	beq.n	800ffba <pvPortMalloc+0x6e>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	617b      	str	r3, [r7, #20]
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop
 800ffb8:	e7fd      	b.n	800ffb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d06f      	beq.n	80100a0 <pvPortMalloc+0x154>
 800ffc0:	4b45      	ldr	r3, [pc, #276]	@ (80100d8 <pvPortMalloc+0x18c>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d86a      	bhi.n	80100a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffca:	4b44      	ldr	r3, [pc, #272]	@ (80100dc <pvPortMalloc+0x190>)
 800ffcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffce:	4b43      	ldr	r3, [pc, #268]	@ (80100dc <pvPortMalloc+0x190>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffd4:	e004      	b.n	800ffe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d903      	bls.n	800fff2 <pvPortMalloc+0xa6>
 800ffea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d1f1      	bne.n	800ffd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fff2:	4b37      	ldr	r3, [pc, #220]	@ (80100d0 <pvPortMalloc+0x184>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d051      	beq.n	80100a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fffc:	6a3b      	ldr	r3, [r7, #32]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2208      	movs	r2, #8
 8010002:	4413      	add	r3, r2
 8010004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	685a      	ldr	r2, [r3, #4]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	1ad2      	subs	r2, r2, r3
 8010016:	2308      	movs	r3, #8
 8010018:	005b      	lsls	r3, r3, #1
 801001a:	429a      	cmp	r2, r3
 801001c:	d920      	bls.n	8010060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801001e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4413      	add	r3, r2
 8010024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	f003 0307 	and.w	r3, r3, #7
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00b      	beq.n	8010048 <pvPortMalloc+0xfc>
	__asm volatile
 8010030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	613b      	str	r3, [r7, #16]
}
 8010042:	bf00      	nop
 8010044:	bf00      	nop
 8010046:	e7fd      	b.n	8010044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801004a:	685a      	ldr	r2, [r3, #4]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	1ad2      	subs	r2, r2, r3
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801005a:	69b8      	ldr	r0, [r7, #24]
 801005c:	f000 f90a 	bl	8010274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010060:	4b1d      	ldr	r3, [pc, #116]	@ (80100d8 <pvPortMalloc+0x18c>)
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	4a1b      	ldr	r2, [pc, #108]	@ (80100d8 <pvPortMalloc+0x18c>)
 801006c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801006e:	4b1a      	ldr	r3, [pc, #104]	@ (80100d8 <pvPortMalloc+0x18c>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	4b1b      	ldr	r3, [pc, #108]	@ (80100e0 <pvPortMalloc+0x194>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	429a      	cmp	r2, r3
 8010078:	d203      	bcs.n	8010082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801007a:	4b17      	ldr	r3, [pc, #92]	@ (80100d8 <pvPortMalloc+0x18c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a18      	ldr	r2, [pc, #96]	@ (80100e0 <pvPortMalloc+0x194>)
 8010080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	685a      	ldr	r2, [r3, #4]
 8010086:	4b13      	ldr	r3, [pc, #76]	@ (80100d4 <pvPortMalloc+0x188>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	431a      	orrs	r2, r3
 801008c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <pvPortMalloc+0x198>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	3301      	adds	r3, #1
 801009c:	4a11      	ldr	r2, [pc, #68]	@ (80100e4 <pvPortMalloc+0x198>)
 801009e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100a0:	f7fd ffc4 	bl	800e02c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	f003 0307 	and.w	r3, r3, #7
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d00b      	beq.n	80100c6 <pvPortMalloc+0x17a>
	__asm volatile
 80100ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	60fb      	str	r3, [r7, #12]
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	e7fd      	b.n	80100c2 <pvPortMalloc+0x176>
	return pvReturn;
 80100c6:	69fb      	ldr	r3, [r7, #28]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3728      	adds	r7, #40	@ 0x28
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	200051c4 	.word	0x200051c4
 80100d4:	200051d8 	.word	0x200051d8
 80100d8:	200051c8 	.word	0x200051c8
 80100dc:	200051bc 	.word	0x200051bc
 80100e0:	200051cc 	.word	0x200051cc
 80100e4:	200051d0 	.word	0x200051d0

080100e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d04f      	beq.n	801019a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100fa:	2308      	movs	r3, #8
 80100fc:	425b      	negs	r3, r3
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	4413      	add	r3, r2
 8010102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	4b25      	ldr	r3, [pc, #148]	@ (80101a4 <vPortFree+0xbc>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4013      	ands	r3, r2
 8010112:	2b00      	cmp	r3, #0
 8010114:	d10b      	bne.n	801012e <vPortFree+0x46>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	60fb      	str	r3, [r7, #12]
}
 8010128:	bf00      	nop
 801012a:	bf00      	nop
 801012c:	e7fd      	b.n	801012a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00b      	beq.n	801014e <vPortFree+0x66>
	__asm volatile
 8010136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801013a:	f383 8811 	msr	BASEPRI, r3
 801013e:	f3bf 8f6f 	isb	sy
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	60bb      	str	r3, [r7, #8]
}
 8010148:	bf00      	nop
 801014a:	bf00      	nop
 801014c:	e7fd      	b.n	801014a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	4b14      	ldr	r3, [pc, #80]	@ (80101a4 <vPortFree+0xbc>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4013      	ands	r3, r2
 8010158:	2b00      	cmp	r3, #0
 801015a:	d01e      	beq.n	801019a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d11a      	bne.n	801019a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	685a      	ldr	r2, [r3, #4]
 8010168:	4b0e      	ldr	r3, [pc, #56]	@ (80101a4 <vPortFree+0xbc>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	43db      	mvns	r3, r3
 801016e:	401a      	ands	r2, r3
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010174:	f7fd ff4c 	bl	800e010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	4b0a      	ldr	r3, [pc, #40]	@ (80101a8 <vPortFree+0xc0>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4413      	add	r3, r2
 8010182:	4a09      	ldr	r2, [pc, #36]	@ (80101a8 <vPortFree+0xc0>)
 8010184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010186:	6938      	ldr	r0, [r7, #16]
 8010188:	f000 f874 	bl	8010274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801018c:	4b07      	ldr	r3, [pc, #28]	@ (80101ac <vPortFree+0xc4>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	3301      	adds	r3, #1
 8010192:	4a06      	ldr	r2, [pc, #24]	@ (80101ac <vPortFree+0xc4>)
 8010194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010196:	f7fd ff49 	bl	800e02c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801019a:	bf00      	nop
 801019c:	3718      	adds	r7, #24
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	200051d8 	.word	0x200051d8
 80101a8:	200051c8 	.word	0x200051c8
 80101ac:	200051d4 	.word	0x200051d4

080101b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80101ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101bc:	4b27      	ldr	r3, [pc, #156]	@ (801025c <prvHeapInit+0xac>)
 80101be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f003 0307 	and.w	r3, r3, #7
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00c      	beq.n	80101e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	3307      	adds	r3, #7
 80101ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f023 0307 	bic.w	r3, r3, #7
 80101d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	4a1f      	ldr	r2, [pc, #124]	@ (801025c <prvHeapInit+0xac>)
 80101e0:	4413      	add	r3, r2
 80101e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101e8:	4a1d      	ldr	r2, [pc, #116]	@ (8010260 <prvHeapInit+0xb0>)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101ee:	4b1c      	ldr	r3, [pc, #112]	@ (8010260 <prvHeapInit+0xb0>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	4413      	add	r3, r2
 80101fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101fc:	2208      	movs	r2, #8
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	1a9b      	subs	r3, r3, r2
 8010202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f023 0307 	bic.w	r3, r3, #7
 801020a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	4a15      	ldr	r2, [pc, #84]	@ (8010264 <prvHeapInit+0xb4>)
 8010210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010212:	4b14      	ldr	r3, [pc, #80]	@ (8010264 <prvHeapInit+0xb4>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2200      	movs	r2, #0
 8010218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801021a:	4b12      	ldr	r3, [pc, #72]	@ (8010264 <prvHeapInit+0xb4>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	1ad2      	subs	r2, r2, r3
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010230:	4b0c      	ldr	r3, [pc, #48]	@ (8010264 <prvHeapInit+0xb4>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	4a0a      	ldr	r2, [pc, #40]	@ (8010268 <prvHeapInit+0xb8>)
 801023e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	4a09      	ldr	r2, [pc, #36]	@ (801026c <prvHeapInit+0xbc>)
 8010246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010248:	4b09      	ldr	r3, [pc, #36]	@ (8010270 <prvHeapInit+0xc0>)
 801024a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801024e:	601a      	str	r2, [r3, #0]
}
 8010250:	bf00      	nop
 8010252:	3714      	adds	r7, #20
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	200015bc 	.word	0x200015bc
 8010260:	200051bc 	.word	0x200051bc
 8010264:	200051c4 	.word	0x200051c4
 8010268:	200051cc 	.word	0x200051cc
 801026c:	200051c8 	.word	0x200051c8
 8010270:	200051d8 	.word	0x200051d8

08010274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010274:	b480      	push	{r7}
 8010276:	b085      	sub	sp, #20
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801027c:	4b28      	ldr	r3, [pc, #160]	@ (8010320 <prvInsertBlockIntoFreeList+0xac>)
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	e002      	b.n	8010288 <prvInsertBlockIntoFreeList+0x14>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	429a      	cmp	r2, r3
 8010290:	d8f7      	bhi.n	8010282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	4413      	add	r3, r2
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d108      	bne.n	80102b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	685a      	ldr	r2, [r3, #4]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	441a      	add	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	441a      	add	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d118      	bne.n	80102fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	4b15      	ldr	r3, [pc, #84]	@ (8010324 <prvInsertBlockIntoFreeList+0xb0>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d00d      	beq.n	80102f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	685a      	ldr	r2, [r3, #4]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	441a      	add	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	601a      	str	r2, [r3, #0]
 80102f0:	e008      	b.n	8010304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010324 <prvInsertBlockIntoFreeList+0xb0>)
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	e003      	b.n	8010304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	429a      	cmp	r2, r3
 801030a:	d002      	beq.n	8010312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010312:	bf00      	nop
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	200051bc 	.word	0x200051bc
 8010324:	200051c4 	.word	0x200051c4

08010328 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801032c:	2201      	movs	r2, #1
 801032e:	490e      	ldr	r1, [pc, #56]	@ (8010368 <MX_USB_HOST_Init+0x40>)
 8010330:	480e      	ldr	r0, [pc, #56]	@ (801036c <MX_USB_HOST_Init+0x44>)
 8010332:	f7f9 feb5 	bl	800a0a0 <USBH_Init>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801033c:	f7f2 ffc0 	bl	80032c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010340:	490b      	ldr	r1, [pc, #44]	@ (8010370 <MX_USB_HOST_Init+0x48>)
 8010342:	480a      	ldr	r0, [pc, #40]	@ (801036c <MX_USB_HOST_Init+0x44>)
 8010344:	f7f9 ff5c 	bl	800a200 <USBH_RegisterClass>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801034e:	f7f2 ffb7 	bl	80032c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010352:	4806      	ldr	r0, [pc, #24]	@ (801036c <MX_USB_HOST_Init+0x44>)
 8010354:	f7f9 ffe0 	bl	800a318 <USBH_Start>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801035e:	f7f2 ffaf 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010362:	bf00      	nop
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	08010375 	.word	0x08010375
 801036c:	200051dc 	.word	0x200051dc
 8010370:	20000238 	.word	0x20000238

08010374 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010380:	78fb      	ldrb	r3, [r7, #3]
 8010382:	3b01      	subs	r3, #1
 8010384:	2b04      	cmp	r3, #4
 8010386:	d819      	bhi.n	80103bc <USBH_UserProcess+0x48>
 8010388:	a201      	add	r2, pc, #4	@ (adr r2, 8010390 <USBH_UserProcess+0x1c>)
 801038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038e:	bf00      	nop
 8010390:	080103bd 	.word	0x080103bd
 8010394:	080103ad 	.word	0x080103ad
 8010398:	080103bd 	.word	0x080103bd
 801039c:	080103b5 	.word	0x080103b5
 80103a0:	080103a5 	.word	0x080103a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80103a4:	4b09      	ldr	r3, [pc, #36]	@ (80103cc <USBH_UserProcess+0x58>)
 80103a6:	2203      	movs	r2, #3
 80103a8:	701a      	strb	r2, [r3, #0]
  break;
 80103aa:	e008      	b.n	80103be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80103ac:	4b07      	ldr	r3, [pc, #28]	@ (80103cc <USBH_UserProcess+0x58>)
 80103ae:	2202      	movs	r2, #2
 80103b0:	701a      	strb	r2, [r3, #0]
  break;
 80103b2:	e004      	b.n	80103be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103b4:	4b05      	ldr	r3, [pc, #20]	@ (80103cc <USBH_UserProcess+0x58>)
 80103b6:	2201      	movs	r2, #1
 80103b8:	701a      	strb	r2, [r3, #0]
  break;
 80103ba:	e000      	b.n	80103be <USBH_UserProcess+0x4a>

  default:
  break;
 80103bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103be:	bf00      	nop
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	200055c0 	.word	0x200055c0

080103d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b08a      	sub	sp, #40	@ 0x28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103d8:	f107 0314 	add.w	r3, r7, #20
 80103dc:	2200      	movs	r2, #0
 80103de:	601a      	str	r2, [r3, #0]
 80103e0:	605a      	str	r2, [r3, #4]
 80103e2:	609a      	str	r2, [r3, #8]
 80103e4:	60da      	str	r2, [r3, #12]
 80103e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80103f0:	d147      	bne.n	8010482 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103f2:	2300      	movs	r3, #0
 80103f4:	613b      	str	r3, [r7, #16]
 80103f6:	4b25      	ldr	r3, [pc, #148]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 80103f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103fa:	4a24      	ldr	r2, [pc, #144]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 80103fc:	f043 0301 	orr.w	r3, r3, #1
 8010400:	6313      	str	r3, [r2, #48]	@ 0x30
 8010402:	4b22      	ldr	r3, [pc, #136]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 8010404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	613b      	str	r3, [r7, #16]
 801040c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801040e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010414:	2300      	movs	r3, #0
 8010416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010418:	2300      	movs	r3, #0
 801041a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801041c:	f107 0314 	add.w	r3, r7, #20
 8010420:	4619      	mov	r1, r3
 8010422:	481b      	ldr	r0, [pc, #108]	@ (8010490 <HAL_HCD_MspInit+0xc0>)
 8010424:	f7f3 fcde 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010428:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801042c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801042e:	2302      	movs	r3, #2
 8010430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010432:	2300      	movs	r3, #0
 8010434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010436:	2300      	movs	r3, #0
 8010438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801043a:	230a      	movs	r3, #10
 801043c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	4619      	mov	r1, r3
 8010444:	4812      	ldr	r0, [pc, #72]	@ (8010490 <HAL_HCD_MspInit+0xc0>)
 8010446:	f7f3 fccd 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801044a:	4b10      	ldr	r3, [pc, #64]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 801044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044e:	4a0f      	ldr	r2, [pc, #60]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 8010450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010454:	6353      	str	r3, [r2, #52]	@ 0x34
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	4b0c      	ldr	r3, [pc, #48]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 801045c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801045e:	4a0b      	ldr	r2, [pc, #44]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 8010460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010464:	6453      	str	r3, [r2, #68]	@ 0x44
 8010466:	4b09      	ldr	r3, [pc, #36]	@ (801048c <HAL_HCD_MspInit+0xbc>)
 8010468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801046a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010472:	2200      	movs	r2, #0
 8010474:	2105      	movs	r1, #5
 8010476:	2043      	movs	r0, #67	@ 0x43
 8010478:	f7f3 fbf8 	bl	8003c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801047c:	2043      	movs	r0, #67	@ 0x43
 801047e:	f7f3 fc11 	bl	8003ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010482:	bf00      	nop
 8010484:	3728      	adds	r7, #40	@ 0x28
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	40023800 	.word	0x40023800
 8010490:	40020000 	.word	0x40020000

08010494 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fa fbe9 	bl	800ac7a <USBH_LL_IncTimer>
}
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fa fc2d 	bl	800ad1e <USBH_LL_Connect>
}
 80104c4:	bf00      	nop
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fa fc42 	bl	800ad64 <USBH_LL_Disconnect>
}
 80104e0:	bf00      	nop
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	70fb      	strb	r3, [r7, #3]
 80104f4:	4613      	mov	r3, r2
 80104f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fa fc79 	bl	800adf6 <USBH_LL_NotifyURBChange>
#endif
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801051a:	4618      	mov	r0, r3
 801051c:	f7fa fbd7 	bl	800acce <USBH_LL_PortEnabled>
}
 8010520:	bf00      	nop
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010536:	4618      	mov	r0, r3
 8010538:	f7fa fbe3 	bl	800ad02 <USBH_LL_PortDisabled>
}
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010552:	2b01      	cmp	r3, #1
 8010554:	d12a      	bne.n	80105ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010556:	4a18      	ldr	r2, [pc, #96]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4a15      	ldr	r2, [pc, #84]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010562:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010566:	4b14      	ldr	r3, [pc, #80]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010568:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801056c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801056e:	4b12      	ldr	r3, [pc, #72]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010570:	2208      	movs	r2, #8
 8010572:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010574:	4b10      	ldr	r3, [pc, #64]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010576:	2201      	movs	r2, #1
 8010578:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801057a:	4b0f      	ldr	r3, [pc, #60]	@ (80105b8 <USBH_LL_Init+0x74>)
 801057c:	2200      	movs	r2, #0
 801057e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010580:	4b0d      	ldr	r3, [pc, #52]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010582:	2202      	movs	r2, #2
 8010584:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010586:	4b0c      	ldr	r3, [pc, #48]	@ (80105b8 <USBH_LL_Init+0x74>)
 8010588:	2200      	movs	r2, #0
 801058a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801058c:	480a      	ldr	r0, [pc, #40]	@ (80105b8 <USBH_LL_Init+0x74>)
 801058e:	f7f3 fe34 	bl	80041fa <HAL_HCD_Init>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010598:	f7f2 fe92 	bl	80032c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801059c:	4806      	ldr	r0, [pc, #24]	@ (80105b8 <USBH_LL_Init+0x74>)
 801059e:	f7f4 fa18 	bl	80049d2 <HAL_HCD_GetCurrentFrame>
 80105a2:	4603      	mov	r3, r0
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7fa fb58 	bl	800ac5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	200055c4 	.word	0x200055c4

080105bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f4 f987 	bl	80048e6 <HAL_HCD_Start>
 80105d8:	4603      	mov	r3, r0
 80105da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
 80105de:	4618      	mov	r0, r3
 80105e0:	f000 f95c 	bl	801089c <USBH_Get_USB_Status>
 80105e4:	4603      	mov	r3, r0
 80105e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b084      	sub	sp, #16
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105fe:	2300      	movs	r3, #0
 8010600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010608:	4618      	mov	r0, r3
 801060a:	f7f4 f98f 	bl	800492c <HAL_HCD_Stop>
 801060e:	4603      	mov	r3, r0
 8010610:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010612:	7bfb      	ldrb	r3, [r7, #15]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 f941 	bl	801089c <USBH_Get_USB_Status>
 801061a:	4603      	mov	r3, r0
 801061c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801061e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010630:	2301      	movs	r3, #1
 8010632:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801063a:	4618      	mov	r0, r3
 801063c:	f7f4 f9d7 	bl	80049ee <HAL_HCD_GetCurrentSpeed>
 8010640:	4603      	mov	r3, r0
 8010642:	2b02      	cmp	r3, #2
 8010644:	d00c      	beq.n	8010660 <USBH_LL_GetSpeed+0x38>
 8010646:	2b02      	cmp	r3, #2
 8010648:	d80d      	bhi.n	8010666 <USBH_LL_GetSpeed+0x3e>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <USBH_LL_GetSpeed+0x2c>
 801064e:	2b01      	cmp	r3, #1
 8010650:	d003      	beq.n	801065a <USBH_LL_GetSpeed+0x32>
 8010652:	e008      	b.n	8010666 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010654:	2300      	movs	r3, #0
 8010656:	73fb      	strb	r3, [r7, #15]
    break;
 8010658:	e008      	b.n	801066c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801065a:	2301      	movs	r3, #1
 801065c:	73fb      	strb	r3, [r7, #15]
    break;
 801065e:	e005      	b.n	801066c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010660:	2302      	movs	r3, #2
 8010662:	73fb      	strb	r3, [r7, #15]
    break;
 8010664:	e002      	b.n	801066c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010666:	2301      	movs	r3, #1
 8010668:	73fb      	strb	r3, [r7, #15]
    break;
 801066a:	bf00      	nop
  }
  return  speed;
 801066c:	7bfb      	ldrb	r3, [r7, #15]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b084      	sub	sp, #16
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010682:	2300      	movs	r3, #0
 8010684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801068c:	4618      	mov	r0, r3
 801068e:	f7f4 f96a 	bl	8004966 <HAL_HCD_ResetPort>
 8010692:	4603      	mov	r3, r0
 8010694:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010696:	7bfb      	ldrb	r3, [r7, #15]
 8010698:	4618      	mov	r0, r3
 801069a:	f000 f8ff 	bl	801089c <USBH_Get_USB_Status>
 801069e:	4603      	mov	r3, r0
 80106a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3710      	adds	r7, #16
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	460b      	mov	r3, r1
 80106b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106be:	78fa      	ldrb	r2, [r7, #3]
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f4 f971 	bl	80049aa <HAL_HCD_HC_GetXferCount>
 80106c8:	4603      	mov	r3, r0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106d2:	b590      	push	{r4, r7, lr}
 80106d4:	b089      	sub	sp, #36	@ 0x24
 80106d6:	af04      	add	r7, sp, #16
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	4608      	mov	r0, r1
 80106dc:	4611      	mov	r1, r2
 80106de:	461a      	mov	r2, r3
 80106e0:	4603      	mov	r3, r0
 80106e2:	70fb      	strb	r3, [r7, #3]
 80106e4:	460b      	mov	r3, r1
 80106e6:	70bb      	strb	r3, [r7, #2]
 80106e8:	4613      	mov	r3, r2
 80106ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ec:	2300      	movs	r3, #0
 80106ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106f0:	2300      	movs	r3, #0
 80106f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80106fa:	787c      	ldrb	r4, [r7, #1]
 80106fc:	78ba      	ldrb	r2, [r7, #2]
 80106fe:	78f9      	ldrb	r1, [r7, #3]
 8010700:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010702:	9302      	str	r3, [sp, #8]
 8010704:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010708:	9301      	str	r3, [sp, #4]
 801070a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	4623      	mov	r3, r4
 8010712:	f7f3 fdd4 	bl	80042be <HAL_HCD_HC_Init>
 8010716:	4603      	mov	r3, r0
 8010718:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801071a:	7bfb      	ldrb	r3, [r7, #15]
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f8bd 	bl	801089c <USBH_Get_USB_Status>
 8010722:	4603      	mov	r3, r0
 8010724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010726:	7bbb      	ldrb	r3, [r7, #14]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	bd90      	pop	{r4, r7, pc}

08010730 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	460b      	mov	r3, r1
 801073a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801073c:	2300      	movs	r3, #0
 801073e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010740:	2300      	movs	r3, #0
 8010742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801074a:	78fa      	ldrb	r2, [r7, #3]
 801074c:	4611      	mov	r1, r2
 801074e:	4618      	mov	r0, r3
 8010750:	f7f3 fe44 	bl	80043dc <HAL_HCD_HC_Halt>
 8010754:	4603      	mov	r3, r0
 8010756:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010758:	7bfb      	ldrb	r3, [r7, #15]
 801075a:	4618      	mov	r0, r3
 801075c:	f000 f89e 	bl	801089c <USBH_Get_USB_Status>
 8010760:	4603      	mov	r3, r0
 8010762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010764:	7bbb      	ldrb	r3, [r7, #14]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801076e:	b590      	push	{r4, r7, lr}
 8010770:	b089      	sub	sp, #36	@ 0x24
 8010772:	af04      	add	r7, sp, #16
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	4608      	mov	r0, r1
 8010778:	4611      	mov	r1, r2
 801077a:	461a      	mov	r2, r3
 801077c:	4603      	mov	r3, r0
 801077e:	70fb      	strb	r3, [r7, #3]
 8010780:	460b      	mov	r3, r1
 8010782:	70bb      	strb	r3, [r7, #2]
 8010784:	4613      	mov	r3, r2
 8010786:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010788:	2300      	movs	r3, #0
 801078a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010796:	787c      	ldrb	r4, [r7, #1]
 8010798:	78ba      	ldrb	r2, [r7, #2]
 801079a:	78f9      	ldrb	r1, [r7, #3]
 801079c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107a0:	9303      	str	r3, [sp, #12]
 80107a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107a4:	9302      	str	r3, [sp, #8]
 80107a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a8:	9301      	str	r3, [sp, #4]
 80107aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	4623      	mov	r3, r4
 80107b2:	f7f3 fe37 	bl	8004424 <HAL_HCD_HC_SubmitRequest>
 80107b6:	4603      	mov	r3, r0
 80107b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 f86d 	bl	801089c <USBH_Get_USB_Status>
 80107c2:	4603      	mov	r3, r0
 80107c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd90      	pop	{r4, r7, pc}

080107d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107e2:	78fa      	ldrb	r2, [r7, #3]
 80107e4:	4611      	mov	r1, r2
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7f4 f8cb 	bl	8004982 <HAL_HCD_HC_GetURBState>
 80107ec:	4603      	mov	r3, r0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010808:	2b01      	cmp	r3, #1
 801080a:	d103      	bne.n	8010814 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801080c:	78fb      	ldrb	r3, [r7, #3]
 801080e:	4618      	mov	r0, r3
 8010810:	f000 f870 	bl	80108f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010814:	20c8      	movs	r0, #200	@ 0xc8
 8010816:	f7f3 f94d 	bl	8003ab4 <HAL_Delay>
  return USBH_OK;
 801081a:	2300      	movs	r3, #0
}
 801081c:	4618      	mov	r0, r3
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	70fb      	strb	r3, [r7, #3]
 8010830:	4613      	mov	r3, r2
 8010832:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801083a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	212c      	movs	r1, #44	@ 0x2c
 8010842:	fb01 f303 	mul.w	r3, r1, r3
 8010846:	4413      	add	r3, r2
 8010848:	333b      	adds	r3, #59	@ 0x3b
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d009      	beq.n	8010864 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010850:	78fb      	ldrb	r3, [r7, #3]
 8010852:	68fa      	ldr	r2, [r7, #12]
 8010854:	212c      	movs	r1, #44	@ 0x2c
 8010856:	fb01 f303 	mul.w	r3, r1, r3
 801085a:	4413      	add	r3, r2
 801085c:	3354      	adds	r3, #84	@ 0x54
 801085e:	78ba      	ldrb	r2, [r7, #2]
 8010860:	701a      	strb	r2, [r3, #0]
 8010862:	e008      	b.n	8010876 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010864:	78fb      	ldrb	r3, [r7, #3]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	212c      	movs	r1, #44	@ 0x2c
 801086a:	fb01 f303 	mul.w	r3, r1, r3
 801086e:	4413      	add	r3, r2
 8010870:	3355      	adds	r3, #85	@ 0x55
 8010872:	78ba      	ldrb	r2, [r7, #2]
 8010874:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7f3 f911 	bl	8003ab4 <HAL_Delay>
}
 8010892:	bf00      	nop
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
	...

0801089c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	4603      	mov	r3, r0
 80108a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108a6:	2300      	movs	r3, #0
 80108a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108aa:	79fb      	ldrb	r3, [r7, #7]
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	d817      	bhi.n	80108e0 <USBH_Get_USB_Status+0x44>
 80108b0:	a201      	add	r2, pc, #4	@ (adr r2, 80108b8 <USBH_Get_USB_Status+0x1c>)
 80108b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b6:	bf00      	nop
 80108b8:	080108c9 	.word	0x080108c9
 80108bc:	080108cf 	.word	0x080108cf
 80108c0:	080108d5 	.word	0x080108d5
 80108c4:	080108db 	.word	0x080108db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	73fb      	strb	r3, [r7, #15]
    break;
 80108cc:	e00b      	b.n	80108e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108ce:	2302      	movs	r3, #2
 80108d0:	73fb      	strb	r3, [r7, #15]
    break;
 80108d2:	e008      	b.n	80108e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108d4:	2301      	movs	r3, #1
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	e005      	b.n	80108e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108da:	2302      	movs	r3, #2
 80108dc:	73fb      	strb	r3, [r7, #15]
    break;
 80108de:	e002      	b.n	80108e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108e0:	2302      	movs	r3, #2
 80108e2:	73fb      	strb	r3, [r7, #15]
    break;
 80108e4:	bf00      	nop
  }
  return usb_status;
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3714      	adds	r7, #20
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	4603      	mov	r3, r0
 80108fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80108fe:	79fb      	ldrb	r3, [r7, #7]
 8010900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010902:	79fb      	ldrb	r3, [r7, #7]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d102      	bne.n	801090e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010908:	2301      	movs	r3, #1
 801090a:	73fb      	strb	r3, [r7, #15]
 801090c:	e001      	b.n	8010912 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801090e:	2300      	movs	r3, #0
 8010910:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010912:	7bfb      	ldrb	r3, [r7, #15]
 8010914:	461a      	mov	r2, r3
 8010916:	2101      	movs	r1, #1
 8010918:	4803      	ldr	r0, [pc, #12]	@ (8010928 <MX_DriverVbusFS+0x34>)
 801091a:	f7f3 fc17 	bl	800414c <HAL_GPIO_WritePin>
}
 801091e:	bf00      	nop
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	40020800 	.word	0x40020800

0801092c <atoi>:
 801092c:	220a      	movs	r2, #10
 801092e:	2100      	movs	r1, #0
 8010930:	f000 bf48 	b.w	80117c4 <strtol>

08010934 <malloc>:
 8010934:	4b02      	ldr	r3, [pc, #8]	@ (8010940 <malloc+0xc>)
 8010936:	4601      	mov	r1, r0
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	f000 b82d 	b.w	8010998 <_malloc_r>
 801093e:	bf00      	nop
 8010940:	200003d4 	.word	0x200003d4

08010944 <free>:
 8010944:	4b02      	ldr	r3, [pc, #8]	@ (8010950 <free+0xc>)
 8010946:	4601      	mov	r1, r0
 8010948:	6818      	ldr	r0, [r3, #0]
 801094a:	f002 bcad 	b.w	80132a8 <_free_r>
 801094e:	bf00      	nop
 8010950:	200003d4 	.word	0x200003d4

08010954 <sbrk_aligned>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	4e0f      	ldr	r6, [pc, #60]	@ (8010994 <sbrk_aligned+0x40>)
 8010958:	460c      	mov	r4, r1
 801095a:	6831      	ldr	r1, [r6, #0]
 801095c:	4605      	mov	r5, r0
 801095e:	b911      	cbnz	r1, 8010966 <sbrk_aligned+0x12>
 8010960:	f001 fdc8 	bl	80124f4 <_sbrk_r>
 8010964:	6030      	str	r0, [r6, #0]
 8010966:	4621      	mov	r1, r4
 8010968:	4628      	mov	r0, r5
 801096a:	f001 fdc3 	bl	80124f4 <_sbrk_r>
 801096e:	1c43      	adds	r3, r0, #1
 8010970:	d103      	bne.n	801097a <sbrk_aligned+0x26>
 8010972:	f04f 34ff 	mov.w	r4, #4294967295
 8010976:	4620      	mov	r0, r4
 8010978:	bd70      	pop	{r4, r5, r6, pc}
 801097a:	1cc4      	adds	r4, r0, #3
 801097c:	f024 0403 	bic.w	r4, r4, #3
 8010980:	42a0      	cmp	r0, r4
 8010982:	d0f8      	beq.n	8010976 <sbrk_aligned+0x22>
 8010984:	1a21      	subs	r1, r4, r0
 8010986:	4628      	mov	r0, r5
 8010988:	f001 fdb4 	bl	80124f4 <_sbrk_r>
 801098c:	3001      	adds	r0, #1
 801098e:	d1f2      	bne.n	8010976 <sbrk_aligned+0x22>
 8010990:	e7ef      	b.n	8010972 <sbrk_aligned+0x1e>
 8010992:	bf00      	nop
 8010994:	200058c8 	.word	0x200058c8

08010998 <_malloc_r>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	1ccd      	adds	r5, r1, #3
 801099e:	f025 0503 	bic.w	r5, r5, #3
 80109a2:	3508      	adds	r5, #8
 80109a4:	2d0c      	cmp	r5, #12
 80109a6:	bf38      	it	cc
 80109a8:	250c      	movcc	r5, #12
 80109aa:	2d00      	cmp	r5, #0
 80109ac:	4606      	mov	r6, r0
 80109ae:	db01      	blt.n	80109b4 <_malloc_r+0x1c>
 80109b0:	42a9      	cmp	r1, r5
 80109b2:	d904      	bls.n	80109be <_malloc_r+0x26>
 80109b4:	230c      	movs	r3, #12
 80109b6:	6033      	str	r3, [r6, #0]
 80109b8:	2000      	movs	r0, #0
 80109ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a94 <_malloc_r+0xfc>
 80109c2:	f000 f869 	bl	8010a98 <__malloc_lock>
 80109c6:	f8d8 3000 	ldr.w	r3, [r8]
 80109ca:	461c      	mov	r4, r3
 80109cc:	bb44      	cbnz	r4, 8010a20 <_malloc_r+0x88>
 80109ce:	4629      	mov	r1, r5
 80109d0:	4630      	mov	r0, r6
 80109d2:	f7ff ffbf 	bl	8010954 <sbrk_aligned>
 80109d6:	1c43      	adds	r3, r0, #1
 80109d8:	4604      	mov	r4, r0
 80109da:	d158      	bne.n	8010a8e <_malloc_r+0xf6>
 80109dc:	f8d8 4000 	ldr.w	r4, [r8]
 80109e0:	4627      	mov	r7, r4
 80109e2:	2f00      	cmp	r7, #0
 80109e4:	d143      	bne.n	8010a6e <_malloc_r+0xd6>
 80109e6:	2c00      	cmp	r4, #0
 80109e8:	d04b      	beq.n	8010a82 <_malloc_r+0xea>
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	4639      	mov	r1, r7
 80109ee:	4630      	mov	r0, r6
 80109f0:	eb04 0903 	add.w	r9, r4, r3
 80109f4:	f001 fd7e 	bl	80124f4 <_sbrk_r>
 80109f8:	4581      	cmp	r9, r0
 80109fa:	d142      	bne.n	8010a82 <_malloc_r+0xea>
 80109fc:	6821      	ldr	r1, [r4, #0]
 80109fe:	1a6d      	subs	r5, r5, r1
 8010a00:	4629      	mov	r1, r5
 8010a02:	4630      	mov	r0, r6
 8010a04:	f7ff ffa6 	bl	8010954 <sbrk_aligned>
 8010a08:	3001      	adds	r0, #1
 8010a0a:	d03a      	beq.n	8010a82 <_malloc_r+0xea>
 8010a0c:	6823      	ldr	r3, [r4, #0]
 8010a0e:	442b      	add	r3, r5
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	f8d8 3000 	ldr.w	r3, [r8]
 8010a16:	685a      	ldr	r2, [r3, #4]
 8010a18:	bb62      	cbnz	r2, 8010a74 <_malloc_r+0xdc>
 8010a1a:	f8c8 7000 	str.w	r7, [r8]
 8010a1e:	e00f      	b.n	8010a40 <_malloc_r+0xa8>
 8010a20:	6822      	ldr	r2, [r4, #0]
 8010a22:	1b52      	subs	r2, r2, r5
 8010a24:	d420      	bmi.n	8010a68 <_malloc_r+0xd0>
 8010a26:	2a0b      	cmp	r2, #11
 8010a28:	d917      	bls.n	8010a5a <_malloc_r+0xc2>
 8010a2a:	1961      	adds	r1, r4, r5
 8010a2c:	42a3      	cmp	r3, r4
 8010a2e:	6025      	str	r5, [r4, #0]
 8010a30:	bf18      	it	ne
 8010a32:	6059      	strne	r1, [r3, #4]
 8010a34:	6863      	ldr	r3, [r4, #4]
 8010a36:	bf08      	it	eq
 8010a38:	f8c8 1000 	streq.w	r1, [r8]
 8010a3c:	5162      	str	r2, [r4, r5]
 8010a3e:	604b      	str	r3, [r1, #4]
 8010a40:	4630      	mov	r0, r6
 8010a42:	f000 f82f 	bl	8010aa4 <__malloc_unlock>
 8010a46:	f104 000b 	add.w	r0, r4, #11
 8010a4a:	1d23      	adds	r3, r4, #4
 8010a4c:	f020 0007 	bic.w	r0, r0, #7
 8010a50:	1ac2      	subs	r2, r0, r3
 8010a52:	bf1c      	itt	ne
 8010a54:	1a1b      	subne	r3, r3, r0
 8010a56:	50a3      	strne	r3, [r4, r2]
 8010a58:	e7af      	b.n	80109ba <_malloc_r+0x22>
 8010a5a:	6862      	ldr	r2, [r4, #4]
 8010a5c:	42a3      	cmp	r3, r4
 8010a5e:	bf0c      	ite	eq
 8010a60:	f8c8 2000 	streq.w	r2, [r8]
 8010a64:	605a      	strne	r2, [r3, #4]
 8010a66:	e7eb      	b.n	8010a40 <_malloc_r+0xa8>
 8010a68:	4623      	mov	r3, r4
 8010a6a:	6864      	ldr	r4, [r4, #4]
 8010a6c:	e7ae      	b.n	80109cc <_malloc_r+0x34>
 8010a6e:	463c      	mov	r4, r7
 8010a70:	687f      	ldr	r7, [r7, #4]
 8010a72:	e7b6      	b.n	80109e2 <_malloc_r+0x4a>
 8010a74:	461a      	mov	r2, r3
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	42a3      	cmp	r3, r4
 8010a7a:	d1fb      	bne.n	8010a74 <_malloc_r+0xdc>
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	6053      	str	r3, [r2, #4]
 8010a80:	e7de      	b.n	8010a40 <_malloc_r+0xa8>
 8010a82:	230c      	movs	r3, #12
 8010a84:	6033      	str	r3, [r6, #0]
 8010a86:	4630      	mov	r0, r6
 8010a88:	f000 f80c 	bl	8010aa4 <__malloc_unlock>
 8010a8c:	e794      	b.n	80109b8 <_malloc_r+0x20>
 8010a8e:	6005      	str	r5, [r0, #0]
 8010a90:	e7d6      	b.n	8010a40 <_malloc_r+0xa8>
 8010a92:	bf00      	nop
 8010a94:	200058cc 	.word	0x200058cc

08010a98 <__malloc_lock>:
 8010a98:	4801      	ldr	r0, [pc, #4]	@ (8010aa0 <__malloc_lock+0x8>)
 8010a9a:	f001 bd78 	b.w	801258e <__retarget_lock_acquire_recursive>
 8010a9e:	bf00      	nop
 8010aa0:	20005a10 	.word	0x20005a10

08010aa4 <__malloc_unlock>:
 8010aa4:	4801      	ldr	r0, [pc, #4]	@ (8010aac <__malloc_unlock+0x8>)
 8010aa6:	f001 bd73 	b.w	8012590 <__retarget_lock_release_recursive>
 8010aaa:	bf00      	nop
 8010aac:	20005a10 	.word	0x20005a10

08010ab0 <sulp>:
 8010ab0:	b570      	push	{r4, r5, r6, lr}
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	460d      	mov	r5, r1
 8010ab6:	ec45 4b10 	vmov	d0, r4, r5
 8010aba:	4616      	mov	r6, r2
 8010abc:	f003 fafe 	bl	80140bc <__ulp>
 8010ac0:	ec51 0b10 	vmov	r0, r1, d0
 8010ac4:	b17e      	cbz	r6, 8010ae6 <sulp+0x36>
 8010ac6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010aca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dd09      	ble.n	8010ae6 <sulp+0x36>
 8010ad2:	051b      	lsls	r3, r3, #20
 8010ad4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010ad8:	2400      	movs	r4, #0
 8010ada:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010ade:	4622      	mov	r2, r4
 8010ae0:	462b      	mov	r3, r5
 8010ae2:	f7ef fd89 	bl	80005f8 <__aeabi_dmul>
 8010ae6:	ec41 0b10 	vmov	d0, r0, r1
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	0000      	movs	r0, r0
	...

08010af0 <_strtod_l>:
 8010af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	b09f      	sub	sp, #124	@ 0x7c
 8010af6:	460c      	mov	r4, r1
 8010af8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010afa:	2200      	movs	r2, #0
 8010afc:	921a      	str	r2, [sp, #104]	@ 0x68
 8010afe:	9005      	str	r0, [sp, #20]
 8010b00:	f04f 0a00 	mov.w	sl, #0
 8010b04:	f04f 0b00 	mov.w	fp, #0
 8010b08:	460a      	mov	r2, r1
 8010b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b0c:	7811      	ldrb	r1, [r2, #0]
 8010b0e:	292b      	cmp	r1, #43	@ 0x2b
 8010b10:	d04a      	beq.n	8010ba8 <_strtod_l+0xb8>
 8010b12:	d838      	bhi.n	8010b86 <_strtod_l+0x96>
 8010b14:	290d      	cmp	r1, #13
 8010b16:	d832      	bhi.n	8010b7e <_strtod_l+0x8e>
 8010b18:	2908      	cmp	r1, #8
 8010b1a:	d832      	bhi.n	8010b82 <_strtod_l+0x92>
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d03b      	beq.n	8010b98 <_strtod_l+0xa8>
 8010b20:	2200      	movs	r2, #0
 8010b22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010b26:	782a      	ldrb	r2, [r5, #0]
 8010b28:	2a30      	cmp	r2, #48	@ 0x30
 8010b2a:	f040 80b3 	bne.w	8010c94 <_strtod_l+0x1a4>
 8010b2e:	786a      	ldrb	r2, [r5, #1]
 8010b30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b34:	2a58      	cmp	r2, #88	@ 0x58
 8010b36:	d16e      	bne.n	8010c16 <_strtod_l+0x126>
 8010b38:	9302      	str	r3, [sp, #8]
 8010b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	4a8e      	ldr	r2, [pc, #568]	@ (8010d7c <_strtod_l+0x28c>)
 8010b44:	9805      	ldr	r0, [sp, #20]
 8010b46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010b48:	a919      	add	r1, sp, #100	@ 0x64
 8010b4a:	f002 fc5f 	bl	801340c <__gethex>
 8010b4e:	f010 060f 	ands.w	r6, r0, #15
 8010b52:	4604      	mov	r4, r0
 8010b54:	d005      	beq.n	8010b62 <_strtod_l+0x72>
 8010b56:	2e06      	cmp	r6, #6
 8010b58:	d128      	bne.n	8010bac <_strtod_l+0xbc>
 8010b5a:	3501      	adds	r5, #1
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f040 858e 	bne.w	8011686 <_strtod_l+0xb96>
 8010b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b6c:	b1cb      	cbz	r3, 8010ba2 <_strtod_l+0xb2>
 8010b6e:	4652      	mov	r2, sl
 8010b70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010b74:	ec43 2b10 	vmov	d0, r2, r3
 8010b78:	b01f      	add	sp, #124	@ 0x7c
 8010b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7e:	2920      	cmp	r1, #32
 8010b80:	d1ce      	bne.n	8010b20 <_strtod_l+0x30>
 8010b82:	3201      	adds	r2, #1
 8010b84:	e7c1      	b.n	8010b0a <_strtod_l+0x1a>
 8010b86:	292d      	cmp	r1, #45	@ 0x2d
 8010b88:	d1ca      	bne.n	8010b20 <_strtod_l+0x30>
 8010b8a:	2101      	movs	r1, #1
 8010b8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010b8e:	1c51      	adds	r1, r2, #1
 8010b90:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b92:	7852      	ldrb	r2, [r2, #1]
 8010b94:	2a00      	cmp	r2, #0
 8010b96:	d1c5      	bne.n	8010b24 <_strtod_l+0x34>
 8010b98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f040 8570 	bne.w	8011682 <_strtod_l+0xb92>
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	465b      	mov	r3, fp
 8010ba6:	e7e5      	b.n	8010b74 <_strtod_l+0x84>
 8010ba8:	2100      	movs	r1, #0
 8010baa:	e7ef      	b.n	8010b8c <_strtod_l+0x9c>
 8010bac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010bae:	b13a      	cbz	r2, 8010bc0 <_strtod_l+0xd0>
 8010bb0:	2135      	movs	r1, #53	@ 0x35
 8010bb2:	a81c      	add	r0, sp, #112	@ 0x70
 8010bb4:	f003 fb7c 	bl	80142b0 <__copybits>
 8010bb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bba:	9805      	ldr	r0, [sp, #20]
 8010bbc:	f002 ff4a 	bl	8013a54 <_Bfree>
 8010bc0:	3e01      	subs	r6, #1
 8010bc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010bc4:	2e04      	cmp	r6, #4
 8010bc6:	d806      	bhi.n	8010bd6 <_strtod_l+0xe6>
 8010bc8:	e8df f006 	tbb	[pc, r6]
 8010bcc:	201d0314 	.word	0x201d0314
 8010bd0:	14          	.byte	0x14
 8010bd1:	00          	.byte	0x00
 8010bd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010bd6:	05e1      	lsls	r1, r4, #23
 8010bd8:	bf48      	it	mi
 8010bda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010bde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010be2:	0d1b      	lsrs	r3, r3, #20
 8010be4:	051b      	lsls	r3, r3, #20
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1bb      	bne.n	8010b62 <_strtod_l+0x72>
 8010bea:	f001 fca5 	bl	8012538 <__errno>
 8010bee:	2322      	movs	r3, #34	@ 0x22
 8010bf0:	6003      	str	r3, [r0, #0]
 8010bf2:	e7b6      	b.n	8010b62 <_strtod_l+0x72>
 8010bf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010bf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010bfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010c00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010c04:	e7e7      	b.n	8010bd6 <_strtod_l+0xe6>
 8010c06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010d84 <_strtod_l+0x294>
 8010c0a:	e7e4      	b.n	8010bd6 <_strtod_l+0xe6>
 8010c0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010c10:	f04f 3aff 	mov.w	sl, #4294967295
 8010c14:	e7df      	b.n	8010bd6 <_strtod_l+0xe6>
 8010c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c1c:	785b      	ldrb	r3, [r3, #1]
 8010c1e:	2b30      	cmp	r3, #48	@ 0x30
 8010c20:	d0f9      	beq.n	8010c16 <_strtod_l+0x126>
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d09d      	beq.n	8010b62 <_strtod_l+0x72>
 8010c26:	2301      	movs	r3, #1
 8010c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c2e:	2300      	movs	r3, #0
 8010c30:	9308      	str	r3, [sp, #32]
 8010c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c34:	461f      	mov	r7, r3
 8010c36:	220a      	movs	r2, #10
 8010c38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010c3a:	7805      	ldrb	r5, [r0, #0]
 8010c3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010c40:	b2d9      	uxtb	r1, r3
 8010c42:	2909      	cmp	r1, #9
 8010c44:	d928      	bls.n	8010c98 <_strtod_l+0x1a8>
 8010c46:	494e      	ldr	r1, [pc, #312]	@ (8010d80 <_strtod_l+0x290>)
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f001 fb57 	bl	80122fc <strncmp>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d032      	beq.n	8010cb8 <_strtod_l+0x1c8>
 8010c52:	2000      	movs	r0, #0
 8010c54:	462a      	mov	r2, r5
 8010c56:	4681      	mov	r9, r0
 8010c58:	463d      	mov	r5, r7
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2a65      	cmp	r2, #101	@ 0x65
 8010c5e:	d001      	beq.n	8010c64 <_strtod_l+0x174>
 8010c60:	2a45      	cmp	r2, #69	@ 0x45
 8010c62:	d114      	bne.n	8010c8e <_strtod_l+0x19e>
 8010c64:	b91d      	cbnz	r5, 8010c6e <_strtod_l+0x17e>
 8010c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c68:	4302      	orrs	r2, r0
 8010c6a:	d095      	beq.n	8010b98 <_strtod_l+0xa8>
 8010c6c:	2500      	movs	r5, #0
 8010c6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010c70:	1c62      	adds	r2, r4, #1
 8010c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c74:	7862      	ldrb	r2, [r4, #1]
 8010c76:	2a2b      	cmp	r2, #43	@ 0x2b
 8010c78:	d077      	beq.n	8010d6a <_strtod_l+0x27a>
 8010c7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010c7c:	d07b      	beq.n	8010d76 <_strtod_l+0x286>
 8010c7e:	f04f 0c00 	mov.w	ip, #0
 8010c82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010c86:	2909      	cmp	r1, #9
 8010c88:	f240 8082 	bls.w	8010d90 <_strtod_l+0x2a0>
 8010c8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c8e:	f04f 0800 	mov.w	r8, #0
 8010c92:	e0a2      	b.n	8010dda <_strtod_l+0x2ea>
 8010c94:	2300      	movs	r3, #0
 8010c96:	e7c7      	b.n	8010c28 <_strtod_l+0x138>
 8010c98:	2f08      	cmp	r7, #8
 8010c9a:	bfd5      	itete	le
 8010c9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010c9e:	9908      	ldrgt	r1, [sp, #32]
 8010ca0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ca4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010ca8:	f100 0001 	add.w	r0, r0, #1
 8010cac:	bfd4      	ite	le
 8010cae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010cb0:	9308      	strgt	r3, [sp, #32]
 8010cb2:	3701      	adds	r7, #1
 8010cb4:	9019      	str	r0, [sp, #100]	@ 0x64
 8010cb6:	e7bf      	b.n	8010c38 <_strtod_l+0x148>
 8010cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010cbe:	785a      	ldrb	r2, [r3, #1]
 8010cc0:	b37f      	cbz	r7, 8010d22 <_strtod_l+0x232>
 8010cc2:	4681      	mov	r9, r0
 8010cc4:	463d      	mov	r5, r7
 8010cc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010cca:	2b09      	cmp	r3, #9
 8010ccc:	d912      	bls.n	8010cf4 <_strtod_l+0x204>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e7c4      	b.n	8010c5c <_strtod_l+0x16c>
 8010cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010cd8:	785a      	ldrb	r2, [r3, #1]
 8010cda:	3001      	adds	r0, #1
 8010cdc:	2a30      	cmp	r2, #48	@ 0x30
 8010cde:	d0f8      	beq.n	8010cd2 <_strtod_l+0x1e2>
 8010ce0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010ce4:	2b08      	cmp	r3, #8
 8010ce6:	f200 84d3 	bhi.w	8011690 <_strtod_l+0xba0>
 8010cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cee:	4681      	mov	r9, r0
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	3a30      	subs	r2, #48	@ 0x30
 8010cf6:	f100 0301 	add.w	r3, r0, #1
 8010cfa:	d02a      	beq.n	8010d52 <_strtod_l+0x262>
 8010cfc:	4499      	add	r9, r3
 8010cfe:	eb00 0c05 	add.w	ip, r0, r5
 8010d02:	462b      	mov	r3, r5
 8010d04:	210a      	movs	r1, #10
 8010d06:	4563      	cmp	r3, ip
 8010d08:	d10d      	bne.n	8010d26 <_strtod_l+0x236>
 8010d0a:	1c69      	adds	r1, r5, #1
 8010d0c:	4401      	add	r1, r0
 8010d0e:	4428      	add	r0, r5
 8010d10:	2808      	cmp	r0, #8
 8010d12:	dc16      	bgt.n	8010d42 <_strtod_l+0x252>
 8010d14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010d16:	230a      	movs	r3, #10
 8010d18:	fb03 2300 	mla	r3, r3, r0, r2
 8010d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d1e:	2300      	movs	r3, #0
 8010d20:	e018      	b.n	8010d54 <_strtod_l+0x264>
 8010d22:	4638      	mov	r0, r7
 8010d24:	e7da      	b.n	8010cdc <_strtod_l+0x1ec>
 8010d26:	2b08      	cmp	r3, #8
 8010d28:	f103 0301 	add.w	r3, r3, #1
 8010d2c:	dc03      	bgt.n	8010d36 <_strtod_l+0x246>
 8010d2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010d30:	434e      	muls	r6, r1
 8010d32:	960a      	str	r6, [sp, #40]	@ 0x28
 8010d34:	e7e7      	b.n	8010d06 <_strtod_l+0x216>
 8010d36:	2b10      	cmp	r3, #16
 8010d38:	bfde      	ittt	le
 8010d3a:	9e08      	ldrle	r6, [sp, #32]
 8010d3c:	434e      	mulle	r6, r1
 8010d3e:	9608      	strle	r6, [sp, #32]
 8010d40:	e7e1      	b.n	8010d06 <_strtod_l+0x216>
 8010d42:	280f      	cmp	r0, #15
 8010d44:	dceb      	bgt.n	8010d1e <_strtod_l+0x22e>
 8010d46:	9808      	ldr	r0, [sp, #32]
 8010d48:	230a      	movs	r3, #10
 8010d4a:	fb03 2300 	mla	r3, r3, r0, r2
 8010d4e:	9308      	str	r3, [sp, #32]
 8010d50:	e7e5      	b.n	8010d1e <_strtod_l+0x22e>
 8010d52:	4629      	mov	r1, r5
 8010d54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d56:	1c50      	adds	r0, r2, #1
 8010d58:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d5a:	7852      	ldrb	r2, [r2, #1]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	460d      	mov	r5, r1
 8010d60:	e7b1      	b.n	8010cc6 <_strtod_l+0x1d6>
 8010d62:	f04f 0900 	mov.w	r9, #0
 8010d66:	2301      	movs	r3, #1
 8010d68:	e77d      	b.n	8010c66 <_strtod_l+0x176>
 8010d6a:	f04f 0c00 	mov.w	ip, #0
 8010d6e:	1ca2      	adds	r2, r4, #2
 8010d70:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d72:	78a2      	ldrb	r2, [r4, #2]
 8010d74:	e785      	b.n	8010c82 <_strtod_l+0x192>
 8010d76:	f04f 0c01 	mov.w	ip, #1
 8010d7a:	e7f8      	b.n	8010d6e <_strtod_l+0x27e>
 8010d7c:	080157d8 	.word	0x080157d8
 8010d80:	080157c0 	.word	0x080157c0
 8010d84:	7ff00000 	.word	0x7ff00000
 8010d88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d8a:	1c51      	adds	r1, r2, #1
 8010d8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010d8e:	7852      	ldrb	r2, [r2, #1]
 8010d90:	2a30      	cmp	r2, #48	@ 0x30
 8010d92:	d0f9      	beq.n	8010d88 <_strtod_l+0x298>
 8010d94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010d98:	2908      	cmp	r1, #8
 8010d9a:	f63f af78 	bhi.w	8010c8e <_strtod_l+0x19e>
 8010d9e:	3a30      	subs	r2, #48	@ 0x30
 8010da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010da2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010da4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010da6:	f04f 080a 	mov.w	r8, #10
 8010daa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010dac:	1c56      	adds	r6, r2, #1
 8010dae:	9619      	str	r6, [sp, #100]	@ 0x64
 8010db0:	7852      	ldrb	r2, [r2, #1]
 8010db2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010db6:	f1be 0f09 	cmp.w	lr, #9
 8010dba:	d939      	bls.n	8010e30 <_strtod_l+0x340>
 8010dbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dbe:	1a76      	subs	r6, r6, r1
 8010dc0:	2e08      	cmp	r6, #8
 8010dc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010dc6:	dc03      	bgt.n	8010dd0 <_strtod_l+0x2e0>
 8010dc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010dca:	4588      	cmp	r8, r1
 8010dcc:	bfa8      	it	ge
 8010dce:	4688      	movge	r8, r1
 8010dd0:	f1bc 0f00 	cmp.w	ip, #0
 8010dd4:	d001      	beq.n	8010dda <_strtod_l+0x2ea>
 8010dd6:	f1c8 0800 	rsb	r8, r8, #0
 8010dda:	2d00      	cmp	r5, #0
 8010ddc:	d14e      	bne.n	8010e7c <_strtod_l+0x38c>
 8010dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010de0:	4308      	orrs	r0, r1
 8010de2:	f47f aebe 	bne.w	8010b62 <_strtod_l+0x72>
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f47f aed6 	bne.w	8010b98 <_strtod_l+0xa8>
 8010dec:	2a69      	cmp	r2, #105	@ 0x69
 8010dee:	d028      	beq.n	8010e42 <_strtod_l+0x352>
 8010df0:	dc25      	bgt.n	8010e3e <_strtod_l+0x34e>
 8010df2:	2a49      	cmp	r2, #73	@ 0x49
 8010df4:	d025      	beq.n	8010e42 <_strtod_l+0x352>
 8010df6:	2a4e      	cmp	r2, #78	@ 0x4e
 8010df8:	f47f aece 	bne.w	8010b98 <_strtod_l+0xa8>
 8010dfc:	499b      	ldr	r1, [pc, #620]	@ (801106c <_strtod_l+0x57c>)
 8010dfe:	a819      	add	r0, sp, #100	@ 0x64
 8010e00:	f002 fd26 	bl	8013850 <__match>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	f43f aec7 	beq.w	8010b98 <_strtod_l+0xa8>
 8010e0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b28      	cmp	r3, #40	@ 0x28
 8010e10:	d12e      	bne.n	8010e70 <_strtod_l+0x380>
 8010e12:	4997      	ldr	r1, [pc, #604]	@ (8011070 <_strtod_l+0x580>)
 8010e14:	aa1c      	add	r2, sp, #112	@ 0x70
 8010e16:	a819      	add	r0, sp, #100	@ 0x64
 8010e18:	f002 fd2e 	bl	8013878 <__hexnan>
 8010e1c:	2805      	cmp	r0, #5
 8010e1e:	d127      	bne.n	8010e70 <_strtod_l+0x380>
 8010e20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010e26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010e2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010e2e:	e698      	b.n	8010b62 <_strtod_l+0x72>
 8010e30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e32:	fb08 2101 	mla	r1, r8, r1, r2
 8010e36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010e3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e3c:	e7b5      	b.n	8010daa <_strtod_l+0x2ba>
 8010e3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010e40:	e7da      	b.n	8010df8 <_strtod_l+0x308>
 8010e42:	498c      	ldr	r1, [pc, #560]	@ (8011074 <_strtod_l+0x584>)
 8010e44:	a819      	add	r0, sp, #100	@ 0x64
 8010e46:	f002 fd03 	bl	8013850 <__match>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	f43f aea4 	beq.w	8010b98 <_strtod_l+0xa8>
 8010e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e52:	4989      	ldr	r1, [pc, #548]	@ (8011078 <_strtod_l+0x588>)
 8010e54:	3b01      	subs	r3, #1
 8010e56:	a819      	add	r0, sp, #100	@ 0x64
 8010e58:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e5a:	f002 fcf9 	bl	8013850 <__match>
 8010e5e:	b910      	cbnz	r0, 8010e66 <_strtod_l+0x376>
 8010e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e62:	3301      	adds	r3, #1
 8010e64:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011088 <_strtod_l+0x598>
 8010e6a:	f04f 0a00 	mov.w	sl, #0
 8010e6e:	e678      	b.n	8010b62 <_strtod_l+0x72>
 8010e70:	4882      	ldr	r0, [pc, #520]	@ (801107c <_strtod_l+0x58c>)
 8010e72:	f001 fba5 	bl	80125c0 <nan>
 8010e76:	ec5b ab10 	vmov	sl, fp, d0
 8010e7a:	e672      	b.n	8010b62 <_strtod_l+0x72>
 8010e7c:	eba8 0309 	sub.w	r3, r8, r9
 8010e80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e84:	2f00      	cmp	r7, #0
 8010e86:	bf08      	it	eq
 8010e88:	462f      	moveq	r7, r5
 8010e8a:	2d10      	cmp	r5, #16
 8010e8c:	462c      	mov	r4, r5
 8010e8e:	bfa8      	it	ge
 8010e90:	2410      	movge	r4, #16
 8010e92:	f7ef fb37 	bl	8000504 <__aeabi_ui2d>
 8010e96:	2d09      	cmp	r5, #9
 8010e98:	4682      	mov	sl, r0
 8010e9a:	468b      	mov	fp, r1
 8010e9c:	dc13      	bgt.n	8010ec6 <_strtod_l+0x3d6>
 8010e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f43f ae5e 	beq.w	8010b62 <_strtod_l+0x72>
 8010ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea8:	dd78      	ble.n	8010f9c <_strtod_l+0x4ac>
 8010eaa:	2b16      	cmp	r3, #22
 8010eac:	dc5f      	bgt.n	8010f6e <_strtod_l+0x47e>
 8010eae:	4974      	ldr	r1, [pc, #464]	@ (8011080 <_strtod_l+0x590>)
 8010eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eb8:	4652      	mov	r2, sl
 8010eba:	465b      	mov	r3, fp
 8010ebc:	f7ef fb9c 	bl	80005f8 <__aeabi_dmul>
 8010ec0:	4682      	mov	sl, r0
 8010ec2:	468b      	mov	fp, r1
 8010ec4:	e64d      	b.n	8010b62 <_strtod_l+0x72>
 8010ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8011080 <_strtod_l+0x590>)
 8010ec8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ecc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010ed0:	f7ef fb92 	bl	80005f8 <__aeabi_dmul>
 8010ed4:	4682      	mov	sl, r0
 8010ed6:	9808      	ldr	r0, [sp, #32]
 8010ed8:	468b      	mov	fp, r1
 8010eda:	f7ef fb13 	bl	8000504 <__aeabi_ui2d>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4650      	mov	r0, sl
 8010ee4:	4659      	mov	r1, fp
 8010ee6:	f7ef f9d1 	bl	800028c <__adddf3>
 8010eea:	2d0f      	cmp	r5, #15
 8010eec:	4682      	mov	sl, r0
 8010eee:	468b      	mov	fp, r1
 8010ef0:	ddd5      	ble.n	8010e9e <_strtod_l+0x3ae>
 8010ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ef4:	1b2c      	subs	r4, r5, r4
 8010ef6:	441c      	add	r4, r3
 8010ef8:	2c00      	cmp	r4, #0
 8010efa:	f340 8096 	ble.w	801102a <_strtod_l+0x53a>
 8010efe:	f014 030f 	ands.w	r3, r4, #15
 8010f02:	d00a      	beq.n	8010f1a <_strtod_l+0x42a>
 8010f04:	495e      	ldr	r1, [pc, #376]	@ (8011080 <_strtod_l+0x590>)
 8010f06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f0a:	4652      	mov	r2, sl
 8010f0c:	465b      	mov	r3, fp
 8010f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f12:	f7ef fb71 	bl	80005f8 <__aeabi_dmul>
 8010f16:	4682      	mov	sl, r0
 8010f18:	468b      	mov	fp, r1
 8010f1a:	f034 040f 	bics.w	r4, r4, #15
 8010f1e:	d073      	beq.n	8011008 <_strtod_l+0x518>
 8010f20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010f24:	dd48      	ble.n	8010fb8 <_strtod_l+0x4c8>
 8010f26:	2400      	movs	r4, #0
 8010f28:	46a0      	mov	r8, r4
 8010f2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8010f2c:	46a1      	mov	r9, r4
 8010f2e:	9a05      	ldr	r2, [sp, #20]
 8010f30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011088 <_strtod_l+0x598>
 8010f34:	2322      	movs	r3, #34	@ 0x22
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	f04f 0a00 	mov.w	sl, #0
 8010f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f43f ae0f 	beq.w	8010b62 <_strtod_l+0x72>
 8010f44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f46:	9805      	ldr	r0, [sp, #20]
 8010f48:	f002 fd84 	bl	8013a54 <_Bfree>
 8010f4c:	9805      	ldr	r0, [sp, #20]
 8010f4e:	4649      	mov	r1, r9
 8010f50:	f002 fd80 	bl	8013a54 <_Bfree>
 8010f54:	9805      	ldr	r0, [sp, #20]
 8010f56:	4641      	mov	r1, r8
 8010f58:	f002 fd7c 	bl	8013a54 <_Bfree>
 8010f5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f5e:	9805      	ldr	r0, [sp, #20]
 8010f60:	f002 fd78 	bl	8013a54 <_Bfree>
 8010f64:	9805      	ldr	r0, [sp, #20]
 8010f66:	4621      	mov	r1, r4
 8010f68:	f002 fd74 	bl	8013a54 <_Bfree>
 8010f6c:	e5f9      	b.n	8010b62 <_strtod_l+0x72>
 8010f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010f74:	4293      	cmp	r3, r2
 8010f76:	dbbc      	blt.n	8010ef2 <_strtod_l+0x402>
 8010f78:	4c41      	ldr	r4, [pc, #260]	@ (8011080 <_strtod_l+0x590>)
 8010f7a:	f1c5 050f 	rsb	r5, r5, #15
 8010f7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010f82:	4652      	mov	r2, sl
 8010f84:	465b      	mov	r3, fp
 8010f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f8a:	f7ef fb35 	bl	80005f8 <__aeabi_dmul>
 8010f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f90:	1b5d      	subs	r5, r3, r5
 8010f92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010f96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010f9a:	e78f      	b.n	8010ebc <_strtod_l+0x3cc>
 8010f9c:	3316      	adds	r3, #22
 8010f9e:	dba8      	blt.n	8010ef2 <_strtod_l+0x402>
 8010fa0:	4b37      	ldr	r3, [pc, #220]	@ (8011080 <_strtod_l+0x590>)
 8010fa2:	eba9 0808 	sub.w	r8, r9, r8
 8010fa6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010faa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010fae:	4650      	mov	r0, sl
 8010fb0:	4659      	mov	r1, fp
 8010fb2:	f7ef fc4b 	bl	800084c <__aeabi_ddiv>
 8010fb6:	e783      	b.n	8010ec0 <_strtod_l+0x3d0>
 8010fb8:	4b32      	ldr	r3, [pc, #200]	@ (8011084 <_strtod_l+0x594>)
 8010fba:	9308      	str	r3, [sp, #32]
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	1124      	asrs	r4, r4, #4
 8010fc0:	4650      	mov	r0, sl
 8010fc2:	4659      	mov	r1, fp
 8010fc4:	461e      	mov	r6, r3
 8010fc6:	2c01      	cmp	r4, #1
 8010fc8:	dc21      	bgt.n	801100e <_strtod_l+0x51e>
 8010fca:	b10b      	cbz	r3, 8010fd0 <_strtod_l+0x4e0>
 8010fcc:	4682      	mov	sl, r0
 8010fce:	468b      	mov	fp, r1
 8010fd0:	492c      	ldr	r1, [pc, #176]	@ (8011084 <_strtod_l+0x594>)
 8010fd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010fd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010fda:	4652      	mov	r2, sl
 8010fdc:	465b      	mov	r3, fp
 8010fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe2:	f7ef fb09 	bl	80005f8 <__aeabi_dmul>
 8010fe6:	4b28      	ldr	r3, [pc, #160]	@ (8011088 <_strtod_l+0x598>)
 8010fe8:	460a      	mov	r2, r1
 8010fea:	400b      	ands	r3, r1
 8010fec:	4927      	ldr	r1, [pc, #156]	@ (801108c <_strtod_l+0x59c>)
 8010fee:	428b      	cmp	r3, r1
 8010ff0:	4682      	mov	sl, r0
 8010ff2:	d898      	bhi.n	8010f26 <_strtod_l+0x436>
 8010ff4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010ff8:	428b      	cmp	r3, r1
 8010ffa:	bf86      	itte	hi
 8010ffc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011090 <_strtod_l+0x5a0>
 8011000:	f04f 3aff 	movhi.w	sl, #4294967295
 8011004:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011008:	2300      	movs	r3, #0
 801100a:	9308      	str	r3, [sp, #32]
 801100c:	e07a      	b.n	8011104 <_strtod_l+0x614>
 801100e:	07e2      	lsls	r2, r4, #31
 8011010:	d505      	bpl.n	801101e <_strtod_l+0x52e>
 8011012:	9b08      	ldr	r3, [sp, #32]
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f7ef faee 	bl	80005f8 <__aeabi_dmul>
 801101c:	2301      	movs	r3, #1
 801101e:	9a08      	ldr	r2, [sp, #32]
 8011020:	3208      	adds	r2, #8
 8011022:	3601      	adds	r6, #1
 8011024:	1064      	asrs	r4, r4, #1
 8011026:	9208      	str	r2, [sp, #32]
 8011028:	e7cd      	b.n	8010fc6 <_strtod_l+0x4d6>
 801102a:	d0ed      	beq.n	8011008 <_strtod_l+0x518>
 801102c:	4264      	negs	r4, r4
 801102e:	f014 020f 	ands.w	r2, r4, #15
 8011032:	d00a      	beq.n	801104a <_strtod_l+0x55a>
 8011034:	4b12      	ldr	r3, [pc, #72]	@ (8011080 <_strtod_l+0x590>)
 8011036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801103a:	4650      	mov	r0, sl
 801103c:	4659      	mov	r1, fp
 801103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011042:	f7ef fc03 	bl	800084c <__aeabi_ddiv>
 8011046:	4682      	mov	sl, r0
 8011048:	468b      	mov	fp, r1
 801104a:	1124      	asrs	r4, r4, #4
 801104c:	d0dc      	beq.n	8011008 <_strtod_l+0x518>
 801104e:	2c1f      	cmp	r4, #31
 8011050:	dd20      	ble.n	8011094 <_strtod_l+0x5a4>
 8011052:	2400      	movs	r4, #0
 8011054:	46a0      	mov	r8, r4
 8011056:	940a      	str	r4, [sp, #40]	@ 0x28
 8011058:	46a1      	mov	r9, r4
 801105a:	9a05      	ldr	r2, [sp, #20]
 801105c:	2322      	movs	r3, #34	@ 0x22
 801105e:	f04f 0a00 	mov.w	sl, #0
 8011062:	f04f 0b00 	mov.w	fp, #0
 8011066:	6013      	str	r3, [r2, #0]
 8011068:	e768      	b.n	8010f3c <_strtod_l+0x44c>
 801106a:	bf00      	nop
 801106c:	08015926 	.word	0x08015926
 8011070:	080157c4 	.word	0x080157c4
 8011074:	0801591e 	.word	0x0801591e
 8011078:	08015a05 	.word	0x08015a05
 801107c:	08015a01 	.word	0x08015a01
 8011080:	08015b68 	.word	0x08015b68
 8011084:	08015b40 	.word	0x08015b40
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	7ca00000 	.word	0x7ca00000
 8011090:	7fefffff 	.word	0x7fefffff
 8011094:	f014 0310 	ands.w	r3, r4, #16
 8011098:	bf18      	it	ne
 801109a:	236a      	movne	r3, #106	@ 0x6a
 801109c:	4ea9      	ldr	r6, [pc, #676]	@ (8011344 <_strtod_l+0x854>)
 801109e:	9308      	str	r3, [sp, #32]
 80110a0:	4650      	mov	r0, sl
 80110a2:	4659      	mov	r1, fp
 80110a4:	2300      	movs	r3, #0
 80110a6:	07e2      	lsls	r2, r4, #31
 80110a8:	d504      	bpl.n	80110b4 <_strtod_l+0x5c4>
 80110aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80110ae:	f7ef faa3 	bl	80005f8 <__aeabi_dmul>
 80110b2:	2301      	movs	r3, #1
 80110b4:	1064      	asrs	r4, r4, #1
 80110b6:	f106 0608 	add.w	r6, r6, #8
 80110ba:	d1f4      	bne.n	80110a6 <_strtod_l+0x5b6>
 80110bc:	b10b      	cbz	r3, 80110c2 <_strtod_l+0x5d2>
 80110be:	4682      	mov	sl, r0
 80110c0:	468b      	mov	fp, r1
 80110c2:	9b08      	ldr	r3, [sp, #32]
 80110c4:	b1b3      	cbz	r3, 80110f4 <_strtod_l+0x604>
 80110c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80110ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	4659      	mov	r1, fp
 80110d2:	dd0f      	ble.n	80110f4 <_strtod_l+0x604>
 80110d4:	2b1f      	cmp	r3, #31
 80110d6:	dd55      	ble.n	8011184 <_strtod_l+0x694>
 80110d8:	2b34      	cmp	r3, #52	@ 0x34
 80110da:	bfde      	ittt	le
 80110dc:	f04f 33ff 	movle.w	r3, #4294967295
 80110e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80110e4:	4093      	lslle	r3, r2
 80110e6:	f04f 0a00 	mov.w	sl, #0
 80110ea:	bfcc      	ite	gt
 80110ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80110f0:	ea03 0b01 	andle.w	fp, r3, r1
 80110f4:	2200      	movs	r2, #0
 80110f6:	2300      	movs	r3, #0
 80110f8:	4650      	mov	r0, sl
 80110fa:	4659      	mov	r1, fp
 80110fc:	f7ef fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011100:	2800      	cmp	r0, #0
 8011102:	d1a6      	bne.n	8011052 <_strtod_l+0x562>
 8011104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801110a:	9805      	ldr	r0, [sp, #20]
 801110c:	462b      	mov	r3, r5
 801110e:	463a      	mov	r2, r7
 8011110:	f002 fd08 	bl	8013b24 <__s2b>
 8011114:	900a      	str	r0, [sp, #40]	@ 0x28
 8011116:	2800      	cmp	r0, #0
 8011118:	f43f af05 	beq.w	8010f26 <_strtod_l+0x436>
 801111c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801111e:	2a00      	cmp	r2, #0
 8011120:	eba9 0308 	sub.w	r3, r9, r8
 8011124:	bfa8      	it	ge
 8011126:	2300      	movge	r3, #0
 8011128:	9312      	str	r3, [sp, #72]	@ 0x48
 801112a:	2400      	movs	r4, #0
 801112c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011130:	9316      	str	r3, [sp, #88]	@ 0x58
 8011132:	46a0      	mov	r8, r4
 8011134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011136:	9805      	ldr	r0, [sp, #20]
 8011138:	6859      	ldr	r1, [r3, #4]
 801113a:	f002 fc4b 	bl	80139d4 <_Balloc>
 801113e:	4681      	mov	r9, r0
 8011140:	2800      	cmp	r0, #0
 8011142:	f43f aef4 	beq.w	8010f2e <_strtod_l+0x43e>
 8011146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011148:	691a      	ldr	r2, [r3, #16]
 801114a:	3202      	adds	r2, #2
 801114c:	f103 010c 	add.w	r1, r3, #12
 8011150:	0092      	lsls	r2, r2, #2
 8011152:	300c      	adds	r0, #12
 8011154:	f001 fa25 	bl	80125a2 <memcpy>
 8011158:	ec4b ab10 	vmov	d0, sl, fp
 801115c:	9805      	ldr	r0, [sp, #20]
 801115e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011160:	a91b      	add	r1, sp, #108	@ 0x6c
 8011162:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011166:	f003 f819 	bl	801419c <__d2b>
 801116a:	901a      	str	r0, [sp, #104]	@ 0x68
 801116c:	2800      	cmp	r0, #0
 801116e:	f43f aede 	beq.w	8010f2e <_strtod_l+0x43e>
 8011172:	9805      	ldr	r0, [sp, #20]
 8011174:	2101      	movs	r1, #1
 8011176:	f002 fd6b 	bl	8013c50 <__i2b>
 801117a:	4680      	mov	r8, r0
 801117c:	b948      	cbnz	r0, 8011192 <_strtod_l+0x6a2>
 801117e:	f04f 0800 	mov.w	r8, #0
 8011182:	e6d4      	b.n	8010f2e <_strtod_l+0x43e>
 8011184:	f04f 32ff 	mov.w	r2, #4294967295
 8011188:	fa02 f303 	lsl.w	r3, r2, r3
 801118c:	ea03 0a0a 	and.w	sl, r3, sl
 8011190:	e7b0      	b.n	80110f4 <_strtod_l+0x604>
 8011192:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011194:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011196:	2d00      	cmp	r5, #0
 8011198:	bfab      	itete	ge
 801119a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801119c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801119e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80111a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80111a2:	bfac      	ite	ge
 80111a4:	18ef      	addge	r7, r5, r3
 80111a6:	1b5e      	sublt	r6, r3, r5
 80111a8:	9b08      	ldr	r3, [sp, #32]
 80111aa:	1aed      	subs	r5, r5, r3
 80111ac:	4415      	add	r5, r2
 80111ae:	4b66      	ldr	r3, [pc, #408]	@ (8011348 <_strtod_l+0x858>)
 80111b0:	3d01      	subs	r5, #1
 80111b2:	429d      	cmp	r5, r3
 80111b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80111b8:	da50      	bge.n	801125c <_strtod_l+0x76c>
 80111ba:	1b5b      	subs	r3, r3, r5
 80111bc:	2b1f      	cmp	r3, #31
 80111be:	eba2 0203 	sub.w	r2, r2, r3
 80111c2:	f04f 0101 	mov.w	r1, #1
 80111c6:	dc3d      	bgt.n	8011244 <_strtod_l+0x754>
 80111c8:	fa01 f303 	lsl.w	r3, r1, r3
 80111cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80111ce:	2300      	movs	r3, #0
 80111d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80111d2:	18bd      	adds	r5, r7, r2
 80111d4:	9b08      	ldr	r3, [sp, #32]
 80111d6:	42af      	cmp	r7, r5
 80111d8:	4416      	add	r6, r2
 80111da:	441e      	add	r6, r3
 80111dc:	463b      	mov	r3, r7
 80111de:	bfa8      	it	ge
 80111e0:	462b      	movge	r3, r5
 80111e2:	42b3      	cmp	r3, r6
 80111e4:	bfa8      	it	ge
 80111e6:	4633      	movge	r3, r6
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	bfc2      	ittt	gt
 80111ec:	1aed      	subgt	r5, r5, r3
 80111ee:	1af6      	subgt	r6, r6, r3
 80111f0:	1aff      	subgt	r7, r7, r3
 80111f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	dd16      	ble.n	8011226 <_strtod_l+0x736>
 80111f8:	4641      	mov	r1, r8
 80111fa:	9805      	ldr	r0, [sp, #20]
 80111fc:	461a      	mov	r2, r3
 80111fe:	f002 fde7 	bl	8013dd0 <__pow5mult>
 8011202:	4680      	mov	r8, r0
 8011204:	2800      	cmp	r0, #0
 8011206:	d0ba      	beq.n	801117e <_strtod_l+0x68e>
 8011208:	4601      	mov	r1, r0
 801120a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801120c:	9805      	ldr	r0, [sp, #20]
 801120e:	f002 fd35 	bl	8013c7c <__multiply>
 8011212:	900e      	str	r0, [sp, #56]	@ 0x38
 8011214:	2800      	cmp	r0, #0
 8011216:	f43f ae8a 	beq.w	8010f2e <_strtod_l+0x43e>
 801121a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801121c:	9805      	ldr	r0, [sp, #20]
 801121e:	f002 fc19 	bl	8013a54 <_Bfree>
 8011222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011224:	931a      	str	r3, [sp, #104]	@ 0x68
 8011226:	2d00      	cmp	r5, #0
 8011228:	dc1d      	bgt.n	8011266 <_strtod_l+0x776>
 801122a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801122c:	2b00      	cmp	r3, #0
 801122e:	dd23      	ble.n	8011278 <_strtod_l+0x788>
 8011230:	4649      	mov	r1, r9
 8011232:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011234:	9805      	ldr	r0, [sp, #20]
 8011236:	f002 fdcb 	bl	8013dd0 <__pow5mult>
 801123a:	4681      	mov	r9, r0
 801123c:	b9e0      	cbnz	r0, 8011278 <_strtod_l+0x788>
 801123e:	f04f 0900 	mov.w	r9, #0
 8011242:	e674      	b.n	8010f2e <_strtod_l+0x43e>
 8011244:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011248:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801124c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011250:	35e2      	adds	r5, #226	@ 0xe2
 8011252:	fa01 f305 	lsl.w	r3, r1, r5
 8011256:	9310      	str	r3, [sp, #64]	@ 0x40
 8011258:	9113      	str	r1, [sp, #76]	@ 0x4c
 801125a:	e7ba      	b.n	80111d2 <_strtod_l+0x6e2>
 801125c:	2300      	movs	r3, #0
 801125e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011260:	2301      	movs	r3, #1
 8011262:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011264:	e7b5      	b.n	80111d2 <_strtod_l+0x6e2>
 8011266:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011268:	9805      	ldr	r0, [sp, #20]
 801126a:	462a      	mov	r2, r5
 801126c:	f002 fe0a 	bl	8013e84 <__lshift>
 8011270:	901a      	str	r0, [sp, #104]	@ 0x68
 8011272:	2800      	cmp	r0, #0
 8011274:	d1d9      	bne.n	801122a <_strtod_l+0x73a>
 8011276:	e65a      	b.n	8010f2e <_strtod_l+0x43e>
 8011278:	2e00      	cmp	r6, #0
 801127a:	dd07      	ble.n	801128c <_strtod_l+0x79c>
 801127c:	4649      	mov	r1, r9
 801127e:	9805      	ldr	r0, [sp, #20]
 8011280:	4632      	mov	r2, r6
 8011282:	f002 fdff 	bl	8013e84 <__lshift>
 8011286:	4681      	mov	r9, r0
 8011288:	2800      	cmp	r0, #0
 801128a:	d0d8      	beq.n	801123e <_strtod_l+0x74e>
 801128c:	2f00      	cmp	r7, #0
 801128e:	dd08      	ble.n	80112a2 <_strtod_l+0x7b2>
 8011290:	4641      	mov	r1, r8
 8011292:	9805      	ldr	r0, [sp, #20]
 8011294:	463a      	mov	r2, r7
 8011296:	f002 fdf5 	bl	8013e84 <__lshift>
 801129a:	4680      	mov	r8, r0
 801129c:	2800      	cmp	r0, #0
 801129e:	f43f ae46 	beq.w	8010f2e <_strtod_l+0x43e>
 80112a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112a4:	9805      	ldr	r0, [sp, #20]
 80112a6:	464a      	mov	r2, r9
 80112a8:	f002 fe74 	bl	8013f94 <__mdiff>
 80112ac:	4604      	mov	r4, r0
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f43f ae3d 	beq.w	8010f2e <_strtod_l+0x43e>
 80112b4:	68c3      	ldr	r3, [r0, #12]
 80112b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112b8:	2300      	movs	r3, #0
 80112ba:	60c3      	str	r3, [r0, #12]
 80112bc:	4641      	mov	r1, r8
 80112be:	f002 fe4d 	bl	8013f5c <__mcmp>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	da46      	bge.n	8011354 <_strtod_l+0x864>
 80112c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112c8:	ea53 030a 	orrs.w	r3, r3, sl
 80112cc:	d16c      	bne.n	80113a8 <_strtod_l+0x8b8>
 80112ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d168      	bne.n	80113a8 <_strtod_l+0x8b8>
 80112d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112da:	0d1b      	lsrs	r3, r3, #20
 80112dc:	051b      	lsls	r3, r3, #20
 80112de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80112e2:	d961      	bls.n	80113a8 <_strtod_l+0x8b8>
 80112e4:	6963      	ldr	r3, [r4, #20]
 80112e6:	b913      	cbnz	r3, 80112ee <_strtod_l+0x7fe>
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	dd5c      	ble.n	80113a8 <_strtod_l+0x8b8>
 80112ee:	4621      	mov	r1, r4
 80112f0:	2201      	movs	r2, #1
 80112f2:	9805      	ldr	r0, [sp, #20]
 80112f4:	f002 fdc6 	bl	8013e84 <__lshift>
 80112f8:	4641      	mov	r1, r8
 80112fa:	4604      	mov	r4, r0
 80112fc:	f002 fe2e 	bl	8013f5c <__mcmp>
 8011300:	2800      	cmp	r0, #0
 8011302:	dd51      	ble.n	80113a8 <_strtod_l+0x8b8>
 8011304:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011308:	9a08      	ldr	r2, [sp, #32]
 801130a:	0d1b      	lsrs	r3, r3, #20
 801130c:	051b      	lsls	r3, r3, #20
 801130e:	2a00      	cmp	r2, #0
 8011310:	d06b      	beq.n	80113ea <_strtod_l+0x8fa>
 8011312:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011316:	d868      	bhi.n	80113ea <_strtod_l+0x8fa>
 8011318:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801131c:	f67f ae9d 	bls.w	801105a <_strtod_l+0x56a>
 8011320:	4b0a      	ldr	r3, [pc, #40]	@ (801134c <_strtod_l+0x85c>)
 8011322:	4650      	mov	r0, sl
 8011324:	4659      	mov	r1, fp
 8011326:	2200      	movs	r2, #0
 8011328:	f7ef f966 	bl	80005f8 <__aeabi_dmul>
 801132c:	4b08      	ldr	r3, [pc, #32]	@ (8011350 <_strtod_l+0x860>)
 801132e:	400b      	ands	r3, r1
 8011330:	4682      	mov	sl, r0
 8011332:	468b      	mov	fp, r1
 8011334:	2b00      	cmp	r3, #0
 8011336:	f47f ae05 	bne.w	8010f44 <_strtod_l+0x454>
 801133a:	9a05      	ldr	r2, [sp, #20]
 801133c:	2322      	movs	r3, #34	@ 0x22
 801133e:	6013      	str	r3, [r2, #0]
 8011340:	e600      	b.n	8010f44 <_strtod_l+0x454>
 8011342:	bf00      	nop
 8011344:	080157f0 	.word	0x080157f0
 8011348:	fffffc02 	.word	0xfffffc02
 801134c:	39500000 	.word	0x39500000
 8011350:	7ff00000 	.word	0x7ff00000
 8011354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011358:	d165      	bne.n	8011426 <_strtod_l+0x936>
 801135a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801135c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011360:	b35a      	cbz	r2, 80113ba <_strtod_l+0x8ca>
 8011362:	4a9f      	ldr	r2, [pc, #636]	@ (80115e0 <_strtod_l+0xaf0>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d12b      	bne.n	80113c0 <_strtod_l+0x8d0>
 8011368:	9b08      	ldr	r3, [sp, #32]
 801136a:	4651      	mov	r1, sl
 801136c:	b303      	cbz	r3, 80113b0 <_strtod_l+0x8c0>
 801136e:	4b9d      	ldr	r3, [pc, #628]	@ (80115e4 <_strtod_l+0xaf4>)
 8011370:	465a      	mov	r2, fp
 8011372:	4013      	ands	r3, r2
 8011374:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011378:	f04f 32ff 	mov.w	r2, #4294967295
 801137c:	d81b      	bhi.n	80113b6 <_strtod_l+0x8c6>
 801137e:	0d1b      	lsrs	r3, r3, #20
 8011380:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011384:	fa02 f303 	lsl.w	r3, r2, r3
 8011388:	4299      	cmp	r1, r3
 801138a:	d119      	bne.n	80113c0 <_strtod_l+0x8d0>
 801138c:	4b96      	ldr	r3, [pc, #600]	@ (80115e8 <_strtod_l+0xaf8>)
 801138e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011390:	429a      	cmp	r2, r3
 8011392:	d102      	bne.n	801139a <_strtod_l+0x8aa>
 8011394:	3101      	adds	r1, #1
 8011396:	f43f adca 	beq.w	8010f2e <_strtod_l+0x43e>
 801139a:	4b92      	ldr	r3, [pc, #584]	@ (80115e4 <_strtod_l+0xaf4>)
 801139c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801139e:	401a      	ands	r2, r3
 80113a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80113a4:	f04f 0a00 	mov.w	sl, #0
 80113a8:	9b08      	ldr	r3, [sp, #32]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1b8      	bne.n	8011320 <_strtod_l+0x830>
 80113ae:	e5c9      	b.n	8010f44 <_strtod_l+0x454>
 80113b0:	f04f 33ff 	mov.w	r3, #4294967295
 80113b4:	e7e8      	b.n	8011388 <_strtod_l+0x898>
 80113b6:	4613      	mov	r3, r2
 80113b8:	e7e6      	b.n	8011388 <_strtod_l+0x898>
 80113ba:	ea53 030a 	orrs.w	r3, r3, sl
 80113be:	d0a1      	beq.n	8011304 <_strtod_l+0x814>
 80113c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113c2:	b1db      	cbz	r3, 80113fc <_strtod_l+0x90c>
 80113c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113c6:	4213      	tst	r3, r2
 80113c8:	d0ee      	beq.n	80113a8 <_strtod_l+0x8b8>
 80113ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113cc:	9a08      	ldr	r2, [sp, #32]
 80113ce:	4650      	mov	r0, sl
 80113d0:	4659      	mov	r1, fp
 80113d2:	b1bb      	cbz	r3, 8011404 <_strtod_l+0x914>
 80113d4:	f7ff fb6c 	bl	8010ab0 <sulp>
 80113d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113dc:	ec53 2b10 	vmov	r2, r3, d0
 80113e0:	f7ee ff54 	bl	800028c <__adddf3>
 80113e4:	4682      	mov	sl, r0
 80113e6:	468b      	mov	fp, r1
 80113e8:	e7de      	b.n	80113a8 <_strtod_l+0x8b8>
 80113ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80113ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113f6:	f04f 3aff 	mov.w	sl, #4294967295
 80113fa:	e7d5      	b.n	80113a8 <_strtod_l+0x8b8>
 80113fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113fe:	ea13 0f0a 	tst.w	r3, sl
 8011402:	e7e1      	b.n	80113c8 <_strtod_l+0x8d8>
 8011404:	f7ff fb54 	bl	8010ab0 <sulp>
 8011408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801140c:	ec53 2b10 	vmov	r2, r3, d0
 8011410:	f7ee ff3a 	bl	8000288 <__aeabi_dsub>
 8011414:	2200      	movs	r2, #0
 8011416:	2300      	movs	r3, #0
 8011418:	4682      	mov	sl, r0
 801141a:	468b      	mov	fp, r1
 801141c:	f7ef fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8011420:	2800      	cmp	r0, #0
 8011422:	d0c1      	beq.n	80113a8 <_strtod_l+0x8b8>
 8011424:	e619      	b.n	801105a <_strtod_l+0x56a>
 8011426:	4641      	mov	r1, r8
 8011428:	4620      	mov	r0, r4
 801142a:	f002 ff0f 	bl	801424c <__ratio>
 801142e:	ec57 6b10 	vmov	r6, r7, d0
 8011432:	2200      	movs	r2, #0
 8011434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011438:	4630      	mov	r0, r6
 801143a:	4639      	mov	r1, r7
 801143c:	f7ef fb58 	bl	8000af0 <__aeabi_dcmple>
 8011440:	2800      	cmp	r0, #0
 8011442:	d06f      	beq.n	8011524 <_strtod_l+0xa34>
 8011444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011446:	2b00      	cmp	r3, #0
 8011448:	d17a      	bne.n	8011540 <_strtod_l+0xa50>
 801144a:	f1ba 0f00 	cmp.w	sl, #0
 801144e:	d158      	bne.n	8011502 <_strtod_l+0xa12>
 8011450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011456:	2b00      	cmp	r3, #0
 8011458:	d15a      	bne.n	8011510 <_strtod_l+0xa20>
 801145a:	4b64      	ldr	r3, [pc, #400]	@ (80115ec <_strtod_l+0xafc>)
 801145c:	2200      	movs	r2, #0
 801145e:	4630      	mov	r0, r6
 8011460:	4639      	mov	r1, r7
 8011462:	f7ef fb3b 	bl	8000adc <__aeabi_dcmplt>
 8011466:	2800      	cmp	r0, #0
 8011468:	d159      	bne.n	801151e <_strtod_l+0xa2e>
 801146a:	4630      	mov	r0, r6
 801146c:	4639      	mov	r1, r7
 801146e:	4b60      	ldr	r3, [pc, #384]	@ (80115f0 <_strtod_l+0xb00>)
 8011470:	2200      	movs	r2, #0
 8011472:	f7ef f8c1 	bl	80005f8 <__aeabi_dmul>
 8011476:	4606      	mov	r6, r0
 8011478:	460f      	mov	r7, r1
 801147a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801147e:	9606      	str	r6, [sp, #24]
 8011480:	9307      	str	r3, [sp, #28]
 8011482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011486:	4d57      	ldr	r5, [pc, #348]	@ (80115e4 <_strtod_l+0xaf4>)
 8011488:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801148c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801148e:	401d      	ands	r5, r3
 8011490:	4b58      	ldr	r3, [pc, #352]	@ (80115f4 <_strtod_l+0xb04>)
 8011492:	429d      	cmp	r5, r3
 8011494:	f040 80b2 	bne.w	80115fc <_strtod_l+0xb0c>
 8011498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801149a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801149e:	ec4b ab10 	vmov	d0, sl, fp
 80114a2:	f002 fe0b 	bl	80140bc <__ulp>
 80114a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80114aa:	ec51 0b10 	vmov	r0, r1, d0
 80114ae:	f7ef f8a3 	bl	80005f8 <__aeabi_dmul>
 80114b2:	4652      	mov	r2, sl
 80114b4:	465b      	mov	r3, fp
 80114b6:	f7ee fee9 	bl	800028c <__adddf3>
 80114ba:	460b      	mov	r3, r1
 80114bc:	4949      	ldr	r1, [pc, #292]	@ (80115e4 <_strtod_l+0xaf4>)
 80114be:	4a4e      	ldr	r2, [pc, #312]	@ (80115f8 <_strtod_l+0xb08>)
 80114c0:	4019      	ands	r1, r3
 80114c2:	4291      	cmp	r1, r2
 80114c4:	4682      	mov	sl, r0
 80114c6:	d942      	bls.n	801154e <_strtod_l+0xa5e>
 80114c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114ca:	4b47      	ldr	r3, [pc, #284]	@ (80115e8 <_strtod_l+0xaf8>)
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d103      	bne.n	80114d8 <_strtod_l+0x9e8>
 80114d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114d2:	3301      	adds	r3, #1
 80114d4:	f43f ad2b 	beq.w	8010f2e <_strtod_l+0x43e>
 80114d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80115e8 <_strtod_l+0xaf8>
 80114dc:	f04f 3aff 	mov.w	sl, #4294967295
 80114e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114e2:	9805      	ldr	r0, [sp, #20]
 80114e4:	f002 fab6 	bl	8013a54 <_Bfree>
 80114e8:	9805      	ldr	r0, [sp, #20]
 80114ea:	4649      	mov	r1, r9
 80114ec:	f002 fab2 	bl	8013a54 <_Bfree>
 80114f0:	9805      	ldr	r0, [sp, #20]
 80114f2:	4641      	mov	r1, r8
 80114f4:	f002 faae 	bl	8013a54 <_Bfree>
 80114f8:	9805      	ldr	r0, [sp, #20]
 80114fa:	4621      	mov	r1, r4
 80114fc:	f002 faaa 	bl	8013a54 <_Bfree>
 8011500:	e618      	b.n	8011134 <_strtod_l+0x644>
 8011502:	f1ba 0f01 	cmp.w	sl, #1
 8011506:	d103      	bne.n	8011510 <_strtod_l+0xa20>
 8011508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801150a:	2b00      	cmp	r3, #0
 801150c:	f43f ada5 	beq.w	801105a <_strtod_l+0x56a>
 8011510:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80115c0 <_strtod_l+0xad0>
 8011514:	4f35      	ldr	r7, [pc, #212]	@ (80115ec <_strtod_l+0xafc>)
 8011516:	ed8d 7b06 	vstr	d7, [sp, #24]
 801151a:	2600      	movs	r6, #0
 801151c:	e7b1      	b.n	8011482 <_strtod_l+0x992>
 801151e:	4f34      	ldr	r7, [pc, #208]	@ (80115f0 <_strtod_l+0xb00>)
 8011520:	2600      	movs	r6, #0
 8011522:	e7aa      	b.n	801147a <_strtod_l+0x98a>
 8011524:	4b32      	ldr	r3, [pc, #200]	@ (80115f0 <_strtod_l+0xb00>)
 8011526:	4630      	mov	r0, r6
 8011528:	4639      	mov	r1, r7
 801152a:	2200      	movs	r2, #0
 801152c:	f7ef f864 	bl	80005f8 <__aeabi_dmul>
 8011530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011532:	4606      	mov	r6, r0
 8011534:	460f      	mov	r7, r1
 8011536:	2b00      	cmp	r3, #0
 8011538:	d09f      	beq.n	801147a <_strtod_l+0x98a>
 801153a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801153e:	e7a0      	b.n	8011482 <_strtod_l+0x992>
 8011540:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80115c8 <_strtod_l+0xad8>
 8011544:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011548:	ec57 6b17 	vmov	r6, r7, d7
 801154c:	e799      	b.n	8011482 <_strtod_l+0x992>
 801154e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011552:	9b08      	ldr	r3, [sp, #32]
 8011554:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011558:	2b00      	cmp	r3, #0
 801155a:	d1c1      	bne.n	80114e0 <_strtod_l+0x9f0>
 801155c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011560:	0d1b      	lsrs	r3, r3, #20
 8011562:	051b      	lsls	r3, r3, #20
 8011564:	429d      	cmp	r5, r3
 8011566:	d1bb      	bne.n	80114e0 <_strtod_l+0x9f0>
 8011568:	4630      	mov	r0, r6
 801156a:	4639      	mov	r1, r7
 801156c:	f7ef fb54 	bl	8000c18 <__aeabi_d2lz>
 8011570:	f7ef f814 	bl	800059c <__aeabi_l2d>
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	4630      	mov	r0, r6
 801157a:	4639      	mov	r1, r7
 801157c:	f7ee fe84 	bl	8000288 <__aeabi_dsub>
 8011580:	460b      	mov	r3, r1
 8011582:	4602      	mov	r2, r0
 8011584:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011588:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801158c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801158e:	ea46 060a 	orr.w	r6, r6, sl
 8011592:	431e      	orrs	r6, r3
 8011594:	d06f      	beq.n	8011676 <_strtod_l+0xb86>
 8011596:	a30e      	add	r3, pc, #56	@ (adr r3, 80115d0 <_strtod_l+0xae0>)
 8011598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159c:	f7ef fa9e 	bl	8000adc <__aeabi_dcmplt>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	f47f accf 	bne.w	8010f44 <_strtod_l+0x454>
 80115a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80115d8 <_strtod_l+0xae8>)
 80115a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80115b0:	f7ef fab2 	bl	8000b18 <__aeabi_dcmpgt>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d093      	beq.n	80114e0 <_strtod_l+0x9f0>
 80115b8:	e4c4      	b.n	8010f44 <_strtod_l+0x454>
 80115ba:	bf00      	nop
 80115bc:	f3af 8000 	nop.w
 80115c0:	00000000 	.word	0x00000000
 80115c4:	bff00000 	.word	0xbff00000
 80115c8:	00000000 	.word	0x00000000
 80115cc:	3ff00000 	.word	0x3ff00000
 80115d0:	94a03595 	.word	0x94a03595
 80115d4:	3fdfffff 	.word	0x3fdfffff
 80115d8:	35afe535 	.word	0x35afe535
 80115dc:	3fe00000 	.word	0x3fe00000
 80115e0:	000fffff 	.word	0x000fffff
 80115e4:	7ff00000 	.word	0x7ff00000
 80115e8:	7fefffff 	.word	0x7fefffff
 80115ec:	3ff00000 	.word	0x3ff00000
 80115f0:	3fe00000 	.word	0x3fe00000
 80115f4:	7fe00000 	.word	0x7fe00000
 80115f8:	7c9fffff 	.word	0x7c9fffff
 80115fc:	9b08      	ldr	r3, [sp, #32]
 80115fe:	b323      	cbz	r3, 801164a <_strtod_l+0xb5a>
 8011600:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011604:	d821      	bhi.n	801164a <_strtod_l+0xb5a>
 8011606:	a328      	add	r3, pc, #160	@ (adr r3, 80116a8 <_strtod_l+0xbb8>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	f7ef fa6e 	bl	8000af0 <__aeabi_dcmple>
 8011614:	b1a0      	cbz	r0, 8011640 <_strtod_l+0xb50>
 8011616:	4639      	mov	r1, r7
 8011618:	4630      	mov	r0, r6
 801161a:	f7ef fac5 	bl	8000ba8 <__aeabi_d2uiz>
 801161e:	2801      	cmp	r0, #1
 8011620:	bf38      	it	cc
 8011622:	2001      	movcc	r0, #1
 8011624:	f7ee ff6e 	bl	8000504 <__aeabi_ui2d>
 8011628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801162a:	4606      	mov	r6, r0
 801162c:	460f      	mov	r7, r1
 801162e:	b9fb      	cbnz	r3, 8011670 <_strtod_l+0xb80>
 8011630:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011634:	9014      	str	r0, [sp, #80]	@ 0x50
 8011636:	9315      	str	r3, [sp, #84]	@ 0x54
 8011638:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801163c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011642:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011646:	1b5b      	subs	r3, r3, r5
 8011648:	9311      	str	r3, [sp, #68]	@ 0x44
 801164a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801164e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011652:	f002 fd33 	bl	80140bc <__ulp>
 8011656:	4650      	mov	r0, sl
 8011658:	ec53 2b10 	vmov	r2, r3, d0
 801165c:	4659      	mov	r1, fp
 801165e:	f7ee ffcb 	bl	80005f8 <__aeabi_dmul>
 8011662:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011666:	f7ee fe11 	bl	800028c <__adddf3>
 801166a:	4682      	mov	sl, r0
 801166c:	468b      	mov	fp, r1
 801166e:	e770      	b.n	8011552 <_strtod_l+0xa62>
 8011670:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011674:	e7e0      	b.n	8011638 <_strtod_l+0xb48>
 8011676:	a30e      	add	r3, pc, #56	@ (adr r3, 80116b0 <_strtod_l+0xbc0>)
 8011678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167c:	f7ef fa2e 	bl	8000adc <__aeabi_dcmplt>
 8011680:	e798      	b.n	80115b4 <_strtod_l+0xac4>
 8011682:	2300      	movs	r3, #0
 8011684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011686:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	f7ff ba6d 	b.w	8010b6a <_strtod_l+0x7a>
 8011690:	2a65      	cmp	r2, #101	@ 0x65
 8011692:	f43f ab66 	beq.w	8010d62 <_strtod_l+0x272>
 8011696:	2a45      	cmp	r2, #69	@ 0x45
 8011698:	f43f ab63 	beq.w	8010d62 <_strtod_l+0x272>
 801169c:	2301      	movs	r3, #1
 801169e:	f7ff bb9e 	b.w	8010dde <_strtod_l+0x2ee>
 80116a2:	bf00      	nop
 80116a4:	f3af 8000 	nop.w
 80116a8:	ffc00000 	.word	0xffc00000
 80116ac:	41dfffff 	.word	0x41dfffff
 80116b0:	94a03595 	.word	0x94a03595
 80116b4:	3fcfffff 	.word	0x3fcfffff

080116b8 <strtod>:
 80116b8:	460a      	mov	r2, r1
 80116ba:	4601      	mov	r1, r0
 80116bc:	4802      	ldr	r0, [pc, #8]	@ (80116c8 <strtod+0x10>)
 80116be:	4b03      	ldr	r3, [pc, #12]	@ (80116cc <strtod+0x14>)
 80116c0:	6800      	ldr	r0, [r0, #0]
 80116c2:	f7ff ba15 	b.w	8010af0 <_strtod_l>
 80116c6:	bf00      	nop
 80116c8:	200003d4 	.word	0x200003d4
 80116cc:	20000268 	.word	0x20000268

080116d0 <_strtol_l.constprop.0>:
 80116d0:	2b24      	cmp	r3, #36	@ 0x24
 80116d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d6:	4686      	mov	lr, r0
 80116d8:	4690      	mov	r8, r2
 80116da:	d801      	bhi.n	80116e0 <_strtol_l.constprop.0+0x10>
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d106      	bne.n	80116ee <_strtol_l.constprop.0+0x1e>
 80116e0:	f000 ff2a 	bl	8012538 <__errno>
 80116e4:	2316      	movs	r3, #22
 80116e6:	6003      	str	r3, [r0, #0]
 80116e8:	2000      	movs	r0, #0
 80116ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ee:	4834      	ldr	r0, [pc, #208]	@ (80117c0 <_strtol_l.constprop.0+0xf0>)
 80116f0:	460d      	mov	r5, r1
 80116f2:	462a      	mov	r2, r5
 80116f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116f8:	5d06      	ldrb	r6, [r0, r4]
 80116fa:	f016 0608 	ands.w	r6, r6, #8
 80116fe:	d1f8      	bne.n	80116f2 <_strtol_l.constprop.0+0x22>
 8011700:	2c2d      	cmp	r4, #45	@ 0x2d
 8011702:	d12d      	bne.n	8011760 <_strtol_l.constprop.0+0x90>
 8011704:	782c      	ldrb	r4, [r5, #0]
 8011706:	2601      	movs	r6, #1
 8011708:	1c95      	adds	r5, r2, #2
 801170a:	f033 0210 	bics.w	r2, r3, #16
 801170e:	d109      	bne.n	8011724 <_strtol_l.constprop.0+0x54>
 8011710:	2c30      	cmp	r4, #48	@ 0x30
 8011712:	d12a      	bne.n	801176a <_strtol_l.constprop.0+0x9a>
 8011714:	782a      	ldrb	r2, [r5, #0]
 8011716:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801171a:	2a58      	cmp	r2, #88	@ 0x58
 801171c:	d125      	bne.n	801176a <_strtol_l.constprop.0+0x9a>
 801171e:	786c      	ldrb	r4, [r5, #1]
 8011720:	2310      	movs	r3, #16
 8011722:	3502      	adds	r5, #2
 8011724:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011728:	f10c 3cff 	add.w	ip, ip, #4294967295
 801172c:	2200      	movs	r2, #0
 801172e:	fbbc f9f3 	udiv	r9, ip, r3
 8011732:	4610      	mov	r0, r2
 8011734:	fb03 ca19 	mls	sl, r3, r9, ip
 8011738:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801173c:	2f09      	cmp	r7, #9
 801173e:	d81b      	bhi.n	8011778 <_strtol_l.constprop.0+0xa8>
 8011740:	463c      	mov	r4, r7
 8011742:	42a3      	cmp	r3, r4
 8011744:	dd27      	ble.n	8011796 <_strtol_l.constprop.0+0xc6>
 8011746:	1c57      	adds	r7, r2, #1
 8011748:	d007      	beq.n	801175a <_strtol_l.constprop.0+0x8a>
 801174a:	4581      	cmp	r9, r0
 801174c:	d320      	bcc.n	8011790 <_strtol_l.constprop.0+0xc0>
 801174e:	d101      	bne.n	8011754 <_strtol_l.constprop.0+0x84>
 8011750:	45a2      	cmp	sl, r4
 8011752:	db1d      	blt.n	8011790 <_strtol_l.constprop.0+0xc0>
 8011754:	fb00 4003 	mla	r0, r0, r3, r4
 8011758:	2201      	movs	r2, #1
 801175a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801175e:	e7eb      	b.n	8011738 <_strtol_l.constprop.0+0x68>
 8011760:	2c2b      	cmp	r4, #43	@ 0x2b
 8011762:	bf04      	itt	eq
 8011764:	782c      	ldrbeq	r4, [r5, #0]
 8011766:	1c95      	addeq	r5, r2, #2
 8011768:	e7cf      	b.n	801170a <_strtol_l.constprop.0+0x3a>
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1da      	bne.n	8011724 <_strtol_l.constprop.0+0x54>
 801176e:	2c30      	cmp	r4, #48	@ 0x30
 8011770:	bf0c      	ite	eq
 8011772:	2308      	moveq	r3, #8
 8011774:	230a      	movne	r3, #10
 8011776:	e7d5      	b.n	8011724 <_strtol_l.constprop.0+0x54>
 8011778:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801177c:	2f19      	cmp	r7, #25
 801177e:	d801      	bhi.n	8011784 <_strtol_l.constprop.0+0xb4>
 8011780:	3c37      	subs	r4, #55	@ 0x37
 8011782:	e7de      	b.n	8011742 <_strtol_l.constprop.0+0x72>
 8011784:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011788:	2f19      	cmp	r7, #25
 801178a:	d804      	bhi.n	8011796 <_strtol_l.constprop.0+0xc6>
 801178c:	3c57      	subs	r4, #87	@ 0x57
 801178e:	e7d8      	b.n	8011742 <_strtol_l.constprop.0+0x72>
 8011790:	f04f 32ff 	mov.w	r2, #4294967295
 8011794:	e7e1      	b.n	801175a <_strtol_l.constprop.0+0x8a>
 8011796:	1c53      	adds	r3, r2, #1
 8011798:	d108      	bne.n	80117ac <_strtol_l.constprop.0+0xdc>
 801179a:	2322      	movs	r3, #34	@ 0x22
 801179c:	f8ce 3000 	str.w	r3, [lr]
 80117a0:	4660      	mov	r0, ip
 80117a2:	f1b8 0f00 	cmp.w	r8, #0
 80117a6:	d0a0      	beq.n	80116ea <_strtol_l.constprop.0+0x1a>
 80117a8:	1e69      	subs	r1, r5, #1
 80117aa:	e006      	b.n	80117ba <_strtol_l.constprop.0+0xea>
 80117ac:	b106      	cbz	r6, 80117b0 <_strtol_l.constprop.0+0xe0>
 80117ae:	4240      	negs	r0, r0
 80117b0:	f1b8 0f00 	cmp.w	r8, #0
 80117b4:	d099      	beq.n	80116ea <_strtol_l.constprop.0+0x1a>
 80117b6:	2a00      	cmp	r2, #0
 80117b8:	d1f6      	bne.n	80117a8 <_strtol_l.constprop.0+0xd8>
 80117ba:	f8c8 1000 	str.w	r1, [r8]
 80117be:	e794      	b.n	80116ea <_strtol_l.constprop.0+0x1a>
 80117c0:	08015819 	.word	0x08015819

080117c4 <strtol>:
 80117c4:	4613      	mov	r3, r2
 80117c6:	460a      	mov	r2, r1
 80117c8:	4601      	mov	r1, r0
 80117ca:	4802      	ldr	r0, [pc, #8]	@ (80117d4 <strtol+0x10>)
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	f7ff bf7f 	b.w	80116d0 <_strtol_l.constprop.0>
 80117d2:	bf00      	nop
 80117d4:	200003d4 	.word	0x200003d4

080117d8 <__cvt>:
 80117d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117dc:	ec57 6b10 	vmov	r6, r7, d0
 80117e0:	2f00      	cmp	r7, #0
 80117e2:	460c      	mov	r4, r1
 80117e4:	4619      	mov	r1, r3
 80117e6:	463b      	mov	r3, r7
 80117e8:	bfbb      	ittet	lt
 80117ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80117ee:	461f      	movlt	r7, r3
 80117f0:	2300      	movge	r3, #0
 80117f2:	232d      	movlt	r3, #45	@ 0x2d
 80117f4:	700b      	strb	r3, [r1, #0]
 80117f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80117fc:	4691      	mov	r9, r2
 80117fe:	f023 0820 	bic.w	r8, r3, #32
 8011802:	bfbc      	itt	lt
 8011804:	4632      	movlt	r2, r6
 8011806:	4616      	movlt	r6, r2
 8011808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801180c:	d005      	beq.n	801181a <__cvt+0x42>
 801180e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011812:	d100      	bne.n	8011816 <__cvt+0x3e>
 8011814:	3401      	adds	r4, #1
 8011816:	2102      	movs	r1, #2
 8011818:	e000      	b.n	801181c <__cvt+0x44>
 801181a:	2103      	movs	r1, #3
 801181c:	ab03      	add	r3, sp, #12
 801181e:	9301      	str	r3, [sp, #4]
 8011820:	ab02      	add	r3, sp, #8
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	ec47 6b10 	vmov	d0, r6, r7
 8011828:	4653      	mov	r3, sl
 801182a:	4622      	mov	r2, r4
 801182c:	f000 ff78 	bl	8012720 <_dtoa_r>
 8011830:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011834:	4605      	mov	r5, r0
 8011836:	d119      	bne.n	801186c <__cvt+0x94>
 8011838:	f019 0f01 	tst.w	r9, #1
 801183c:	d00e      	beq.n	801185c <__cvt+0x84>
 801183e:	eb00 0904 	add.w	r9, r0, r4
 8011842:	2200      	movs	r2, #0
 8011844:	2300      	movs	r3, #0
 8011846:	4630      	mov	r0, r6
 8011848:	4639      	mov	r1, r7
 801184a:	f7ef f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 801184e:	b108      	cbz	r0, 8011854 <__cvt+0x7c>
 8011850:	f8cd 900c 	str.w	r9, [sp, #12]
 8011854:	2230      	movs	r2, #48	@ 0x30
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	454b      	cmp	r3, r9
 801185a:	d31e      	bcc.n	801189a <__cvt+0xc2>
 801185c:	9b03      	ldr	r3, [sp, #12]
 801185e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011860:	1b5b      	subs	r3, r3, r5
 8011862:	4628      	mov	r0, r5
 8011864:	6013      	str	r3, [r2, #0]
 8011866:	b004      	add	sp, #16
 8011868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801186c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011870:	eb00 0904 	add.w	r9, r0, r4
 8011874:	d1e5      	bne.n	8011842 <__cvt+0x6a>
 8011876:	7803      	ldrb	r3, [r0, #0]
 8011878:	2b30      	cmp	r3, #48	@ 0x30
 801187a:	d10a      	bne.n	8011892 <__cvt+0xba>
 801187c:	2200      	movs	r2, #0
 801187e:	2300      	movs	r3, #0
 8011880:	4630      	mov	r0, r6
 8011882:	4639      	mov	r1, r7
 8011884:	f7ef f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8011888:	b918      	cbnz	r0, 8011892 <__cvt+0xba>
 801188a:	f1c4 0401 	rsb	r4, r4, #1
 801188e:	f8ca 4000 	str.w	r4, [sl]
 8011892:	f8da 3000 	ldr.w	r3, [sl]
 8011896:	4499      	add	r9, r3
 8011898:	e7d3      	b.n	8011842 <__cvt+0x6a>
 801189a:	1c59      	adds	r1, r3, #1
 801189c:	9103      	str	r1, [sp, #12]
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	e7d9      	b.n	8011856 <__cvt+0x7e>

080118a2 <__exponent>:
 80118a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118a4:	2900      	cmp	r1, #0
 80118a6:	bfba      	itte	lt
 80118a8:	4249      	neglt	r1, r1
 80118aa:	232d      	movlt	r3, #45	@ 0x2d
 80118ac:	232b      	movge	r3, #43	@ 0x2b
 80118ae:	2909      	cmp	r1, #9
 80118b0:	7002      	strb	r2, [r0, #0]
 80118b2:	7043      	strb	r3, [r0, #1]
 80118b4:	dd29      	ble.n	801190a <__exponent+0x68>
 80118b6:	f10d 0307 	add.w	r3, sp, #7
 80118ba:	461d      	mov	r5, r3
 80118bc:	270a      	movs	r7, #10
 80118be:	461a      	mov	r2, r3
 80118c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80118c4:	fb07 1416 	mls	r4, r7, r6, r1
 80118c8:	3430      	adds	r4, #48	@ 0x30
 80118ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80118ce:	460c      	mov	r4, r1
 80118d0:	2c63      	cmp	r4, #99	@ 0x63
 80118d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118d6:	4631      	mov	r1, r6
 80118d8:	dcf1      	bgt.n	80118be <__exponent+0x1c>
 80118da:	3130      	adds	r1, #48	@ 0x30
 80118dc:	1e94      	subs	r4, r2, #2
 80118de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80118e2:	1c41      	adds	r1, r0, #1
 80118e4:	4623      	mov	r3, r4
 80118e6:	42ab      	cmp	r3, r5
 80118e8:	d30a      	bcc.n	8011900 <__exponent+0x5e>
 80118ea:	f10d 0309 	add.w	r3, sp, #9
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	42ac      	cmp	r4, r5
 80118f2:	bf88      	it	hi
 80118f4:	2300      	movhi	r3, #0
 80118f6:	3302      	adds	r3, #2
 80118f8:	4403      	add	r3, r0
 80118fa:	1a18      	subs	r0, r3, r0
 80118fc:	b003      	add	sp, #12
 80118fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011900:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011904:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011908:	e7ed      	b.n	80118e6 <__exponent+0x44>
 801190a:	2330      	movs	r3, #48	@ 0x30
 801190c:	3130      	adds	r1, #48	@ 0x30
 801190e:	7083      	strb	r3, [r0, #2]
 8011910:	70c1      	strb	r1, [r0, #3]
 8011912:	1d03      	adds	r3, r0, #4
 8011914:	e7f1      	b.n	80118fa <__exponent+0x58>
	...

08011918 <_printf_float>:
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	b08d      	sub	sp, #52	@ 0x34
 801191e:	460c      	mov	r4, r1
 8011920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011924:	4616      	mov	r6, r2
 8011926:	461f      	mov	r7, r3
 8011928:	4605      	mov	r5, r0
 801192a:	f000 fd55 	bl	80123d8 <_localeconv_r>
 801192e:	6803      	ldr	r3, [r0, #0]
 8011930:	9304      	str	r3, [sp, #16]
 8011932:	4618      	mov	r0, r3
 8011934:	f7ee fc9c 	bl	8000270 <strlen>
 8011938:	2300      	movs	r3, #0
 801193a:	930a      	str	r3, [sp, #40]	@ 0x28
 801193c:	f8d8 3000 	ldr.w	r3, [r8]
 8011940:	9005      	str	r0, [sp, #20]
 8011942:	3307      	adds	r3, #7
 8011944:	f023 0307 	bic.w	r3, r3, #7
 8011948:	f103 0208 	add.w	r2, r3, #8
 801194c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011950:	f8d4 b000 	ldr.w	fp, [r4]
 8011954:	f8c8 2000 	str.w	r2, [r8]
 8011958:	e9d3 8900 	ldrd	r8, r9, [r3]
 801195c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011960:	9307      	str	r3, [sp, #28]
 8011962:	f8cd 8018 	str.w	r8, [sp, #24]
 8011966:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801196a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801196e:	4b9c      	ldr	r3, [pc, #624]	@ (8011be0 <_printf_float+0x2c8>)
 8011970:	f04f 32ff 	mov.w	r2, #4294967295
 8011974:	f7ef f8da 	bl	8000b2c <__aeabi_dcmpun>
 8011978:	bb70      	cbnz	r0, 80119d8 <_printf_float+0xc0>
 801197a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801197e:	4b98      	ldr	r3, [pc, #608]	@ (8011be0 <_printf_float+0x2c8>)
 8011980:	f04f 32ff 	mov.w	r2, #4294967295
 8011984:	f7ef f8b4 	bl	8000af0 <__aeabi_dcmple>
 8011988:	bb30      	cbnz	r0, 80119d8 <_printf_float+0xc0>
 801198a:	2200      	movs	r2, #0
 801198c:	2300      	movs	r3, #0
 801198e:	4640      	mov	r0, r8
 8011990:	4649      	mov	r1, r9
 8011992:	f7ef f8a3 	bl	8000adc <__aeabi_dcmplt>
 8011996:	b110      	cbz	r0, 801199e <_printf_float+0x86>
 8011998:	232d      	movs	r3, #45	@ 0x2d
 801199a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801199e:	4a91      	ldr	r2, [pc, #580]	@ (8011be4 <_printf_float+0x2cc>)
 80119a0:	4b91      	ldr	r3, [pc, #580]	@ (8011be8 <_printf_float+0x2d0>)
 80119a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80119a6:	bf94      	ite	ls
 80119a8:	4690      	movls	r8, r2
 80119aa:	4698      	movhi	r8, r3
 80119ac:	2303      	movs	r3, #3
 80119ae:	6123      	str	r3, [r4, #16]
 80119b0:	f02b 0304 	bic.w	r3, fp, #4
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	f04f 0900 	mov.w	r9, #0
 80119ba:	9700      	str	r7, [sp, #0]
 80119bc:	4633      	mov	r3, r6
 80119be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80119c0:	4621      	mov	r1, r4
 80119c2:	4628      	mov	r0, r5
 80119c4:	f000 f9d2 	bl	8011d6c <_printf_common>
 80119c8:	3001      	adds	r0, #1
 80119ca:	f040 808d 	bne.w	8011ae8 <_printf_float+0x1d0>
 80119ce:	f04f 30ff 	mov.w	r0, #4294967295
 80119d2:	b00d      	add	sp, #52	@ 0x34
 80119d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d8:	4642      	mov	r2, r8
 80119da:	464b      	mov	r3, r9
 80119dc:	4640      	mov	r0, r8
 80119de:	4649      	mov	r1, r9
 80119e0:	f7ef f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80119e4:	b140      	cbz	r0, 80119f8 <_printf_float+0xe0>
 80119e6:	464b      	mov	r3, r9
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	bfbc      	itt	lt
 80119ec:	232d      	movlt	r3, #45	@ 0x2d
 80119ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80119f2:	4a7e      	ldr	r2, [pc, #504]	@ (8011bec <_printf_float+0x2d4>)
 80119f4:	4b7e      	ldr	r3, [pc, #504]	@ (8011bf0 <_printf_float+0x2d8>)
 80119f6:	e7d4      	b.n	80119a2 <_printf_float+0x8a>
 80119f8:	6863      	ldr	r3, [r4, #4]
 80119fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80119fe:	9206      	str	r2, [sp, #24]
 8011a00:	1c5a      	adds	r2, r3, #1
 8011a02:	d13b      	bne.n	8011a7c <_printf_float+0x164>
 8011a04:	2306      	movs	r3, #6
 8011a06:	6063      	str	r3, [r4, #4]
 8011a08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	6022      	str	r2, [r4, #0]
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	ab0a      	add	r3, sp, #40	@ 0x28
 8011a14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011a18:	ab09      	add	r3, sp, #36	@ 0x24
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	6861      	ldr	r1, [r4, #4]
 8011a1e:	ec49 8b10 	vmov	d0, r8, r9
 8011a22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011a26:	4628      	mov	r0, r5
 8011a28:	f7ff fed6 	bl	80117d8 <__cvt>
 8011a2c:	9b06      	ldr	r3, [sp, #24]
 8011a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a30:	2b47      	cmp	r3, #71	@ 0x47
 8011a32:	4680      	mov	r8, r0
 8011a34:	d129      	bne.n	8011a8a <_printf_float+0x172>
 8011a36:	1cc8      	adds	r0, r1, #3
 8011a38:	db02      	blt.n	8011a40 <_printf_float+0x128>
 8011a3a:	6863      	ldr	r3, [r4, #4]
 8011a3c:	4299      	cmp	r1, r3
 8011a3e:	dd41      	ble.n	8011ac4 <_printf_float+0x1ac>
 8011a40:	f1aa 0a02 	sub.w	sl, sl, #2
 8011a44:	fa5f fa8a 	uxtb.w	sl, sl
 8011a48:	3901      	subs	r1, #1
 8011a4a:	4652      	mov	r2, sl
 8011a4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011a50:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a52:	f7ff ff26 	bl	80118a2 <__exponent>
 8011a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a58:	1813      	adds	r3, r2, r0
 8011a5a:	2a01      	cmp	r2, #1
 8011a5c:	4681      	mov	r9, r0
 8011a5e:	6123      	str	r3, [r4, #16]
 8011a60:	dc02      	bgt.n	8011a68 <_printf_float+0x150>
 8011a62:	6822      	ldr	r2, [r4, #0]
 8011a64:	07d2      	lsls	r2, r2, #31
 8011a66:	d501      	bpl.n	8011a6c <_printf_float+0x154>
 8011a68:	3301      	adds	r3, #1
 8011a6a:	6123      	str	r3, [r4, #16]
 8011a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0a2      	beq.n	80119ba <_printf_float+0xa2>
 8011a74:	232d      	movs	r3, #45	@ 0x2d
 8011a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a7a:	e79e      	b.n	80119ba <_printf_float+0xa2>
 8011a7c:	9a06      	ldr	r2, [sp, #24]
 8011a7e:	2a47      	cmp	r2, #71	@ 0x47
 8011a80:	d1c2      	bne.n	8011a08 <_printf_float+0xf0>
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d1c0      	bne.n	8011a08 <_printf_float+0xf0>
 8011a86:	2301      	movs	r3, #1
 8011a88:	e7bd      	b.n	8011a06 <_printf_float+0xee>
 8011a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011a8e:	d9db      	bls.n	8011a48 <_printf_float+0x130>
 8011a90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011a94:	d118      	bne.n	8011ac8 <_printf_float+0x1b0>
 8011a96:	2900      	cmp	r1, #0
 8011a98:	6863      	ldr	r3, [r4, #4]
 8011a9a:	dd0b      	ble.n	8011ab4 <_printf_float+0x19c>
 8011a9c:	6121      	str	r1, [r4, #16]
 8011a9e:	b913      	cbnz	r3, 8011aa6 <_printf_float+0x18e>
 8011aa0:	6822      	ldr	r2, [r4, #0]
 8011aa2:	07d0      	lsls	r0, r2, #31
 8011aa4:	d502      	bpl.n	8011aac <_printf_float+0x194>
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	440b      	add	r3, r1
 8011aaa:	6123      	str	r3, [r4, #16]
 8011aac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011aae:	f04f 0900 	mov.w	r9, #0
 8011ab2:	e7db      	b.n	8011a6c <_printf_float+0x154>
 8011ab4:	b913      	cbnz	r3, 8011abc <_printf_float+0x1a4>
 8011ab6:	6822      	ldr	r2, [r4, #0]
 8011ab8:	07d2      	lsls	r2, r2, #31
 8011aba:	d501      	bpl.n	8011ac0 <_printf_float+0x1a8>
 8011abc:	3302      	adds	r3, #2
 8011abe:	e7f4      	b.n	8011aaa <_printf_float+0x192>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	e7f2      	b.n	8011aaa <_printf_float+0x192>
 8011ac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aca:	4299      	cmp	r1, r3
 8011acc:	db05      	blt.n	8011ada <_printf_float+0x1c2>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	6121      	str	r1, [r4, #16]
 8011ad2:	07d8      	lsls	r0, r3, #31
 8011ad4:	d5ea      	bpl.n	8011aac <_printf_float+0x194>
 8011ad6:	1c4b      	adds	r3, r1, #1
 8011ad8:	e7e7      	b.n	8011aaa <_printf_float+0x192>
 8011ada:	2900      	cmp	r1, #0
 8011adc:	bfd4      	ite	le
 8011ade:	f1c1 0202 	rsble	r2, r1, #2
 8011ae2:	2201      	movgt	r2, #1
 8011ae4:	4413      	add	r3, r2
 8011ae6:	e7e0      	b.n	8011aaa <_printf_float+0x192>
 8011ae8:	6823      	ldr	r3, [r4, #0]
 8011aea:	055a      	lsls	r2, r3, #21
 8011aec:	d407      	bmi.n	8011afe <_printf_float+0x1e6>
 8011aee:	6923      	ldr	r3, [r4, #16]
 8011af0:	4642      	mov	r2, r8
 8011af2:	4631      	mov	r1, r6
 8011af4:	4628      	mov	r0, r5
 8011af6:	47b8      	blx	r7
 8011af8:	3001      	adds	r0, #1
 8011afa:	d12b      	bne.n	8011b54 <_printf_float+0x23c>
 8011afc:	e767      	b.n	80119ce <_printf_float+0xb6>
 8011afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011b02:	f240 80dd 	bls.w	8011cc0 <_printf_float+0x3a8>
 8011b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	f7ee ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d033      	beq.n	8011b7e <_printf_float+0x266>
 8011b16:	4a37      	ldr	r2, [pc, #220]	@ (8011bf4 <_printf_float+0x2dc>)
 8011b18:	2301      	movs	r3, #1
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	47b8      	blx	r7
 8011b20:	3001      	adds	r0, #1
 8011b22:	f43f af54 	beq.w	80119ce <_printf_float+0xb6>
 8011b26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011b2a:	4543      	cmp	r3, r8
 8011b2c:	db02      	blt.n	8011b34 <_printf_float+0x21c>
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	07d8      	lsls	r0, r3, #31
 8011b32:	d50f      	bpl.n	8011b54 <_printf_float+0x23c>
 8011b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b38:	4631      	mov	r1, r6
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	47b8      	blx	r7
 8011b3e:	3001      	adds	r0, #1
 8011b40:	f43f af45 	beq.w	80119ce <_printf_float+0xb6>
 8011b44:	f04f 0900 	mov.w	r9, #0
 8011b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b4c:	f104 0a1a 	add.w	sl, r4, #26
 8011b50:	45c8      	cmp	r8, r9
 8011b52:	dc09      	bgt.n	8011b68 <_printf_float+0x250>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	079b      	lsls	r3, r3, #30
 8011b58:	f100 8103 	bmi.w	8011d62 <_printf_float+0x44a>
 8011b5c:	68e0      	ldr	r0, [r4, #12]
 8011b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b60:	4298      	cmp	r0, r3
 8011b62:	bfb8      	it	lt
 8011b64:	4618      	movlt	r0, r3
 8011b66:	e734      	b.n	80119d2 <_printf_float+0xba>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	4652      	mov	r2, sl
 8011b6c:	4631      	mov	r1, r6
 8011b6e:	4628      	mov	r0, r5
 8011b70:	47b8      	blx	r7
 8011b72:	3001      	adds	r0, #1
 8011b74:	f43f af2b 	beq.w	80119ce <_printf_float+0xb6>
 8011b78:	f109 0901 	add.w	r9, r9, #1
 8011b7c:	e7e8      	b.n	8011b50 <_printf_float+0x238>
 8011b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	dc39      	bgt.n	8011bf8 <_printf_float+0x2e0>
 8011b84:	4a1b      	ldr	r2, [pc, #108]	@ (8011bf4 <_printf_float+0x2dc>)
 8011b86:	2301      	movs	r3, #1
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b8      	blx	r7
 8011b8e:	3001      	adds	r0, #1
 8011b90:	f43f af1d 	beq.w	80119ce <_printf_float+0xb6>
 8011b94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011b98:	ea59 0303 	orrs.w	r3, r9, r3
 8011b9c:	d102      	bne.n	8011ba4 <_printf_float+0x28c>
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	07d9      	lsls	r1, r3, #31
 8011ba2:	d5d7      	bpl.n	8011b54 <_printf_float+0x23c>
 8011ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ba8:	4631      	mov	r1, r6
 8011baa:	4628      	mov	r0, r5
 8011bac:	47b8      	blx	r7
 8011bae:	3001      	adds	r0, #1
 8011bb0:	f43f af0d 	beq.w	80119ce <_printf_float+0xb6>
 8011bb4:	f04f 0a00 	mov.w	sl, #0
 8011bb8:	f104 0b1a 	add.w	fp, r4, #26
 8011bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bbe:	425b      	negs	r3, r3
 8011bc0:	4553      	cmp	r3, sl
 8011bc2:	dc01      	bgt.n	8011bc8 <_printf_float+0x2b0>
 8011bc4:	464b      	mov	r3, r9
 8011bc6:	e793      	b.n	8011af0 <_printf_float+0x1d8>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	465a      	mov	r2, fp
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4628      	mov	r0, r5
 8011bd0:	47b8      	blx	r7
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	f43f aefb 	beq.w	80119ce <_printf_float+0xb6>
 8011bd8:	f10a 0a01 	add.w	sl, sl, #1
 8011bdc:	e7ee      	b.n	8011bbc <_printf_float+0x2a4>
 8011bde:	bf00      	nop
 8011be0:	7fefffff 	.word	0x7fefffff
 8011be4:	08015919 	.word	0x08015919
 8011be8:	0801591d 	.word	0x0801591d
 8011bec:	08015921 	.word	0x08015921
 8011bf0:	08015925 	.word	0x08015925
 8011bf4:	08015929 	.word	0x08015929
 8011bf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011bfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011bfe:	4553      	cmp	r3, sl
 8011c00:	bfa8      	it	ge
 8011c02:	4653      	movge	r3, sl
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	4699      	mov	r9, r3
 8011c08:	dc36      	bgt.n	8011c78 <_printf_float+0x360>
 8011c0a:	f04f 0b00 	mov.w	fp, #0
 8011c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c12:	f104 021a 	add.w	r2, r4, #26
 8011c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011c18:	9306      	str	r3, [sp, #24]
 8011c1a:	eba3 0309 	sub.w	r3, r3, r9
 8011c1e:	455b      	cmp	r3, fp
 8011c20:	dc31      	bgt.n	8011c86 <_printf_float+0x36e>
 8011c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c24:	459a      	cmp	sl, r3
 8011c26:	dc3a      	bgt.n	8011c9e <_printf_float+0x386>
 8011c28:	6823      	ldr	r3, [r4, #0]
 8011c2a:	07da      	lsls	r2, r3, #31
 8011c2c:	d437      	bmi.n	8011c9e <_printf_float+0x386>
 8011c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c30:	ebaa 0903 	sub.w	r9, sl, r3
 8011c34:	9b06      	ldr	r3, [sp, #24]
 8011c36:	ebaa 0303 	sub.w	r3, sl, r3
 8011c3a:	4599      	cmp	r9, r3
 8011c3c:	bfa8      	it	ge
 8011c3e:	4699      	movge	r9, r3
 8011c40:	f1b9 0f00 	cmp.w	r9, #0
 8011c44:	dc33      	bgt.n	8011cae <_printf_float+0x396>
 8011c46:	f04f 0800 	mov.w	r8, #0
 8011c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c4e:	f104 0b1a 	add.w	fp, r4, #26
 8011c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c54:	ebaa 0303 	sub.w	r3, sl, r3
 8011c58:	eba3 0309 	sub.w	r3, r3, r9
 8011c5c:	4543      	cmp	r3, r8
 8011c5e:	f77f af79 	ble.w	8011b54 <_printf_float+0x23c>
 8011c62:	2301      	movs	r3, #1
 8011c64:	465a      	mov	r2, fp
 8011c66:	4631      	mov	r1, r6
 8011c68:	4628      	mov	r0, r5
 8011c6a:	47b8      	blx	r7
 8011c6c:	3001      	adds	r0, #1
 8011c6e:	f43f aeae 	beq.w	80119ce <_printf_float+0xb6>
 8011c72:	f108 0801 	add.w	r8, r8, #1
 8011c76:	e7ec      	b.n	8011c52 <_printf_float+0x33a>
 8011c78:	4642      	mov	r2, r8
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	47b8      	blx	r7
 8011c80:	3001      	adds	r0, #1
 8011c82:	d1c2      	bne.n	8011c0a <_printf_float+0x2f2>
 8011c84:	e6a3      	b.n	80119ce <_printf_float+0xb6>
 8011c86:	2301      	movs	r3, #1
 8011c88:	4631      	mov	r1, r6
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	9206      	str	r2, [sp, #24]
 8011c8e:	47b8      	blx	r7
 8011c90:	3001      	adds	r0, #1
 8011c92:	f43f ae9c 	beq.w	80119ce <_printf_float+0xb6>
 8011c96:	9a06      	ldr	r2, [sp, #24]
 8011c98:	f10b 0b01 	add.w	fp, fp, #1
 8011c9c:	e7bb      	b.n	8011c16 <_printf_float+0x2fe>
 8011c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ca2:	4631      	mov	r1, r6
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	47b8      	blx	r7
 8011ca8:	3001      	adds	r0, #1
 8011caa:	d1c0      	bne.n	8011c2e <_printf_float+0x316>
 8011cac:	e68f      	b.n	80119ce <_printf_float+0xb6>
 8011cae:	9a06      	ldr	r2, [sp, #24]
 8011cb0:	464b      	mov	r3, r9
 8011cb2:	4442      	add	r2, r8
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	47b8      	blx	r7
 8011cba:	3001      	adds	r0, #1
 8011cbc:	d1c3      	bne.n	8011c46 <_printf_float+0x32e>
 8011cbe:	e686      	b.n	80119ce <_printf_float+0xb6>
 8011cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011cc4:	f1ba 0f01 	cmp.w	sl, #1
 8011cc8:	dc01      	bgt.n	8011cce <_printf_float+0x3b6>
 8011cca:	07db      	lsls	r3, r3, #31
 8011ccc:	d536      	bpl.n	8011d3c <_printf_float+0x424>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	4642      	mov	r2, r8
 8011cd2:	4631      	mov	r1, r6
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	47b8      	blx	r7
 8011cd8:	3001      	adds	r0, #1
 8011cda:	f43f ae78 	beq.w	80119ce <_printf_float+0xb6>
 8011cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ce2:	4631      	mov	r1, r6
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	47b8      	blx	r7
 8011ce8:	3001      	adds	r0, #1
 8011cea:	f43f ae70 	beq.w	80119ce <_printf_float+0xb6>
 8011cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011cfa:	f7ee fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cfe:	b9c0      	cbnz	r0, 8011d32 <_printf_float+0x41a>
 8011d00:	4653      	mov	r3, sl
 8011d02:	f108 0201 	add.w	r2, r8, #1
 8011d06:	4631      	mov	r1, r6
 8011d08:	4628      	mov	r0, r5
 8011d0a:	47b8      	blx	r7
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	d10c      	bne.n	8011d2a <_printf_float+0x412>
 8011d10:	e65d      	b.n	80119ce <_printf_float+0xb6>
 8011d12:	2301      	movs	r3, #1
 8011d14:	465a      	mov	r2, fp
 8011d16:	4631      	mov	r1, r6
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b8      	blx	r7
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	f43f ae56 	beq.w	80119ce <_printf_float+0xb6>
 8011d22:	f108 0801 	add.w	r8, r8, #1
 8011d26:	45d0      	cmp	r8, sl
 8011d28:	dbf3      	blt.n	8011d12 <_printf_float+0x3fa>
 8011d2a:	464b      	mov	r3, r9
 8011d2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011d30:	e6df      	b.n	8011af2 <_printf_float+0x1da>
 8011d32:	f04f 0800 	mov.w	r8, #0
 8011d36:	f104 0b1a 	add.w	fp, r4, #26
 8011d3a:	e7f4      	b.n	8011d26 <_printf_float+0x40e>
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	4642      	mov	r2, r8
 8011d40:	e7e1      	b.n	8011d06 <_printf_float+0x3ee>
 8011d42:	2301      	movs	r3, #1
 8011d44:	464a      	mov	r2, r9
 8011d46:	4631      	mov	r1, r6
 8011d48:	4628      	mov	r0, r5
 8011d4a:	47b8      	blx	r7
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	f43f ae3e 	beq.w	80119ce <_printf_float+0xb6>
 8011d52:	f108 0801 	add.w	r8, r8, #1
 8011d56:	68e3      	ldr	r3, [r4, #12]
 8011d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d5a:	1a5b      	subs	r3, r3, r1
 8011d5c:	4543      	cmp	r3, r8
 8011d5e:	dcf0      	bgt.n	8011d42 <_printf_float+0x42a>
 8011d60:	e6fc      	b.n	8011b5c <_printf_float+0x244>
 8011d62:	f04f 0800 	mov.w	r8, #0
 8011d66:	f104 0919 	add.w	r9, r4, #25
 8011d6a:	e7f4      	b.n	8011d56 <_printf_float+0x43e>

08011d6c <_printf_common>:
 8011d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d70:	4616      	mov	r6, r2
 8011d72:	4698      	mov	r8, r3
 8011d74:	688a      	ldr	r2, [r1, #8]
 8011d76:	690b      	ldr	r3, [r1, #16]
 8011d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	bfb8      	it	lt
 8011d80:	4613      	movlt	r3, r2
 8011d82:	6033      	str	r3, [r6, #0]
 8011d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d88:	4607      	mov	r7, r0
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	b10a      	cbz	r2, 8011d92 <_printf_common+0x26>
 8011d8e:	3301      	adds	r3, #1
 8011d90:	6033      	str	r3, [r6, #0]
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	0699      	lsls	r1, r3, #26
 8011d96:	bf42      	ittt	mi
 8011d98:	6833      	ldrmi	r3, [r6, #0]
 8011d9a:	3302      	addmi	r3, #2
 8011d9c:	6033      	strmi	r3, [r6, #0]
 8011d9e:	6825      	ldr	r5, [r4, #0]
 8011da0:	f015 0506 	ands.w	r5, r5, #6
 8011da4:	d106      	bne.n	8011db4 <_printf_common+0x48>
 8011da6:	f104 0a19 	add.w	sl, r4, #25
 8011daa:	68e3      	ldr	r3, [r4, #12]
 8011dac:	6832      	ldr	r2, [r6, #0]
 8011dae:	1a9b      	subs	r3, r3, r2
 8011db0:	42ab      	cmp	r3, r5
 8011db2:	dc26      	bgt.n	8011e02 <_printf_common+0x96>
 8011db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011db8:	6822      	ldr	r2, [r4, #0]
 8011dba:	3b00      	subs	r3, #0
 8011dbc:	bf18      	it	ne
 8011dbe:	2301      	movne	r3, #1
 8011dc0:	0692      	lsls	r2, r2, #26
 8011dc2:	d42b      	bmi.n	8011e1c <_printf_common+0xb0>
 8011dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011dc8:	4641      	mov	r1, r8
 8011dca:	4638      	mov	r0, r7
 8011dcc:	47c8      	blx	r9
 8011dce:	3001      	adds	r0, #1
 8011dd0:	d01e      	beq.n	8011e10 <_printf_common+0xa4>
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	6922      	ldr	r2, [r4, #16]
 8011dd6:	f003 0306 	and.w	r3, r3, #6
 8011dda:	2b04      	cmp	r3, #4
 8011ddc:	bf02      	ittt	eq
 8011dde:	68e5      	ldreq	r5, [r4, #12]
 8011de0:	6833      	ldreq	r3, [r6, #0]
 8011de2:	1aed      	subeq	r5, r5, r3
 8011de4:	68a3      	ldr	r3, [r4, #8]
 8011de6:	bf0c      	ite	eq
 8011de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dec:	2500      	movne	r5, #0
 8011dee:	4293      	cmp	r3, r2
 8011df0:	bfc4      	itt	gt
 8011df2:	1a9b      	subgt	r3, r3, r2
 8011df4:	18ed      	addgt	r5, r5, r3
 8011df6:	2600      	movs	r6, #0
 8011df8:	341a      	adds	r4, #26
 8011dfa:	42b5      	cmp	r5, r6
 8011dfc:	d11a      	bne.n	8011e34 <_printf_common+0xc8>
 8011dfe:	2000      	movs	r0, #0
 8011e00:	e008      	b.n	8011e14 <_printf_common+0xa8>
 8011e02:	2301      	movs	r3, #1
 8011e04:	4652      	mov	r2, sl
 8011e06:	4641      	mov	r1, r8
 8011e08:	4638      	mov	r0, r7
 8011e0a:	47c8      	blx	r9
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	d103      	bne.n	8011e18 <_printf_common+0xac>
 8011e10:	f04f 30ff 	mov.w	r0, #4294967295
 8011e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e18:	3501      	adds	r5, #1
 8011e1a:	e7c6      	b.n	8011daa <_printf_common+0x3e>
 8011e1c:	18e1      	adds	r1, r4, r3
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	2030      	movs	r0, #48	@ 0x30
 8011e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e26:	4422      	add	r2, r4
 8011e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e30:	3302      	adds	r3, #2
 8011e32:	e7c7      	b.n	8011dc4 <_printf_common+0x58>
 8011e34:	2301      	movs	r3, #1
 8011e36:	4622      	mov	r2, r4
 8011e38:	4641      	mov	r1, r8
 8011e3a:	4638      	mov	r0, r7
 8011e3c:	47c8      	blx	r9
 8011e3e:	3001      	adds	r0, #1
 8011e40:	d0e6      	beq.n	8011e10 <_printf_common+0xa4>
 8011e42:	3601      	adds	r6, #1
 8011e44:	e7d9      	b.n	8011dfa <_printf_common+0x8e>
	...

08011e48 <_printf_i>:
 8011e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e4c:	7e0f      	ldrb	r7, [r1, #24]
 8011e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e50:	2f78      	cmp	r7, #120	@ 0x78
 8011e52:	4691      	mov	r9, r2
 8011e54:	4680      	mov	r8, r0
 8011e56:	460c      	mov	r4, r1
 8011e58:	469a      	mov	sl, r3
 8011e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011e5e:	d807      	bhi.n	8011e70 <_printf_i+0x28>
 8011e60:	2f62      	cmp	r7, #98	@ 0x62
 8011e62:	d80a      	bhi.n	8011e7a <_printf_i+0x32>
 8011e64:	2f00      	cmp	r7, #0
 8011e66:	f000 80d2 	beq.w	801200e <_printf_i+0x1c6>
 8011e6a:	2f58      	cmp	r7, #88	@ 0x58
 8011e6c:	f000 80b9 	beq.w	8011fe2 <_printf_i+0x19a>
 8011e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e78:	e03a      	b.n	8011ef0 <_printf_i+0xa8>
 8011e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e7e:	2b15      	cmp	r3, #21
 8011e80:	d8f6      	bhi.n	8011e70 <_printf_i+0x28>
 8011e82:	a101      	add	r1, pc, #4	@ (adr r1, 8011e88 <_printf_i+0x40>)
 8011e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e88:	08011ee1 	.word	0x08011ee1
 8011e8c:	08011ef5 	.word	0x08011ef5
 8011e90:	08011e71 	.word	0x08011e71
 8011e94:	08011e71 	.word	0x08011e71
 8011e98:	08011e71 	.word	0x08011e71
 8011e9c:	08011e71 	.word	0x08011e71
 8011ea0:	08011ef5 	.word	0x08011ef5
 8011ea4:	08011e71 	.word	0x08011e71
 8011ea8:	08011e71 	.word	0x08011e71
 8011eac:	08011e71 	.word	0x08011e71
 8011eb0:	08011e71 	.word	0x08011e71
 8011eb4:	08011ff5 	.word	0x08011ff5
 8011eb8:	08011f1f 	.word	0x08011f1f
 8011ebc:	08011faf 	.word	0x08011faf
 8011ec0:	08011e71 	.word	0x08011e71
 8011ec4:	08011e71 	.word	0x08011e71
 8011ec8:	08012017 	.word	0x08012017
 8011ecc:	08011e71 	.word	0x08011e71
 8011ed0:	08011f1f 	.word	0x08011f1f
 8011ed4:	08011e71 	.word	0x08011e71
 8011ed8:	08011e71 	.word	0x08011e71
 8011edc:	08011fb7 	.word	0x08011fb7
 8011ee0:	6833      	ldr	r3, [r6, #0]
 8011ee2:	1d1a      	adds	r2, r3, #4
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	6032      	str	r2, [r6, #0]
 8011ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e09d      	b.n	8012030 <_printf_i+0x1e8>
 8011ef4:	6833      	ldr	r3, [r6, #0]
 8011ef6:	6820      	ldr	r0, [r4, #0]
 8011ef8:	1d19      	adds	r1, r3, #4
 8011efa:	6031      	str	r1, [r6, #0]
 8011efc:	0606      	lsls	r6, r0, #24
 8011efe:	d501      	bpl.n	8011f04 <_printf_i+0xbc>
 8011f00:	681d      	ldr	r5, [r3, #0]
 8011f02:	e003      	b.n	8011f0c <_printf_i+0xc4>
 8011f04:	0645      	lsls	r5, r0, #25
 8011f06:	d5fb      	bpl.n	8011f00 <_printf_i+0xb8>
 8011f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f0c:	2d00      	cmp	r5, #0
 8011f0e:	da03      	bge.n	8011f18 <_printf_i+0xd0>
 8011f10:	232d      	movs	r3, #45	@ 0x2d
 8011f12:	426d      	negs	r5, r5
 8011f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f18:	4859      	ldr	r0, [pc, #356]	@ (8012080 <_printf_i+0x238>)
 8011f1a:	230a      	movs	r3, #10
 8011f1c:	e011      	b.n	8011f42 <_printf_i+0xfa>
 8011f1e:	6821      	ldr	r1, [r4, #0]
 8011f20:	6833      	ldr	r3, [r6, #0]
 8011f22:	0608      	lsls	r0, r1, #24
 8011f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f28:	d402      	bmi.n	8011f30 <_printf_i+0xe8>
 8011f2a:	0649      	lsls	r1, r1, #25
 8011f2c:	bf48      	it	mi
 8011f2e:	b2ad      	uxthmi	r5, r5
 8011f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f32:	4853      	ldr	r0, [pc, #332]	@ (8012080 <_printf_i+0x238>)
 8011f34:	6033      	str	r3, [r6, #0]
 8011f36:	bf14      	ite	ne
 8011f38:	230a      	movne	r3, #10
 8011f3a:	2308      	moveq	r3, #8
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f42:	6866      	ldr	r6, [r4, #4]
 8011f44:	60a6      	str	r6, [r4, #8]
 8011f46:	2e00      	cmp	r6, #0
 8011f48:	bfa2      	ittt	ge
 8011f4a:	6821      	ldrge	r1, [r4, #0]
 8011f4c:	f021 0104 	bicge.w	r1, r1, #4
 8011f50:	6021      	strge	r1, [r4, #0]
 8011f52:	b90d      	cbnz	r5, 8011f58 <_printf_i+0x110>
 8011f54:	2e00      	cmp	r6, #0
 8011f56:	d04b      	beq.n	8011ff0 <_printf_i+0x1a8>
 8011f58:	4616      	mov	r6, r2
 8011f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8011f62:	5dc7      	ldrb	r7, [r0, r7]
 8011f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f68:	462f      	mov	r7, r5
 8011f6a:	42bb      	cmp	r3, r7
 8011f6c:	460d      	mov	r5, r1
 8011f6e:	d9f4      	bls.n	8011f5a <_printf_i+0x112>
 8011f70:	2b08      	cmp	r3, #8
 8011f72:	d10b      	bne.n	8011f8c <_printf_i+0x144>
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	07df      	lsls	r7, r3, #31
 8011f78:	d508      	bpl.n	8011f8c <_printf_i+0x144>
 8011f7a:	6923      	ldr	r3, [r4, #16]
 8011f7c:	6861      	ldr	r1, [r4, #4]
 8011f7e:	4299      	cmp	r1, r3
 8011f80:	bfde      	ittt	le
 8011f82:	2330      	movle	r3, #48	@ 0x30
 8011f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f8c:	1b92      	subs	r2, r2, r6
 8011f8e:	6122      	str	r2, [r4, #16]
 8011f90:	f8cd a000 	str.w	sl, [sp]
 8011f94:	464b      	mov	r3, r9
 8011f96:	aa03      	add	r2, sp, #12
 8011f98:	4621      	mov	r1, r4
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f7ff fee6 	bl	8011d6c <_printf_common>
 8011fa0:	3001      	adds	r0, #1
 8011fa2:	d14a      	bne.n	801203a <_printf_i+0x1f2>
 8011fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa8:	b004      	add	sp, #16
 8011faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	f043 0320 	orr.w	r3, r3, #32
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	4833      	ldr	r0, [pc, #204]	@ (8012084 <_printf_i+0x23c>)
 8011fb8:	2778      	movs	r7, #120	@ 0x78
 8011fba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	6831      	ldr	r1, [r6, #0]
 8011fc2:	061f      	lsls	r7, r3, #24
 8011fc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011fc8:	d402      	bmi.n	8011fd0 <_printf_i+0x188>
 8011fca:	065f      	lsls	r7, r3, #25
 8011fcc:	bf48      	it	mi
 8011fce:	b2ad      	uxthmi	r5, r5
 8011fd0:	6031      	str	r1, [r6, #0]
 8011fd2:	07d9      	lsls	r1, r3, #31
 8011fd4:	bf44      	itt	mi
 8011fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8011fda:	6023      	strmi	r3, [r4, #0]
 8011fdc:	b11d      	cbz	r5, 8011fe6 <_printf_i+0x19e>
 8011fde:	2310      	movs	r3, #16
 8011fe0:	e7ac      	b.n	8011f3c <_printf_i+0xf4>
 8011fe2:	4827      	ldr	r0, [pc, #156]	@ (8012080 <_printf_i+0x238>)
 8011fe4:	e7e9      	b.n	8011fba <_printf_i+0x172>
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	f023 0320 	bic.w	r3, r3, #32
 8011fec:	6023      	str	r3, [r4, #0]
 8011fee:	e7f6      	b.n	8011fde <_printf_i+0x196>
 8011ff0:	4616      	mov	r6, r2
 8011ff2:	e7bd      	b.n	8011f70 <_printf_i+0x128>
 8011ff4:	6833      	ldr	r3, [r6, #0]
 8011ff6:	6825      	ldr	r5, [r4, #0]
 8011ff8:	6961      	ldr	r1, [r4, #20]
 8011ffa:	1d18      	adds	r0, r3, #4
 8011ffc:	6030      	str	r0, [r6, #0]
 8011ffe:	062e      	lsls	r6, r5, #24
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	d501      	bpl.n	8012008 <_printf_i+0x1c0>
 8012004:	6019      	str	r1, [r3, #0]
 8012006:	e002      	b.n	801200e <_printf_i+0x1c6>
 8012008:	0668      	lsls	r0, r5, #25
 801200a:	d5fb      	bpl.n	8012004 <_printf_i+0x1bc>
 801200c:	8019      	strh	r1, [r3, #0]
 801200e:	2300      	movs	r3, #0
 8012010:	6123      	str	r3, [r4, #16]
 8012012:	4616      	mov	r6, r2
 8012014:	e7bc      	b.n	8011f90 <_printf_i+0x148>
 8012016:	6833      	ldr	r3, [r6, #0]
 8012018:	1d1a      	adds	r2, r3, #4
 801201a:	6032      	str	r2, [r6, #0]
 801201c:	681e      	ldr	r6, [r3, #0]
 801201e:	6862      	ldr	r2, [r4, #4]
 8012020:	2100      	movs	r1, #0
 8012022:	4630      	mov	r0, r6
 8012024:	f7ee f8d4 	bl	80001d0 <memchr>
 8012028:	b108      	cbz	r0, 801202e <_printf_i+0x1e6>
 801202a:	1b80      	subs	r0, r0, r6
 801202c:	6060      	str	r0, [r4, #4]
 801202e:	6863      	ldr	r3, [r4, #4]
 8012030:	6123      	str	r3, [r4, #16]
 8012032:	2300      	movs	r3, #0
 8012034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012038:	e7aa      	b.n	8011f90 <_printf_i+0x148>
 801203a:	6923      	ldr	r3, [r4, #16]
 801203c:	4632      	mov	r2, r6
 801203e:	4649      	mov	r1, r9
 8012040:	4640      	mov	r0, r8
 8012042:	47d0      	blx	sl
 8012044:	3001      	adds	r0, #1
 8012046:	d0ad      	beq.n	8011fa4 <_printf_i+0x15c>
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	079b      	lsls	r3, r3, #30
 801204c:	d413      	bmi.n	8012076 <_printf_i+0x22e>
 801204e:	68e0      	ldr	r0, [r4, #12]
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	4298      	cmp	r0, r3
 8012054:	bfb8      	it	lt
 8012056:	4618      	movlt	r0, r3
 8012058:	e7a6      	b.n	8011fa8 <_printf_i+0x160>
 801205a:	2301      	movs	r3, #1
 801205c:	4632      	mov	r2, r6
 801205e:	4649      	mov	r1, r9
 8012060:	4640      	mov	r0, r8
 8012062:	47d0      	blx	sl
 8012064:	3001      	adds	r0, #1
 8012066:	d09d      	beq.n	8011fa4 <_printf_i+0x15c>
 8012068:	3501      	adds	r5, #1
 801206a:	68e3      	ldr	r3, [r4, #12]
 801206c:	9903      	ldr	r1, [sp, #12]
 801206e:	1a5b      	subs	r3, r3, r1
 8012070:	42ab      	cmp	r3, r5
 8012072:	dcf2      	bgt.n	801205a <_printf_i+0x212>
 8012074:	e7eb      	b.n	801204e <_printf_i+0x206>
 8012076:	2500      	movs	r5, #0
 8012078:	f104 0619 	add.w	r6, r4, #25
 801207c:	e7f5      	b.n	801206a <_printf_i+0x222>
 801207e:	bf00      	nop
 8012080:	0801592b 	.word	0x0801592b
 8012084:	0801593c 	.word	0x0801593c

08012088 <std>:
 8012088:	2300      	movs	r3, #0
 801208a:	b510      	push	{r4, lr}
 801208c:	4604      	mov	r4, r0
 801208e:	e9c0 3300 	strd	r3, r3, [r0]
 8012092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012096:	6083      	str	r3, [r0, #8]
 8012098:	8181      	strh	r1, [r0, #12]
 801209a:	6643      	str	r3, [r0, #100]	@ 0x64
 801209c:	81c2      	strh	r2, [r0, #14]
 801209e:	6183      	str	r3, [r0, #24]
 80120a0:	4619      	mov	r1, r3
 80120a2:	2208      	movs	r2, #8
 80120a4:	305c      	adds	r0, #92	@ 0x5c
 80120a6:	f000 f914 	bl	80122d2 <memset>
 80120aa:	4b0d      	ldr	r3, [pc, #52]	@ (80120e0 <std+0x58>)
 80120ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80120ae:	4b0d      	ldr	r3, [pc, #52]	@ (80120e4 <std+0x5c>)
 80120b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80120b2:	4b0d      	ldr	r3, [pc, #52]	@ (80120e8 <std+0x60>)
 80120b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80120b6:	4b0d      	ldr	r3, [pc, #52]	@ (80120ec <std+0x64>)
 80120b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80120ba:	4b0d      	ldr	r3, [pc, #52]	@ (80120f0 <std+0x68>)
 80120bc:	6224      	str	r4, [r4, #32]
 80120be:	429c      	cmp	r4, r3
 80120c0:	d006      	beq.n	80120d0 <std+0x48>
 80120c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80120c6:	4294      	cmp	r4, r2
 80120c8:	d002      	beq.n	80120d0 <std+0x48>
 80120ca:	33d0      	adds	r3, #208	@ 0xd0
 80120cc:	429c      	cmp	r4, r3
 80120ce:	d105      	bne.n	80120dc <std+0x54>
 80120d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80120d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120d8:	f000 ba58 	b.w	801258c <__retarget_lock_init_recursive>
 80120dc:	bd10      	pop	{r4, pc}
 80120de:	bf00      	nop
 80120e0:	0801224d 	.word	0x0801224d
 80120e4:	0801226f 	.word	0x0801226f
 80120e8:	080122a7 	.word	0x080122a7
 80120ec:	080122cb 	.word	0x080122cb
 80120f0:	200058d0 	.word	0x200058d0

080120f4 <stdio_exit_handler>:
 80120f4:	4a02      	ldr	r2, [pc, #8]	@ (8012100 <stdio_exit_handler+0xc>)
 80120f6:	4903      	ldr	r1, [pc, #12]	@ (8012104 <stdio_exit_handler+0x10>)
 80120f8:	4803      	ldr	r0, [pc, #12]	@ (8012108 <stdio_exit_handler+0x14>)
 80120fa:	f000 b869 	b.w	80121d0 <_fwalk_sglue>
 80120fe:	bf00      	nop
 8012100:	2000025c 	.word	0x2000025c
 8012104:	08014709 	.word	0x08014709
 8012108:	200003d8 	.word	0x200003d8

0801210c <cleanup_stdio>:
 801210c:	6841      	ldr	r1, [r0, #4]
 801210e:	4b0c      	ldr	r3, [pc, #48]	@ (8012140 <cleanup_stdio+0x34>)
 8012110:	4299      	cmp	r1, r3
 8012112:	b510      	push	{r4, lr}
 8012114:	4604      	mov	r4, r0
 8012116:	d001      	beq.n	801211c <cleanup_stdio+0x10>
 8012118:	f002 faf6 	bl	8014708 <_fflush_r>
 801211c:	68a1      	ldr	r1, [r4, #8]
 801211e:	4b09      	ldr	r3, [pc, #36]	@ (8012144 <cleanup_stdio+0x38>)
 8012120:	4299      	cmp	r1, r3
 8012122:	d002      	beq.n	801212a <cleanup_stdio+0x1e>
 8012124:	4620      	mov	r0, r4
 8012126:	f002 faef 	bl	8014708 <_fflush_r>
 801212a:	68e1      	ldr	r1, [r4, #12]
 801212c:	4b06      	ldr	r3, [pc, #24]	@ (8012148 <cleanup_stdio+0x3c>)
 801212e:	4299      	cmp	r1, r3
 8012130:	d004      	beq.n	801213c <cleanup_stdio+0x30>
 8012132:	4620      	mov	r0, r4
 8012134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012138:	f002 bae6 	b.w	8014708 <_fflush_r>
 801213c:	bd10      	pop	{r4, pc}
 801213e:	bf00      	nop
 8012140:	200058d0 	.word	0x200058d0
 8012144:	20005938 	.word	0x20005938
 8012148:	200059a0 	.word	0x200059a0

0801214c <global_stdio_init.part.0>:
 801214c:	b510      	push	{r4, lr}
 801214e:	4b0b      	ldr	r3, [pc, #44]	@ (801217c <global_stdio_init.part.0+0x30>)
 8012150:	4c0b      	ldr	r4, [pc, #44]	@ (8012180 <global_stdio_init.part.0+0x34>)
 8012152:	4a0c      	ldr	r2, [pc, #48]	@ (8012184 <global_stdio_init.part.0+0x38>)
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	4620      	mov	r0, r4
 8012158:	2200      	movs	r2, #0
 801215a:	2104      	movs	r1, #4
 801215c:	f7ff ff94 	bl	8012088 <std>
 8012160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012164:	2201      	movs	r2, #1
 8012166:	2109      	movs	r1, #9
 8012168:	f7ff ff8e 	bl	8012088 <std>
 801216c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012170:	2202      	movs	r2, #2
 8012172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012176:	2112      	movs	r1, #18
 8012178:	f7ff bf86 	b.w	8012088 <std>
 801217c:	20005a08 	.word	0x20005a08
 8012180:	200058d0 	.word	0x200058d0
 8012184:	080120f5 	.word	0x080120f5

08012188 <__sfp_lock_acquire>:
 8012188:	4801      	ldr	r0, [pc, #4]	@ (8012190 <__sfp_lock_acquire+0x8>)
 801218a:	f000 ba00 	b.w	801258e <__retarget_lock_acquire_recursive>
 801218e:	bf00      	nop
 8012190:	20005a11 	.word	0x20005a11

08012194 <__sfp_lock_release>:
 8012194:	4801      	ldr	r0, [pc, #4]	@ (801219c <__sfp_lock_release+0x8>)
 8012196:	f000 b9fb 	b.w	8012590 <__retarget_lock_release_recursive>
 801219a:	bf00      	nop
 801219c:	20005a11 	.word	0x20005a11

080121a0 <__sinit>:
 80121a0:	b510      	push	{r4, lr}
 80121a2:	4604      	mov	r4, r0
 80121a4:	f7ff fff0 	bl	8012188 <__sfp_lock_acquire>
 80121a8:	6a23      	ldr	r3, [r4, #32]
 80121aa:	b11b      	cbz	r3, 80121b4 <__sinit+0x14>
 80121ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121b0:	f7ff bff0 	b.w	8012194 <__sfp_lock_release>
 80121b4:	4b04      	ldr	r3, [pc, #16]	@ (80121c8 <__sinit+0x28>)
 80121b6:	6223      	str	r3, [r4, #32]
 80121b8:	4b04      	ldr	r3, [pc, #16]	@ (80121cc <__sinit+0x2c>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1f5      	bne.n	80121ac <__sinit+0xc>
 80121c0:	f7ff ffc4 	bl	801214c <global_stdio_init.part.0>
 80121c4:	e7f2      	b.n	80121ac <__sinit+0xc>
 80121c6:	bf00      	nop
 80121c8:	0801210d 	.word	0x0801210d
 80121cc:	20005a08 	.word	0x20005a08

080121d0 <_fwalk_sglue>:
 80121d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121d4:	4607      	mov	r7, r0
 80121d6:	4688      	mov	r8, r1
 80121d8:	4614      	mov	r4, r2
 80121da:	2600      	movs	r6, #0
 80121dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121e0:	f1b9 0901 	subs.w	r9, r9, #1
 80121e4:	d505      	bpl.n	80121f2 <_fwalk_sglue+0x22>
 80121e6:	6824      	ldr	r4, [r4, #0]
 80121e8:	2c00      	cmp	r4, #0
 80121ea:	d1f7      	bne.n	80121dc <_fwalk_sglue+0xc>
 80121ec:	4630      	mov	r0, r6
 80121ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121f2:	89ab      	ldrh	r3, [r5, #12]
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d907      	bls.n	8012208 <_fwalk_sglue+0x38>
 80121f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121fc:	3301      	adds	r3, #1
 80121fe:	d003      	beq.n	8012208 <_fwalk_sglue+0x38>
 8012200:	4629      	mov	r1, r5
 8012202:	4638      	mov	r0, r7
 8012204:	47c0      	blx	r8
 8012206:	4306      	orrs	r6, r0
 8012208:	3568      	adds	r5, #104	@ 0x68
 801220a:	e7e9      	b.n	80121e0 <_fwalk_sglue+0x10>

0801220c <siprintf>:
 801220c:	b40e      	push	{r1, r2, r3}
 801220e:	b500      	push	{lr}
 8012210:	b09c      	sub	sp, #112	@ 0x70
 8012212:	ab1d      	add	r3, sp, #116	@ 0x74
 8012214:	9002      	str	r0, [sp, #8]
 8012216:	9006      	str	r0, [sp, #24]
 8012218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801221c:	4809      	ldr	r0, [pc, #36]	@ (8012244 <siprintf+0x38>)
 801221e:	9107      	str	r1, [sp, #28]
 8012220:	9104      	str	r1, [sp, #16]
 8012222:	4909      	ldr	r1, [pc, #36]	@ (8012248 <siprintf+0x3c>)
 8012224:	f853 2b04 	ldr.w	r2, [r3], #4
 8012228:	9105      	str	r1, [sp, #20]
 801222a:	6800      	ldr	r0, [r0, #0]
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	a902      	add	r1, sp, #8
 8012230:	f002 f8ea 	bl	8014408 <_svfiprintf_r>
 8012234:	9b02      	ldr	r3, [sp, #8]
 8012236:	2200      	movs	r2, #0
 8012238:	701a      	strb	r2, [r3, #0]
 801223a:	b01c      	add	sp, #112	@ 0x70
 801223c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012240:	b003      	add	sp, #12
 8012242:	4770      	bx	lr
 8012244:	200003d4 	.word	0x200003d4
 8012248:	ffff0208 	.word	0xffff0208

0801224c <__sread>:
 801224c:	b510      	push	{r4, lr}
 801224e:	460c      	mov	r4, r1
 8012250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012254:	f000 f93c 	bl	80124d0 <_read_r>
 8012258:	2800      	cmp	r0, #0
 801225a:	bfab      	itete	ge
 801225c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801225e:	89a3      	ldrhlt	r3, [r4, #12]
 8012260:	181b      	addge	r3, r3, r0
 8012262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012266:	bfac      	ite	ge
 8012268:	6563      	strge	r3, [r4, #84]	@ 0x54
 801226a:	81a3      	strhlt	r3, [r4, #12]
 801226c:	bd10      	pop	{r4, pc}

0801226e <__swrite>:
 801226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012272:	461f      	mov	r7, r3
 8012274:	898b      	ldrh	r3, [r1, #12]
 8012276:	05db      	lsls	r3, r3, #23
 8012278:	4605      	mov	r5, r0
 801227a:	460c      	mov	r4, r1
 801227c:	4616      	mov	r6, r2
 801227e:	d505      	bpl.n	801228c <__swrite+0x1e>
 8012280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012284:	2302      	movs	r3, #2
 8012286:	2200      	movs	r2, #0
 8012288:	f000 f910 	bl	80124ac <_lseek_r>
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	4632      	mov	r2, r6
 801229a:	463b      	mov	r3, r7
 801229c:	4628      	mov	r0, r5
 801229e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122a2:	f000 b937 	b.w	8012514 <_write_r>

080122a6 <__sseek>:
 80122a6:	b510      	push	{r4, lr}
 80122a8:	460c      	mov	r4, r1
 80122aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122ae:	f000 f8fd 	bl	80124ac <_lseek_r>
 80122b2:	1c43      	adds	r3, r0, #1
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	bf15      	itete	ne
 80122b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80122ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80122be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80122c2:	81a3      	strheq	r3, [r4, #12]
 80122c4:	bf18      	it	ne
 80122c6:	81a3      	strhne	r3, [r4, #12]
 80122c8:	bd10      	pop	{r4, pc}

080122ca <__sclose>:
 80122ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122ce:	f000 b887 	b.w	80123e0 <_close_r>

080122d2 <memset>:
 80122d2:	4402      	add	r2, r0
 80122d4:	4603      	mov	r3, r0
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d100      	bne.n	80122dc <memset+0xa>
 80122da:	4770      	bx	lr
 80122dc:	f803 1b01 	strb.w	r1, [r3], #1
 80122e0:	e7f9      	b.n	80122d6 <memset+0x4>

080122e2 <strchr>:
 80122e2:	b2c9      	uxtb	r1, r1
 80122e4:	4603      	mov	r3, r0
 80122e6:	4618      	mov	r0, r3
 80122e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122ec:	b112      	cbz	r2, 80122f4 <strchr+0x12>
 80122ee:	428a      	cmp	r2, r1
 80122f0:	d1f9      	bne.n	80122e6 <strchr+0x4>
 80122f2:	4770      	bx	lr
 80122f4:	2900      	cmp	r1, #0
 80122f6:	bf18      	it	ne
 80122f8:	2000      	movne	r0, #0
 80122fa:	4770      	bx	lr

080122fc <strncmp>:
 80122fc:	b510      	push	{r4, lr}
 80122fe:	b16a      	cbz	r2, 801231c <strncmp+0x20>
 8012300:	3901      	subs	r1, #1
 8012302:	1884      	adds	r4, r0, r2
 8012304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012308:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801230c:	429a      	cmp	r2, r3
 801230e:	d103      	bne.n	8012318 <strncmp+0x1c>
 8012310:	42a0      	cmp	r0, r4
 8012312:	d001      	beq.n	8012318 <strncmp+0x1c>
 8012314:	2a00      	cmp	r2, #0
 8012316:	d1f5      	bne.n	8012304 <strncmp+0x8>
 8012318:	1ad0      	subs	r0, r2, r3
 801231a:	bd10      	pop	{r4, pc}
 801231c:	4610      	mov	r0, r2
 801231e:	e7fc      	b.n	801231a <strncmp+0x1e>

08012320 <strtok>:
 8012320:	4b16      	ldr	r3, [pc, #88]	@ (801237c <strtok+0x5c>)
 8012322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012326:	681f      	ldr	r7, [r3, #0]
 8012328:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801232a:	4605      	mov	r5, r0
 801232c:	460e      	mov	r6, r1
 801232e:	b9ec      	cbnz	r4, 801236c <strtok+0x4c>
 8012330:	2050      	movs	r0, #80	@ 0x50
 8012332:	f7fe faff 	bl	8010934 <malloc>
 8012336:	4602      	mov	r2, r0
 8012338:	6478      	str	r0, [r7, #68]	@ 0x44
 801233a:	b920      	cbnz	r0, 8012346 <strtok+0x26>
 801233c:	4b10      	ldr	r3, [pc, #64]	@ (8012380 <strtok+0x60>)
 801233e:	4811      	ldr	r0, [pc, #68]	@ (8012384 <strtok+0x64>)
 8012340:	215b      	movs	r1, #91	@ 0x5b
 8012342:	f000 f945 	bl	80125d0 <__assert_func>
 8012346:	e9c0 4400 	strd	r4, r4, [r0]
 801234a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801234e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012352:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012356:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801235a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801235e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012362:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012366:	6184      	str	r4, [r0, #24]
 8012368:	7704      	strb	r4, [r0, #28]
 801236a:	6244      	str	r4, [r0, #36]	@ 0x24
 801236c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801236e:	4631      	mov	r1, r6
 8012370:	4628      	mov	r0, r5
 8012372:	2301      	movs	r3, #1
 8012374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	f000 b806 	b.w	8012388 <__strtok_r>
 801237c:	200003d4 	.word	0x200003d4
 8012380:	0801594d 	.word	0x0801594d
 8012384:	08015964 	.word	0x08015964

08012388 <__strtok_r>:
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	4604      	mov	r4, r0
 801238c:	b908      	cbnz	r0, 8012392 <__strtok_r+0xa>
 801238e:	6814      	ldr	r4, [r2, #0]
 8012390:	b144      	cbz	r4, 80123a4 <__strtok_r+0x1c>
 8012392:	4620      	mov	r0, r4
 8012394:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012398:	460f      	mov	r7, r1
 801239a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801239e:	b91e      	cbnz	r6, 80123a8 <__strtok_r+0x20>
 80123a0:	b965      	cbnz	r5, 80123bc <__strtok_r+0x34>
 80123a2:	6015      	str	r5, [r2, #0]
 80123a4:	2000      	movs	r0, #0
 80123a6:	e005      	b.n	80123b4 <__strtok_r+0x2c>
 80123a8:	42b5      	cmp	r5, r6
 80123aa:	d1f6      	bne.n	801239a <__strtok_r+0x12>
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1f0      	bne.n	8012392 <__strtok_r+0xa>
 80123b0:	6014      	str	r4, [r2, #0]
 80123b2:	7003      	strb	r3, [r0, #0]
 80123b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123b6:	461c      	mov	r4, r3
 80123b8:	e00c      	b.n	80123d4 <__strtok_r+0x4c>
 80123ba:	b915      	cbnz	r5, 80123c2 <__strtok_r+0x3a>
 80123bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123c0:	460e      	mov	r6, r1
 80123c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80123c6:	42ab      	cmp	r3, r5
 80123c8:	d1f7      	bne.n	80123ba <__strtok_r+0x32>
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d0f3      	beq.n	80123b6 <__strtok_r+0x2e>
 80123ce:	2300      	movs	r3, #0
 80123d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80123d4:	6014      	str	r4, [r2, #0]
 80123d6:	e7ed      	b.n	80123b4 <__strtok_r+0x2c>

080123d8 <_localeconv_r>:
 80123d8:	4800      	ldr	r0, [pc, #0]	@ (80123dc <_localeconv_r+0x4>)
 80123da:	4770      	bx	lr
 80123dc:	20000358 	.word	0x20000358

080123e0 <_close_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	4d06      	ldr	r5, [pc, #24]	@ (80123fc <_close_r+0x1c>)
 80123e4:	2300      	movs	r3, #0
 80123e6:	4604      	mov	r4, r0
 80123e8:	4608      	mov	r0, r1
 80123ea:	602b      	str	r3, [r5, #0]
 80123ec:	f7f1 fa7a 	bl	80038e4 <_close>
 80123f0:	1c43      	adds	r3, r0, #1
 80123f2:	d102      	bne.n	80123fa <_close_r+0x1a>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	b103      	cbz	r3, 80123fa <_close_r+0x1a>
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	20005a0c 	.word	0x20005a0c

08012400 <_reclaim_reent>:
 8012400:	4b29      	ldr	r3, [pc, #164]	@ (80124a8 <_reclaim_reent+0xa8>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4283      	cmp	r3, r0
 8012406:	b570      	push	{r4, r5, r6, lr}
 8012408:	4604      	mov	r4, r0
 801240a:	d04b      	beq.n	80124a4 <_reclaim_reent+0xa4>
 801240c:	69c3      	ldr	r3, [r0, #28]
 801240e:	b1ab      	cbz	r3, 801243c <_reclaim_reent+0x3c>
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	b16b      	cbz	r3, 8012430 <_reclaim_reent+0x30>
 8012414:	2500      	movs	r5, #0
 8012416:	69e3      	ldr	r3, [r4, #28]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	5959      	ldr	r1, [r3, r5]
 801241c:	2900      	cmp	r1, #0
 801241e:	d13b      	bne.n	8012498 <_reclaim_reent+0x98>
 8012420:	3504      	adds	r5, #4
 8012422:	2d80      	cmp	r5, #128	@ 0x80
 8012424:	d1f7      	bne.n	8012416 <_reclaim_reent+0x16>
 8012426:	69e3      	ldr	r3, [r4, #28]
 8012428:	4620      	mov	r0, r4
 801242a:	68d9      	ldr	r1, [r3, #12]
 801242c:	f000 ff3c 	bl	80132a8 <_free_r>
 8012430:	69e3      	ldr	r3, [r4, #28]
 8012432:	6819      	ldr	r1, [r3, #0]
 8012434:	b111      	cbz	r1, 801243c <_reclaim_reent+0x3c>
 8012436:	4620      	mov	r0, r4
 8012438:	f000 ff36 	bl	80132a8 <_free_r>
 801243c:	6961      	ldr	r1, [r4, #20]
 801243e:	b111      	cbz	r1, 8012446 <_reclaim_reent+0x46>
 8012440:	4620      	mov	r0, r4
 8012442:	f000 ff31 	bl	80132a8 <_free_r>
 8012446:	69e1      	ldr	r1, [r4, #28]
 8012448:	b111      	cbz	r1, 8012450 <_reclaim_reent+0x50>
 801244a:	4620      	mov	r0, r4
 801244c:	f000 ff2c 	bl	80132a8 <_free_r>
 8012450:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012452:	b111      	cbz	r1, 801245a <_reclaim_reent+0x5a>
 8012454:	4620      	mov	r0, r4
 8012456:	f000 ff27 	bl	80132a8 <_free_r>
 801245a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801245c:	b111      	cbz	r1, 8012464 <_reclaim_reent+0x64>
 801245e:	4620      	mov	r0, r4
 8012460:	f000 ff22 	bl	80132a8 <_free_r>
 8012464:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012466:	b111      	cbz	r1, 801246e <_reclaim_reent+0x6e>
 8012468:	4620      	mov	r0, r4
 801246a:	f000 ff1d 	bl	80132a8 <_free_r>
 801246e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012470:	b111      	cbz	r1, 8012478 <_reclaim_reent+0x78>
 8012472:	4620      	mov	r0, r4
 8012474:	f000 ff18 	bl	80132a8 <_free_r>
 8012478:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801247a:	b111      	cbz	r1, 8012482 <_reclaim_reent+0x82>
 801247c:	4620      	mov	r0, r4
 801247e:	f000 ff13 	bl	80132a8 <_free_r>
 8012482:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012484:	b111      	cbz	r1, 801248c <_reclaim_reent+0x8c>
 8012486:	4620      	mov	r0, r4
 8012488:	f000 ff0e 	bl	80132a8 <_free_r>
 801248c:	6a23      	ldr	r3, [r4, #32]
 801248e:	b14b      	cbz	r3, 80124a4 <_reclaim_reent+0xa4>
 8012490:	4620      	mov	r0, r4
 8012492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012496:	4718      	bx	r3
 8012498:	680e      	ldr	r6, [r1, #0]
 801249a:	4620      	mov	r0, r4
 801249c:	f000 ff04 	bl	80132a8 <_free_r>
 80124a0:	4631      	mov	r1, r6
 80124a2:	e7bb      	b.n	801241c <_reclaim_reent+0x1c>
 80124a4:	bd70      	pop	{r4, r5, r6, pc}
 80124a6:	bf00      	nop
 80124a8:	200003d4 	.word	0x200003d4

080124ac <_lseek_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d07      	ldr	r5, [pc, #28]	@ (80124cc <_lseek_r+0x20>)
 80124b0:	4604      	mov	r4, r0
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	2200      	movs	r2, #0
 80124b8:	602a      	str	r2, [r5, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f7f1 fa39 	bl	8003932 <_lseek>
 80124c0:	1c43      	adds	r3, r0, #1
 80124c2:	d102      	bne.n	80124ca <_lseek_r+0x1e>
 80124c4:	682b      	ldr	r3, [r5, #0]
 80124c6:	b103      	cbz	r3, 80124ca <_lseek_r+0x1e>
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	bd38      	pop	{r3, r4, r5, pc}
 80124cc:	20005a0c 	.word	0x20005a0c

080124d0 <_read_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4d07      	ldr	r5, [pc, #28]	@ (80124f0 <_read_r+0x20>)
 80124d4:	4604      	mov	r4, r0
 80124d6:	4608      	mov	r0, r1
 80124d8:	4611      	mov	r1, r2
 80124da:	2200      	movs	r2, #0
 80124dc:	602a      	str	r2, [r5, #0]
 80124de:	461a      	mov	r2, r3
 80124e0:	f7f1 f9c7 	bl	8003872 <_read>
 80124e4:	1c43      	adds	r3, r0, #1
 80124e6:	d102      	bne.n	80124ee <_read_r+0x1e>
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	b103      	cbz	r3, 80124ee <_read_r+0x1e>
 80124ec:	6023      	str	r3, [r4, #0]
 80124ee:	bd38      	pop	{r3, r4, r5, pc}
 80124f0:	20005a0c 	.word	0x20005a0c

080124f4 <_sbrk_r>:
 80124f4:	b538      	push	{r3, r4, r5, lr}
 80124f6:	4d06      	ldr	r5, [pc, #24]	@ (8012510 <_sbrk_r+0x1c>)
 80124f8:	2300      	movs	r3, #0
 80124fa:	4604      	mov	r4, r0
 80124fc:	4608      	mov	r0, r1
 80124fe:	602b      	str	r3, [r5, #0]
 8012500:	f7f1 fa24 	bl	800394c <_sbrk>
 8012504:	1c43      	adds	r3, r0, #1
 8012506:	d102      	bne.n	801250e <_sbrk_r+0x1a>
 8012508:	682b      	ldr	r3, [r5, #0]
 801250a:	b103      	cbz	r3, 801250e <_sbrk_r+0x1a>
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	bd38      	pop	{r3, r4, r5, pc}
 8012510:	20005a0c 	.word	0x20005a0c

08012514 <_write_r>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	4d07      	ldr	r5, [pc, #28]	@ (8012534 <_write_r+0x20>)
 8012518:	4604      	mov	r4, r0
 801251a:	4608      	mov	r0, r1
 801251c:	4611      	mov	r1, r2
 801251e:	2200      	movs	r2, #0
 8012520:	602a      	str	r2, [r5, #0]
 8012522:	461a      	mov	r2, r3
 8012524:	f7f1 f9c2 	bl	80038ac <_write>
 8012528:	1c43      	adds	r3, r0, #1
 801252a:	d102      	bne.n	8012532 <_write_r+0x1e>
 801252c:	682b      	ldr	r3, [r5, #0]
 801252e:	b103      	cbz	r3, 8012532 <_write_r+0x1e>
 8012530:	6023      	str	r3, [r4, #0]
 8012532:	bd38      	pop	{r3, r4, r5, pc}
 8012534:	20005a0c 	.word	0x20005a0c

08012538 <__errno>:
 8012538:	4b01      	ldr	r3, [pc, #4]	@ (8012540 <__errno+0x8>)
 801253a:	6818      	ldr	r0, [r3, #0]
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop
 8012540:	200003d4 	.word	0x200003d4

08012544 <__libc_init_array>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	4d0d      	ldr	r5, [pc, #52]	@ (801257c <__libc_init_array+0x38>)
 8012548:	4c0d      	ldr	r4, [pc, #52]	@ (8012580 <__libc_init_array+0x3c>)
 801254a:	1b64      	subs	r4, r4, r5
 801254c:	10a4      	asrs	r4, r4, #2
 801254e:	2600      	movs	r6, #0
 8012550:	42a6      	cmp	r6, r4
 8012552:	d109      	bne.n	8012568 <__libc_init_array+0x24>
 8012554:	4d0b      	ldr	r5, [pc, #44]	@ (8012584 <__libc_init_array+0x40>)
 8012556:	4c0c      	ldr	r4, [pc, #48]	@ (8012588 <__libc_init_array+0x44>)
 8012558:	f002 fc18 	bl	8014d8c <_init>
 801255c:	1b64      	subs	r4, r4, r5
 801255e:	10a4      	asrs	r4, r4, #2
 8012560:	2600      	movs	r6, #0
 8012562:	42a6      	cmp	r6, r4
 8012564:	d105      	bne.n	8012572 <__libc_init_array+0x2e>
 8012566:	bd70      	pop	{r4, r5, r6, pc}
 8012568:	f855 3b04 	ldr.w	r3, [r5], #4
 801256c:	4798      	blx	r3
 801256e:	3601      	adds	r6, #1
 8012570:	e7ee      	b.n	8012550 <__libc_init_array+0xc>
 8012572:	f855 3b04 	ldr.w	r3, [r5], #4
 8012576:	4798      	blx	r3
 8012578:	3601      	adds	r6, #1
 801257a:	e7f2      	b.n	8012562 <__libc_init_array+0x1e>
 801257c:	08015c4c 	.word	0x08015c4c
 8012580:	08015c4c 	.word	0x08015c4c
 8012584:	08015c4c 	.word	0x08015c4c
 8012588:	08015c50 	.word	0x08015c50

0801258c <__retarget_lock_init_recursive>:
 801258c:	4770      	bx	lr

0801258e <__retarget_lock_acquire_recursive>:
 801258e:	4770      	bx	lr

08012590 <__retarget_lock_release_recursive>:
 8012590:	4770      	bx	lr

08012592 <strcpy>:
 8012592:	4603      	mov	r3, r0
 8012594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012598:	f803 2b01 	strb.w	r2, [r3], #1
 801259c:	2a00      	cmp	r2, #0
 801259e:	d1f9      	bne.n	8012594 <strcpy+0x2>
 80125a0:	4770      	bx	lr

080125a2 <memcpy>:
 80125a2:	440a      	add	r2, r1
 80125a4:	4291      	cmp	r1, r2
 80125a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80125aa:	d100      	bne.n	80125ae <memcpy+0xc>
 80125ac:	4770      	bx	lr
 80125ae:	b510      	push	{r4, lr}
 80125b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125b8:	4291      	cmp	r1, r2
 80125ba:	d1f9      	bne.n	80125b0 <memcpy+0xe>
 80125bc:	bd10      	pop	{r4, pc}
	...

080125c0 <nan>:
 80125c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125c8 <nan+0x8>
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	00000000 	.word	0x00000000
 80125cc:	7ff80000 	.word	0x7ff80000

080125d0 <__assert_func>:
 80125d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125d2:	4614      	mov	r4, r2
 80125d4:	461a      	mov	r2, r3
 80125d6:	4b09      	ldr	r3, [pc, #36]	@ (80125fc <__assert_func+0x2c>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4605      	mov	r5, r0
 80125dc:	68d8      	ldr	r0, [r3, #12]
 80125de:	b954      	cbnz	r4, 80125f6 <__assert_func+0x26>
 80125e0:	4b07      	ldr	r3, [pc, #28]	@ (8012600 <__assert_func+0x30>)
 80125e2:	461c      	mov	r4, r3
 80125e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125e8:	9100      	str	r1, [sp, #0]
 80125ea:	462b      	mov	r3, r5
 80125ec:	4905      	ldr	r1, [pc, #20]	@ (8012604 <__assert_func+0x34>)
 80125ee:	f002 f8b3 	bl	8014758 <fiprintf>
 80125f2:	f002 f8dd 	bl	80147b0 <abort>
 80125f6:	4b04      	ldr	r3, [pc, #16]	@ (8012608 <__assert_func+0x38>)
 80125f8:	e7f4      	b.n	80125e4 <__assert_func+0x14>
 80125fa:	bf00      	nop
 80125fc:	200003d4 	.word	0x200003d4
 8012600:	08015a01 	.word	0x08015a01
 8012604:	080159d3 	.word	0x080159d3
 8012608:	080159c6 	.word	0x080159c6

0801260c <quorem>:
 801260c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	6903      	ldr	r3, [r0, #16]
 8012612:	690c      	ldr	r4, [r1, #16]
 8012614:	42a3      	cmp	r3, r4
 8012616:	4607      	mov	r7, r0
 8012618:	db7e      	blt.n	8012718 <quorem+0x10c>
 801261a:	3c01      	subs	r4, #1
 801261c:	f101 0814 	add.w	r8, r1, #20
 8012620:	00a3      	lsls	r3, r4, #2
 8012622:	f100 0514 	add.w	r5, r0, #20
 8012626:	9300      	str	r3, [sp, #0]
 8012628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801262c:	9301      	str	r3, [sp, #4]
 801262e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012636:	3301      	adds	r3, #1
 8012638:	429a      	cmp	r2, r3
 801263a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801263e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012642:	d32e      	bcc.n	80126a2 <quorem+0x96>
 8012644:	f04f 0a00 	mov.w	sl, #0
 8012648:	46c4      	mov	ip, r8
 801264a:	46ae      	mov	lr, r5
 801264c:	46d3      	mov	fp, sl
 801264e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012652:	b298      	uxth	r0, r3
 8012654:	fb06 a000 	mla	r0, r6, r0, sl
 8012658:	0c02      	lsrs	r2, r0, #16
 801265a:	0c1b      	lsrs	r3, r3, #16
 801265c:	fb06 2303 	mla	r3, r6, r3, r2
 8012660:	f8de 2000 	ldr.w	r2, [lr]
 8012664:	b280      	uxth	r0, r0
 8012666:	b292      	uxth	r2, r2
 8012668:	1a12      	subs	r2, r2, r0
 801266a:	445a      	add	r2, fp
 801266c:	f8de 0000 	ldr.w	r0, [lr]
 8012670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012674:	b29b      	uxth	r3, r3
 8012676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801267a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801267e:	b292      	uxth	r2, r2
 8012680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012684:	45e1      	cmp	r9, ip
 8012686:	f84e 2b04 	str.w	r2, [lr], #4
 801268a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801268e:	d2de      	bcs.n	801264e <quorem+0x42>
 8012690:	9b00      	ldr	r3, [sp, #0]
 8012692:	58eb      	ldr	r3, [r5, r3]
 8012694:	b92b      	cbnz	r3, 80126a2 <quorem+0x96>
 8012696:	9b01      	ldr	r3, [sp, #4]
 8012698:	3b04      	subs	r3, #4
 801269a:	429d      	cmp	r5, r3
 801269c:	461a      	mov	r2, r3
 801269e:	d32f      	bcc.n	8012700 <quorem+0xf4>
 80126a0:	613c      	str	r4, [r7, #16]
 80126a2:	4638      	mov	r0, r7
 80126a4:	f001 fc5a 	bl	8013f5c <__mcmp>
 80126a8:	2800      	cmp	r0, #0
 80126aa:	db25      	blt.n	80126f8 <quorem+0xec>
 80126ac:	4629      	mov	r1, r5
 80126ae:	2000      	movs	r0, #0
 80126b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80126b4:	f8d1 c000 	ldr.w	ip, [r1]
 80126b8:	fa1f fe82 	uxth.w	lr, r2
 80126bc:	fa1f f38c 	uxth.w	r3, ip
 80126c0:	eba3 030e 	sub.w	r3, r3, lr
 80126c4:	4403      	add	r3, r0
 80126c6:	0c12      	lsrs	r2, r2, #16
 80126c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80126cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126d6:	45c1      	cmp	r9, r8
 80126d8:	f841 3b04 	str.w	r3, [r1], #4
 80126dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80126e0:	d2e6      	bcs.n	80126b0 <quorem+0xa4>
 80126e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126ea:	b922      	cbnz	r2, 80126f6 <quorem+0xea>
 80126ec:	3b04      	subs	r3, #4
 80126ee:	429d      	cmp	r5, r3
 80126f0:	461a      	mov	r2, r3
 80126f2:	d30b      	bcc.n	801270c <quorem+0x100>
 80126f4:	613c      	str	r4, [r7, #16]
 80126f6:	3601      	adds	r6, #1
 80126f8:	4630      	mov	r0, r6
 80126fa:	b003      	add	sp, #12
 80126fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012700:	6812      	ldr	r2, [r2, #0]
 8012702:	3b04      	subs	r3, #4
 8012704:	2a00      	cmp	r2, #0
 8012706:	d1cb      	bne.n	80126a0 <quorem+0x94>
 8012708:	3c01      	subs	r4, #1
 801270a:	e7c6      	b.n	801269a <quorem+0x8e>
 801270c:	6812      	ldr	r2, [r2, #0]
 801270e:	3b04      	subs	r3, #4
 8012710:	2a00      	cmp	r2, #0
 8012712:	d1ef      	bne.n	80126f4 <quorem+0xe8>
 8012714:	3c01      	subs	r4, #1
 8012716:	e7ea      	b.n	80126ee <quorem+0xe2>
 8012718:	2000      	movs	r0, #0
 801271a:	e7ee      	b.n	80126fa <quorem+0xee>
 801271c:	0000      	movs	r0, r0
	...

08012720 <_dtoa_r>:
 8012720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012724:	69c7      	ldr	r7, [r0, #28]
 8012726:	b099      	sub	sp, #100	@ 0x64
 8012728:	ed8d 0b02 	vstr	d0, [sp, #8]
 801272c:	ec55 4b10 	vmov	r4, r5, d0
 8012730:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012732:	9109      	str	r1, [sp, #36]	@ 0x24
 8012734:	4683      	mov	fp, r0
 8012736:	920e      	str	r2, [sp, #56]	@ 0x38
 8012738:	9313      	str	r3, [sp, #76]	@ 0x4c
 801273a:	b97f      	cbnz	r7, 801275c <_dtoa_r+0x3c>
 801273c:	2010      	movs	r0, #16
 801273e:	f7fe f8f9 	bl	8010934 <malloc>
 8012742:	4602      	mov	r2, r0
 8012744:	f8cb 001c 	str.w	r0, [fp, #28]
 8012748:	b920      	cbnz	r0, 8012754 <_dtoa_r+0x34>
 801274a:	4ba7      	ldr	r3, [pc, #668]	@ (80129e8 <_dtoa_r+0x2c8>)
 801274c:	21ef      	movs	r1, #239	@ 0xef
 801274e:	48a7      	ldr	r0, [pc, #668]	@ (80129ec <_dtoa_r+0x2cc>)
 8012750:	f7ff ff3e 	bl	80125d0 <__assert_func>
 8012754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012758:	6007      	str	r7, [r0, #0]
 801275a:	60c7      	str	r7, [r0, #12]
 801275c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012760:	6819      	ldr	r1, [r3, #0]
 8012762:	b159      	cbz	r1, 801277c <_dtoa_r+0x5c>
 8012764:	685a      	ldr	r2, [r3, #4]
 8012766:	604a      	str	r2, [r1, #4]
 8012768:	2301      	movs	r3, #1
 801276a:	4093      	lsls	r3, r2
 801276c:	608b      	str	r3, [r1, #8]
 801276e:	4658      	mov	r0, fp
 8012770:	f001 f970 	bl	8013a54 <_Bfree>
 8012774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012778:	2200      	movs	r2, #0
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	1e2b      	subs	r3, r5, #0
 801277e:	bfb9      	ittee	lt
 8012780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012784:	9303      	strlt	r3, [sp, #12]
 8012786:	2300      	movge	r3, #0
 8012788:	6033      	strge	r3, [r6, #0]
 801278a:	9f03      	ldr	r7, [sp, #12]
 801278c:	4b98      	ldr	r3, [pc, #608]	@ (80129f0 <_dtoa_r+0x2d0>)
 801278e:	bfbc      	itt	lt
 8012790:	2201      	movlt	r2, #1
 8012792:	6032      	strlt	r2, [r6, #0]
 8012794:	43bb      	bics	r3, r7
 8012796:	d112      	bne.n	80127be <_dtoa_r+0x9e>
 8012798:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801279a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801279e:	6013      	str	r3, [r2, #0]
 80127a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80127a4:	4323      	orrs	r3, r4
 80127a6:	f000 854d 	beq.w	8013244 <_dtoa_r+0xb24>
 80127aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012a04 <_dtoa_r+0x2e4>
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 854f 	beq.w	8013254 <_dtoa_r+0xb34>
 80127b6:	f10a 0303 	add.w	r3, sl, #3
 80127ba:	f000 bd49 	b.w	8013250 <_dtoa_r+0xb30>
 80127be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127c2:	2200      	movs	r2, #0
 80127c4:	ec51 0b17 	vmov	r0, r1, d7
 80127c8:	2300      	movs	r3, #0
 80127ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80127ce:	f7ee f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80127d2:	4680      	mov	r8, r0
 80127d4:	b158      	cbz	r0, 80127ee <_dtoa_r+0xce>
 80127d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80127d8:	2301      	movs	r3, #1
 80127da:	6013      	str	r3, [r2, #0]
 80127dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127de:	b113      	cbz	r3, 80127e6 <_dtoa_r+0xc6>
 80127e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80127e2:	4b84      	ldr	r3, [pc, #528]	@ (80129f4 <_dtoa_r+0x2d4>)
 80127e4:	6013      	str	r3, [r2, #0]
 80127e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012a08 <_dtoa_r+0x2e8>
 80127ea:	f000 bd33 	b.w	8013254 <_dtoa_r+0xb34>
 80127ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80127f2:	aa16      	add	r2, sp, #88	@ 0x58
 80127f4:	a917      	add	r1, sp, #92	@ 0x5c
 80127f6:	4658      	mov	r0, fp
 80127f8:	f001 fcd0 	bl	801419c <__d2b>
 80127fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012800:	4681      	mov	r9, r0
 8012802:	2e00      	cmp	r6, #0
 8012804:	d077      	beq.n	80128f6 <_dtoa_r+0x1d6>
 8012806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012808:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801280c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801281c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012820:	4619      	mov	r1, r3
 8012822:	2200      	movs	r2, #0
 8012824:	4b74      	ldr	r3, [pc, #464]	@ (80129f8 <_dtoa_r+0x2d8>)
 8012826:	f7ed fd2f 	bl	8000288 <__aeabi_dsub>
 801282a:	a369      	add	r3, pc, #420	@ (adr r3, 80129d0 <_dtoa_r+0x2b0>)
 801282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012830:	f7ed fee2 	bl	80005f8 <__aeabi_dmul>
 8012834:	a368      	add	r3, pc, #416	@ (adr r3, 80129d8 <_dtoa_r+0x2b8>)
 8012836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283a:	f7ed fd27 	bl	800028c <__adddf3>
 801283e:	4604      	mov	r4, r0
 8012840:	4630      	mov	r0, r6
 8012842:	460d      	mov	r5, r1
 8012844:	f7ed fe6e 	bl	8000524 <__aeabi_i2d>
 8012848:	a365      	add	r3, pc, #404	@ (adr r3, 80129e0 <_dtoa_r+0x2c0>)
 801284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284e:	f7ed fed3 	bl	80005f8 <__aeabi_dmul>
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4620      	mov	r0, r4
 8012858:	4629      	mov	r1, r5
 801285a:	f7ed fd17 	bl	800028c <__adddf3>
 801285e:	4604      	mov	r4, r0
 8012860:	460d      	mov	r5, r1
 8012862:	f7ee f979 	bl	8000b58 <__aeabi_d2iz>
 8012866:	2200      	movs	r2, #0
 8012868:	4607      	mov	r7, r0
 801286a:	2300      	movs	r3, #0
 801286c:	4620      	mov	r0, r4
 801286e:	4629      	mov	r1, r5
 8012870:	f7ee f934 	bl	8000adc <__aeabi_dcmplt>
 8012874:	b140      	cbz	r0, 8012888 <_dtoa_r+0x168>
 8012876:	4638      	mov	r0, r7
 8012878:	f7ed fe54 	bl	8000524 <__aeabi_i2d>
 801287c:	4622      	mov	r2, r4
 801287e:	462b      	mov	r3, r5
 8012880:	f7ee f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8012884:	b900      	cbnz	r0, 8012888 <_dtoa_r+0x168>
 8012886:	3f01      	subs	r7, #1
 8012888:	2f16      	cmp	r7, #22
 801288a:	d851      	bhi.n	8012930 <_dtoa_r+0x210>
 801288c:	4b5b      	ldr	r3, [pc, #364]	@ (80129fc <_dtoa_r+0x2dc>)
 801288e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801289a:	f7ee f91f 	bl	8000adc <__aeabi_dcmplt>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d048      	beq.n	8012934 <_dtoa_r+0x214>
 80128a2:	3f01      	subs	r7, #1
 80128a4:	2300      	movs	r3, #0
 80128a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80128a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80128aa:	1b9b      	subs	r3, r3, r6
 80128ac:	1e5a      	subs	r2, r3, #1
 80128ae:	bf44      	itt	mi
 80128b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80128b4:	2300      	movmi	r3, #0
 80128b6:	9208      	str	r2, [sp, #32]
 80128b8:	bf54      	ite	pl
 80128ba:	f04f 0800 	movpl.w	r8, #0
 80128be:	9308      	strmi	r3, [sp, #32]
 80128c0:	2f00      	cmp	r7, #0
 80128c2:	db39      	blt.n	8012938 <_dtoa_r+0x218>
 80128c4:	9b08      	ldr	r3, [sp, #32]
 80128c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80128c8:	443b      	add	r3, r7
 80128ca:	9308      	str	r3, [sp, #32]
 80128cc:	2300      	movs	r3, #0
 80128ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80128d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128d2:	2b09      	cmp	r3, #9
 80128d4:	d864      	bhi.n	80129a0 <_dtoa_r+0x280>
 80128d6:	2b05      	cmp	r3, #5
 80128d8:	bfc4      	itt	gt
 80128da:	3b04      	subgt	r3, #4
 80128dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80128de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128e0:	f1a3 0302 	sub.w	r3, r3, #2
 80128e4:	bfcc      	ite	gt
 80128e6:	2400      	movgt	r4, #0
 80128e8:	2401      	movle	r4, #1
 80128ea:	2b03      	cmp	r3, #3
 80128ec:	d863      	bhi.n	80129b6 <_dtoa_r+0x296>
 80128ee:	e8df f003 	tbb	[pc, r3]
 80128f2:	372a      	.short	0x372a
 80128f4:	5535      	.short	0x5535
 80128f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80128fa:	441e      	add	r6, r3
 80128fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012900:	2b20      	cmp	r3, #32
 8012902:	bfc1      	itttt	gt
 8012904:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012908:	409f      	lslgt	r7, r3
 801290a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801290e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012912:	bfd6      	itet	le
 8012914:	f1c3 0320 	rsble	r3, r3, #32
 8012918:	ea47 0003 	orrgt.w	r0, r7, r3
 801291c:	fa04 f003 	lslle.w	r0, r4, r3
 8012920:	f7ed fdf0 	bl	8000504 <__aeabi_ui2d>
 8012924:	2201      	movs	r2, #1
 8012926:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801292a:	3e01      	subs	r6, #1
 801292c:	9214      	str	r2, [sp, #80]	@ 0x50
 801292e:	e777      	b.n	8012820 <_dtoa_r+0x100>
 8012930:	2301      	movs	r3, #1
 8012932:	e7b8      	b.n	80128a6 <_dtoa_r+0x186>
 8012934:	9012      	str	r0, [sp, #72]	@ 0x48
 8012936:	e7b7      	b.n	80128a8 <_dtoa_r+0x188>
 8012938:	427b      	negs	r3, r7
 801293a:	930a      	str	r3, [sp, #40]	@ 0x28
 801293c:	2300      	movs	r3, #0
 801293e:	eba8 0807 	sub.w	r8, r8, r7
 8012942:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012944:	e7c4      	b.n	80128d0 <_dtoa_r+0x1b0>
 8012946:	2300      	movs	r3, #0
 8012948:	930b      	str	r3, [sp, #44]	@ 0x2c
 801294a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801294c:	2b00      	cmp	r3, #0
 801294e:	dc35      	bgt.n	80129bc <_dtoa_r+0x29c>
 8012950:	2301      	movs	r3, #1
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	9307      	str	r3, [sp, #28]
 8012956:	461a      	mov	r2, r3
 8012958:	920e      	str	r2, [sp, #56]	@ 0x38
 801295a:	e00b      	b.n	8012974 <_dtoa_r+0x254>
 801295c:	2301      	movs	r3, #1
 801295e:	e7f3      	b.n	8012948 <_dtoa_r+0x228>
 8012960:	2300      	movs	r3, #0
 8012962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012966:	18fb      	adds	r3, r7, r3
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	3301      	adds	r3, #1
 801296c:	2b01      	cmp	r3, #1
 801296e:	9307      	str	r3, [sp, #28]
 8012970:	bfb8      	it	lt
 8012972:	2301      	movlt	r3, #1
 8012974:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012978:	2100      	movs	r1, #0
 801297a:	2204      	movs	r2, #4
 801297c:	f102 0514 	add.w	r5, r2, #20
 8012980:	429d      	cmp	r5, r3
 8012982:	d91f      	bls.n	80129c4 <_dtoa_r+0x2a4>
 8012984:	6041      	str	r1, [r0, #4]
 8012986:	4658      	mov	r0, fp
 8012988:	f001 f824 	bl	80139d4 <_Balloc>
 801298c:	4682      	mov	sl, r0
 801298e:	2800      	cmp	r0, #0
 8012990:	d13c      	bne.n	8012a0c <_dtoa_r+0x2ec>
 8012992:	4b1b      	ldr	r3, [pc, #108]	@ (8012a00 <_dtoa_r+0x2e0>)
 8012994:	4602      	mov	r2, r0
 8012996:	f240 11af 	movw	r1, #431	@ 0x1af
 801299a:	e6d8      	b.n	801274e <_dtoa_r+0x2e>
 801299c:	2301      	movs	r3, #1
 801299e:	e7e0      	b.n	8012962 <_dtoa_r+0x242>
 80129a0:	2401      	movs	r4, #1
 80129a2:	2300      	movs	r3, #0
 80129a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80129a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80129a8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	9307      	str	r3, [sp, #28]
 80129b0:	2200      	movs	r2, #0
 80129b2:	2312      	movs	r3, #18
 80129b4:	e7d0      	b.n	8012958 <_dtoa_r+0x238>
 80129b6:	2301      	movs	r3, #1
 80129b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129ba:	e7f5      	b.n	80129a8 <_dtoa_r+0x288>
 80129bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	9307      	str	r3, [sp, #28]
 80129c2:	e7d7      	b.n	8012974 <_dtoa_r+0x254>
 80129c4:	3101      	adds	r1, #1
 80129c6:	0052      	lsls	r2, r2, #1
 80129c8:	e7d8      	b.n	801297c <_dtoa_r+0x25c>
 80129ca:	bf00      	nop
 80129cc:	f3af 8000 	nop.w
 80129d0:	636f4361 	.word	0x636f4361
 80129d4:	3fd287a7 	.word	0x3fd287a7
 80129d8:	8b60c8b3 	.word	0x8b60c8b3
 80129dc:	3fc68a28 	.word	0x3fc68a28
 80129e0:	509f79fb 	.word	0x509f79fb
 80129e4:	3fd34413 	.word	0x3fd34413
 80129e8:	0801594d 	.word	0x0801594d
 80129ec:	08015a0f 	.word	0x08015a0f
 80129f0:	7ff00000 	.word	0x7ff00000
 80129f4:	0801592a 	.word	0x0801592a
 80129f8:	3ff80000 	.word	0x3ff80000
 80129fc:	08015b68 	.word	0x08015b68
 8012a00:	08015a67 	.word	0x08015a67
 8012a04:	08015a0b 	.word	0x08015a0b
 8012a08:	08015929 	.word	0x08015929
 8012a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a10:	6018      	str	r0, [r3, #0]
 8012a12:	9b07      	ldr	r3, [sp, #28]
 8012a14:	2b0e      	cmp	r3, #14
 8012a16:	f200 80a4 	bhi.w	8012b62 <_dtoa_r+0x442>
 8012a1a:	2c00      	cmp	r4, #0
 8012a1c:	f000 80a1 	beq.w	8012b62 <_dtoa_r+0x442>
 8012a20:	2f00      	cmp	r7, #0
 8012a22:	dd33      	ble.n	8012a8c <_dtoa_r+0x36c>
 8012a24:	4bad      	ldr	r3, [pc, #692]	@ (8012cdc <_dtoa_r+0x5bc>)
 8012a26:	f007 020f 	and.w	r2, r7, #15
 8012a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a2e:	ed93 7b00 	vldr	d7, [r3]
 8012a32:	05f8      	lsls	r0, r7, #23
 8012a34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012a3c:	d516      	bpl.n	8012a6c <_dtoa_r+0x34c>
 8012a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8012ce0 <_dtoa_r+0x5c0>)
 8012a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a48:	f7ed ff00 	bl	800084c <__aeabi_ddiv>
 8012a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a50:	f004 040f 	and.w	r4, r4, #15
 8012a54:	2603      	movs	r6, #3
 8012a56:	4da2      	ldr	r5, [pc, #648]	@ (8012ce0 <_dtoa_r+0x5c0>)
 8012a58:	b954      	cbnz	r4, 8012a70 <_dtoa_r+0x350>
 8012a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a62:	f7ed fef3 	bl	800084c <__aeabi_ddiv>
 8012a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a6a:	e028      	b.n	8012abe <_dtoa_r+0x39e>
 8012a6c:	2602      	movs	r6, #2
 8012a6e:	e7f2      	b.n	8012a56 <_dtoa_r+0x336>
 8012a70:	07e1      	lsls	r1, r4, #31
 8012a72:	d508      	bpl.n	8012a86 <_dtoa_r+0x366>
 8012a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a7c:	f7ed fdbc 	bl	80005f8 <__aeabi_dmul>
 8012a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a84:	3601      	adds	r6, #1
 8012a86:	1064      	asrs	r4, r4, #1
 8012a88:	3508      	adds	r5, #8
 8012a8a:	e7e5      	b.n	8012a58 <_dtoa_r+0x338>
 8012a8c:	f000 80d2 	beq.w	8012c34 <_dtoa_r+0x514>
 8012a90:	427c      	negs	r4, r7
 8012a92:	4b92      	ldr	r3, [pc, #584]	@ (8012cdc <_dtoa_r+0x5bc>)
 8012a94:	4d92      	ldr	r5, [pc, #584]	@ (8012ce0 <_dtoa_r+0x5c0>)
 8012a96:	f004 020f 	and.w	r2, r4, #15
 8012a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012aa6:	f7ed fda7 	bl	80005f8 <__aeabi_dmul>
 8012aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aae:	1124      	asrs	r4, r4, #4
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	2602      	movs	r6, #2
 8012ab4:	2c00      	cmp	r4, #0
 8012ab6:	f040 80b2 	bne.w	8012c1e <_dtoa_r+0x4fe>
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1d3      	bne.n	8012a66 <_dtoa_r+0x346>
 8012abe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ac0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f000 80b7 	beq.w	8012c38 <_dtoa_r+0x518>
 8012aca:	4b86      	ldr	r3, [pc, #536]	@ (8012ce4 <_dtoa_r+0x5c4>)
 8012acc:	2200      	movs	r2, #0
 8012ace:	4620      	mov	r0, r4
 8012ad0:	4629      	mov	r1, r5
 8012ad2:	f7ee f803 	bl	8000adc <__aeabi_dcmplt>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	f000 80ae 	beq.w	8012c38 <_dtoa_r+0x518>
 8012adc:	9b07      	ldr	r3, [sp, #28]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f000 80aa 	beq.w	8012c38 <_dtoa_r+0x518>
 8012ae4:	9b00      	ldr	r3, [sp, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	dd37      	ble.n	8012b5a <_dtoa_r+0x43a>
 8012aea:	1e7b      	subs	r3, r7, #1
 8012aec:	9304      	str	r3, [sp, #16]
 8012aee:	4620      	mov	r0, r4
 8012af0:	4b7d      	ldr	r3, [pc, #500]	@ (8012ce8 <_dtoa_r+0x5c8>)
 8012af2:	2200      	movs	r2, #0
 8012af4:	4629      	mov	r1, r5
 8012af6:	f7ed fd7f 	bl	80005f8 <__aeabi_dmul>
 8012afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012afe:	9c00      	ldr	r4, [sp, #0]
 8012b00:	3601      	adds	r6, #1
 8012b02:	4630      	mov	r0, r6
 8012b04:	f7ed fd0e 	bl	8000524 <__aeabi_i2d>
 8012b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b0c:	f7ed fd74 	bl	80005f8 <__aeabi_dmul>
 8012b10:	4b76      	ldr	r3, [pc, #472]	@ (8012cec <_dtoa_r+0x5cc>)
 8012b12:	2200      	movs	r2, #0
 8012b14:	f7ed fbba 	bl	800028c <__adddf3>
 8012b18:	4605      	mov	r5, r0
 8012b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012b1e:	2c00      	cmp	r4, #0
 8012b20:	f040 808d 	bne.w	8012c3e <_dtoa_r+0x51e>
 8012b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b28:	4b71      	ldr	r3, [pc, #452]	@ (8012cf0 <_dtoa_r+0x5d0>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f7ed fbac 	bl	8000288 <__aeabi_dsub>
 8012b30:	4602      	mov	r2, r0
 8012b32:	460b      	mov	r3, r1
 8012b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b38:	462a      	mov	r2, r5
 8012b3a:	4633      	mov	r3, r6
 8012b3c:	f7ed ffec 	bl	8000b18 <__aeabi_dcmpgt>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	f040 828b 	bne.w	801305c <_dtoa_r+0x93c>
 8012b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b4a:	462a      	mov	r2, r5
 8012b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012b50:	f7ed ffc4 	bl	8000adc <__aeabi_dcmplt>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	f040 8128 	bne.w	8012daa <_dtoa_r+0x68a>
 8012b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	f2c0 815a 	blt.w	8012e1e <_dtoa_r+0x6fe>
 8012b6a:	2f0e      	cmp	r7, #14
 8012b6c:	f300 8157 	bgt.w	8012e1e <_dtoa_r+0x6fe>
 8012b70:	4b5a      	ldr	r3, [pc, #360]	@ (8012cdc <_dtoa_r+0x5bc>)
 8012b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b76:	ed93 7b00 	vldr	d7, [r3]
 8012b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	ed8d 7b00 	vstr	d7, [sp]
 8012b82:	da03      	bge.n	8012b8c <_dtoa_r+0x46c>
 8012b84:	9b07      	ldr	r3, [sp, #28]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f340 8101 	ble.w	8012d8e <_dtoa_r+0x66e>
 8012b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012b90:	4656      	mov	r6, sl
 8012b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b96:	4620      	mov	r0, r4
 8012b98:	4629      	mov	r1, r5
 8012b9a:	f7ed fe57 	bl	800084c <__aeabi_ddiv>
 8012b9e:	f7ed ffdb 	bl	8000b58 <__aeabi_d2iz>
 8012ba2:	4680      	mov	r8, r0
 8012ba4:	f7ed fcbe 	bl	8000524 <__aeabi_i2d>
 8012ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bac:	f7ed fd24 	bl	80005f8 <__aeabi_dmul>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	460b      	mov	r3, r1
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	4629      	mov	r1, r5
 8012bb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012bbc:	f7ed fb64 	bl	8000288 <__aeabi_dsub>
 8012bc0:	f806 4b01 	strb.w	r4, [r6], #1
 8012bc4:	9d07      	ldr	r5, [sp, #28]
 8012bc6:	eba6 040a 	sub.w	r4, r6, sl
 8012bca:	42a5      	cmp	r5, r4
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	f040 8117 	bne.w	8012e02 <_dtoa_r+0x6e2>
 8012bd4:	f7ed fb5a 	bl	800028c <__adddf3>
 8012bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bdc:	4604      	mov	r4, r0
 8012bde:	460d      	mov	r5, r1
 8012be0:	f7ed ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	f040 80f9 	bne.w	8012ddc <_dtoa_r+0x6bc>
 8012bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	4629      	mov	r1, r5
 8012bf2:	f7ed ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bf6:	b118      	cbz	r0, 8012c00 <_dtoa_r+0x4e0>
 8012bf8:	f018 0f01 	tst.w	r8, #1
 8012bfc:	f040 80ee 	bne.w	8012ddc <_dtoa_r+0x6bc>
 8012c00:	4649      	mov	r1, r9
 8012c02:	4658      	mov	r0, fp
 8012c04:	f000 ff26 	bl	8013a54 <_Bfree>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	7033      	strb	r3, [r6, #0]
 8012c0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012c0e:	3701      	adds	r7, #1
 8012c10:	601f      	str	r7, [r3, #0]
 8012c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	f000 831d 	beq.w	8013254 <_dtoa_r+0xb34>
 8012c1a:	601e      	str	r6, [r3, #0]
 8012c1c:	e31a      	b.n	8013254 <_dtoa_r+0xb34>
 8012c1e:	07e2      	lsls	r2, r4, #31
 8012c20:	d505      	bpl.n	8012c2e <_dtoa_r+0x50e>
 8012c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c26:	f7ed fce7 	bl	80005f8 <__aeabi_dmul>
 8012c2a:	3601      	adds	r6, #1
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	1064      	asrs	r4, r4, #1
 8012c30:	3508      	adds	r5, #8
 8012c32:	e73f      	b.n	8012ab4 <_dtoa_r+0x394>
 8012c34:	2602      	movs	r6, #2
 8012c36:	e742      	b.n	8012abe <_dtoa_r+0x39e>
 8012c38:	9c07      	ldr	r4, [sp, #28]
 8012c3a:	9704      	str	r7, [sp, #16]
 8012c3c:	e761      	b.n	8012b02 <_dtoa_r+0x3e2>
 8012c3e:	4b27      	ldr	r3, [pc, #156]	@ (8012cdc <_dtoa_r+0x5bc>)
 8012c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c4a:	4454      	add	r4, sl
 8012c4c:	2900      	cmp	r1, #0
 8012c4e:	d053      	beq.n	8012cf8 <_dtoa_r+0x5d8>
 8012c50:	4928      	ldr	r1, [pc, #160]	@ (8012cf4 <_dtoa_r+0x5d4>)
 8012c52:	2000      	movs	r0, #0
 8012c54:	f7ed fdfa 	bl	800084c <__aeabi_ddiv>
 8012c58:	4633      	mov	r3, r6
 8012c5a:	462a      	mov	r2, r5
 8012c5c:	f7ed fb14 	bl	8000288 <__aeabi_dsub>
 8012c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012c64:	4656      	mov	r6, sl
 8012c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c6a:	f7ed ff75 	bl	8000b58 <__aeabi_d2iz>
 8012c6e:	4605      	mov	r5, r0
 8012c70:	f7ed fc58 	bl	8000524 <__aeabi_i2d>
 8012c74:	4602      	mov	r2, r0
 8012c76:	460b      	mov	r3, r1
 8012c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c7c:	f7ed fb04 	bl	8000288 <__aeabi_dsub>
 8012c80:	3530      	adds	r5, #48	@ 0x30
 8012c82:	4602      	mov	r2, r0
 8012c84:	460b      	mov	r3, r1
 8012c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012c8a:	f806 5b01 	strb.w	r5, [r6], #1
 8012c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012c92:	f7ed ff23 	bl	8000adc <__aeabi_dcmplt>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d171      	bne.n	8012d7e <_dtoa_r+0x65e>
 8012c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c9e:	4911      	ldr	r1, [pc, #68]	@ (8012ce4 <_dtoa_r+0x5c4>)
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	f7ed faf1 	bl	8000288 <__aeabi_dsub>
 8012ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012caa:	f7ed ff17 	bl	8000adc <__aeabi_dcmplt>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	f040 8095 	bne.w	8012dde <_dtoa_r+0x6be>
 8012cb4:	42a6      	cmp	r6, r4
 8012cb6:	f43f af50 	beq.w	8012b5a <_dtoa_r+0x43a>
 8012cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8012ce8 <_dtoa_r+0x5c8>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f7ed fc99 	bl	80005f8 <__aeabi_dmul>
 8012cc6:	4b08      	ldr	r3, [pc, #32]	@ (8012ce8 <_dtoa_r+0x5c8>)
 8012cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012ccc:	2200      	movs	r2, #0
 8012cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cd2:	f7ed fc91 	bl	80005f8 <__aeabi_dmul>
 8012cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cda:	e7c4      	b.n	8012c66 <_dtoa_r+0x546>
 8012cdc:	08015b68 	.word	0x08015b68
 8012ce0:	08015b40 	.word	0x08015b40
 8012ce4:	3ff00000 	.word	0x3ff00000
 8012ce8:	40240000 	.word	0x40240000
 8012cec:	401c0000 	.word	0x401c0000
 8012cf0:	40140000 	.word	0x40140000
 8012cf4:	3fe00000 	.word	0x3fe00000
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f7ed fc7c 	bl	80005f8 <__aeabi_dmul>
 8012d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012d04:	9415      	str	r4, [sp, #84]	@ 0x54
 8012d06:	4656      	mov	r6, sl
 8012d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d0c:	f7ed ff24 	bl	8000b58 <__aeabi_d2iz>
 8012d10:	4605      	mov	r5, r0
 8012d12:	f7ed fc07 	bl	8000524 <__aeabi_i2d>
 8012d16:	4602      	mov	r2, r0
 8012d18:	460b      	mov	r3, r1
 8012d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d1e:	f7ed fab3 	bl	8000288 <__aeabi_dsub>
 8012d22:	3530      	adds	r5, #48	@ 0x30
 8012d24:	f806 5b01 	strb.w	r5, [r6], #1
 8012d28:	4602      	mov	r2, r0
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	42a6      	cmp	r6, r4
 8012d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d32:	f04f 0200 	mov.w	r2, #0
 8012d36:	d124      	bne.n	8012d82 <_dtoa_r+0x662>
 8012d38:	4bac      	ldr	r3, [pc, #688]	@ (8012fec <_dtoa_r+0x8cc>)
 8012d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012d3e:	f7ed faa5 	bl	800028c <__adddf3>
 8012d42:	4602      	mov	r2, r0
 8012d44:	460b      	mov	r3, r1
 8012d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d4a:	f7ed fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d145      	bne.n	8012dde <_dtoa_r+0x6be>
 8012d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012d56:	49a5      	ldr	r1, [pc, #660]	@ (8012fec <_dtoa_r+0x8cc>)
 8012d58:	2000      	movs	r0, #0
 8012d5a:	f7ed fa95 	bl	8000288 <__aeabi_dsub>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	460b      	mov	r3, r1
 8012d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d66:	f7ed feb9 	bl	8000adc <__aeabi_dcmplt>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	f43f aef5 	beq.w	8012b5a <_dtoa_r+0x43a>
 8012d70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012d72:	1e73      	subs	r3, r6, #1
 8012d74:	9315      	str	r3, [sp, #84]	@ 0x54
 8012d76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d7a:	2b30      	cmp	r3, #48	@ 0x30
 8012d7c:	d0f8      	beq.n	8012d70 <_dtoa_r+0x650>
 8012d7e:	9f04      	ldr	r7, [sp, #16]
 8012d80:	e73e      	b.n	8012c00 <_dtoa_r+0x4e0>
 8012d82:	4b9b      	ldr	r3, [pc, #620]	@ (8012ff0 <_dtoa_r+0x8d0>)
 8012d84:	f7ed fc38 	bl	80005f8 <__aeabi_dmul>
 8012d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d8c:	e7bc      	b.n	8012d08 <_dtoa_r+0x5e8>
 8012d8e:	d10c      	bne.n	8012daa <_dtoa_r+0x68a>
 8012d90:	4b98      	ldr	r3, [pc, #608]	@ (8012ff4 <_dtoa_r+0x8d4>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d98:	f7ed fc2e 	bl	80005f8 <__aeabi_dmul>
 8012d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012da0:	f7ed feb0 	bl	8000b04 <__aeabi_dcmpge>
 8012da4:	2800      	cmp	r0, #0
 8012da6:	f000 8157 	beq.w	8013058 <_dtoa_r+0x938>
 8012daa:	2400      	movs	r4, #0
 8012dac:	4625      	mov	r5, r4
 8012dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012db0:	43db      	mvns	r3, r3
 8012db2:	9304      	str	r3, [sp, #16]
 8012db4:	4656      	mov	r6, sl
 8012db6:	2700      	movs	r7, #0
 8012db8:	4621      	mov	r1, r4
 8012dba:	4658      	mov	r0, fp
 8012dbc:	f000 fe4a 	bl	8013a54 <_Bfree>
 8012dc0:	2d00      	cmp	r5, #0
 8012dc2:	d0dc      	beq.n	8012d7e <_dtoa_r+0x65e>
 8012dc4:	b12f      	cbz	r7, 8012dd2 <_dtoa_r+0x6b2>
 8012dc6:	42af      	cmp	r7, r5
 8012dc8:	d003      	beq.n	8012dd2 <_dtoa_r+0x6b2>
 8012dca:	4639      	mov	r1, r7
 8012dcc:	4658      	mov	r0, fp
 8012dce:	f000 fe41 	bl	8013a54 <_Bfree>
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	4658      	mov	r0, fp
 8012dd6:	f000 fe3d 	bl	8013a54 <_Bfree>
 8012dda:	e7d0      	b.n	8012d7e <_dtoa_r+0x65e>
 8012ddc:	9704      	str	r7, [sp, #16]
 8012dde:	4633      	mov	r3, r6
 8012de0:	461e      	mov	r6, r3
 8012de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012de6:	2a39      	cmp	r2, #57	@ 0x39
 8012de8:	d107      	bne.n	8012dfa <_dtoa_r+0x6da>
 8012dea:	459a      	cmp	sl, r3
 8012dec:	d1f8      	bne.n	8012de0 <_dtoa_r+0x6c0>
 8012dee:	9a04      	ldr	r2, [sp, #16]
 8012df0:	3201      	adds	r2, #1
 8012df2:	9204      	str	r2, [sp, #16]
 8012df4:	2230      	movs	r2, #48	@ 0x30
 8012df6:	f88a 2000 	strb.w	r2, [sl]
 8012dfa:	781a      	ldrb	r2, [r3, #0]
 8012dfc:	3201      	adds	r2, #1
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	e7bd      	b.n	8012d7e <_dtoa_r+0x65e>
 8012e02:	4b7b      	ldr	r3, [pc, #492]	@ (8012ff0 <_dtoa_r+0x8d0>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	f7ed fbf7 	bl	80005f8 <__aeabi_dmul>
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	4604      	mov	r4, r0
 8012e10:	460d      	mov	r5, r1
 8012e12:	f7ed fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	f43f aebb 	beq.w	8012b92 <_dtoa_r+0x472>
 8012e1c:	e6f0      	b.n	8012c00 <_dtoa_r+0x4e0>
 8012e1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012e20:	2a00      	cmp	r2, #0
 8012e22:	f000 80db 	beq.w	8012fdc <_dtoa_r+0x8bc>
 8012e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e28:	2a01      	cmp	r2, #1
 8012e2a:	f300 80bf 	bgt.w	8012fac <_dtoa_r+0x88c>
 8012e2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012e30:	2a00      	cmp	r2, #0
 8012e32:	f000 80b7 	beq.w	8012fa4 <_dtoa_r+0x884>
 8012e36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012e3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012e3c:	4646      	mov	r6, r8
 8012e3e:	9a08      	ldr	r2, [sp, #32]
 8012e40:	2101      	movs	r1, #1
 8012e42:	441a      	add	r2, r3
 8012e44:	4658      	mov	r0, fp
 8012e46:	4498      	add	r8, r3
 8012e48:	9208      	str	r2, [sp, #32]
 8012e4a:	f000 ff01 	bl	8013c50 <__i2b>
 8012e4e:	4605      	mov	r5, r0
 8012e50:	b15e      	cbz	r6, 8012e6a <_dtoa_r+0x74a>
 8012e52:	9b08      	ldr	r3, [sp, #32]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	dd08      	ble.n	8012e6a <_dtoa_r+0x74a>
 8012e58:	42b3      	cmp	r3, r6
 8012e5a:	9a08      	ldr	r2, [sp, #32]
 8012e5c:	bfa8      	it	ge
 8012e5e:	4633      	movge	r3, r6
 8012e60:	eba8 0803 	sub.w	r8, r8, r3
 8012e64:	1af6      	subs	r6, r6, r3
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	9308      	str	r3, [sp, #32]
 8012e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e6c:	b1f3      	cbz	r3, 8012eac <_dtoa_r+0x78c>
 8012e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f000 80b7 	beq.w	8012fe4 <_dtoa_r+0x8c4>
 8012e76:	b18c      	cbz	r4, 8012e9c <_dtoa_r+0x77c>
 8012e78:	4629      	mov	r1, r5
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	4658      	mov	r0, fp
 8012e7e:	f000 ffa7 	bl	8013dd0 <__pow5mult>
 8012e82:	464a      	mov	r2, r9
 8012e84:	4601      	mov	r1, r0
 8012e86:	4605      	mov	r5, r0
 8012e88:	4658      	mov	r0, fp
 8012e8a:	f000 fef7 	bl	8013c7c <__multiply>
 8012e8e:	4649      	mov	r1, r9
 8012e90:	9004      	str	r0, [sp, #16]
 8012e92:	4658      	mov	r0, fp
 8012e94:	f000 fdde 	bl	8013a54 <_Bfree>
 8012e98:	9b04      	ldr	r3, [sp, #16]
 8012e9a:	4699      	mov	r9, r3
 8012e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e9e:	1b1a      	subs	r2, r3, r4
 8012ea0:	d004      	beq.n	8012eac <_dtoa_r+0x78c>
 8012ea2:	4649      	mov	r1, r9
 8012ea4:	4658      	mov	r0, fp
 8012ea6:	f000 ff93 	bl	8013dd0 <__pow5mult>
 8012eaa:	4681      	mov	r9, r0
 8012eac:	2101      	movs	r1, #1
 8012eae:	4658      	mov	r0, fp
 8012eb0:	f000 fece 	bl	8013c50 <__i2b>
 8012eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f000 81cf 	beq.w	801325c <_dtoa_r+0xb3c>
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	4601      	mov	r1, r0
 8012ec2:	4658      	mov	r0, fp
 8012ec4:	f000 ff84 	bl	8013dd0 <__pow5mult>
 8012ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	4604      	mov	r4, r0
 8012ece:	f300 8095 	bgt.w	8012ffc <_dtoa_r+0x8dc>
 8012ed2:	9b02      	ldr	r3, [sp, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f040 8087 	bne.w	8012fe8 <_dtoa_r+0x8c8>
 8012eda:	9b03      	ldr	r3, [sp, #12]
 8012edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	f040 8089 	bne.w	8012ff8 <_dtoa_r+0x8d8>
 8012ee6:	9b03      	ldr	r3, [sp, #12]
 8012ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012eec:	0d1b      	lsrs	r3, r3, #20
 8012eee:	051b      	lsls	r3, r3, #20
 8012ef0:	b12b      	cbz	r3, 8012efe <_dtoa_r+0x7de>
 8012ef2:	9b08      	ldr	r3, [sp, #32]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	9308      	str	r3, [sp, #32]
 8012ef8:	f108 0801 	add.w	r8, r8, #1
 8012efc:	2301      	movs	r3, #1
 8012efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 81b0 	beq.w	8013268 <_dtoa_r+0xb48>
 8012f08:	6923      	ldr	r3, [r4, #16]
 8012f0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012f0e:	6918      	ldr	r0, [r3, #16]
 8012f10:	f000 fe52 	bl	8013bb8 <__hi0bits>
 8012f14:	f1c0 0020 	rsb	r0, r0, #32
 8012f18:	9b08      	ldr	r3, [sp, #32]
 8012f1a:	4418      	add	r0, r3
 8012f1c:	f010 001f 	ands.w	r0, r0, #31
 8012f20:	d077      	beq.n	8013012 <_dtoa_r+0x8f2>
 8012f22:	f1c0 0320 	rsb	r3, r0, #32
 8012f26:	2b04      	cmp	r3, #4
 8012f28:	dd6b      	ble.n	8013002 <_dtoa_r+0x8e2>
 8012f2a:	9b08      	ldr	r3, [sp, #32]
 8012f2c:	f1c0 001c 	rsb	r0, r0, #28
 8012f30:	4403      	add	r3, r0
 8012f32:	4480      	add	r8, r0
 8012f34:	4406      	add	r6, r0
 8012f36:	9308      	str	r3, [sp, #32]
 8012f38:	f1b8 0f00 	cmp.w	r8, #0
 8012f3c:	dd05      	ble.n	8012f4a <_dtoa_r+0x82a>
 8012f3e:	4649      	mov	r1, r9
 8012f40:	4642      	mov	r2, r8
 8012f42:	4658      	mov	r0, fp
 8012f44:	f000 ff9e 	bl	8013e84 <__lshift>
 8012f48:	4681      	mov	r9, r0
 8012f4a:	9b08      	ldr	r3, [sp, #32]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	dd05      	ble.n	8012f5c <_dtoa_r+0x83c>
 8012f50:	4621      	mov	r1, r4
 8012f52:	461a      	mov	r2, r3
 8012f54:	4658      	mov	r0, fp
 8012f56:	f000 ff95 	bl	8013e84 <__lshift>
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d059      	beq.n	8013016 <_dtoa_r+0x8f6>
 8012f62:	4621      	mov	r1, r4
 8012f64:	4648      	mov	r0, r9
 8012f66:	f000 fff9 	bl	8013f5c <__mcmp>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	da53      	bge.n	8013016 <_dtoa_r+0x8f6>
 8012f6e:	1e7b      	subs	r3, r7, #1
 8012f70:	9304      	str	r3, [sp, #16]
 8012f72:	4649      	mov	r1, r9
 8012f74:	2300      	movs	r3, #0
 8012f76:	220a      	movs	r2, #10
 8012f78:	4658      	mov	r0, fp
 8012f7a:	f000 fd8d 	bl	8013a98 <__multadd>
 8012f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f80:	4681      	mov	r9, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f000 8172 	beq.w	801326c <_dtoa_r+0xb4c>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	4629      	mov	r1, r5
 8012f8c:	220a      	movs	r2, #10
 8012f8e:	4658      	mov	r0, fp
 8012f90:	f000 fd82 	bl	8013a98 <__multadd>
 8012f94:	9b00      	ldr	r3, [sp, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	4605      	mov	r5, r0
 8012f9a:	dc67      	bgt.n	801306c <_dtoa_r+0x94c>
 8012f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	dc41      	bgt.n	8013026 <_dtoa_r+0x906>
 8012fa2:	e063      	b.n	801306c <_dtoa_r+0x94c>
 8012fa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012faa:	e746      	b.n	8012e3a <_dtoa_r+0x71a>
 8012fac:	9b07      	ldr	r3, [sp, #28]
 8012fae:	1e5c      	subs	r4, r3, #1
 8012fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fb2:	42a3      	cmp	r3, r4
 8012fb4:	bfbf      	itttt	lt
 8012fb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012fb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012fba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012fbc:	1ae3      	sublt	r3, r4, r3
 8012fbe:	bfb4      	ite	lt
 8012fc0:	18d2      	addlt	r2, r2, r3
 8012fc2:	1b1c      	subge	r4, r3, r4
 8012fc4:	9b07      	ldr	r3, [sp, #28]
 8012fc6:	bfbc      	itt	lt
 8012fc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012fca:	2400      	movlt	r4, #0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	bfb5      	itete	lt
 8012fd0:	eba8 0603 	sublt.w	r6, r8, r3
 8012fd4:	9b07      	ldrge	r3, [sp, #28]
 8012fd6:	2300      	movlt	r3, #0
 8012fd8:	4646      	movge	r6, r8
 8012fda:	e730      	b.n	8012e3e <_dtoa_r+0x71e>
 8012fdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012fde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012fe0:	4646      	mov	r6, r8
 8012fe2:	e735      	b.n	8012e50 <_dtoa_r+0x730>
 8012fe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012fe6:	e75c      	b.n	8012ea2 <_dtoa_r+0x782>
 8012fe8:	2300      	movs	r3, #0
 8012fea:	e788      	b.n	8012efe <_dtoa_r+0x7de>
 8012fec:	3fe00000 	.word	0x3fe00000
 8012ff0:	40240000 	.word	0x40240000
 8012ff4:	40140000 	.word	0x40140000
 8012ff8:	9b02      	ldr	r3, [sp, #8]
 8012ffa:	e780      	b.n	8012efe <_dtoa_r+0x7de>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013000:	e782      	b.n	8012f08 <_dtoa_r+0x7e8>
 8013002:	d099      	beq.n	8012f38 <_dtoa_r+0x818>
 8013004:	9a08      	ldr	r2, [sp, #32]
 8013006:	331c      	adds	r3, #28
 8013008:	441a      	add	r2, r3
 801300a:	4498      	add	r8, r3
 801300c:	441e      	add	r6, r3
 801300e:	9208      	str	r2, [sp, #32]
 8013010:	e792      	b.n	8012f38 <_dtoa_r+0x818>
 8013012:	4603      	mov	r3, r0
 8013014:	e7f6      	b.n	8013004 <_dtoa_r+0x8e4>
 8013016:	9b07      	ldr	r3, [sp, #28]
 8013018:	9704      	str	r7, [sp, #16]
 801301a:	2b00      	cmp	r3, #0
 801301c:	dc20      	bgt.n	8013060 <_dtoa_r+0x940>
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013022:	2b02      	cmp	r3, #2
 8013024:	dd1e      	ble.n	8013064 <_dtoa_r+0x944>
 8013026:	9b00      	ldr	r3, [sp, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	f47f aec0 	bne.w	8012dae <_dtoa_r+0x68e>
 801302e:	4621      	mov	r1, r4
 8013030:	2205      	movs	r2, #5
 8013032:	4658      	mov	r0, fp
 8013034:	f000 fd30 	bl	8013a98 <__multadd>
 8013038:	4601      	mov	r1, r0
 801303a:	4604      	mov	r4, r0
 801303c:	4648      	mov	r0, r9
 801303e:	f000 ff8d 	bl	8013f5c <__mcmp>
 8013042:	2800      	cmp	r0, #0
 8013044:	f77f aeb3 	ble.w	8012dae <_dtoa_r+0x68e>
 8013048:	4656      	mov	r6, sl
 801304a:	2331      	movs	r3, #49	@ 0x31
 801304c:	f806 3b01 	strb.w	r3, [r6], #1
 8013050:	9b04      	ldr	r3, [sp, #16]
 8013052:	3301      	adds	r3, #1
 8013054:	9304      	str	r3, [sp, #16]
 8013056:	e6ae      	b.n	8012db6 <_dtoa_r+0x696>
 8013058:	9c07      	ldr	r4, [sp, #28]
 801305a:	9704      	str	r7, [sp, #16]
 801305c:	4625      	mov	r5, r4
 801305e:	e7f3      	b.n	8013048 <_dtoa_r+0x928>
 8013060:	9b07      	ldr	r3, [sp, #28]
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013066:	2b00      	cmp	r3, #0
 8013068:	f000 8104 	beq.w	8013274 <_dtoa_r+0xb54>
 801306c:	2e00      	cmp	r6, #0
 801306e:	dd05      	ble.n	801307c <_dtoa_r+0x95c>
 8013070:	4629      	mov	r1, r5
 8013072:	4632      	mov	r2, r6
 8013074:	4658      	mov	r0, fp
 8013076:	f000 ff05 	bl	8013e84 <__lshift>
 801307a:	4605      	mov	r5, r0
 801307c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801307e:	2b00      	cmp	r3, #0
 8013080:	d05a      	beq.n	8013138 <_dtoa_r+0xa18>
 8013082:	6869      	ldr	r1, [r5, #4]
 8013084:	4658      	mov	r0, fp
 8013086:	f000 fca5 	bl	80139d4 <_Balloc>
 801308a:	4606      	mov	r6, r0
 801308c:	b928      	cbnz	r0, 801309a <_dtoa_r+0x97a>
 801308e:	4b84      	ldr	r3, [pc, #528]	@ (80132a0 <_dtoa_r+0xb80>)
 8013090:	4602      	mov	r2, r0
 8013092:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013096:	f7ff bb5a 	b.w	801274e <_dtoa_r+0x2e>
 801309a:	692a      	ldr	r2, [r5, #16]
 801309c:	3202      	adds	r2, #2
 801309e:	0092      	lsls	r2, r2, #2
 80130a0:	f105 010c 	add.w	r1, r5, #12
 80130a4:	300c      	adds	r0, #12
 80130a6:	f7ff fa7c 	bl	80125a2 <memcpy>
 80130aa:	2201      	movs	r2, #1
 80130ac:	4631      	mov	r1, r6
 80130ae:	4658      	mov	r0, fp
 80130b0:	f000 fee8 	bl	8013e84 <__lshift>
 80130b4:	f10a 0301 	add.w	r3, sl, #1
 80130b8:	9307      	str	r3, [sp, #28]
 80130ba:	9b00      	ldr	r3, [sp, #0]
 80130bc:	4453      	add	r3, sl
 80130be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130c0:	9b02      	ldr	r3, [sp, #8]
 80130c2:	f003 0301 	and.w	r3, r3, #1
 80130c6:	462f      	mov	r7, r5
 80130c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80130ca:	4605      	mov	r5, r0
 80130cc:	9b07      	ldr	r3, [sp, #28]
 80130ce:	4621      	mov	r1, r4
 80130d0:	3b01      	subs	r3, #1
 80130d2:	4648      	mov	r0, r9
 80130d4:	9300      	str	r3, [sp, #0]
 80130d6:	f7ff fa99 	bl	801260c <quorem>
 80130da:	4639      	mov	r1, r7
 80130dc:	9002      	str	r0, [sp, #8]
 80130de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80130e2:	4648      	mov	r0, r9
 80130e4:	f000 ff3a 	bl	8013f5c <__mcmp>
 80130e8:	462a      	mov	r2, r5
 80130ea:	9008      	str	r0, [sp, #32]
 80130ec:	4621      	mov	r1, r4
 80130ee:	4658      	mov	r0, fp
 80130f0:	f000 ff50 	bl	8013f94 <__mdiff>
 80130f4:	68c2      	ldr	r2, [r0, #12]
 80130f6:	4606      	mov	r6, r0
 80130f8:	bb02      	cbnz	r2, 801313c <_dtoa_r+0xa1c>
 80130fa:	4601      	mov	r1, r0
 80130fc:	4648      	mov	r0, r9
 80130fe:	f000 ff2d 	bl	8013f5c <__mcmp>
 8013102:	4602      	mov	r2, r0
 8013104:	4631      	mov	r1, r6
 8013106:	4658      	mov	r0, fp
 8013108:	920e      	str	r2, [sp, #56]	@ 0x38
 801310a:	f000 fca3 	bl	8013a54 <_Bfree>
 801310e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013110:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013112:	9e07      	ldr	r6, [sp, #28]
 8013114:	ea43 0102 	orr.w	r1, r3, r2
 8013118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801311a:	4319      	orrs	r1, r3
 801311c:	d110      	bne.n	8013140 <_dtoa_r+0xa20>
 801311e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013122:	d029      	beq.n	8013178 <_dtoa_r+0xa58>
 8013124:	9b08      	ldr	r3, [sp, #32]
 8013126:	2b00      	cmp	r3, #0
 8013128:	dd02      	ble.n	8013130 <_dtoa_r+0xa10>
 801312a:	9b02      	ldr	r3, [sp, #8]
 801312c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013130:	9b00      	ldr	r3, [sp, #0]
 8013132:	f883 8000 	strb.w	r8, [r3]
 8013136:	e63f      	b.n	8012db8 <_dtoa_r+0x698>
 8013138:	4628      	mov	r0, r5
 801313a:	e7bb      	b.n	80130b4 <_dtoa_r+0x994>
 801313c:	2201      	movs	r2, #1
 801313e:	e7e1      	b.n	8013104 <_dtoa_r+0x9e4>
 8013140:	9b08      	ldr	r3, [sp, #32]
 8013142:	2b00      	cmp	r3, #0
 8013144:	db04      	blt.n	8013150 <_dtoa_r+0xa30>
 8013146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013148:	430b      	orrs	r3, r1
 801314a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801314c:	430b      	orrs	r3, r1
 801314e:	d120      	bne.n	8013192 <_dtoa_r+0xa72>
 8013150:	2a00      	cmp	r2, #0
 8013152:	dded      	ble.n	8013130 <_dtoa_r+0xa10>
 8013154:	4649      	mov	r1, r9
 8013156:	2201      	movs	r2, #1
 8013158:	4658      	mov	r0, fp
 801315a:	f000 fe93 	bl	8013e84 <__lshift>
 801315e:	4621      	mov	r1, r4
 8013160:	4681      	mov	r9, r0
 8013162:	f000 fefb 	bl	8013f5c <__mcmp>
 8013166:	2800      	cmp	r0, #0
 8013168:	dc03      	bgt.n	8013172 <_dtoa_r+0xa52>
 801316a:	d1e1      	bne.n	8013130 <_dtoa_r+0xa10>
 801316c:	f018 0f01 	tst.w	r8, #1
 8013170:	d0de      	beq.n	8013130 <_dtoa_r+0xa10>
 8013172:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013176:	d1d8      	bne.n	801312a <_dtoa_r+0xa0a>
 8013178:	9a00      	ldr	r2, [sp, #0]
 801317a:	2339      	movs	r3, #57	@ 0x39
 801317c:	7013      	strb	r3, [r2, #0]
 801317e:	4633      	mov	r3, r6
 8013180:	461e      	mov	r6, r3
 8013182:	3b01      	subs	r3, #1
 8013184:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013188:	2a39      	cmp	r2, #57	@ 0x39
 801318a:	d052      	beq.n	8013232 <_dtoa_r+0xb12>
 801318c:	3201      	adds	r2, #1
 801318e:	701a      	strb	r2, [r3, #0]
 8013190:	e612      	b.n	8012db8 <_dtoa_r+0x698>
 8013192:	2a00      	cmp	r2, #0
 8013194:	dd07      	ble.n	80131a6 <_dtoa_r+0xa86>
 8013196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801319a:	d0ed      	beq.n	8013178 <_dtoa_r+0xa58>
 801319c:	9a00      	ldr	r2, [sp, #0]
 801319e:	f108 0301 	add.w	r3, r8, #1
 80131a2:	7013      	strb	r3, [r2, #0]
 80131a4:	e608      	b.n	8012db8 <_dtoa_r+0x698>
 80131a6:	9b07      	ldr	r3, [sp, #28]
 80131a8:	9a07      	ldr	r2, [sp, #28]
 80131aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80131ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131b0:	4293      	cmp	r3, r2
 80131b2:	d028      	beq.n	8013206 <_dtoa_r+0xae6>
 80131b4:	4649      	mov	r1, r9
 80131b6:	2300      	movs	r3, #0
 80131b8:	220a      	movs	r2, #10
 80131ba:	4658      	mov	r0, fp
 80131bc:	f000 fc6c 	bl	8013a98 <__multadd>
 80131c0:	42af      	cmp	r7, r5
 80131c2:	4681      	mov	r9, r0
 80131c4:	f04f 0300 	mov.w	r3, #0
 80131c8:	f04f 020a 	mov.w	r2, #10
 80131cc:	4639      	mov	r1, r7
 80131ce:	4658      	mov	r0, fp
 80131d0:	d107      	bne.n	80131e2 <_dtoa_r+0xac2>
 80131d2:	f000 fc61 	bl	8013a98 <__multadd>
 80131d6:	4607      	mov	r7, r0
 80131d8:	4605      	mov	r5, r0
 80131da:	9b07      	ldr	r3, [sp, #28]
 80131dc:	3301      	adds	r3, #1
 80131de:	9307      	str	r3, [sp, #28]
 80131e0:	e774      	b.n	80130cc <_dtoa_r+0x9ac>
 80131e2:	f000 fc59 	bl	8013a98 <__multadd>
 80131e6:	4629      	mov	r1, r5
 80131e8:	4607      	mov	r7, r0
 80131ea:	2300      	movs	r3, #0
 80131ec:	220a      	movs	r2, #10
 80131ee:	4658      	mov	r0, fp
 80131f0:	f000 fc52 	bl	8013a98 <__multadd>
 80131f4:	4605      	mov	r5, r0
 80131f6:	e7f0      	b.n	80131da <_dtoa_r+0xaba>
 80131f8:	9b00      	ldr	r3, [sp, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	bfcc      	ite	gt
 80131fe:	461e      	movgt	r6, r3
 8013200:	2601      	movle	r6, #1
 8013202:	4456      	add	r6, sl
 8013204:	2700      	movs	r7, #0
 8013206:	4649      	mov	r1, r9
 8013208:	2201      	movs	r2, #1
 801320a:	4658      	mov	r0, fp
 801320c:	f000 fe3a 	bl	8013e84 <__lshift>
 8013210:	4621      	mov	r1, r4
 8013212:	4681      	mov	r9, r0
 8013214:	f000 fea2 	bl	8013f5c <__mcmp>
 8013218:	2800      	cmp	r0, #0
 801321a:	dcb0      	bgt.n	801317e <_dtoa_r+0xa5e>
 801321c:	d102      	bne.n	8013224 <_dtoa_r+0xb04>
 801321e:	f018 0f01 	tst.w	r8, #1
 8013222:	d1ac      	bne.n	801317e <_dtoa_r+0xa5e>
 8013224:	4633      	mov	r3, r6
 8013226:	461e      	mov	r6, r3
 8013228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801322c:	2a30      	cmp	r2, #48	@ 0x30
 801322e:	d0fa      	beq.n	8013226 <_dtoa_r+0xb06>
 8013230:	e5c2      	b.n	8012db8 <_dtoa_r+0x698>
 8013232:	459a      	cmp	sl, r3
 8013234:	d1a4      	bne.n	8013180 <_dtoa_r+0xa60>
 8013236:	9b04      	ldr	r3, [sp, #16]
 8013238:	3301      	adds	r3, #1
 801323a:	9304      	str	r3, [sp, #16]
 801323c:	2331      	movs	r3, #49	@ 0x31
 801323e:	f88a 3000 	strb.w	r3, [sl]
 8013242:	e5b9      	b.n	8012db8 <_dtoa_r+0x698>
 8013244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013246:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80132a4 <_dtoa_r+0xb84>
 801324a:	b11b      	cbz	r3, 8013254 <_dtoa_r+0xb34>
 801324c:	f10a 0308 	add.w	r3, sl, #8
 8013250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013252:	6013      	str	r3, [r2, #0]
 8013254:	4650      	mov	r0, sl
 8013256:	b019      	add	sp, #100	@ 0x64
 8013258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801325e:	2b01      	cmp	r3, #1
 8013260:	f77f ae37 	ble.w	8012ed2 <_dtoa_r+0x7b2>
 8013264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013266:	930a      	str	r3, [sp, #40]	@ 0x28
 8013268:	2001      	movs	r0, #1
 801326a:	e655      	b.n	8012f18 <_dtoa_r+0x7f8>
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	f77f aed6 	ble.w	8013020 <_dtoa_r+0x900>
 8013274:	4656      	mov	r6, sl
 8013276:	4621      	mov	r1, r4
 8013278:	4648      	mov	r0, r9
 801327a:	f7ff f9c7 	bl	801260c <quorem>
 801327e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013282:	f806 8b01 	strb.w	r8, [r6], #1
 8013286:	9b00      	ldr	r3, [sp, #0]
 8013288:	eba6 020a 	sub.w	r2, r6, sl
 801328c:	4293      	cmp	r3, r2
 801328e:	ddb3      	ble.n	80131f8 <_dtoa_r+0xad8>
 8013290:	4649      	mov	r1, r9
 8013292:	2300      	movs	r3, #0
 8013294:	220a      	movs	r2, #10
 8013296:	4658      	mov	r0, fp
 8013298:	f000 fbfe 	bl	8013a98 <__multadd>
 801329c:	4681      	mov	r9, r0
 801329e:	e7ea      	b.n	8013276 <_dtoa_r+0xb56>
 80132a0:	08015a67 	.word	0x08015a67
 80132a4:	08015a02 	.word	0x08015a02

080132a8 <_free_r>:
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4605      	mov	r5, r0
 80132ac:	2900      	cmp	r1, #0
 80132ae:	d041      	beq.n	8013334 <_free_r+0x8c>
 80132b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132b4:	1f0c      	subs	r4, r1, #4
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	bfb8      	it	lt
 80132ba:	18e4      	addlt	r4, r4, r3
 80132bc:	f7fd fbec 	bl	8010a98 <__malloc_lock>
 80132c0:	4a1d      	ldr	r2, [pc, #116]	@ (8013338 <_free_r+0x90>)
 80132c2:	6813      	ldr	r3, [r2, #0]
 80132c4:	b933      	cbnz	r3, 80132d4 <_free_r+0x2c>
 80132c6:	6063      	str	r3, [r4, #4]
 80132c8:	6014      	str	r4, [r2, #0]
 80132ca:	4628      	mov	r0, r5
 80132cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132d0:	f7fd bbe8 	b.w	8010aa4 <__malloc_unlock>
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	d908      	bls.n	80132ea <_free_r+0x42>
 80132d8:	6820      	ldr	r0, [r4, #0]
 80132da:	1821      	adds	r1, r4, r0
 80132dc:	428b      	cmp	r3, r1
 80132de:	bf01      	itttt	eq
 80132e0:	6819      	ldreq	r1, [r3, #0]
 80132e2:	685b      	ldreq	r3, [r3, #4]
 80132e4:	1809      	addeq	r1, r1, r0
 80132e6:	6021      	streq	r1, [r4, #0]
 80132e8:	e7ed      	b.n	80132c6 <_free_r+0x1e>
 80132ea:	461a      	mov	r2, r3
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	b10b      	cbz	r3, 80132f4 <_free_r+0x4c>
 80132f0:	42a3      	cmp	r3, r4
 80132f2:	d9fa      	bls.n	80132ea <_free_r+0x42>
 80132f4:	6811      	ldr	r1, [r2, #0]
 80132f6:	1850      	adds	r0, r2, r1
 80132f8:	42a0      	cmp	r0, r4
 80132fa:	d10b      	bne.n	8013314 <_free_r+0x6c>
 80132fc:	6820      	ldr	r0, [r4, #0]
 80132fe:	4401      	add	r1, r0
 8013300:	1850      	adds	r0, r2, r1
 8013302:	4283      	cmp	r3, r0
 8013304:	6011      	str	r1, [r2, #0]
 8013306:	d1e0      	bne.n	80132ca <_free_r+0x22>
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	6053      	str	r3, [r2, #4]
 801330e:	4408      	add	r0, r1
 8013310:	6010      	str	r0, [r2, #0]
 8013312:	e7da      	b.n	80132ca <_free_r+0x22>
 8013314:	d902      	bls.n	801331c <_free_r+0x74>
 8013316:	230c      	movs	r3, #12
 8013318:	602b      	str	r3, [r5, #0]
 801331a:	e7d6      	b.n	80132ca <_free_r+0x22>
 801331c:	6820      	ldr	r0, [r4, #0]
 801331e:	1821      	adds	r1, r4, r0
 8013320:	428b      	cmp	r3, r1
 8013322:	bf04      	itt	eq
 8013324:	6819      	ldreq	r1, [r3, #0]
 8013326:	685b      	ldreq	r3, [r3, #4]
 8013328:	6063      	str	r3, [r4, #4]
 801332a:	bf04      	itt	eq
 801332c:	1809      	addeq	r1, r1, r0
 801332e:	6021      	streq	r1, [r4, #0]
 8013330:	6054      	str	r4, [r2, #4]
 8013332:	e7ca      	b.n	80132ca <_free_r+0x22>
 8013334:	bd38      	pop	{r3, r4, r5, pc}
 8013336:	bf00      	nop
 8013338:	200058cc 	.word	0x200058cc

0801333c <rshift>:
 801333c:	6903      	ldr	r3, [r0, #16]
 801333e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013346:	ea4f 1261 	mov.w	r2, r1, asr #5
 801334a:	f100 0414 	add.w	r4, r0, #20
 801334e:	dd45      	ble.n	80133dc <rshift+0xa0>
 8013350:	f011 011f 	ands.w	r1, r1, #31
 8013354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801335c:	d10c      	bne.n	8013378 <rshift+0x3c>
 801335e:	f100 0710 	add.w	r7, r0, #16
 8013362:	4629      	mov	r1, r5
 8013364:	42b1      	cmp	r1, r6
 8013366:	d334      	bcc.n	80133d2 <rshift+0x96>
 8013368:	1a9b      	subs	r3, r3, r2
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	1eea      	subs	r2, r5, #3
 801336e:	4296      	cmp	r6, r2
 8013370:	bf38      	it	cc
 8013372:	2300      	movcc	r3, #0
 8013374:	4423      	add	r3, r4
 8013376:	e015      	b.n	80133a4 <rshift+0x68>
 8013378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801337c:	f1c1 0820 	rsb	r8, r1, #32
 8013380:	40cf      	lsrs	r7, r1
 8013382:	f105 0e04 	add.w	lr, r5, #4
 8013386:	46a1      	mov	r9, r4
 8013388:	4576      	cmp	r6, lr
 801338a:	46f4      	mov	ip, lr
 801338c:	d815      	bhi.n	80133ba <rshift+0x7e>
 801338e:	1a9a      	subs	r2, r3, r2
 8013390:	0092      	lsls	r2, r2, #2
 8013392:	3a04      	subs	r2, #4
 8013394:	3501      	adds	r5, #1
 8013396:	42ae      	cmp	r6, r5
 8013398:	bf38      	it	cc
 801339a:	2200      	movcc	r2, #0
 801339c:	18a3      	adds	r3, r4, r2
 801339e:	50a7      	str	r7, [r4, r2]
 80133a0:	b107      	cbz	r7, 80133a4 <rshift+0x68>
 80133a2:	3304      	adds	r3, #4
 80133a4:	1b1a      	subs	r2, r3, r4
 80133a6:	42a3      	cmp	r3, r4
 80133a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133ac:	bf08      	it	eq
 80133ae:	2300      	moveq	r3, #0
 80133b0:	6102      	str	r2, [r0, #16]
 80133b2:	bf08      	it	eq
 80133b4:	6143      	streq	r3, [r0, #20]
 80133b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ba:	f8dc c000 	ldr.w	ip, [ip]
 80133be:	fa0c fc08 	lsl.w	ip, ip, r8
 80133c2:	ea4c 0707 	orr.w	r7, ip, r7
 80133c6:	f849 7b04 	str.w	r7, [r9], #4
 80133ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133ce:	40cf      	lsrs	r7, r1
 80133d0:	e7da      	b.n	8013388 <rshift+0x4c>
 80133d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80133d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80133da:	e7c3      	b.n	8013364 <rshift+0x28>
 80133dc:	4623      	mov	r3, r4
 80133de:	e7e1      	b.n	80133a4 <rshift+0x68>

080133e0 <__hexdig_fun>:
 80133e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80133e4:	2b09      	cmp	r3, #9
 80133e6:	d802      	bhi.n	80133ee <__hexdig_fun+0xe>
 80133e8:	3820      	subs	r0, #32
 80133ea:	b2c0      	uxtb	r0, r0
 80133ec:	4770      	bx	lr
 80133ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80133f2:	2b05      	cmp	r3, #5
 80133f4:	d801      	bhi.n	80133fa <__hexdig_fun+0x1a>
 80133f6:	3847      	subs	r0, #71	@ 0x47
 80133f8:	e7f7      	b.n	80133ea <__hexdig_fun+0xa>
 80133fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80133fe:	2b05      	cmp	r3, #5
 8013400:	d801      	bhi.n	8013406 <__hexdig_fun+0x26>
 8013402:	3827      	subs	r0, #39	@ 0x27
 8013404:	e7f1      	b.n	80133ea <__hexdig_fun+0xa>
 8013406:	2000      	movs	r0, #0
 8013408:	4770      	bx	lr
	...

0801340c <__gethex>:
 801340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013410:	b085      	sub	sp, #20
 8013412:	468a      	mov	sl, r1
 8013414:	9302      	str	r3, [sp, #8]
 8013416:	680b      	ldr	r3, [r1, #0]
 8013418:	9001      	str	r0, [sp, #4]
 801341a:	4690      	mov	r8, r2
 801341c:	1c9c      	adds	r4, r3, #2
 801341e:	46a1      	mov	r9, r4
 8013420:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013424:	2830      	cmp	r0, #48	@ 0x30
 8013426:	d0fa      	beq.n	801341e <__gethex+0x12>
 8013428:	eba9 0303 	sub.w	r3, r9, r3
 801342c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013430:	f7ff ffd6 	bl	80133e0 <__hexdig_fun>
 8013434:	4605      	mov	r5, r0
 8013436:	2800      	cmp	r0, #0
 8013438:	d168      	bne.n	801350c <__gethex+0x100>
 801343a:	49a0      	ldr	r1, [pc, #640]	@ (80136bc <__gethex+0x2b0>)
 801343c:	2201      	movs	r2, #1
 801343e:	4648      	mov	r0, r9
 8013440:	f7fe ff5c 	bl	80122fc <strncmp>
 8013444:	4607      	mov	r7, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d167      	bne.n	801351a <__gethex+0x10e>
 801344a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801344e:	4626      	mov	r6, r4
 8013450:	f7ff ffc6 	bl	80133e0 <__hexdig_fun>
 8013454:	2800      	cmp	r0, #0
 8013456:	d062      	beq.n	801351e <__gethex+0x112>
 8013458:	4623      	mov	r3, r4
 801345a:	7818      	ldrb	r0, [r3, #0]
 801345c:	2830      	cmp	r0, #48	@ 0x30
 801345e:	4699      	mov	r9, r3
 8013460:	f103 0301 	add.w	r3, r3, #1
 8013464:	d0f9      	beq.n	801345a <__gethex+0x4e>
 8013466:	f7ff ffbb 	bl	80133e0 <__hexdig_fun>
 801346a:	fab0 f580 	clz	r5, r0
 801346e:	096d      	lsrs	r5, r5, #5
 8013470:	f04f 0b01 	mov.w	fp, #1
 8013474:	464a      	mov	r2, r9
 8013476:	4616      	mov	r6, r2
 8013478:	3201      	adds	r2, #1
 801347a:	7830      	ldrb	r0, [r6, #0]
 801347c:	f7ff ffb0 	bl	80133e0 <__hexdig_fun>
 8013480:	2800      	cmp	r0, #0
 8013482:	d1f8      	bne.n	8013476 <__gethex+0x6a>
 8013484:	498d      	ldr	r1, [pc, #564]	@ (80136bc <__gethex+0x2b0>)
 8013486:	2201      	movs	r2, #1
 8013488:	4630      	mov	r0, r6
 801348a:	f7fe ff37 	bl	80122fc <strncmp>
 801348e:	2800      	cmp	r0, #0
 8013490:	d13f      	bne.n	8013512 <__gethex+0x106>
 8013492:	b944      	cbnz	r4, 80134a6 <__gethex+0x9a>
 8013494:	1c74      	adds	r4, r6, #1
 8013496:	4622      	mov	r2, r4
 8013498:	4616      	mov	r6, r2
 801349a:	3201      	adds	r2, #1
 801349c:	7830      	ldrb	r0, [r6, #0]
 801349e:	f7ff ff9f 	bl	80133e0 <__hexdig_fun>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d1f8      	bne.n	8013498 <__gethex+0x8c>
 80134a6:	1ba4      	subs	r4, r4, r6
 80134a8:	00a7      	lsls	r7, r4, #2
 80134aa:	7833      	ldrb	r3, [r6, #0]
 80134ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80134b0:	2b50      	cmp	r3, #80	@ 0x50
 80134b2:	d13e      	bne.n	8013532 <__gethex+0x126>
 80134b4:	7873      	ldrb	r3, [r6, #1]
 80134b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80134b8:	d033      	beq.n	8013522 <__gethex+0x116>
 80134ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80134bc:	d034      	beq.n	8013528 <__gethex+0x11c>
 80134be:	1c71      	adds	r1, r6, #1
 80134c0:	2400      	movs	r4, #0
 80134c2:	7808      	ldrb	r0, [r1, #0]
 80134c4:	f7ff ff8c 	bl	80133e0 <__hexdig_fun>
 80134c8:	1e43      	subs	r3, r0, #1
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	2b18      	cmp	r3, #24
 80134ce:	d830      	bhi.n	8013532 <__gethex+0x126>
 80134d0:	f1a0 0210 	sub.w	r2, r0, #16
 80134d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134d8:	f7ff ff82 	bl	80133e0 <__hexdig_fun>
 80134dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80134e0:	fa5f fc8c 	uxtb.w	ip, ip
 80134e4:	f1bc 0f18 	cmp.w	ip, #24
 80134e8:	f04f 030a 	mov.w	r3, #10
 80134ec:	d91e      	bls.n	801352c <__gethex+0x120>
 80134ee:	b104      	cbz	r4, 80134f2 <__gethex+0xe6>
 80134f0:	4252      	negs	r2, r2
 80134f2:	4417      	add	r7, r2
 80134f4:	f8ca 1000 	str.w	r1, [sl]
 80134f8:	b1ed      	cbz	r5, 8013536 <__gethex+0x12a>
 80134fa:	f1bb 0f00 	cmp.w	fp, #0
 80134fe:	bf0c      	ite	eq
 8013500:	2506      	moveq	r5, #6
 8013502:	2500      	movne	r5, #0
 8013504:	4628      	mov	r0, r5
 8013506:	b005      	add	sp, #20
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350c:	2500      	movs	r5, #0
 801350e:	462c      	mov	r4, r5
 8013510:	e7b0      	b.n	8013474 <__gethex+0x68>
 8013512:	2c00      	cmp	r4, #0
 8013514:	d1c7      	bne.n	80134a6 <__gethex+0x9a>
 8013516:	4627      	mov	r7, r4
 8013518:	e7c7      	b.n	80134aa <__gethex+0x9e>
 801351a:	464e      	mov	r6, r9
 801351c:	462f      	mov	r7, r5
 801351e:	2501      	movs	r5, #1
 8013520:	e7c3      	b.n	80134aa <__gethex+0x9e>
 8013522:	2400      	movs	r4, #0
 8013524:	1cb1      	adds	r1, r6, #2
 8013526:	e7cc      	b.n	80134c2 <__gethex+0xb6>
 8013528:	2401      	movs	r4, #1
 801352a:	e7fb      	b.n	8013524 <__gethex+0x118>
 801352c:	fb03 0002 	mla	r0, r3, r2, r0
 8013530:	e7ce      	b.n	80134d0 <__gethex+0xc4>
 8013532:	4631      	mov	r1, r6
 8013534:	e7de      	b.n	80134f4 <__gethex+0xe8>
 8013536:	eba6 0309 	sub.w	r3, r6, r9
 801353a:	3b01      	subs	r3, #1
 801353c:	4629      	mov	r1, r5
 801353e:	2b07      	cmp	r3, #7
 8013540:	dc0a      	bgt.n	8013558 <__gethex+0x14c>
 8013542:	9801      	ldr	r0, [sp, #4]
 8013544:	f000 fa46 	bl	80139d4 <_Balloc>
 8013548:	4604      	mov	r4, r0
 801354a:	b940      	cbnz	r0, 801355e <__gethex+0x152>
 801354c:	4b5c      	ldr	r3, [pc, #368]	@ (80136c0 <__gethex+0x2b4>)
 801354e:	4602      	mov	r2, r0
 8013550:	21e4      	movs	r1, #228	@ 0xe4
 8013552:	485c      	ldr	r0, [pc, #368]	@ (80136c4 <__gethex+0x2b8>)
 8013554:	f7ff f83c 	bl	80125d0 <__assert_func>
 8013558:	3101      	adds	r1, #1
 801355a:	105b      	asrs	r3, r3, #1
 801355c:	e7ef      	b.n	801353e <__gethex+0x132>
 801355e:	f100 0a14 	add.w	sl, r0, #20
 8013562:	2300      	movs	r3, #0
 8013564:	4655      	mov	r5, sl
 8013566:	469b      	mov	fp, r3
 8013568:	45b1      	cmp	r9, r6
 801356a:	d337      	bcc.n	80135dc <__gethex+0x1d0>
 801356c:	f845 bb04 	str.w	fp, [r5], #4
 8013570:	eba5 050a 	sub.w	r5, r5, sl
 8013574:	10ad      	asrs	r5, r5, #2
 8013576:	6125      	str	r5, [r4, #16]
 8013578:	4658      	mov	r0, fp
 801357a:	f000 fb1d 	bl	8013bb8 <__hi0bits>
 801357e:	016d      	lsls	r5, r5, #5
 8013580:	f8d8 6000 	ldr.w	r6, [r8]
 8013584:	1a2d      	subs	r5, r5, r0
 8013586:	42b5      	cmp	r5, r6
 8013588:	dd54      	ble.n	8013634 <__gethex+0x228>
 801358a:	1bad      	subs	r5, r5, r6
 801358c:	4629      	mov	r1, r5
 801358e:	4620      	mov	r0, r4
 8013590:	f000 feb1 	bl	80142f6 <__any_on>
 8013594:	4681      	mov	r9, r0
 8013596:	b178      	cbz	r0, 80135b8 <__gethex+0x1ac>
 8013598:	1e6b      	subs	r3, r5, #1
 801359a:	1159      	asrs	r1, r3, #5
 801359c:	f003 021f 	and.w	r2, r3, #31
 80135a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135a4:	f04f 0901 	mov.w	r9, #1
 80135a8:	fa09 f202 	lsl.w	r2, r9, r2
 80135ac:	420a      	tst	r2, r1
 80135ae:	d003      	beq.n	80135b8 <__gethex+0x1ac>
 80135b0:	454b      	cmp	r3, r9
 80135b2:	dc36      	bgt.n	8013622 <__gethex+0x216>
 80135b4:	f04f 0902 	mov.w	r9, #2
 80135b8:	4629      	mov	r1, r5
 80135ba:	4620      	mov	r0, r4
 80135bc:	f7ff febe 	bl	801333c <rshift>
 80135c0:	442f      	add	r7, r5
 80135c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135c6:	42bb      	cmp	r3, r7
 80135c8:	da42      	bge.n	8013650 <__gethex+0x244>
 80135ca:	9801      	ldr	r0, [sp, #4]
 80135cc:	4621      	mov	r1, r4
 80135ce:	f000 fa41 	bl	8013a54 <_Bfree>
 80135d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135d4:	2300      	movs	r3, #0
 80135d6:	6013      	str	r3, [r2, #0]
 80135d8:	25a3      	movs	r5, #163	@ 0xa3
 80135da:	e793      	b.n	8013504 <__gethex+0xf8>
 80135dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80135e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80135e2:	d012      	beq.n	801360a <__gethex+0x1fe>
 80135e4:	2b20      	cmp	r3, #32
 80135e6:	d104      	bne.n	80135f2 <__gethex+0x1e6>
 80135e8:	f845 bb04 	str.w	fp, [r5], #4
 80135ec:	f04f 0b00 	mov.w	fp, #0
 80135f0:	465b      	mov	r3, fp
 80135f2:	7830      	ldrb	r0, [r6, #0]
 80135f4:	9303      	str	r3, [sp, #12]
 80135f6:	f7ff fef3 	bl	80133e0 <__hexdig_fun>
 80135fa:	9b03      	ldr	r3, [sp, #12]
 80135fc:	f000 000f 	and.w	r0, r0, #15
 8013600:	4098      	lsls	r0, r3
 8013602:	ea4b 0b00 	orr.w	fp, fp, r0
 8013606:	3304      	adds	r3, #4
 8013608:	e7ae      	b.n	8013568 <__gethex+0x15c>
 801360a:	45b1      	cmp	r9, r6
 801360c:	d8ea      	bhi.n	80135e4 <__gethex+0x1d8>
 801360e:	492b      	ldr	r1, [pc, #172]	@ (80136bc <__gethex+0x2b0>)
 8013610:	9303      	str	r3, [sp, #12]
 8013612:	2201      	movs	r2, #1
 8013614:	4630      	mov	r0, r6
 8013616:	f7fe fe71 	bl	80122fc <strncmp>
 801361a:	9b03      	ldr	r3, [sp, #12]
 801361c:	2800      	cmp	r0, #0
 801361e:	d1e1      	bne.n	80135e4 <__gethex+0x1d8>
 8013620:	e7a2      	b.n	8013568 <__gethex+0x15c>
 8013622:	1ea9      	subs	r1, r5, #2
 8013624:	4620      	mov	r0, r4
 8013626:	f000 fe66 	bl	80142f6 <__any_on>
 801362a:	2800      	cmp	r0, #0
 801362c:	d0c2      	beq.n	80135b4 <__gethex+0x1a8>
 801362e:	f04f 0903 	mov.w	r9, #3
 8013632:	e7c1      	b.n	80135b8 <__gethex+0x1ac>
 8013634:	da09      	bge.n	801364a <__gethex+0x23e>
 8013636:	1b75      	subs	r5, r6, r5
 8013638:	4621      	mov	r1, r4
 801363a:	9801      	ldr	r0, [sp, #4]
 801363c:	462a      	mov	r2, r5
 801363e:	f000 fc21 	bl	8013e84 <__lshift>
 8013642:	1b7f      	subs	r7, r7, r5
 8013644:	4604      	mov	r4, r0
 8013646:	f100 0a14 	add.w	sl, r0, #20
 801364a:	f04f 0900 	mov.w	r9, #0
 801364e:	e7b8      	b.n	80135c2 <__gethex+0x1b6>
 8013650:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013654:	42bd      	cmp	r5, r7
 8013656:	dd6f      	ble.n	8013738 <__gethex+0x32c>
 8013658:	1bed      	subs	r5, r5, r7
 801365a:	42ae      	cmp	r6, r5
 801365c:	dc34      	bgt.n	80136c8 <__gethex+0x2bc>
 801365e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013662:	2b02      	cmp	r3, #2
 8013664:	d022      	beq.n	80136ac <__gethex+0x2a0>
 8013666:	2b03      	cmp	r3, #3
 8013668:	d024      	beq.n	80136b4 <__gethex+0x2a8>
 801366a:	2b01      	cmp	r3, #1
 801366c:	d115      	bne.n	801369a <__gethex+0x28e>
 801366e:	42ae      	cmp	r6, r5
 8013670:	d113      	bne.n	801369a <__gethex+0x28e>
 8013672:	2e01      	cmp	r6, #1
 8013674:	d10b      	bne.n	801368e <__gethex+0x282>
 8013676:	9a02      	ldr	r2, [sp, #8]
 8013678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801367c:	6013      	str	r3, [r2, #0]
 801367e:	2301      	movs	r3, #1
 8013680:	6123      	str	r3, [r4, #16]
 8013682:	f8ca 3000 	str.w	r3, [sl]
 8013686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013688:	2562      	movs	r5, #98	@ 0x62
 801368a:	601c      	str	r4, [r3, #0]
 801368c:	e73a      	b.n	8013504 <__gethex+0xf8>
 801368e:	1e71      	subs	r1, r6, #1
 8013690:	4620      	mov	r0, r4
 8013692:	f000 fe30 	bl	80142f6 <__any_on>
 8013696:	2800      	cmp	r0, #0
 8013698:	d1ed      	bne.n	8013676 <__gethex+0x26a>
 801369a:	9801      	ldr	r0, [sp, #4]
 801369c:	4621      	mov	r1, r4
 801369e:	f000 f9d9 	bl	8013a54 <_Bfree>
 80136a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136a4:	2300      	movs	r3, #0
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	2550      	movs	r5, #80	@ 0x50
 80136aa:	e72b      	b.n	8013504 <__gethex+0xf8>
 80136ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d1f3      	bne.n	801369a <__gethex+0x28e>
 80136b2:	e7e0      	b.n	8013676 <__gethex+0x26a>
 80136b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d1dd      	bne.n	8013676 <__gethex+0x26a>
 80136ba:	e7ee      	b.n	801369a <__gethex+0x28e>
 80136bc:	080157c0 	.word	0x080157c0
 80136c0:	08015a67 	.word	0x08015a67
 80136c4:	08015a78 	.word	0x08015a78
 80136c8:	1e6f      	subs	r7, r5, #1
 80136ca:	f1b9 0f00 	cmp.w	r9, #0
 80136ce:	d130      	bne.n	8013732 <__gethex+0x326>
 80136d0:	b127      	cbz	r7, 80136dc <__gethex+0x2d0>
 80136d2:	4639      	mov	r1, r7
 80136d4:	4620      	mov	r0, r4
 80136d6:	f000 fe0e 	bl	80142f6 <__any_on>
 80136da:	4681      	mov	r9, r0
 80136dc:	117a      	asrs	r2, r7, #5
 80136de:	2301      	movs	r3, #1
 80136e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80136e4:	f007 071f 	and.w	r7, r7, #31
 80136e8:	40bb      	lsls	r3, r7
 80136ea:	4213      	tst	r3, r2
 80136ec:	4629      	mov	r1, r5
 80136ee:	4620      	mov	r0, r4
 80136f0:	bf18      	it	ne
 80136f2:	f049 0902 	orrne.w	r9, r9, #2
 80136f6:	f7ff fe21 	bl	801333c <rshift>
 80136fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80136fe:	1b76      	subs	r6, r6, r5
 8013700:	2502      	movs	r5, #2
 8013702:	f1b9 0f00 	cmp.w	r9, #0
 8013706:	d047      	beq.n	8013798 <__gethex+0x38c>
 8013708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801370c:	2b02      	cmp	r3, #2
 801370e:	d015      	beq.n	801373c <__gethex+0x330>
 8013710:	2b03      	cmp	r3, #3
 8013712:	d017      	beq.n	8013744 <__gethex+0x338>
 8013714:	2b01      	cmp	r3, #1
 8013716:	d109      	bne.n	801372c <__gethex+0x320>
 8013718:	f019 0f02 	tst.w	r9, #2
 801371c:	d006      	beq.n	801372c <__gethex+0x320>
 801371e:	f8da 3000 	ldr.w	r3, [sl]
 8013722:	ea49 0903 	orr.w	r9, r9, r3
 8013726:	f019 0f01 	tst.w	r9, #1
 801372a:	d10e      	bne.n	801374a <__gethex+0x33e>
 801372c:	f045 0510 	orr.w	r5, r5, #16
 8013730:	e032      	b.n	8013798 <__gethex+0x38c>
 8013732:	f04f 0901 	mov.w	r9, #1
 8013736:	e7d1      	b.n	80136dc <__gethex+0x2d0>
 8013738:	2501      	movs	r5, #1
 801373a:	e7e2      	b.n	8013702 <__gethex+0x2f6>
 801373c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801373e:	f1c3 0301 	rsb	r3, r3, #1
 8013742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0f0      	beq.n	801372c <__gethex+0x320>
 801374a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801374e:	f104 0314 	add.w	r3, r4, #20
 8013752:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013756:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801375a:	f04f 0c00 	mov.w	ip, #0
 801375e:	4618      	mov	r0, r3
 8013760:	f853 2b04 	ldr.w	r2, [r3], #4
 8013764:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013768:	d01b      	beq.n	80137a2 <__gethex+0x396>
 801376a:	3201      	adds	r2, #1
 801376c:	6002      	str	r2, [r0, #0]
 801376e:	2d02      	cmp	r5, #2
 8013770:	f104 0314 	add.w	r3, r4, #20
 8013774:	d13c      	bne.n	80137f0 <__gethex+0x3e4>
 8013776:	f8d8 2000 	ldr.w	r2, [r8]
 801377a:	3a01      	subs	r2, #1
 801377c:	42b2      	cmp	r2, r6
 801377e:	d109      	bne.n	8013794 <__gethex+0x388>
 8013780:	1171      	asrs	r1, r6, #5
 8013782:	2201      	movs	r2, #1
 8013784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013788:	f006 061f 	and.w	r6, r6, #31
 801378c:	fa02 f606 	lsl.w	r6, r2, r6
 8013790:	421e      	tst	r6, r3
 8013792:	d13a      	bne.n	801380a <__gethex+0x3fe>
 8013794:	f045 0520 	orr.w	r5, r5, #32
 8013798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801379a:	601c      	str	r4, [r3, #0]
 801379c:	9b02      	ldr	r3, [sp, #8]
 801379e:	601f      	str	r7, [r3, #0]
 80137a0:	e6b0      	b.n	8013504 <__gethex+0xf8>
 80137a2:	4299      	cmp	r1, r3
 80137a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80137a8:	d8d9      	bhi.n	801375e <__gethex+0x352>
 80137aa:	68a3      	ldr	r3, [r4, #8]
 80137ac:	459b      	cmp	fp, r3
 80137ae:	db17      	blt.n	80137e0 <__gethex+0x3d4>
 80137b0:	6861      	ldr	r1, [r4, #4]
 80137b2:	9801      	ldr	r0, [sp, #4]
 80137b4:	3101      	adds	r1, #1
 80137b6:	f000 f90d 	bl	80139d4 <_Balloc>
 80137ba:	4681      	mov	r9, r0
 80137bc:	b918      	cbnz	r0, 80137c6 <__gethex+0x3ba>
 80137be:	4b1a      	ldr	r3, [pc, #104]	@ (8013828 <__gethex+0x41c>)
 80137c0:	4602      	mov	r2, r0
 80137c2:	2184      	movs	r1, #132	@ 0x84
 80137c4:	e6c5      	b.n	8013552 <__gethex+0x146>
 80137c6:	6922      	ldr	r2, [r4, #16]
 80137c8:	3202      	adds	r2, #2
 80137ca:	f104 010c 	add.w	r1, r4, #12
 80137ce:	0092      	lsls	r2, r2, #2
 80137d0:	300c      	adds	r0, #12
 80137d2:	f7fe fee6 	bl	80125a2 <memcpy>
 80137d6:	4621      	mov	r1, r4
 80137d8:	9801      	ldr	r0, [sp, #4]
 80137da:	f000 f93b 	bl	8013a54 <_Bfree>
 80137de:	464c      	mov	r4, r9
 80137e0:	6923      	ldr	r3, [r4, #16]
 80137e2:	1c5a      	adds	r2, r3, #1
 80137e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80137e8:	6122      	str	r2, [r4, #16]
 80137ea:	2201      	movs	r2, #1
 80137ec:	615a      	str	r2, [r3, #20]
 80137ee:	e7be      	b.n	801376e <__gethex+0x362>
 80137f0:	6922      	ldr	r2, [r4, #16]
 80137f2:	455a      	cmp	r2, fp
 80137f4:	dd0b      	ble.n	801380e <__gethex+0x402>
 80137f6:	2101      	movs	r1, #1
 80137f8:	4620      	mov	r0, r4
 80137fa:	f7ff fd9f 	bl	801333c <rshift>
 80137fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013802:	3701      	adds	r7, #1
 8013804:	42bb      	cmp	r3, r7
 8013806:	f6ff aee0 	blt.w	80135ca <__gethex+0x1be>
 801380a:	2501      	movs	r5, #1
 801380c:	e7c2      	b.n	8013794 <__gethex+0x388>
 801380e:	f016 061f 	ands.w	r6, r6, #31
 8013812:	d0fa      	beq.n	801380a <__gethex+0x3fe>
 8013814:	4453      	add	r3, sl
 8013816:	f1c6 0620 	rsb	r6, r6, #32
 801381a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801381e:	f000 f9cb 	bl	8013bb8 <__hi0bits>
 8013822:	42b0      	cmp	r0, r6
 8013824:	dbe7      	blt.n	80137f6 <__gethex+0x3ea>
 8013826:	e7f0      	b.n	801380a <__gethex+0x3fe>
 8013828:	08015a67 	.word	0x08015a67

0801382c <L_shift>:
 801382c:	f1c2 0208 	rsb	r2, r2, #8
 8013830:	0092      	lsls	r2, r2, #2
 8013832:	b570      	push	{r4, r5, r6, lr}
 8013834:	f1c2 0620 	rsb	r6, r2, #32
 8013838:	6843      	ldr	r3, [r0, #4]
 801383a:	6804      	ldr	r4, [r0, #0]
 801383c:	fa03 f506 	lsl.w	r5, r3, r6
 8013840:	432c      	orrs	r4, r5
 8013842:	40d3      	lsrs	r3, r2
 8013844:	6004      	str	r4, [r0, #0]
 8013846:	f840 3f04 	str.w	r3, [r0, #4]!
 801384a:	4288      	cmp	r0, r1
 801384c:	d3f4      	bcc.n	8013838 <L_shift+0xc>
 801384e:	bd70      	pop	{r4, r5, r6, pc}

08013850 <__match>:
 8013850:	b530      	push	{r4, r5, lr}
 8013852:	6803      	ldr	r3, [r0, #0]
 8013854:	3301      	adds	r3, #1
 8013856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801385a:	b914      	cbnz	r4, 8013862 <__match+0x12>
 801385c:	6003      	str	r3, [r0, #0]
 801385e:	2001      	movs	r0, #1
 8013860:	bd30      	pop	{r4, r5, pc}
 8013862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013866:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801386a:	2d19      	cmp	r5, #25
 801386c:	bf98      	it	ls
 801386e:	3220      	addls	r2, #32
 8013870:	42a2      	cmp	r2, r4
 8013872:	d0f0      	beq.n	8013856 <__match+0x6>
 8013874:	2000      	movs	r0, #0
 8013876:	e7f3      	b.n	8013860 <__match+0x10>

08013878 <__hexnan>:
 8013878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801387c:	680b      	ldr	r3, [r1, #0]
 801387e:	6801      	ldr	r1, [r0, #0]
 8013880:	115e      	asrs	r6, r3, #5
 8013882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013886:	f013 031f 	ands.w	r3, r3, #31
 801388a:	b087      	sub	sp, #28
 801388c:	bf18      	it	ne
 801388e:	3604      	addne	r6, #4
 8013890:	2500      	movs	r5, #0
 8013892:	1f37      	subs	r7, r6, #4
 8013894:	4682      	mov	sl, r0
 8013896:	4690      	mov	r8, r2
 8013898:	9301      	str	r3, [sp, #4]
 801389a:	f846 5c04 	str.w	r5, [r6, #-4]
 801389e:	46b9      	mov	r9, r7
 80138a0:	463c      	mov	r4, r7
 80138a2:	9502      	str	r5, [sp, #8]
 80138a4:	46ab      	mov	fp, r5
 80138a6:	784a      	ldrb	r2, [r1, #1]
 80138a8:	1c4b      	adds	r3, r1, #1
 80138aa:	9303      	str	r3, [sp, #12]
 80138ac:	b342      	cbz	r2, 8013900 <__hexnan+0x88>
 80138ae:	4610      	mov	r0, r2
 80138b0:	9105      	str	r1, [sp, #20]
 80138b2:	9204      	str	r2, [sp, #16]
 80138b4:	f7ff fd94 	bl	80133e0 <__hexdig_fun>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d151      	bne.n	8013960 <__hexnan+0xe8>
 80138bc:	9a04      	ldr	r2, [sp, #16]
 80138be:	9905      	ldr	r1, [sp, #20]
 80138c0:	2a20      	cmp	r2, #32
 80138c2:	d818      	bhi.n	80138f6 <__hexnan+0x7e>
 80138c4:	9b02      	ldr	r3, [sp, #8]
 80138c6:	459b      	cmp	fp, r3
 80138c8:	dd13      	ble.n	80138f2 <__hexnan+0x7a>
 80138ca:	454c      	cmp	r4, r9
 80138cc:	d206      	bcs.n	80138dc <__hexnan+0x64>
 80138ce:	2d07      	cmp	r5, #7
 80138d0:	dc04      	bgt.n	80138dc <__hexnan+0x64>
 80138d2:	462a      	mov	r2, r5
 80138d4:	4649      	mov	r1, r9
 80138d6:	4620      	mov	r0, r4
 80138d8:	f7ff ffa8 	bl	801382c <L_shift>
 80138dc:	4544      	cmp	r4, r8
 80138de:	d952      	bls.n	8013986 <__hexnan+0x10e>
 80138e0:	2300      	movs	r3, #0
 80138e2:	f1a4 0904 	sub.w	r9, r4, #4
 80138e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80138ea:	f8cd b008 	str.w	fp, [sp, #8]
 80138ee:	464c      	mov	r4, r9
 80138f0:	461d      	mov	r5, r3
 80138f2:	9903      	ldr	r1, [sp, #12]
 80138f4:	e7d7      	b.n	80138a6 <__hexnan+0x2e>
 80138f6:	2a29      	cmp	r2, #41	@ 0x29
 80138f8:	d157      	bne.n	80139aa <__hexnan+0x132>
 80138fa:	3102      	adds	r1, #2
 80138fc:	f8ca 1000 	str.w	r1, [sl]
 8013900:	f1bb 0f00 	cmp.w	fp, #0
 8013904:	d051      	beq.n	80139aa <__hexnan+0x132>
 8013906:	454c      	cmp	r4, r9
 8013908:	d206      	bcs.n	8013918 <__hexnan+0xa0>
 801390a:	2d07      	cmp	r5, #7
 801390c:	dc04      	bgt.n	8013918 <__hexnan+0xa0>
 801390e:	462a      	mov	r2, r5
 8013910:	4649      	mov	r1, r9
 8013912:	4620      	mov	r0, r4
 8013914:	f7ff ff8a 	bl	801382c <L_shift>
 8013918:	4544      	cmp	r4, r8
 801391a:	d936      	bls.n	801398a <__hexnan+0x112>
 801391c:	f1a8 0204 	sub.w	r2, r8, #4
 8013920:	4623      	mov	r3, r4
 8013922:	f853 1b04 	ldr.w	r1, [r3], #4
 8013926:	f842 1f04 	str.w	r1, [r2, #4]!
 801392a:	429f      	cmp	r7, r3
 801392c:	d2f9      	bcs.n	8013922 <__hexnan+0xaa>
 801392e:	1b3b      	subs	r3, r7, r4
 8013930:	f023 0303 	bic.w	r3, r3, #3
 8013934:	3304      	adds	r3, #4
 8013936:	3401      	adds	r4, #1
 8013938:	3e03      	subs	r6, #3
 801393a:	42b4      	cmp	r4, r6
 801393c:	bf88      	it	hi
 801393e:	2304      	movhi	r3, #4
 8013940:	4443      	add	r3, r8
 8013942:	2200      	movs	r2, #0
 8013944:	f843 2b04 	str.w	r2, [r3], #4
 8013948:	429f      	cmp	r7, r3
 801394a:	d2fb      	bcs.n	8013944 <__hexnan+0xcc>
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	b91b      	cbnz	r3, 8013958 <__hexnan+0xe0>
 8013950:	4547      	cmp	r7, r8
 8013952:	d128      	bne.n	80139a6 <__hexnan+0x12e>
 8013954:	2301      	movs	r3, #1
 8013956:	603b      	str	r3, [r7, #0]
 8013958:	2005      	movs	r0, #5
 801395a:	b007      	add	sp, #28
 801395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013960:	3501      	adds	r5, #1
 8013962:	2d08      	cmp	r5, #8
 8013964:	f10b 0b01 	add.w	fp, fp, #1
 8013968:	dd06      	ble.n	8013978 <__hexnan+0x100>
 801396a:	4544      	cmp	r4, r8
 801396c:	d9c1      	bls.n	80138f2 <__hexnan+0x7a>
 801396e:	2300      	movs	r3, #0
 8013970:	f844 3c04 	str.w	r3, [r4, #-4]
 8013974:	2501      	movs	r5, #1
 8013976:	3c04      	subs	r4, #4
 8013978:	6822      	ldr	r2, [r4, #0]
 801397a:	f000 000f 	and.w	r0, r0, #15
 801397e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013982:	6020      	str	r0, [r4, #0]
 8013984:	e7b5      	b.n	80138f2 <__hexnan+0x7a>
 8013986:	2508      	movs	r5, #8
 8013988:	e7b3      	b.n	80138f2 <__hexnan+0x7a>
 801398a:	9b01      	ldr	r3, [sp, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d0dd      	beq.n	801394c <__hexnan+0xd4>
 8013990:	f1c3 0320 	rsb	r3, r3, #32
 8013994:	f04f 32ff 	mov.w	r2, #4294967295
 8013998:	40da      	lsrs	r2, r3
 801399a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801399e:	4013      	ands	r3, r2
 80139a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80139a4:	e7d2      	b.n	801394c <__hexnan+0xd4>
 80139a6:	3f04      	subs	r7, #4
 80139a8:	e7d0      	b.n	801394c <__hexnan+0xd4>
 80139aa:	2004      	movs	r0, #4
 80139ac:	e7d5      	b.n	801395a <__hexnan+0xe2>

080139ae <__ascii_mbtowc>:
 80139ae:	b082      	sub	sp, #8
 80139b0:	b901      	cbnz	r1, 80139b4 <__ascii_mbtowc+0x6>
 80139b2:	a901      	add	r1, sp, #4
 80139b4:	b142      	cbz	r2, 80139c8 <__ascii_mbtowc+0x1a>
 80139b6:	b14b      	cbz	r3, 80139cc <__ascii_mbtowc+0x1e>
 80139b8:	7813      	ldrb	r3, [r2, #0]
 80139ba:	600b      	str	r3, [r1, #0]
 80139bc:	7812      	ldrb	r2, [r2, #0]
 80139be:	1e10      	subs	r0, r2, #0
 80139c0:	bf18      	it	ne
 80139c2:	2001      	movne	r0, #1
 80139c4:	b002      	add	sp, #8
 80139c6:	4770      	bx	lr
 80139c8:	4610      	mov	r0, r2
 80139ca:	e7fb      	b.n	80139c4 <__ascii_mbtowc+0x16>
 80139cc:	f06f 0001 	mvn.w	r0, #1
 80139d0:	e7f8      	b.n	80139c4 <__ascii_mbtowc+0x16>
	...

080139d4 <_Balloc>:
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	69c6      	ldr	r6, [r0, #28]
 80139d8:	4604      	mov	r4, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	b976      	cbnz	r6, 80139fc <_Balloc+0x28>
 80139de:	2010      	movs	r0, #16
 80139e0:	f7fc ffa8 	bl	8010934 <malloc>
 80139e4:	4602      	mov	r2, r0
 80139e6:	61e0      	str	r0, [r4, #28]
 80139e8:	b920      	cbnz	r0, 80139f4 <_Balloc+0x20>
 80139ea:	4b18      	ldr	r3, [pc, #96]	@ (8013a4c <_Balloc+0x78>)
 80139ec:	4818      	ldr	r0, [pc, #96]	@ (8013a50 <_Balloc+0x7c>)
 80139ee:	216b      	movs	r1, #107	@ 0x6b
 80139f0:	f7fe fdee 	bl	80125d0 <__assert_func>
 80139f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139f8:	6006      	str	r6, [r0, #0]
 80139fa:	60c6      	str	r6, [r0, #12]
 80139fc:	69e6      	ldr	r6, [r4, #28]
 80139fe:	68f3      	ldr	r3, [r6, #12]
 8013a00:	b183      	cbz	r3, 8013a24 <_Balloc+0x50>
 8013a02:	69e3      	ldr	r3, [r4, #28]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a0a:	b9b8      	cbnz	r0, 8013a3c <_Balloc+0x68>
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8013a12:	1d72      	adds	r2, r6, #5
 8013a14:	0092      	lsls	r2, r2, #2
 8013a16:	4620      	mov	r0, r4
 8013a18:	f000 fed1 	bl	80147be <_calloc_r>
 8013a1c:	b160      	cbz	r0, 8013a38 <_Balloc+0x64>
 8013a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a22:	e00e      	b.n	8013a42 <_Balloc+0x6e>
 8013a24:	2221      	movs	r2, #33	@ 0x21
 8013a26:	2104      	movs	r1, #4
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 fec8 	bl	80147be <_calloc_r>
 8013a2e:	69e3      	ldr	r3, [r4, #28]
 8013a30:	60f0      	str	r0, [r6, #12]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1e4      	bne.n	8013a02 <_Balloc+0x2e>
 8013a38:	2000      	movs	r0, #0
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}
 8013a3c:	6802      	ldr	r2, [r0, #0]
 8013a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a42:	2300      	movs	r3, #0
 8013a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a48:	e7f7      	b.n	8013a3a <_Balloc+0x66>
 8013a4a:	bf00      	nop
 8013a4c:	0801594d 	.word	0x0801594d
 8013a50:	08015ad8 	.word	0x08015ad8

08013a54 <_Bfree>:
 8013a54:	b570      	push	{r4, r5, r6, lr}
 8013a56:	69c6      	ldr	r6, [r0, #28]
 8013a58:	4605      	mov	r5, r0
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	b976      	cbnz	r6, 8013a7c <_Bfree+0x28>
 8013a5e:	2010      	movs	r0, #16
 8013a60:	f7fc ff68 	bl	8010934 <malloc>
 8013a64:	4602      	mov	r2, r0
 8013a66:	61e8      	str	r0, [r5, #28]
 8013a68:	b920      	cbnz	r0, 8013a74 <_Bfree+0x20>
 8013a6a:	4b09      	ldr	r3, [pc, #36]	@ (8013a90 <_Bfree+0x3c>)
 8013a6c:	4809      	ldr	r0, [pc, #36]	@ (8013a94 <_Bfree+0x40>)
 8013a6e:	218f      	movs	r1, #143	@ 0x8f
 8013a70:	f7fe fdae 	bl	80125d0 <__assert_func>
 8013a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a78:	6006      	str	r6, [r0, #0]
 8013a7a:	60c6      	str	r6, [r0, #12]
 8013a7c:	b13c      	cbz	r4, 8013a8e <_Bfree+0x3a>
 8013a7e:	69eb      	ldr	r3, [r5, #28]
 8013a80:	6862      	ldr	r2, [r4, #4]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a88:	6021      	str	r1, [r4, #0]
 8013a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	0801594d 	.word	0x0801594d
 8013a94:	08015ad8 	.word	0x08015ad8

08013a98 <__multadd>:
 8013a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9c:	690d      	ldr	r5, [r1, #16]
 8013a9e:	4607      	mov	r7, r0
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	461e      	mov	r6, r3
 8013aa4:	f101 0c14 	add.w	ip, r1, #20
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8013aae:	b299      	uxth	r1, r3
 8013ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8013ab4:	0c1e      	lsrs	r6, r3, #16
 8013ab6:	0c0b      	lsrs	r3, r1, #16
 8013ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8013abc:	b289      	uxth	r1, r1
 8013abe:	3001      	adds	r0, #1
 8013ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ac4:	4285      	cmp	r5, r0
 8013ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8013aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ace:	dcec      	bgt.n	8013aaa <__multadd+0x12>
 8013ad0:	b30e      	cbz	r6, 8013b16 <__multadd+0x7e>
 8013ad2:	68a3      	ldr	r3, [r4, #8]
 8013ad4:	42ab      	cmp	r3, r5
 8013ad6:	dc19      	bgt.n	8013b0c <__multadd+0x74>
 8013ad8:	6861      	ldr	r1, [r4, #4]
 8013ada:	4638      	mov	r0, r7
 8013adc:	3101      	adds	r1, #1
 8013ade:	f7ff ff79 	bl	80139d4 <_Balloc>
 8013ae2:	4680      	mov	r8, r0
 8013ae4:	b928      	cbnz	r0, 8013af2 <__multadd+0x5a>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8013b1c <__multadd+0x84>)
 8013aea:	480d      	ldr	r0, [pc, #52]	@ (8013b20 <__multadd+0x88>)
 8013aec:	21ba      	movs	r1, #186	@ 0xba
 8013aee:	f7fe fd6f 	bl	80125d0 <__assert_func>
 8013af2:	6922      	ldr	r2, [r4, #16]
 8013af4:	3202      	adds	r2, #2
 8013af6:	f104 010c 	add.w	r1, r4, #12
 8013afa:	0092      	lsls	r2, r2, #2
 8013afc:	300c      	adds	r0, #12
 8013afe:	f7fe fd50 	bl	80125a2 <memcpy>
 8013b02:	4621      	mov	r1, r4
 8013b04:	4638      	mov	r0, r7
 8013b06:	f7ff ffa5 	bl	8013a54 <_Bfree>
 8013b0a:	4644      	mov	r4, r8
 8013b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b10:	3501      	adds	r5, #1
 8013b12:	615e      	str	r6, [r3, #20]
 8013b14:	6125      	str	r5, [r4, #16]
 8013b16:	4620      	mov	r0, r4
 8013b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b1c:	08015a67 	.word	0x08015a67
 8013b20:	08015ad8 	.word	0x08015ad8

08013b24 <__s2b>:
 8013b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b28:	460c      	mov	r4, r1
 8013b2a:	4615      	mov	r5, r2
 8013b2c:	461f      	mov	r7, r3
 8013b2e:	2209      	movs	r2, #9
 8013b30:	3308      	adds	r3, #8
 8013b32:	4606      	mov	r6, r0
 8013b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b38:	2100      	movs	r1, #0
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	db09      	blt.n	8013b54 <__s2b+0x30>
 8013b40:	4630      	mov	r0, r6
 8013b42:	f7ff ff47 	bl	80139d4 <_Balloc>
 8013b46:	b940      	cbnz	r0, 8013b5a <__s2b+0x36>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	4b19      	ldr	r3, [pc, #100]	@ (8013bb0 <__s2b+0x8c>)
 8013b4c:	4819      	ldr	r0, [pc, #100]	@ (8013bb4 <__s2b+0x90>)
 8013b4e:	21d3      	movs	r1, #211	@ 0xd3
 8013b50:	f7fe fd3e 	bl	80125d0 <__assert_func>
 8013b54:	0052      	lsls	r2, r2, #1
 8013b56:	3101      	adds	r1, #1
 8013b58:	e7f0      	b.n	8013b3c <__s2b+0x18>
 8013b5a:	9b08      	ldr	r3, [sp, #32]
 8013b5c:	6143      	str	r3, [r0, #20]
 8013b5e:	2d09      	cmp	r5, #9
 8013b60:	f04f 0301 	mov.w	r3, #1
 8013b64:	6103      	str	r3, [r0, #16]
 8013b66:	dd16      	ble.n	8013b96 <__s2b+0x72>
 8013b68:	f104 0909 	add.w	r9, r4, #9
 8013b6c:	46c8      	mov	r8, r9
 8013b6e:	442c      	add	r4, r5
 8013b70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013b74:	4601      	mov	r1, r0
 8013b76:	3b30      	subs	r3, #48	@ 0x30
 8013b78:	220a      	movs	r2, #10
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f7ff ff8c 	bl	8013a98 <__multadd>
 8013b80:	45a0      	cmp	r8, r4
 8013b82:	d1f5      	bne.n	8013b70 <__s2b+0x4c>
 8013b84:	f1a5 0408 	sub.w	r4, r5, #8
 8013b88:	444c      	add	r4, r9
 8013b8a:	1b2d      	subs	r5, r5, r4
 8013b8c:	1963      	adds	r3, r4, r5
 8013b8e:	42bb      	cmp	r3, r7
 8013b90:	db04      	blt.n	8013b9c <__s2b+0x78>
 8013b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b96:	340a      	adds	r4, #10
 8013b98:	2509      	movs	r5, #9
 8013b9a:	e7f6      	b.n	8013b8a <__s2b+0x66>
 8013b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ba0:	4601      	mov	r1, r0
 8013ba2:	3b30      	subs	r3, #48	@ 0x30
 8013ba4:	220a      	movs	r2, #10
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	f7ff ff76 	bl	8013a98 <__multadd>
 8013bac:	e7ee      	b.n	8013b8c <__s2b+0x68>
 8013bae:	bf00      	nop
 8013bb0:	08015a67 	.word	0x08015a67
 8013bb4:	08015ad8 	.word	0x08015ad8

08013bb8 <__hi0bits>:
 8013bb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	bf36      	itet	cc
 8013bc0:	0403      	lslcc	r3, r0, #16
 8013bc2:	2000      	movcs	r0, #0
 8013bc4:	2010      	movcc	r0, #16
 8013bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013bca:	bf3c      	itt	cc
 8013bcc:	021b      	lslcc	r3, r3, #8
 8013bce:	3008      	addcc	r0, #8
 8013bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013bd4:	bf3c      	itt	cc
 8013bd6:	011b      	lslcc	r3, r3, #4
 8013bd8:	3004      	addcc	r0, #4
 8013bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bde:	bf3c      	itt	cc
 8013be0:	009b      	lslcc	r3, r3, #2
 8013be2:	3002      	addcc	r0, #2
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	db05      	blt.n	8013bf4 <__hi0bits+0x3c>
 8013be8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013bec:	f100 0001 	add.w	r0, r0, #1
 8013bf0:	bf08      	it	eq
 8013bf2:	2020      	moveq	r0, #32
 8013bf4:	4770      	bx	lr

08013bf6 <__lo0bits>:
 8013bf6:	6803      	ldr	r3, [r0, #0]
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	f013 0007 	ands.w	r0, r3, #7
 8013bfe:	d00b      	beq.n	8013c18 <__lo0bits+0x22>
 8013c00:	07d9      	lsls	r1, r3, #31
 8013c02:	d421      	bmi.n	8013c48 <__lo0bits+0x52>
 8013c04:	0798      	lsls	r0, r3, #30
 8013c06:	bf49      	itett	mi
 8013c08:	085b      	lsrmi	r3, r3, #1
 8013c0a:	089b      	lsrpl	r3, r3, #2
 8013c0c:	2001      	movmi	r0, #1
 8013c0e:	6013      	strmi	r3, [r2, #0]
 8013c10:	bf5c      	itt	pl
 8013c12:	6013      	strpl	r3, [r2, #0]
 8013c14:	2002      	movpl	r0, #2
 8013c16:	4770      	bx	lr
 8013c18:	b299      	uxth	r1, r3
 8013c1a:	b909      	cbnz	r1, 8013c20 <__lo0bits+0x2a>
 8013c1c:	0c1b      	lsrs	r3, r3, #16
 8013c1e:	2010      	movs	r0, #16
 8013c20:	b2d9      	uxtb	r1, r3
 8013c22:	b909      	cbnz	r1, 8013c28 <__lo0bits+0x32>
 8013c24:	3008      	adds	r0, #8
 8013c26:	0a1b      	lsrs	r3, r3, #8
 8013c28:	0719      	lsls	r1, r3, #28
 8013c2a:	bf04      	itt	eq
 8013c2c:	091b      	lsreq	r3, r3, #4
 8013c2e:	3004      	addeq	r0, #4
 8013c30:	0799      	lsls	r1, r3, #30
 8013c32:	bf04      	itt	eq
 8013c34:	089b      	lsreq	r3, r3, #2
 8013c36:	3002      	addeq	r0, #2
 8013c38:	07d9      	lsls	r1, r3, #31
 8013c3a:	d403      	bmi.n	8013c44 <__lo0bits+0x4e>
 8013c3c:	085b      	lsrs	r3, r3, #1
 8013c3e:	f100 0001 	add.w	r0, r0, #1
 8013c42:	d003      	beq.n	8013c4c <__lo0bits+0x56>
 8013c44:	6013      	str	r3, [r2, #0]
 8013c46:	4770      	bx	lr
 8013c48:	2000      	movs	r0, #0
 8013c4a:	4770      	bx	lr
 8013c4c:	2020      	movs	r0, #32
 8013c4e:	4770      	bx	lr

08013c50 <__i2b>:
 8013c50:	b510      	push	{r4, lr}
 8013c52:	460c      	mov	r4, r1
 8013c54:	2101      	movs	r1, #1
 8013c56:	f7ff febd 	bl	80139d4 <_Balloc>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	b928      	cbnz	r0, 8013c6a <__i2b+0x1a>
 8013c5e:	4b05      	ldr	r3, [pc, #20]	@ (8013c74 <__i2b+0x24>)
 8013c60:	4805      	ldr	r0, [pc, #20]	@ (8013c78 <__i2b+0x28>)
 8013c62:	f240 1145 	movw	r1, #325	@ 0x145
 8013c66:	f7fe fcb3 	bl	80125d0 <__assert_func>
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	6144      	str	r4, [r0, #20]
 8013c6e:	6103      	str	r3, [r0, #16]
 8013c70:	bd10      	pop	{r4, pc}
 8013c72:	bf00      	nop
 8013c74:	08015a67 	.word	0x08015a67
 8013c78:	08015ad8 	.word	0x08015ad8

08013c7c <__multiply>:
 8013c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c80:	4614      	mov	r4, r2
 8013c82:	690a      	ldr	r2, [r1, #16]
 8013c84:	6923      	ldr	r3, [r4, #16]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	bfa8      	it	ge
 8013c8a:	4623      	movge	r3, r4
 8013c8c:	460f      	mov	r7, r1
 8013c8e:	bfa4      	itt	ge
 8013c90:	460c      	movge	r4, r1
 8013c92:	461f      	movge	r7, r3
 8013c94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013c98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013c9c:	68a3      	ldr	r3, [r4, #8]
 8013c9e:	6861      	ldr	r1, [r4, #4]
 8013ca0:	eb0a 0609 	add.w	r6, sl, r9
 8013ca4:	42b3      	cmp	r3, r6
 8013ca6:	b085      	sub	sp, #20
 8013ca8:	bfb8      	it	lt
 8013caa:	3101      	addlt	r1, #1
 8013cac:	f7ff fe92 	bl	80139d4 <_Balloc>
 8013cb0:	b930      	cbnz	r0, 8013cc0 <__multiply+0x44>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	4b44      	ldr	r3, [pc, #272]	@ (8013dc8 <__multiply+0x14c>)
 8013cb6:	4845      	ldr	r0, [pc, #276]	@ (8013dcc <__multiply+0x150>)
 8013cb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013cbc:	f7fe fc88 	bl	80125d0 <__assert_func>
 8013cc0:	f100 0514 	add.w	r5, r0, #20
 8013cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013cc8:	462b      	mov	r3, r5
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4543      	cmp	r3, r8
 8013cce:	d321      	bcc.n	8013d14 <__multiply+0x98>
 8013cd0:	f107 0114 	add.w	r1, r7, #20
 8013cd4:	f104 0214 	add.w	r2, r4, #20
 8013cd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013cdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	1b13      	subs	r3, r2, r4
 8013ce4:	3b15      	subs	r3, #21
 8013ce6:	f023 0303 	bic.w	r3, r3, #3
 8013cea:	3304      	adds	r3, #4
 8013cec:	f104 0715 	add.w	r7, r4, #21
 8013cf0:	42ba      	cmp	r2, r7
 8013cf2:	bf38      	it	cc
 8013cf4:	2304      	movcc	r3, #4
 8013cf6:	9301      	str	r3, [sp, #4]
 8013cf8:	9b02      	ldr	r3, [sp, #8]
 8013cfa:	9103      	str	r1, [sp, #12]
 8013cfc:	428b      	cmp	r3, r1
 8013cfe:	d80c      	bhi.n	8013d1a <__multiply+0x9e>
 8013d00:	2e00      	cmp	r6, #0
 8013d02:	dd03      	ble.n	8013d0c <__multiply+0x90>
 8013d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d05b      	beq.n	8013dc4 <__multiply+0x148>
 8013d0c:	6106      	str	r6, [r0, #16]
 8013d0e:	b005      	add	sp, #20
 8013d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d14:	f843 2b04 	str.w	r2, [r3], #4
 8013d18:	e7d8      	b.n	8013ccc <__multiply+0x50>
 8013d1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013d1e:	f1ba 0f00 	cmp.w	sl, #0
 8013d22:	d024      	beq.n	8013d6e <__multiply+0xf2>
 8013d24:	f104 0e14 	add.w	lr, r4, #20
 8013d28:	46a9      	mov	r9, r5
 8013d2a:	f04f 0c00 	mov.w	ip, #0
 8013d2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013d32:	f8d9 3000 	ldr.w	r3, [r9]
 8013d36:	fa1f fb87 	uxth.w	fp, r7
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013d40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013d44:	f8d9 7000 	ldr.w	r7, [r9]
 8013d48:	4463      	add	r3, ip
 8013d4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013d52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d5c:	4572      	cmp	r2, lr
 8013d5e:	f849 3b04 	str.w	r3, [r9], #4
 8013d62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d66:	d8e2      	bhi.n	8013d2e <__multiply+0xb2>
 8013d68:	9b01      	ldr	r3, [sp, #4]
 8013d6a:	f845 c003 	str.w	ip, [r5, r3]
 8013d6e:	9b03      	ldr	r3, [sp, #12]
 8013d70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013d74:	3104      	adds	r1, #4
 8013d76:	f1b9 0f00 	cmp.w	r9, #0
 8013d7a:	d021      	beq.n	8013dc0 <__multiply+0x144>
 8013d7c:	682b      	ldr	r3, [r5, #0]
 8013d7e:	f104 0c14 	add.w	ip, r4, #20
 8013d82:	46ae      	mov	lr, r5
 8013d84:	f04f 0a00 	mov.w	sl, #0
 8013d88:	f8bc b000 	ldrh.w	fp, [ip]
 8013d8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013d90:	fb09 770b 	mla	r7, r9, fp, r7
 8013d94:	4457      	add	r7, sl
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d9c:	f84e 3b04 	str.w	r3, [lr], #4
 8013da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013da8:	f8be 3000 	ldrh.w	r3, [lr]
 8013dac:	fb09 330a 	mla	r3, r9, sl, r3
 8013db0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013db4:	4562      	cmp	r2, ip
 8013db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013dba:	d8e5      	bhi.n	8013d88 <__multiply+0x10c>
 8013dbc:	9f01      	ldr	r7, [sp, #4]
 8013dbe:	51eb      	str	r3, [r5, r7]
 8013dc0:	3504      	adds	r5, #4
 8013dc2:	e799      	b.n	8013cf8 <__multiply+0x7c>
 8013dc4:	3e01      	subs	r6, #1
 8013dc6:	e79b      	b.n	8013d00 <__multiply+0x84>
 8013dc8:	08015a67 	.word	0x08015a67
 8013dcc:	08015ad8 	.word	0x08015ad8

08013dd0 <__pow5mult>:
 8013dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd4:	4615      	mov	r5, r2
 8013dd6:	f012 0203 	ands.w	r2, r2, #3
 8013dda:	4607      	mov	r7, r0
 8013ddc:	460e      	mov	r6, r1
 8013dde:	d007      	beq.n	8013df0 <__pow5mult+0x20>
 8013de0:	4c25      	ldr	r4, [pc, #148]	@ (8013e78 <__pow5mult+0xa8>)
 8013de2:	3a01      	subs	r2, #1
 8013de4:	2300      	movs	r3, #0
 8013de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013dea:	f7ff fe55 	bl	8013a98 <__multadd>
 8013dee:	4606      	mov	r6, r0
 8013df0:	10ad      	asrs	r5, r5, #2
 8013df2:	d03d      	beq.n	8013e70 <__pow5mult+0xa0>
 8013df4:	69fc      	ldr	r4, [r7, #28]
 8013df6:	b97c      	cbnz	r4, 8013e18 <__pow5mult+0x48>
 8013df8:	2010      	movs	r0, #16
 8013dfa:	f7fc fd9b 	bl	8010934 <malloc>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	61f8      	str	r0, [r7, #28]
 8013e02:	b928      	cbnz	r0, 8013e10 <__pow5mult+0x40>
 8013e04:	4b1d      	ldr	r3, [pc, #116]	@ (8013e7c <__pow5mult+0xac>)
 8013e06:	481e      	ldr	r0, [pc, #120]	@ (8013e80 <__pow5mult+0xb0>)
 8013e08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e0c:	f7fe fbe0 	bl	80125d0 <__assert_func>
 8013e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e14:	6004      	str	r4, [r0, #0]
 8013e16:	60c4      	str	r4, [r0, #12]
 8013e18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e20:	b94c      	cbnz	r4, 8013e36 <__pow5mult+0x66>
 8013e22:	f240 2171 	movw	r1, #625	@ 0x271
 8013e26:	4638      	mov	r0, r7
 8013e28:	f7ff ff12 	bl	8013c50 <__i2b>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e32:	4604      	mov	r4, r0
 8013e34:	6003      	str	r3, [r0, #0]
 8013e36:	f04f 0900 	mov.w	r9, #0
 8013e3a:	07eb      	lsls	r3, r5, #31
 8013e3c:	d50a      	bpl.n	8013e54 <__pow5mult+0x84>
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4622      	mov	r2, r4
 8013e42:	4638      	mov	r0, r7
 8013e44:	f7ff ff1a 	bl	8013c7c <__multiply>
 8013e48:	4631      	mov	r1, r6
 8013e4a:	4680      	mov	r8, r0
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7ff fe01 	bl	8013a54 <_Bfree>
 8013e52:	4646      	mov	r6, r8
 8013e54:	106d      	asrs	r5, r5, #1
 8013e56:	d00b      	beq.n	8013e70 <__pow5mult+0xa0>
 8013e58:	6820      	ldr	r0, [r4, #0]
 8013e5a:	b938      	cbnz	r0, 8013e6c <__pow5mult+0x9c>
 8013e5c:	4622      	mov	r2, r4
 8013e5e:	4621      	mov	r1, r4
 8013e60:	4638      	mov	r0, r7
 8013e62:	f7ff ff0b 	bl	8013c7c <__multiply>
 8013e66:	6020      	str	r0, [r4, #0]
 8013e68:	f8c0 9000 	str.w	r9, [r0]
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	e7e4      	b.n	8013e3a <__pow5mult+0x6a>
 8013e70:	4630      	mov	r0, r6
 8013e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e76:	bf00      	nop
 8013e78:	08015b34 	.word	0x08015b34
 8013e7c:	0801594d 	.word	0x0801594d
 8013e80:	08015ad8 	.word	0x08015ad8

08013e84 <__lshift>:
 8013e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e88:	460c      	mov	r4, r1
 8013e8a:	6849      	ldr	r1, [r1, #4]
 8013e8c:	6923      	ldr	r3, [r4, #16]
 8013e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e92:	68a3      	ldr	r3, [r4, #8]
 8013e94:	4607      	mov	r7, r0
 8013e96:	4691      	mov	r9, r2
 8013e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e9c:	f108 0601 	add.w	r6, r8, #1
 8013ea0:	42b3      	cmp	r3, r6
 8013ea2:	db0b      	blt.n	8013ebc <__lshift+0x38>
 8013ea4:	4638      	mov	r0, r7
 8013ea6:	f7ff fd95 	bl	80139d4 <_Balloc>
 8013eaa:	4605      	mov	r5, r0
 8013eac:	b948      	cbnz	r0, 8013ec2 <__lshift+0x3e>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	4b28      	ldr	r3, [pc, #160]	@ (8013f54 <__lshift+0xd0>)
 8013eb2:	4829      	ldr	r0, [pc, #164]	@ (8013f58 <__lshift+0xd4>)
 8013eb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013eb8:	f7fe fb8a 	bl	80125d0 <__assert_func>
 8013ebc:	3101      	adds	r1, #1
 8013ebe:	005b      	lsls	r3, r3, #1
 8013ec0:	e7ee      	b.n	8013ea0 <__lshift+0x1c>
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	f100 0114 	add.w	r1, r0, #20
 8013ec8:	f100 0210 	add.w	r2, r0, #16
 8013ecc:	4618      	mov	r0, r3
 8013ece:	4553      	cmp	r3, sl
 8013ed0:	db33      	blt.n	8013f3a <__lshift+0xb6>
 8013ed2:	6920      	ldr	r0, [r4, #16]
 8013ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ed8:	f104 0314 	add.w	r3, r4, #20
 8013edc:	f019 091f 	ands.w	r9, r9, #31
 8013ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ee8:	d02b      	beq.n	8013f42 <__lshift+0xbe>
 8013eea:	f1c9 0e20 	rsb	lr, r9, #32
 8013eee:	468a      	mov	sl, r1
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	6818      	ldr	r0, [r3, #0]
 8013ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8013ef8:	4310      	orrs	r0, r2
 8013efa:	f84a 0b04 	str.w	r0, [sl], #4
 8013efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f02:	459c      	cmp	ip, r3
 8013f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f08:	d8f3      	bhi.n	8013ef2 <__lshift+0x6e>
 8013f0a:	ebac 0304 	sub.w	r3, ip, r4
 8013f0e:	3b15      	subs	r3, #21
 8013f10:	f023 0303 	bic.w	r3, r3, #3
 8013f14:	3304      	adds	r3, #4
 8013f16:	f104 0015 	add.w	r0, r4, #21
 8013f1a:	4584      	cmp	ip, r0
 8013f1c:	bf38      	it	cc
 8013f1e:	2304      	movcc	r3, #4
 8013f20:	50ca      	str	r2, [r1, r3]
 8013f22:	b10a      	cbz	r2, 8013f28 <__lshift+0xa4>
 8013f24:	f108 0602 	add.w	r6, r8, #2
 8013f28:	3e01      	subs	r6, #1
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	612e      	str	r6, [r5, #16]
 8013f2e:	4621      	mov	r1, r4
 8013f30:	f7ff fd90 	bl	8013a54 <_Bfree>
 8013f34:	4628      	mov	r0, r5
 8013f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f3e:	3301      	adds	r3, #1
 8013f40:	e7c5      	b.n	8013ece <__lshift+0x4a>
 8013f42:	3904      	subs	r1, #4
 8013f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f4c:	459c      	cmp	ip, r3
 8013f4e:	d8f9      	bhi.n	8013f44 <__lshift+0xc0>
 8013f50:	e7ea      	b.n	8013f28 <__lshift+0xa4>
 8013f52:	bf00      	nop
 8013f54:	08015a67 	.word	0x08015a67
 8013f58:	08015ad8 	.word	0x08015ad8

08013f5c <__mcmp>:
 8013f5c:	690a      	ldr	r2, [r1, #16]
 8013f5e:	4603      	mov	r3, r0
 8013f60:	6900      	ldr	r0, [r0, #16]
 8013f62:	1a80      	subs	r0, r0, r2
 8013f64:	b530      	push	{r4, r5, lr}
 8013f66:	d10e      	bne.n	8013f86 <__mcmp+0x2a>
 8013f68:	3314      	adds	r3, #20
 8013f6a:	3114      	adds	r1, #20
 8013f6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f7c:	4295      	cmp	r5, r2
 8013f7e:	d003      	beq.n	8013f88 <__mcmp+0x2c>
 8013f80:	d205      	bcs.n	8013f8e <__mcmp+0x32>
 8013f82:	f04f 30ff 	mov.w	r0, #4294967295
 8013f86:	bd30      	pop	{r4, r5, pc}
 8013f88:	42a3      	cmp	r3, r4
 8013f8a:	d3f3      	bcc.n	8013f74 <__mcmp+0x18>
 8013f8c:	e7fb      	b.n	8013f86 <__mcmp+0x2a>
 8013f8e:	2001      	movs	r0, #1
 8013f90:	e7f9      	b.n	8013f86 <__mcmp+0x2a>
	...

08013f94 <__mdiff>:
 8013f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f98:	4689      	mov	r9, r1
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	4611      	mov	r1, r2
 8013f9e:	4648      	mov	r0, r9
 8013fa0:	4614      	mov	r4, r2
 8013fa2:	f7ff ffdb 	bl	8013f5c <__mcmp>
 8013fa6:	1e05      	subs	r5, r0, #0
 8013fa8:	d112      	bne.n	8013fd0 <__mdiff+0x3c>
 8013faa:	4629      	mov	r1, r5
 8013fac:	4630      	mov	r0, r6
 8013fae:	f7ff fd11 	bl	80139d4 <_Balloc>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	b928      	cbnz	r0, 8013fc2 <__mdiff+0x2e>
 8013fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80140b4 <__mdiff+0x120>)
 8013fb8:	f240 2137 	movw	r1, #567	@ 0x237
 8013fbc:	483e      	ldr	r0, [pc, #248]	@ (80140b8 <__mdiff+0x124>)
 8013fbe:	f7fe fb07 	bl	80125d0 <__assert_func>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013fc8:	4610      	mov	r0, r2
 8013fca:	b003      	add	sp, #12
 8013fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd0:	bfbc      	itt	lt
 8013fd2:	464b      	movlt	r3, r9
 8013fd4:	46a1      	movlt	r9, r4
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013fdc:	bfba      	itte	lt
 8013fde:	461c      	movlt	r4, r3
 8013fe0:	2501      	movlt	r5, #1
 8013fe2:	2500      	movge	r5, #0
 8013fe4:	f7ff fcf6 	bl	80139d4 <_Balloc>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	b918      	cbnz	r0, 8013ff4 <__mdiff+0x60>
 8013fec:	4b31      	ldr	r3, [pc, #196]	@ (80140b4 <__mdiff+0x120>)
 8013fee:	f240 2145 	movw	r1, #581	@ 0x245
 8013ff2:	e7e3      	b.n	8013fbc <__mdiff+0x28>
 8013ff4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013ff8:	6926      	ldr	r6, [r4, #16]
 8013ffa:	60c5      	str	r5, [r0, #12]
 8013ffc:	f109 0310 	add.w	r3, r9, #16
 8014000:	f109 0514 	add.w	r5, r9, #20
 8014004:	f104 0e14 	add.w	lr, r4, #20
 8014008:	f100 0b14 	add.w	fp, r0, #20
 801400c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014010:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014014:	9301      	str	r3, [sp, #4]
 8014016:	46d9      	mov	r9, fp
 8014018:	f04f 0c00 	mov.w	ip, #0
 801401c:	9b01      	ldr	r3, [sp, #4]
 801401e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014022:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014026:	9301      	str	r3, [sp, #4]
 8014028:	fa1f f38a 	uxth.w	r3, sl
 801402c:	4619      	mov	r1, r3
 801402e:	b283      	uxth	r3, r0
 8014030:	1acb      	subs	r3, r1, r3
 8014032:	0c00      	lsrs	r0, r0, #16
 8014034:	4463      	add	r3, ip
 8014036:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801403a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801403e:	b29b      	uxth	r3, r3
 8014040:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014044:	4576      	cmp	r6, lr
 8014046:	f849 3b04 	str.w	r3, [r9], #4
 801404a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801404e:	d8e5      	bhi.n	801401c <__mdiff+0x88>
 8014050:	1b33      	subs	r3, r6, r4
 8014052:	3b15      	subs	r3, #21
 8014054:	f023 0303 	bic.w	r3, r3, #3
 8014058:	3415      	adds	r4, #21
 801405a:	3304      	adds	r3, #4
 801405c:	42a6      	cmp	r6, r4
 801405e:	bf38      	it	cc
 8014060:	2304      	movcc	r3, #4
 8014062:	441d      	add	r5, r3
 8014064:	445b      	add	r3, fp
 8014066:	461e      	mov	r6, r3
 8014068:	462c      	mov	r4, r5
 801406a:	4544      	cmp	r4, r8
 801406c:	d30e      	bcc.n	801408c <__mdiff+0xf8>
 801406e:	f108 0103 	add.w	r1, r8, #3
 8014072:	1b49      	subs	r1, r1, r5
 8014074:	f021 0103 	bic.w	r1, r1, #3
 8014078:	3d03      	subs	r5, #3
 801407a:	45a8      	cmp	r8, r5
 801407c:	bf38      	it	cc
 801407e:	2100      	movcc	r1, #0
 8014080:	440b      	add	r3, r1
 8014082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014086:	b191      	cbz	r1, 80140ae <__mdiff+0x11a>
 8014088:	6117      	str	r7, [r2, #16]
 801408a:	e79d      	b.n	8013fc8 <__mdiff+0x34>
 801408c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014090:	46e6      	mov	lr, ip
 8014092:	0c08      	lsrs	r0, r1, #16
 8014094:	fa1c fc81 	uxtah	ip, ip, r1
 8014098:	4471      	add	r1, lr
 801409a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801409e:	b289      	uxth	r1, r1
 80140a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80140a4:	f846 1b04 	str.w	r1, [r6], #4
 80140a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140ac:	e7dd      	b.n	801406a <__mdiff+0xd6>
 80140ae:	3f01      	subs	r7, #1
 80140b0:	e7e7      	b.n	8014082 <__mdiff+0xee>
 80140b2:	bf00      	nop
 80140b4:	08015a67 	.word	0x08015a67
 80140b8:	08015ad8 	.word	0x08015ad8

080140bc <__ulp>:
 80140bc:	b082      	sub	sp, #8
 80140be:	ed8d 0b00 	vstr	d0, [sp]
 80140c2:	9a01      	ldr	r2, [sp, #4]
 80140c4:	4b0f      	ldr	r3, [pc, #60]	@ (8014104 <__ulp+0x48>)
 80140c6:	4013      	ands	r3, r2
 80140c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	dc08      	bgt.n	80140e2 <__ulp+0x26>
 80140d0:	425b      	negs	r3, r3
 80140d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80140d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80140da:	da04      	bge.n	80140e6 <__ulp+0x2a>
 80140dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80140e0:	4113      	asrs	r3, r2
 80140e2:	2200      	movs	r2, #0
 80140e4:	e008      	b.n	80140f8 <__ulp+0x3c>
 80140e6:	f1a2 0314 	sub.w	r3, r2, #20
 80140ea:	2b1e      	cmp	r3, #30
 80140ec:	bfda      	itte	le
 80140ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80140f2:	40da      	lsrle	r2, r3
 80140f4:	2201      	movgt	r2, #1
 80140f6:	2300      	movs	r3, #0
 80140f8:	4619      	mov	r1, r3
 80140fa:	4610      	mov	r0, r2
 80140fc:	ec41 0b10 	vmov	d0, r0, r1
 8014100:	b002      	add	sp, #8
 8014102:	4770      	bx	lr
 8014104:	7ff00000 	.word	0x7ff00000

08014108 <__b2d>:
 8014108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801410c:	6906      	ldr	r6, [r0, #16]
 801410e:	f100 0814 	add.w	r8, r0, #20
 8014112:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014116:	1f37      	subs	r7, r6, #4
 8014118:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801411c:	4610      	mov	r0, r2
 801411e:	f7ff fd4b 	bl	8013bb8 <__hi0bits>
 8014122:	f1c0 0320 	rsb	r3, r0, #32
 8014126:	280a      	cmp	r0, #10
 8014128:	600b      	str	r3, [r1, #0]
 801412a:	491b      	ldr	r1, [pc, #108]	@ (8014198 <__b2d+0x90>)
 801412c:	dc15      	bgt.n	801415a <__b2d+0x52>
 801412e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014132:	fa22 f30c 	lsr.w	r3, r2, ip
 8014136:	45b8      	cmp	r8, r7
 8014138:	ea43 0501 	orr.w	r5, r3, r1
 801413c:	bf34      	ite	cc
 801413e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014142:	2300      	movcs	r3, #0
 8014144:	3015      	adds	r0, #21
 8014146:	fa02 f000 	lsl.w	r0, r2, r0
 801414a:	fa23 f30c 	lsr.w	r3, r3, ip
 801414e:	4303      	orrs	r3, r0
 8014150:	461c      	mov	r4, r3
 8014152:	ec45 4b10 	vmov	d0, r4, r5
 8014156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801415a:	45b8      	cmp	r8, r7
 801415c:	bf3a      	itte	cc
 801415e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014162:	f1a6 0708 	subcc.w	r7, r6, #8
 8014166:	2300      	movcs	r3, #0
 8014168:	380b      	subs	r0, #11
 801416a:	d012      	beq.n	8014192 <__b2d+0x8a>
 801416c:	f1c0 0120 	rsb	r1, r0, #32
 8014170:	fa23 f401 	lsr.w	r4, r3, r1
 8014174:	4082      	lsls	r2, r0
 8014176:	4322      	orrs	r2, r4
 8014178:	4547      	cmp	r7, r8
 801417a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801417e:	bf8c      	ite	hi
 8014180:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014184:	2200      	movls	r2, #0
 8014186:	4083      	lsls	r3, r0
 8014188:	40ca      	lsrs	r2, r1
 801418a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801418e:	4313      	orrs	r3, r2
 8014190:	e7de      	b.n	8014150 <__b2d+0x48>
 8014192:	ea42 0501 	orr.w	r5, r2, r1
 8014196:	e7db      	b.n	8014150 <__b2d+0x48>
 8014198:	3ff00000 	.word	0x3ff00000

0801419c <__d2b>:
 801419c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141a0:	460f      	mov	r7, r1
 80141a2:	2101      	movs	r1, #1
 80141a4:	ec59 8b10 	vmov	r8, r9, d0
 80141a8:	4616      	mov	r6, r2
 80141aa:	f7ff fc13 	bl	80139d4 <_Balloc>
 80141ae:	4604      	mov	r4, r0
 80141b0:	b930      	cbnz	r0, 80141c0 <__d2b+0x24>
 80141b2:	4602      	mov	r2, r0
 80141b4:	4b23      	ldr	r3, [pc, #140]	@ (8014244 <__d2b+0xa8>)
 80141b6:	4824      	ldr	r0, [pc, #144]	@ (8014248 <__d2b+0xac>)
 80141b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80141bc:	f7fe fa08 	bl	80125d0 <__assert_func>
 80141c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80141c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141c8:	b10d      	cbz	r5, 80141ce <__d2b+0x32>
 80141ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80141ce:	9301      	str	r3, [sp, #4]
 80141d0:	f1b8 0300 	subs.w	r3, r8, #0
 80141d4:	d023      	beq.n	801421e <__d2b+0x82>
 80141d6:	4668      	mov	r0, sp
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	f7ff fd0c 	bl	8013bf6 <__lo0bits>
 80141de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80141e2:	b1d0      	cbz	r0, 801421a <__d2b+0x7e>
 80141e4:	f1c0 0320 	rsb	r3, r0, #32
 80141e8:	fa02 f303 	lsl.w	r3, r2, r3
 80141ec:	430b      	orrs	r3, r1
 80141ee:	40c2      	lsrs	r2, r0
 80141f0:	6163      	str	r3, [r4, #20]
 80141f2:	9201      	str	r2, [sp, #4]
 80141f4:	9b01      	ldr	r3, [sp, #4]
 80141f6:	61a3      	str	r3, [r4, #24]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	bf0c      	ite	eq
 80141fc:	2201      	moveq	r2, #1
 80141fe:	2202      	movne	r2, #2
 8014200:	6122      	str	r2, [r4, #16]
 8014202:	b1a5      	cbz	r5, 801422e <__d2b+0x92>
 8014204:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014208:	4405      	add	r5, r0
 801420a:	603d      	str	r5, [r7, #0]
 801420c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014210:	6030      	str	r0, [r6, #0]
 8014212:	4620      	mov	r0, r4
 8014214:	b003      	add	sp, #12
 8014216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801421a:	6161      	str	r1, [r4, #20]
 801421c:	e7ea      	b.n	80141f4 <__d2b+0x58>
 801421e:	a801      	add	r0, sp, #4
 8014220:	f7ff fce9 	bl	8013bf6 <__lo0bits>
 8014224:	9b01      	ldr	r3, [sp, #4]
 8014226:	6163      	str	r3, [r4, #20]
 8014228:	3020      	adds	r0, #32
 801422a:	2201      	movs	r2, #1
 801422c:	e7e8      	b.n	8014200 <__d2b+0x64>
 801422e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014232:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014236:	6038      	str	r0, [r7, #0]
 8014238:	6918      	ldr	r0, [r3, #16]
 801423a:	f7ff fcbd 	bl	8013bb8 <__hi0bits>
 801423e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014242:	e7e5      	b.n	8014210 <__d2b+0x74>
 8014244:	08015a67 	.word	0x08015a67
 8014248:	08015ad8 	.word	0x08015ad8

0801424c <__ratio>:
 801424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014250:	b085      	sub	sp, #20
 8014252:	e9cd 1000 	strd	r1, r0, [sp]
 8014256:	a902      	add	r1, sp, #8
 8014258:	f7ff ff56 	bl	8014108 <__b2d>
 801425c:	9800      	ldr	r0, [sp, #0]
 801425e:	a903      	add	r1, sp, #12
 8014260:	ec55 4b10 	vmov	r4, r5, d0
 8014264:	f7ff ff50 	bl	8014108 <__b2d>
 8014268:	9b01      	ldr	r3, [sp, #4]
 801426a:	6919      	ldr	r1, [r3, #16]
 801426c:	9b00      	ldr	r3, [sp, #0]
 801426e:	691b      	ldr	r3, [r3, #16]
 8014270:	1ac9      	subs	r1, r1, r3
 8014272:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014276:	1a9b      	subs	r3, r3, r2
 8014278:	ec5b ab10 	vmov	sl, fp, d0
 801427c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014280:	2b00      	cmp	r3, #0
 8014282:	bfce      	itee	gt
 8014284:	462a      	movgt	r2, r5
 8014286:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801428a:	465a      	movle	r2, fp
 801428c:	462f      	mov	r7, r5
 801428e:	46d9      	mov	r9, fp
 8014290:	bfcc      	ite	gt
 8014292:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014296:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801429a:	464b      	mov	r3, r9
 801429c:	4652      	mov	r2, sl
 801429e:	4620      	mov	r0, r4
 80142a0:	4639      	mov	r1, r7
 80142a2:	f7ec fad3 	bl	800084c <__aeabi_ddiv>
 80142a6:	ec41 0b10 	vmov	d0, r0, r1
 80142aa:	b005      	add	sp, #20
 80142ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142b0 <__copybits>:
 80142b0:	3901      	subs	r1, #1
 80142b2:	b570      	push	{r4, r5, r6, lr}
 80142b4:	1149      	asrs	r1, r1, #5
 80142b6:	6914      	ldr	r4, [r2, #16]
 80142b8:	3101      	adds	r1, #1
 80142ba:	f102 0314 	add.w	r3, r2, #20
 80142be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80142c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142c6:	1f05      	subs	r5, r0, #4
 80142c8:	42a3      	cmp	r3, r4
 80142ca:	d30c      	bcc.n	80142e6 <__copybits+0x36>
 80142cc:	1aa3      	subs	r3, r4, r2
 80142ce:	3b11      	subs	r3, #17
 80142d0:	f023 0303 	bic.w	r3, r3, #3
 80142d4:	3211      	adds	r2, #17
 80142d6:	42a2      	cmp	r2, r4
 80142d8:	bf88      	it	hi
 80142da:	2300      	movhi	r3, #0
 80142dc:	4418      	add	r0, r3
 80142de:	2300      	movs	r3, #0
 80142e0:	4288      	cmp	r0, r1
 80142e2:	d305      	bcc.n	80142f0 <__copybits+0x40>
 80142e4:	bd70      	pop	{r4, r5, r6, pc}
 80142e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80142ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80142ee:	e7eb      	b.n	80142c8 <__copybits+0x18>
 80142f0:	f840 3b04 	str.w	r3, [r0], #4
 80142f4:	e7f4      	b.n	80142e0 <__copybits+0x30>

080142f6 <__any_on>:
 80142f6:	f100 0214 	add.w	r2, r0, #20
 80142fa:	6900      	ldr	r0, [r0, #16]
 80142fc:	114b      	asrs	r3, r1, #5
 80142fe:	4298      	cmp	r0, r3
 8014300:	b510      	push	{r4, lr}
 8014302:	db11      	blt.n	8014328 <__any_on+0x32>
 8014304:	dd0a      	ble.n	801431c <__any_on+0x26>
 8014306:	f011 011f 	ands.w	r1, r1, #31
 801430a:	d007      	beq.n	801431c <__any_on+0x26>
 801430c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014310:	fa24 f001 	lsr.w	r0, r4, r1
 8014314:	fa00 f101 	lsl.w	r1, r0, r1
 8014318:	428c      	cmp	r4, r1
 801431a:	d10b      	bne.n	8014334 <__any_on+0x3e>
 801431c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014320:	4293      	cmp	r3, r2
 8014322:	d803      	bhi.n	801432c <__any_on+0x36>
 8014324:	2000      	movs	r0, #0
 8014326:	bd10      	pop	{r4, pc}
 8014328:	4603      	mov	r3, r0
 801432a:	e7f7      	b.n	801431c <__any_on+0x26>
 801432c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014330:	2900      	cmp	r1, #0
 8014332:	d0f5      	beq.n	8014320 <__any_on+0x2a>
 8014334:	2001      	movs	r0, #1
 8014336:	e7f6      	b.n	8014326 <__any_on+0x30>

08014338 <__ascii_wctomb>:
 8014338:	4603      	mov	r3, r0
 801433a:	4608      	mov	r0, r1
 801433c:	b141      	cbz	r1, 8014350 <__ascii_wctomb+0x18>
 801433e:	2aff      	cmp	r2, #255	@ 0xff
 8014340:	d904      	bls.n	801434c <__ascii_wctomb+0x14>
 8014342:	228a      	movs	r2, #138	@ 0x8a
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	f04f 30ff 	mov.w	r0, #4294967295
 801434a:	4770      	bx	lr
 801434c:	700a      	strb	r2, [r1, #0]
 801434e:	2001      	movs	r0, #1
 8014350:	4770      	bx	lr

08014352 <__ssputs_r>:
 8014352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014356:	688e      	ldr	r6, [r1, #8]
 8014358:	461f      	mov	r7, r3
 801435a:	42be      	cmp	r6, r7
 801435c:	680b      	ldr	r3, [r1, #0]
 801435e:	4682      	mov	sl, r0
 8014360:	460c      	mov	r4, r1
 8014362:	4690      	mov	r8, r2
 8014364:	d82d      	bhi.n	80143c2 <__ssputs_r+0x70>
 8014366:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801436a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801436e:	d026      	beq.n	80143be <__ssputs_r+0x6c>
 8014370:	6965      	ldr	r5, [r4, #20]
 8014372:	6909      	ldr	r1, [r1, #16]
 8014374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014378:	eba3 0901 	sub.w	r9, r3, r1
 801437c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014380:	1c7b      	adds	r3, r7, #1
 8014382:	444b      	add	r3, r9
 8014384:	106d      	asrs	r5, r5, #1
 8014386:	429d      	cmp	r5, r3
 8014388:	bf38      	it	cc
 801438a:	461d      	movcc	r5, r3
 801438c:	0553      	lsls	r3, r2, #21
 801438e:	d527      	bpl.n	80143e0 <__ssputs_r+0x8e>
 8014390:	4629      	mov	r1, r5
 8014392:	f7fc fb01 	bl	8010998 <_malloc_r>
 8014396:	4606      	mov	r6, r0
 8014398:	b360      	cbz	r0, 80143f4 <__ssputs_r+0xa2>
 801439a:	6921      	ldr	r1, [r4, #16]
 801439c:	464a      	mov	r2, r9
 801439e:	f7fe f900 	bl	80125a2 <memcpy>
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143ac:	81a3      	strh	r3, [r4, #12]
 80143ae:	6126      	str	r6, [r4, #16]
 80143b0:	6165      	str	r5, [r4, #20]
 80143b2:	444e      	add	r6, r9
 80143b4:	eba5 0509 	sub.w	r5, r5, r9
 80143b8:	6026      	str	r6, [r4, #0]
 80143ba:	60a5      	str	r5, [r4, #8]
 80143bc:	463e      	mov	r6, r7
 80143be:	42be      	cmp	r6, r7
 80143c0:	d900      	bls.n	80143c4 <__ssputs_r+0x72>
 80143c2:	463e      	mov	r6, r7
 80143c4:	6820      	ldr	r0, [r4, #0]
 80143c6:	4632      	mov	r2, r6
 80143c8:	4641      	mov	r1, r8
 80143ca:	f000 f9d7 	bl	801477c <memmove>
 80143ce:	68a3      	ldr	r3, [r4, #8]
 80143d0:	1b9b      	subs	r3, r3, r6
 80143d2:	60a3      	str	r3, [r4, #8]
 80143d4:	6823      	ldr	r3, [r4, #0]
 80143d6:	4433      	add	r3, r6
 80143d8:	6023      	str	r3, [r4, #0]
 80143da:	2000      	movs	r0, #0
 80143dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143e0:	462a      	mov	r2, r5
 80143e2:	f000 fa00 	bl	80147e6 <_realloc_r>
 80143e6:	4606      	mov	r6, r0
 80143e8:	2800      	cmp	r0, #0
 80143ea:	d1e0      	bne.n	80143ae <__ssputs_r+0x5c>
 80143ec:	6921      	ldr	r1, [r4, #16]
 80143ee:	4650      	mov	r0, sl
 80143f0:	f7fe ff5a 	bl	80132a8 <_free_r>
 80143f4:	230c      	movs	r3, #12
 80143f6:	f8ca 3000 	str.w	r3, [sl]
 80143fa:	89a3      	ldrh	r3, [r4, #12]
 80143fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014400:	81a3      	strh	r3, [r4, #12]
 8014402:	f04f 30ff 	mov.w	r0, #4294967295
 8014406:	e7e9      	b.n	80143dc <__ssputs_r+0x8a>

08014408 <_svfiprintf_r>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	4698      	mov	r8, r3
 801440e:	898b      	ldrh	r3, [r1, #12]
 8014410:	061b      	lsls	r3, r3, #24
 8014412:	b09d      	sub	sp, #116	@ 0x74
 8014414:	4607      	mov	r7, r0
 8014416:	460d      	mov	r5, r1
 8014418:	4614      	mov	r4, r2
 801441a:	d510      	bpl.n	801443e <_svfiprintf_r+0x36>
 801441c:	690b      	ldr	r3, [r1, #16]
 801441e:	b973      	cbnz	r3, 801443e <_svfiprintf_r+0x36>
 8014420:	2140      	movs	r1, #64	@ 0x40
 8014422:	f7fc fab9 	bl	8010998 <_malloc_r>
 8014426:	6028      	str	r0, [r5, #0]
 8014428:	6128      	str	r0, [r5, #16]
 801442a:	b930      	cbnz	r0, 801443a <_svfiprintf_r+0x32>
 801442c:	230c      	movs	r3, #12
 801442e:	603b      	str	r3, [r7, #0]
 8014430:	f04f 30ff 	mov.w	r0, #4294967295
 8014434:	b01d      	add	sp, #116	@ 0x74
 8014436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443a:	2340      	movs	r3, #64	@ 0x40
 801443c:	616b      	str	r3, [r5, #20]
 801443e:	2300      	movs	r3, #0
 8014440:	9309      	str	r3, [sp, #36]	@ 0x24
 8014442:	2320      	movs	r3, #32
 8014444:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014448:	f8cd 800c 	str.w	r8, [sp, #12]
 801444c:	2330      	movs	r3, #48	@ 0x30
 801444e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80145ec <_svfiprintf_r+0x1e4>
 8014452:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014456:	f04f 0901 	mov.w	r9, #1
 801445a:	4623      	mov	r3, r4
 801445c:	469a      	mov	sl, r3
 801445e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014462:	b10a      	cbz	r2, 8014468 <_svfiprintf_r+0x60>
 8014464:	2a25      	cmp	r2, #37	@ 0x25
 8014466:	d1f9      	bne.n	801445c <_svfiprintf_r+0x54>
 8014468:	ebba 0b04 	subs.w	fp, sl, r4
 801446c:	d00b      	beq.n	8014486 <_svfiprintf_r+0x7e>
 801446e:	465b      	mov	r3, fp
 8014470:	4622      	mov	r2, r4
 8014472:	4629      	mov	r1, r5
 8014474:	4638      	mov	r0, r7
 8014476:	f7ff ff6c 	bl	8014352 <__ssputs_r>
 801447a:	3001      	adds	r0, #1
 801447c:	f000 80a7 	beq.w	80145ce <_svfiprintf_r+0x1c6>
 8014480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014482:	445a      	add	r2, fp
 8014484:	9209      	str	r2, [sp, #36]	@ 0x24
 8014486:	f89a 3000 	ldrb.w	r3, [sl]
 801448a:	2b00      	cmp	r3, #0
 801448c:	f000 809f 	beq.w	80145ce <_svfiprintf_r+0x1c6>
 8014490:	2300      	movs	r3, #0
 8014492:	f04f 32ff 	mov.w	r2, #4294967295
 8014496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801449a:	f10a 0a01 	add.w	sl, sl, #1
 801449e:	9304      	str	r3, [sp, #16]
 80144a0:	9307      	str	r3, [sp, #28]
 80144a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80144a8:	4654      	mov	r4, sl
 80144aa:	2205      	movs	r2, #5
 80144ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144b0:	484e      	ldr	r0, [pc, #312]	@ (80145ec <_svfiprintf_r+0x1e4>)
 80144b2:	f7eb fe8d 	bl	80001d0 <memchr>
 80144b6:	9a04      	ldr	r2, [sp, #16]
 80144b8:	b9d8      	cbnz	r0, 80144f2 <_svfiprintf_r+0xea>
 80144ba:	06d0      	lsls	r0, r2, #27
 80144bc:	bf44      	itt	mi
 80144be:	2320      	movmi	r3, #32
 80144c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144c4:	0711      	lsls	r1, r2, #28
 80144c6:	bf44      	itt	mi
 80144c8:	232b      	movmi	r3, #43	@ 0x2b
 80144ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144ce:	f89a 3000 	ldrb.w	r3, [sl]
 80144d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80144d4:	d015      	beq.n	8014502 <_svfiprintf_r+0xfa>
 80144d6:	9a07      	ldr	r2, [sp, #28]
 80144d8:	4654      	mov	r4, sl
 80144da:	2000      	movs	r0, #0
 80144dc:	f04f 0c0a 	mov.w	ip, #10
 80144e0:	4621      	mov	r1, r4
 80144e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144e6:	3b30      	subs	r3, #48	@ 0x30
 80144e8:	2b09      	cmp	r3, #9
 80144ea:	d94b      	bls.n	8014584 <_svfiprintf_r+0x17c>
 80144ec:	b1b0      	cbz	r0, 801451c <_svfiprintf_r+0x114>
 80144ee:	9207      	str	r2, [sp, #28]
 80144f0:	e014      	b.n	801451c <_svfiprintf_r+0x114>
 80144f2:	eba0 0308 	sub.w	r3, r0, r8
 80144f6:	fa09 f303 	lsl.w	r3, r9, r3
 80144fa:	4313      	orrs	r3, r2
 80144fc:	9304      	str	r3, [sp, #16]
 80144fe:	46a2      	mov	sl, r4
 8014500:	e7d2      	b.n	80144a8 <_svfiprintf_r+0xa0>
 8014502:	9b03      	ldr	r3, [sp, #12]
 8014504:	1d19      	adds	r1, r3, #4
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	9103      	str	r1, [sp, #12]
 801450a:	2b00      	cmp	r3, #0
 801450c:	bfbb      	ittet	lt
 801450e:	425b      	neglt	r3, r3
 8014510:	f042 0202 	orrlt.w	r2, r2, #2
 8014514:	9307      	strge	r3, [sp, #28]
 8014516:	9307      	strlt	r3, [sp, #28]
 8014518:	bfb8      	it	lt
 801451a:	9204      	strlt	r2, [sp, #16]
 801451c:	7823      	ldrb	r3, [r4, #0]
 801451e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014520:	d10a      	bne.n	8014538 <_svfiprintf_r+0x130>
 8014522:	7863      	ldrb	r3, [r4, #1]
 8014524:	2b2a      	cmp	r3, #42	@ 0x2a
 8014526:	d132      	bne.n	801458e <_svfiprintf_r+0x186>
 8014528:	9b03      	ldr	r3, [sp, #12]
 801452a:	1d1a      	adds	r2, r3, #4
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	9203      	str	r2, [sp, #12]
 8014530:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014534:	3402      	adds	r4, #2
 8014536:	9305      	str	r3, [sp, #20]
 8014538:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80145fc <_svfiprintf_r+0x1f4>
 801453c:	7821      	ldrb	r1, [r4, #0]
 801453e:	2203      	movs	r2, #3
 8014540:	4650      	mov	r0, sl
 8014542:	f7eb fe45 	bl	80001d0 <memchr>
 8014546:	b138      	cbz	r0, 8014558 <_svfiprintf_r+0x150>
 8014548:	9b04      	ldr	r3, [sp, #16]
 801454a:	eba0 000a 	sub.w	r0, r0, sl
 801454e:	2240      	movs	r2, #64	@ 0x40
 8014550:	4082      	lsls	r2, r0
 8014552:	4313      	orrs	r3, r2
 8014554:	3401      	adds	r4, #1
 8014556:	9304      	str	r3, [sp, #16]
 8014558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801455c:	4824      	ldr	r0, [pc, #144]	@ (80145f0 <_svfiprintf_r+0x1e8>)
 801455e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014562:	2206      	movs	r2, #6
 8014564:	f7eb fe34 	bl	80001d0 <memchr>
 8014568:	2800      	cmp	r0, #0
 801456a:	d036      	beq.n	80145da <_svfiprintf_r+0x1d2>
 801456c:	4b21      	ldr	r3, [pc, #132]	@ (80145f4 <_svfiprintf_r+0x1ec>)
 801456e:	bb1b      	cbnz	r3, 80145b8 <_svfiprintf_r+0x1b0>
 8014570:	9b03      	ldr	r3, [sp, #12]
 8014572:	3307      	adds	r3, #7
 8014574:	f023 0307 	bic.w	r3, r3, #7
 8014578:	3308      	adds	r3, #8
 801457a:	9303      	str	r3, [sp, #12]
 801457c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801457e:	4433      	add	r3, r6
 8014580:	9309      	str	r3, [sp, #36]	@ 0x24
 8014582:	e76a      	b.n	801445a <_svfiprintf_r+0x52>
 8014584:	fb0c 3202 	mla	r2, ip, r2, r3
 8014588:	460c      	mov	r4, r1
 801458a:	2001      	movs	r0, #1
 801458c:	e7a8      	b.n	80144e0 <_svfiprintf_r+0xd8>
 801458e:	2300      	movs	r3, #0
 8014590:	3401      	adds	r4, #1
 8014592:	9305      	str	r3, [sp, #20]
 8014594:	4619      	mov	r1, r3
 8014596:	f04f 0c0a 	mov.w	ip, #10
 801459a:	4620      	mov	r0, r4
 801459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145a0:	3a30      	subs	r2, #48	@ 0x30
 80145a2:	2a09      	cmp	r2, #9
 80145a4:	d903      	bls.n	80145ae <_svfiprintf_r+0x1a6>
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d0c6      	beq.n	8014538 <_svfiprintf_r+0x130>
 80145aa:	9105      	str	r1, [sp, #20]
 80145ac:	e7c4      	b.n	8014538 <_svfiprintf_r+0x130>
 80145ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80145b2:	4604      	mov	r4, r0
 80145b4:	2301      	movs	r3, #1
 80145b6:	e7f0      	b.n	801459a <_svfiprintf_r+0x192>
 80145b8:	ab03      	add	r3, sp, #12
 80145ba:	9300      	str	r3, [sp, #0]
 80145bc:	462a      	mov	r2, r5
 80145be:	4b0e      	ldr	r3, [pc, #56]	@ (80145f8 <_svfiprintf_r+0x1f0>)
 80145c0:	a904      	add	r1, sp, #16
 80145c2:	4638      	mov	r0, r7
 80145c4:	f7fd f9a8 	bl	8011918 <_printf_float>
 80145c8:	1c42      	adds	r2, r0, #1
 80145ca:	4606      	mov	r6, r0
 80145cc:	d1d6      	bne.n	801457c <_svfiprintf_r+0x174>
 80145ce:	89ab      	ldrh	r3, [r5, #12]
 80145d0:	065b      	lsls	r3, r3, #25
 80145d2:	f53f af2d 	bmi.w	8014430 <_svfiprintf_r+0x28>
 80145d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145d8:	e72c      	b.n	8014434 <_svfiprintf_r+0x2c>
 80145da:	ab03      	add	r3, sp, #12
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	462a      	mov	r2, r5
 80145e0:	4b05      	ldr	r3, [pc, #20]	@ (80145f8 <_svfiprintf_r+0x1f0>)
 80145e2:	a904      	add	r1, sp, #16
 80145e4:	4638      	mov	r0, r7
 80145e6:	f7fd fc2f 	bl	8011e48 <_printf_i>
 80145ea:	e7ed      	b.n	80145c8 <_svfiprintf_r+0x1c0>
 80145ec:	08015c30 	.word	0x08015c30
 80145f0:	08015c3a 	.word	0x08015c3a
 80145f4:	08011919 	.word	0x08011919
 80145f8:	08014353 	.word	0x08014353
 80145fc:	08015c36 	.word	0x08015c36

08014600 <__sflush_r>:
 8014600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014608:	0716      	lsls	r6, r2, #28
 801460a:	4605      	mov	r5, r0
 801460c:	460c      	mov	r4, r1
 801460e:	d454      	bmi.n	80146ba <__sflush_r+0xba>
 8014610:	684b      	ldr	r3, [r1, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	dc02      	bgt.n	801461c <__sflush_r+0x1c>
 8014616:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014618:	2b00      	cmp	r3, #0
 801461a:	dd48      	ble.n	80146ae <__sflush_r+0xae>
 801461c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801461e:	2e00      	cmp	r6, #0
 8014620:	d045      	beq.n	80146ae <__sflush_r+0xae>
 8014622:	2300      	movs	r3, #0
 8014624:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014628:	682f      	ldr	r7, [r5, #0]
 801462a:	6a21      	ldr	r1, [r4, #32]
 801462c:	602b      	str	r3, [r5, #0]
 801462e:	d030      	beq.n	8014692 <__sflush_r+0x92>
 8014630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014632:	89a3      	ldrh	r3, [r4, #12]
 8014634:	0759      	lsls	r1, r3, #29
 8014636:	d505      	bpl.n	8014644 <__sflush_r+0x44>
 8014638:	6863      	ldr	r3, [r4, #4]
 801463a:	1ad2      	subs	r2, r2, r3
 801463c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801463e:	b10b      	cbz	r3, 8014644 <__sflush_r+0x44>
 8014640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014642:	1ad2      	subs	r2, r2, r3
 8014644:	2300      	movs	r3, #0
 8014646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014648:	6a21      	ldr	r1, [r4, #32]
 801464a:	4628      	mov	r0, r5
 801464c:	47b0      	blx	r6
 801464e:	1c43      	adds	r3, r0, #1
 8014650:	89a3      	ldrh	r3, [r4, #12]
 8014652:	d106      	bne.n	8014662 <__sflush_r+0x62>
 8014654:	6829      	ldr	r1, [r5, #0]
 8014656:	291d      	cmp	r1, #29
 8014658:	d82b      	bhi.n	80146b2 <__sflush_r+0xb2>
 801465a:	4a2a      	ldr	r2, [pc, #168]	@ (8014704 <__sflush_r+0x104>)
 801465c:	410a      	asrs	r2, r1
 801465e:	07d6      	lsls	r6, r2, #31
 8014660:	d427      	bmi.n	80146b2 <__sflush_r+0xb2>
 8014662:	2200      	movs	r2, #0
 8014664:	6062      	str	r2, [r4, #4]
 8014666:	04d9      	lsls	r1, r3, #19
 8014668:	6922      	ldr	r2, [r4, #16]
 801466a:	6022      	str	r2, [r4, #0]
 801466c:	d504      	bpl.n	8014678 <__sflush_r+0x78>
 801466e:	1c42      	adds	r2, r0, #1
 8014670:	d101      	bne.n	8014676 <__sflush_r+0x76>
 8014672:	682b      	ldr	r3, [r5, #0]
 8014674:	b903      	cbnz	r3, 8014678 <__sflush_r+0x78>
 8014676:	6560      	str	r0, [r4, #84]	@ 0x54
 8014678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801467a:	602f      	str	r7, [r5, #0]
 801467c:	b1b9      	cbz	r1, 80146ae <__sflush_r+0xae>
 801467e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014682:	4299      	cmp	r1, r3
 8014684:	d002      	beq.n	801468c <__sflush_r+0x8c>
 8014686:	4628      	mov	r0, r5
 8014688:	f7fe fe0e 	bl	80132a8 <_free_r>
 801468c:	2300      	movs	r3, #0
 801468e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014690:	e00d      	b.n	80146ae <__sflush_r+0xae>
 8014692:	2301      	movs	r3, #1
 8014694:	4628      	mov	r0, r5
 8014696:	47b0      	blx	r6
 8014698:	4602      	mov	r2, r0
 801469a:	1c50      	adds	r0, r2, #1
 801469c:	d1c9      	bne.n	8014632 <__sflush_r+0x32>
 801469e:	682b      	ldr	r3, [r5, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d0c6      	beq.n	8014632 <__sflush_r+0x32>
 80146a4:	2b1d      	cmp	r3, #29
 80146a6:	d001      	beq.n	80146ac <__sflush_r+0xac>
 80146a8:	2b16      	cmp	r3, #22
 80146aa:	d11e      	bne.n	80146ea <__sflush_r+0xea>
 80146ac:	602f      	str	r7, [r5, #0]
 80146ae:	2000      	movs	r0, #0
 80146b0:	e022      	b.n	80146f8 <__sflush_r+0xf8>
 80146b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146b6:	b21b      	sxth	r3, r3
 80146b8:	e01b      	b.n	80146f2 <__sflush_r+0xf2>
 80146ba:	690f      	ldr	r7, [r1, #16]
 80146bc:	2f00      	cmp	r7, #0
 80146be:	d0f6      	beq.n	80146ae <__sflush_r+0xae>
 80146c0:	0793      	lsls	r3, r2, #30
 80146c2:	680e      	ldr	r6, [r1, #0]
 80146c4:	bf08      	it	eq
 80146c6:	694b      	ldreq	r3, [r1, #20]
 80146c8:	600f      	str	r7, [r1, #0]
 80146ca:	bf18      	it	ne
 80146cc:	2300      	movne	r3, #0
 80146ce:	eba6 0807 	sub.w	r8, r6, r7
 80146d2:	608b      	str	r3, [r1, #8]
 80146d4:	f1b8 0f00 	cmp.w	r8, #0
 80146d8:	dde9      	ble.n	80146ae <__sflush_r+0xae>
 80146da:	6a21      	ldr	r1, [r4, #32]
 80146dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80146de:	4643      	mov	r3, r8
 80146e0:	463a      	mov	r2, r7
 80146e2:	4628      	mov	r0, r5
 80146e4:	47b0      	blx	r6
 80146e6:	2800      	cmp	r0, #0
 80146e8:	dc08      	bgt.n	80146fc <__sflush_r+0xfc>
 80146ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146f2:	81a3      	strh	r3, [r4, #12]
 80146f4:	f04f 30ff 	mov.w	r0, #4294967295
 80146f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fc:	4407      	add	r7, r0
 80146fe:	eba8 0800 	sub.w	r8, r8, r0
 8014702:	e7e7      	b.n	80146d4 <__sflush_r+0xd4>
 8014704:	dfbffffe 	.word	0xdfbffffe

08014708 <_fflush_r>:
 8014708:	b538      	push	{r3, r4, r5, lr}
 801470a:	690b      	ldr	r3, [r1, #16]
 801470c:	4605      	mov	r5, r0
 801470e:	460c      	mov	r4, r1
 8014710:	b913      	cbnz	r3, 8014718 <_fflush_r+0x10>
 8014712:	2500      	movs	r5, #0
 8014714:	4628      	mov	r0, r5
 8014716:	bd38      	pop	{r3, r4, r5, pc}
 8014718:	b118      	cbz	r0, 8014722 <_fflush_r+0x1a>
 801471a:	6a03      	ldr	r3, [r0, #32]
 801471c:	b90b      	cbnz	r3, 8014722 <_fflush_r+0x1a>
 801471e:	f7fd fd3f 	bl	80121a0 <__sinit>
 8014722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d0f3      	beq.n	8014712 <_fflush_r+0xa>
 801472a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801472c:	07d0      	lsls	r0, r2, #31
 801472e:	d404      	bmi.n	801473a <_fflush_r+0x32>
 8014730:	0599      	lsls	r1, r3, #22
 8014732:	d402      	bmi.n	801473a <_fflush_r+0x32>
 8014734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014736:	f7fd ff2a 	bl	801258e <__retarget_lock_acquire_recursive>
 801473a:	4628      	mov	r0, r5
 801473c:	4621      	mov	r1, r4
 801473e:	f7ff ff5f 	bl	8014600 <__sflush_r>
 8014742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014744:	07da      	lsls	r2, r3, #31
 8014746:	4605      	mov	r5, r0
 8014748:	d4e4      	bmi.n	8014714 <_fflush_r+0xc>
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	059b      	lsls	r3, r3, #22
 801474e:	d4e1      	bmi.n	8014714 <_fflush_r+0xc>
 8014750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014752:	f7fd ff1d 	bl	8012590 <__retarget_lock_release_recursive>
 8014756:	e7dd      	b.n	8014714 <_fflush_r+0xc>

08014758 <fiprintf>:
 8014758:	b40e      	push	{r1, r2, r3}
 801475a:	b503      	push	{r0, r1, lr}
 801475c:	4601      	mov	r1, r0
 801475e:	ab03      	add	r3, sp, #12
 8014760:	4805      	ldr	r0, [pc, #20]	@ (8014778 <fiprintf+0x20>)
 8014762:	f853 2b04 	ldr.w	r2, [r3], #4
 8014766:	6800      	ldr	r0, [r0, #0]
 8014768:	9301      	str	r3, [sp, #4]
 801476a:	f000 f893 	bl	8014894 <_vfiprintf_r>
 801476e:	b002      	add	sp, #8
 8014770:	f85d eb04 	ldr.w	lr, [sp], #4
 8014774:	b003      	add	sp, #12
 8014776:	4770      	bx	lr
 8014778:	200003d4 	.word	0x200003d4

0801477c <memmove>:
 801477c:	4288      	cmp	r0, r1
 801477e:	b510      	push	{r4, lr}
 8014780:	eb01 0402 	add.w	r4, r1, r2
 8014784:	d902      	bls.n	801478c <memmove+0x10>
 8014786:	4284      	cmp	r4, r0
 8014788:	4623      	mov	r3, r4
 801478a:	d807      	bhi.n	801479c <memmove+0x20>
 801478c:	1e43      	subs	r3, r0, #1
 801478e:	42a1      	cmp	r1, r4
 8014790:	d008      	beq.n	80147a4 <memmove+0x28>
 8014792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014796:	f803 2f01 	strb.w	r2, [r3, #1]!
 801479a:	e7f8      	b.n	801478e <memmove+0x12>
 801479c:	4402      	add	r2, r0
 801479e:	4601      	mov	r1, r0
 80147a0:	428a      	cmp	r2, r1
 80147a2:	d100      	bne.n	80147a6 <memmove+0x2a>
 80147a4:	bd10      	pop	{r4, pc}
 80147a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147ae:	e7f7      	b.n	80147a0 <memmove+0x24>

080147b0 <abort>:
 80147b0:	b508      	push	{r3, lr}
 80147b2:	2006      	movs	r0, #6
 80147b4:	f000 fa42 	bl	8014c3c <raise>
 80147b8:	2001      	movs	r0, #1
 80147ba:	f7ef f84f 	bl	800385c <_exit>

080147be <_calloc_r>:
 80147be:	b570      	push	{r4, r5, r6, lr}
 80147c0:	fba1 5402 	umull	r5, r4, r1, r2
 80147c4:	b93c      	cbnz	r4, 80147d6 <_calloc_r+0x18>
 80147c6:	4629      	mov	r1, r5
 80147c8:	f7fc f8e6 	bl	8010998 <_malloc_r>
 80147cc:	4606      	mov	r6, r0
 80147ce:	b928      	cbnz	r0, 80147dc <_calloc_r+0x1e>
 80147d0:	2600      	movs	r6, #0
 80147d2:	4630      	mov	r0, r6
 80147d4:	bd70      	pop	{r4, r5, r6, pc}
 80147d6:	220c      	movs	r2, #12
 80147d8:	6002      	str	r2, [r0, #0]
 80147da:	e7f9      	b.n	80147d0 <_calloc_r+0x12>
 80147dc:	462a      	mov	r2, r5
 80147de:	4621      	mov	r1, r4
 80147e0:	f7fd fd77 	bl	80122d2 <memset>
 80147e4:	e7f5      	b.n	80147d2 <_calloc_r+0x14>

080147e6 <_realloc_r>:
 80147e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ea:	4680      	mov	r8, r0
 80147ec:	4615      	mov	r5, r2
 80147ee:	460c      	mov	r4, r1
 80147f0:	b921      	cbnz	r1, 80147fc <_realloc_r+0x16>
 80147f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147f6:	4611      	mov	r1, r2
 80147f8:	f7fc b8ce 	b.w	8010998 <_malloc_r>
 80147fc:	b92a      	cbnz	r2, 801480a <_realloc_r+0x24>
 80147fe:	f7fe fd53 	bl	80132a8 <_free_r>
 8014802:	2400      	movs	r4, #0
 8014804:	4620      	mov	r0, r4
 8014806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801480a:	f000 fa33 	bl	8014c74 <_malloc_usable_size_r>
 801480e:	4285      	cmp	r5, r0
 8014810:	4606      	mov	r6, r0
 8014812:	d802      	bhi.n	801481a <_realloc_r+0x34>
 8014814:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014818:	d8f4      	bhi.n	8014804 <_realloc_r+0x1e>
 801481a:	4629      	mov	r1, r5
 801481c:	4640      	mov	r0, r8
 801481e:	f7fc f8bb 	bl	8010998 <_malloc_r>
 8014822:	4607      	mov	r7, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	d0ec      	beq.n	8014802 <_realloc_r+0x1c>
 8014828:	42b5      	cmp	r5, r6
 801482a:	462a      	mov	r2, r5
 801482c:	4621      	mov	r1, r4
 801482e:	bf28      	it	cs
 8014830:	4632      	movcs	r2, r6
 8014832:	f7fd feb6 	bl	80125a2 <memcpy>
 8014836:	4621      	mov	r1, r4
 8014838:	4640      	mov	r0, r8
 801483a:	f7fe fd35 	bl	80132a8 <_free_r>
 801483e:	463c      	mov	r4, r7
 8014840:	e7e0      	b.n	8014804 <_realloc_r+0x1e>

08014842 <__sfputc_r>:
 8014842:	6893      	ldr	r3, [r2, #8]
 8014844:	3b01      	subs	r3, #1
 8014846:	2b00      	cmp	r3, #0
 8014848:	b410      	push	{r4}
 801484a:	6093      	str	r3, [r2, #8]
 801484c:	da08      	bge.n	8014860 <__sfputc_r+0x1e>
 801484e:	6994      	ldr	r4, [r2, #24]
 8014850:	42a3      	cmp	r3, r4
 8014852:	db01      	blt.n	8014858 <__sfputc_r+0x16>
 8014854:	290a      	cmp	r1, #10
 8014856:	d103      	bne.n	8014860 <__sfputc_r+0x1e>
 8014858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801485c:	f000 b932 	b.w	8014ac4 <__swbuf_r>
 8014860:	6813      	ldr	r3, [r2, #0]
 8014862:	1c58      	adds	r0, r3, #1
 8014864:	6010      	str	r0, [r2, #0]
 8014866:	7019      	strb	r1, [r3, #0]
 8014868:	4608      	mov	r0, r1
 801486a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801486e:	4770      	bx	lr

08014870 <__sfputs_r>:
 8014870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014872:	4606      	mov	r6, r0
 8014874:	460f      	mov	r7, r1
 8014876:	4614      	mov	r4, r2
 8014878:	18d5      	adds	r5, r2, r3
 801487a:	42ac      	cmp	r4, r5
 801487c:	d101      	bne.n	8014882 <__sfputs_r+0x12>
 801487e:	2000      	movs	r0, #0
 8014880:	e007      	b.n	8014892 <__sfputs_r+0x22>
 8014882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014886:	463a      	mov	r2, r7
 8014888:	4630      	mov	r0, r6
 801488a:	f7ff ffda 	bl	8014842 <__sfputc_r>
 801488e:	1c43      	adds	r3, r0, #1
 8014890:	d1f3      	bne.n	801487a <__sfputs_r+0xa>
 8014892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014894 <_vfiprintf_r>:
 8014894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014898:	460d      	mov	r5, r1
 801489a:	b09d      	sub	sp, #116	@ 0x74
 801489c:	4614      	mov	r4, r2
 801489e:	4698      	mov	r8, r3
 80148a0:	4606      	mov	r6, r0
 80148a2:	b118      	cbz	r0, 80148ac <_vfiprintf_r+0x18>
 80148a4:	6a03      	ldr	r3, [r0, #32]
 80148a6:	b90b      	cbnz	r3, 80148ac <_vfiprintf_r+0x18>
 80148a8:	f7fd fc7a 	bl	80121a0 <__sinit>
 80148ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148ae:	07d9      	lsls	r1, r3, #31
 80148b0:	d405      	bmi.n	80148be <_vfiprintf_r+0x2a>
 80148b2:	89ab      	ldrh	r3, [r5, #12]
 80148b4:	059a      	lsls	r2, r3, #22
 80148b6:	d402      	bmi.n	80148be <_vfiprintf_r+0x2a>
 80148b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ba:	f7fd fe68 	bl	801258e <__retarget_lock_acquire_recursive>
 80148be:	89ab      	ldrh	r3, [r5, #12]
 80148c0:	071b      	lsls	r3, r3, #28
 80148c2:	d501      	bpl.n	80148c8 <_vfiprintf_r+0x34>
 80148c4:	692b      	ldr	r3, [r5, #16]
 80148c6:	b99b      	cbnz	r3, 80148f0 <_vfiprintf_r+0x5c>
 80148c8:	4629      	mov	r1, r5
 80148ca:	4630      	mov	r0, r6
 80148cc:	f000 f938 	bl	8014b40 <__swsetup_r>
 80148d0:	b170      	cbz	r0, 80148f0 <_vfiprintf_r+0x5c>
 80148d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148d4:	07dc      	lsls	r4, r3, #31
 80148d6:	d504      	bpl.n	80148e2 <_vfiprintf_r+0x4e>
 80148d8:	f04f 30ff 	mov.w	r0, #4294967295
 80148dc:	b01d      	add	sp, #116	@ 0x74
 80148de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e2:	89ab      	ldrh	r3, [r5, #12]
 80148e4:	0598      	lsls	r0, r3, #22
 80148e6:	d4f7      	bmi.n	80148d8 <_vfiprintf_r+0x44>
 80148e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ea:	f7fd fe51 	bl	8012590 <__retarget_lock_release_recursive>
 80148ee:	e7f3      	b.n	80148d8 <_vfiprintf_r+0x44>
 80148f0:	2300      	movs	r3, #0
 80148f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80148f4:	2320      	movs	r3, #32
 80148f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80148fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80148fe:	2330      	movs	r3, #48	@ 0x30
 8014900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ab0 <_vfiprintf_r+0x21c>
 8014904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014908:	f04f 0901 	mov.w	r9, #1
 801490c:	4623      	mov	r3, r4
 801490e:	469a      	mov	sl, r3
 8014910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014914:	b10a      	cbz	r2, 801491a <_vfiprintf_r+0x86>
 8014916:	2a25      	cmp	r2, #37	@ 0x25
 8014918:	d1f9      	bne.n	801490e <_vfiprintf_r+0x7a>
 801491a:	ebba 0b04 	subs.w	fp, sl, r4
 801491e:	d00b      	beq.n	8014938 <_vfiprintf_r+0xa4>
 8014920:	465b      	mov	r3, fp
 8014922:	4622      	mov	r2, r4
 8014924:	4629      	mov	r1, r5
 8014926:	4630      	mov	r0, r6
 8014928:	f7ff ffa2 	bl	8014870 <__sfputs_r>
 801492c:	3001      	adds	r0, #1
 801492e:	f000 80a7 	beq.w	8014a80 <_vfiprintf_r+0x1ec>
 8014932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014934:	445a      	add	r2, fp
 8014936:	9209      	str	r2, [sp, #36]	@ 0x24
 8014938:	f89a 3000 	ldrb.w	r3, [sl]
 801493c:	2b00      	cmp	r3, #0
 801493e:	f000 809f 	beq.w	8014a80 <_vfiprintf_r+0x1ec>
 8014942:	2300      	movs	r3, #0
 8014944:	f04f 32ff 	mov.w	r2, #4294967295
 8014948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801494c:	f10a 0a01 	add.w	sl, sl, #1
 8014950:	9304      	str	r3, [sp, #16]
 8014952:	9307      	str	r3, [sp, #28]
 8014954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014958:	931a      	str	r3, [sp, #104]	@ 0x68
 801495a:	4654      	mov	r4, sl
 801495c:	2205      	movs	r2, #5
 801495e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014962:	4853      	ldr	r0, [pc, #332]	@ (8014ab0 <_vfiprintf_r+0x21c>)
 8014964:	f7eb fc34 	bl	80001d0 <memchr>
 8014968:	9a04      	ldr	r2, [sp, #16]
 801496a:	b9d8      	cbnz	r0, 80149a4 <_vfiprintf_r+0x110>
 801496c:	06d1      	lsls	r1, r2, #27
 801496e:	bf44      	itt	mi
 8014970:	2320      	movmi	r3, #32
 8014972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014976:	0713      	lsls	r3, r2, #28
 8014978:	bf44      	itt	mi
 801497a:	232b      	movmi	r3, #43	@ 0x2b
 801497c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014980:	f89a 3000 	ldrb.w	r3, [sl]
 8014984:	2b2a      	cmp	r3, #42	@ 0x2a
 8014986:	d015      	beq.n	80149b4 <_vfiprintf_r+0x120>
 8014988:	9a07      	ldr	r2, [sp, #28]
 801498a:	4654      	mov	r4, sl
 801498c:	2000      	movs	r0, #0
 801498e:	f04f 0c0a 	mov.w	ip, #10
 8014992:	4621      	mov	r1, r4
 8014994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014998:	3b30      	subs	r3, #48	@ 0x30
 801499a:	2b09      	cmp	r3, #9
 801499c:	d94b      	bls.n	8014a36 <_vfiprintf_r+0x1a2>
 801499e:	b1b0      	cbz	r0, 80149ce <_vfiprintf_r+0x13a>
 80149a0:	9207      	str	r2, [sp, #28]
 80149a2:	e014      	b.n	80149ce <_vfiprintf_r+0x13a>
 80149a4:	eba0 0308 	sub.w	r3, r0, r8
 80149a8:	fa09 f303 	lsl.w	r3, r9, r3
 80149ac:	4313      	orrs	r3, r2
 80149ae:	9304      	str	r3, [sp, #16]
 80149b0:	46a2      	mov	sl, r4
 80149b2:	e7d2      	b.n	801495a <_vfiprintf_r+0xc6>
 80149b4:	9b03      	ldr	r3, [sp, #12]
 80149b6:	1d19      	adds	r1, r3, #4
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	9103      	str	r1, [sp, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	bfbb      	ittet	lt
 80149c0:	425b      	neglt	r3, r3
 80149c2:	f042 0202 	orrlt.w	r2, r2, #2
 80149c6:	9307      	strge	r3, [sp, #28]
 80149c8:	9307      	strlt	r3, [sp, #28]
 80149ca:	bfb8      	it	lt
 80149cc:	9204      	strlt	r2, [sp, #16]
 80149ce:	7823      	ldrb	r3, [r4, #0]
 80149d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80149d2:	d10a      	bne.n	80149ea <_vfiprintf_r+0x156>
 80149d4:	7863      	ldrb	r3, [r4, #1]
 80149d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80149d8:	d132      	bne.n	8014a40 <_vfiprintf_r+0x1ac>
 80149da:	9b03      	ldr	r3, [sp, #12]
 80149dc:	1d1a      	adds	r2, r3, #4
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	9203      	str	r2, [sp, #12]
 80149e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149e6:	3402      	adds	r4, #2
 80149e8:	9305      	str	r3, [sp, #20]
 80149ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ac0 <_vfiprintf_r+0x22c>
 80149ee:	7821      	ldrb	r1, [r4, #0]
 80149f0:	2203      	movs	r2, #3
 80149f2:	4650      	mov	r0, sl
 80149f4:	f7eb fbec 	bl	80001d0 <memchr>
 80149f8:	b138      	cbz	r0, 8014a0a <_vfiprintf_r+0x176>
 80149fa:	9b04      	ldr	r3, [sp, #16]
 80149fc:	eba0 000a 	sub.w	r0, r0, sl
 8014a00:	2240      	movs	r2, #64	@ 0x40
 8014a02:	4082      	lsls	r2, r0
 8014a04:	4313      	orrs	r3, r2
 8014a06:	3401      	adds	r4, #1
 8014a08:	9304      	str	r3, [sp, #16]
 8014a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a0e:	4829      	ldr	r0, [pc, #164]	@ (8014ab4 <_vfiprintf_r+0x220>)
 8014a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a14:	2206      	movs	r2, #6
 8014a16:	f7eb fbdb 	bl	80001d0 <memchr>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	d03f      	beq.n	8014a9e <_vfiprintf_r+0x20a>
 8014a1e:	4b26      	ldr	r3, [pc, #152]	@ (8014ab8 <_vfiprintf_r+0x224>)
 8014a20:	bb1b      	cbnz	r3, 8014a6a <_vfiprintf_r+0x1d6>
 8014a22:	9b03      	ldr	r3, [sp, #12]
 8014a24:	3307      	adds	r3, #7
 8014a26:	f023 0307 	bic.w	r3, r3, #7
 8014a2a:	3308      	adds	r3, #8
 8014a2c:	9303      	str	r3, [sp, #12]
 8014a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a30:	443b      	add	r3, r7
 8014a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a34:	e76a      	b.n	801490c <_vfiprintf_r+0x78>
 8014a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a3a:	460c      	mov	r4, r1
 8014a3c:	2001      	movs	r0, #1
 8014a3e:	e7a8      	b.n	8014992 <_vfiprintf_r+0xfe>
 8014a40:	2300      	movs	r3, #0
 8014a42:	3401      	adds	r4, #1
 8014a44:	9305      	str	r3, [sp, #20]
 8014a46:	4619      	mov	r1, r3
 8014a48:	f04f 0c0a 	mov.w	ip, #10
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a52:	3a30      	subs	r2, #48	@ 0x30
 8014a54:	2a09      	cmp	r2, #9
 8014a56:	d903      	bls.n	8014a60 <_vfiprintf_r+0x1cc>
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d0c6      	beq.n	80149ea <_vfiprintf_r+0x156>
 8014a5c:	9105      	str	r1, [sp, #20]
 8014a5e:	e7c4      	b.n	80149ea <_vfiprintf_r+0x156>
 8014a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a64:	4604      	mov	r4, r0
 8014a66:	2301      	movs	r3, #1
 8014a68:	e7f0      	b.n	8014a4c <_vfiprintf_r+0x1b8>
 8014a6a:	ab03      	add	r3, sp, #12
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	462a      	mov	r2, r5
 8014a70:	4b12      	ldr	r3, [pc, #72]	@ (8014abc <_vfiprintf_r+0x228>)
 8014a72:	a904      	add	r1, sp, #16
 8014a74:	4630      	mov	r0, r6
 8014a76:	f7fc ff4f 	bl	8011918 <_printf_float>
 8014a7a:	4607      	mov	r7, r0
 8014a7c:	1c78      	adds	r0, r7, #1
 8014a7e:	d1d6      	bne.n	8014a2e <_vfiprintf_r+0x19a>
 8014a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a82:	07d9      	lsls	r1, r3, #31
 8014a84:	d405      	bmi.n	8014a92 <_vfiprintf_r+0x1fe>
 8014a86:	89ab      	ldrh	r3, [r5, #12]
 8014a88:	059a      	lsls	r2, r3, #22
 8014a8a:	d402      	bmi.n	8014a92 <_vfiprintf_r+0x1fe>
 8014a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a8e:	f7fd fd7f 	bl	8012590 <__retarget_lock_release_recursive>
 8014a92:	89ab      	ldrh	r3, [r5, #12]
 8014a94:	065b      	lsls	r3, r3, #25
 8014a96:	f53f af1f 	bmi.w	80148d8 <_vfiprintf_r+0x44>
 8014a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a9c:	e71e      	b.n	80148dc <_vfiprintf_r+0x48>
 8014a9e:	ab03      	add	r3, sp, #12
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	462a      	mov	r2, r5
 8014aa4:	4b05      	ldr	r3, [pc, #20]	@ (8014abc <_vfiprintf_r+0x228>)
 8014aa6:	a904      	add	r1, sp, #16
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f7fd f9cd 	bl	8011e48 <_printf_i>
 8014aae:	e7e4      	b.n	8014a7a <_vfiprintf_r+0x1e6>
 8014ab0:	08015c30 	.word	0x08015c30
 8014ab4:	08015c3a 	.word	0x08015c3a
 8014ab8:	08011919 	.word	0x08011919
 8014abc:	08014871 	.word	0x08014871
 8014ac0:	08015c36 	.word	0x08015c36

08014ac4 <__swbuf_r>:
 8014ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac6:	460e      	mov	r6, r1
 8014ac8:	4614      	mov	r4, r2
 8014aca:	4605      	mov	r5, r0
 8014acc:	b118      	cbz	r0, 8014ad6 <__swbuf_r+0x12>
 8014ace:	6a03      	ldr	r3, [r0, #32]
 8014ad0:	b90b      	cbnz	r3, 8014ad6 <__swbuf_r+0x12>
 8014ad2:	f7fd fb65 	bl	80121a0 <__sinit>
 8014ad6:	69a3      	ldr	r3, [r4, #24]
 8014ad8:	60a3      	str	r3, [r4, #8]
 8014ada:	89a3      	ldrh	r3, [r4, #12]
 8014adc:	071a      	lsls	r2, r3, #28
 8014ade:	d501      	bpl.n	8014ae4 <__swbuf_r+0x20>
 8014ae0:	6923      	ldr	r3, [r4, #16]
 8014ae2:	b943      	cbnz	r3, 8014af6 <__swbuf_r+0x32>
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	f000 f82a 	bl	8014b40 <__swsetup_r>
 8014aec:	b118      	cbz	r0, 8014af6 <__swbuf_r+0x32>
 8014aee:	f04f 37ff 	mov.w	r7, #4294967295
 8014af2:	4638      	mov	r0, r7
 8014af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	6922      	ldr	r2, [r4, #16]
 8014afa:	1a98      	subs	r0, r3, r2
 8014afc:	6963      	ldr	r3, [r4, #20]
 8014afe:	b2f6      	uxtb	r6, r6
 8014b00:	4283      	cmp	r3, r0
 8014b02:	4637      	mov	r7, r6
 8014b04:	dc05      	bgt.n	8014b12 <__swbuf_r+0x4e>
 8014b06:	4621      	mov	r1, r4
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f7ff fdfd 	bl	8014708 <_fflush_r>
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	d1ed      	bne.n	8014aee <__swbuf_r+0x2a>
 8014b12:	68a3      	ldr	r3, [r4, #8]
 8014b14:	3b01      	subs	r3, #1
 8014b16:	60a3      	str	r3, [r4, #8]
 8014b18:	6823      	ldr	r3, [r4, #0]
 8014b1a:	1c5a      	adds	r2, r3, #1
 8014b1c:	6022      	str	r2, [r4, #0]
 8014b1e:	701e      	strb	r6, [r3, #0]
 8014b20:	6962      	ldr	r2, [r4, #20]
 8014b22:	1c43      	adds	r3, r0, #1
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d004      	beq.n	8014b32 <__swbuf_r+0x6e>
 8014b28:	89a3      	ldrh	r3, [r4, #12]
 8014b2a:	07db      	lsls	r3, r3, #31
 8014b2c:	d5e1      	bpl.n	8014af2 <__swbuf_r+0x2e>
 8014b2e:	2e0a      	cmp	r6, #10
 8014b30:	d1df      	bne.n	8014af2 <__swbuf_r+0x2e>
 8014b32:	4621      	mov	r1, r4
 8014b34:	4628      	mov	r0, r5
 8014b36:	f7ff fde7 	bl	8014708 <_fflush_r>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d0d9      	beq.n	8014af2 <__swbuf_r+0x2e>
 8014b3e:	e7d6      	b.n	8014aee <__swbuf_r+0x2a>

08014b40 <__swsetup_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4b29      	ldr	r3, [pc, #164]	@ (8014be8 <__swsetup_r+0xa8>)
 8014b44:	4605      	mov	r5, r0
 8014b46:	6818      	ldr	r0, [r3, #0]
 8014b48:	460c      	mov	r4, r1
 8014b4a:	b118      	cbz	r0, 8014b54 <__swsetup_r+0x14>
 8014b4c:	6a03      	ldr	r3, [r0, #32]
 8014b4e:	b90b      	cbnz	r3, 8014b54 <__swsetup_r+0x14>
 8014b50:	f7fd fb26 	bl	80121a0 <__sinit>
 8014b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b58:	0719      	lsls	r1, r3, #28
 8014b5a:	d422      	bmi.n	8014ba2 <__swsetup_r+0x62>
 8014b5c:	06da      	lsls	r2, r3, #27
 8014b5e:	d407      	bmi.n	8014b70 <__swsetup_r+0x30>
 8014b60:	2209      	movs	r2, #9
 8014b62:	602a      	str	r2, [r5, #0]
 8014b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b68:	81a3      	strh	r3, [r4, #12]
 8014b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b6e:	e033      	b.n	8014bd8 <__swsetup_r+0x98>
 8014b70:	0758      	lsls	r0, r3, #29
 8014b72:	d512      	bpl.n	8014b9a <__swsetup_r+0x5a>
 8014b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b76:	b141      	cbz	r1, 8014b8a <__swsetup_r+0x4a>
 8014b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b7c:	4299      	cmp	r1, r3
 8014b7e:	d002      	beq.n	8014b86 <__swsetup_r+0x46>
 8014b80:	4628      	mov	r0, r5
 8014b82:	f7fe fb91 	bl	80132a8 <_free_r>
 8014b86:	2300      	movs	r3, #0
 8014b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b8a:	89a3      	ldrh	r3, [r4, #12]
 8014b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b90:	81a3      	strh	r3, [r4, #12]
 8014b92:	2300      	movs	r3, #0
 8014b94:	6063      	str	r3, [r4, #4]
 8014b96:	6923      	ldr	r3, [r4, #16]
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	89a3      	ldrh	r3, [r4, #12]
 8014b9c:	f043 0308 	orr.w	r3, r3, #8
 8014ba0:	81a3      	strh	r3, [r4, #12]
 8014ba2:	6923      	ldr	r3, [r4, #16]
 8014ba4:	b94b      	cbnz	r3, 8014bba <__swsetup_r+0x7a>
 8014ba6:	89a3      	ldrh	r3, [r4, #12]
 8014ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bb0:	d003      	beq.n	8014bba <__swsetup_r+0x7a>
 8014bb2:	4621      	mov	r1, r4
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	f000 f88b 	bl	8014cd0 <__smakebuf_r>
 8014bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bbe:	f013 0201 	ands.w	r2, r3, #1
 8014bc2:	d00a      	beq.n	8014bda <__swsetup_r+0x9a>
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	60a2      	str	r2, [r4, #8]
 8014bc8:	6962      	ldr	r2, [r4, #20]
 8014bca:	4252      	negs	r2, r2
 8014bcc:	61a2      	str	r2, [r4, #24]
 8014bce:	6922      	ldr	r2, [r4, #16]
 8014bd0:	b942      	cbnz	r2, 8014be4 <__swsetup_r+0xa4>
 8014bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014bd6:	d1c5      	bne.n	8014b64 <__swsetup_r+0x24>
 8014bd8:	bd38      	pop	{r3, r4, r5, pc}
 8014bda:	0799      	lsls	r1, r3, #30
 8014bdc:	bf58      	it	pl
 8014bde:	6962      	ldrpl	r2, [r4, #20]
 8014be0:	60a2      	str	r2, [r4, #8]
 8014be2:	e7f4      	b.n	8014bce <__swsetup_r+0x8e>
 8014be4:	2000      	movs	r0, #0
 8014be6:	e7f7      	b.n	8014bd8 <__swsetup_r+0x98>
 8014be8:	200003d4 	.word	0x200003d4

08014bec <_raise_r>:
 8014bec:	291f      	cmp	r1, #31
 8014bee:	b538      	push	{r3, r4, r5, lr}
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	d904      	bls.n	8014c00 <_raise_r+0x14>
 8014bf6:	2316      	movs	r3, #22
 8014bf8:	6003      	str	r3, [r0, #0]
 8014bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfe:	bd38      	pop	{r3, r4, r5, pc}
 8014c00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014c02:	b112      	cbz	r2, 8014c0a <_raise_r+0x1e>
 8014c04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c08:	b94b      	cbnz	r3, 8014c1e <_raise_r+0x32>
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	f000 f830 	bl	8014c70 <_getpid_r>
 8014c10:	4622      	mov	r2, r4
 8014c12:	4601      	mov	r1, r0
 8014c14:	4628      	mov	r0, r5
 8014c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c1a:	f000 b817 	b.w	8014c4c <_kill_r>
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d00a      	beq.n	8014c38 <_raise_r+0x4c>
 8014c22:	1c59      	adds	r1, r3, #1
 8014c24:	d103      	bne.n	8014c2e <_raise_r+0x42>
 8014c26:	2316      	movs	r3, #22
 8014c28:	6003      	str	r3, [r0, #0]
 8014c2a:	2001      	movs	r0, #1
 8014c2c:	e7e7      	b.n	8014bfe <_raise_r+0x12>
 8014c2e:	2100      	movs	r1, #0
 8014c30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014c34:	4620      	mov	r0, r4
 8014c36:	4798      	blx	r3
 8014c38:	2000      	movs	r0, #0
 8014c3a:	e7e0      	b.n	8014bfe <_raise_r+0x12>

08014c3c <raise>:
 8014c3c:	4b02      	ldr	r3, [pc, #8]	@ (8014c48 <raise+0xc>)
 8014c3e:	4601      	mov	r1, r0
 8014c40:	6818      	ldr	r0, [r3, #0]
 8014c42:	f7ff bfd3 	b.w	8014bec <_raise_r>
 8014c46:	bf00      	nop
 8014c48:	200003d4 	.word	0x200003d4

08014c4c <_kill_r>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4d07      	ldr	r5, [pc, #28]	@ (8014c6c <_kill_r+0x20>)
 8014c50:	2300      	movs	r3, #0
 8014c52:	4604      	mov	r4, r0
 8014c54:	4608      	mov	r0, r1
 8014c56:	4611      	mov	r1, r2
 8014c58:	602b      	str	r3, [r5, #0]
 8014c5a:	f7ee fdef 	bl	800383c <_kill>
 8014c5e:	1c43      	adds	r3, r0, #1
 8014c60:	d102      	bne.n	8014c68 <_kill_r+0x1c>
 8014c62:	682b      	ldr	r3, [r5, #0]
 8014c64:	b103      	cbz	r3, 8014c68 <_kill_r+0x1c>
 8014c66:	6023      	str	r3, [r4, #0]
 8014c68:	bd38      	pop	{r3, r4, r5, pc}
 8014c6a:	bf00      	nop
 8014c6c:	20005a0c 	.word	0x20005a0c

08014c70 <_getpid_r>:
 8014c70:	f7ee bddc 	b.w	800382c <_getpid>

08014c74 <_malloc_usable_size_r>:
 8014c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c78:	1f18      	subs	r0, r3, #4
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	bfbc      	itt	lt
 8014c7e:	580b      	ldrlt	r3, [r1, r0]
 8014c80:	18c0      	addlt	r0, r0, r3
 8014c82:	4770      	bx	lr

08014c84 <__swhatbuf_r>:
 8014c84:	b570      	push	{r4, r5, r6, lr}
 8014c86:	460c      	mov	r4, r1
 8014c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c8c:	2900      	cmp	r1, #0
 8014c8e:	b096      	sub	sp, #88	@ 0x58
 8014c90:	4615      	mov	r5, r2
 8014c92:	461e      	mov	r6, r3
 8014c94:	da0d      	bge.n	8014cb2 <__swhatbuf_r+0x2e>
 8014c96:	89a3      	ldrh	r3, [r4, #12]
 8014c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014c9c:	f04f 0100 	mov.w	r1, #0
 8014ca0:	bf14      	ite	ne
 8014ca2:	2340      	movne	r3, #64	@ 0x40
 8014ca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014ca8:	2000      	movs	r0, #0
 8014caa:	6031      	str	r1, [r6, #0]
 8014cac:	602b      	str	r3, [r5, #0]
 8014cae:	b016      	add	sp, #88	@ 0x58
 8014cb0:	bd70      	pop	{r4, r5, r6, pc}
 8014cb2:	466a      	mov	r2, sp
 8014cb4:	f000 f848 	bl	8014d48 <_fstat_r>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	dbec      	blt.n	8014c96 <__swhatbuf_r+0x12>
 8014cbc:	9901      	ldr	r1, [sp, #4]
 8014cbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014cc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014cc6:	4259      	negs	r1, r3
 8014cc8:	4159      	adcs	r1, r3
 8014cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014cce:	e7eb      	b.n	8014ca8 <__swhatbuf_r+0x24>

08014cd0 <__smakebuf_r>:
 8014cd0:	898b      	ldrh	r3, [r1, #12]
 8014cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cd4:	079d      	lsls	r5, r3, #30
 8014cd6:	4606      	mov	r6, r0
 8014cd8:	460c      	mov	r4, r1
 8014cda:	d507      	bpl.n	8014cec <__smakebuf_r+0x1c>
 8014cdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ce0:	6023      	str	r3, [r4, #0]
 8014ce2:	6123      	str	r3, [r4, #16]
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	6163      	str	r3, [r4, #20]
 8014ce8:	b003      	add	sp, #12
 8014cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cec:	ab01      	add	r3, sp, #4
 8014cee:	466a      	mov	r2, sp
 8014cf0:	f7ff ffc8 	bl	8014c84 <__swhatbuf_r>
 8014cf4:	9f00      	ldr	r7, [sp, #0]
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	4639      	mov	r1, r7
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7fb fe4c 	bl	8010998 <_malloc_r>
 8014d00:	b948      	cbnz	r0, 8014d16 <__smakebuf_r+0x46>
 8014d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d06:	059a      	lsls	r2, r3, #22
 8014d08:	d4ee      	bmi.n	8014ce8 <__smakebuf_r+0x18>
 8014d0a:	f023 0303 	bic.w	r3, r3, #3
 8014d0e:	f043 0302 	orr.w	r3, r3, #2
 8014d12:	81a3      	strh	r3, [r4, #12]
 8014d14:	e7e2      	b.n	8014cdc <__smakebuf_r+0xc>
 8014d16:	89a3      	ldrh	r3, [r4, #12]
 8014d18:	6020      	str	r0, [r4, #0]
 8014d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d1e:	81a3      	strh	r3, [r4, #12]
 8014d20:	9b01      	ldr	r3, [sp, #4]
 8014d22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d26:	b15b      	cbz	r3, 8014d40 <__smakebuf_r+0x70>
 8014d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f000 f81d 	bl	8014d6c <_isatty_r>
 8014d32:	b128      	cbz	r0, 8014d40 <__smakebuf_r+0x70>
 8014d34:	89a3      	ldrh	r3, [r4, #12]
 8014d36:	f023 0303 	bic.w	r3, r3, #3
 8014d3a:	f043 0301 	orr.w	r3, r3, #1
 8014d3e:	81a3      	strh	r3, [r4, #12]
 8014d40:	89a3      	ldrh	r3, [r4, #12]
 8014d42:	431d      	orrs	r5, r3
 8014d44:	81a5      	strh	r5, [r4, #12]
 8014d46:	e7cf      	b.n	8014ce8 <__smakebuf_r+0x18>

08014d48 <_fstat_r>:
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	4d07      	ldr	r5, [pc, #28]	@ (8014d68 <_fstat_r+0x20>)
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	4604      	mov	r4, r0
 8014d50:	4608      	mov	r0, r1
 8014d52:	4611      	mov	r1, r2
 8014d54:	602b      	str	r3, [r5, #0]
 8014d56:	f7ee fdd1 	bl	80038fc <_fstat>
 8014d5a:	1c43      	adds	r3, r0, #1
 8014d5c:	d102      	bne.n	8014d64 <_fstat_r+0x1c>
 8014d5e:	682b      	ldr	r3, [r5, #0]
 8014d60:	b103      	cbz	r3, 8014d64 <_fstat_r+0x1c>
 8014d62:	6023      	str	r3, [r4, #0]
 8014d64:	bd38      	pop	{r3, r4, r5, pc}
 8014d66:	bf00      	nop
 8014d68:	20005a0c 	.word	0x20005a0c

08014d6c <_isatty_r>:
 8014d6c:	b538      	push	{r3, r4, r5, lr}
 8014d6e:	4d06      	ldr	r5, [pc, #24]	@ (8014d88 <_isatty_r+0x1c>)
 8014d70:	2300      	movs	r3, #0
 8014d72:	4604      	mov	r4, r0
 8014d74:	4608      	mov	r0, r1
 8014d76:	602b      	str	r3, [r5, #0]
 8014d78:	f7ee fdd0 	bl	800391c <_isatty>
 8014d7c:	1c43      	adds	r3, r0, #1
 8014d7e:	d102      	bne.n	8014d86 <_isatty_r+0x1a>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	b103      	cbz	r3, 8014d86 <_isatty_r+0x1a>
 8014d84:	6023      	str	r3, [r4, #0]
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	20005a0c 	.word	0x20005a0c

08014d8c <_init>:
 8014d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d8e:	bf00      	nop
 8014d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d92:	bc08      	pop	{r3}
 8014d94:	469e      	mov	lr, r3
 8014d96:	4770      	bx	lr

08014d98 <_fini>:
 8014d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d9a:	bf00      	nop
 8014d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d9e:	bc08      	pop	{r3}
 8014da0:	469e      	mov	lr, r3
 8014da2:	4770      	bx	lr
