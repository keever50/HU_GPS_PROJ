
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  08014ed0  08014ed0  00015ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d8c  08015d8c  00017424  2**0
                  CONTENTS
  4 .ARM          00000008  08015d8c  08015d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d94  08015d94  00017424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d94  08015d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d98  08015d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08015d9c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005674  20000428  080161c0  00017428  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005a9c  080161c0  00017a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ec93  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007771  00000000  00000000  000460e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025f8  00000000  00000000  0004d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d47  00000000  00000000  0004fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002caa2  00000000  00000000  00051b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f19  00000000  00000000  0007e639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4a31  00000000  00000000  000b4552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198f83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b34c  00000000  00000000  00198fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a4314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014eb4 	.word	0x08014eb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	08014eb4 	.word	0x08014eb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <toggle_led+0x30>)
 8000f54:	f003 f971 	bl	800423a <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f00b f8cf 	bl	800c0fc <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <toggle_led+0x30>)
 8000f66:	f003 f968 	bl	800423a <HAL_GPIO_TogglePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <ARM_keys_IRQ+0x58>)
 8000f82:	f001 fe23 	bl	8002bcc <UART_puts>
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <ARM_keys_IRQ+0x5c>)
 8000f88:	f001 fe20 	bl	8002bcc <UART_puts>
 8000f8c:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <ARM_keys_IRQ+0x60>)
 8000f8e:	f001 fe1d 	bl	8002bcc <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <ARM_keys_IRQ+0x64>)
 8000f94:	f00d f9c4 	bl	800e320 <xTaskGetHandle>
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <ARM_keys_IRQ+0x68>)
 8000fa2:	f000 fb2f 	bl	8001604 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <ARM_keys_IRQ+0x6c>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fb8:	f00b fa3a 	bl	800c430 <xEventGroupWaitBits>
 8000fbc:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f00e f8db 	bl	800f180 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fca:	bf00      	nop
 8000fcc:	e7eb      	b.n	8000fa6 <ARM_keys_IRQ+0x2e>
 8000fce:	bf00      	nop
 8000fd0:	08014ed0 	.word	0x08014ed0
 8000fd4:	08015858 	.word	0x08015858
 8000fd8:	08014ed4 	.word	0x08014ed4
 8000fdc:	08014ee0 	.word	0x08014ee0
 8000fe0:	08014ef0 	.word	0x08014ef0
 8000fe4:	20000454 	.word	0x20000454

08000fe8 <waypointcreate>:
	}
}

void waypointcreate()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    BUZZER_put (500);
 8000fec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff0:	f001 fa90 	bl	8002514 <BUZZER_put>
	osDelay(500);
 8000ff4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff8:	f00b f880 	bl	800c0fc <osDelay>
	UART_puts("\nFunctie functioneert\n");
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <waypointcreate+0x20>)
 8000ffe:	f001 fde5 	bl	8002bcc <UART_puts>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08014f00 	.word	0x08014f00

0800100c <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	2000      	movs	r0, #0
 8001022:	f00e f84d 	bl	800f0c0 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 8001026:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <ARM_keys_task+0xc0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 31ff 	mov.w	r1, #4294967295
 800102e:	4618      	mov	r0, r3
 8001030:	f00c f84e 	bl	800d0d0 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fd7b 	bl	8002b34 <LED_put>
	    BUZZER_put (500);
 800103e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001042:	f001 fa67 	bl	8002514 <BUZZER_put>
		osDelay(500);
 8001046:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800104a:	f00b f857 	bl	800c0fc <osDelay>
		if(key==1)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <ARM_keys_task+0x4c>
			waypointcreate();
 8001054:	f7ff ffc8 	bl	8000fe8 <waypointcreate>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <ARM_keys_task+0xc4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <ARM_keys_task+0x66>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001064:	481b      	ldr	r0, [pc, #108]	@ (80010d4 <ARM_keys_task+0xc8>)
 8001066:	f001 fdb1 	bl	8002bcc <UART_puts>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fdc9 	bl	8002c04 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <ARM_keys_task+0xc0>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	f00b fda6 	bl	800cbcc <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e015      	b.n	80010b2 <ARM_keys_task+0xa6>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <ARM_keys_task+0x92>
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <ARM_keys_task+0x8c>
 8001092:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001096:	e004      	b.n	80010a2 <ARM_keys_task+0x96>
 8001098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109c:	e001      	b.n	80010a2 <ARM_keys_task+0x96>
 800109e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a2:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff4c 	bl	8000f44 <toggle_led>
		for (i=0; i<3; i++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dde6      	ble.n	8001086 <ARM_keys_task+0x7a>
	  	}
     	taskYIELD(); // done, force context switch
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <ARM_keys_task+0xcc>)
 80010ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	f3bf 8f4f 	dsb	sy
 80010c4:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80010c8:	e7a4      	b.n	8001014 <ARM_keys_task+0x8>
 80010ca:	bf00      	nop
 80010cc:	20000450 	.word	0x20000450
 80010d0:	20000444 	.word	0x20000444
 80010d4:	08014f18 	.word	0x08014f18
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 80010ec:	4847      	ldr	r0, [pc, #284]	@ (800120c <UART_keys_IRQ+0x130>)
 80010ee:	f001 fd6d 	bl	8002bcc <UART_puts>
 80010f2:	4847      	ldr	r0, [pc, #284]	@ (8001210 <UART_keys_IRQ+0x134>)
 80010f4:	f001 fd6a 	bl	8002bcc <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 80010f8:	4846      	ldr	r0, [pc, #280]	@ (8001214 <UART_keys_IRQ+0x138>)
 80010fa:	f00d f911 	bl	800e320 <xTaskGetHandle>
 80010fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 8001106:	4844      	ldr	r0, [pc, #272]	@ (8001218 <UART_keys_IRQ+0x13c>)
 8001108:	f000 fa7c 	bl	8001604 <error_HaltOS>
	while(TRUE)
    {
		// laat de VIC de q vullen, tot LFEED gedrukt is of qsize - 1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800110c:	4b43      	ldr	r3, [pc, #268]	@ (800121c <UART_keys_IRQ+0x140>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 0218 	add.w	r2, r7, #24
 8001114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001116:	4413      	add	r3, r2
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	4619      	mov	r1, r3
 800111e:	f00b fef5 	bl	800cf0c <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8001122:	f107 0218 	add.w	r2, r7, #24
 8001126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d06b      	beq.n	8001208 <UART_keys_IRQ+0x12c>
 8001130:	f107 0218 	add.w	r2, r7, #24
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2bff      	cmp	r3, #255	@ 0xff
 800113c:	d064      	beq.n	8001208 <UART_keys_IRQ+0x12c>
 800113e:	f107 0218 	add.w	r2, r7, #24
 8001142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b0d      	cmp	r3, #13
 800114a:	d05d      	beq.n	8001208 <UART_keys_IRQ+0x12c>
 800114c:	f107 0218 	add.w	r2, r7, #24
 8001150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b20      	cmp	r3, #32
 8001158:	d056      	beq.n	8001208 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 800115a:	f107 0218 	add.w	r2, r7, #24
 800115e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b0a      	cmp	r3, #10
 8001166:	d108      	bne.n	800117a <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001168:	f107 0218 	add.w	r2, r7, #24
 800116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001178:	e00d      	b.n	8001196 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 800117a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117c:	2b08      	cmp	r3, #8
 800117e:	d10a      	bne.n	8001196 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001182:	3301      	adds	r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001186:	f107 0218 	add.w	r2, r7, #24
 800118a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118c:	4413      	add	r3, r2
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d031      	beq.n	8001200 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 800119c:	f107 0218 	add.w	r2, r7, #24
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f011 fa85 	bl	80126b6 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	220a      	movs	r2, #10
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f011 f91d 	bl	80123f4 <memset>
			finish = FALSE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 80011c2:	f107 010c 	add.w	r1, r7, #12
 80011c6:	2300      	movs	r3, #0
 80011c8:	2203      	movs	r2, #3
 80011ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011cc:	f00d ffd8 	bl	800f180 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <UART_keys_IRQ+0x144>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d097      	beq.n	800110c <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <UART_keys_IRQ+0x148>)
 80011de:	f001 fcf5 	bl	8002bcc <UART_puts>
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <UART_keys_IRQ+0x130>)
 80011e4:	f001 fcf2 	bl	8002bcc <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 80011e8:	480f      	ldr	r0, [pc, #60]	@ (8001228 <UART_keys_IRQ+0x14c>)
 80011ea:	f001 fcef 	bl	8002bcc <UART_puts>
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fcea 	bl	8002bcc <UART_puts>
				UART_puts("\r\n");
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <UART_keys_IRQ+0x150>)
 80011fa:	f001 fce7 	bl	8002bcc <UART_puts>
 80011fe:	e785      	b.n	800110c <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001206:	e781      	b.n	800110c <UART_keys_IRQ+0x30>
			continue;
 8001208:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800120a:	e77f      	b.n	800110c <UART_keys_IRQ+0x30>
 800120c:	08015868 	.word	0x08015868
 8001210:	08014f84 	.word	0x08014f84
 8001214:	08014f38 	.word	0x08014f38
 8001218:	08014fa8 	.word	0x08014fa8
 800121c:	20000448 	.word	0x20000448
 8001220:	20000444 	.word	0x20000444
 8001224:	08014f68 	.word	0x08014f68
 8001228:	08014fb8 	.word	0x08014fb8
 800122c:	08014f80 	.word	0x08014f80

08001230 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001238:	4bab      	ldr	r3, [pc, #684]	@ (80014e8 <UART_menu+0x2b8>)
 800123a:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 800123c:	48ab      	ldr	r0, [pc, #684]	@ (80014ec <UART_menu+0x2bc>)
 800123e:	f001 fcc5 	bl	8002bcc <UART_puts>
 8001242:	48ab      	ldr	r0, [pc, #684]	@ (80014f0 <UART_menu+0x2c0>)
 8001244:	f001 fcc2 	bl	8002bcc <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	2001      	movs	r0, #1
 800124e:	f00d feeb 	bl	800f028 <ulTaskNotifyTake>
 8001252:	4603      	mov	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	75fb      	strb	r3, [r7, #23]
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	3301      	adds	r3, #1
 8001260:	4aa4      	ldr	r2, [pc, #656]	@ (80014f4 <UART_menu+0x2c4>)
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d102      	bne.n	8001274 <UART_menu+0x44>
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	3b20      	subs	r3, #32
 8001272:	e000      	b.n	8001276 <UART_menu+0x46>
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	3b30      	subs	r3, #48	@ 0x30
 8001278:	2b24      	cmp	r3, #36	@ 0x24
 800127a:	d84d      	bhi.n	8001318 <UART_menu+0xe8>
 800127c:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <UART_menu+0x54>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001327 	.word	0x08001327
 8001288:	08001363 	.word	0x08001363
 800128c:	0800138f 	.word	0x0800138f
 8001290:	080013bb 	.word	0x080013bb
 8001294:	080013e7 	.word	0x080013e7
 8001298:	08001413 	.word	0x08001413
 800129c:	08001319 	.word	0x08001319
 80012a0:	08001319 	.word	0x08001319
 80012a4:	08001319 	.word	0x08001319
 80012a8:	08001319 	.word	0x08001319
 80012ac:	08001319 	.word	0x08001319
 80012b0:	08001319 	.word	0x08001319
 80012b4:	08001319 	.word	0x08001319
 80012b8:	08001319 	.word	0x08001319
 80012bc:	08001319 	.word	0x08001319
 80012c0:	08001319 	.word	0x08001319
 80012c4:	08001319 	.word	0x08001319
 80012c8:	08001319 	.word	0x08001319
 80012cc:	08001319 	.word	0x08001319
 80012d0:	08001319 	.word	0x08001319
 80012d4:	0800143f 	.word	0x0800143f
 80012d8:	08001319 	.word	0x08001319
 80012dc:	08001319 	.word	0x08001319
 80012e0:	08001319 	.word	0x08001319
 80012e4:	08001319 	.word	0x08001319
 80012e8:	08001319 	.word	0x08001319
 80012ec:	08001319 	.word	0x08001319
 80012f0:	08001319 	.word	0x08001319
 80012f4:	08001319 	.word	0x08001319
 80012f8:	08001463 	.word	0x08001463
 80012fc:	08001319 	.word	0x08001319
 8001300:	08001319 	.word	0x08001319
 8001304:	0800146f 	.word	0x0800146f
 8001308:	08001319 	.word	0x08001319
 800130c:	08001319 	.word	0x08001319
 8001310:	080014b3 	.word	0x080014b3
 8001314:	08001469 	.word	0x08001469
		{
		default:  UART_puts(s);
 8001318:	69b8      	ldr	r0, [r7, #24]
 800131a:	f001 fc57 	bl	8002bcc <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 800131e:	4876      	ldr	r0, [pc, #472]	@ (80014f8 <UART_menu+0x2c8>)
 8001320:	f001 fc54 	bl	8002bcc <UART_puts>
				  break;
 8001324:	e0df      	b.n	80014e6 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 8001326:	4b75      	ldr	r3, [pc, #468]	@ (80014fc <UART_menu+0x2cc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <UART_menu+0x102>
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <UART_menu+0x104>
 8001332:	23ff      	movs	r3, #255	@ 0xff
 8001334:	4a71      	ldr	r2, [pc, #452]	@ (80014fc <UART_menu+0x2cc>)
 8001336:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001338:	4871      	ldr	r0, [pc, #452]	@ (8001500 <UART_menu+0x2d0>)
 800133a:	f001 fc47 	bl	8002bcc <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 800133e:	4b6f      	ldr	r3, [pc, #444]	@ (80014fc <UART_menu+0x2cc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2bff      	cmp	r3, #255	@ 0xff
 8001344:	d101      	bne.n	800134a <UART_menu+0x11a>
 8001346:	4b6f      	ldr	r3, [pc, #444]	@ (8001504 <UART_menu+0x2d4>)
 8001348:	e000      	b.n	800134c <UART_menu+0x11c>
 800134a:	4b6f      	ldr	r3, [pc, #444]	@ (8001508 <UART_menu+0x2d8>)
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fc3d 	bl	8002bcc <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 8001352:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <UART_menu+0x2cc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80c0 	bne.w	80014dc <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 800135c:	f000 f944 	bl	80015e8 <DisplayMenu>
				  break;
 8001360:	e0bc      	b.n	80014dc <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 8001362:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <UART_menu+0x2cc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	4a64      	ldr	r2, [pc, #400]	@ (80014fc <UART_menu+0x2cc>)
 800136c:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 800136e:	4867      	ldr	r0, [pc, #412]	@ (800150c <UART_menu+0x2dc>)
 8001370:	f001 fc2c 	bl	8002bcc <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <UART_menu+0x2cc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <UART_menu+0x154>
 8001380:	4b60      	ldr	r3, [pc, #384]	@ (8001504 <UART_menu+0x2d4>)
 8001382:	e000      	b.n	8001386 <UART_menu+0x156>
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <UART_menu+0x2d8>)
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fc20 	bl	8002bcc <UART_puts>
				  break;
 800138c:	e0ab      	b.n	80014e6 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <UART_menu+0x2cc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f083 0302 	eor.w	r3, r3, #2
 8001396:	4a59      	ldr	r2, [pc, #356]	@ (80014fc <UART_menu+0x2cc>)
 8001398:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 800139a:	485d      	ldr	r0, [pc, #372]	@ (8001510 <UART_menu+0x2e0>)
 800139c:	f001 fc16 	bl	8002bcc <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013a0:	4b56      	ldr	r3, [pc, #344]	@ (80014fc <UART_menu+0x2cc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <UART_menu+0x180>
 80013ac:	4b55      	ldr	r3, [pc, #340]	@ (8001504 <UART_menu+0x2d4>)
 80013ae:	e000      	b.n	80013b2 <UART_menu+0x182>
 80013b0:	4b55      	ldr	r3, [pc, #340]	@ (8001508 <UART_menu+0x2d8>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fc0a 	bl	8002bcc <UART_puts>
				  break;
 80013b8:	e095      	b.n	80014e6 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <UART_menu+0x2cc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f083 0304 	eor.w	r3, r3, #4
 80013c2:	4a4e      	ldr	r2, [pc, #312]	@ (80014fc <UART_menu+0x2cc>)
 80013c4:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 80013c6:	4853      	ldr	r0, [pc, #332]	@ (8001514 <UART_menu+0x2e4>)
 80013c8:	f001 fc00 	bl	8002bcc <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <UART_menu+0x2cc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <UART_menu+0x1ac>
 80013d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <UART_menu+0x2d4>)
 80013da:	e000      	b.n	80013de <UART_menu+0x1ae>
 80013dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001508 <UART_menu+0x2d8>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fbf4 	bl	8002bcc <UART_puts>
				  break;
 80013e4:	e07f      	b.n	80014e6 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <UART_menu+0x2cc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f083 0308 	eor.w	r3, r3, #8
 80013ee:	4a43      	ldr	r2, [pc, #268]	@ (80014fc <UART_menu+0x2cc>)
 80013f0:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 80013f2:	4849      	ldr	r0, [pc, #292]	@ (8001518 <UART_menu+0x2e8>)
 80013f4:	f001 fbea 	bl	8002bcc <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013f8:	4b40      	ldr	r3, [pc, #256]	@ (80014fc <UART_menu+0x2cc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <UART_menu+0x1d8>
 8001404:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <UART_menu+0x2d4>)
 8001406:	e000      	b.n	800140a <UART_menu+0x1da>
 8001408:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <UART_menu+0x2d8>)
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fbde 	bl	8002bcc <UART_puts>
				  break;
 8001410:	e069      	b.n	80014e6 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8001412:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <UART_menu+0x2cc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f083 0310 	eor.w	r3, r3, #16
 800141a:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <UART_menu+0x2cc>)
 800141c:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 800141e:	483f      	ldr	r0, [pc, #252]	@ (800151c <UART_menu+0x2ec>)
 8001420:	f001 fbd4 	bl	8002bcc <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <UART_menu+0x2cc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <UART_menu+0x204>
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <UART_menu+0x2d4>)
 8001432:	e000      	b.n	8001436 <UART_menu+0x206>
 8001434:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <UART_menu+0x2d8>)
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fbc8 	bl	8002bcc <UART_puts>
				  break;
 800143c:	e053      	b.n	80014e6 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	3302      	adds	r3, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f00f faca 	bl	80109dc <atoi>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <UART_menu+0x2f0>)
 800144e:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8001450:	4834      	ldr	r0, [pc, #208]	@ (8001524 <UART_menu+0x2f4>)
 8001452:	f001 fbbb 	bl	8002bcc <UART_puts>
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <UART_menu+0x2f0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fbd2 	bl	8002c04 <UART_putint>
				  break;
 8001460:	e041      	b.n	80014e6 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8001462:	f000 f8c1 	bl	80015e8 <DisplayMenu>
				  break;
 8001466:	e03e      	b.n	80014e6 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8001468:	f000 fa28 	bl	80018bc <DisplayTaskData>
				  break;
 800146c:	e03b      	b.n	80014e6 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 800146e:	69f9      	ldr	r1, [r7, #28]
 8001470:	69b8      	ldr	r0, [r7, #24]
 8001472:	f010 ffe7 	bl	8012444 <strtok>
 8001476:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001478:	69f9      	ldr	r1, [r7, #28]
 800147a:	2000      	movs	r0, #0
 800147c:	f010 ffe2 	bl	8012444 <strtok>
 8001480:	61b8      	str	r0, [r7, #24]
 8001482:	69b8      	ldr	r0, [r7, #24]
 8001484:	f00f faaa 	bl	80109dc <atoi>
 8001488:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 800148a:	69f9      	ldr	r1, [r7, #28]
 800148c:	2000      	movs	r0, #0
 800148e:	f010 ffd9 	bl	8012444 <strtok>
 8001492:	61b8      	str	r0, [r7, #24]
 8001494:	69b8      	ldr	r0, [r7, #24]
 8001496:	f00f faa1 	bl	80109dc <atoi>
 800149a:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d01e      	beq.n	80014e0 <UART_menu+0x2b0>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	6938      	ldr	r0, [r7, #16]
 80014ac:	f000 f982 	bl	80017b4 <SetTaskPriority>
				  break;
 80014b0:	e016      	b.n	80014e0 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 80014b2:	69f9      	ldr	r1, [r7, #28]
 80014b4:	69b8      	ldr	r0, [r7, #24]
 80014b6:	f010 ffc5 	bl	8012444 <strtok>
 80014ba:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 80014bc:	69f9      	ldr	r1, [r7, #28]
 80014be:	2000      	movs	r0, #0
 80014c0:	f010 ffc0 	bl	8012444 <strtok>
 80014c4:	61b8      	str	r0, [r7, #24]
 80014c6:	69b8      	ldr	r0, [r7, #24]
 80014c8:	f00f fa88 	bl	80109dc <atoi>
 80014cc:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <UART_menu+0x2b4>
					  StartStopTask(val1);
 80014d4:	6938      	ldr	r0, [r7, #16]
 80014d6:	f000 f9a9 	bl	800182c <StartStopTask>
				  break;
 80014da:	e003      	b.n	80014e4 <UART_menu+0x2b4>
				  break;
 80014dc:	bf00      	nop
 80014de:	e6b3      	b.n	8001248 <UART_menu+0x18>
				  break;
 80014e0:	bf00      	nop
 80014e2:	e6b1      	b.n	8001248 <UART_menu+0x18>
				  break;
 80014e4:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80014e6:	e6af      	b.n	8001248 <UART_menu+0x18>
 80014e8:	08014fd4 	.word	0x08014fd4
 80014ec:	08015878 	.word	0x08015878
 80014f0:	08014fd8 	.word	0x08014fd8
 80014f4:	08015960 	.word	0x08015960
 80014f8:	08014fe4 	.word	0x08014fe4
 80014fc:	20000444 	.word	0x20000444
 8001500:	08014ff8 	.word	0x08014ff8
 8001504:	08015010 	.word	0x08015010
 8001508:	08015018 	.word	0x08015018
 800150c:	08015020 	.word	0x08015020
 8001510:	08015034 	.word	0x08015034
 8001514:	08015048 	.word	0x08015048
 8001518:	0801505c 	.word	0x0801505c
 800151c:	08015070 	.word	0x08015070
 8001520:	20000218 	.word	0x20000218
 8001524:	08015080 	.word	0x08015080

08001528 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09c      	sub	sp, #112	@ 0x70
 800152c:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <DisplayVersion+0x98>)
 8001530:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (tasks.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8001532:	f001 f931 	bl	8002798 <LCD_clear>
	LCD_puts(app_nameLCD);
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <DisplayVersion+0x9c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fa52 	bl	80029e4 <LCD_puts>

	UART_puts(app_name);
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <DisplayVersion+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fb41 	bl	8002bcc <UART_puts>
	UART_puts(functionality);
 800154a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800154c:	f001 fb3e 	bl	8002bcc <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8001550:	f107 0108 	add.w	r1, r7, #8
 8001554:	463b      	mov	r3, r7
 8001556:	2264      	movs	r2, #100	@ 0x64
 8001558:	4618      	mov	r0, r3
 800155a:	f00a fcd9 	bl	800bf10 <osKernelGetInfo>
	UART_puts("\t-----");
 800155e:	481b      	ldr	r0, [pc, #108]	@ (80015cc <DisplayVersion+0xa4>)
 8001560:	f001 fb34 	bl	8002bcc <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8001564:	481a      	ldr	r0, [pc, #104]	@ (80015d0 <DisplayVersion+0xa8>)
 8001566:	f001 fb31 	bl	8002bcc <UART_puts>
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fb2c 	bl	8002bcc <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001574:	4817      	ldr	r0, [pc, #92]	@ (80015d4 <DisplayVersion+0xac>)
 8001576:	f001 fb29 	bl	8002bcc <UART_puts>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fb41 	bl	8002c04 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8001582:	4815      	ldr	r0, [pc, #84]	@ (80015d8 <DisplayVersion+0xb0>)
 8001584:	f001 fb22 	bl	8002bcc <UART_puts>
 8001588:	f00a fd1a 	bl	800bfc0 <osKernelGetSysTimerFreq>
 800158c:	4603      	mov	r3, r0
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <DisplayVersion+0xb4>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fb34 	bl	8002c04 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <DisplayVersion+0xb8>)
 800159e:	f001 fb15 	bl	8002bcc <UART_puts>
 80015a2:	f00a fd03 	bl	800bfac <osKernelGetTickFreq>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb2b 	bl	8002c04 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <DisplayVersion+0xbc>)
 80015b0:	f001 fb0c 	bl	8002bcc <UART_puts>

    DisplayMenu();
 80015b4:	f000 f818 	bl	80015e8 <DisplayMenu>
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	@ 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08015154 	.word	0x08015154
 80015c4:	20000004 	.word	0x20000004
 80015c8:	20000000 	.word	0x20000000
 80015cc:	080152c4 	.word	0x080152c4
 80015d0:	080152cc 	.word	0x080152cc
 80015d4:	080152d0 	.word	0x080152d0
 80015d8:	080152e0 	.word	0x080152e0
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	080152fc 	.word	0x080152fc
 80015e4:	08015314 	.word	0x08015314

080015e8 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	char *menu =
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <DisplayMenu+0x18>)
 80015f0:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. p,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f001 faea 	bl	8002bcc <UART_puts>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08015320 	.word	0x08015320

08001604 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 f9e9 	bl	80029e4 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f001 fada 	bl	8002bcc <UART_puts>
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <error_HaltOS+0x2c>)
 800161a:	f001 fad7 	bl	8002bcc <UART_puts>

	BUZZER_put(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001622:	f000 ff77 	bl	8002514 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8001626:	f00c fd51 	bl	800e0cc <vTaskSuspendAll>

	while (TRUE)
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <error_HaltOS+0x26>
 800162e:	bf00      	nop
 8001630:	08015560 	.word	0x08015560

08001634 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 800163a:	2001      	movs	r0, #1
 800163c:	f00b faad 	bl	800cb9a <xQueueCreateMutex>
 8001640:	4603      	mov	r3, r0
 8001642:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <CreateHandles+0xd0>)
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <CreateHandles+0xd0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 800164e:	482e      	ldr	r0, [pc, #184]	@ (8001708 <CreateHandles+0xd4>)
 8001650:	f7ff ffd8 	bl	8001604 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8001654:	2200      	movs	r2, #0
 8001656:	2104      	movs	r1, #4
 8001658:	200a      	movs	r0, #10
 800165a:	f00b fa26 	bl	800caaa <xQueueGenericCreate>
 800165e:	4603      	mov	r3, r0
 8001660:	4a2a      	ldr	r2, [pc, #168]	@ (800170c <CreateHandles+0xd8>)
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <CreateHandles+0xd8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 800166c:	4828      	ldr	r0, [pc, #160]	@ (8001710 <CreateHandles+0xdc>)
 800166e:	f7ff ffc9 	bl	8001604 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8001672:	2200      	movs	r2, #0
 8001674:	2101      	movs	r1, #1
 8001676:	2053      	movs	r0, #83	@ 0x53
 8001678:	f00b fa17 	bl	800caaa <xQueueGenericCreate>
 800167c:	4603      	mov	r3, r0
 800167e:	4a25      	ldr	r2, [pc, #148]	@ (8001714 <CreateHandles+0xe0>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <CreateHandles+0xe0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 800168a:	4823      	ldr	r0, [pc, #140]	@ (8001718 <CreateHandles+0xe4>)
 800168c:	f7ff ffba 	bl	8001604 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8001690:	f00a feb4 	bl	800c3fc <xEventGroupCreate>
 8001694:	4603      	mov	r3, r0
 8001696:	4a21      	ldr	r2, [pc, #132]	@ (800171c <CreateHandles+0xe8>)
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <CreateHandles+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 80016a2:	481f      	ldr	r0, [pc, #124]	@ (8001720 <CreateHandles+0xec>)
 80016a4:	f7ff ffae 	bl	8001604 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 80016a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <CreateHandles+0xf0>)
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80016b4:	481c      	ldr	r0, [pc, #112]	@ (8001728 <CreateHandles+0xf4>)
 80016b6:	f00d fec3 	bl	800f440 <xTimerCreate>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <CreateHandles+0xf8>)
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <CreateHandles+0xf8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 80016c8:	4819      	ldr	r0, [pc, #100]	@ (8001730 <CreateHandles+0xfc>)
 80016ca:	f7ff ff9b 	bl	8001604 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 80016ce:	4819      	ldr	r0, [pc, #100]	@ (8001734 <CreateHandles+0x100>)
 80016d0:	f001 fa7c 	bl	8002bcc <UART_puts>

	UART_puts("\n\rTimer set to: ");
 80016d4:	4818      	ldr	r0, [pc, #96]	@ (8001738 <CreateHandles+0x104>)
 80016d6:	f001 fa79 	bl	8002bcc <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 80016da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016de:	f001 fa91 	bl	8002c04 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <CreateHandles+0xf8>)
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	f00c fd9d 	bl	800e224 <xTaskGetTickCount>
 80016ea:	4602      	mov	r2, r0
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2300      	movs	r3, #0
 80016f2:	2101      	movs	r1, #1
 80016f4:	4620      	mov	r0, r4
 80016f6:	f00d ff01 	bl	800f4fc <xTimerGenericCommand>
}
 80016fa:	bf00      	nop
 80016fc:	3704      	adds	r7, #4
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
 8001702:	bf00      	nop
 8001704:	20000450 	.word	0x20000450
 8001708:	08015578 	.word	0x08015578
 800170c:	20000448 	.word	0x20000448
 8001710:	08015588 	.word	0x08015588
 8001714:	2000044c 	.word	0x2000044c
 8001718:	08015598 	.word	0x08015598
 800171c:	20000454 	.word	0x20000454
 8001720:	080155a8 	.word	0x080155a8
 8001724:	0800173d 	.word	0x0800173d
 8001728:	080155bc 	.word	0x080155bc
 800172c:	20000458 	.word	0x20000458
 8001730:	080155c4 	.word	0x080155c4
 8001734:	080155d4 	.word	0x080155d4
 8001738:	080155f8 	.word	0x080155f8

0800173c <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <Timer1_Handler+0x14>)
 8001746:	f002 fd78 	bl	800423a <HAL_GPIO_TogglePin>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40020c00 	.word	0x40020c00

08001754 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <CreateTasks+0x58>)
 800175c:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800175e:	f00c fcb5 	bl	800e0cc <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001762:	e016      	b.n	8001792 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001764:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <CreateTasks+0x5c>)
 8001766:	f001 fa31 	bl	8002bcc <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fa2c 	bl	8002bcc <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3308      	adds	r3, #8
 8001780:	461a      	mov	r2, r3
 8001782:	f00a fc29 	bl	800bfd8 <osThreadNew>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3330      	adds	r3, #48	@ 0x30
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1e4      	bne.n	8001764 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800179a:	f00c fca5 	bl	800e0e8 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800179e:	f000 f88d 	bl	80018bc <DisplayTaskData>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	0801560c 	.word	0x0801560c

080017b4 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <SetTaskPriority+0x6c>)
 80017c0:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80017c2:	2301      	movs	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	e023      	b.n	8001810 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d119      	bne.n	8001804 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f00c fa5e 	bl	800dca0 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 80017e4:	480f      	ldr	r0, [pc, #60]	@ (8001824 <SetTaskPriority+0x70>)
 80017e6:	f001 f9f1 	bl	8002bcc <UART_puts>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 f9ec 	bl	8002bcc <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <SetTaskPriority+0x74>)
 80017f6:	f001 f9e9 	bl	8002bcc <UART_puts>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fa01 	bl	8002c04 <UART_putint>
			return;
 8001802:	e009      	b.n	8001818 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3330      	adds	r3, #48	@ 0x30
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3301      	adds	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1d7      	bne.n	80017c8 <SetTaskPriority+0x14>
		}
}
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	08015618 	.word	0x08015618
 8001828:	08015624 	.word	0x08015624

0800182c <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	@ 0x38
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <StartStopTask+0x80>)
 8001836:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001838:	2301      	movs	r3, #1
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
 800183c:	e02e      	b.n	800189c <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001842:	429a      	cmp	r2, r3
 8001844:	d124      	bne.n	8001890 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001848:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800184a:	f107 010c 	add.w	r1, r7, #12
 800184e:	2305      	movs	r3, #5
 8001850:	2201      	movs	r2, #1
 8001852:	f00d f94f 	bl	800eaf4 <vTaskGetInfo>
			UART_puts("\r\n");
 8001856:	4816      	ldr	r0, [pc, #88]	@ (80018b0 <StartStopTask+0x84>)
 8001858:	f001 f9b8 	bl	8002bcc <UART_puts>
			UART_puts(ptd->attr.name);
 800185c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f9b3 	bl	8002bcc <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001866:	7e3b      	ldrb	r3, [r7, #24]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d108      	bne.n	800187e <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 800186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	4618      	mov	r0, r3
 8001872:	f00c fb5b 	bl	800df2c <vTaskResume>
				UART_puts(" resumed.");
 8001876:	480f      	ldr	r0, [pc, #60]	@ (80018b4 <StartStopTask+0x88>)
 8001878:	f001 f9a8 	bl	8002bcc <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 800187c:	e012      	b.n	80018a4 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 800187e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	4618      	mov	r0, r3
 8001884:	f00c faaa 	bl	800dddc <vTaskSuspend>
				UART_puts(" suspended.");
 8001888:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <StartStopTask+0x8c>)
 800188a:	f001 f99f 	bl	8002bcc <UART_puts>
 800188e:	e009      	b.n	80018a4 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
 8001896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001898:	3301      	adds	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1cc      	bne.n	800183e <StartStopTask+0x12>
		}
}
 80018a4:	3738      	adds	r7, #56	@ 0x38
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	08015638 	.word	0x08015638
 80018b4:	0801563c 	.word	0x0801563c
 80018b8:	08015648 	.word	0x08015648

080018bc <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	@ 0x38
 80018c0:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <DisplayTaskData+0xcc>)
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  freespace;
	TaskStatus_t xTaskDetails;
	unsigned int used;
	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 80018c6:	2301      	movs	r3, #1
 80018c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80018ca:	e052      	b.n	8001972 <DisplayTaskData+0xb6>
	{
		freespace = uxTaskGetStackHighWaterMark(ptd->hTask) * 4; 	// amount of free bytes
 80018cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00d f991 	bl	800ebf8 <uxTaskGetStackHighWaterMark>
 80018d6:	4603      	mov	r3, r0
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		used = 100 - (freespace * 100) / ptd->attr.stack_size; 		// in percentage
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	2264      	movs	r2, #100	@ 0x64
 80018e0:	fb03 f202 	mul.w	r2, r3, r2
 80018e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80018f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80018f6:	1d39      	adds	r1, r7, #4
 80018f8:	2305      	movs	r3, #5
 80018fa:	2201      	movs	r2, #1
 80018fc:	f00d f8fa 	bl	800eaf4 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8001900:	4822      	ldr	r0, [pc, #136]	@ (800198c <DisplayTaskData+0xd0>)
 8001902:	f001 f963 	bl	8002bcc <UART_puts>
 8001906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001908:	f001 f97c 	bl	8002c04 <UART_putint>
 800190c:	4820      	ldr	r0, [pc, #128]	@ (8001990 <DisplayTaskData+0xd4>)
 800190e:	f001 f95d 	bl	8002bcc <UART_puts>
		UART_puts(ptd->attr.name);
 8001912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f958 	bl	8002bcc <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 800191c:	481d      	ldr	r0, [pc, #116]	@ (8001994 <DisplayTaskData+0xd8>)
 800191e:	f001 f955 	bl	8002bcc <UART_puts>
 8001922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4618      	mov	r0, r3
 8001928:	f001 f96c 	bl	8002c04 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size);
 800192c:	481a      	ldr	r0, [pc, #104]	@ (8001998 <DisplayTaskData+0xdc>)
 800192e:	f001 f94d 	bl	8002bcc <UART_puts>
 8001932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4618      	mov	r0, r3
 8001938:	f001 f964 	bl	8002c04 <UART_putint>
		UART_puts("\t used: ");      UART_putint(used); UART_puts("%");
 800193c:	4817      	ldr	r0, [pc, #92]	@ (800199c <DisplayTaskData+0xe0>)
 800193e:	f001 f945 	bl	8002bcc <UART_puts>
 8001942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001944:	f001 f95e 	bl	8002c04 <UART_putint>
 8001948:	4815      	ldr	r0, [pc, #84]	@ (80019a0 <DisplayTaskData+0xe4>)
 800194a:	f001 f93f 	bl	8002bcc <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <DisplayTaskData+0xe8>)
 8001950:	f001 f93c 	bl	8002bcc <UART_puts>
 8001954:	7c3b      	ldrb	r3, [r7, #16]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d101      	bne.n	800195e <DisplayTaskData+0xa2>
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <DisplayTaskData+0xec>)
 800195c:	e000      	b.n	8001960 <DisplayTaskData+0xa4>
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <DisplayTaskData+0xf0>)
 8001960:	4618      	mov	r0, r3
 8001962:	f001 f933 	bl	8002bcc <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001968:	3330      	adds	r3, #48	@ 0x30
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34
 800196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196e:	3301      	adds	r3, #1
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1a8      	bne.n	80018cc <DisplayTaskData+0x10>
	}
	UART_puts("\r\n");
 800197a:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <DisplayTaskData+0xf4>)
 800197c:	f001 f926 	bl	8002bcc <UART_puts>
}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	@ 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000008 	.word	0x20000008
 800198c:	08015654 	.word	0x08015654
 8001990:	0801565c 	.word	0x0801565c
 8001994:	08015660 	.word	0x08015660
 8001998:	08015670 	.word	0x08015670
 800199c:	08015680 	.word	0x08015680
 80019a0:	0801568c 	.word	0x0801568c
 80019a4:	08015690 	.word	0x08015690
 80019a8:	0801569c 	.word	0x0801569c
 80019ac:	080156a8 	.word	0x080156a8
 80019b0:	08015638 	.word	0x08015638

080019b4 <gps_get_GNRMC>:

GNRMC gnrmc; // global struct for GNRMC-messages
SemaphoreHandle_t gps_access_semaphore;

void gps_get_GNRMC(GNRMC *latestgnrmc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <gps_get_GNRMC+0x3c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b fb83 	bl	800d0d0 <xQueueSemaphoreTake>

	memcpy(latestgnrmc, &gnrmc, sizeof(GNRMC));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <gps_get_GNRMC+0x40>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	4611      	mov	r1, r2
 80019d2:	2347      	movs	r3, #71	@ 0x47
 80019d4:	461a      	mov	r2, r3
 80019d6:	f010 fe76 	bl	80126c6 <memcpy>

	xSemaphoreGive(gps_access_semaphore);
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <gps_get_GNRMC+0x3c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	f00b f8f2 	bl	800cbcc <xQueueGenericSend>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200004a4 	.word	0x200004a4
 80019f4:	2000045c 	.word	0x2000045c

080019f8 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(gps_access_semaphore, portMAX_DELAY);
 8001a00:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <fill_GNRMC+0x11c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00b fb61 	bl	800d0d0 <xQueueSemaphoreTake>
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 8001a0e:	4b42      	ldr	r3, [pc, #264]	@ (8001b18 <fill_GNRMC+0x120>)
 8001a10:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001a12:	2247      	movs	r2, #71	@ 0x47
 8001a14:	2100      	movs	r1, #0
 8001a16:	4841      	ldr	r0, [pc, #260]	@ (8001b1c <fill_GNRMC+0x124>)
 8001a18:	f010 fcec 	bl	80123f4 <memset>

	s = strtok(message, tok); // 0. header;
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f010 fd10 	bl	8012444 <strtok>
 8001a24:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	483c      	ldr	r0, [pc, #240]	@ (8001b1c <fill_GNRMC+0x124>)
 8001a2a:	f010 fe44 	bl	80126b6 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	2000      	movs	r0, #0
 8001a32:	f010 fd07 	bl	8012444 <strtok>
 8001a36:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f010 fd02 	bl	8012444 <strtok>
 8001a40:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b35      	ldr	r3, [pc, #212]	@ (8001b1c <fill_GNRMC+0x124>)
 8001a48:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f010 fcf9 	bl	8012444 <strtok>
 8001a52:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	4832      	ldr	r0, [pc, #200]	@ (8001b20 <fill_GNRMC+0x128>)
 8001a58:	f010 fe2d 	bl	80126b6 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f010 fcf0 	bl	8012444 <strtok>
 8001a64:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f010 fceb 	bl	8012444 <strtok>
 8001a6e:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <fill_GNRMC+0x12c>)
 8001a74:	f010 fe1f 	bl	80126b6 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f010 fce2 	bl	8012444 <strtok>
 8001a80:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	2000      	movs	r0, #0
 8001a86:	f010 fcdd 	bl	8012444 <strtok>
 8001a8a:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	4826      	ldr	r0, [pc, #152]	@ (8001b28 <fill_GNRMC+0x130>)
 8001a90:	f010 fe11 	bl	80126b6 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	2000      	movs	r0, #0
 8001a98:	f010 fcd4 	bl	8012444 <strtok>
 8001a9c:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	4822      	ldr	r0, [pc, #136]	@ (8001b2c <fill_GNRMC+0x134>)
 8001aa2:	f010 fe08 	bl	80126b6 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001aa6:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <fill_GNRMC+0x138>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d025      	beq.n	8001afe <fill_GNRMC+0x106>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001ab2:	4820      	ldr	r0, [pc, #128]	@ (8001b34 <fill_GNRMC+0x13c>)
 8001ab4:	f001 f88a 	bl	8002bcc <UART_puts>
 8001ab8:	4818      	ldr	r0, [pc, #96]	@ (8001b1c <fill_GNRMC+0x124>)
 8001aba:	f001 f887 	bl	8002bcc <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001abe:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <fill_GNRMC+0x140>)
 8001ac0:	f001 f884 	bl	8002bcc <UART_puts>
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <fill_GNRMC+0x124>)
 8001ac6:	7c5b      	ldrb	r3, [r3, #17]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 f86d 	bl	8002ba8 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001ace:	481b      	ldr	r0, [pc, #108]	@ (8001b3c <fill_GNRMC+0x144>)
 8001ad0:	f001 f87c 	bl	8002bcc <UART_puts>
 8001ad4:	4812      	ldr	r0, [pc, #72]	@ (8001b20 <fill_GNRMC+0x128>)
 8001ad6:	f001 f879 	bl	8002bcc <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001ada:	4819      	ldr	r0, [pc, #100]	@ (8001b40 <fill_GNRMC+0x148>)
 8001adc:	f001 f876 	bl	8002bcc <UART_puts>
 8001ae0:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <fill_GNRMC+0x12c>)
 8001ae2:	f001 f873 	bl	8002bcc <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001ae6:	4817      	ldr	r0, [pc, #92]	@ (8001b44 <fill_GNRMC+0x14c>)
 8001ae8:	f001 f870 	bl	8002bcc <UART_puts>
 8001aec:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <fill_GNRMC+0x130>)
 8001aee:	f001 f86d 	bl	8002bcc <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001af2:	4815      	ldr	r0, [pc, #84]	@ (8001b48 <fill_GNRMC+0x150>)
 8001af4:	f001 f86a 	bl	8002bcc <UART_puts>
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <fill_GNRMC+0x134>)
 8001afa:	f001 f867 	bl	8002bcc <UART_puts>
	}

	xSemaphoreGive(gps_access_semaphore);
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <fill_GNRMC+0x11c>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	f00b f860 	bl	800cbcc <xQueueGenericSend>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200004a4 	.word	0x200004a4
 8001b18:	080156b0 	.word	0x080156b0
 8001b1c:	2000045c 	.word	0x2000045c
 8001b20:	2000046e 	.word	0x2000046e
 8001b24:	20000479 	.word	0x20000479
 8001b28:	20000484 	.word	0x20000484
 8001b2c:	2000048a 	.word	0x2000048a
 8001b30:	20000444 	.word	0x20000444
 8001b34:	080156b4 	.word	0x080156b4
 8001b38:	080156c4 	.word	0x080156c4
 8001b3c:	080156d4 	.word	0x080156d4
 8001b40:	080156e4 	.word	0x080156e4
 8001b44:	080156f4 	.word	0x080156f4
 8001b48:	08015704 	.word	0x08015704

08001b4c <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	gps_access_semaphore=xSemaphoreCreateMutex();
 8001b54:	2001      	movs	r0, #1
 8001b56:	f00b f820 	bl	800cb9a <xQueueCreateMutex>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a67      	ldr	r2, [pc, #412]	@ (8001cfc <GPS_getNMEA+0x1b0>)
 8001b5e:	6013      	str	r3, [r2, #0]

    char  Q_buff[GPS_MAXLEN];   // buffer for chars in queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001b72:	4863      	ldr	r0, [pc, #396]	@ (8001d00 <GPS_getNMEA+0x1b4>)
 8001b74:	f001 f82a 	bl	8002bcc <UART_puts>
 8001b78:	4862      	ldr	r0, [pc, #392]	@ (8001d04 <GPS_getNMEA+0x1b8>)
 8001b7a:	f001 f827 	bl	8002bcc <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001b7e:	4b62      	ldr	r3, [pc, #392]	@ (8001d08 <GPS_getNMEA+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001b86:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00b f9be 	bl	800cf0c <xQueueReceive>

		//UART_putchar(*Q_buff);  // echo, for testing

		if (*Q_buff == '$') // gotcha, new datastring started
 8001b90:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001b94:	2b24      	cmp	r3, #36	@ 0x24
 8001b96:	d10c      	bne.n	8001bb2 <GPS_getNMEA+0x66>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2253      	movs	r2, #83	@ 0x53
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f010 fc27 	bl	80123f4 <memset>
			pos = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			new_msg = TRUE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 809d 	beq.w	8001cf6 <GPS_getNMEA+0x1aa>
			continue;

		MSG_buff[pos] = *Q_buff; // copy char read from Q into the msg-buf
 8001bbc:	f897 105c 	ldrb.w	r1, [r7, #92]	@ 0x5c
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bc8:	4413      	add	r3, r2
 8001bca:	460a      	mov	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d136      	bne.n	8001c44 <GPS_getNMEA+0xf8>
		{
			msg_type = 0; // reset
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	3301      	adds	r3, #1
 8001be2:	2205      	movs	r2, #5
 8001be4:	4949      	ldr	r1, [pc, #292]	@ (8001d0c <GPS_getNMEA+0x1c0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f010 fc19 	bl	801241e <strncmp>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <GPS_getNMEA+0xae>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bf8:	e01c      	b.n	8001c34 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	3301      	adds	r3, #1
 8001c00:	2205      	movs	r2, #5
 8001c02:	4943      	ldr	r1, [pc, #268]	@ (8001d10 <GPS_getNMEA+0x1c4>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f010 fc0a 	bl	801241e <strncmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d103      	bne.n	8001c18 <GPS_getNMEA+0xcc>
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c16:	e00d      	b.n	8001c34 <GPS_getNMEA+0xe8>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	2205      	movs	r2, #5
 8001c20:	493c      	ldr	r1, [pc, #240]	@ (8001d14 <GPS_getNMEA+0x1c8>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f010 fbfb 	bl	801241e <strncmp>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <GPS_getNMEA+0xe8>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

			if (!msg_type) // not an interesting message type
 8001c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <GPS_getNMEA+0xf8>
			{
				new_msg = FALSE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				continue;
 8001c42:	e059      	b.n	8001cf8 <GPS_getNMEA+0x1ac>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001c44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c48:	2b51      	cmp	r3, #81	@ 0x51
 8001c4a:	dd03      	ble.n	8001c54 <GPS_getNMEA+0x108>
		{
			new_msg = FALSE; // ignore it
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001c52:	e051      	b.n	8001cf8 <GPS_getNMEA+0x1ac>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001c54:	f107 0208 	add.w	r2, r7, #8
 8001c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b0d      	cmp	r3, #13
 8001c62:	d142      	bne.n	8001cea <GPS_getNMEA+0x19e>
		{
			MSG_buff[pos] = '\0';          // close string
 8001c64:	f107 0208 	add.w	r2, r7, #8
 8001c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f89a 	bl	8001db0 <checksum_valid>
 8001c7c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <GPS_getNMEA+0x1cc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d011      	beq.n	8001cb0 <GPS_getNMEA+0x164>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001c8c:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <GPS_getNMEA+0x1d0>)
 8001c8e:	f000 ff9d 	bl	8002bcc <UART_puts>
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 ff98 	bl	8002bcc <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <GPS_getNMEA+0x15c>
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <GPS_getNMEA+0x1d4>)
 8001ca6:	e000      	b.n	8001caa <GPS_getNMEA+0x15e>
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <GPS_getNMEA+0x1d8>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 ff8e 	bl	8002bcc <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d014      	beq.n	8001ce2 <GPS_getNMEA+0x196>
			{
				switch(msg_type) // extract data from msg into right struct
 8001cb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d009      	beq.n	8001cd4 <GPS_getNMEA+0x188>
 8001cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dd0b      	ble.n	8001ce0 <GPS_getNMEA+0x194>
 8001cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ccc:	3b02      	subs	r3, #2
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d806      	bhi.n	8001ce0 <GPS_getNMEA+0x194>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001cd2:	e006      	b.n	8001ce2 <GPS_getNMEA+0x196>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe8d 	bl	80019f8 <fill_GNRMC>
						     break;
 8001cde:	e000      	b.n	8001ce2 <GPS_getNMEA+0x196>
				default:     break;
 8001ce0:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			continue;
 8001ce8:	e006      	b.n	8001cf8 <GPS_getNMEA+0x1ac>
		}
		pos++; // proceed reading next char from the queue
 8001cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001cf4:	e743      	b.n	8001b7e <GPS_getNMEA+0x32>
			continue;
 8001cf6:	bf00      	nop
		xQueueReceive(hGPS_Queue, Q_buff, portMAX_DELAY); // get one char from the q
 8001cf8:	e741      	b.n	8001b7e <GPS_getNMEA+0x32>
 8001cfa:	bf00      	nop
 8001cfc:	200004a4 	.word	0x200004a4
 8001d00:	08015884 	.word	0x08015884
 8001d04:	08015714 	.word	0x08015714
 8001d08:	2000044c 	.word	0x2000044c
 8001d0c:	08015720 	.word	0x08015720
 8001d10:	08015728 	.word	0x08015728
 8001d14:	08015730 	.word	0x08015730
 8001d18:	20000444 	.word	0x20000444
 8001d1c:	08015738 	.word	0x08015738
 8001d20:	08015748 	.word	0x08015748
 8001d24:	08015754 	.word	0x08015754

08001d28 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f813 	bl	8001d60 <hexchar2int>
 8001d3a:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f809 	bl	8001d60 <hexchar2int>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

	return value;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <hexchar2int>:


int hexchar2int(char c)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d6e:	d905      	bls.n	8001d7c <hexchar2int+0x1c>
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b39      	cmp	r3, #57	@ 0x39
 8001d74:	d802      	bhi.n	8001d7c <hexchar2int+0x1c>
        return (c - '0');
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	3b30      	subs	r3, #48	@ 0x30
 8001d7a:	e013      	b.n	8001da4 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b40      	cmp	r3, #64	@ 0x40
 8001d80:	d905      	bls.n	8001d8e <hexchar2int+0x2e>
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b46      	cmp	r3, #70	@ 0x46
 8001d86:	d802      	bhi.n	8001d8e <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	3b37      	subs	r3, #55	@ 0x37
 8001d8c:	e00a      	b.n	8001da4 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b60      	cmp	r3, #96	@ 0x60
 8001d92:	d905      	bls.n	8001da0 <hexchar2int+0x40>
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b66      	cmp	r3, #102	@ 0x66
 8001d98:	d802      	bhi.n	8001da0 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	3b57      	subs	r3, #87	@ 0x57
 8001d9e:	e001      	b.n	8001da4 <hexchar2int+0x44>
    return (-1);
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001dbc:	212a      	movs	r1, #42	@ 0x2a
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f010 fb20 	bl	8012404 <strchr>
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d022      	beq.n	8001e12 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	4053      	eors	r3, r2
 8001de4:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fa3f 	bl	8000270 <strlen>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d8ee      	bhi.n	8001dd8 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff92 	bl	8001d28 <hex2int>
 8001e04:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d101      	bne.n	8001e12 <checksum_valid+0x62>
			return (1);
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <checksum_valid+0x64>
	}

	return (0);
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <lcdout_init>:
char lcdout_buffer[LCDOUT_BUFFER_SIZE];

/* PUBLIC FUNCTIONS */

void lcdout_init()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	_lcdout_semaphore=xSemaphoreCreateMutex();
 8001e20:	2001      	movs	r0, #1
 8001e22:	f00a feba 	bl	800cb9a <xQueueCreateMutex>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a01      	ldr	r2, [pc, #4]	@ (8001e30 <lcdout_init+0x14>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004a8 	.word	0x200004a8

08001e34 <lcdout_printf>:

void lcdout_printf(char* format, ...)
{
 8001e34:	b40f      	push	{r0, r1, r2, r3}
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
	LCDOUT_SM_TAKE;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <lcdout_printf+0x94>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00b f943 	bl	800d0d0 <xQueueSemaphoreTake>
	va_list args;
	va_start(args, format);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	603b      	str	r3, [r7, #0]

	/* Convert ... arguments to printf like formatting */
	vsnprintf(lcdout_buffer,LCDOUT_BUFFER_SIZE,format, args);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	481d      	ldr	r0, [pc, #116]	@ (8001ecc <lcdout_printf+0x98>)
 8001e58:	f010 fabe 	bl	80123d8 <vsniprintf>

	/* Clear LCD */
	LCD_clear();
 8001e5c:	f000 fc9c 	bl	8002798 <LCD_clear>
	uint8_t line=0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

	/* Print out per character */
	for(size_t i=0;i<LCDOUT_BUFFER_SIZE;i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	e01a      	b.n	8001ea0 <lcdout_printf+0x6c>
	{
		char c = lcdout_buffer[i];
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <lcdout_printf+0x98>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
		if(c=='\0') break;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <lcdout_printf+0x74>
		if(c=='\n')
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b0a      	cmp	r3, #10
 8001e7e:	d108      	bne.n	8001e92 <lcdout_printf+0x5e>
		{
			LCD_XY(0, ++line);
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 fc94 	bl	80027b8 <LCD_XY>
			continue;
 8001e90:	e003      	b.n	8001e9a <lcdout_printf+0x66>
		}
		LCD_putchar(c);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fd53 	bl	8002940 <LCD_putchar>
	for(size_t i=0;i<LCDOUT_BUFFER_SIZE;i++)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea4:	d9e1      	bls.n	8001e6a <lcdout_printf+0x36>
 8001ea6:	e000      	b.n	8001eaa <lcdout_printf+0x76>
		if(c=='\0') break;
 8001ea8:	bf00      	nop
	}

	va_end(args);
	LCDOUT_SM_GIVE;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <lcdout_printf+0x94>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f00a fe8a 	bl	800cbcc <xQueueGenericSend>
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ec2:	b004      	add	sp, #16
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200004a8 	.word	0x200004a8
 8001ecc:	200004ac 	.word	0x200004ac

08001ed0 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001ed8:	4820      	ldr	r0, [pc, #128]	@ (8001f5c <LED_Task1+0x8c>)
 8001eda:	f000 fe77 	bl	8002bcc <UART_puts>
 8001ede:	4820      	ldr	r0, [pc, #128]	@ (8001f60 <LED_Task1+0x90>)
 8001ee0:	f000 fe74 	bl	8002bcc <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <LED_Task1+0x94>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00b f8ef 	bl	800d0d0 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e01c      	b.n	8001f36 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fe17 	bl	8002b34 <LED_put>
           	osDelay(os_delay);
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <LED_Task1+0x98>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00a f8f6 	bl	800c0fc <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <LED_Task1+0x9c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8001f1c:	4814      	ldr	r0, [pc, #80]	@ (8001f70 <LED_Task1+0xa0>)
 8001f1e:	f000 fe55 	bl	8002bcc <UART_puts>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fe6d 	bl	8002c04 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	105b      	asrs	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	dddf      	ble.n	8001efc <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <LED_Task1+0x94>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	f00a fe41 	bl	800cbcc <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <LED_Task1+0xa4>)
 8001f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001f5a:	e7c3      	b.n	8001ee4 <LED_Task1+0x14>
 8001f5c:	08015890 	.word	0x08015890
 8001f60:	08015760 	.word	0x08015760
 8001f64:	20000450 	.word	0x20000450
 8001f68:	20000218 	.word	0x20000218
 8001f6c:	20000444 	.word	0x20000444
 8001f70:	0801576c 	.word	0x0801576c
 8001f74:	e000ed04 	.word	0xe000ed04

08001f78 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001f80:	4820      	ldr	r0, [pc, #128]	@ (8002004 <LED_Task2+0x8c>)
 8001f82:	f000 fe23 	bl	8002bcc <UART_puts>
 8001f86:	4820      	ldr	r0, [pc, #128]	@ (8002008 <LED_Task2+0x90>)
 8001f88:	f000 fe20 	bl	8002bcc <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <LED_Task2+0x94>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00b f89b 	bl	800d0d0 <xQueueSemaphoreTake>
		leds = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e01c      	b.n	8001fde <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fdc3 	bl	8002b34 <LED_put>
          	osDelay(os_delay);
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <LED_Task2+0x98>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00a f8a2 	bl	800c0fc <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <LED_Task2+0x9c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001fc4:	4814      	ldr	r0, [pc, #80]	@ (8002018 <LED_Task2+0xa0>)
 8001fc6:	f000 fe01 	bl	8002bcc <UART_puts>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fe19 	bl	8002c04 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	dddf      	ble.n	8001fa4 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <LED_Task2+0x94>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	f00a fded 	bl	800cbcc <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <LED_Task2+0xa4>)
 8001ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8002002:	e7c3      	b.n	8001f8c <LED_Task2+0x14>
 8002004:	0801589c 	.word	0x0801589c
 8002008:	08015760 	.word	0x08015760
 800200c:	20000450 	.word	0x20000450
 8002010:	20000218 	.word	0x20000218
 8002014:	20000444 	.word	0x20000444
 8002018:	08015778 	.word	0x08015778
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8002028:	4830      	ldr	r0, [pc, #192]	@ (80020ec <LED_Task3+0xcc>)
 800202a:	f00c f979 	bl	800e320 <xTaskGetHandle>
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8002036:	482e      	ldr	r0, [pc, #184]	@ (80020f0 <LED_Task3+0xd0>)
 8002038:	f7ff fae4 	bl	8001604 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800203c:	482d      	ldr	r0, [pc, #180]	@ (80020f4 <LED_Task3+0xd4>)
 800203e:	f000 fdc5 	bl	8002bcc <UART_puts>
 8002042:	482d      	ldr	r0, [pc, #180]	@ (80020f8 <LED_Task3+0xd8>)
 8002044:	f000 fdc2 	bl	8002bcc <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <LED_Task3+0xdc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	4618      	mov	r0, r3
 8002052:	f00b f83d 	bl	800d0d0 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e02d      	b.n	80020b8 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <LED_Task3+0x48>
 8002062:	2318      	movs	r3, #24
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e00d      	b.n	8002084 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <LED_Task3+0x54>
 800206e:	2324      	movs	r3, #36	@ 0x24
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e007      	b.n	8002084 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d102      	bne.n	8002080 <LED_Task3+0x60>
 800207a:	2342      	movs	r3, #66	@ 0x42
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e001      	b.n	8002084 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8002080:	2381      	movs	r3, #129	@ 0x81
 8002082:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fd53 	bl	8002b34 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 800208e:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <LED_Task3+0xe0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f00a f832 	bl	800c0fc <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <LED_Task3+0xe4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 80020a4:	4818      	ldr	r0, [pc, #96]	@ (8002108 <LED_Task3+0xe8>)
 80020a6:	f000 fd91 	bl	8002bcc <UART_puts>
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fda9 	bl	8002c04 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	ddce      	ble.n	800205c <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <LED_Task3+0xdc>)
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	f00a fd80 	bl	800cbcc <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80020cc:	2300      	movs	r3, #0
 80020ce:	2202      	movs	r2, #2
 80020d0:	2100      	movs	r1, #0
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f00d f854 	bl	800f180 <xTaskGenericNotify>
		osDelay(200);
 80020d8:	20c8      	movs	r0, #200	@ 0xc8
 80020da:	f00a f80f 	bl	800c0fc <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 80020de:	f04f 31ff 	mov.w	r1, #4294967295
 80020e2:	2001      	movs	r0, #1
 80020e4:	f00c ffa0 	bl	800f028 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80020e8:	e7ae      	b.n	8002048 <LED_Task3+0x28>
 80020ea:	bf00      	nop
 80020ec:	08015784 	.word	0x08015784
 80020f0:	08015790 	.word	0x08015790
 80020f4:	080158a8 	.word	0x080158a8
 80020f8:	08015760 	.word	0x08015760
 80020fc:	20000450 	.word	0x20000450
 8002100:	20000218 	.word	0x20000218
 8002104:	20000444 	.word	0x20000444
 8002108:	0801579c 	.word	0x0801579c

0800210c <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002114:	4830      	ldr	r0, [pc, #192]	@ (80021d8 <LED_Task4+0xcc>)
 8002116:	f00c f903 	bl	800e320 <xTaskGetHandle>
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 8002122:	482e      	ldr	r0, [pc, #184]	@ (80021dc <LED_Task4+0xd0>)
 8002124:	f7ff fa6e 	bl	8001604 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002128:	482d      	ldr	r0, [pc, #180]	@ (80021e0 <LED_Task4+0xd4>)
 800212a:	f000 fd4f 	bl	8002bcc <UART_puts>
 800212e:	482d      	ldr	r0, [pc, #180]	@ (80021e4 <LED_Task4+0xd8>)
 8002130:	f000 fd4c 	bl	8002bcc <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	2001      	movs	r0, #1
 800213a:	f00c ff75 	bl	800f028 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <LED_Task4+0xdc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 31ff 	mov.w	r1, #4294967295
 8002146:	4618      	mov	r0, r3
 8002148:	f00a ffc2 	bl	800d0d0 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e02d      	b.n	80021ae <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <LED_Task4+0x52>
 8002158:	2381      	movs	r3, #129	@ 0x81
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e00d      	b.n	800217a <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <LED_Task4+0x5e>
 8002164:	2342      	movs	r3, #66	@ 0x42
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e007      	b.n	800217a <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d102      	bne.n	8002176 <LED_Task4+0x6a>
 8002170:	2324      	movs	r3, #36	@ 0x24
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e001      	b.n	800217a <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8002176:	2318      	movs	r3, #24
 8002178:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fcd8 	bl	8002b34 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <LED_Task4+0xe0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f009 ffb7 	bl	800c0fc <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <LED_Task4+0xe4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <LED_Task4+0xe8>)
 800219c:	f000 fd16 	bl	8002bcc <UART_puts>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fd2e 	bl	8002c04 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	ddce      	ble.n	8002152 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <LED_Task4+0xdc>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	f00a fd05 	bl	800cbcc <xQueueGenericSend>
		osDelay(200);
 80021c2:	20c8      	movs	r0, #200	@ 0xc8
 80021c4:	f009 ff9a 	bl	800c0fc <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80021c8:	2300      	movs	r3, #0
 80021ca:	2202      	movs	r2, #2
 80021cc:	2100      	movs	r1, #0
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f00c ffd6 	bl	800f180 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80021d4:	e7ae      	b.n	8002134 <LED_Task4+0x28>
 80021d6:	bf00      	nop
 80021d8:	080157ac 	.word	0x080157ac
 80021dc:	080157b8 	.word	0x080157b8
 80021e0:	080158b4 	.word	0x080158b4
 80021e4:	08015760 	.word	0x08015760
 80021e8:	20000450 	.word	0x20000450
 80021ec:	20000218 	.word	0x20000218
 80021f0:	20000444 	.word	0x20000444
 80021f4:	080157c4 	.word	0x080157c4

080021f8 <waypointsReset>:
vector2d_t globalVec;

SemaphoreHandle_t student_SemaphoreWaypoints;

void waypointsReset()
{
 80021f8:	b490      	push	{r4, r7}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
    for(int i=0;i<20;i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e017      	b.n	8002234 <waypointsReset+0x3c>
    {
        vector2d_t vec;
        vec.x=0;
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9c7 2300 	strd	r2, r3, [r7]
        vec.y=0;
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2302 	strd	r2, r3, [r7, #8]
        waypoints[i]=vec;
 800221c:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <waypointsReset+0x50>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	461c      	mov	r4, r3
 8002226:	463b      	mov	r3, r7
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i=0;i<20;i++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b13      	cmp	r3, #19
 8002238:	dde4      	ble.n	8002204 <waypointsReset+0xc>
    }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000530 	.word	0x20000530

0800224c <test_gps_coords>:


void test_gps_coords()
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b098      	sub	sp, #96	@ 0x60
 8002250:	af02      	add	r7, sp, #8
	static char last_status='\0';
	GNRMC latestgnrmc;
	gps_get_GNRMC(&latestgnrmc);
 8002252:	463b      	mov	r3, r7
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fbad 	bl	80019b4 <gps_get_GNRMC>

	if(latestgnrmc.status!='A')
 800225a:	7c7b      	ldrb	r3, [r7, #17]
 800225c:	2b41      	cmp	r3, #65	@ 0x41
 800225e:	d00c      	beq.n	800227a <test_gps_coords+0x2e>
	{
		if(latestgnrmc.status!=last_status)
 8002260:	7c7a      	ldrb	r2, [r7, #17]
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <test_gps_coords+0x90>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d003      	beq.n	8002272 <test_gps_coords+0x26>
			lcdout_printf("NO GPS LOCK %d", 12);
 800226a:	210c      	movs	r1, #12
 800226c:	481c      	ldr	r0, [pc, #112]	@ (80022e0 <test_gps_coords+0x94>)
 800226e:	f7ff fde1 	bl	8001e34 <lcdout_printf>
		last_status=latestgnrmc.status;
 8002272:	7c7a      	ldrb	r2, [r7, #17]
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <test_gps_coords+0x90>)
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e02d      	b.n	80022d6 <test_gps_coords+0x8a>
		return;
	}
	last_status=latestgnrmc.status;
 800227a:	7c7a      	ldrb	r2, [r7, #17]
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <test_gps_coords+0x90>)
 800227e:	701a      	strb	r2, [r3, #0]

	BUZZER_put(1000);
 8002280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002284:	f000 f946 	bl	8002514 <BUZZER_put>
	double x, y;
	x = lonDMtoM(&latestgnrmc)/60.0;
 8002288:	463b      	mov	r3, r7
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f878 	bl	8002380 <lonDMtoM>
 8002290:	ec51 0b10 	vmov	r0, r1, d0
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <test_gps_coords+0x98>)
 800229a:	f7fe fad7 	bl	800084c <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	y = latDMtoM(&latestgnrmc)/60.0;
 80022a6:	463b      	mov	r3, r7
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f8d9 	bl	8002460 <latDMtoM>
 80022ae:	ec51 0b10 	vmov	r0, r1, d0
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <test_gps_coords+0x98>)
 80022b8:	f7fe fac8 	bl	800084c <__aeabi_ddiv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	lcdout_printf("X: %f\nY: %f\n", x, y);
 80022c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022c8:	e9cd 2300 	strd	r2, r3, [sp]
 80022cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <test_gps_coords+0x9c>)
 80022d2:	f7ff fdaf 	bl	8001e34 <lcdout_printf>
}
 80022d6:	3758      	adds	r7, #88	@ 0x58
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000684 	.word	0x20000684
 80022e0:	080157d4 	.word	0x080157d4
 80022e4:	404e0000 	.word	0x404e0000
 80022e8:	080157e4 	.word	0x080157e4

080022ec <Student_task1>:

void Student_task1 (void *argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b098      	sub	sp, #96	@ 0x60
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	student_SemaphoreWaypoints = xSemaphoreCreateMutex();
 80022f4:	2001      	movs	r0, #1
 80022f6:	f00a fc50 	bl	800cb9a <xQueueCreateMutex>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002368 <Student_task1+0x7c>)
 80022fe:	6013      	str	r3, [r2, #0]
	lcdout_init();
 8002300:	f7ff fd8c 	bl	8001e1c <lcdout_init>
	waypointsReset();
 8002304:	f7ff ff78 	bl	80021f8 <waypointsReset>
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002308:	4818      	ldr	r0, [pc, #96]	@ (800236c <Student_task1+0x80>)
 800230a:	f000 fc5f 	bl	8002bcc <UART_puts>
 800230e:	4818      	ldr	r0, [pc, #96]	@ (8002370 <Student_task1+0x84>)
 8002310:	f000 fc5c 	bl	8002bcc <UART_puts>
	globalVec.x=0;
 8002314:	4917      	ldr	r1, [pc, #92]	@ (8002374 <Student_task1+0x88>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c1 2300 	strd	r2, r3, [r1]
	globalVec.y=0;
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <Student_task1+0x88>)
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	char buf[80];
	unsigned int i = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(100);
 8002334:	2064      	movs	r0, #100	@ 0x64
 8002336:	f009 fee1 	bl	800c0fc <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <Student_task1+0x8c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <Student_task1+0x76>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8002346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800234c:	f107 000c 	add.w	r0, r7, #12
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <Student_task1+0x80>)
 8002352:	490a      	ldr	r1, [pc, #40]	@ (800237c <Student_task1+0x90>)
 8002354:	f00f ffb2 	bl	80122bc <siprintf>
			UART_puts(buf);
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fc35 	bl	8002bcc <UART_puts>
    	}
		test_gps_coords();
 8002362:	f7ff ff73 	bl	800224c <test_gps_coords>
       	osDelay(100);
 8002366:	e7e5      	b.n	8002334 <Student_task1+0x48>
 8002368:	20000680 	.word	0x20000680
 800236c:	080158c0 	.word	0x080158c0
 8002370:	080157f4 	.word	0x080157f4
 8002374:	20000670 	.word	0x20000670
 8002378:	20000444 	.word	0x20000444
 800237c:	08015800 	.word	0x08015800

08002380 <lonDMtoM>:

	}
}

double lonDMtoM(GNRMC *gnrmc)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	char *lon=gnrmc->longitude;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	331d      	adds	r3, #29
 800238c:	617b      	str	r3, [r7, #20]
	char lonEW=gnrmc->EW_ind;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002394:	74fb      	strb	r3, [r7, #19]
	double minX=0;
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char* pEnd;
    minX=(*lon-'0')*6000;          //10^2*60
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3b30      	subs	r3, #48	@ 0x30
 80023a8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8b7 	bl	8000524 <__aeabi_i2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+1)-'0')*600;      //10^1*60
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3b30      	subs	r3, #48	@ 0x30
 80023c6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8a8 	bl	8000524 <__aeabi_i2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023dc:	f7fd ff56 	bl	800028c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=(*(lon+2)-'0')*60;       //10^0*60
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3302      	adds	r3, #2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f892 	bl	8000524 <__aeabi_i2d>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002408:	f7fd ff40 	bl	800028c <__adddf3>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minX+=strtod(lon+3,&pEnd);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3303      	adds	r3, #3
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f00f f9a2 	bl	8011768 <strtod>
 8002424:	ec53 2b10 	vmov	r2, r3, d0
 8002428:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800242c:	f7fd ff2e 	bl	800028c <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(lonEW=='W')
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b57      	cmp	r3, #87	@ 0x57
 800243c:	d105      	bne.n	800244a <lonDMtoM+0xca>
    	minX=minX*-1;
 800243e:	69bc      	ldr	r4, [r7, #24]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002446:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minX;
 800244a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002452:	eeb0 0a47 	vmov.f32	s0, s14
 8002456:	eef0 0a67 	vmov.f32	s1, s15
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bdb0      	pop	{r4, r5, r7, pc}

08002460 <latDMtoM>:

double latDMtoM(GNRMC *gnrmc)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	char *lat=gnrmc->latitude;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3312      	adds	r3, #18
 800246c:	617b      	str	r3, [r7, #20]
	char latNS=gnrmc->NS_ind;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7f1b      	ldrb	r3, [r3, #28]
 8002472:	74fb      	strb	r3, [r7, #19]
	double minY=0;
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	char* pEnd;
    minY=(*lat-'0')*600;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3b30      	subs	r3, #48	@ 0x30
 8002486:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f848 	bl	8000524 <__aeabi_i2d>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=(*(lat+1)-'0')*60;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f838 	bl	8000524 <__aeabi_i2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024bc:	f7fd fee6 	bl	800028c <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    minY+=strtod(lat+2,&pEnd);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3302      	adds	r3, #2
 80024cc:	f107 020c 	add.w	r2, r7, #12
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00f f948 	bl	8011768 <strtod>
 80024d8:	ec53 2b10 	vmov	r2, r3, d0
 80024dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e0:	f7fd fed4 	bl	800028c <__adddf3>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(latNS=='S')
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b53      	cmp	r3, #83	@ 0x53
 80024f0:	d105      	bne.n	80024fe <latDMtoM+0x9e>
    	minY=minY*-1;
 80024f2:	69bc      	ldr	r4, [r7, #24]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80024fa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    return minY;
 80024fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002502:	ec43 2b17 	vmov	d7, r2, r3
}
 8002506:	eeb0 0a47 	vmov.f32	s0, s14
 800250a:	eef0 0a67 	vmov.f32	s1, s15
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bdb0      	pop	{r4, r5, r7, pc}

08002514 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002520:	e023      	b.n	800256a <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002522:	2201      	movs	r2, #1
 8002524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002528:	4815      	ldr	r0, [pc, #84]	@ (8002580 <BUZZER_put+0x6c>)
 800252a:	f001 fe6d 	bl	8004208 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	e002      	b.n	800253a <BUZZER_put+0x26>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3301      	adds	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	441a      	add	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	d8f6      	bhi.n	8002534 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <BUZZER_put+0x6c>)
 800254e:	f001 fe5b 	bl	8004208 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e002      	b.n	800255e <BUZZER_put+0x4a>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	429a      	cmp	r2, r3
 8002568:	d8f6      	bhi.n	8002558 <BUZZER_put+0x44>
	while (k++<100)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	60ba      	str	r2, [r7, #8]
 8002570:	2b63      	cmp	r3, #99	@ 0x63
 8002572:	d9d6      	bls.n	8002522 <BUZZER_put+0xe>
	}
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40020800 	.word	0x40020800

08002584 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <KEYS_init+0x6c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <KEYS_init+0x6c>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <KEYS_init+0x6c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 80025b2:	f640 030e 	movw	r3, #2062	@ 0x80e
 80025b6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <KEYS_init+0x70>)
 80025be:	f001 fc6f 	bl	8003ea0 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 80025c2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80025c6:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 80025cc:	2302      	movs	r3, #2
 80025ce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <KEYS_init+0x70>)
 80025d6:	f001 fc63 	bl	8003ea0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	f640 010e 	movw	r1, #2062	@ 0x80e
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <KEYS_init+0x70>)
 80025e2:	f001 fe11 	bl	8004208 <HAL_GPIO_WritePin>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020c00 	.word	0x40020c00

080025f8 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800260a:	480e      	ldr	r0, [pc, #56]	@ (8002644 <KEYS_initISR+0x4c>)
 800260c:	f001 fdfc 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	2102      	movs	r1, #2
 8002618:	480a      	ldr	r0, [pc, #40]	@ (8002644 <KEYS_initISR+0x4c>)
 800261a:	f001 fdf5 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	2108      	movs	r1, #8
 8002626:	4807      	ldr	r0, [pc, #28]	@ (8002644 <KEYS_initISR+0x4c>)
 8002628:	f001 fdee 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	2104      	movs	r1, #4
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <KEYS_initISR+0x4c>)
 8002636:	f001 fde7 	bl	8004208 <HAL_GPIO_WritePin>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40020c00 	.word	0x40020c00

08002648 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800265c:	4827      	ldr	r0, [pc, #156]	@ (80026fc <KEYS_read+0xb4>)
 800265e:	f001 fdd3 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 8002662:	2201      	movs	r2, #1
 8002664:	2108      	movs	r1, #8
 8002666:	4825      	ldr	r0, [pc, #148]	@ (80026fc <KEYS_read+0xb4>)
 8002668:	f001 fdce 	bl	8004208 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800266c:	f000 f848 	bl	8002700 <KEYS_kolom>
 8002670:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <KEYS_read+0x36>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2108      	movs	r1, #8
 8002682:	481e      	ldr	r0, [pc, #120]	@ (80026fc <KEYS_read+0xb4>)
 8002684:	f001 fdc0 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 8002688:	2201      	movs	r2, #1
 800268a:	2104      	movs	r1, #4
 800268c:	481b      	ldr	r0, [pc, #108]	@ (80026fc <KEYS_read+0xb4>)
 800268e:	f001 fdbb 	bl	8004208 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002692:	f000 f835 	bl	8002700 <KEYS_kolom>
 8002696:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <KEYS_read+0x5c>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	3308      	adds	r3, #8
 80026a2:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2104      	movs	r1, #4
 80026a8:	4814      	ldr	r0, [pc, #80]	@ (80026fc <KEYS_read+0xb4>)
 80026aa:	f001 fdad 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 80026ae:	2201      	movs	r2, #1
 80026b0:	2102      	movs	r1, #2
 80026b2:	4812      	ldr	r0, [pc, #72]	@ (80026fc <KEYS_read+0xb4>)
 80026b4:	f001 fda8 	bl	8004208 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026b8:	f000 f822 	bl	8002700 <KEYS_kolom>
 80026bc:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <KEYS_read+0x82>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3304      	adds	r3, #4
 80026c8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2102      	movs	r1, #2
 80026ce:	480b      	ldr	r0, [pc, #44]	@ (80026fc <KEYS_read+0xb4>)
 80026d0:	f001 fd9a 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026da:	4808      	ldr	r0, [pc, #32]	@ (80026fc <KEYS_read+0xb4>)
 80026dc:	f001 fd94 	bl	8004208 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026e0:	f000 f80e 	bl	8002700 <KEYS_kolom>
 80026e4:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <KEYS_read+0xa8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	607b      	str	r3, [r7, #4]

	return out;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40020c00 	.word	0x40020c00

08002700 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 800270a:	2140      	movs	r1, #64	@ 0x40
 800270c:	4814      	ldr	r0, [pc, #80]	@ (8002760 <KEYS_kolom+0x60>)
 800270e:	f001 fd63 	bl	80041d8 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <KEYS_kolom+0x1c>
 8002718:	2301      	movs	r3, #1
 800271a:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	4810      	ldr	r0, [pc, #64]	@ (8002760 <KEYS_kolom+0x60>)
 8002720:	f001 fd5a 	bl	80041d8 <HAL_GPIO_ReadPin>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <KEYS_kolom+0x2e>
 800272a:	2302      	movs	r3, #2
 800272c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 800272e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002732:	480b      	ldr	r0, [pc, #44]	@ (8002760 <KEYS_kolom+0x60>)
 8002734:	f001 fd50 	bl	80041d8 <HAL_GPIO_ReadPin>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <KEYS_kolom+0x42>
 800273e:	2303      	movs	r3, #3
 8002740:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8002742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002746:	4806      	ldr	r0, [pc, #24]	@ (8002760 <KEYS_kolom+0x60>)
 8002748:	f001 fd46 	bl	80041d8 <HAL_GPIO_ReadPin>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <KEYS_kolom+0x56>
 8002752:	2304      	movs	r3, #4
 8002754:	607b      	str	r3, [r7, #4]
	return key;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40020c00 	.word	0x40020c00

08002764 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2108      	movs	r1, #8
 800276c:	4809      	ldr	r0, [pc, #36]	@ (8002794 <ClearBits+0x30>)
 800276e:	f001 fd4b 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	2110      	movs	r1, #16
 8002776:	4807      	ldr	r0, [pc, #28]	@ (8002794 <ClearBits+0x30>)
 8002778:	f001 fd46 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	2120      	movs	r1, #32
 8002780:	4804      	ldr	r0, [pc, #16]	@ (8002794 <ClearBits+0x30>)
 8002782:	f001 fd41 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	2140      	movs	r1, #64	@ 0x40
 800278a:	4802      	ldr	r0, [pc, #8]	@ (8002794 <ClearBits+0x30>)
 800278c:	f001 fd3c 	bl	8004208 <HAL_GPIO_WritePin>
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;
}

void LCD_clear(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 800279c:	2001      	movs	r0, #1
 800279e:	f000 f997 	bl	8002ad0 <LCD_writecontrol>
   curpos=0;               // reset position
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <LCD_clear+0x1c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 80027a8:	2005      	movs	r0, #5
 80027aa:	f001 f9e1 	bl	8003b70 <HAL_Delay>
//   busyflag();
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000685 	.word	0x20000685

080027b8 <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d013      	beq.n	80027f0 <LCD_XY+0x38>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d815      	bhi.n	80027fa <LCD_XY+0x42>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <LCD_XY+0x24>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <LCD_XY+0x2e>
 80027da:	e00e      	b.n	80027fa <LCD_XY+0x42>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3b80      	subs	r3, #128	@ 0x80
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e00e      	b.n	8002804 <LCD_XY+0x4c>
	case 1:  data = (1<<7)+0x40+x; break;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3b40      	subs	r3, #64	@ 0x40
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e009      	b.n	8002804 <LCD_XY+0x4c>
	case 2:  data = (1<<7)+0x14+x; break;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3b6c      	subs	r3, #108	@ 0x6c
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e004      	b.n	8002804 <LCD_XY+0x4c>
	default: data = (1<<7)+0x54+x; break;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	3b2c      	subs	r3, #44	@ 0x2c
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	bf00      	nop
	}
	LCD_writecontrol(data);
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f962 	bl	8002ad0 <LCD_writecontrol>
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <LCD_init+0x11c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <LCD_init+0x11c>)
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <LCD_init+0x11c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <LCD_init+0x11c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a3c      	ldr	r2, [pc, #240]	@ (8002930 <LCD_init+0x11c>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <LCD_init+0x11c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <LCD_init+0x11c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a35      	ldr	r2, [pc, #212]	@ (8002930 <LCD_init+0x11c>)
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <LCD_init+0x11c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800287a:	2378      	movs	r3, #120	@ 0x78
 800287c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	482b      	ldr	r0, [pc, #172]	@ (8002934 <LCD_init+0x120>)
 8002886:	f001 fb0b 	bl	8003ea0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 800288a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800288e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4619      	mov	r1, r3
 8002896:	4828      	ldr	r0, [pc, #160]	@ (8002938 <LCD_init+0x124>)
 8002898:	f001 fb02 	bl	8003ea0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 800289c:	2301      	movs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4825      	ldr	r0, [pc, #148]	@ (800293c <LCD_init+0x128>)
 80028a8:	f001 fafa 	bl	8003ea0 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b2:	4821      	ldr	r0, [pc, #132]	@ (8002938 <LCD_init+0x124>)
 80028b4:	f001 fca8 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2101      	movs	r1, #1
 80028bc:	481f      	ldr	r0, [pc, #124]	@ (800293c <LCD_init+0x128>)
 80028be:	f001 fca3 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c8:	481b      	ldr	r0, [pc, #108]	@ (8002938 <LCD_init+0x124>)
 80028ca:	f001 fc9d 	bl	8004208 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80028ce:	200f      	movs	r0, #15
 80028d0:	f001 f94e 	bl	8003b70 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80028d4:	2030      	movs	r0, #48	@ 0x30
 80028d6:	f000 f8c7 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(70);
 80028da:	2046      	movs	r0, #70	@ 0x46
 80028dc:	f001 f948 	bl	8003b70 <HAL_Delay>
    LCD_writebyte(0x30);
 80028e0:	2030      	movs	r0, #48	@ 0x30
 80028e2:	f000 f8c1 	bl	8002a68 <LCD_writebyte>
    LCD_writebyte(0x30);
 80028e6:	2030      	movs	r0, #48	@ 0x30
 80028e8:	f000 f8be 	bl	8002a68 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f000 f8bb 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(5);
 80028f2:	2005      	movs	r0, #5
 80028f4:	f001 f93c 	bl	8003b70 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 80028f8:	202c      	movs	r0, #44	@ 0x2c
 80028fa:	f000 f8b5 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 80028fe:	200f      	movs	r0, #15
 8002900:	f001 f936 	bl	8003b70 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002904:	200c      	movs	r0, #12
 8002906:	f000 f8af 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 800290a:	200f      	movs	r0, #15
 800290c:	f001 f930 	bl	8003b70 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002910:	2001      	movs	r0, #1
 8002912:	f000 f8a9 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 8002916:	200f      	movs	r0, #15
 8002918:	f001 f92a 	bl	8003b70 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 800291c:	2006      	movs	r0, #6
 800291e:	f000 f8a3 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 8002922:	200f      	movs	r0, #15
 8002924:	f001 f924 	bl	8003b70 <HAL_Delay>
}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	40021000 	.word	0x40021000
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00

08002940 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 800294a:	2201      	movs	r2, #1
 800294c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002950:	480b      	ldr	r0, [pc, #44]	@ (8002980 <LCD_putchar+0x40>)
 8002952:	f001 fc59 	bl	8004208 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f885 	bl	8002a68 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <LCD_putchar+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <LCD_putchar+0x44>)
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <LCD_putchar+0x44>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b20      	cmp	r3, #32
 8002970:	d102      	bne.n	8002978 <LCD_putchar+0x38>
    	curpos=0;
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <LCD_putchar+0x44>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40020800 	.word	0x40020800
 8002984:	20000685 	.word	0x20000685

08002988 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
 8002994:	e019      	b.n	80029ca <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <LCD_put+0x58>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b08      	cmp	r3, #8
 800299c:	d10b      	bne.n	80029b6 <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e005      	b.n	80029b0 <LCD_put+0x28>
 80029a4:	2014      	movs	r0, #20
 80029a6:	f000 f893 	bl	8002ad0 <LCD_writecontrol>
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	3301      	adds	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b1f      	cmp	r3, #31
 80029b4:	d9f6      	bls.n	80029a4 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffbe 	bl	8002940 <LCD_putchar>
    for (k=0; string[k]; k++)
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73bb      	strb	r3, [r7, #14]
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1df      	bne.n	8002996 <LCD_put+0xe>
    }

}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000685 	.word	0x20000685

080029e4 <LCD_puts>:

void LCD_puts(char *c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ffcb 	bl	8002988 <LCD_put>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8002a06:	f7ff fead 	bl	8002764 <ClearBits>

    if (data & 0x01)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2140      	movs	r1, #64	@ 0x40
 8002a18:	4812      	ldr	r0, [pc, #72]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a1a:	f001 fbf5 	bl	8004208 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a2e:	f001 fbeb 	bl	8004208 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2110      	movs	r1, #16
 8002a40:	4808      	ldr	r0, [pc, #32]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a42:	f001 fbe1 	bl	8004208 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2108      	movs	r1, #8
 8002a54:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a56:	f001 fbd7 	bl	8004208 <HAL_GPIO_WritePin>

}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	const TickType_t xDelay = 2 / portTICK_PERIOD_MS;
 8002a72:	2302      	movs	r3, #2
 8002a74:	60fb      	str	r3, [r7, #12]

    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4814      	ldr	r0, [pc, #80]	@ (8002acc <LCD_writebyte+0x64>)
 8002a7c:	f001 fbc4 	bl	8004208 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ffb8 	bl	80029fc <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2101      	movs	r1, #1
 8002a90:	480e      	ldr	r0, [pc, #56]	@ (8002acc <LCD_writebyte+0x64>)
 8002a92:	f001 fbb9 	bl	8004208 <HAL_GPIO_WritePin>

    //HAL_Delay(2);
    vTaskDelay(xDelay);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f00b f864 	bl	800db64 <vTaskDelay>
    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	480a      	ldr	r0, [pc, #40]	@ (8002acc <LCD_writebyte+0x64>)
 8002aa2:	f001 fbb1 	bl	8004208 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffa4 	bl	80029fc <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4804      	ldr	r0, [pc, #16]	@ (8002acc <LCD_writebyte+0x64>)
 8002aba:	f001 fba5 	bl	8004208 <HAL_GPIO_WritePin>

    //HAL_Delay(2);
    vTaskDelay(xDelay);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f00b f850 	bl	800db64 <vTaskDelay>
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40020c00 	.word	0x40020c00

08002ad0 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ae0:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <LCD_writecontrol+0x28>)
 8002ae2:	f001 fb91 	bl	8004208 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ffbd 	bl	8002a68 <LCD_writebyte>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40020800 	.word	0x40020800

08002afc <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b06:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <LED_init+0x30>)
 8002b08:	f001 fb7e 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b12:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <LED_init+0x34>)
 8002b14:	f001 fb78 	bl	8004208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4804      	ldr	r0, [pc, #16]	@ (8002b30 <LED_init+0x34>)
 8002b1e:	f001 fb73 	bl	8004208 <HAL_GPIO_WritePin>
    LED_put(0);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f806 	bl	8002b34 <LED_put>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400

08002b34 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e01c      	b.n	8002b7e <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b5a:	4811      	ldr	r0, [pc, #68]	@ (8002ba0 <LED_put+0x6c>)
 8002b5c:	f001 fb54 	bl	8004208 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002b60:	2201      	movs	r2, #1
 8002b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b66:	480f      	ldr	r0, [pc, #60]	@ (8002ba4 <LED_put+0x70>)
 8002b68:	f001 fb4e 	bl	8004208 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b72:	480c      	ldr	r0, [pc, #48]	@ (8002ba4 <LED_put+0x70>)
 8002b74:	f001 fb48 	bl	8004208 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1df      	bne.n	8002b44 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	2102      	movs	r1, #2
 8002b88:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <LED_put+0x70>)
 8002b8a:	f001 fb3d 	bl	8004208 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2102      	movs	r1, #2
 8002b92:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <LED_put+0x70>)
 8002b94:	f001 fb38 	bl	8004208 <HAL_GPIO_WritePin>
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002bb2:	1df9      	adds	r1, r7, #7
 8002bb4:	2364      	movs	r3, #100	@ 0x64
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <UART_putchar+0x20>)
 8002bba:	f004 fef8 	bl	80079ae <HAL_UART_Transmit>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200007c0 	.word	0x200007c0

08002bcc <UART_puts>:

void UART_puts(const char *s)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e009      	b.n	8002bee <UART_puts+0x22>
		UART_putchar(s[i]);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffe0 	bl	8002ba8 <UART_putchar>
	for (i=0; s[i]; i++)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <UART_puts+0xe>
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002c0c:	210a      	movs	r1, #10
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f804 	bl	8002c1c <UART_putnum>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d129      	bne.n	8002c86 <UART_putnum+0x6a>
    {
        c[i]='0';
 8002c32:	f107 0208 	add.w	r2, r7, #8
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2230      	movs	r2, #48	@ 0x30
 8002c3c:	701a      	strb	r2, [r3, #0]
        i--;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e030      	b.n	8002ca8 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c4e:	fb01 f202 	mul.w	r2, r1, r2
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002c60:	4a15      	ldr	r2, [pc, #84]	@ (8002cb8 <UART_putnum+0x9c>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b259      	sxtb	r1, r3
 8002c6a:	f107 0208 	add.w	r2, r7, #8
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	460a      	mov	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]
            i--;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <UART_putnum+0x6a>
                num=0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1dc      	bne.n	8002c46 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002c8c:	e00c      	b.n	8002ca8 <UART_putnum+0x8c>
    {
        i++;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002c94:	f107 0208 	add.w	r2, r7, #8
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff80 	bl	8002ba8 <UART_putchar>
    while(i<15)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b0e      	cmp	r3, #14
 8002cac:	ddef      	ble.n	8002c8e <UART_putnum+0x72>
    }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000021c 	.word	0x2000021c

08002cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc0:	f000 ff14 	bl	8003aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc4:	f000 f830 	bl	8002d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc8:	f000 f980 	bl	8002fcc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ccc:	f000 f896 	bl	8002dfc <MX_I2C1_Init>
  MX_I2S3_Init();
 8002cd0:	f000 f8c2 	bl	8002e58 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002cd4:	f000 f8f0 	bl	8002eb8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002cd8:	f000 f94e 	bl	8002f78 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002cdc:	f000 f922 	bl	8002f24 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002ce0:	f7ff fd98 	bl	8002814 <LCD_init>
  KEYS_init();
 8002ce4:	f7ff fc4e 	bl	8002584 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7ff fc85 	bl	80025f8 <KEYS_initISR>
  LED_init();
 8002cee:	f7ff ff05 	bl	8002afc <LED_init>

  DisplayVersion();
 8002cf2:	f7fe fc19 	bl	8001528 <DisplayVersion>
  osDelay(500); // time to read version
 8002cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cfa:	f009 f9ff 	bl	800c0fc <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cfe:	f009 f8e3 	bl	800bec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d02:	4a06      	ldr	r2, [pc, #24]	@ (8002d1c <main+0x60>)
 8002d04:	2100      	movs	r1, #0
 8002d06:	4806      	ldr	r0, [pc, #24]	@ (8002d20 <main+0x64>)
 8002d08:	f009 f966 	bl	800bfd8 <osThreadNew>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <main+0x68>)
 8002d10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d12:	f009 f925 	bl	800bf60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d16:	bf00      	nop
 8002d18:	e7fd      	b.n	8002d16 <main+0x5a>
 8002d1a:	bf00      	nop
 8002d1c:	080158d0 	.word	0x080158d0
 8002d20:	080032f5 	.word	0x080032f5
 8002d24:	20000804 	.word	0x20000804

08002d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b094      	sub	sp, #80	@ 0x50
 8002d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2e:	f107 0320 	add.w	r3, r7, #32
 8002d32:	2230      	movs	r2, #48	@ 0x30
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00f fb5c 	bl	80123f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <SystemClock_Config+0xcc>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	4a27      	ldr	r2, [pc, #156]	@ (8002df4 <SystemClock_Config+0xcc>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <SystemClock_Config+0xcc>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <SystemClock_Config+0xd0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a21      	ldr	r2, [pc, #132]	@ (8002df8 <SystemClock_Config+0xd0>)
 8002d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <SystemClock_Config+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002da2:	2302      	movs	r3, #2
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002da6:	2307      	movs	r3, #7
 8002da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002daa:	f107 0320 	add.w	r3, r7, #32
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fc70 	bl	8006694 <HAL_RCC_OscConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dba:	f000 fadf 	bl	800337c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	2105      	movs	r1, #5
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fed1 	bl	8006b84 <HAL_RCC_ClockConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002de8:	f000 fac8 	bl	800337c <Error_Handler>
  }
}
 8002dec:	bf00      	nop
 8002dee:	3750      	adds	r7, #80	@ 0x50
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000

08002dfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e02:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <MX_I2C1_Init+0x54>)
 8002e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <MX_I2C1_Init+0x58>)
 8002e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <MX_I2C1_Init+0x50>)
 8002e3a:	f002 fe47 	bl	8005acc <HAL_I2C_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e44:	f000 fa9a 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000688 	.word	0x20000688
 8002e50:	40005400 	.word	0x40005400
 8002e54:	000186a0 	.word	0x000186a0

08002e58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e5e:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <MX_I2S3_Init+0x58>)
 8002e60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e80:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb4 <MX_I2S3_Init+0x5c>)
 8002e82:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_I2S3_Init+0x54>)
 8002e98:	f002 ff5c 	bl	8005d54 <HAL_I2S_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002ea2:	f000 fa6b 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200006dc 	.word	0x200006dc
 8002eb0:	40003c00 	.word	0x40003c00
 8002eb4:	00017700 	.word	0x00017700

08002eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ebc:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <MX_SPI1_Init+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ec2:	4b16      	ldr	r3, [pc, #88]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ec4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed0:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efc:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002f04:	220a      	movs	r2, #10
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f08:	4804      	ldr	r0, [pc, #16]	@ (8002f1c <MX_SPI1_Init+0x64>)
 8002f0a:	f004 f9cd 	bl	80072a8 <HAL_SPI_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f14:	f000 fa32 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000724 	.word	0x20000724
 8002f20:	40013000 	.word	0x40013000

08002f24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <MX_UART4_Init+0x50>)
 8002f2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f5a:	4805      	ldr	r0, [pc, #20]	@ (8002f70 <MX_UART4_Init+0x4c>)
 8002f5c:	f004 fcda 	bl	8007914 <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f66:	f000 fa09 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	2000077c 	.word	0x2000077c
 8002f74:	40004c00 	.word	0x40004c00

08002f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f7e:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <MX_USART2_UART_Init+0x50>)
 8002f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fae:	4805      	ldr	r0, [pc, #20]	@ (8002fc4 <MX_USART2_UART_Init+0x4c>)
 8002fb0:	f004 fcb0 	bl	8007914 <HAL_UART_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fba:	f000 f9df 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200007c0 	.word	0x200007c0
 8002fc8:	40004400 	.word	0x40004400

08002fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd2:	f107 031c 	add.w	r3, r7, #28
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
 8002fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8003220 <MX_GPIO_Init+0x254>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a8d      	ldr	r2, [pc, #564]	@ (8003220 <MX_GPIO_Init+0x254>)
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8003220 <MX_GPIO_Init+0x254>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	4b87      	ldr	r3, [pc, #540]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a86      	ldr	r2, [pc, #536]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b84      	ldr	r3, [pc, #528]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a7f      	ldr	r2, [pc, #508]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b7d      	ldr	r3, [pc, #500]	@ (8003220 <MX_GPIO_Init+0x254>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b79      	ldr	r3, [pc, #484]	@ (8003220 <MX_GPIO_Init+0x254>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a78      	ldr	r2, [pc, #480]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	4b72      	ldr	r3, [pc, #456]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a71      	ldr	r2, [pc, #452]	@ (8003220 <MX_GPIO_Init+0x254>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	4b6b      	ldr	r3, [pc, #428]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a6a      	ldr	r2, [pc, #424]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b68      	ldr	r3, [pc, #416]	@ (8003220 <MX_GPIO_Init+0x254>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800308a:	2200      	movs	r2, #0
 800308c:	2108      	movs	r1, #8
 800308e:	4865      	ldr	r0, [pc, #404]	@ (8003224 <MX_GPIO_Init+0x258>)
 8003090:	f001 f8ba 	bl	8004208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003094:	2201      	movs	r2, #1
 8003096:	2101      	movs	r1, #1
 8003098:	4863      	ldr	r0, [pc, #396]	@ (8003228 <MX_GPIO_Init+0x25c>)
 800309a:	f001 f8b5 	bl	8004208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80030a4:	4861      	ldr	r0, [pc, #388]	@ (800322c <MX_GPIO_Init+0x260>)
 80030a6:	f001 f8af 	bl	8004208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030aa:	2200      	movs	r2, #0
 80030ac:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80030b0:	485f      	ldr	r0, [pc, #380]	@ (8003230 <MX_GPIO_Init+0x264>)
 80030b2:	f001 f8a9 	bl	8004208 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030bc:	485a      	ldr	r0, [pc, #360]	@ (8003228 <MX_GPIO_Init+0x25c>)
 80030be:	f001 f8a3 	bl	8004208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030c8:	485a      	ldr	r0, [pc, #360]	@ (8003234 <MX_GPIO_Init+0x268>)
 80030ca:	f001 f89d 	bl	8004208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80030ce:	2308      	movs	r3, #8
 80030d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	484f      	ldr	r0, [pc, #316]	@ (8003224 <MX_GPIO_Init+0x258>)
 80030e6:	f000 fedb 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 80030ea:	f240 1301 	movw	r3, #257	@ 0x101
 80030ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	4619      	mov	r1, r3
 8003102:	4849      	ldr	r0, [pc, #292]	@ (8003228 <MX_GPIO_Init+0x25c>)
 8003104:	f000 fecc 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003108:	2308      	movs	r3, #8
 800310a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003118:	2305      	movs	r3, #5
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	4619      	mov	r1, r3
 8003122:	4841      	ldr	r0, [pc, #260]	@ (8003228 <MX_GPIO_Init+0x25c>)
 8003124:	f000 febc 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003128:	2301      	movs	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	483b      	ldr	r0, [pc, #236]	@ (800322c <MX_GPIO_Init+0x260>)
 800313e:	f000 feaf 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8003142:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4619      	mov	r1, r3
 800315a:	4834      	ldr	r0, [pc, #208]	@ (800322c <MX_GPIO_Init+0x260>)
 800315c:	f000 fea0 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003160:	2304      	movs	r3, #4
 8003162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4619      	mov	r1, r3
 8003172:	482e      	ldr	r0, [pc, #184]	@ (800322c <MX_GPIO_Init+0x260>)
 8003174:	f000 fe94 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800318a:	2305      	movs	r3, #5
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4825      	ldr	r0, [pc, #148]	@ (800322c <MX_GPIO_Init+0x260>)
 8003196:	f000 fe83 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800319a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800319e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	481f      	ldr	r0, [pc, #124]	@ (8003230 <MX_GPIO_Init+0x264>)
 80031b4:	f000 fe74 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80031b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	2301      	movs	r3, #1
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	4619      	mov	r1, r3
 80031d0:	4818      	ldr	r0, [pc, #96]	@ (8003234 <MX_GPIO_Init+0x268>)
 80031d2:	f000 fe65 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031d6:	2320      	movs	r3, #32
 80031d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	4619      	mov	r1, r3
 80031e8:	4811      	ldr	r0, [pc, #68]	@ (8003230 <MX_GPIO_Init+0x264>)
 80031ea:	f000 fe59 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031ee:	2302      	movs	r3, #2
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4808      	ldr	r0, [pc, #32]	@ (8003224 <MX_GPIO_Init+0x258>)
 8003204:	f000 fe4c 	bl	8003ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003208:	2200      	movs	r2, #0
 800320a:	2105      	movs	r1, #5
 800320c:	2006      	movs	r0, #6
 800320e:	f000 fd8b 	bl	8003d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003212:	2006      	movs	r0, #6
 8003214:	f000 fda4 	bl	8003d60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003218:	bf00      	nop
 800321a:	3730      	adds	r7, #48	@ 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	40021000 	.word	0x40021000
 8003228:	40020800 	.word	0x40020800
 800322c:	40020400 	.word	0x40020400
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40020000 	.word	0x40020000

08003238 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a23      	ldr	r2, [pc, #140]	@ (80032d8 <HAL_UART_RxCpltCallback+0xa0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d11d      	bne.n	800328a <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 800324e:	f107 030e 	add.w	r3, r7, #14
 8003252:	2201      	movs	r2, #1
 8003254:	4619      	mov	r1, r3
 8003256:	4821      	ldr	r0, [pc, #132]	@ (80032dc <HAL_UART_RxCpltCallback+0xa4>)
 8003258:	f004 fc3b 	bl	8007ad2 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 800325c:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <HAL_UART_RxCpltCallback+0xa8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	f107 0208 	add.w	r2, r7, #8
 8003264:	f107 010e 	add.w	r1, r7, #14
 8003268:	2300      	movs	r3, #0
 800326a:	f009 fdb1 	bl	800cdd0 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_UART_RxCpltCallback+0x52>
 800327a:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <HAL_UART_RxCpltCallback+0xac>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <HAL_UART_RxCpltCallback+0xb0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d11d      	bne.n	80032d0 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8003294:	f107 030f 	add.w	r3, r7, #15
 8003298:	2201      	movs	r2, #1
 800329a:	4619      	mov	r1, r3
 800329c:	4813      	ldr	r0, [pc, #76]	@ (80032ec <HAL_UART_RxCpltCallback+0xb4>)
 800329e:	f004 fc18 	bl	8007ad2 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 80032a2:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <HAL_UART_RxCpltCallback+0xb8>)
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	f107 0208 	add.w	r2, r7, #8
 80032aa:	f107 010f 	add.w	r1, r7, #15
 80032ae:	2300      	movs	r3, #0
 80032b0:	f009 fd8e 	bl	800cdd0 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_UART_RxCpltCallback+0x98>
 80032c0:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_UART_RxCpltCallback+0xac>)
 80032c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
	}

}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40004400 	.word	0x40004400
 80032dc:	200007c0 	.word	0x200007c0
 80032e0:	20000448 	.word	0x20000448
 80032e4:	e000ed04 	.word	0xe000ed04
 80032e8:	40004c00 	.word	0x40004c00
 80032ec:	2000077c 	.word	0x2000077c
 80032f0:	2000044c 	.word	0x2000044c

080032f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80032fc:	f00d f86c 	bl	80103d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8003300:	f7fe f998 	bl	8001634 <CreateHandles>
  CreateTasks();
 8003304:	f7fe fa26 	bl	8001754 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8003308:	f107 030e 	add.w	r3, r7, #14
 800330c:	2201      	movs	r2, #1
 800330e:	4619      	mov	r1, r3
 8003310:	480d      	ldr	r0, [pc, #52]	@ (8003348 <StartDefaultTask+0x54>)
 8003312:	f004 fbde 	bl	8007ad2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART1 interrupt engine GPS
 8003316:	f107 030f 	add.w	r3, r7, #15
 800331a:	2201      	movs	r2, #1
 800331c:	4619      	mov	r1, r3
 800331e:	480b      	ldr	r0, [pc, #44]	@ (800334c <StartDefaultTask+0x58>)
 8003320:	f004 fbd7 	bl	8007ad2 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte is nog een bug.
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fc6c 	bl	8002c04 <UART_putint>
 800332c:	4808      	ldr	r0, [pc, #32]	@ (8003350 <StartDefaultTask+0x5c>)
 800332e:	f7ff fc4d 	bl	8002bcc <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003332:	2001      	movs	r0, #1
 8003334:	f008 fee2 	bl	800c0fc <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <StartDefaultTask+0x60>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f00a fb9d 	bl	800da7c <vTaskDelete>
    osDelay(1);
 8003342:	bf00      	nop
 8003344:	e7f5      	b.n	8003332 <StartDefaultTask+0x3e>
 8003346:	bf00      	nop
 8003348:	200007c0 	.word	0x200007c0
 800334c:	2000077c 	.word	0x2000077c
 8003350:	08015818 	.word	0x08015818
 8003354:	20000804 	.word	0x20000804

08003358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800336a:	f000 fbe1 	bl	8003b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000

0800337c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
}
 8003382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <Error_Handler+0x8>

08003388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_MspInit+0x54>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_MspInit+0x54>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339c:	6453      	str	r3, [r2, #68]	@ 0x44
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_MspInit+0x54>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_MspInit+0x54>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <HAL_MspInit+0x54>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <HAL_MspInit+0x54>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	210f      	movs	r1, #15
 80033ca:	f06f 0001 	mvn.w	r0, #1
 80033ce:	f000 fcab 	bl	8003d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_I2C_MspInit+0x84>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12c      	bne.n	800345c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	4a17      	ldr	r2, [pc, #92]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6313      	str	r3, [r2, #48]	@ 0x30
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800341e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003424:	2312      	movs	r3, #18
 8003426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003428:	2301      	movs	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003430:	2304      	movs	r3, #4
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	480c      	ldr	r0, [pc, #48]	@ (800346c <HAL_I2C_MspInit+0x8c>)
 800343c:	f000 fd30 	bl	8003ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 800344a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800344e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_I2C_MspInit+0x88>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	@ 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40005400 	.word	0x40005400
 8003468:	40023800 	.word	0x40023800
 800346c:	40020400 	.word	0x40020400

08003470 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	@ 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a31      	ldr	r2, [pc, #196]	@ (8003560 <HAL_I2S_MspInit+0xf0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d15a      	bne.n	8003556 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80034a0:	2301      	movs	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80034a4:	23c0      	movs	r3, #192	@ 0xc0
 80034a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fdb9 	bl	8007028 <HAL_RCCEx_PeriphCLKConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80034bc:	f7ff ff5e 	bl	800337c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d0:	4b24      	ldr	r3, [pc, #144]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6313      	str	r3, [r2, #48]	@ 0x30
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <HAL_I2S_MspInit+0xf4>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003514:	2310      	movs	r3, #16
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2300      	movs	r3, #0
 8003522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003524:	2306      	movs	r3, #6
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	480e      	ldr	r0, [pc, #56]	@ (8003568 <HAL_I2S_MspInit+0xf8>)
 8003530:	f000 fcb6 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003534:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003546:	2306      	movs	r3, #6
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354e:	4619      	mov	r1, r3
 8003550:	4806      	ldr	r0, [pc, #24]	@ (800356c <HAL_I2S_MspInit+0xfc>)
 8003552:	f000 fca5 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003556:	bf00      	nop
 8003558:	3738      	adds	r7, #56	@ 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40003c00 	.word	0x40003c00
 8003564:	40023800 	.word	0x40023800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020800 	.word	0x40020800

08003570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <HAL_SPI_MspInit+0x84>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12b      	bne.n	80035ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b18      	ldr	r3, [pc, #96]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 800359c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a10      	ldr	r2, [pc, #64]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_SPI_MspInit+0x88>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035ca:	23e0      	movs	r3, #224	@ 0xe0
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035da:	2305      	movs	r3, #5
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4805      	ldr	r0, [pc, #20]	@ (80035fc <HAL_SPI_MspInit+0x8c>)
 80035e6:	f000 fc5b 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40013000 	.word	0x40013000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000

08003600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08c      	sub	sp, #48	@ 0x30
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3a      	ldr	r2, [pc, #232]	@ (8003708 <HAL_UART_MspInit+0x108>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d134      	bne.n	800368c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_UART_MspInit+0x10c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a38      	ldr	r2, [pc, #224]	@ (800370c <HAL_UART_MspInit+0x10c>)
 800362c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b36      	ldr	r3, [pc, #216]	@ (800370c <HAL_UART_MspInit+0x10c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	4b32      	ldr	r3, [pc, #200]	@ (800370c <HAL_UART_MspInit+0x10c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	4a31      	ldr	r2, [pc, #196]	@ (800370c <HAL_UART_MspInit+0x10c>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	@ 0x30
 800364e:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <HAL_UART_MspInit+0x10c>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800365a:	2303      	movs	r3, #3
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800366a:	2308      	movs	r3, #8
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	4826      	ldr	r0, [pc, #152]	@ (8003710 <HAL_UART_MspInit+0x110>)
 8003676:	f000 fc13 	bl	8003ea0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2105      	movs	r1, #5
 800367e:	2034      	movs	r0, #52	@ 0x34
 8003680:	f000 fb52 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003684:	2034      	movs	r0, #52	@ 0x34
 8003686:	f000 fb6b 	bl	8003d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800368a:	e038      	b.n	80036fe <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a20      	ldr	r2, [pc, #128]	@ (8003714 <HAL_UART_MspInit+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d133      	bne.n	80036fe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <HAL_UART_MspInit+0x10c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_UART_MspInit+0x10c>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a6:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_UART_MspInit+0x10c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_UART_MspInit+0x10c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	4a14      	ldr	r2, [pc, #80]	@ (800370c <HAL_UART_MspInit+0x10c>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_UART_MspInit+0x10c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036ce:	230c      	movs	r3, #12
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036de:	2307      	movs	r3, #7
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	4809      	ldr	r0, [pc, #36]	@ (8003710 <HAL_UART_MspInit+0x110>)
 80036ea:	f000 fbd9 	bl	8003ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2105      	movs	r1, #5
 80036f2:	2026      	movs	r0, #38	@ 0x26
 80036f4:	f000 fb18 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036f8:	2026      	movs	r0, #38	@ 0x26
 80036fa:	f000 fb31 	bl	8003d60 <HAL_NVIC_EnableIRQ>
}
 80036fe:	bf00      	nop
 8003700:	3730      	adds	r7, #48	@ 0x30
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40004c00 	.word	0x40004c00
 800370c:	40023800 	.word	0x40023800
 8003710:	40020000 	.word	0x40020000
 8003714:	40004400 	.word	0x40004400

08003718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	@ 0x30
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_InitTick+0xd4>)
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	4a2e      	ldr	r2, [pc, #184]	@ (80037ec <HAL_InitTick+0xd4>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6453      	str	r3, [r2, #68]	@ 0x44
 8003738:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <HAL_InitTick+0xd4>)
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003744:	f107 020c 	add.w	r2, r7, #12
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f003 fc38 	bl	8006fc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003754:	f003 fc22 	bl	8006f9c <HAL_RCC_GetPCLK2Freq>
 8003758:	4603      	mov	r3, r0
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003760:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_InitTick+0xd8>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	3b01      	subs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800376c:	4b21      	ldr	r3, [pc, #132]	@ (80037f4 <HAL_InitTick+0xdc>)
 800376e:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_InitTick+0xe0>)
 8003770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_InitTick+0xdc>)
 8003774:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003778:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_InitTick+0xdc>)
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003780:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <HAL_InitTick+0xdc>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_InitTick+0xdc>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_InitTick+0xdc>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003792:	4818      	ldr	r0, [pc, #96]	@ (80037f4 <HAL_InitTick+0xdc>)
 8003794:	f003 fe11 	bl	80073ba <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800379e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11b      	bne.n	80037de <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037a6:	4813      	ldr	r0, [pc, #76]	@ (80037f4 <HAL_InitTick+0xdc>)
 80037a8:	f003 fe60 	bl	800746c <HAL_TIM_Base_Start_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80037b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ba:	2019      	movs	r0, #25
 80037bc:	f000 fad0 	bl	8003d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d808      	bhi.n	80037d8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037c6:	2200      	movs	r2, #0
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	2019      	movs	r0, #25
 80037cc:	f000 faac 	bl	8003d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d0:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <HAL_InitTick+0xe4>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e002      	b.n	80037de <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3730      	adds	r7, #48	@ 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	20000808 	.word	0x20000808
 80037f8:	40010000 	.word	0x40010000
 80037fc:	20000230 	.word	0x20000230

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <NMI_Handler+0x4>

08003808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <MemManage_Handler+0x4>

08003818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <UsageFault_Handler+0x4>

08003828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 fd14 	bl	8004270 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8003848:	f7fe fefe 	bl	8002648 <KEYS_read>
 800384c:	4603      	mov	r3, r0
 800384e:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <EXTI0_IRQHandler+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	463a      	mov	r2, r7
 8003858:	4618      	mov	r0, r3
 800385a:	f008 ff77 	bl	800c74c <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 800385e:	2001      	movs	r0, #1
 8003860:	f7fe feca 	bl	80025f8 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <EXTI0_IRQHandler+0x48>
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <EXTI0_IRQHandler+0x5c>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003880:	2001      	movs	r0, #1
 8003882:	f000 fcf5 	bl	8004270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000454 	.word	0x20000454
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800389c:	4802      	ldr	r0, [pc, #8]	@ (80038a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800389e:	f003 fe55 	bl	800754c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000808 	.word	0x20000808

080038ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038b0:	4802      	ldr	r0, [pc, #8]	@ (80038bc <USART2_IRQHandler+0x10>)
 80038b2:	f004 f93f 	bl	8007b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200007c0 	.word	0x200007c0

080038c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <UART4_IRQHandler+0x10>)
 80038c6:	f004 f935 	bl	8007b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000077c 	.word	0x2000077c

080038d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <OTG_FS_IRQHandler+0x10>)
 80038da:	f000 ff57 	bl	800478c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000564c 	.word	0x2000564c

080038e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
	return 1;
 80038ec:	2301      	movs	r3, #1
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_kill>:

int _kill(int pid, int sig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003902:	f00e feab 	bl	801265c <__errno>
 8003906:	4603      	mov	r3, r0
 8003908:	2216      	movs	r2, #22
 800390a:	601a      	str	r2, [r3, #0]
	return -1;
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_exit>:

void _exit (int status)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ffe7 	bl	80038f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <_exit+0x12>

0800392e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e00a      	b.n	8003956 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003940:	f3af 8000 	nop.w
 8003944:	4601      	mov	r1, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	60ba      	str	r2, [r7, #8]
 800394c:	b2ca      	uxtb	r2, r1
 800394e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	dbf0      	blt.n	8003940 <_read+0x12>
	}

return len;
 800395e:	687b      	ldr	r3, [r7, #4]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e009      	b.n	800398e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	60ba      	str	r2, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	dbf1      	blt.n	800397a <_write+0x12>
	}
	return len;
 8003996:	687b      	ldr	r3, [r7, #4]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_close>:

int _close(int file)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	return -1;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c8:	605a      	str	r2, [r3, #4]
	return 0;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_isatty>:

int _isatty(int file)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return 1;
 80039e0:	2301      	movs	r3, #1
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
	return 0;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a10:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <_sbrk+0x5c>)
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <_sbrk+0x60>)
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <_sbrk+0x64>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <_sbrk+0x64>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <_sbrk+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a38:	f00e fe10 	bl	801265c <__errno>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	e009      	b.n	8003a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <_sbrk+0x64>)
 8003a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20020000 	.word	0x20020000
 8003a68:	00000400 	.word	0x00000400
 8003a6c:	20000850 	.word	0x20000850
 8003a70:	20005aa0 	.word	0x20005aa0

08003a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <SystemInit+0x20>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <SystemInit+0x20>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a9c:	480d      	ldr	r0, [pc, #52]	@ (8003ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a9e:	490e      	ldr	r1, [pc, #56]	@ (8003ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa4:	e002      	b.n	8003aac <LoopCopyDataInit>

08003aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aaa:	3304      	adds	r3, #4

08003aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab0:	d3f9      	bcc.n	8003aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8003ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab8:	e001      	b.n	8003abe <LoopFillZerobss>

08003aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003abc:	3204      	adds	r2, #4

08003abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac0:	d3fb      	bcc.n	8003aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ac2:	f7ff ffd7 	bl	8003a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac6:	f00e fdcf 	bl	8012668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aca:	f7ff f8f7 	bl	8002cbc <main>
  bx  lr    
 8003ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad8:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8003adc:	08015d9c 	.word	0x08015d9c
  ldr r2, =_sbss
 8003ae0:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8003ae4:	20005a9c 	.word	0x20005a9c

08003ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae8:	e7fe      	b.n	8003ae8 <ADC_IRQHandler>
	...

08003aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <HAL_Init+0x40>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <HAL_Init+0x40>)
 8003b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b08:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	@ (8003b2c <HAL_Init+0x40>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b14:	2003      	movs	r0, #3
 8003b16:	f000 f8fc 	bl	8003d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff fdfc 	bl	8003718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b20:	f7ff fc32 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000234 	.word	0x20000234
 8003b54:	20000854 	.word	0x20000854

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000854 	.word	0x20000854

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000234 	.word	0x20000234

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	@ (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	@ (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	@ (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	@ 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff4c 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3a:	f7ff ff61 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7ff ffb1 	bl	8003cac <NVIC_EncodePriority>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff80 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff54 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d8a:	f7ff fee5 	bl	8003b58 <HAL_GetTick>
 8003d8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d008      	beq.n	8003dae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e052      	b.n	8003e54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0216 	bic.w	r2, r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <HAL_DMA_Abort+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dfe:	e013      	b.n	8003e28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e00:	f7ff feaa 	bl	8003b58 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d90c      	bls.n	8003e28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e015      	b.n	8003e54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e4      	bne.n	8003e00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	223f      	movs	r2, #63	@ 0x3f
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2280      	movs	r2, #128	@ 0x80
 8003e74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00c      	b.n	8003e94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	@ 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e16b      	b.n	8004194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f040 815a 	bne.w	800418e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d005      	beq.n	8003ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d130      	bne.n	8003f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2203      	movs	r2, #3
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 0201 	and.w	r2, r3, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d017      	beq.n	8003f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d123      	bne.n	8003fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80b4 	beq.w	800418e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b60      	ldr	r3, [pc, #384]	@ (80041ac <HAL_GPIO_Init+0x30c>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	4a5f      	ldr	r2, [pc, #380]	@ (80041ac <HAL_GPIO_Init+0x30c>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004034:	6453      	str	r3, [r2, #68]	@ 0x44
 8004036:	4b5d      	ldr	r3, [pc, #372]	@ (80041ac <HAL_GPIO_Init+0x30c>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004042:	4a5b      	ldr	r2, [pc, #364]	@ (80041b0 <HAL_GPIO_Init+0x310>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a52      	ldr	r2, [pc, #328]	@ (80041b4 <HAL_GPIO_Init+0x314>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02b      	beq.n	80040c6 <HAL_GPIO_Init+0x226>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a51      	ldr	r2, [pc, #324]	@ (80041b8 <HAL_GPIO_Init+0x318>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d025      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a50      	ldr	r2, [pc, #320]	@ (80041bc <HAL_GPIO_Init+0x31c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <HAL_GPIO_Init+0x21e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4f      	ldr	r2, [pc, #316]	@ (80041c0 <HAL_GPIO_Init+0x320>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d019      	beq.n	80040ba <HAL_GPIO_Init+0x21a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4e      	ldr	r2, [pc, #312]	@ (80041c4 <HAL_GPIO_Init+0x324>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_GPIO_Init+0x216>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4d      	ldr	r2, [pc, #308]	@ (80041c8 <HAL_GPIO_Init+0x328>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00d      	beq.n	80040b2 <HAL_GPIO_Init+0x212>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4c      	ldr	r2, [pc, #304]	@ (80041cc <HAL_GPIO_Init+0x32c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x20e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4b      	ldr	r2, [pc, #300]	@ (80041d0 <HAL_GPIO_Init+0x330>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_GPIO_Init+0x20a>
 80040a6:	2307      	movs	r3, #7
 80040a8:	e00e      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040aa:	2308      	movs	r3, #8
 80040ac:	e00c      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040ae:	2306      	movs	r3, #6
 80040b0:	e00a      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040b2:	2305      	movs	r3, #5
 80040b4:	e008      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040b6:	2304      	movs	r3, #4
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040ba:	2303      	movs	r3, #3
 80040bc:	e004      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040be:	2302      	movs	r3, #2
 80040c0:	e002      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_GPIO_Init+0x228>
 80040c6:	2300      	movs	r3, #0
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	f002 0203 	and.w	r2, r2, #3
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4093      	lsls	r3, r2
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d8:	4935      	ldr	r1, [pc, #212]	@ (80041b0 <HAL_GPIO_Init+0x310>)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	3302      	adds	r3, #2
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e6:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800410a:	4a32      	ldr	r2, [pc, #200]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004110:	4b30      	ldr	r3, [pc, #192]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004134:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800413a:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800415e:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004188:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <HAL_GPIO_Init+0x334>)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3301      	adds	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	f67f ae90 	bls.w	8003ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3724      	adds	r7, #36	@ 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40013800 	.word	0x40013800
 80041b4:	40020000 	.word	0x40020000
 80041b8:	40020400 	.word	0x40020400
 80041bc:	40020800 	.word	0x40020800
 80041c0:	40020c00 	.word	0x40020c00
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40021400 	.word	0x40021400
 80041cc:	40021800 	.word	0x40021800
 80041d0:	40021c00 	.word	0x40021c00
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e001      	b.n	80041fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
 8004214:	4613      	mov	r3, r2
 8004216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004218:	787b      	ldrb	r3, [r7, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004224:	e003      	b.n	800422e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	619a      	str	r2, [r3, #24]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	041a      	lsls	r2, r3, #16
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43d9      	mvns	r1, r3
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	400b      	ands	r3, r1
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	619a      	str	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f806 	bl	80042a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40013c00 	.word	0x40013c00

080042a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b8:	b08f      	sub	sp, #60	@ 0x3c
 80042ba:	af0a      	add	r7, sp, #40	@ 0x28
 80042bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e054      	b.n	8004372 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f00c f8cc 	bl	8010480 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fbee 	bl	8008ae8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	687e      	ldr	r6, [r7, #4]
 8004314:	466d      	mov	r5, sp
 8004316:	f106 0410 	add.w	r4, r6, #16
 800431a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800431c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800431e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004326:	e885 0003 	stmia.w	r5, {r0, r1}
 800432a:	1d33      	adds	r3, r6, #4
 800432c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f004 fb68 	bl	8008a04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f004 fbe5 	bl	8008b0a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	687e      	ldr	r6, [r7, #4]
 8004348:	466d      	mov	r5, sp
 800434a:	f106 0410 	add.w	r4, r6, #16
 800434e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004356:	e894 0003 	ldmia.w	r4, {r0, r1}
 800435a:	e885 0003 	stmia.w	r5, {r0, r1}
 800435e:	1d33      	adds	r3, r6, #4
 8004360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004362:	6838      	ldr	r0, [r7, #0]
 8004364:	f004 fd6e 	bl	8008e44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800437a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800437a:	b590      	push	{r4, r7, lr}
 800437c:	b089      	sub	sp, #36	@ 0x24
 800437e:	af04      	add	r7, sp, #16
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	4608      	mov	r0, r1
 8004384:	4611      	mov	r1, r2
 8004386:	461a      	mov	r2, r3
 8004388:	4603      	mov	r3, r0
 800438a:	70fb      	strb	r3, [r7, #3]
 800438c:	460b      	mov	r3, r1
 800438e:	70bb      	strb	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_HCD_HC_Init+0x28>
 800439e:	2302      	movs	r3, #2
 80043a0:	e076      	b.n	8004490 <HAL_HCD_HC_Init+0x116>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	212c      	movs	r1, #44	@ 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	333d      	adds	r3, #61	@ 0x3d
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	212c      	movs	r1, #44	@ 0x2c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	3338      	adds	r3, #56	@ 0x38
 80043ca:	787a      	ldrb	r2, [r7, #1]
 80043cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	212c      	movs	r1, #44	@ 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3340      	adds	r3, #64	@ 0x40
 80043dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80043de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	212c      	movs	r1, #44	@ 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3339      	adds	r3, #57	@ 0x39
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	212c      	movs	r1, #44	@ 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	333f      	adds	r3, #63	@ 0x3f
 8004400:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	78ba      	ldrb	r2, [r7, #2]
 800440a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800440e:	b2d0      	uxtb	r0, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	212c      	movs	r1, #44	@ 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	333a      	adds	r3, #58	@ 0x3a
 800441c:	4602      	mov	r2, r0
 800441e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da09      	bge.n	800443c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	212c      	movs	r1, #44	@ 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	333b      	adds	r3, #59	@ 0x3b
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e008      	b.n	800444e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	212c      	movs	r1, #44	@ 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	333b      	adds	r3, #59	@ 0x3b
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	212c      	movs	r1, #44	@ 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	333c      	adds	r3, #60	@ 0x3c
 800445c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004460:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	787c      	ldrb	r4, [r7, #1]
 8004468:	78ba      	ldrb	r2, [r7, #2]
 800446a:	78f9      	ldrb	r1, [r7, #3]
 800446c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4623      	mov	r3, r4
 800447e:	f004 fe67 	bl	8009150 <USB_HC_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_HCD_HC_Halt+0x1e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e00f      	b.n	80044d6 <HAL_HCD_HC_Halt+0x3e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f005 f8b7 	bl	800963a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	70fb      	strb	r3, [r7, #3]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70bb      	strb	r3, [r7, #2]
 80044f6:	4613      	mov	r3, r2
 80044f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	212c      	movs	r1, #44	@ 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	333b      	adds	r3, #59	@ 0x3b
 8004508:	78ba      	ldrb	r2, [r7, #2]
 800450a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	212c      	movs	r1, #44	@ 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	333f      	adds	r3, #63	@ 0x3f
 800451a:	787a      	ldrb	r2, [r7, #1]
 800451c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800451e:	7c3b      	ldrb	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d112      	bne.n	800454a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	212c      	movs	r1, #44	@ 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3342      	adds	r3, #66	@ 0x42
 8004532:	2203      	movs	r2, #3
 8004534:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	212c      	movs	r1, #44	@ 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	333d      	adds	r3, #61	@ 0x3d
 8004544:	7f3a      	ldrb	r2, [r7, #28]
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e008      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	212c      	movs	r1, #44	@ 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3342      	adds	r3, #66	@ 0x42
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800455c:	787b      	ldrb	r3, [r7, #1]
 800455e:	2b03      	cmp	r3, #3
 8004560:	f200 80c6 	bhi.w	80046f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	080046dd 	.word	0x080046dd
 8004574:	080045e1 	.word	0x080045e1
 8004578:	0800465f 	.word	0x0800465f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800457c:	7c3b      	ldrb	r3, [r7, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	f040 80b8 	bne.w	80046f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004584:	78bb      	ldrb	r3, [r7, #2]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 80b4 	bne.w	80046f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800458c:	8b3b      	ldrh	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	212c      	movs	r1, #44	@ 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	3355      	adds	r3, #85	@ 0x55
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	212c      	movs	r1, #44	@ 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3355      	adds	r3, #85	@ 0x55
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	212c      	movs	r1, #44	@ 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3342      	adds	r3, #66	@ 0x42
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045ca:	e093      	b.n	80046f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	212c      	movs	r1, #44	@ 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	3342      	adds	r3, #66	@ 0x42
 80045da:	2202      	movs	r2, #2
 80045dc:	701a      	strb	r2, [r3, #0]
      break;
 80045de:	e089      	b.n	80046f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80045e0:	78bb      	ldrb	r3, [r7, #2]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d11d      	bne.n	8004622 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	212c      	movs	r1, #44	@ 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3355      	adds	r3, #85	@ 0x55
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	212c      	movs	r1, #44	@ 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	3342      	adds	r3, #66	@ 0x42
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800460c:	e073      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	212c      	movs	r1, #44	@ 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3342      	adds	r3, #66	@ 0x42
 800461c:	2202      	movs	r2, #2
 800461e:	701a      	strb	r2, [r3, #0]
      break;
 8004620:	e069      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	212c      	movs	r1, #44	@ 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3354      	adds	r3, #84	@ 0x54
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	212c      	movs	r1, #44	@ 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	3342      	adds	r3, #66	@ 0x42
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
      break;
 8004648:	e055      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	212c      	movs	r1, #44	@ 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3342      	adds	r3, #66	@ 0x42
 8004658:	2202      	movs	r2, #2
 800465a:	701a      	strb	r2, [r3, #0]
      break;
 800465c:	e04b      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800465e:	78bb      	ldrb	r3, [r7, #2]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	212c      	movs	r1, #44	@ 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3355      	adds	r3, #85	@ 0x55
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	212c      	movs	r1, #44	@ 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3342      	adds	r3, #66	@ 0x42
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800468a:	e034      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	212c      	movs	r1, #44	@ 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3342      	adds	r3, #66	@ 0x42
 800469a:	2202      	movs	r2, #2
 800469c:	701a      	strb	r2, [r3, #0]
      break;
 800469e:	e02a      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	212c      	movs	r1, #44	@ 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3354      	adds	r3, #84	@ 0x54
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	212c      	movs	r1, #44	@ 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3342      	adds	r3, #66	@ 0x42
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
      break;
 80046c6:	e016      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	212c      	movs	r1, #44	@ 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3342      	adds	r3, #66	@ 0x42
 80046d6:	2202      	movs	r2, #2
 80046d8:	701a      	strb	r2, [r3, #0]
      break;
 80046da:	e00c      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	212c      	movs	r1, #44	@ 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	3342      	adds	r3, #66	@ 0x42
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
      break;
 80046ee:	e002      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80046f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	212c      	movs	r1, #44	@ 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	3344      	adds	r3, #68	@ 0x44
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	8b3a      	ldrh	r2, [r7, #24]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	202c      	movs	r0, #44	@ 0x2c
 8004710:	fb00 f303 	mul.w	r3, r0, r3
 8004714:	440b      	add	r3, r1
 8004716:	334c      	adds	r3, #76	@ 0x4c
 8004718:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	212c      	movs	r1, #44	@ 0x2c
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	3360      	adds	r3, #96	@ 0x60
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	212c      	movs	r1, #44	@ 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3350      	adds	r3, #80	@ 0x50
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	212c      	movs	r1, #44	@ 0x2c
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	3339      	adds	r3, #57	@ 0x39
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	212c      	movs	r1, #44	@ 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3361      	adds	r3, #97	@ 0x61
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	222c      	movs	r2, #44	@ 0x2c
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	3338      	adds	r3, #56	@ 0x38
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	18d1      	adds	r1, r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	f004 fe0a 	bl	8009394 <USB_HC_StartXfer>
 8004780:	4603      	mov	r3, r0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop

0800478c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f004 fb0b 	bl	8008dbe <USB_GetMode>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	f040 80f6 	bne.w	800499c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f004 faef 	bl	8008d98 <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80ec 	beq.w	800499a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f004 fae6 	bl	8008d98 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047d6:	d104      	bne.n	80047e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80047e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 fad6 	bl	8008d98 <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d104      	bne.n	8004802 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004800:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f004 fac6 	bl	8008d98 <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004816:	d104      	bne.n	8004822 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f004 fab6 	bl	8008d98 <USB_ReadInterrupts>
 800482c:	4603      	mov	r3, r0
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d103      	bne.n	800483e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2202      	movs	r2, #2
 800483c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f004 faa8 	bl	8008d98 <USB_ReadInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800484e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004852:	d11c      	bne.n	800488e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800485c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800486e:	2110      	movs	r1, #16
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f004 f997 	bl	8008ba4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f004 f9c8 	bl	8008c0c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f004 fb9e 	bl	8008fc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f00b fe77 	bl	801057c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fa80 	bl	8008d98 <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048a2:	d102      	bne.n	80048aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 f89e 	bl	80059e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f004 fa72 	bl	8008d98 <USB_ReadInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d106      	bne.n	80048cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f00b fe40 	bl	8010544 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2208      	movs	r2, #8
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f004 fa61 	bl	8008d98 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d101      	bne.n	80048e4 <HAL_HCD_IRQHandler+0x158>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_HCD_IRQHandler+0x15a>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0210 	bic.w	r2, r2, #16
 80048f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 ffa1 	bl	8005842 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0210 	orr.w	r2, r2, #16
 800490e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f004 fa3f 	bl	8008d98 <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004924:	d13a      	bne.n	800499c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f004 fe74 	bl	8009618 <USB_HC_ReadInterrupt>
 8004930:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e025      	b.n	8004984 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d018      	beq.n	800497e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004962:	d106      	bne.n	8004972 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8ab 	bl	8004ac6 <HCD_HC_IN_IRQHandler>
 8004970:	e005      	b.n	800497e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fbf9 	bl	8005170 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3301      	adds	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3d4      	bcc.n	8004938 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004996:	615a      	str	r2, [r3, #20]
 8004998:	e000      	b.n	800499c <HAL_HCD_IRQHandler+0x210>
      return;
 800499a:	bf00      	nop
    }
  }
}
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_HCD_Start+0x16>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e013      	b.n	80049e0 <HAL_HCD_Start+0x3e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 fb60 	bl	800908c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f004 f878 	bl	8008ac6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_HCD_Stop+0x16>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e00d      	b.n	8004a1a <HAL_HCD_Stop+0x32>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 ff4e 	bl	80098ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fb02 	bl	8009038 <USB_ResetPort>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	212c      	movs	r1, #44	@ 0x2c
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	3360      	adds	r3, #96	@ 0x60
 8004a58:	781b      	ldrb	r3, [r3, #0]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	212c      	movs	r1, #44	@ 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3350      	adds	r3, #80	@ 0x50
 8004a80:	681b      	ldr	r3, [r3, #0]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fb46 	bl	800912c <USB_GetCurrentFrame>
 8004aa0:	4603      	mov	r3, r0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fb21 	bl	80090fe <USB_GetHostSpeed>
 8004abc:	4603      	mov	r3, r0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d11a      	bne.n	8004b2c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b02:	461a      	mov	r2, r3
 8004b04:	2304      	movs	r3, #4
 8004b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	212c      	movs	r1, #44	@ 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3361      	adds	r3, #97	@ 0x61
 8004b16:	2206      	movs	r2, #6
 8004b18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f004 fd88 	bl	800963a <USB_HC_Halt>
 8004b2a:	e0af      	b.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b42:	d11b      	bne.n	8004b7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	212c      	movs	r1, #44	@ 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3361      	adds	r3, #97	@ 0x61
 8004b66:	2207      	movs	r2, #7
 8004b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f004 fd60 	bl	800963a <USB_HC_Halt>
 8004b7a:	e087      	b.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d109      	bne.n	8004ba6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	6093      	str	r3, [r2, #8]
 8004ba4:	e072      	b.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d11a      	bne.n	8004bf2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2308      	movs	r3, #8
 8004bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	212c      	movs	r1, #44	@ 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3361      	adds	r3, #97	@ 0x61
 8004bdc:	2205      	movs	r2, #5
 8004bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f004 fd25 	bl	800963a <USB_HC_Halt>
 8004bf0:	e04c      	b.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c08:	d11b      	bne.n	8004c42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c16:	461a      	mov	r2, r3
 8004c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	212c      	movs	r1, #44	@ 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3361      	adds	r3, #97	@ 0x61
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f004 fcfd 	bl	800963a <USB_HC_Halt>
 8004c40:	e024      	b.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d119      	bne.n	8004c8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	212c      	movs	r1, #44	@ 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3361      	adds	r3, #97	@ 0x61
 8004c78:	2206      	movs	r2, #6
 8004c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f004 fcd7 	bl	800963a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca2:	d112      	bne.n	8004cca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f004 fcc3 	bl	800963a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cc6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004cc8:	e24e      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 80df 	bne.w	8004ea0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	212c      	movs	r1, #44	@ 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3348      	adds	r3, #72	@ 0x48
 8004cf8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004d0c:	1ad2      	subs	r2, r2, r3
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	202c      	movs	r0, #44	@ 0x2c
 8004d14:	fb00 f303 	mul.w	r3, r0, r3
 8004d18:	440b      	add	r3, r1
 8004d1a:	3350      	adds	r3, #80	@ 0x50
 8004d1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	212c      	movs	r1, #44	@ 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3361      	adds	r3, #97	@ 0x61
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	212c      	movs	r1, #44	@ 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	335c      	adds	r3, #92	@ 0x5c
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2301      	movs	r3, #1
 8004d52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	212c      	movs	r1, #44	@ 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	333f      	adds	r3, #63	@ 0x3f
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	212c      	movs	r1, #44	@ 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	333f      	adds	r3, #63	@ 0x3f
 8004d76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d111      	bne.n	8004da0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 fc57 	bl	800963a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	6093      	str	r3, [r2, #8]
 8004d9e:	e03a      	b.n	8004e16 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	212c      	movs	r1, #44	@ 0x2c
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	333f      	adds	r3, #63	@ 0x3f
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d009      	beq.n	8004dc8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	212c      	movs	r1, #44	@ 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	333f      	adds	r3, #63	@ 0x3f
 8004dc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d126      	bne.n	8004e16 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004de2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004de6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	212c      	movs	r1, #44	@ 0x2c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	3360      	adds	r3, #96	@ 0x60
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	b2d9      	uxtb	r1, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	202c      	movs	r0, #44	@ 0x2c
 8004e04:	fb00 f303 	mul.w	r3, r0, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	3360      	adds	r3, #96	@ 0x60
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f00b fbc1 	bl	8010598 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d12b      	bne.n	8004e76 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	212c      	movs	r1, #44	@ 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	3348      	adds	r3, #72	@ 0x48
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	202c      	movs	r0, #44	@ 0x2c
 8004e34:	fb00 f202 	mul.w	r2, r0, r2
 8004e38:	440a      	add	r2, r1
 8004e3a:	3240      	adds	r2, #64	@ 0x40
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 818e 	beq.w	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	@ 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3354      	adds	r3, #84	@ 0x54
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2d8      	uxtb	r0, r3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	212c      	movs	r1, #44	@ 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3354      	adds	r3, #84	@ 0x54
 8004e70:	4602      	mov	r2, r0
 8004e72:	701a      	strb	r2, [r3, #0]
}
 8004e74:	e178      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	212c      	movs	r1, #44	@ 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3354      	adds	r3, #84	@ 0x54
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2d8      	uxtb	r0, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	212c      	movs	r1, #44	@ 0x2c
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	3354      	adds	r3, #84	@ 0x54
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	701a      	strb	r2, [r3, #0]
}
 8004e9e:	e163      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	f040 80f6 	bne.w	80050a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	212c      	movs	r1, #44	@ 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3361      	adds	r3, #97	@ 0x61
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d109      	bne.n	8004ee0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	212c      	movs	r1, #44	@ 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3360      	adds	r3, #96	@ 0x60
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e0c9      	b.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	212c      	movs	r1, #44	@ 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3361      	adds	r3, #97	@ 0x61
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d109      	bne.n	8004f08 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	212c      	movs	r1, #44	@ 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3360      	adds	r3, #96	@ 0x60
 8004f02:	2205      	movs	r2, #5
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e0b5      	b.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	212c      	movs	r1, #44	@ 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	3361      	adds	r3, #97	@ 0x61
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d009      	beq.n	8004f30 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	212c      	movs	r1, #44	@ 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3361      	adds	r3, #97	@ 0x61
 8004f2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d150      	bne.n	8004fd2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	212c      	movs	r1, #44	@ 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	335c      	adds	r3, #92	@ 0x5c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	202c      	movs	r0, #44	@ 0x2c
 8004f48:	fb00 f303 	mul.w	r3, r0, r3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	335c      	adds	r3, #92	@ 0x5c
 8004f50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	212c      	movs	r1, #44	@ 0x2c
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	335c      	adds	r3, #92	@ 0x5c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d912      	bls.n	8004f8c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	212c      	movs	r1, #44	@ 0x2c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	335c      	adds	r3, #92	@ 0x5c
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	212c      	movs	r1, #44	@ 0x2c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	3360      	adds	r3, #96	@ 0x60
 8004f86:	2204      	movs	r2, #4
 8004f88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f8a:	e073      	b.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	212c      	movs	r1, #44	@ 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3360      	adds	r3, #96	@ 0x60
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fb4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fbc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fd0:	e050      	b.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	212c      	movs	r1, #44	@ 0x2c
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3361      	adds	r3, #97	@ 0x61
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d122      	bne.n	800502c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	212c      	movs	r1, #44	@ 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3360      	adds	r3, #96	@ 0x60
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800500e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005016:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005024:	461a      	mov	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e023      	b.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	212c      	movs	r1, #44	@ 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3361      	adds	r3, #97	@ 0x61
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b07      	cmp	r3, #7
 800503e:	d119      	bne.n	8005074 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	212c      	movs	r1, #44	@ 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	335c      	adds	r3, #92	@ 0x5c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	202c      	movs	r0, #44	@ 0x2c
 8005058:	fb00 f303 	mul.w	r3, r0, r3
 800505c:	440b      	add	r3, r1
 800505e:	335c      	adds	r3, #92	@ 0x5c
 8005060:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	212c      	movs	r1, #44	@ 0x2c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	3360      	adds	r3, #96	@ 0x60
 8005070:	2204      	movs	r2, #4
 8005072:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005080:	461a      	mov	r2, r3
 8005082:	2302      	movs	r3, #2
 8005084:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	b2d9      	uxtb	r1, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	202c      	movs	r0, #44	@ 0x2c
 8005090:	fb00 f303 	mul.w	r3, r0, r3
 8005094:	4413      	add	r3, r2
 8005096:	3360      	adds	r3, #96	@ 0x60
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f00b fa7b 	bl	8010598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050a2:	e061      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d156      	bne.n	8005168 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	212c      	movs	r1, #44	@ 0x2c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	333f      	adds	r3, #63	@ 0x3f
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d111      	bne.n	80050f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	212c      	movs	r1, #44	@ 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	335c      	adds	r3, #92	@ 0x5c
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 faa5 	bl	800963a <USB_HC_Halt>
 80050f0:	e031      	b.n	8005156 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	212c      	movs	r1, #44	@ 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	333f      	adds	r3, #63	@ 0x3f
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	212c      	movs	r1, #44	@ 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	333f      	adds	r3, #63	@ 0x3f
 8005114:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005116:	2b02      	cmp	r3, #2
 8005118:	d11d      	bne.n	8005156 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	212c      	movs	r1, #44	@ 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	335c      	adds	r3, #92	@ 0x5c
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	212c      	movs	r1, #44	@ 0x2c
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	4413      	add	r3, r2
 8005140:	3361      	adds	r3, #97	@ 0x61
 8005142:	2203      	movs	r2, #3
 8005144:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f004 fa72 	bl	800963a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005162:	461a      	mov	r2, r3
 8005164:	2310      	movs	r3, #16
 8005166:	6093      	str	r3, [r2, #8]
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b04      	cmp	r3, #4
 800519e:	d11a      	bne.n	80051d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ac:	461a      	mov	r2, r3
 80051ae:	2304      	movs	r3, #4
 80051b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	212c      	movs	r1, #44	@ 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	3361      	adds	r3, #97	@ 0x61
 80051c0:	2206      	movs	r2, #6
 80051c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 fa33 	bl	800963a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80051d4:	e331      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d12e      	bne.n	800524a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	2320      	movs	r3, #32
 80051fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	212c      	movs	r1, #44	@ 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	333d      	adds	r3, #61	@ 0x3d
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	f040 8313 	bne.w	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	@ 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	333d      	adds	r3, #61	@ 0x3d
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	212c      	movs	r1, #44	@ 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	3360      	adds	r3, #96	@ 0x60
 8005234:	2202      	movs	r2, #2
 8005236:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f004 f9f9 	bl	800963a <USB_HC_Halt>
}
 8005248:	e2f7      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005260:	d112      	bne.n	8005288 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005274:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f004 f9da 	bl	800963a <USB_HC_Halt>
}
 8005286:	e2d8      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d140      	bne.n	8005320 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	212c      	movs	r1, #44	@ 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	335c      	adds	r3, #92	@ 0x5c
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b40      	cmp	r3, #64	@ 0x40
 80052c4:	d111      	bne.n	80052ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	212c      	movs	r1, #44	@ 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	333d      	adds	r3, #61	@ 0x3d
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	2340      	movs	r3, #64	@ 0x40
 80052e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f6:	461a      	mov	r2, r3
 80052f8:	2301      	movs	r3, #1
 80052fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	212c      	movs	r1, #44	@ 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3361      	adds	r3, #97	@ 0x61
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f004 f98e 	bl	800963a <USB_HC_Halt>
}
 800531e:	e28c      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d12c      	bne.n	8005390 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	212c      	movs	r1, #44	@ 0x2c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	3361      	adds	r3, #97	@ 0x61
 8005344:	2204      	movs	r2, #4
 8005346:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	212c      	movs	r1, #44	@ 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	333d      	adds	r3, #61	@ 0x3d
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	212c      	movs	r1, #44	@ 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	335c      	adds	r3, #92	@ 0x5c
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f004 f95f 	bl	800963a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	2340      	movs	r3, #64	@ 0x40
 800538c:	6093      	str	r3, [r2, #8]
}
 800538e:	e254      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11a      	bne.n	80053dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b2:	461a      	mov	r2, r3
 80053b4:	2308      	movs	r3, #8
 80053b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	212c      	movs	r1, #44	@ 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3361      	adds	r3, #97	@ 0x61
 80053c6:	2205      	movs	r2, #5
 80053c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f004 f930 	bl	800963a <USB_HC_Halt>
}
 80053da:	e22e      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d140      	bne.n	8005474 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	212c      	movs	r1, #44	@ 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	335c      	adds	r3, #92	@ 0x5c
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	212c      	movs	r1, #44	@ 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	3361      	adds	r3, #97	@ 0x61
 8005412:	2203      	movs	r2, #3
 8005414:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	212c      	movs	r1, #44	@ 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	333d      	adds	r3, #61	@ 0x3d
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d112      	bne.n	8005450 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	212c      	movs	r1, #44	@ 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	333c      	adds	r3, #60	@ 0x3c
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	212c      	movs	r1, #44	@ 0x2c
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	333d      	adds	r3, #61	@ 0x3d
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f004 f8ed 	bl	800963a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546c:	461a      	mov	r2, r3
 800546e:	2310      	movs	r3, #16
 8005470:	6093      	str	r3, [r2, #8]
}
 8005472:	e1e2      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b80      	cmp	r3, #128	@ 0x80
 8005488:	d164      	bne.n	8005554 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d111      	bne.n	80054b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	212c      	movs	r1, #44	@ 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3361      	adds	r3, #97	@ 0x61
 80054a0:	2206      	movs	r2, #6
 80054a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 f8c3 	bl	800963a <USB_HC_Halt>
 80054b4:	e044      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	212c      	movs	r1, #44	@ 0x2c
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	4413      	add	r3, r2
 80054c2:	335c      	adds	r3, #92	@ 0x5c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	202c      	movs	r0, #44	@ 0x2c
 80054ce:	fb00 f303 	mul.w	r3, r0, r3
 80054d2:	440b      	add	r3, r1
 80054d4:	335c      	adds	r3, #92	@ 0x5c
 80054d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	212c      	movs	r1, #44	@ 0x2c
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	335c      	adds	r3, #92	@ 0x5c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d920      	bls.n	800552e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	212c      	movs	r1, #44	@ 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	335c      	adds	r3, #92	@ 0x5c
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	212c      	movs	r1, #44	@ 0x2c
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	4413      	add	r3, r2
 800550a:	3360      	adds	r3, #96	@ 0x60
 800550c:	2204      	movs	r2, #4
 800550e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	b2d9      	uxtb	r1, r3
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	202c      	movs	r0, #44	@ 0x2c
 800551a:	fb00 f303 	mul.w	r3, r0, r3
 800551e:	4413      	add	r3, r2
 8005520:	3360      	adds	r3, #96	@ 0x60
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f00b f836 	bl	8010598 <HAL_HCD_HC_NotifyURBChange_Callback>
 800552c:	e008      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	212c      	movs	r1, #44	@ 0x2c
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	4413      	add	r3, r2
 800553a:	3360      	adds	r3, #96	@ 0x60
 800553c:	2202      	movs	r2, #2
 800553e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800554c:	461a      	mov	r2, r3
 800554e:	2380      	movs	r3, #128	@ 0x80
 8005550:	6093      	str	r3, [r2, #8]
}
 8005552:	e172      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556a:	d11b      	bne.n	80055a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	212c      	movs	r1, #44	@ 0x2c
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	4413      	add	r3, r2
 8005578:	3361      	adds	r3, #97	@ 0x61
 800557a:	2208      	movs	r2, #8
 800557c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f004 f856 	bl	800963a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a0:	6093      	str	r3, [r2, #8]
}
 80055a2:	e14a      	b.n	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	f040 813f 	bne.w	800583a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	212c      	movs	r1, #44	@ 0x2c
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	3361      	adds	r3, #97	@ 0x61
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d17d      	bne.n	80056cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	212c      	movs	r1, #44	@ 0x2c
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	4413      	add	r3, r2
 80055dc:	3360      	adds	r3, #96	@ 0x60
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	212c      	movs	r1, #44	@ 0x2c
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	333f      	adds	r3, #63	@ 0x3f
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d00a      	beq.n	800560c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	212c      	movs	r1, #44	@ 0x2c
 80055fc:	fb01 f303 	mul.w	r3, r1, r3
 8005600:	4413      	add	r3, r2
 8005602:	333f      	adds	r3, #63	@ 0x3f
 8005604:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005606:	2b03      	cmp	r3, #3
 8005608:	f040 8100 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	212c      	movs	r1, #44	@ 0x2c
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	3355      	adds	r3, #85	@ 0x55
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2d8      	uxtb	r0, r3
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	212c      	movs	r1, #44	@ 0x2c
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	3355      	adds	r3, #85	@ 0x55
 8005638:	4602      	mov	r2, r0
 800563a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b01      	cmp	r3, #1
 8005642:	f040 80e3 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x69c>
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	212c      	movs	r1, #44	@ 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	334c      	adds	r3, #76	@ 0x4c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80d8 	beq.w	800580c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	212c      	movs	r1, #44	@ 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	334c      	adds	r3, #76	@ 0x4c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	202c      	movs	r0, #44	@ 0x2c
 8005672:	fb00 f202 	mul.w	r2, r0, r2
 8005676:	440a      	add	r2, r1
 8005678:	3240      	adds	r2, #64	@ 0x40
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	4413      	add	r3, r2
 800567e:	3b01      	subs	r3, #1
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	202c      	movs	r0, #44	@ 0x2c
 8005686:	fb00 f202 	mul.w	r2, r0, r2
 800568a:	440a      	add	r2, r1
 800568c:	3240      	adds	r2, #64	@ 0x40
 800568e:	8812      	ldrh	r2, [r2, #0]
 8005690:	fbb3 f3f2 	udiv	r3, r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80b5 	beq.w	800580c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	212c      	movs	r1, #44	@ 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3355      	adds	r3, #85	@ 0x55
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f083 0301 	eor.w	r3, r3, #1
 80056b6:	b2d8      	uxtb	r0, r3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	212c      	movs	r1, #44	@ 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3355      	adds	r3, #85	@ 0x55
 80056c6:	4602      	mov	r2, r0
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e09f      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	212c      	movs	r1, #44	@ 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3361      	adds	r3, #97	@ 0x61
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d109      	bne.n	80056f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	212c      	movs	r1, #44	@ 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3360      	adds	r3, #96	@ 0x60
 80056ee:	2202      	movs	r2, #2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e08b      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	212c      	movs	r1, #44	@ 0x2c
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	3361      	adds	r3, #97	@ 0x61
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d109      	bne.n	800571c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	212c      	movs	r1, #44	@ 0x2c
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	4413      	add	r3, r2
 8005714:	3360      	adds	r3, #96	@ 0x60
 8005716:	2202      	movs	r2, #2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e077      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	212c      	movs	r1, #44	@ 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	3361      	adds	r3, #97	@ 0x61
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b05      	cmp	r3, #5
 800572e:	d109      	bne.n	8005744 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	212c      	movs	r1, #44	@ 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3360      	adds	r3, #96	@ 0x60
 800573e:	2205      	movs	r2, #5
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e063      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	212c      	movs	r1, #44	@ 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3361      	adds	r3, #97	@ 0x61
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b06      	cmp	r3, #6
 8005756:	d009      	beq.n	800576c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	212c      	movs	r1, #44	@ 0x2c
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	4413      	add	r3, r2
 8005764:	3361      	adds	r3, #97	@ 0x61
 8005766:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005768:	2b08      	cmp	r3, #8
 800576a:	d14f      	bne.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	212c      	movs	r1, #44	@ 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	335c      	adds	r3, #92	@ 0x5c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	202c      	movs	r0, #44	@ 0x2c
 8005784:	fb00 f303 	mul.w	r3, r0, r3
 8005788:	440b      	add	r3, r1
 800578a:	335c      	adds	r3, #92	@ 0x5c
 800578c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	212c      	movs	r1, #44	@ 0x2c
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	335c      	adds	r3, #92	@ 0x5c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d912      	bls.n	80057c8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	212c      	movs	r1, #44	@ 0x2c
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	4413      	add	r3, r2
 80057ae:	335c      	adds	r3, #92	@ 0x5c
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	212c      	movs	r1, #44	@ 0x2c
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	4413      	add	r3, r2
 80057c0:	3360      	adds	r3, #96	@ 0x60
 80057c2:	2204      	movs	r2, #4
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e021      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	212c      	movs	r1, #44	@ 0x2c
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	3360      	adds	r3, #96	@ 0x60
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	2302      	movs	r3, #2
 800581c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	b2d9      	uxtb	r1, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	202c      	movs	r0, #44	@ 0x2c
 8005828:	fb00 f303 	mul.w	r3, r0, r3
 800582c:	4413      	add	r3, r2
 800582e:	3360      	adds	r3, #96	@ 0x60
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f00a feaf 	bl	8010598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800583a:	bf00      	nop
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b08a      	sub	sp, #40	@ 0x28
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	0c5b      	lsrs	r3, r3, #17
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005876:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d004      	beq.n	8005888 <HCD_RXQLVL_IRQHandler+0x46>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b05      	cmp	r3, #5
 8005882:	f000 80a9 	beq.w	80059d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005886:	e0aa      	b.n	80059de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80a6 	beq.w	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	212c      	movs	r1, #44	@ 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3344      	adds	r3, #68	@ 0x44
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 809b 	beq.w	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	212c      	movs	r1, #44	@ 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	3350      	adds	r3, #80	@ 0x50
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	441a      	add	r2, r3
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	202c      	movs	r0, #44	@ 0x2c
 80058c0:	fb00 f303 	mul.w	r3, r0, r3
 80058c4:	440b      	add	r3, r1
 80058c6:	334c      	adds	r3, #76	@ 0x4c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d87a      	bhi.n	80059c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	212c      	movs	r1, #44	@ 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	3344      	adds	r3, #68	@ 0x44
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	b292      	uxth	r2, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f003 f9fe 	bl	8008ce8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	212c      	movs	r1, #44	@ 0x2c
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	3344      	adds	r3, #68	@ 0x44
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	441a      	add	r2, r3
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	202c      	movs	r0, #44	@ 0x2c
 8005906:	fb00 f303 	mul.w	r3, r0, r3
 800590a:	440b      	add	r3, r1
 800590c:	3344      	adds	r3, #68	@ 0x44
 800590e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	212c      	movs	r1, #44	@ 0x2c
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	3350      	adds	r3, #80	@ 0x50
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	441a      	add	r2, r3
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	202c      	movs	r0, #44	@ 0x2c
 800592a:	fb00 f303 	mul.w	r3, r0, r3
 800592e:	440b      	add	r3, r1
 8005930:	3350      	adds	r3, #80	@ 0x50
 8005932:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	0cdb      	lsrs	r3, r3, #19
 8005944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005948:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	212c      	movs	r1, #44	@ 0x2c
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	4413      	add	r3, r2
 8005956:	3340      	adds	r3, #64	@ 0x40
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4293      	cmp	r3, r2
 8005960:	d13c      	bne.n	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d039      	beq.n	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800597e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005986:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	212c      	movs	r1, #44	@ 0x2c
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	3354      	adds	r3, #84	@ 0x54
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2d8      	uxtb	r0, r3
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	212c      	movs	r1, #44	@ 0x2c
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	3354      	adds	r3, #84	@ 0x54
 80059be:	4602      	mov	r2, r0
 80059c0:	701a      	strb	r2, [r3, #0]
      break;
 80059c2:	e00b      	b.n	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	212c      	movs	r1, #44	@ 0x2c
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	3360      	adds	r3, #96	@ 0x60
 80059d2:	2204      	movs	r2, #4
 80059d4:	701a      	strb	r2, [r3, #0]
      break;
 80059d6:	e001      	b.n	80059dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059dc:	bf00      	nop
  }
}
 80059de:	bf00      	nop
 80059e0:	3728      	adds	r7, #40	@ 0x28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d10b      	bne.n	8005a36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d102      	bne.n	8005a2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f00a fd99 	bl	8010560 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d132      	bne.n	8005aa6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f043 0308 	orr.w	r3, r3, #8
 8005a46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d126      	bne.n	8005aa0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d113      	bne.n	8005a82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a64:	d106      	bne.n	8005a74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f003 faa9 	bl	8008fc4 <USB_InitFSLSPClkSel>
 8005a72:	e011      	b.n	8005a98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f003 faa2 	bl	8008fc4 <USB_InitFSLSPClkSel>
 8005a80:	e00a      	b.n	8005a98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d106      	bne.n	8005a98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a90:	461a      	mov	r2, r3
 8005a92:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005a96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f00a fd8f 	bl	80105bc <HAL_HCD_PortEnabled_Callback>
 8005a9e:	e002      	b.n	8005aa6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f00a fd99 	bl	80105d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d103      	bne.n	8005ab8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f043 0320 	orr.w	r3, r3, #32
 8005ab6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6013      	str	r3, [r2, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e12b      	b.n	8005d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fd fc74 	bl	80033e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2224      	movs	r2, #36	@ 0x24
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b30:	f001 fa20 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 8005b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4a81      	ldr	r2, [pc, #516]	@ (8005d40 <HAL_I2C_Init+0x274>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d807      	bhi.n	8005b50 <HAL_I2C_Init+0x84>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a80      	ldr	r2, [pc, #512]	@ (8005d44 <HAL_I2C_Init+0x278>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bf94      	ite	ls
 8005b48:	2301      	movls	r3, #1
 8005b4a:	2300      	movhi	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e006      	b.n	8005b5e <HAL_I2C_Init+0x92>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a7d      	ldr	r2, [pc, #500]	@ (8005d48 <HAL_I2C_Init+0x27c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf94      	ite	ls
 8005b58:	2301      	movls	r3, #1
 8005b5a:	2300      	movhi	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0e7      	b.n	8005d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a78      	ldr	r2, [pc, #480]	@ (8005d4c <HAL_I2C_Init+0x280>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	0c9b      	lsrs	r3, r3, #18
 8005b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a6a      	ldr	r2, [pc, #424]	@ (8005d40 <HAL_I2C_Init+0x274>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d802      	bhi.n	8005ba0 <HAL_I2C_Init+0xd4>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	e009      	b.n	8005bb4 <HAL_I2C_Init+0xe8>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	4a69      	ldr	r2, [pc, #420]	@ (8005d50 <HAL_I2C_Init+0x284>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	495c      	ldr	r1, [pc, #368]	@ (8005d40 <HAL_I2C_Init+0x274>)
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	d819      	bhi.n	8005c08 <HAL_I2C_Init+0x13c>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1e59      	subs	r1, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005be8:	400b      	ands	r3, r1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_I2C_Init+0x138>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1e59      	subs	r1, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c02:	e051      	b.n	8005ca8 <HAL_I2C_Init+0x1dc>
 8005c04:	2304      	movs	r3, #4
 8005c06:	e04f      	b.n	8005ca8 <HAL_I2C_Init+0x1dc>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d111      	bne.n	8005c34 <HAL_I2C_Init+0x168>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1e58      	subs	r0, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	440b      	add	r3, r1
 8005c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c22:	3301      	adds	r3, #1
 8005c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e012      	b.n	8005c5a <HAL_I2C_Init+0x18e>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1e58      	subs	r0, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	0099      	lsls	r1, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_Init+0x196>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_I2C_Init+0x1dc>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10e      	bne.n	8005c88 <HAL_I2C_Init+0x1bc>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1e58      	subs	r0, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6859      	ldr	r1, [r3, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	440b      	add	r3, r1
 8005c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c86:	e00f      	b.n	8005ca8 <HAL_I2C_Init+0x1dc>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1e58      	subs	r0, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6859      	ldr	r1, [r3, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	0099      	lsls	r1, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	6809      	ldr	r1, [r1, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69da      	ldr	r2, [r3, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6911      	ldr	r1, [r2, #16]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	000186a0 	.word	0x000186a0
 8005d44:	001e847f 	.word	0x001e847f
 8005d48:	003d08ff 	.word	0x003d08ff
 8005d4c:	431bde83 	.word	0x431bde83
 8005d50:	10624dd3 	.word	0x10624dd3

08005d54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e128      	b.n	8005fb8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a90      	ldr	r2, [pc, #576]	@ (8005fc0 <HAL_I2S_Init+0x26c>)
 8005d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fd fb75 	bl	8003470 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005d9c:	f023 030f 	bic.w	r3, r3, #15
 8005da0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2202      	movs	r2, #2
 8005da8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d060      	beq.n	8005e74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005dba:	2310      	movs	r3, #16
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e001      	b.n	8005dc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d802      	bhi.n	8005dd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	f001 fa0a 	bl	80071ec <HAL_RCCEx_GetPeriphCLKFreq>
 8005dd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de2:	d125      	bne.n	8005e30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d010      	beq.n	8005e0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	3305      	adds	r3, #5
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e01f      	b.n	8005e4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	461a      	mov	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	3305      	adds	r3, #5
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e00e      	b.n	8005e4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	3305      	adds	r3, #5
 8005e4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a5c      	ldr	r2, [pc, #368]	@ (8005fc4 <HAL_I2S_Init+0x270>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	e003      	b.n	8005e7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005e74:	2302      	movs	r3, #2
 8005e76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d902      	bls.n	8005e88 <HAL_I2S_Init+0x134>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	2bff      	cmp	r3, #255	@ 0xff
 8005e86:	d907      	bls.n	8005e98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	f043 0210 	orr.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e08f      	b.n	8005fb8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005eb6:	f023 030f 	bic.w	r3, r3, #15
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6851      	ldr	r1, [r2, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6892      	ldr	r2, [r2, #8]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68d2      	ldr	r2, [r2, #12]
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6992      	ldr	r2, [r2, #24]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d161      	bne.n	8005fa8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a38      	ldr	r2, [pc, #224]	@ (8005fc8 <HAL_I2S_Init+0x274>)
 8005ee8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a37      	ldr	r2, [pc, #220]	@ (8005fcc <HAL_I2S_Init+0x278>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_I2S_Init+0x1a4>
 8005ef4:	4b36      	ldr	r3, [pc, #216]	@ (8005fd0 <HAL_I2S_Init+0x27c>)
 8005ef6:	e001      	b.n	8005efc <HAL_I2S_Init+0x1a8>
 8005ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	4932      	ldr	r1, [pc, #200]	@ (8005fcc <HAL_I2S_Init+0x278>)
 8005f04:	428a      	cmp	r2, r1
 8005f06:	d101      	bne.n	8005f0c <HAL_I2S_Init+0x1b8>
 8005f08:	4a31      	ldr	r2, [pc, #196]	@ (8005fd0 <HAL_I2S_Init+0x27c>)
 8005f0a:	e001      	b.n	8005f10 <HAL_I2S_Init+0x1bc>
 8005f0c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005f10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005f14:	f023 030f 	bic.w	r3, r3, #15
 8005f18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fcc <HAL_I2S_Init+0x278>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d101      	bne.n	8005f28 <HAL_I2S_Init+0x1d4>
 8005f24:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <HAL_I2S_Init+0x27c>)
 8005f26:	e001      	b.n	8005f2c <HAL_I2S_Init+0x1d8>
 8005f28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a25      	ldr	r2, [pc, #148]	@ (8005fcc <HAL_I2S_Init+0x278>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d101      	bne.n	8005f3e <HAL_I2S_Init+0x1ea>
 8005f3a:	4b25      	ldr	r3, [pc, #148]	@ (8005fd0 <HAL_I2S_Init+0x27c>)
 8005f3c:	e001      	b.n	8005f42 <HAL_I2S_Init+0x1ee>
 8005f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f4e:	d003      	beq.n	8005f58 <HAL_I2S_Init+0x204>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	e001      	b.n	8005f64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	897b      	ldrh	r3, [r7, #10]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005f90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a0d      	ldr	r2, [pc, #52]	@ (8005fcc <HAL_I2S_Init+0x278>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <HAL_I2S_Init+0x24c>
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <HAL_I2S_Init+0x27c>)
 8005f9e:	e001      	b.n	8005fa4 <HAL_I2S_Init+0x250>
 8005fa0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa4:	897a      	ldrh	r2, [r7, #10]
 8005fa6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	080060cb 	.word	0x080060cb
 8005fc4:	cccccccd 	.word	0xcccccccd
 8005fc8:	080061e1 	.word	0x080061e1
 8005fcc:	40003800 	.word	0x40003800
 8005fd0:	40003400 	.word	0x40003400

08005fd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10e      	bne.n	8006064 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006054:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ffb8 	bl	8005fd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	b292      	uxth	r2, r2
 8006080:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10e      	bne.n	80060c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff93 	bl	8005fe8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d13a      	bne.n	800615c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d109      	bne.n	8006104 <I2S_IRQHandler+0x3a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fa:	2b40      	cmp	r3, #64	@ 0x40
 80060fc:	d102      	bne.n	8006104 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff ffb4 	bl	800606c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610a:	2b40      	cmp	r3, #64	@ 0x40
 800610c:	d126      	bne.n	800615c <I2S_IRQHandler+0x92>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b20      	cmp	r3, #32
 800611a:	d11f      	bne.n	800615c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800612a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	f043 0202 	orr.w	r2, r3, #2
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff50 	bl	8005ffc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b03      	cmp	r3, #3
 8006166:	d136      	bne.n	80061d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d109      	bne.n	8006186 <I2S_IRQHandler+0xbc>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617c:	2b80      	cmp	r3, #128	@ 0x80
 800617e:	d102      	bne.n	8006186 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff45 	bl	8006010 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d122      	bne.n	80061d6 <I2S_IRQHandler+0x10c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d11b      	bne.n	80061d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c8:	f043 0204 	orr.w	r2, r3, #4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff13 	bl	8005ffc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061d6:	bf00      	nop
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a92      	ldr	r2, [pc, #584]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80061fa:	4b92      	ldr	r3, [pc, #584]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061fc:	e001      	b.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80061fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a8b      	ldr	r2, [pc, #556]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006218:	4b8a      	ldr	r3, [pc, #552]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800621a:	e001      	b.n	8006220 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800621c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622c:	d004      	beq.n	8006238 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 8099 	bne.w	800636a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b02      	cmp	r3, #2
 8006240:	d107      	bne.n	8006252 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f925 	bl	800649c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9c8 	bl	80065fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006272:	2b40      	cmp	r3, #64	@ 0x40
 8006274:	d13a      	bne.n	80062ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d035      	beq.n	80062ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a6e      	ldr	r2, [pc, #440]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800628a:	4b6e      	ldr	r3, [pc, #440]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800628c:	e001      	b.n	8006292 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800628e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4969      	ldr	r1, [pc, #420]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800629a:	428b      	cmp	r3, r1
 800629c:	d101      	bne.n	80062a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800629e:	4b69      	ldr	r3, [pc, #420]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062a0:	e001      	b.n	80062a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80062a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062de:	f043 0202 	orr.w	r2, r3, #2
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fe88 	bl	8005ffc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	f040 80c3 	bne.w	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80bd 	beq.w	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006312:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a49      	ldr	r2, [pc, #292]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d101      	bne.n	8006322 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800631e:	4b49      	ldr	r3, [pc, #292]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006320:	e001      	b.n	8006326 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4944      	ldr	r1, [pc, #272]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800632e:	428b      	cmp	r3, r1
 8006330:	d101      	bne.n	8006336 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006332:	4b44      	ldr	r3, [pc, #272]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006334:	e001      	b.n	800633a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006336:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800633a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800633e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635a:	f043 0204 	orr.w	r2, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fe4a 	bl	8005ffc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006368:	e089      	b.n	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b02      	cmp	r3, #2
 8006372:	d107      	bne.n	8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8be 	bl	8006500 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d107      	bne.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f8fd 	bl	8006598 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d12f      	bne.n	8006408 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d02a      	beq.n	8006408 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80063cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063ce:	e001      	b.n	80063d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80063d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4919      	ldr	r1, [pc, #100]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063dc:	428b      	cmp	r3, r1
 80063de:	d101      	bne.n	80063e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063e0:	4b18      	ldr	r3, [pc, #96]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063e2:	e001      	b.n	80063e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f043 0202 	orr.w	r2, r3, #2
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fdfa 	bl	8005ffc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d136      	bne.n	8006480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d031      	beq.n	8006480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a07      	ldr	r2, [pc, #28]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006426:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006428:	e001      	b.n	800642e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800642a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4902      	ldr	r1, [pc, #8]	@ (8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006436:	428b      	cmp	r3, r1
 8006438:	d106      	bne.n	8006448 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800643a:	4b02      	ldr	r3, [pc, #8]	@ (8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800643c:	e006      	b.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800643e:	bf00      	nop
 8006440:	40003800 	.word	0x40003800
 8006444:	40003400 	.word	0x40003400
 8006448:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800644c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006450:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006460:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	f043 0204 	orr.w	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fdc0 	bl	8005ffc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800647c:	e000      	b.n	8006480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800647e:	bf00      	nop
}
 8006480:	bf00      	nop
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c99      	adds	r1, r3, #2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d113      	bne.n	80064f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ffc9 	bl	8006488 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c99      	adds	r1, r3, #2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6251      	str	r1, [r2, #36]	@ 0x24
 8006512:	8819      	ldrh	r1, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <I2SEx_TxISR_I2SExt+0x90>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <I2SEx_TxISR_I2SExt+0x22>
 800651e:	4b1d      	ldr	r3, [pc, #116]	@ (8006594 <I2SEx_TxISR_I2SExt+0x94>)
 8006520:	e001      	b.n	8006526 <I2SEx_TxISR_I2SExt+0x26>
 8006522:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006526:	460a      	mov	r2, r1
 8006528:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d121      	bne.n	8006586 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a12      	ldr	r2, [pc, #72]	@ (8006590 <I2SEx_TxISR_I2SExt+0x90>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d101      	bne.n	8006550 <I2SEx_TxISR_I2SExt+0x50>
 800654c:	4b11      	ldr	r3, [pc, #68]	@ (8006594 <I2SEx_TxISR_I2SExt+0x94>)
 800654e:	e001      	b.n	8006554 <I2SEx_TxISR_I2SExt+0x54>
 8006550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	490d      	ldr	r1, [pc, #52]	@ (8006590 <I2SEx_TxISR_I2SExt+0x90>)
 800655c:	428b      	cmp	r3, r1
 800655e:	d101      	bne.n	8006564 <I2SEx_TxISR_I2SExt+0x64>
 8006560:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <I2SEx_TxISR_I2SExt+0x94>)
 8006562:	e001      	b.n	8006568 <I2SEx_TxISR_I2SExt+0x68>
 8006564:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006568:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800656c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff81 	bl	8006488 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40003800 	.word	0x40003800
 8006594:	40003400 	.word	0x40003400

08006598 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68d8      	ldr	r0, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	1c99      	adds	r1, r3, #2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80065b0:	b282      	uxth	r2, r0
 80065b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d113      	bne.n	80065f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ff4a 	bl	8006488 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a20      	ldr	r2, [pc, #128]	@ (800668c <I2SEx_RxISR_I2SExt+0x90>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <I2SEx_RxISR_I2SExt+0x16>
 800660e:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <I2SEx_RxISR_I2SExt+0x94>)
 8006610:	e001      	b.n	8006616 <I2SEx_RxISR_I2SExt+0x1a>
 8006612:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006616:	68d8      	ldr	r0, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	1c99      	adds	r1, r3, #2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006622:	b282      	uxth	r2, r0
 8006624:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d121      	bne.n	8006682 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <I2SEx_RxISR_I2SExt+0x90>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d101      	bne.n	800664c <I2SEx_RxISR_I2SExt+0x50>
 8006648:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <I2SEx_RxISR_I2SExt+0x94>)
 800664a:	e001      	b.n	8006650 <I2SEx_RxISR_I2SExt+0x54>
 800664c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	490d      	ldr	r1, [pc, #52]	@ (800668c <I2SEx_RxISR_I2SExt+0x90>)
 8006658:	428b      	cmp	r3, r1
 800665a:	d101      	bne.n	8006660 <I2SEx_RxISR_I2SExt+0x64>
 800665c:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <I2SEx_RxISR_I2SExt+0x94>)
 800665e:	e001      	b.n	8006664 <I2SEx_RxISR_I2SExt+0x68>
 8006660:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006664:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006668:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff03 	bl	8006488 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40003800 	.word	0x40003800
 8006690:	40003400 	.word	0x40003400

08006694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e267      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d075      	beq.n	800679e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066b2:	4b88      	ldr	r3, [pc, #544]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d00c      	beq.n	80066d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066be:	4b85      	ldr	r3, [pc, #532]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d112      	bne.n	80066f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ca:	4b82      	ldr	r3, [pc, #520]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d6:	d10b      	bne.n	80066f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d8:	4b7e      	ldr	r3, [pc, #504]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d05b      	beq.n	800679c <HAL_RCC_OscConfig+0x108>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d157      	bne.n	800679c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e242      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f8:	d106      	bne.n	8006708 <HAL_RCC_OscConfig+0x74>
 80066fa:	4b76      	ldr	r3, [pc, #472]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a75      	ldr	r2, [pc, #468]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e01d      	b.n	8006744 <HAL_RCC_OscConfig+0xb0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x98>
 8006712:	4b70      	ldr	r3, [pc, #448]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6f      	ldr	r2, [pc, #444]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b6d      	ldr	r3, [pc, #436]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6c      	ldr	r2, [pc, #432]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0xb0>
 800672c:	4b69      	ldr	r3, [pc, #420]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a68      	ldr	r2, [pc, #416]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4b66      	ldr	r3, [pc, #408]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a65      	ldr	r2, [pc, #404]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800673e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fd fa04 	bl	8003b58 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006754:	f7fd fa00 	bl	8003b58 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	@ 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e207      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b5b      	ldr	r3, [pc, #364]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0xc0>
 8006772:	e014      	b.n	800679e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fd f9f0 	bl	8003b58 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800677c:	f7fd f9ec 	bl	8003b58 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	@ 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e1f3      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678e:	4b51      	ldr	r3, [pc, #324]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0xe8>
 800679a:	e000      	b.n	800679e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800679c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d063      	beq.n	8006872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067aa:	4b4a      	ldr	r3, [pc, #296]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b6:	4b47      	ldr	r3, [pc, #284]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d11c      	bne.n	80067fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067c2:	4b44      	ldr	r3, [pc, #272]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d116      	bne.n	80067fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	4b41      	ldr	r3, [pc, #260]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_RCC_OscConfig+0x152>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1c7      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e6:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	4937      	ldr	r1, [pc, #220]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067fa:	e03a      	b.n	8006872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d020      	beq.n	8006846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006804:	4b34      	ldr	r3, [pc, #208]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680a:	f7fd f9a5 	bl	8003b58 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006812:	f7fd f9a1 	bl	8003b58 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e1a8      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006824:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4925      	ldr	r1, [pc, #148]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]
 8006844:	e015      	b.n	8006872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fd f984 	bl	8003b58 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006854:	f7fd f980 	bl	8003b58 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e187      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006866:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d036      	beq.n	80068ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006886:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <HAL_RCC_OscConfig+0x248>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fd f964 	bl	8003b58 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006894:	f7fd f960 	bl	8003b58 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e167      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80068a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x200>
 80068b2:	e01b      	b.n	80068ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068b4:	4b09      	ldr	r3, [pc, #36]	@ (80068dc <HAL_RCC_OscConfig+0x248>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ba:	f7fd f94d 	bl	8003b58 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c0:	e00e      	b.n	80068e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c2:	f7fd f949 	bl	8003b58 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d907      	bls.n	80068e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e150      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
 80068d4:	40023800 	.word	0x40023800
 80068d8:	42470000 	.word	0x42470000
 80068dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e0:	4b88      	ldr	r3, [pc, #544]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80068e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ea      	bne.n	80068c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8097 	beq.w	8006a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068fe:	4b81      	ldr	r3, [pc, #516]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10f      	bne.n	800692a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	4b7d      	ldr	r3, [pc, #500]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	4a7c      	ldr	r2, [pc, #496]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006918:	6413      	str	r3, [r2, #64]	@ 0x40
 800691a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006922:	60bb      	str	r3, [r7, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692a:	4b77      	ldr	r3, [pc, #476]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d118      	bne.n	8006968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006936:	4b74      	ldr	r3, [pc, #464]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a73      	ldr	r2, [pc, #460]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006942:	f7fd f909 	bl	8003b58 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694a:	f7fd f905 	bl	8003b58 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e10c      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695c:	4b6a      	ldr	r3, [pc, #424]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x2ea>
 8006970:	4b64      	ldr	r3, [pc, #400]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006974:	4a63      	ldr	r2, [pc, #396]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	@ 0x70
 800697c:	e01c      	b.n	80069b8 <HAL_RCC_OscConfig+0x324>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b05      	cmp	r3, #5
 8006984:	d10c      	bne.n	80069a0 <HAL_RCC_OscConfig+0x30c>
 8006986:	4b5f      	ldr	r3, [pc, #380]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	4a5e      	ldr	r2, [pc, #376]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	6713      	str	r3, [r2, #112]	@ 0x70
 8006992:	4b5c      	ldr	r3, [pc, #368]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	4a5b      	ldr	r2, [pc, #364]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6713      	str	r3, [r2, #112]	@ 0x70
 800699e:	e00b      	b.n	80069b8 <HAL_RCC_OscConfig+0x324>
 80069a0:	4b58      	ldr	r3, [pc, #352]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a4:	4a57      	ldr	r2, [pc, #348]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ac:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	4a54      	ldr	r2, [pc, #336]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069b2:	f023 0304 	bic.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fd f8ca 	bl	8003b58 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fd f8c6 	bl	8003b58 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0cb      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069de:	4b49      	ldr	r3, [pc, #292]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ee      	beq.n	80069c8 <HAL_RCC_OscConfig+0x334>
 80069ea:	e014      	b.n	8006a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ec:	f7fd f8b4 	bl	8003b58 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fd f8b0 	bl	8003b58 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e0b5      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ee      	bne.n	80069f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d105      	bne.n	8006a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1c:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	4a38      	ldr	r2, [pc, #224]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a1 	beq.w	8006b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a32:	4b34      	ldr	r3, [pc, #208]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d05c      	beq.n	8006af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d141      	bne.n	8006aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b31      	ldr	r3, [pc, #196]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fd f884 	bl	8003b58 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fd f880 	bl	8003b58 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e087      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a66:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	019b      	lsls	r3, r3, #6
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	491b      	ldr	r1, [pc, #108]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa2:	f7fd f859 	bl	8003b58 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fd f855 	bl	8003b58 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e05c      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abc:	4b11      	ldr	r3, [pc, #68]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x416>
 8006ac8:	e054      	b.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aca:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fd f842 	bl	8003b58 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fd f83e 	bl	8003b58 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e045      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x444>
 8006af6:	e03d      	b.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e038      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
 8006b04:	40023800 	.word	0x40023800
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b10:	4b1b      	ldr	r3, [pc, #108]	@ (8006b80 <HAL_RCC_OscConfig+0x4ec>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d028      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d121      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d11a      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b40:	4013      	ands	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d111      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d001      	beq.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800

08006b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0cc      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b98:	4b68      	ldr	r3, [pc, #416]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90c      	bls.n	8006bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba6:	4b65      	ldr	r3, [pc, #404]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bae:	4b63      	ldr	r3, [pc, #396]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0b8      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bd8:	4b59      	ldr	r3, [pc, #356]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4a58      	ldr	r2, [pc, #352]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bf0:	4b53      	ldr	r3, [pc, #332]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a52      	ldr	r2, [pc, #328]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bfc:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	494d      	ldr	r1, [pc, #308]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d044      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d107      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c22:	4b47      	ldr	r3, [pc, #284]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d119      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e07f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d003      	beq.n	8006c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d107      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c42:	4b3f      	ldr	r3, [pc, #252]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e06f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c52:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e067      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c62:	4b37      	ldr	r3, [pc, #220]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f023 0203 	bic.w	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4934      	ldr	r1, [pc, #208]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c74:	f7fc ff70 	bl	8003b58 <HAL_GetTick>
 8006c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7a:	e00a      	b.n	8006c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c7c:	f7fc ff6c 	bl	8003b58 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e04f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c92:	4b2b      	ldr	r3, [pc, #172]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 020c 	and.w	r2, r3, #12
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d1eb      	bne.n	8006c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b25      	ldr	r3, [pc, #148]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d20c      	bcs.n	8006ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b22      	ldr	r3, [pc, #136]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e032      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd8:	4b19      	ldr	r3, [pc, #100]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4916      	ldr	r1, [pc, #88]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cf6:	4b12      	ldr	r3, [pc, #72]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	490e      	ldr	r1, [pc, #56]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d0a:	f000 f821 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	490a      	ldr	r1, [pc, #40]	@ (8006d44 <HAL_RCC_ClockConfig+0x1c0>)
 8006d1c:	5ccb      	ldrb	r3, [r1, r3]
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	4a09      	ldr	r2, [pc, #36]	@ (8006d48 <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d26:	4b09      	ldr	r3, [pc, #36]	@ (8006d4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fc fcf4 	bl	8003718 <HAL_InitTick>

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40023c00 	.word	0x40023c00
 8006d40:	40023800 	.word	0x40023800
 8006d44:	080158f4 	.word	0x080158f4
 8006d48:	2000022c 	.word	0x2000022c
 8006d4c:	20000230 	.word	0x20000230

08006d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b094      	sub	sp, #80	@ 0x50
 8006d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d60:	2300      	movs	r3, #0
 8006d62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d68:	4b79      	ldr	r3, [pc, #484]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 030c 	and.w	r3, r3, #12
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d00d      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0x40>
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	f200 80e1 	bhi.w	8006f3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_RCC_GetSysClockFreq+0x34>
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d003      	beq.n	8006d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d82:	e0db      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d84:	4b73      	ldr	r3, [pc, #460]	@ (8006f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006d88:	e0db      	b.n	8006f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d8a:	4b73      	ldr	r3, [pc, #460]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d8e:	e0d8      	b.n	8006f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d90:	4b6f      	ldr	r3, [pc, #444]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d063      	beq.n	8006e6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da6:	4b6a      	ldr	r3, [pc, #424]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	2200      	movs	r2, #0
 8006dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006db0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dba:	2300      	movs	r3, #0
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	f04f 0000 	mov.w	r0, #0
 8006dca:	f04f 0100 	mov.w	r1, #0
 8006dce:	0159      	lsls	r1, r3, #5
 8006dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dd4:	0150      	lsls	r0, r2, #5
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4621      	mov	r1, r4
 8006ddc:	1a51      	subs	r1, r2, r1
 8006dde:	6139      	str	r1, [r7, #16]
 8006de0:	4629      	mov	r1, r5
 8006de2:	eb63 0301 	sbc.w	r3, r3, r1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006df4:	4659      	mov	r1, fp
 8006df6:	018b      	lsls	r3, r1, #6
 8006df8:	4651      	mov	r1, sl
 8006dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dfe:	4651      	mov	r1, sl
 8006e00:	018a      	lsls	r2, r1, #6
 8006e02:	4651      	mov	r1, sl
 8006e04:	ebb2 0801 	subs.w	r8, r2, r1
 8006e08:	4659      	mov	r1, fp
 8006e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e22:	4690      	mov	r8, r2
 8006e24:	4699      	mov	r9, r3
 8006e26:	4623      	mov	r3, r4
 8006e28:	eb18 0303 	adds.w	r3, r8, r3
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	462b      	mov	r3, r5
 8006e30:	eb49 0303 	adc.w	r3, r9, r3
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e42:	4629      	mov	r1, r5
 8006e44:	024b      	lsls	r3, r1, #9
 8006e46:	4621      	mov	r1, r4
 8006e48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	024a      	lsls	r2, r1, #9
 8006e50:	4610      	mov	r0, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e56:	2200      	movs	r2, #0
 8006e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e60:	f7f9 fec2 	bl	8000be8 <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4613      	mov	r3, r2
 8006e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e6c:	e058      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e6e:	4b38      	ldr	r3, [pc, #224]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	099b      	lsrs	r3, r3, #6
 8006e74:	2200      	movs	r2, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	4611      	mov	r1, r2
 8006e7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e7e:	623b      	str	r3, [r7, #32]
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	f04f 0000 	mov.w	r0, #0
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	0159      	lsls	r1, r3, #5
 8006e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e9a:	0150      	lsls	r0, r2, #5
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	00eb      	lsls	r3, r5, #3
 8006ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ed6:	00e2      	lsls	r2, r4, #3
 8006ed8:	4614      	mov	r4, r2
 8006eda:	461d      	mov	r5, r3
 8006edc:	4643      	mov	r3, r8
 8006ede:	18e3      	adds	r3, r4, r3
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	eb45 0303 	adc.w	r3, r5, r3
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	028b      	lsls	r3, r1, #10
 8006efa:	4621      	mov	r1, r4
 8006efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f00:	4621      	mov	r1, r4
 8006f02:	028a      	lsls	r2, r1, #10
 8006f04:	4610      	mov	r0, r2
 8006f06:	4619      	mov	r1, r3
 8006f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	61fa      	str	r2, [r7, #28]
 8006f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f14:	f7f9 fe68 	bl	8000be8 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f20:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f3a:	e002      	b.n	8006f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f3c:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3750      	adds	r7, #80	@ 0x50
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f4e:	bf00      	nop
 8006f50:	40023800 	.word	0x40023800
 8006f54:	00f42400 	.word	0x00f42400
 8006f58:	007a1200 	.word	0x007a1200

08006f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f60:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f62:	681b      	ldr	r3, [r3, #0]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	2000022c 	.word	0x2000022c

08006f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f78:	f7ff fff0 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	0a9b      	lsrs	r3, r3, #10
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	4903      	ldr	r1, [pc, #12]	@ (8006f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f8a:	5ccb      	ldrb	r3, [r1, r3]
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40023800 	.word	0x40023800
 8006f98:	08015904 	.word	0x08015904

08006f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fa0:	f7ff ffdc 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	0b5b      	lsrs	r3, r3, #13
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	4903      	ldr	r1, [pc, #12]	@ (8006fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	08015904 	.word	0x08015904

08006fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	220f      	movs	r2, #15
 8006fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006fd4:	4b12      	ldr	r3, [pc, #72]	@ (8007020 <HAL_RCC_GetClockConfig+0x5c>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 0203 	and.w	r2, r3, #3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8007020 <HAL_RCC_GetClockConfig+0x5c>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fec:	4b0c      	ldr	r3, [pc, #48]	@ (8007020 <HAL_RCC_GetClockConfig+0x5c>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ff8:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	08db      	lsrs	r3, r3, #3
 8006ffe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007006:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <HAL_RCC_GetClockConfig+0x60>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0207 	and.w	r2, r3, #7
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	601a      	str	r2, [r3, #0]
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40023800 	.word	0x40023800
 8007024:	40023c00 	.word	0x40023c00

08007028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800704c:	2b00      	cmp	r3, #0
 800704e:	d035      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007050:	4b62      	ldr	r3, [pc, #392]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007056:	f7fc fd7f 	bl	8003b58 <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800705c:	e008      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800705e:	f7fc fd7b 	bl	8003b58 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0b0      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007070:	4b5b      	ldr	r3, [pc, #364]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f0      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	019a      	lsls	r2, r3, #6
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	071b      	lsls	r3, r3, #28
 8007088:	4955      	ldr	r1, [pc, #340]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007090:	4b52      	ldr	r3, [pc, #328]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007096:	f7fc fd5f 	bl	8003b58 <HAL_GetTick>
 800709a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800709c:	e008      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800709e:	f7fc fd5b 	bl	8003b58 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e090      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070b0:	4b4b      	ldr	r3, [pc, #300]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8083 	beq.w	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	4b44      	ldr	r3, [pc, #272]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	4a43      	ldr	r2, [pc, #268]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80070da:	4b41      	ldr	r3, [pc, #260]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070e6:	4b3f      	ldr	r3, [pc, #252]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3e      	ldr	r2, [pc, #248]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070f2:	f7fc fd31 	bl	8003b58 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070f8:	e008      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070fa:	f7fc fd2d 	bl	8003b58 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e062      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800710c:	4b35      	ldr	r3, [pc, #212]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007118:	4b31      	ldr	r3, [pc, #196]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800711a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007120:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	429a      	cmp	r2, r3
 8007134:	d028      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007136:	4b2a      	ldr	r3, [pc, #168]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007140:	4b29      	ldr	r3, [pc, #164]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007146:	4b28      	ldr	r3, [pc, #160]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800714c:	4a24      	ldr	r2, [pc, #144]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007152:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d114      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800715e:	f7fc fcfb 	bl	8003b58 <HAL_GetTick>
 8007162:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	e00a      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7fc fcf7 	bl	8003b58 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e02a      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717c:	4b18      	ldr	r3, [pc, #96]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0ee      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007194:	d10d      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007196:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071aa:	490d      	ldr	r1, [pc, #52]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	608b      	str	r3, [r1, #8]
 80071b0:	e005      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071b2:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4a0a      	ldr	r2, [pc, #40]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80071bc:	6093      	str	r3, [r2, #8]
 80071be:	4b08      	ldr	r3, [pc, #32]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ca:	4905      	ldr	r1, [pc, #20]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	42470068 	.word	0x42470068
 80071e0:	40023800 	.word	0x40023800
 80071e4:	40007000 	.word	0x40007000
 80071e8:	42470e40 	.word	0x42470e40

080071ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d13e      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800720a:	4b23      	ldr	r3, [pc, #140]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d12f      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007220:	4b1e      	ldr	r3, [pc, #120]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007222:	617b      	str	r3, [r7, #20]
          break;
 8007224:	e02f      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007226:	4b1c      	ldr	r3, [pc, #112]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007232:	d108      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007234:	4b18      	ldr	r3, [pc, #96]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800723c:	4a18      	ldr	r2, [pc, #96]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	e007      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007246:	4b14      	ldr	r3, [pc, #80]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724e:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007256:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	fb02 f303 	mul.w	r3, r2, r3
 8007268:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007270:	0f1b      	lsrs	r3, r3, #28
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
          break;
 800727e:	e002      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
          break;
 8007284:	bf00      	nop
        }
      }
      break;
 8007286:	bf00      	nop
    }
  }
  return frequency;
 8007288:	697b      	ldr	r3, [r7, #20]
}
 800728a:	4618      	mov	r0, r3
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40023800 	.word	0x40023800
 800729c:	00bb8000 	.word	0x00bb8000
 80072a0:	007a1200 	.word	0x007a1200
 80072a4:	00f42400 	.word	0x00f42400

080072a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e07b      	b.n	80073b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ca:	d009      	beq.n	80072e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
 80072d2:	e005      	b.n	80072e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fc f938 	bl	8003570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007364:	ea42 0103 	orr.w	r1, r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 0104 	and.w	r1, r3, #4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	f003 0210 	and.w	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e041      	b.n	8007450 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f839 	bl	8007458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 f9d7 	bl	80077ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d001      	beq.n	8007484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e04e      	b.n	8007522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a23      	ldr	r2, [pc, #140]	@ (8007530 <HAL_TIM_Base_Start_IT+0xc4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ae:	d01d      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007534 <HAL_TIM_Base_Start_IT+0xc8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1e      	ldr	r2, [pc, #120]	@ (8007538 <HAL_TIM_Base_Start_IT+0xcc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <HAL_TIM_Base_Start_IT+0xd0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <HAL_TIM_Base_Start_IT+0xd4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a19      	ldr	r2, [pc, #100]	@ (8007544 <HAL_TIM_Base_Start_IT+0xd8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a18      	ldr	r2, [pc, #96]	@ (8007548 <HAL_TIM_Base_Start_IT+0xdc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d111      	bne.n	8007510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d010      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750e:	e007      	b.n	8007520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40010400 	.word	0x40010400
 8007544:	40014000 	.word	0x40014000
 8007548:	40001800 	.word	0x40001800

0800754c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b02      	cmp	r3, #2
 8007560:	d122      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b02      	cmp	r3, #2
 800756e:	d11b      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0202 	mvn.w	r2, #2
 8007578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f8ee 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 8007594:	e005      	b.n	80075a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f8e0 	bl	800775c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f8f1 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d122      	bne.n	80075fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d11b      	bne.n	80075fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0204 	mvn.w	r2, #4
 80075cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8c4 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 80075e8:	e005      	b.n	80075f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8b6 	bl	800775c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8c7 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b08      	cmp	r3, #8
 8007608:	d122      	bne.n	8007650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b08      	cmp	r3, #8
 8007616:	d11b      	bne.n	8007650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0208 	mvn.w	r2, #8
 8007620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2204      	movs	r2, #4
 8007626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f89a 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 800763c:	e005      	b.n	800764a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f88c 	bl	800775c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f89d 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b10      	cmp	r3, #16
 800765c:	d122      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b10      	cmp	r3, #16
 800766a:	d11b      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f06f 0210 	mvn.w	r2, #16
 8007674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2208      	movs	r2, #8
 800767a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f870 	bl	8007770 <HAL_TIM_IC_CaptureCallback>
 8007690:	e005      	b.n	800769e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f862 	bl	800775c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f873 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10e      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d107      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0201 	mvn.w	r2, #1
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fb fe44 	bl	8003358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076da:	2b80      	cmp	r3, #128	@ 0x80
 80076dc:	d10e      	bne.n	80076fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e8:	2b80      	cmp	r3, #128	@ 0x80
 80076ea:	d107      	bne.n	80076fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80076f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f902 	bl	8007900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007706:	2b40      	cmp	r3, #64	@ 0x40
 8007708:	d10e      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b40      	cmp	r3, #64	@ 0x40
 8007716:	d107      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f838 	bl	8007798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b20      	cmp	r3, #32
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b20      	cmp	r3, #32
 8007742:	d107      	bne.n	8007754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0220 	mvn.w	r2, #32
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8cc 	bl	80078ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a40      	ldr	r2, [pc, #256]	@ (80078c0 <TIM_Base_SetConfig+0x114>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ca:	d00f      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3d      	ldr	r2, [pc, #244]	@ (80078c4 <TIM_Base_SetConfig+0x118>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00b      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3c      	ldr	r2, [pc, #240]	@ (80078c8 <TIM_Base_SetConfig+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d007      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3b      	ldr	r2, [pc, #236]	@ (80078cc <TIM_Base_SetConfig+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3a      	ldr	r2, [pc, #232]	@ (80078d0 <TIM_Base_SetConfig+0x124>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d108      	bne.n	80077fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2f      	ldr	r2, [pc, #188]	@ (80078c0 <TIM_Base_SetConfig+0x114>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d02b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780c:	d027      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2c      	ldr	r2, [pc, #176]	@ (80078c4 <TIM_Base_SetConfig+0x118>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d023      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2b      	ldr	r2, [pc, #172]	@ (80078c8 <TIM_Base_SetConfig+0x11c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01f      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2a      	ldr	r2, [pc, #168]	@ (80078cc <TIM_Base_SetConfig+0x120>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a29      	ldr	r2, [pc, #164]	@ (80078d0 <TIM_Base_SetConfig+0x124>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d017      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a28      	ldr	r2, [pc, #160]	@ (80078d4 <TIM_Base_SetConfig+0x128>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a27      	ldr	r2, [pc, #156]	@ (80078d8 <TIM_Base_SetConfig+0x12c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00f      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a26      	ldr	r2, [pc, #152]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a25      	ldr	r2, [pc, #148]	@ (80078e0 <TIM_Base_SetConfig+0x134>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d007      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a24      	ldr	r2, [pc, #144]	@ (80078e4 <TIM_Base_SetConfig+0x138>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a23      	ldr	r2, [pc, #140]	@ (80078e8 <TIM_Base_SetConfig+0x13c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d108      	bne.n	8007870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0a      	ldr	r2, [pc, #40]	@ (80078c0 <TIM_Base_SetConfig+0x114>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d003      	beq.n	80078a4 <TIM_Base_SetConfig+0xf8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a0c      	ldr	r2, [pc, #48]	@ (80078d0 <TIM_Base_SetConfig+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d103      	bne.n	80078ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	615a      	str	r2, [r3, #20]
}
 80078b2:	bf00      	nop
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40000400 	.word	0x40000400
 80078c8:	40000800 	.word	0x40000800
 80078cc:	40000c00 	.word	0x40000c00
 80078d0:	40010400 	.word	0x40010400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800
 80078e0:	40001800 	.word	0x40001800
 80078e4:	40001c00 	.word	0x40001c00
 80078e8:	40002000 	.word	0x40002000

080078ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e03f      	b.n	80079a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fb fe60 	bl	8003600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2224      	movs	r2, #36	@ 0x24
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fddf 	bl	800851c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800796c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800797c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800798c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b08a      	sub	sp, #40	@ 0x28
 80079b2:	af02      	add	r7, sp, #8
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	4613      	mov	r3, r2
 80079bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d17c      	bne.n	8007ac8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_UART_Transmit+0x2c>
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e075      	b.n	8007aca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UART_Transmit+0x3e>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e06e      	b.n	8007aca <HAL_UART_Transmit+0x11c>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2221      	movs	r2, #33	@ 0x21
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a02:	f7fc f8a9 	bl	8003b58 <HAL_GetTick>
 8007a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a1c:	d108      	bne.n	8007a30 <HAL_UART_Transmit+0x82>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e003      	b.n	8007a38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007a40:	e02a      	b.n	8007a98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2180      	movs	r1, #128	@ 0x80
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fb1f 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e036      	b.n	8007aca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	3302      	adds	r3, #2
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	e007      	b.n	8007a8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1cf      	bne.n	8007a42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2140      	movs	r1, #64	@ 0x40
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 faef 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e006      	b.n	8007aca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d11d      	bne.n	8007b28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_UART_Receive_IT+0x26>
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e016      	b.n	8007b2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Receive_IT+0x38>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e00f      	b.n	8007b2a <HAL_UART_Receive_IT+0x58>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fb24 	bl	800816c <UART_Start_Receive_IT>
 8007b24:	4603      	mov	r3, r0
 8007b26:	e000      	b.n	8007b2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b28:	2302      	movs	r3, #2
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b0ba      	sub	sp, #232	@ 0xe8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10f      	bne.n	8007b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_UART_IRQHandler+0x66>
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fc07 	bl	80083a6 <UART_Receive_IT>
      return;
 8007b98:	e256      	b.n	8008048 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80de 	beq.w	8007d60 <HAL_UART_IRQHandler+0x22c>
 8007ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80d1 	beq.w	8007d60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <HAL_UART_IRQHandler+0xae>
 8007bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <HAL_UART_IRQHandler+0xd2>
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_UART_IRQHandler+0xf6>
 8007c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	f043 0204 	orr.w	r2, r3, #4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_UART_IRQHandler+0x126>
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f043 0208 	orr.w	r2, r3, #8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 81ed 	beq.w	800803e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_UART_IRQHandler+0x14e>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fb92 	bl	80083a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <HAL_UART_IRQHandler+0x17a>
 8007ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d04f      	beq.n	8007d4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa9a 	bl	80081e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbe:	2b40      	cmp	r3, #64	@ 0x40
 8007cc0:	d141      	bne.n	8007d46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1d9      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d013      	beq.n	8007d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8007f10 <HAL_UART_IRQHandler+0x3dc>)
 8007d1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fc f89a 	bl	8003e5c <HAL_DMA_Abort_IT>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d016      	beq.n	8007d5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	e00e      	b.n	8007d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f990 	bl	8008064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d44:	e00a      	b.n	8007d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f98c 	bl	8008064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	e006      	b.n	8007d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f988 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007d5a:	e170      	b.n	800803e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5c:	bf00      	nop
    return;
 8007d5e:	e16e      	b.n	800803e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	f040 814a 	bne.w	8007ffe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0310 	and.w	r3, r3, #16
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8143 	beq.w	8007ffe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7c:	f003 0310 	and.w	r3, r3, #16
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 813c 	beq.w	8007ffe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da6:	2b40      	cmp	r3, #64	@ 0x40
 8007da8:	f040 80b4 	bne.w	8007f14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007db8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8140 	beq.w	8008042 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	f080 8139 	bcs.w	8008042 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de2:	f000 8088 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1d9      	bne.n	8007de6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3314      	adds	r3, #20
 8007e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3314      	adds	r3, #20
 8007e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e1      	bne.n	8007e32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3314      	adds	r3, #20
 8007e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e3      	bne.n	8007e6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	330c      	adds	r3, #12
 8007ed4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ed8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007eda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e3      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fb ff43 	bl	8003d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8b6 	bl	8008078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f0c:	e099      	b.n	8008042 <HAL_UART_IRQHandler+0x50e>
 8007f0e:	bf00      	nop
 8007f10:	080082af 	.word	0x080082af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 808b 	beq.w	8008046 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8086 	beq.w	8008046 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e3      	bne.n	8007f3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	623b      	str	r3, [r7, #32]
   return(result);
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3314      	adds	r3, #20
 8007f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f96:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e3      	bne.n	8007f72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007fdc:	61fa      	str	r2, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69b9      	ldr	r1, [r7, #24]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e3      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f83e 	bl	8008078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ffc:	e023      	b.n	8008046 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_UART_IRQHandler+0x4ea>
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f95d 	bl	80082d6 <UART_Transmit_IT>
    return;
 800801c:	e014      	b.n	8008048 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800801e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <HAL_UART_IRQHandler+0x514>
 800802a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f99d 	bl	8008376 <UART_EndTransmit_IT>
    return;
 800803c:	e004      	b.n	8008048 <HAL_UART_IRQHandler+0x514>
    return;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <HAL_UART_IRQHandler+0x514>
      return;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <HAL_UART_IRQHandler+0x514>
      return;
 8008046:	bf00      	nop
  }
}
 8008048:	37e8      	adds	r7, #232	@ 0xe8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop

08008050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b090      	sub	sp, #64	@ 0x40
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a0:	e050      	b.n	8008144 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d04c      	beq.n	8008144 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080b0:	f7fb fd52 	bl	8003b58 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080bc:	429a      	cmp	r2, r3
 80080be:	d241      	bcs.n	8008144 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80080e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3314      	adds	r3, #20
 80080fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	613b      	str	r3, [r7, #16]
   return(result);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f023 0301 	bic.w	r3, r3, #1
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008114:	623a      	str	r2, [r7, #32]
 8008116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69f9      	ldr	r1, [r7, #28]
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	61bb      	str	r3, [r7, #24]
   return(result);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e5      	bne.n	80080f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e00f      	b.n	8008164 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	429a      	cmp	r2, r3
 8008152:	bf0c      	ite	eq
 8008154:	2301      	moveq	r3, #1
 8008156:	2300      	movne	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	429a      	cmp	r2, r3
 8008160:	d09f      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3740      	adds	r7, #64	@ 0x40
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	88fa      	ldrh	r2, [r7, #6]
 800818a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2222      	movs	r2, #34	@ 0x22
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695a      	ldr	r2, [r3, #20]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0220 	orr.w	r2, r2, #32
 80081d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b095      	sub	sp, #84	@ 0x54
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008210:	643a      	str	r2, [r7, #64]	@ 0x40
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e5      	bne.n	80081f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3314      	adds	r3, #20
 800822a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	61fb      	str	r3, [r7, #28]
   return(result);
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3314      	adds	r3, #20
 8008242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800824a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e5      	bne.n	8008224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	2b01      	cmp	r3, #1
 800825e:	d119      	bne.n	8008294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f023 0310 	bic.w	r3, r3, #16
 8008276:	647b      	str	r3, [r7, #68]	@ 0x44
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	330c      	adds	r3, #12
 800827e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008280:	61ba      	str	r2, [r7, #24]
 8008282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6979      	ldr	r1, [r7, #20]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	613b      	str	r3, [r7, #16]
   return(result);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e5      	bne.n	8008260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80082a2:	bf00      	nop
 80082a4:	3754      	adds	r7, #84	@ 0x54
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff fecb 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b21      	cmp	r3, #33	@ 0x21
 80082e8:	d13e      	bne.n	8008368 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f2:	d114      	bne.n	800831e <UART_Transmit_IT+0x48>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d110      	bne.n	800831e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008310:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	1c9a      	adds	r2, r3, #2
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	621a      	str	r2, [r3, #32]
 800831c:	e008      	b.n	8008330 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	1c59      	adds	r1, r3, #1
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6211      	str	r1, [r2, #32]
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29b      	uxth	r3, r3
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	4619      	mov	r1, r3
 800833e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10f      	bne.n	8008364 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008352:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008362:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e000      	b.n	800836a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
  }
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800838c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fe5a 	bl	8008050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b08c      	sub	sp, #48	@ 0x30
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b22      	cmp	r3, #34	@ 0x22
 80083b8:	f040 80ab 	bne.w	8008512 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c4:	d117      	bne.n	80083f6 <UART_Receive_IT+0x50>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d113      	bne.n	80083f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ee:	1c9a      	adds	r2, r3, #2
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80083f4:	e026      	b.n	8008444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008408:	d007      	beq.n	800841a <UART_Receive_IT+0x74>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <UART_Receive_IT+0x82>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	e008      	b.n	800843a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008434:	b2da      	uxtb	r2, r3
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29b      	uxth	r3, r3
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	4619      	mov	r1, r3
 8008452:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008454:	2b00      	cmp	r3, #0
 8008456:	d15a      	bne.n	800850e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0220 	bic.w	r2, r2, #32
 8008466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008494:	2b01      	cmp	r3, #1
 8008496:	d135      	bne.n	8008504 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	613b      	str	r3, [r7, #16]
   return(result);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	330c      	adds	r3, #12
 80084bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084be:	623a      	str	r2, [r7, #32]
 80084c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	69f9      	ldr	r1, [r7, #28]
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0310 	and.w	r3, r3, #16
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d10a      	bne.n	80084f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff fdbb 	bl	8008078 <HAL_UARTEx_RxEventCallback>
 8008502:	e002      	b.n	800850a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7fa fe97 	bl	8003238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	e002      	b.n	8008514 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	e000      	b.n	8008514 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008512:	2302      	movs	r3, #2
  }
}
 8008514:	4618      	mov	r0, r3
 8008516:	3730      	adds	r7, #48	@ 0x30
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800851c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008520:	b0c0      	sub	sp, #256	@ 0x100
 8008522:	af00      	add	r7, sp, #0
 8008524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	68d9      	ldr	r1, [r3, #12]
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	ea40 0301 	orr.w	r3, r0, r1
 8008544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	431a      	orrs	r2, r3
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	431a      	orrs	r2, r3
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008574:	f021 010c 	bic.w	r1, r1, #12
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008582:	430b      	orrs	r3, r1
 8008584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008596:	6999      	ldr	r1, [r3, #24]
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	ea40 0301 	orr.w	r3, r0, r1
 80085a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4b8f      	ldr	r3, [pc, #572]	@ (80087e8 <UART_SetConfig+0x2cc>)
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d005      	beq.n	80085bc <UART_SetConfig+0xa0>
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b8d      	ldr	r3, [pc, #564]	@ (80087ec <UART_SetConfig+0x2d0>)
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d104      	bne.n	80085c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085bc:	f7fe fcee 	bl	8006f9c <HAL_RCC_GetPCLK2Freq>
 80085c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085c4:	e003      	b.n	80085ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085c6:	f7fe fcd5 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 80085ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d8:	f040 810c 	bne.w	80087f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	1891      	adds	r1, r2, r2
 80085f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085f6:	415b      	adcs	r3, r3
 80085f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085fe:	4621      	mov	r1, r4
 8008600:	eb12 0801 	adds.w	r8, r2, r1
 8008604:	4629      	mov	r1, r5
 8008606:	eb43 0901 	adc.w	r9, r3, r1
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800861a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800861e:	4690      	mov	r8, r2
 8008620:	4699      	mov	r9, r3
 8008622:	4623      	mov	r3, r4
 8008624:	eb18 0303 	adds.w	r3, r8, r3
 8008628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800862c:	462b      	mov	r3, r5
 800862e:	eb49 0303 	adc.w	r3, r9, r3
 8008632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800864a:	460b      	mov	r3, r1
 800864c:	18db      	adds	r3, r3, r3
 800864e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008650:	4613      	mov	r3, r2
 8008652:	eb42 0303 	adc.w	r3, r2, r3
 8008656:	657b      	str	r3, [r7, #84]	@ 0x54
 8008658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800865c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008660:	f7f8 fac2 	bl	8000be8 <__aeabi_uldivmod>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4b61      	ldr	r3, [pc, #388]	@ (80087f0 <UART_SetConfig+0x2d4>)
 800866a:	fba3 2302 	umull	r2, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	011c      	lsls	r4, r3, #4
 8008672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008676:	2200      	movs	r2, #0
 8008678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800867c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008684:	4642      	mov	r2, r8
 8008686:	464b      	mov	r3, r9
 8008688:	1891      	adds	r1, r2, r2
 800868a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800868c:	415b      	adcs	r3, r3
 800868e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008694:	4641      	mov	r1, r8
 8008696:	eb12 0a01 	adds.w	sl, r2, r1
 800869a:	4649      	mov	r1, r9
 800869c:	eb43 0b01 	adc.w	fp, r3, r1
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086b4:	4692      	mov	sl, r2
 80086b6:	469b      	mov	fp, r3
 80086b8:	4643      	mov	r3, r8
 80086ba:	eb1a 0303 	adds.w	r3, sl, r3
 80086be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086c2:	464b      	mov	r3, r9
 80086c4:	eb4b 0303 	adc.w	r3, fp, r3
 80086c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086e0:	460b      	mov	r3, r1
 80086e2:	18db      	adds	r3, r3, r3
 80086e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e6:	4613      	mov	r3, r2
 80086e8:	eb42 0303 	adc.w	r3, r2, r3
 80086ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086f6:	f7f8 fa77 	bl	8000be8 <__aeabi_uldivmod>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4611      	mov	r1, r2
 8008700:	4b3b      	ldr	r3, [pc, #236]	@ (80087f0 <UART_SetConfig+0x2d4>)
 8008702:	fba3 2301 	umull	r2, r3, r3, r1
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	2264      	movs	r2, #100	@ 0x64
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	1acb      	subs	r3, r1, r3
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008716:	4b36      	ldr	r3, [pc, #216]	@ (80087f0 <UART_SetConfig+0x2d4>)
 8008718:	fba3 2302 	umull	r2, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008724:	441c      	add	r4, r3
 8008726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800872a:	2200      	movs	r2, #0
 800872c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008738:	4642      	mov	r2, r8
 800873a:	464b      	mov	r3, r9
 800873c:	1891      	adds	r1, r2, r2
 800873e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008740:	415b      	adcs	r3, r3
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008748:	4641      	mov	r1, r8
 800874a:	1851      	adds	r1, r2, r1
 800874c:	6339      	str	r1, [r7, #48]	@ 0x30
 800874e:	4649      	mov	r1, r9
 8008750:	414b      	adcs	r3, r1
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008760:	4659      	mov	r1, fp
 8008762:	00cb      	lsls	r3, r1, #3
 8008764:	4651      	mov	r1, sl
 8008766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800876a:	4651      	mov	r1, sl
 800876c:	00ca      	lsls	r2, r1, #3
 800876e:	4610      	mov	r0, r2
 8008770:	4619      	mov	r1, r3
 8008772:	4603      	mov	r3, r0
 8008774:	4642      	mov	r2, r8
 8008776:	189b      	adds	r3, r3, r2
 8008778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800877c:	464b      	mov	r3, r9
 800877e:	460a      	mov	r2, r1
 8008780:	eb42 0303 	adc.w	r3, r2, r3
 8008784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800879c:	460b      	mov	r3, r1
 800879e:	18db      	adds	r3, r3, r3
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087a2:	4613      	mov	r3, r2
 80087a4:	eb42 0303 	adc.w	r3, r2, r3
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80087ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80087b2:	f7f8 fa19 	bl	8000be8 <__aeabi_uldivmod>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <UART_SetConfig+0x2d4>)
 80087bc:	fba3 1302 	umull	r1, r3, r3, r2
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	2164      	movs	r1, #100	@ 0x64
 80087c4:	fb01 f303 	mul.w	r3, r1, r3
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	3332      	adds	r3, #50	@ 0x32
 80087ce:	4a08      	ldr	r2, [pc, #32]	@ (80087f0 <UART_SetConfig+0x2d4>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	f003 0207 	and.w	r2, r3, #7
 80087da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4422      	add	r2, r4
 80087e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087e4:	e106      	b.n	80089f4 <UART_SetConfig+0x4d8>
 80087e6:	bf00      	nop
 80087e8:	40011000 	.word	0x40011000
 80087ec:	40011400 	.word	0x40011400
 80087f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008806:	4642      	mov	r2, r8
 8008808:	464b      	mov	r3, r9
 800880a:	1891      	adds	r1, r2, r2
 800880c:	6239      	str	r1, [r7, #32]
 800880e:	415b      	adcs	r3, r3
 8008810:	627b      	str	r3, [r7, #36]	@ 0x24
 8008812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008816:	4641      	mov	r1, r8
 8008818:	1854      	adds	r4, r2, r1
 800881a:	4649      	mov	r1, r9
 800881c:	eb43 0501 	adc.w	r5, r3, r1
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	00eb      	lsls	r3, r5, #3
 800882a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800882e:	00e2      	lsls	r2, r4, #3
 8008830:	4614      	mov	r4, r2
 8008832:	461d      	mov	r5, r3
 8008834:	4643      	mov	r3, r8
 8008836:	18e3      	adds	r3, r4, r3
 8008838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800883c:	464b      	mov	r3, r9
 800883e:	eb45 0303 	adc.w	r3, r5, r3
 8008842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	f04f 0300 	mov.w	r3, #0
 800885e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008862:	4629      	mov	r1, r5
 8008864:	008b      	lsls	r3, r1, #2
 8008866:	4621      	mov	r1, r4
 8008868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800886c:	4621      	mov	r1, r4
 800886e:	008a      	lsls	r2, r1, #2
 8008870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008874:	f7f8 f9b8 	bl	8000be8 <__aeabi_uldivmod>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4b60      	ldr	r3, [pc, #384]	@ (8008a00 <UART_SetConfig+0x4e4>)
 800887e:	fba3 2302 	umull	r2, r3, r3, r2
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	011c      	lsls	r4, r3, #4
 8008886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800888a:	2200      	movs	r2, #0
 800888c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	1891      	adds	r1, r2, r2
 800889e:	61b9      	str	r1, [r7, #24]
 80088a0:	415b      	adcs	r3, r3
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088a8:	4641      	mov	r1, r8
 80088aa:	1851      	adds	r1, r2, r1
 80088ac:	6139      	str	r1, [r7, #16]
 80088ae:	4649      	mov	r1, r9
 80088b0:	414b      	adcs	r3, r1
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088c0:	4659      	mov	r1, fp
 80088c2:	00cb      	lsls	r3, r1, #3
 80088c4:	4651      	mov	r1, sl
 80088c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ca:	4651      	mov	r1, sl
 80088cc:	00ca      	lsls	r2, r1, #3
 80088ce:	4610      	mov	r0, r2
 80088d0:	4619      	mov	r1, r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	4642      	mov	r2, r8
 80088d6:	189b      	adds	r3, r3, r2
 80088d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088dc:	464b      	mov	r3, r9
 80088de:	460a      	mov	r2, r1
 80088e0:	eb42 0303 	adc.w	r3, r2, r3
 80088e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008900:	4649      	mov	r1, r9
 8008902:	008b      	lsls	r3, r1, #2
 8008904:	4641      	mov	r1, r8
 8008906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800890a:	4641      	mov	r1, r8
 800890c:	008a      	lsls	r2, r1, #2
 800890e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008912:	f7f8 f969 	bl	8000be8 <__aeabi_uldivmod>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4611      	mov	r1, r2
 800891c:	4b38      	ldr	r3, [pc, #224]	@ (8008a00 <UART_SetConfig+0x4e4>)
 800891e:	fba3 2301 	umull	r2, r3, r3, r1
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	2264      	movs	r2, #100	@ 0x64
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	1acb      	subs	r3, r1, r3
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	3332      	adds	r3, #50	@ 0x32
 8008930:	4a33      	ldr	r2, [pc, #204]	@ (8008a00 <UART_SetConfig+0x4e4>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800893c:	441c      	add	r4, r3
 800893e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008942:	2200      	movs	r2, #0
 8008944:	673b      	str	r3, [r7, #112]	@ 0x70
 8008946:	677a      	str	r2, [r7, #116]	@ 0x74
 8008948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	1891      	adds	r1, r2, r2
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	415b      	adcs	r3, r3
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800895c:	4641      	mov	r1, r8
 800895e:	1851      	adds	r1, r2, r1
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	4649      	mov	r1, r9
 8008964:	414b      	adcs	r3, r1
 8008966:	607b      	str	r3, [r7, #4]
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008974:	4659      	mov	r1, fp
 8008976:	00cb      	lsls	r3, r1, #3
 8008978:	4651      	mov	r1, sl
 800897a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800897e:	4651      	mov	r1, sl
 8008980:	00ca      	lsls	r2, r1, #3
 8008982:	4610      	mov	r0, r2
 8008984:	4619      	mov	r1, r3
 8008986:	4603      	mov	r3, r0
 8008988:	4642      	mov	r2, r8
 800898a:	189b      	adds	r3, r3, r2
 800898c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800898e:	464b      	mov	r3, r9
 8008990:	460a      	mov	r2, r1
 8008992:	eb42 0303 	adc.w	r3, r2, r3
 8008996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80089a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80089b0:	4649      	mov	r1, r9
 80089b2:	008b      	lsls	r3, r1, #2
 80089b4:	4641      	mov	r1, r8
 80089b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ba:	4641      	mov	r1, r8
 80089bc:	008a      	lsls	r2, r1, #2
 80089be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089c2:	f7f8 f911 	bl	8000be8 <__aeabi_uldivmod>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <UART_SetConfig+0x4e4>)
 80089cc:	fba3 1302 	umull	r1, r3, r3, r2
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	2164      	movs	r1, #100	@ 0x64
 80089d4:	fb01 f303 	mul.w	r3, r1, r3
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	3332      	adds	r3, #50	@ 0x32
 80089de:	4a08      	ldr	r2, [pc, #32]	@ (8008a00 <UART_SetConfig+0x4e4>)
 80089e0:	fba2 2303 	umull	r2, r3, r2, r3
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	f003 020f 	and.w	r2, r3, #15
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4422      	add	r2, r4
 80089f2:	609a      	str	r2, [r3, #8]
}
 80089f4:	bf00      	nop
 80089f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089fa:	46bd      	mov	sp, r7
 80089fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a00:	51eb851f 	.word	0x51eb851f

08008a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a04:	b084      	sub	sp, #16
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	f107 001c 	add.w	r0, r7, #28
 8008a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d122      	bne.n	8008a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d105      	bne.n	8008a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9c0 	bl	8008ddc <USB_CoreReset>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e01a      	b.n	8008a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f9b4 	bl	8008ddc <USB_CoreReset>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a8a:	e005      	b.n	8008a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10b      	bne.n	8008ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f043 0206 	orr.w	r2, r3, #6
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac2:	b004      	add	sp, #16
 8008ac4:	4770      	bx	lr

08008ac6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f043 0201 	orr.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f023 0201 	bic.w	r2, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d115      	bne.n	8008b58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7fb f819 	bl	8003b70 <HAL_Delay>
      ms++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f93a 	bl	8008dbe <USB_GetMode>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d01e      	beq.n	8008b8e <USB_SetCurrentMode+0x84>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b31      	cmp	r3, #49	@ 0x31
 8008b54:	d9f0      	bls.n	8008b38 <USB_SetCurrentMode+0x2e>
 8008b56:	e01a      	b.n	8008b8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d115      	bne.n	8008b8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	f7fb f800 	bl	8003b70 <HAL_Delay>
      ms++;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f921 	bl	8008dbe <USB_GetMode>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <USB_SetCurrentMode+0x84>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b31      	cmp	r3, #49	@ 0x31
 8008b86:	d9f0      	bls.n	8008b6a <USB_SetCurrentMode+0x60>
 8008b88:	e001      	b.n	8008b8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e005      	b.n	8008b9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b32      	cmp	r3, #50	@ 0x32
 8008b92:	d101      	bne.n	8008b98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e000      	b.n	8008b9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a13      	ldr	r2, [pc, #76]	@ (8008c08 <USB_FlushTxFifo+0x64>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d901      	bls.n	8008bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e01b      	b.n	8008bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	daf2      	bge.n	8008bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	019b      	lsls	r3, r3, #6
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a08      	ldr	r2, [pc, #32]	@ (8008c08 <USB_FlushTxFifo+0x64>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d901      	bls.n	8008bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e006      	b.n	8008bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d0f0      	beq.n	8008bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	00030d40 	.word	0x00030d40

08008c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4a11      	ldr	r2, [pc, #68]	@ (8008c68 <USB_FlushRxFifo+0x5c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e018      	b.n	8008c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	daf2      	bge.n	8008c18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2210      	movs	r2, #16
 8008c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4a08      	ldr	r2, [pc, #32]	@ (8008c68 <USB_FlushRxFifo+0x5c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d901      	bls.n	8008c4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e006      	b.n	8008c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d0f0      	beq.n	8008c3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	00030d40 	.word	0x00030d40

08008c6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b089      	sub	sp, #36	@ 0x24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4611      	mov	r1, r2
 8008c78:	461a      	mov	r2, r3
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	71fb      	strb	r3, [r7, #7]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d123      	bne.n	8008cda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c92:	88bb      	ldrh	r3, [r7, #4]
 8008c94:	3303      	adds	r3, #3
 8008c96:	089b      	lsrs	r3, r3, #2
 8008c98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e018      	b.n	8008cd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	031a      	lsls	r2, r3, #12
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cac:	461a      	mov	r2, r3
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	61bb      	str	r3, [r7, #24]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3e2      	bcc.n	8008ca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3724      	adds	r7, #36	@ 0x24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b08b      	sub	sp, #44	@ 0x2c
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	089b      	lsrs	r3, r3, #2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	623b      	str	r3, [r7, #32]
 8008d12:	e014      	b.n	8008d3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	3301      	adds	r3, #1
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	3301      	adds	r3, #1
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	3301      	adds	r3, #1
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	3301      	adds	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	623b      	str	r3, [r7, #32]
 8008d3e:	6a3a      	ldr	r2, [r7, #32]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d3e6      	bcc.n	8008d14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d46:	8bfb      	ldrh	r3, [r7, #30]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01e      	beq.n	8008d8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d56:	461a      	mov	r2, r3
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	701a      	strb	r2, [r3, #0]
      i++;
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	3301      	adds	r3, #1
 8008d76:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d7e:	8bfb      	ldrh	r3, [r7, #30]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d84:	8bfb      	ldrh	r3, [r7, #30]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1ea      	bne.n	8008d60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	372c      	adds	r7, #44	@ 0x2c
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4013      	ands	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	f003 0301 	and.w	r3, r3, #1
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a13      	ldr	r2, [pc, #76]	@ (8008e40 <USB_CoreReset+0x64>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e01b      	b.n	8008e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	daf2      	bge.n	8008de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f043 0201 	orr.w	r2, r3, #1
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4a09      	ldr	r2, [pc, #36]	@ (8008e40 <USB_CoreReset+0x64>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d901      	bls.n	8008e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e006      	b.n	8008e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d0f0      	beq.n	8008e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	00030d40 	.word	0x00030d40

08008e44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e44:	b084      	sub	sp, #16
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d018      	beq.n	8008ecc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d10a      	bne.n	8008eb6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eae:	f043 0304 	orr.w	r3, r3, #4
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	e014      	b.n	8008ee0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ec4:	f023 0304 	bic.w	r3, r3, #4
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	e009      	b.n	8008ee0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eda:	f023 0304 	bic.w	r3, r3, #4
 8008ede:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fe5e 	bl	8008ba4 <USB_FlushTxFifo>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff fe8a 	bl	8008c0c <USB_FlushRxFifo>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	e015      	b.n	8008f34 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f14:	461a      	mov	r2, r3
 8008f16:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3301      	adds	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d3e5      	bcc.n	8008f08 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295
 8008f48:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a13      	ldr	r2, [pc, #76]	@ (8008fb0 <USB_HostInit+0x16c>)
 8008f62:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a13      	ldr	r2, [pc, #76]	@ (8008fb4 <USB_HostInit+0x170>)
 8008f68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008f6c:	e009      	b.n	8008f82 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2280      	movs	r2, #128	@ 0x80
 8008f72:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a10      	ldr	r2, [pc, #64]	@ (8008fb8 <USB_HostInit+0x174>)
 8008f78:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008fbc <USB_HostInit+0x178>)
 8008f7e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d105      	bne.n	8008f94 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f043 0210 	orr.w	r2, r3, #16
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	4b09      	ldr	r3, [pc, #36]	@ (8008fc0 <USB_HostInit+0x17c>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fac:	b004      	add	sp, #16
 8008fae:	4770      	bx	lr
 8008fb0:	01000200 	.word	0x01000200
 8008fb4:	00e00300 	.word	0x00e00300
 8008fb8:	00600080 	.word	0x00600080
 8008fbc:	004000e0 	.word	0x004000e0
 8008fc0:	a3200008 	.word	0xa3200008

08008fc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	68f9      	ldr	r1, [r7, #12]
 8008ff8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d107      	bne.n	8009016 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800900c:	461a      	mov	r2, r3
 800900e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009012:	6053      	str	r3, [r2, #4]
 8009014:	e009      	b.n	800902a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d106      	bne.n	800902a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009022:	461a      	mov	r2, r3
 8009024:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009028:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009058:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009066:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009068:	2064      	movs	r0, #100	@ 0x64
 800906a:	f7fa fd81 	bl	8003b70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009076:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800907a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800907c:	200a      	movs	r0, #10
 800907e:	f7fa fd77 	bl	8003b70 <HAL_Delay>

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80090b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <USB_DriveVbus+0x44>
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d106      	bne.n	80090d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80090ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090da:	d109      	bne.n	80090f0 <USB_DriveVbus+0x64>
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	0c5b      	lsrs	r3, r3, #17
 800911c:	f003 0303 	and.w	r3, r3, #3
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	b29b      	uxth	r3, r3
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	4603      	mov	r3, r0
 8009160:	70fb      	strb	r3, [r7, #3]
 8009162:	460b      	mov	r3, r1
 8009164:	70bb      	strb	r3, [r7, #2]
 8009166:	4613      	mov	r3, r2
 8009168:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4413      	add	r3, r2
 800917a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917e:	461a      	mov	r2, r3
 8009180:	f04f 33ff 	mov.w	r3, #4294967295
 8009184:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009186:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800918a:	2b03      	cmp	r3, #3
 800918c:	d87e      	bhi.n	800928c <USB_HC_Init+0x13c>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <USB_HC_Init+0x44>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091a5 	.word	0x080091a5
 8009198:	0800924f 	.word	0x0800924f
 800919c:	080091a5 	.word	0x080091a5
 80091a0:	08009211 	.word	0x08009211
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b0:	461a      	mov	r2, r3
 80091b2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80091b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80091b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da10      	bge.n	80091e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	78fa      	ldrb	r2, [r7, #3]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80091e0:	e057      	b.n	8009292 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d051      	beq.n	8009292 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	440a      	add	r2, r1
 8009204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009208:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800920c:	60d3      	str	r3, [r2, #12]
      break;
 800920e:	e040      	b.n	8009292 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	4413      	add	r3, r2
 8009218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800921c:	461a      	mov	r2, r3
 800921e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009222:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009228:	2b00      	cmp	r3, #0
 800922a:	da34      	bge.n	8009296 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	4413      	add	r3, r2
 8009234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	440a      	add	r2, r1
 8009242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800924a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800924c:	e023      	b.n	8009296 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800925a:	461a      	mov	r2, r3
 800925c:	f240 2325 	movw	r3, #549	@ 0x225
 8009260:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009262:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da17      	bge.n	800929a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4413      	add	r3, r2
 8009272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	0151      	lsls	r1, r2, #5
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	440a      	add	r2, r1
 8009280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009284:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009288:	60d3      	str	r3, [r2, #12]
      }
      break;
 800928a:	e006      	b.n	800929a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	77fb      	strb	r3, [r7, #31]
      break;
 8009290:	e004      	b.n	800929c <USB_HC_Init+0x14c>
      break;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <USB_HC_Init+0x14c>
      break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <USB_HC_Init+0x14c>
      break;
 800929a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092b6:	f043 0302 	orr.w	r3, r3, #2
 80092ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	2101      	movs	r1, #1
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	6939      	ldr	r1, [r7, #16]
 80092d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80092d6:	4313      	orrs	r3, r2
 80092d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80092e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da03      	bge.n	80092f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80092ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092f2:	61bb      	str	r3, [r7, #24]
 80092f4:	e001      	b.n	80092fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff feff 	bl	80090fe <USB_GetHostSpeed>
 8009300:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009302:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009306:	2b02      	cmp	r3, #2
 8009308:	d106      	bne.n	8009318 <USB_HC_Init+0x1c8>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d003      	beq.n	8009318 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e001      	b.n	800931c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800931c:	787b      	ldrb	r3, [r7, #1]
 800931e:	059b      	lsls	r3, r3, #22
 8009320:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009324:	78bb      	ldrb	r3, [r7, #2]
 8009326:	02db      	lsls	r3, r3, #11
 8009328:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800932c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800932e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009332:	049b      	lsls	r3, r3, #18
 8009334:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009338:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800933a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800933c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009340:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	0159      	lsls	r1, r3, #5
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	440b      	add	r3, r1
 800934e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009352:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009358:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800935a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800935e:	2b03      	cmp	r3, #3
 8009360:	d003      	beq.n	800936a <USB_HC_Init+0x21a>
 8009362:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10f      	bne.n	800938a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	440a      	add	r2, r1
 8009380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009388:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800938a:	7ffb      	ldrb	r3, [r7, #31]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08c      	sub	sp, #48	@ 0x30
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02d      	beq.n	800941a <USB_HC_StartXfer+0x86>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	791b      	ldrb	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d129      	bne.n	800941a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d117      	bne.n	80093fc <USB_HC_StartXfer+0x68>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	79db      	ldrb	r3, [r3, #7]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <USB_HC_StartXfer+0x48>
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	79db      	ldrb	r3, [r3, #7]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d10f      	bne.n	80093fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	6a3a      	ldr	r2, [r7, #32]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <USB_HC_StartXfer+0x86>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	795b      	ldrb	r3, [r3, #5]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d107      	bne.n	800941a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	4619      	mov	r1, r3
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fa0f 	bl	8009834 <USB_DoPing>
      return HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	e0f8      	b.n	800960c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d018      	beq.n	8009454 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	8912      	ldrh	r2, [r2, #8]
 800942a:	4413      	add	r3, r2
 800942c:	3b01      	subs	r3, #1
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	8912      	ldrh	r2, [r2, #8]
 8009432:	fbb3 f3f2 	udiv	r3, r3, r2
 8009436:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8009438:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800943a:	8b7b      	ldrh	r3, [r7, #26]
 800943c:	429a      	cmp	r2, r3
 800943e:	d90b      	bls.n	8009458 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009440:	8b7b      	ldrh	r3, [r7, #26]
 8009442:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009444:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	8912      	ldrh	r2, [r2, #8]
 800944a:	fb03 f202 	mul.w	r2, r3, r2
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	611a      	str	r2, [r3, #16]
 8009452:	e001      	b.n	8009458 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009454:	2301      	movs	r3, #1
 8009456:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	78db      	ldrb	r3, [r3, #3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009460:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	8912      	ldrh	r2, [r2, #8]
 8009466:	fb03 f202 	mul.w	r2, r3, r2
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	611a      	str	r2, [r3, #16]
 800946e:	e003      	b.n	8009478 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	695a      	ldr	r2, [r3, #20]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009480:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009482:	04d9      	lsls	r1, r3, #19
 8009484:	4b63      	ldr	r3, [pc, #396]	@ (8009614 <USB_HC_StartXfer+0x280>)
 8009486:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009488:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	7a9b      	ldrb	r3, [r3, #10]
 800948e:	075b      	lsls	r3, r3, #29
 8009490:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009494:	69f9      	ldr	r1, [r7, #28]
 8009496:	0148      	lsls	r0, r1, #5
 8009498:	6a39      	ldr	r1, [r7, #32]
 800949a:	4401      	add	r1, r0
 800949c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	68d9      	ldr	r1, [r3, #12]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ba:	460a      	mov	r2, r1
 80094bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bf0c      	ite	eq
 80094ce:	2301      	moveq	r3, #1
 80094d0:	2300      	movne	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	6a3a      	ldr	r2, [r7, #32]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	7e7b      	ldrb	r3, [r7, #25]
 8009506:	075b      	lsls	r3, r3, #29
 8009508:	69f9      	ldr	r1, [r7, #28]
 800950a:	0148      	lsls	r0, r1, #5
 800950c:	6a39      	ldr	r1, [r7, #32]
 800950e:	4401      	add	r1, r0
 8009510:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009514:	4313      	orrs	r3, r2
 8009516:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	4413      	add	r3, r2
 8009520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800952e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	78db      	ldrb	r3, [r3, #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	e003      	b.n	800954a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009548:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009550:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	4413      	add	r3, r2
 800955a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800955e:	461a      	mov	r2, r3
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	e04e      	b.n	800960c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	78db      	ldrb	r3, [r3, #3]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d149      	bne.n	800960a <USB_HC_StartXfer+0x276>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d045      	beq.n	800960a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	79db      	ldrb	r3, [r3, #7]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d830      	bhi.n	80095e8 <USB_HC_StartXfer+0x254>
 8009586:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <USB_HC_StartXfer+0x1f8>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	0800959d 	.word	0x0800959d
 8009590:	080095c1 	.word	0x080095c1
 8009594:	0800959d 	.word	0x0800959d
 8009598:	080095c1 	.word	0x080095c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	3303      	adds	r3, #3
 80095a2:	089b      	lsrs	r3, r3, #2
 80095a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095a6:	8afa      	ldrh	r2, [r7, #22]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d91c      	bls.n	80095ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f043 0220 	orr.w	r2, r3, #32
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80095be:	e015      	b.n	80095ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	3303      	adds	r3, #3
 80095c6:	089b      	lsrs	r3, r3, #2
 80095c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095ca:	8afa      	ldrh	r2, [r7, #22]
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d90a      	bls.n	80095f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80095e6:	e003      	b.n	80095f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80095e8:	bf00      	nop
 80095ea:	e002      	b.n	80095f2 <USB_HC_StartXfer+0x25e>
        break;
 80095ec:	bf00      	nop
 80095ee:	e000      	b.n	80095f2 <USB_HC_StartXfer+0x25e>
        break;
 80095f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	68d9      	ldr	r1, [r3, #12]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	785a      	ldrb	r2, [r3, #1]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2000      	movs	r0, #0
 8009602:	9000      	str	r0, [sp, #0]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff fb31 	bl	8008c6c <USB_WritePacket>
  }

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3728      	adds	r7, #40	@ 0x28
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	1ff80000 	.word	0x1ff80000

08009618 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	b29b      	uxth	r3, r3
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800963a:	b480      	push	{r7}
 800963c:	b089      	sub	sp, #36	@ 0x24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	4413      	add	r3, r2
 800965a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	0c9b      	lsrs	r3, r3, #18
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	4413      	add	r3, r2
 8009670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	0fdb      	lsrs	r3, r3, #31
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b20      	cmp	r3, #32
 8009688:	d104      	bne.n	8009694 <USB_HC_Halt+0x5a>
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	e0c8      	b.n	8009826 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <USB_HC_Halt+0x66>
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d163      	bne.n	8009768 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f040 80ab 	bne.w	8009824 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d133      	bne.n	8009742 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	69fa      	ldr	r2, [r7, #28]
 800970e:	440a      	add	r2, r1
 8009710:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009714:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009718:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009726:	d81d      	bhi.n	8009764 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800973a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800973e:	d0ec      	beq.n	800971a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009740:	e070      	b.n	8009824 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	0151      	lsls	r1, r2, #5
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	440a      	add	r2, r1
 8009758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800975c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009760:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009762:	e05f      	b.n	8009824 <USB_HC_Halt+0x1ea>
            break;
 8009764:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009766:	e05d      	b.n	8009824 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	440a      	add	r2, r1
 800977e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009782:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009786:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d133      	bne.n	8009800 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097e4:	d81d      	bhi.n	8009822 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097fc:	d0ec      	beq.n	80097d8 <USB_HC_Halt+0x19e>
 80097fe:	e011      	b.n	8009824 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	0151      	lsls	r1, r2, #5
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	440a      	add	r2, r1
 8009816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800981a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	e000      	b.n	8009824 <USB_HC_Halt+0x1ea>
          break;
 8009822:	bf00      	nop
    }
  }

  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3724      	adds	r7, #36	@ 0x24
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
	...

08009834 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009848:	2301      	movs	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	04da      	lsls	r2, r3, #19
 8009850:	4b15      	ldr	r3, [pc, #84]	@ (80098a8 <USB_DoPing+0x74>)
 8009852:	4013      	ands	r3, r2
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	0151      	lsls	r1, r2, #5
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	440a      	add	r2, r1
 800985c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009864:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	4413      	add	r3, r2
 800986e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800987c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009884:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4413      	add	r3, r2
 800988e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009892:	461a      	mov	r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	1ff80000 	.word	0x1ff80000

080098ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff f911 	bl	8008ae8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098c6:	2110      	movs	r1, #16
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff f96b 	bl	8008ba4 <USB_FlushTxFifo>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff f997 	bl	8008c0c <USB_FlushRxFifo>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	e01f      	b.n	800992e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800990c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009914:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	4413      	add	r3, r2
 800991e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009922:	461a      	mov	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	3301      	adds	r3, #1
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d9dc      	bls.n	80098ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009934:	2300      	movs	r3, #0
 8009936:	61bb      	str	r3, [r7, #24]
 8009938:	e034      	b.n	80099a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	4413      	add	r3, r2
 8009942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009950:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009958:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009960:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800996e:	461a      	mov	r2, r3
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009980:	d80c      	bhi.n	800999c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	4413      	add	r3, r2
 800998a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009998:	d0ec      	beq.n	8009974 <USB_StopHost+0xc8>
 800999a:	e000      	b.n	800999e <USB_StopHost+0xf2>
        break;
 800999c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	3301      	adds	r3, #1
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d9c7      	bls.n	800993a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099b0:	461a      	mov	r2, r3
 80099b2:	f04f 33ff 	mov.w	r3, #4294967295
 80099b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f04f 32ff 	mov.w	r2, #4294967295
 80099be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff f880 	bl	8008ac6 <USB_EnableGlobalInt>

  return ret;
 80099c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3720      	adds	r7, #32
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b089      	sub	sp, #36	@ 0x24
 80099d4:	af04      	add	r7, sp, #16
 80099d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80099d8:	2301      	movs	r3, #1
 80099da:	2202      	movs	r2, #2
 80099dc:	2102      	movs	r1, #2
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fcb2 	bl	800a348 <USBH_FindInterface>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2bff      	cmp	r3, #255	@ 0xff
 80099ec:	d002      	beq.n	80099f4 <USBH_CDC_InterfaceInit+0x24>
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d901      	bls.n	80099f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099f4:	2302      	movs	r3, #2
 80099f6:	e13d      	b.n	8009c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fc87 	bl	800a310 <USBH_SelectInterface>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e131      	b.n	8009c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009a16:	2050      	movs	r0, #80	@ 0x50
 8009a18:	f006 ffe4 	bl	80109e4 <malloc>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a30:	2302      	movs	r3, #2
 8009a32:	e11f      	b.n	8009c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a34:	2250      	movs	r2, #80	@ 0x50
 8009a36:	2100      	movs	r1, #0
 8009a38:	68b8      	ldr	r0, [r7, #8]
 8009a3a:	f008 fcdb 	bl	80123f4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	211a      	movs	r1, #26
 8009a44:	fb01 f303 	mul.w	r3, r1, r3
 8009a48:	4413      	add	r3, r2
 8009a4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da15      	bge.n	8009a82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	211a      	movs	r1, #26
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	211a      	movs	r1, #26
 8009a72:	fb01 f303 	mul.w	r3, r1, r3
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a7c:	881a      	ldrh	r2, [r3, #0]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f002 f976 	bl	800bd7a <USBH_AllocPipe>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	461a      	mov	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	7819      	ldrb	r1, [r3, #0]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	7858      	ldrb	r0, [r3, #1]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	8952      	ldrh	r2, [r2, #10]
 8009aae:	9202      	str	r2, [sp, #8]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f002 f92e 	bl	800bd1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f006 ff03 	bl	80108d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	210a      	movs	r1, #10
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fc37 	bl	800a348 <USBH_FindInterface>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	2bff      	cmp	r3, #255	@ 0xff
 8009ae2:	d002      	beq.n	8009aea <USBH_CDC_InterfaceInit+0x11a>
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d901      	bls.n	8009aee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009aea:	2302      	movs	r3, #2
 8009aec:	e0c2      	b.n	8009c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	211a      	movs	r1, #26
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da16      	bge.n	8009b34 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	211a      	movs	r1, #26
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	211a      	movs	r1, #26
 8009b22:	fb01 f303 	mul.w	r3, r1, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b2c:	881a      	ldrh	r2, [r3, #0]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	835a      	strh	r2, [r3, #26]
 8009b32:	e015      	b.n	8009b60 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	211a      	movs	r1, #26
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	211a      	movs	r1, #26
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b5a:	881a      	ldrh	r2, [r3, #0]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	211a      	movs	r1, #26
 8009b66:	fb01 f303 	mul.w	r3, r1, r3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	b25b      	sxtb	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da16      	bge.n	8009ba6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	211a      	movs	r1, #26
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	211a      	movs	r1, #26
 8009b94:	fb01 f303 	mul.w	r3, r1, r3
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b9e:	881a      	ldrh	r2, [r3, #0]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	835a      	strh	r2, [r3, #26]
 8009ba4:	e015      	b.n	8009bd2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	211a      	movs	r1, #26
 8009bac:	fb01 f303 	mul.w	r3, r1, r3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	211a      	movs	r1, #26
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bcc:	881a      	ldrh	r2, [r3, #0]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	7b9b      	ldrb	r3, [r3, #14]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f002 f8ce 	bl	800bd7a <USBH_AllocPipe>
 8009bde:	4603      	mov	r3, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	7bdb      	ldrb	r3, [r3, #15]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f002 f8c4 	bl	800bd7a <USBH_AllocPipe>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	7b59      	ldrb	r1, [r3, #13]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	7b98      	ldrb	r0, [r3, #14]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	8b12      	ldrh	r2, [r2, #24]
 8009c12:	9202      	str	r2, [sp, #8]
 8009c14:	2202      	movs	r2, #2
 8009c16:	9201      	str	r2, [sp, #4]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	4623      	mov	r3, r4
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 f87c 	bl	800bd1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	7b19      	ldrb	r1, [r3, #12]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	7bd8      	ldrb	r0, [r3, #15]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	8b52      	ldrh	r2, [r2, #26]
 8009c3c:	9202      	str	r2, [sp, #8]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	9201      	str	r2, [sp, #4]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	4623      	mov	r3, r4
 8009c46:	4602      	mov	r2, r0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f002 f867 	bl	800bd1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	7b5b      	ldrb	r3, [r3, #13]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f006 fe38 	bl	80108d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7b1b      	ldrb	r3, [r3, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f006 fe31 	bl	80108d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}

08009c7c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 f85c 	bl	800bd5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 f887 	bl	800bdbc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	7b1b      	ldrb	r3, [r3, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	7b1b      	ldrb	r3, [r3, #12]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f849 	bl	800bd5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	7b1b      	ldrb	r3, [r3, #12]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f002 f874 	bl	800bdbc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	7b5b      	ldrb	r3, [r3, #13]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00e      	beq.n	8009d00 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	7b5b      	ldrb	r3, [r3, #13]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 f836 	bl	800bd5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	7b5b      	ldrb	r3, [r3, #13]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f002 f861 	bl	800bdbc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f006 fe6d 	bl	80109f4 <free>
    phost->pActiveClass->pData = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d20:	2200      	movs	r2, #0
 8009d22:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3340      	adds	r3, #64	@ 0x40
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8b1 	bl	8009eae <GetLineCoding>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d5c:	2102      	movs	r1, #2
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d62:	7afb      	ldrb	r3, [r7, #11]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d877      	bhi.n	8009e80 <USBH_CDC_Process+0x114>
 8009d90:	a201      	add	r2, pc, #4	@ (adr r2, 8009d98 <USBH_CDC_Process+0x2c>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009dad 	.word	0x08009dad
 8009d9c:	08009db3 	.word	0x08009db3
 8009da0:	08009de3 	.word	0x08009de3
 8009da4:	08009e57 	.word	0x08009e57
 8009da8:	08009e65 	.word	0x08009e65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
      break;
 8009db0:	e06d      	b.n	8009e8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f897 	bl	8009eec <SetLineCoding>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009dd0:	e058      	b.n	8009e84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d055      	beq.n	8009e84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2204      	movs	r2, #4
 8009ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009de0:	e050      	b.n	8009e84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	3340      	adds	r3, #64	@ 0x40
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f860 	bl	8009eae <GetLineCoding>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d126      	bne.n	8009e46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d13b      	bne.n	8009e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d133      	bne.n	8009e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d12b      	bne.n	8009e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d124      	bne.n	8009e88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f982 	bl	800a148 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e44:	e020      	b.n	8009e88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d01d      	beq.n	8009e88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009e54:	e018      	b.n	8009e88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f867 	bl	8009f2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8f6 	bl	800a04e <CDC_ProcessReception>
      break;
 8009e62:	e014      	b.n	8009e8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 f951 	bl	800b10e <USBH_ClrFeature>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009e7e:	e005      	b.n	8009e8c <USBH_CDC_Process+0x120>

    default:
      break;
 8009e80:	bf00      	nop
 8009e82:	e004      	b.n	8009e8e <USBH_CDC_Process+0x122>
      break;
 8009e84:	bf00      	nop
 8009e86:	e002      	b.n	8009e8e <USBH_CDC_Process+0x122>
      break;
 8009e88:	bf00      	nop
 8009e8a:	e000      	b.n	8009e8e <USBH_CDC_Process+0x122>
      break;
 8009e8c:	bf00      	nop

  }

  return status;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	22a1      	movs	r2, #161	@ 0xa1
 8009ebc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2221      	movs	r2, #33	@ 0x21
 8009ec2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2207      	movs	r2, #7
 8009ed4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2207      	movs	r2, #7
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 fbdc 	bl	800b69a <USBH_CtlReq>
 8009ee2:	4603      	mov	r3, r0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2221      	movs	r2, #33	@ 0x21
 8009efa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2207      	movs	r2, #7
 8009f12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2207      	movs	r2, #7
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fbbd 	bl	800b69a <USBH_CtlReq>
 8009f20:	4603      	mov	r3, r0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af02      	add	r7, sp, #8
 8009f30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d002      	beq.n	8009f50 <CDC_ProcessTransmission+0x26>
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d023      	beq.n	8009f96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009f4e:	e07a      	b.n	800a046 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	8b12      	ldrh	r2, [r2, #24]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d90b      	bls.n	8009f74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	69d9      	ldr	r1, [r3, #28]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8b1a      	ldrh	r2, [r3, #24]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	7b5b      	ldrb	r3, [r3, #13]
 8009f68:	2001      	movs	r0, #1
 8009f6a:	9000      	str	r0, [sp, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fe92 	bl	800bc96 <USBH_BulkSendData>
 8009f72:	e00b      	b.n	8009f8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	7b5b      	ldrb	r3, [r3, #13]
 8009f82:	2001      	movs	r0, #1
 8009f84:	9000      	str	r0, [sp, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fe85 	bl	800bc96 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009f94:	e057      	b.n	800a046 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7b5b      	ldrb	r3, [r3, #13]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f006 fc6f 	bl	8010880 <USBH_LL_GetURBState>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d136      	bne.n	800a01a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	8b12      	ldrh	r2, [r2, #24]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d90e      	bls.n	8009fd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	8b12      	ldrh	r2, [r2, #24]
 8009fc0:	1a9a      	subs	r2, r3, r2
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	8b12      	ldrh	r2, [r2, #24]
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	61da      	str	r2, [r3, #28]
 8009fd4:	e002      	b.n	8009fdc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009fec:	e006      	b.n	8009ffc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f892 	bl	800a120 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2204      	movs	r2, #4
 800a000:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a010:	2300      	movs	r3, #0
 800a012:	2200      	movs	r2, #0
 800a014:	f002 f900 	bl	800c218 <osMessageQueuePut>
      break;
 800a018:	e014      	b.n	800a044 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d111      	bne.n	800a044 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a03c:	2300      	movs	r3, #0
 800a03e:	2200      	movs	r2, #0
 800a040:	f002 f8ea 	bl	800c218 <osMessageQueuePut>
      break;
 800a044:	bf00      	nop
  }
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b086      	sub	sp, #24
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a060:	2300      	movs	r3, #0
 800a062:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d002      	beq.n	800a074 <CDC_ProcessReception+0x26>
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d00e      	beq.n	800a090 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a072:	e051      	b.n	800a118 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	6a19      	ldr	r1, [r3, #32]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	8b5a      	ldrh	r2, [r3, #26]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	7b1b      	ldrb	r3, [r3, #12]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fe2d 	bl	800bce0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2204      	movs	r2, #4
 800a08a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a08e:	e043      	b.n	800a118 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	7b1b      	ldrb	r3, [r3, #12]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f006 fbf2 	bl	8010880 <USBH_LL_GetURBState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a0a0:	7cfb      	ldrb	r3, [r7, #19]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d137      	bne.n	800a116 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	7b1b      	ldrb	r3, [r3, #12]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f006 fb55 	bl	801075c <USBH_LL_GetLastXferSize>
 800a0b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d016      	beq.n	800a0ec <CDC_ProcessReception+0x9e>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	8b5b      	ldrh	r3, [r3, #26]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d910      	bls.n	800a0ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad2      	subs	r2, r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	441a      	add	r2, r3
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a0ea:	e006      	b.n	800a0fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f81d 	bl	800a134 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a10e:	2300      	movs	r3, #0
 800a110:	2200      	movs	r2, #0
 800a112:	f002 f881 	bl	800c218 <osMessageQueuePut>
      break;
 800a116:	bf00      	nop
  }
}
 800a118:	bf00      	nop
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a170:	2302      	movs	r3, #2
 800a172:	e044      	b.n	800a1fe <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	79fa      	ldrb	r2, [r7, #7]
 800a178:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f841 	bl	800a214 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2104      	movs	r1, #4
 800a1c4:	2010      	movs	r0, #16
 800a1c6:	f001 ffb4 	bl	800c132 <osMessageQueueNew>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a208 <USBH_Init+0xac>)
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a20c <USBH_Init+0xb0>)
 800a1d6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a208 <USBH_Init+0xac>)
 800a1da:	2280      	movs	r2, #128	@ 0x80
 800a1dc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a1de:	4b0a      	ldr	r3, [pc, #40]	@ (800a208 <USBH_Init+0xac>)
 800a1e0:	2218      	movs	r2, #24
 800a1e2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a1e4:	4a08      	ldr	r2, [pc, #32]	@ (800a208 <USBH_Init+0xac>)
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	4809      	ldr	r0, [pc, #36]	@ (800a210 <USBH_Init+0xb4>)
 800a1ea:	f001 fef5 	bl	800bfd8 <osThreadNew>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f006 f9fc 	bl	80105f4 <USBH_LL_Init>

  return USBH_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000858 	.word	0x20000858
 800a20c:	08015820 	.word	0x08015820
 800a210:	0800ae85 	.word	0x0800ae85

0800a214 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e009      	b.n	800a23a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	33e0      	adds	r3, #224	@ 0xe0
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	2200      	movs	r2, #0
 800a232:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b0f      	cmp	r3, #15
 800a23e:	d9f2      	bls.n	800a226 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e009      	b.n	800a25a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a260:	d3f1      	bcc.n	800a246 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2240      	movs	r2, #64	@ 0x40
 800a286:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d016      	beq.n	800a2fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10e      	bne.n	800a2f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2e0:	1c59      	adds	r1, r3, #1
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	33de      	adds	r3, #222	@ 0xde
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73fb      	strb	r3, [r7, #15]
 800a2f6:	e004      	b.n	800a302 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e001      	b.n	800a302 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d204      	bcs.n	800a336 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a334:	e001      	b.n	800a33a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a336:	2302      	movs	r3, #2
 800a338:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4603      	mov	r3, r0
 800a358:	70fb      	strb	r3, [r7, #3]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70bb      	strb	r3, [r7, #2]
 800a35e:	4613      	mov	r3, r2
 800a360:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a370:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a372:	e025      	b.n	800a3c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	221a      	movs	r2, #26
 800a378:	fb02 f303 	mul.w	r3, r2, r3
 800a37c:	3308      	adds	r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	3302      	adds	r3, #2
 800a384:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	795b      	ldrb	r3, [r3, #5]
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d002      	beq.n	800a396 <USBH_FindInterface+0x4e>
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	2bff      	cmp	r3, #255	@ 0xff
 800a394:	d111      	bne.n	800a3ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a39a:	78ba      	ldrb	r2, [r7, #2]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d002      	beq.n	800a3a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3a0:	78bb      	ldrb	r3, [r7, #2]
 800a3a2:	2bff      	cmp	r3, #255	@ 0xff
 800a3a4:	d109      	bne.n	800a3ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3aa:	787a      	ldrb	r2, [r7, #1]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d002      	beq.n	800a3b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3b0:	787b      	ldrb	r3, [r7, #1]
 800a3b2:	2bff      	cmp	r3, #255	@ 0xff
 800a3b4:	d101      	bne.n	800a3ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	e006      	b.n	800a3c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d9d6      	bls.n	800a374 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a3c6:	23ff      	movs	r3, #255	@ 0xff
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f006 f945 	bl	801066c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f006 fa5e 	bl	80108a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d102      	bne.n	800a416 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2203      	movs	r2, #3
 800a414:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b0b      	cmp	r3, #11
 800a41e:	f200 8244 	bhi.w	800a8aa <USBH_Process+0x4b6>
 800a422:	a201      	add	r2, pc, #4	@ (adr r2, 800a428 <USBH_Process+0x34>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a459 	.word	0x0800a459
 800a42c:	0800a4a7 	.word	0x0800a4a7
 800a430:	0800a52b 	.word	0x0800a52b
 800a434:	0800a829 	.word	0x0800a829
 800a438:	0800a8ab 	.word	0x0800a8ab
 800a43c:	0800a5e7 	.word	0x0800a5e7
 800a440:	0800a7b3 	.word	0x0800a7b3
 800a444:	0800a639 	.word	0x0800a639
 800a448:	0800a675 	.word	0x0800a675
 800a44c:	0800a6ad 	.word	0x0800a6ad
 800a450:	0800a70b 	.word	0x0800a70b
 800a454:	0800a811 	.word	0x0800a811
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 8224 	beq.w	800a8ae <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a46c:	20c8      	movs	r0, #200	@ 0xc8
 800a46e:	f006 fa61 	bl	8010934 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f006 f957 	bl	8010726 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a49c:	2300      	movs	r3, #0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f001 feba 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a4a4:	e203      	b.n	800a8ae <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d107      	bne.n	800a4c0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e025      	b.n	800a50c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a4c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4ca:	d914      	bls.n	800a4f6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d903      	bls.n	800a4ee <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	220d      	movs	r2, #13
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	e00e      	b.n	800a50c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e00a      	b.n	800a50c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a4fc:	f103 020a 	add.w	r2, r3, #10
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a506:	200a      	movs	r0, #10
 800a508:	f006 fa14 	bl	8010934 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	f001 fe78 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a528:	e1c8      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a53a:	2104      	movs	r1, #4
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a540:	2064      	movs	r0, #100	@ 0x64
 800a542:	f006 f9f7 	bl	8010934 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f006 f8c6 	bl	80106d8 <USBH_LL_GetSpeed>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2205      	movs	r2, #5
 800a55a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a55c:	2100      	movs	r1, #0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fc0b 	bl	800bd7a <USBH_AllocPipe>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a56c:	2180      	movs	r1, #128	@ 0x80
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fc03 	bl	800bd7a <USBH_AllocPipe>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7919      	ldrb	r1, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a590:	9202      	str	r2, [sp, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4603      	mov	r3, r0
 800a59a:	2280      	movs	r2, #128	@ 0x80
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 fbbd 	bl	800bd1c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7959      	ldrb	r1, [r3, #5]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5b6:	9202      	str	r2, [sp, #8]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	9201      	str	r2, [sp, #4]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 fbaa 	bl	800bd1c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f001 fe1a 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a5e4:	e16a      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f96e 	bl	800a8c8 <USBH_HandleEnum>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 815c 	bne.w	800a8b2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d103      	bne.n	800a614 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2208      	movs	r2, #8
 800a610:	701a      	strb	r2, [r3, #0]
 800a612:	e002      	b.n	800a61a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2207      	movs	r2, #7
 800a618:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2205      	movs	r2, #5
 800a61e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a62e:	2300      	movs	r3, #0
 800a630:	2200      	movs	r2, #0
 800a632:	f001 fdf1 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a636:	e13c      	b.n	800a8b2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 8139 	beq.w	800a8b6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a64a:	2101      	movs	r1, #1
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2208      	movs	r2, #8
 800a654:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2205      	movs	r2, #5
 800a65a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a66a:	2300      	movs	r3, #0
 800a66c:	2200      	movs	r2, #0
 800a66e:	f001 fdd3 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a672:	e120      	b.n	800a8b6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fcff 	bl	800b080 <USBH_SetCfg>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d102      	bne.n	800a68e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2209      	movs	r2, #9
 800a68c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f001 fdb7 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a6aa:	e107      	b.n	800a8bc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d015      	beq.n	800a6e6 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fd02 	bl	800b0c6 <USBH_SetFeature>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d103      	bne.n	800a6d6 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	701a      	strb	r2, [r3, #0]
 800a6d4:	e00a      	b.n	800a6ec <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d106      	bne.n	800a6ec <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	220a      	movs	r2, #10
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	e002      	b.n	800a6ec <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a700:	2300      	movs	r3, #0
 800a702:	2200      	movs	r2, #0
 800a704:	f001 fd88 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a708:	e0d8      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a710:	2b00      	cmp	r3, #0
 800a712:	d03f      	beq.n	800a794 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]
 800a720:	e016      	b.n	800a750 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a722:	7bfa      	ldrb	r2, [r7, #15]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	32de      	adds	r2, #222	@ 0xde
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	791a      	ldrb	r2, [r3, #4]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a734:	429a      	cmp	r2, r3
 800a736:	d108      	bne.n	800a74a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a738:	7bfa      	ldrb	r2, [r7, #15]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	32de      	adds	r2, #222	@ 0xde
 800a73e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a748:	e005      	b.n	800a756 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	3301      	adds	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0e5      	beq.n	800a722 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d016      	beq.n	800a78e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d109      	bne.n	800a786 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2206      	movs	r2, #6
 800a776:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a77e:	2103      	movs	r1, #3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	4798      	blx	r3
 800a784:	e006      	b.n	800a794 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	220d      	movs	r2, #13
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e002      	b.n	800a794 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	220d      	movs	r2, #13
 800a792:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2205      	movs	r2, #5
 800a798:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f001 fd34 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a7b0:	e084      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d017      	beq.n	800a7ec <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220b      	movs	r2, #11
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	e00a      	b.n	800a7f2 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d106      	bne.n	800a7f2 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	220d      	movs	r2, #13
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	e002      	b.n	800a7f2 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	220d      	movs	r2, #13
 800a7f0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a806:	2300      	movs	r3, #0
 800a808:	2200      	movs	r2, #0
 800a80a:	f001 fd05 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a80e:	e055      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d04f      	beq.n	800a8ba <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
      }
      break;
 800a826:	e048      	b.n	800a8ba <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fcef 	bl	800a214 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a864:	2105      	movs	r1, #5
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b01      	cmp	r3, #1
 800a874:	d107      	bne.n	800a886 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fda8 	bl	800a3d4 <USBH_Start>
 800a884:	e002      	b.n	800a88c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f005 fef0 	bl	801066c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f001 fcb8 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      break;
 800a8a8:	e008      	b.n	800a8bc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e006      	b.n	800a8bc <USBH_Process+0x4c8>
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e004      	b.n	800a8bc <USBH_Process+0x4c8>
      break;
 800a8b2:	bf00      	nop
 800a8b4:	e002      	b.n	800a8bc <USBH_Process+0x4c8>
    break;
 800a8b6:	bf00      	nop
 800a8b8:	e000      	b.n	800a8bc <USBH_Process+0x4c8>
      break;
 800a8ba:	bf00      	nop
  }
  return USBH_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop

0800a8c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af04      	add	r7, sp, #16
 800a8ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	f200 8204 	bhi.w	800acea <USBH_HandleEnum+0x422>
 800a8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e8 <USBH_HandleEnum+0x20>)
 800a8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e8:	0800a909 	.word	0x0800a909
 800a8ec:	0800a9c3 	.word	0x0800a9c3
 800a8f0:	0800aa2d 	.word	0x0800aa2d
 800a8f4:	0800aab7 	.word	0x0800aab7
 800a8f8:	0800ab21 	.word	0x0800ab21
 800a8fc:	0800ab91 	.word	0x0800ab91
 800a900:	0800ac2d 	.word	0x0800ac2d
 800a904:	0800acab 	.word	0x0800acab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a908:	2108      	movs	r1, #8
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fae8 	bl	800aee0 <USBH_Get_DevDesc>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d12e      	bne.n	800a978 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	7919      	ldrb	r1, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a93e:	9202      	str	r2, [sp, #8]
 800a940:	2200      	movs	r2, #0
 800a942:	9201      	str	r2, [sp, #4]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4603      	mov	r3, r0
 800a948:	2280      	movs	r2, #128	@ 0x80
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 f9e6 	bl	800bd1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	7959      	ldrb	r1, [r3, #5]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a964:	9202      	str	r2, [sp, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	9201      	str	r2, [sp, #4]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	4603      	mov	r3, r0
 800a96e:	2200      	movs	r2, #0
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f9d3 	bl	800bd1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a976:	e1ba      	b.n	800acee <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	f040 81b7 	bne.w	800acee <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a996:	2b03      	cmp	r3, #3
 800a998:	d903      	bls.n	800a9a2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	220d      	movs	r2, #13
 800a99e:	701a      	strb	r2, [r3, #0]
      break;
 800a9a0:	e1a5      	b.n	800acee <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	795b      	ldrb	r3, [r3, #5]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 fa07 	bl	800bdbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	791b      	ldrb	r3, [r3, #4]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fa01 	bl	800bdbc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	701a      	strb	r2, [r3, #0]
      break;
 800a9c0:	e195      	b.n	800acee <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a9c2:	2112      	movs	r1, #18
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fa8b 	bl	800aee0 <USBH_Get_DevDesc>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d103      	bne.n	800a9dc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9da:	e18a      	b.n	800acf2 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	f040 8187 	bne.w	800acf2 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d903      	bls.n	800aa06 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	220d      	movs	r2, #13
 800aa02:	701a      	strb	r2, [r3, #0]
      break;
 800aa04:	e175      	b.n	800acf2 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	795b      	ldrb	r3, [r3, #5]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f9d5 	bl	800bdbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	791b      	ldrb	r3, [r3, #4]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f9cf 	bl	800bdbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	701a      	strb	r2, [r3, #0]
      break;
 800aa2a:	e162      	b.n	800acf2 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fb02 	bl	800b038 <USBH_SetAddress>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d130      	bne.n	800aaa0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800aa3e:	2002      	movs	r0, #2
 800aa40:	f005 ff78 	bl	8010934 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7919      	ldrb	r1, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa66:	9202      	str	r2, [sp, #8]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	9201      	str	r2, [sp, #4]
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2280      	movs	r2, #128	@ 0x80
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 f952 	bl	800bd1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7959      	ldrb	r1, [r3, #5]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa8c:	9202      	str	r2, [sp, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	9201      	str	r2, [sp, #4]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	4603      	mov	r3, r0
 800aa96:	2200      	movs	r2, #0
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f93f 	bl	800bd1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa9e:	e12a      	b.n	800acf6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	f040 8127 	bne.w	800acf6 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	220d      	movs	r2, #13
 800aaac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	705a      	strb	r2, [r3, #1]
      break;
 800aab4:	e11f      	b.n	800acf6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aab6:	2109      	movs	r1, #9
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa39 	bl	800af30 <USBH_Get_CfgDesc>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2204      	movs	r2, #4
 800aacc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aace:	e114      	b.n	800acfa <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	f040 8111 	bne.w	800acfa <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aade:	3301      	adds	r3, #1
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d903      	bls.n	800aafa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	220d      	movs	r2, #13
 800aaf6:	701a      	strb	r2, [r3, #0]
      break;
 800aaf8:	e0ff      	b.n	800acfa <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 f95b 	bl	800bdbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	791b      	ldrb	r3, [r3, #4]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f955 	bl	800bdbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	701a      	strb	r2, [r3, #0]
      break;
 800ab1e:	e0ec      	b.n	800acfa <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fa01 	bl	800af30 <USBH_Get_CfgDesc>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2205      	movs	r2, #5
 800ab3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab3e:	e0de      	b.n	800acfe <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	f040 80db 	bne.w	800acfe <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab4e:	3301      	adds	r3, #1
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d903      	bls.n	800ab6a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	220d      	movs	r2, #13
 800ab66:	701a      	strb	r2, [r3, #0]
      break;
 800ab68:	e0c9      	b.n	800acfe <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	795b      	ldrb	r3, [r3, #5]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f923 	bl	800bdbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	791b      	ldrb	r3, [r3, #4]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 f91d 	bl	800bdbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
      break;
 800ab8e:	e0b6      	b.n	800acfe <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d036      	beq.n	800ac08 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aba6:	23ff      	movs	r3, #255	@ 0xff
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f9e5 	bl	800af78 <USBH_Get_StringDesc>
 800abae:	4603      	mov	r3, r0
 800abb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d111      	bne.n	800abdc <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2206      	movs	r2, #6
 800abbc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2205      	movs	r2, #5
 800abc2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abd2:	2300      	movs	r3, #0
 800abd4:	2200      	movs	r2, #0
 800abd6:	f001 fb1f 	bl	800c218 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800abda:	e092      	b.n	800ad02 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b03      	cmp	r3, #3
 800abe0:	f040 808f 	bne.w	800ad02 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2206      	movs	r2, #6
 800abe8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2205      	movs	r2, #5
 800abee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abfe:	2300      	movs	r3, #0
 800ac00:	2200      	movs	r2, #0
 800ac02:	f001 fb09 	bl	800c218 <osMessageQueuePut>
      break;
 800ac06:	e07c      	b.n	800ad02 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2206      	movs	r2, #6
 800ac0c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2205      	movs	r2, #5
 800ac12:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ac22:	2300      	movs	r3, #0
 800ac24:	2200      	movs	r2, #0
 800ac26:	f001 faf7 	bl	800c218 <osMessageQueuePut>
      break;
 800ac2a:	e06a      	b.n	800ad02 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d027      	beq.n	800ac86 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac42:	23ff      	movs	r3, #255	@ 0xff
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f997 	bl	800af78 <USBH_Get_StringDesc>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d103      	bne.n	800ac5c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2207      	movs	r2, #7
 800ac58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac5a:	e054      	b.n	800ad06 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d151      	bne.n	800ad06 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2207      	movs	r2, #7
 800ac66:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2205      	movs	r2, #5
 800ac6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f001 faca 	bl	800c218 <osMessageQueuePut>
      break;
 800ac84:	e03f      	b.n	800ad06 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2207      	movs	r2, #7
 800ac8a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2205      	movs	r2, #5
 800ac90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aca0:	2300      	movs	r3, #0
 800aca2:	2200      	movs	r2, #0
 800aca4:	f001 fab8 	bl	800c218 <osMessageQueuePut>
      break;
 800aca8:	e02d      	b.n	800ad06 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d017      	beq.n	800ace4 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acc0:	23ff      	movs	r3, #255	@ 0xff
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f958 	bl	800af78 <USBH_Get_StringDesc>
 800acc8:	4603      	mov	r3, r0
 800acca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800acd6:	e018      	b.n	800ad0a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d115      	bne.n	800ad0a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]
      break;
 800ace2:	e012      	b.n	800ad0a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
      break;
 800ace8:	e00f      	b.n	800ad0a <USBH_HandleEnum+0x442>

    default:
      break;
 800acea:	bf00      	nop
 800acec:	e00e      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800acee:	bf00      	nop
 800acf0:	e00c      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800acf2:	bf00      	nop
 800acf4:	e00a      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800acf6:	bf00      	nop
 800acf8:	e008      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800acfa:	bf00      	nop
 800acfc:	e006      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800acfe:	bf00      	nop
 800ad00:	e004      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800ad02:	bf00      	nop
 800ad04:	e002      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800ad06:	bf00      	nop
 800ad08:	e000      	b.n	800ad0c <USBH_HandleEnum+0x444>
      break;
 800ad0a:	bf00      	nop
  }
  return Status;
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop

0800ad18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f804 	bl	800ad5a <USBH_HandleSof>
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b0b      	cmp	r3, #11
 800ad6a:	d10a      	bne.n	800ad82 <USBH_HandleSof+0x28>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	4798      	blx	r3
  }
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800adae:	2300      	movs	r3, #0
 800adb0:	2200      	movs	r2, #0
 800adb2:	f001 fa31 	bl	800c218 <osMessageQueuePut>
#endif
#endif

  return;
 800adb6:	bf00      	nop
}
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800adce:	bf00      	nop
}
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2200      	movs	r2, #0
 800ae12:	f001 fa01 	bl	800c218 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f005 fc2e 	bl	80106a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	791b      	ldrb	r3, [r3, #4]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 ffb5 	bl	800bdbc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 ffaf 	bl	800bdbc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ae72:	2300      	movs	r3, #0
 800ae74:	2200      	movs	r2, #0
 800ae76:	f001 f9cf 	bl	800c218 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ae98:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f001 fa1b 	bl	800c2d8 <osMessageQueueGet>
 800aea2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff faa2 	bl	800a3f4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800aeb0:	e7ec      	b.n	800ae8c <USBH_Process_OS+0x8>

0800aeb2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aece:	2300      	movs	r3, #0
 800aed0:	2200      	movs	r2, #0
 800aed2:	f001 f9a1 	bl	800c218 <osMessageQueuePut>
#endif

  return USBH_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800aef2:	78fb      	ldrb	r3, [r7, #3]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aefe:	2100      	movs	r1, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f864 	bl	800afce <USBH_GetDescriptor>
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af1c:	78fa      	ldrb	r2, [r7, #3]
 800af1e:	b292      	uxth	r2, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f000 f919 	bl	800b158 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af26:	7bfb      	ldrb	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af02      	add	r7, sp, #8
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	331c      	adds	r3, #28
 800af40:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800af42:	887b      	ldrh	r3, [r7, #2]
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f83d 	bl	800afce <USBH_GetDescriptor>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d107      	bne.n	800af6e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800af5e:	887b      	ldrh	r3, [r7, #2]
 800af60:	461a      	mov	r2, r3
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f985 	bl	800b274 <USBH_ParseCfgDesc>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	607a      	str	r2, [r7, #4]
 800af82:	461a      	mov	r2, r3
 800af84:	460b      	mov	r3, r1
 800af86:	72fb      	strb	r3, [r7, #11]
 800af88:	4613      	mov	r3, r2
 800af8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800af8c:	7afb      	ldrb	r3, [r7, #11]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800af94:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800af9c:	893b      	ldrh	r3, [r7, #8]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	460b      	mov	r3, r1
 800afa2:	2100      	movs	r1, #0
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f812 	bl	800afce <USBH_GetDescriptor>
 800afaa:	4603      	mov	r3, r0
 800afac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d107      	bne.n	800afc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800afba:	893a      	ldrh	r2, [r7, #8]
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fb1e 	bl	800b600 <USBH_ParseStringDesc>
  }

  return status;
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	607b      	str	r3, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	72fb      	strb	r3, [r7, #11]
 800afdc:	4613      	mov	r3, r2
 800afde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	789b      	ldrb	r3, [r3, #2]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d11c      	bne.n	800b022 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2206      	movs	r2, #6
 800aff8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	893a      	ldrh	r2, [r7, #8]
 800affe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b000:	893b      	ldrh	r3, [r7, #8]
 800b002:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b00a:	d104      	bne.n	800b016 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f240 4209 	movw	r2, #1033	@ 0x409
 800b012:	829a      	strh	r2, [r3, #20]
 800b014:	e002      	b.n	800b01c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8b3a      	ldrh	r2, [r7, #24]
 800b020:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b022:	8b3b      	ldrh	r3, [r7, #24]
 800b024:	461a      	mov	r2, r3
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fb36 	bl	800b69a <USBH_CtlReq>
 800b02e:	4603      	mov	r3, r0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	789b      	ldrb	r3, [r3, #2]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d10f      	bne.n	800b06c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2205      	movs	r2, #5
 800b056:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b06c:	2200      	movs	r2, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fb12 	bl	800b69a <USBH_CtlReq>
 800b076:	4603      	mov	r3, r0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	789b      	ldrb	r3, [r3, #2]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d10e      	bne.n	800b0b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2209      	movs	r2, #9
 800b09e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	887a      	ldrh	r2, [r7, #2]
 800b0a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 faef 	bl	800b69a <USBH_CtlReq>
 800b0bc:	4603      	mov	r3, r0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	789b      	ldrb	r3, [r3, #2]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d10f      	bne.n	800b0fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 facb 	bl	800b69a <USBH_CtlReq>
 800b104:	4603      	mov	r3, r0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	789b      	ldrb	r3, [r3, #2]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d10f      	bne.n	800b142 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	b29a      	uxth	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b142:	2200      	movs	r2, #0
 800b144:	2100      	movs	r1, #0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 faa7 	bl	800b69a <USBH_CtlReq>
 800b14c:	4603      	mov	r3, r0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	785a      	ldrb	r2, [r3, #1]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3302      	adds	r3, #2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	3303      	adds	r3, #3
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	b29b      	uxth	r3, r3
 800b188:	4313      	orrs	r3, r2
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	791a      	ldrb	r2, [r3, #4]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	795a      	ldrb	r2, [r3, #5]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	799a      	ldrb	r2, [r3, #6]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	79da      	ldrb	r2, [r3, #7]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	79db      	ldrb	r3, [r3, #7]
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	dc0f      	bgt.n	800b1d8 <USBH_ParseDevDesc+0x80>
 800b1b8:	2b08      	cmp	r3, #8
 800b1ba:	db14      	blt.n	800b1e6 <USBH_ParseDevDesc+0x8e>
 800b1bc:	3b08      	subs	r3, #8
 800b1be:	4a2c      	ldr	r2, [pc, #176]	@ (800b270 <USBH_ParseDevDesc+0x118>)
 800b1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bf14      	ite	ne
 800b1cc:	2301      	movne	r3, #1
 800b1ce:	2300      	moveq	r3, #0
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <USBH_ParseDevDesc+0x84>
 800b1d6:	e006      	b.n	800b1e6 <USBH_ParseDevDesc+0x8e>
 800b1d8:	2b40      	cmp	r3, #64	@ 0x40
 800b1da:	d104      	bne.n	800b1e6 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	79da      	ldrb	r2, [r3, #7]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	71da      	strb	r2, [r3, #7]
      break;
 800b1e4:	e003      	b.n	800b1ee <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2240      	movs	r2, #64	@ 0x40
 800b1ea:	71da      	strb	r2, [r3, #7]
      break;
 800b1ec:	bf00      	nop
  }

  if (length > 8U)
 800b1ee:	88fb      	ldrh	r3, [r7, #6]
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d936      	bls.n	800b262 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3309      	adds	r3, #9
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	b29b      	uxth	r3, r3
 800b206:	4313      	orrs	r3, r2
 800b208:	b29a      	uxth	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	330a      	adds	r3, #10
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	330b      	adds	r3, #11
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4313      	orrs	r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	330c      	adds	r3, #12
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	330d      	adds	r3, #13
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	7b9a      	ldrb	r2, [r3, #14]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	7bda      	ldrb	r2, [r3, #15]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	7c1a      	ldrb	r2, [r3, #16]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	7c5a      	ldrb	r2, [r3, #17]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	745a      	strb	r2, [r3, #17]
  }
}
 800b262:	bf00      	nop
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	01000101 	.word	0x01000101

0800b274 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	@ 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b288:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	785a      	ldrb	r2, [r3, #1]
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	3303      	adds	r3, #3
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	021b      	lsls	r3, r3, #8
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ce:	bf28      	it	cs
 800b2d0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	791a      	ldrb	r2, [r3, #4]
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	795a      	ldrb	r2, [r3, #5]
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	799a      	ldrb	r2, [r3, #6]
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	79da      	ldrb	r2, [r3, #7]
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	7a1a      	ldrb	r2, [r3, #8]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b09      	cmp	r3, #9
 800b308:	d002      	beq.n	800b310 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	2209      	movs	r2, #9
 800b30e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b310:	88fb      	ldrh	r3, [r7, #6]
 800b312:	2b09      	cmp	r3, #9
 800b314:	f240 809d 	bls.w	800b452 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800b318:	2309      	movs	r3, #9
 800b31a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b320:	e081      	b.n	800b426 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b322:	f107 0316 	add.w	r3, r7, #22
 800b326:	4619      	mov	r1, r3
 800b328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b32a:	f000 f99c 	bl	800b666 <USBH_GetNextDesc>
 800b32e:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b04      	cmp	r3, #4
 800b336:	d176      	bne.n	800b426 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	d002      	beq.n	800b346 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	2209      	movs	r2, #9
 800b344:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b34a:	221a      	movs	r2, #26
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
 800b350:	3308      	adds	r3, #8
 800b352:	6a3a      	ldr	r2, [r7, #32]
 800b354:	4413      	add	r3, r2
 800b356:	3302      	adds	r3, #2
 800b358:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b35a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b35c:	69f8      	ldr	r0, [r7, #28]
 800b35e:	f000 f87e 	bl	800b45e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b36c:	e043      	b.n	800b3f6 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b36e:	f107 0316 	add.w	r3, r7, #22
 800b372:	4619      	mov	r1, r3
 800b374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b376:	f000 f976 	bl	800b666 <USBH_GetNextDesc>
 800b37a:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b05      	cmp	r3, #5
 800b382:	d138      	bne.n	800b3f6 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	795b      	ldrb	r3, [r3, #5]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d10f      	bne.n	800b3ac <USBH_ParseCfgDesc+0x138>
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	799b      	ldrb	r3, [r3, #6]
 800b390:	2b02      	cmp	r3, #2
 800b392:	d10b      	bne.n	800b3ac <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	79db      	ldrb	r3, [r3, #7]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10f      	bne.n	800b3bc <USBH_ParseCfgDesc+0x148>
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	d00b      	beq.n	800b3bc <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a6:	2209      	movs	r2, #9
 800b3a8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b3aa:	e007      	b.n	800b3bc <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	2b07      	cmp	r3, #7
 800b3b2:	d004      	beq.n	800b3be <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	2207      	movs	r2, #7
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	e000      	b.n	800b3be <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b3bc:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b3be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b3c6:	3201      	adds	r2, #1
 800b3c8:	00d2      	lsls	r2, r2, #3
 800b3ca:	211a      	movs	r1, #26
 800b3cc:	fb01 f303 	mul.w	r3, r1, r3
 800b3d0:	4413      	add	r3, r2
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	6a3a      	ldr	r2, [r7, #32]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	3304      	adds	r3, #4
 800b3da:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3de:	69b9      	ldr	r1, [r7, #24]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f86b 	bl	800b4bc <USBH_ParseEPDesc>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b3ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	791b      	ldrb	r3, [r3, #4]
 800b3fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d204      	bcs.n	800b40c <USBH_ParseCfgDesc+0x198>
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	885a      	ldrh	r2, [r3, #2]
 800b406:	8afb      	ldrh	r3, [r7, #22]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d8b0      	bhi.n	800b36e <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	791b      	ldrb	r3, [r3, #4]
 800b410:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b414:	429a      	cmp	r2, r3
 800b416:	d201      	bcs.n	800b41c <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b418:	2303      	movs	r3, #3
 800b41a:	e01c      	b.n	800b456 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b420:	3301      	adds	r3, #1
 800b422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d805      	bhi.n	800b43a <USBH_ParseCfgDesc+0x1c6>
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	885a      	ldrh	r2, [r3, #2]
 800b432:	8afb      	ldrh	r3, [r7, #22]
 800b434:	429a      	cmp	r2, r3
 800b436:	f63f af74 	bhi.w	800b322 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	791b      	ldrb	r3, [r3, #4]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	bf28      	it	cs
 800b442:	2302      	movcs	r3, #2
 800b444:	b2db      	uxtb	r3, r3
 800b446:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d201      	bcs.n	800b452 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b44e:	2303      	movs	r3, #3
 800b450:	e001      	b.n	800b456 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b456:	4618      	mov	r0, r3
 800b458:	3730      	adds	r7, #48	@ 0x30
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	785a      	ldrb	r2, [r3, #1]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	789a      	ldrb	r2, [r3, #2]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	78da      	ldrb	r2, [r3, #3]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	791a      	ldrb	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	795a      	ldrb	r2, [r3, #5]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	799a      	ldrb	r2, [r3, #6]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	79da      	ldrb	r2, [r3, #7]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	7a1a      	ldrb	r2, [r3, #8]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	721a      	strb	r2, [r3, #8]
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	785a      	ldrb	r2, [r3, #1]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	789a      	ldrb	r2, [r3, #2]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	78da      	ldrb	r2, [r3, #3]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3305      	adds	r3, #5
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	021b      	lsls	r3, r3, #8
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b29a      	uxth	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	799a      	ldrb	r2, [r3, #6]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	889b      	ldrh	r3, [r3, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b516:	2303      	movs	r3, #3
 800b518:	75fb      	strb	r3, [r7, #23]
 800b51a:	e031      	b.n	800b580 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	889b      	ldrh	r3, [r3, #4]
 800b520:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b524:	f023 0307 	bic.w	r3, r3, #7
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	889b      	ldrh	r3, [r3, #4]
 800b532:	b21a      	sxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	4619      	mov	r1, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3305      	adds	r3, #5
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	021b      	lsls	r3, r3, #8
 800b544:	b29b      	uxth	r3, r3
 800b546:	430b      	orrs	r3, r1
 800b548:	b29b      	uxth	r3, r3
 800b54a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10f      	bne.n	800b572 <USBH_ParseEPDesc+0xb6>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3304      	adds	r3, #4
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4619      	mov	r1, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3305      	adds	r3, #5
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	b29b      	uxth	r3, r3
 800b564:	430b      	orrs	r3, r1
 800b566:	b29b      	uxth	r3, r3
 800b568:	b21b      	sxth	r3, r3
 800b56a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b56e:	b21b      	sxth	r3, r3
 800b570:	e001      	b.n	800b576 <USBH_ParseEPDesc+0xba>
 800b572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b576:	4313      	orrs	r3, r2
 800b578:	b21b      	sxth	r3, r3
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b586:	2b00      	cmp	r3, #0
 800b588:	d116      	bne.n	800b5b8 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	78db      	ldrb	r3, [r3, #3]
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	2b01      	cmp	r3, #1
 800b594:	d005      	beq.n	800b5a2 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	78db      	ldrb	r3, [r3, #3]
 800b59a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d127      	bne.n	800b5f2 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	799b      	ldrb	r3, [r3, #6]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <USBH_ParseEPDesc+0xf6>
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	799b      	ldrb	r3, [r3, #6]
 800b5ae:	2b10      	cmp	r3, #16
 800b5b0:	d91f      	bls.n	800b5f2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	75fb      	strb	r3, [r7, #23]
 800b5b6:	e01c      	b.n	800b5f2 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	78db      	ldrb	r3, [r3, #3]
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d10a      	bne.n	800b5da <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	799b      	ldrb	r3, [r3, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <USBH_ParseEPDesc+0x118>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	799b      	ldrb	r3, [r3, #6]
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d90e      	bls.n	800b5f2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	75fb      	strb	r3, [r7, #23]
 800b5d8:	e00b      	b.n	800b5f2 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	78db      	ldrb	r3, [r3, #3]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d105      	bne.n	800b5f2 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	799b      	ldrb	r3, [r3, #6]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	371c      	adds	r7, #28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3301      	adds	r3, #1
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d120      	bne.n	800b65a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	1e9a      	subs	r2, r3, #2
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	4293      	cmp	r3, r2
 800b622:	bf28      	it	cs
 800b624:	4613      	movcs	r3, r2
 800b626:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3302      	adds	r3, #2
 800b62c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b62e:	2300      	movs	r3, #0
 800b630:	82fb      	strh	r3, [r7, #22]
 800b632:	e00b      	b.n	800b64c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b634:	8afb      	ldrh	r3, [r7, #22]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4413      	add	r3, r2
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	3301      	adds	r3, #1
 800b644:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b646:	8afb      	ldrh	r3, [r7, #22]
 800b648:	3302      	adds	r3, #2
 800b64a:	82fb      	strh	r3, [r7, #22]
 800b64c:	8afa      	ldrh	r2, [r7, #22]
 800b64e:	8abb      	ldrh	r3, [r7, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3ef      	bcc.n	800b634 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]
  }
}
 800b65a:	bf00      	nop
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	7812      	ldrb	r2, [r2, #0]
 800b678:	4413      	add	r3, r2
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4413      	add	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b68c:	68fb      	ldr	r3, [r7, #12]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b086      	sub	sp, #24
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	789b      	ldrb	r3, [r3, #2]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d002      	beq.n	800b6ba <USBH_CtlReq+0x20>
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d01d      	beq.n	800b6f4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b6b8:	e043      	b.n	800b742 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	88fa      	ldrh	r2, [r7, #6]
 800b6c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2203      	movs	r2, #3
 800b6da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f000 fd93 	bl	800c218 <osMessageQueuePut>
      break;
 800b6f2:	e026      	b.n	800b742 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f000 f829 	bl	800b74c <USBH_HandleControl>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <USBH_CtlReq+0x70>
 800b704:	7dfb      	ldrb	r3, [r7, #23]
 800b706:	2b03      	cmp	r3, #3
 800b708:	d106      	bne.n	800b718 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	761a      	strb	r2, [r3, #24]
 800b716:	e005      	b.n	800b724 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d102      	bne.n	800b724 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2203      	movs	r2, #3
 800b728:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b738:	2300      	movs	r3, #0
 800b73a:	2200      	movs	r2, #0
 800b73c:	f000 fd6c 	bl	800c218 <osMessageQueuePut>
      break;
 800b740:	bf00      	nop
  }
  return status;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af02      	add	r7, sp, #8
 800b752:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b754:	2301      	movs	r3, #1
 800b756:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b758:	2300      	movs	r3, #0
 800b75a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	7e1b      	ldrb	r3, [r3, #24]
 800b760:	3b01      	subs	r3, #1
 800b762:	2b0a      	cmp	r3, #10
 800b764:	f200 8229 	bhi.w	800bbba <USBH_HandleControl+0x46e>
 800b768:	a201      	add	r2, pc, #4	@ (adr r2, 800b770 <USBH_HandleControl+0x24>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b79d 	.word	0x0800b79d
 800b774:	0800b7b7 	.word	0x0800b7b7
 800b778:	0800b859 	.word	0x0800b859
 800b77c:	0800b87f 	.word	0x0800b87f
 800b780:	0800b90b 	.word	0x0800b90b
 800b784:	0800b935 	.word	0x0800b935
 800b788:	0800b9f7 	.word	0x0800b9f7
 800b78c:	0800ba19 	.word	0x0800ba19
 800b790:	0800baab 	.word	0x0800baab
 800b794:	0800bad1 	.word	0x0800bad1
 800b798:	0800bb63 	.word	0x0800bb63
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f103 0110 	add.w	r1, r3, #16
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	795b      	ldrb	r3, [r3, #5]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fa17 	bl	800bbdc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	761a      	strb	r2, [r3, #24]
      break;
 800b7b4:	e20c      	b.n	800bbd0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	795b      	ldrb	r3, [r3, #5]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f005 f85f 	bl	8010880 <USBH_LL_GetURBState>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7c6:	7bbb      	ldrb	r3, [r7, #14]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d12c      	bne.n	800b826 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	7c1b      	ldrb	r3, [r3, #16]
 800b7d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	8adb      	ldrh	r3, [r3, #22]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7de:	7b7b      	ldrb	r3, [r7, #13]
 800b7e0:	2b80      	cmp	r3, #128	@ 0x80
 800b7e2:	d103      	bne.n	800b7ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	761a      	strb	r2, [r3, #24]
 800b7ea:	e00d      	b.n	800b808 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2205      	movs	r2, #5
 800b7f0:	761a      	strb	r2, [r3, #24]
 800b7f2:	e009      	b.n	800b808 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b7f4:	7b7b      	ldrb	r3, [r7, #13]
 800b7f6:	2b80      	cmp	r3, #128	@ 0x80
 800b7f8:	d103      	bne.n	800b802 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2209      	movs	r2, #9
 800b7fe:	761a      	strb	r2, [r3, #24]
 800b800:	e002      	b.n	800b808 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2207      	movs	r2, #7
 800b806:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2203      	movs	r2, #3
 800b80c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b81c:	2300      	movs	r3, #0
 800b81e:	2200      	movs	r2, #0
 800b820:	f000 fcfa 	bl	800c218 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b824:	e1cb      	b.n	800bbbe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b826:	7bbb      	ldrb	r3, [r7, #14]
 800b828:	2b04      	cmp	r3, #4
 800b82a:	d003      	beq.n	800b834 <USBH_HandleControl+0xe8>
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	f040 81c5 	bne.w	800bbbe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	220b      	movs	r2, #11
 800b838:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2203      	movs	r2, #3
 800b83e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b84e:	2300      	movs	r3, #0
 800b850:	2200      	movs	r2, #0
 800b852:	f000 fce1 	bl	800c218 <osMessageQueuePut>
      break;
 800b856:	e1b2      	b.n	800bbbe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b85e:	b29a      	uxth	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6899      	ldr	r1, [r3, #8]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	899a      	ldrh	r2, [r3, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	791b      	ldrb	r3, [r3, #4]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f9f2 	bl	800bc5a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2204      	movs	r2, #4
 800b87a:	761a      	strb	r2, [r3, #24]
      break;
 800b87c:	e1a8      	b.n	800bbd0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	791b      	ldrb	r3, [r3, #4]
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f004 fffb 	bl	8010880 <USBH_LL_GetURBState>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d110      	bne.n	800b8b6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2209      	movs	r2, #9
 800b898:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2203      	movs	r2, #3
 800b89e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f000 fcb1 	bl	800c218 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	d110      	bne.n	800b8de <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2203      	movs	r2, #3
 800b8c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f000 fc9e 	bl	800c218 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8dc:	e171      	b.n	800bbc2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	f040 816e 	bne.w	800bbc2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	220b      	movs	r2, #11
 800b8ea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2203      	movs	r2, #3
 800b8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	f000 fc88 	bl	800c218 <osMessageQueuePut>
      break;
 800b908:	e15b      	b.n	800bbc2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6899      	ldr	r1, [r3, #8]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	899a      	ldrh	r2, [r3, #12]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	795b      	ldrb	r3, [r3, #5]
 800b916:	2001      	movs	r0, #1
 800b918:	9000      	str	r0, [sp, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f978 	bl	800bc10 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2206      	movs	r2, #6
 800b930:	761a      	strb	r2, [r3, #24]
      break;
 800b932:	e14d      	b.n	800bbd0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	795b      	ldrb	r3, [r3, #5]
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f004 ffa0 	bl	8010880 <USBH_LL_GetURBState>
 800b940:	4603      	mov	r3, r0
 800b942:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d111      	bne.n	800b96e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2207      	movs	r2, #7
 800b94e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2203      	movs	r2, #3
 800b954:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	f000 fc56 	bl	800c218 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b96c:	e12b      	b.n	800bbc6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b05      	cmp	r3, #5
 800b972:	d113      	bne.n	800b99c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	220c      	movs	r2, #12
 800b978:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b97a:	2303      	movs	r3, #3
 800b97c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2203      	movs	r2, #3
 800b982:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b992:	2300      	movs	r3, #0
 800b994:	2200      	movs	r2, #0
 800b996:	f000 fc3f 	bl	800c218 <osMessageQueuePut>
      break;
 800b99a:	e114      	b.n	800bbc6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d111      	bne.n	800b9c6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2205      	movs	r2, #5
 800b9a6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2203      	movs	r2, #3
 800b9ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f000 fc2a 	bl	800c218 <osMessageQueuePut>
      break;
 800b9c4:	e0ff      	b.n	800bbc6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	f040 80fc 	bne.w	800bbc6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	220b      	movs	r2, #11
 800b9d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2203      	movs	r2, #3
 800b9dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f000 fc12 	bl	800c218 <osMessageQueuePut>
      break;
 800b9f4:	e0e7      	b.n	800bbc6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f92b 	bl	800bc5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2208      	movs	r2, #8
 800ba14:	761a      	strb	r2, [r3, #24]

      break;
 800ba16:	e0db      	b.n	800bbd0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	791b      	ldrb	r3, [r3, #4]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f004 ff2e 	bl	8010880 <USBH_LL_GetURBState>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d113      	bne.n	800ba56 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220d      	movs	r2, #13
 800ba32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f000 fbe2 	bl	800c218 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba54:	e0b9      	b.n	800bbca <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d111      	bne.n	800ba80 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	220b      	movs	r2, #11
 800ba60:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2203      	movs	r2, #3
 800ba66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba76:	2300      	movs	r3, #0
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f000 fbcd 	bl	800c218 <osMessageQueuePut>
      break;
 800ba7e:	e0a4      	b.n	800bbca <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	f040 80a1 	bne.w	800bbca <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2203      	movs	r2, #3
 800ba90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800baa0:	2300      	movs	r3, #0
 800baa2:	2200      	movs	r2, #0
 800baa4:	f000 fbb8 	bl	800c218 <osMessageQueuePut>
      break;
 800baa8:	e08f      	b.n	800bbca <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	795b      	ldrb	r3, [r3, #5]
 800baae:	2201      	movs	r2, #1
 800bab0:	9200      	str	r2, [sp, #0]
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f8aa 	bl	800bc10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	220a      	movs	r2, #10
 800bacc:	761a      	strb	r2, [r3, #24]
      break;
 800bace:	e07f      	b.n	800bbd0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	795b      	ldrb	r3, [r3, #5]
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f004 fed2 	bl	8010880 <USBH_LL_GetURBState>
 800badc:	4603      	mov	r3, r0
 800bade:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d113      	bne.n	800bb0e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	220d      	movs	r2, #13
 800baee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2203      	movs	r2, #3
 800baf4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	f000 fb86 	bl	800c218 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb0c:	e05f      	b.n	800bbce <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d111      	bne.n	800bb38 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2209      	movs	r2, #9
 800bb18:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2200      	movs	r2, #0
 800bb32:	f000 fb71 	bl	800c218 <osMessageQueuePut>
      break;
 800bb36:	e04a      	b.n	800bbce <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d147      	bne.n	800bbce <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	220b      	movs	r2, #11
 800bb42:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2203      	movs	r2, #3
 800bb48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f000 fb5c 	bl	800c218 <osMessageQueuePut>
      break;
 800bb60:	e035      	b.n	800bbce <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7e5b      	ldrb	r3, [r3, #25]
 800bb66:	3301      	adds	r3, #1
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	765a      	strb	r2, [r3, #25]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7e5b      	ldrb	r3, [r3, #25]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d806      	bhi.n	800bb84 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb82:	e025      	b.n	800bbd0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bb8a:	2106      	movs	r1, #6
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	795b      	ldrb	r3, [r3, #5]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f90d 	bl	800bdbc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	791b      	ldrb	r3, [r3, #4]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f907 	bl	800bdbc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb8:	e00a      	b.n	800bbd0 <USBH_HandleControl+0x484>

    default:
      break;
 800bbba:	bf00      	nop
 800bbbc:	e008      	b.n	800bbd0 <USBH_HandleControl+0x484>
      break;
 800bbbe:	bf00      	nop
 800bbc0:	e006      	b.n	800bbd0 <USBH_HandleControl+0x484>
      break;
 800bbc2:	bf00      	nop
 800bbc4:	e004      	b.n	800bbd0 <USBH_HandleControl+0x484>
      break;
 800bbc6:	bf00      	nop
 800bbc8:	e002      	b.n	800bbd0 <USBH_HandleControl+0x484>
      break;
 800bbca:	bf00      	nop
 800bbcc:	e000      	b.n	800bbd0 <USBH_HandleControl+0x484>
      break;
 800bbce:	bf00      	nop
  }

  return status;
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop

0800bbdc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af04      	add	r7, sp, #16
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbea:	79f9      	ldrb	r1, [r7, #7]
 800bbec:	2300      	movs	r3, #0
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	2308      	movs	r3, #8
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	2200      	movs	r2, #0
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f004 fe0c 	bl	801081e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af04      	add	r7, sp, #16
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	460b      	mov	r3, r1
 800bc20:	80fb      	strh	r3, [r7, #6]
 800bc22:	4613      	mov	r3, r2
 800bc24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc34:	7979      	ldrb	r1, [r7, #5]
 800bc36:	7e3b      	ldrb	r3, [r7, #24]
 800bc38:	9303      	str	r3, [sp, #12]
 800bc3a:	88fb      	ldrh	r3, [r7, #6]
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	2301      	movs	r3, #1
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	2300      	movs	r3, #0
 800bc48:	2200      	movs	r2, #0
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f004 fde7 	bl	801081e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b088      	sub	sp, #32
 800bc5e:	af04      	add	r7, sp, #16
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	4611      	mov	r1, r2
 800bc66:	461a      	mov	r2, r3
 800bc68:	460b      	mov	r3, r1
 800bc6a:	80fb      	strh	r3, [r7, #6]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc70:	7979      	ldrb	r1, [r7, #5]
 800bc72:	2300      	movs	r3, #0
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	88fb      	ldrh	r3, [r7, #6]
 800bc78:	9302      	str	r3, [sp, #8]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	2301      	movs	r3, #1
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	2300      	movs	r3, #0
 800bc84:	2201      	movs	r2, #1
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f004 fdc9 	bl	801081e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bc8c:	2300      	movs	r3, #0

}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b088      	sub	sp, #32
 800bc9a:	af04      	add	r7, sp, #16
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	4611      	mov	r1, r2
 800bca2:	461a      	mov	r2, r3
 800bca4:	460b      	mov	r3, r1
 800bca6:	80fb      	strh	r3, [r7, #6]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bcba:	7979      	ldrb	r1, [r7, #5]
 800bcbc:	7e3b      	ldrb	r3, [r7, #24]
 800bcbe:	9303      	str	r3, [sp, #12]
 800bcc0:	88fb      	ldrh	r3, [r7, #6]
 800bcc2:	9302      	str	r3, [sp, #8]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	2301      	movs	r3, #1
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	2302      	movs	r3, #2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f004 fda4 	bl	801081e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af04      	add	r7, sp, #16
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4611      	mov	r1, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	460b      	mov	r3, r1
 800bcf0:	80fb      	strh	r3, [r7, #6]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bcf6:	7979      	ldrb	r1, [r7, #5]
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9303      	str	r3, [sp, #12]
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	9302      	str	r3, [sp, #8]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	2301      	movs	r3, #1
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	2302      	movs	r3, #2
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f004 fd86 	bl	801081e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af04      	add	r7, sp, #16
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	70fb      	strb	r3, [r7, #3]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70bb      	strb	r3, [r7, #2]
 800bd32:	4613      	mov	r3, r2
 800bd34:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd36:	7878      	ldrb	r0, [r7, #1]
 800bd38:	78ba      	ldrb	r2, [r7, #2]
 800bd3a:	78f9      	ldrb	r1, [r7, #3]
 800bd3c:	8b3b      	ldrh	r3, [r7, #24]
 800bd3e:	9302      	str	r3, [sp, #8]
 800bd40:	7d3b      	ldrb	r3, [r7, #20]
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	7c3b      	ldrb	r3, [r7, #16]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	4603      	mov	r3, r0
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f004 fd19 	bl	8010782 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f004 fd38 	bl	80107e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	460b      	mov	r3, r1
 800bd84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f836 	bl	800bdf8 <USBH_GetFreePipe>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd90:	89fb      	ldrh	r3, [r7, #14]
 800bd92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d00a      	beq.n	800bdb0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bd9a:	78fa      	ldrb	r2, [r7, #3]
 800bd9c:	89fb      	ldrh	r3, [r7, #14]
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	33e0      	adds	r3, #224	@ 0xe0
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bdb0:	89fb      	ldrh	r3, [r7, #14]
 800bdb2:	b2db      	uxtb	r3, r3
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	2b0f      	cmp	r3, #15
 800bdcc:	d80d      	bhi.n	800bdea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	33e0      	adds	r3, #224	@ 0xe0
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	33e0      	adds	r3, #224	@ 0xe0
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	440b      	add	r3, r1
 800bde8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
 800be08:	e00f      	b.n	800be2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	33e0      	adds	r3, #224	@ 0xe0
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	b29b      	uxth	r3, r3
 800be22:	e007      	b.n	800be34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	3301      	adds	r3, #1
 800be28:	73fb      	strb	r3, [r7, #15]
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	2b0f      	cmp	r3, #15
 800be2e:	d9ec      	bls.n	800be0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800be34:	4618      	mov	r0, r3
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <__NVIC_SetPriority>:
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be50:	2b00      	cmp	r3, #0
 800be52:	db0a      	blt.n	800be6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	b2da      	uxtb	r2, r3
 800be58:	490c      	ldr	r1, [pc, #48]	@ (800be8c <__NVIC_SetPriority+0x4c>)
 800be5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be5e:	0112      	lsls	r2, r2, #4
 800be60:	b2d2      	uxtb	r2, r2
 800be62:	440b      	add	r3, r1
 800be64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be68:	e00a      	b.n	800be80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	4908      	ldr	r1, [pc, #32]	@ (800be90 <__NVIC_SetPriority+0x50>)
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	f003 030f 	and.w	r3, r3, #15
 800be76:	3b04      	subs	r3, #4
 800be78:	0112      	lsls	r2, r2, #4
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	440b      	add	r3, r1
 800be7e:	761a      	strb	r2, [r3, #24]
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	e000e100 	.word	0xe000e100
 800be90:	e000ed00 	.word	0xe000ed00

0800be94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be98:	4b05      	ldr	r3, [pc, #20]	@ (800beb0 <SysTick_Handler+0x1c>)
 800be9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be9c:	f002 ff1e 	bl	800ecdc <xTaskGetSchedulerState>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d001      	beq.n	800beaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bea6:	f004 f817 	bl	800fed8 <xPortSysTickHandler>
  }
}
 800beaa:	bf00      	nop
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	e000e010 	.word	0xe000e010

0800beb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800beb8:	2100      	movs	r1, #0
 800beba:	f06f 0004 	mvn.w	r0, #4
 800bebe:	f7ff ffbf 	bl	800be40 <__NVIC_SetPriority>
#endif
}
 800bec2:	bf00      	nop
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bece:	f3ef 8305 	mrs	r3, IPSR
 800bed2:	603b      	str	r3, [r7, #0]
  return(result);
 800bed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800beda:	f06f 0305 	mvn.w	r3, #5
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	e00c      	b.n	800befc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bee2:	4b0a      	ldr	r3, [pc, #40]	@ (800bf0c <osKernelInitialize+0x44>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800beea:	4b08      	ldr	r3, [pc, #32]	@ (800bf0c <osKernelInitialize+0x44>)
 800beec:	2201      	movs	r2, #1
 800beee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	e002      	b.n	800befc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bef6:	f04f 33ff 	mov.w	r3, #4294967295
 800befa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800befc:	687b      	ldr	r3, [r7, #4]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	2000087c 	.word	0x2000087c

0800bf10 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4a0c      	ldr	r2, [pc, #48]	@ (800bf58 <osKernelGetInfo+0x48>)
 800bf26:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4a0b      	ldr	r2, [pc, #44]	@ (800bf58 <osKernelGetInfo+0x48>)
 800bf2c:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00c      	beq.n	800bf4e <osKernelGetInfo+0x3e>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d009      	beq.n	800bf4e <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b11      	cmp	r3, #17
 800bf3e:	d901      	bls.n	800bf44 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800bf40:	2311      	movs	r3, #17
 800bf42:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4905      	ldr	r1, [pc, #20]	@ (800bf5c <osKernelGetInfo+0x4c>)
 800bf48:	68b8      	ldr	r0, [r7, #8]
 800bf4a:	f006 fbbc 	bl	80126c6 <memcpy>
  }

  return (osOK);
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	05f5f531 	.word	0x05f5f531
 800bf5c:	0801582c 	.word	0x0801582c

0800bf60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf66:	f3ef 8305 	mrs	r3, IPSR
 800bf6a:	603b      	str	r3, [r7, #0]
  return(result);
 800bf6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf72:	f06f 0305 	mvn.w	r3, #5
 800bf76:	607b      	str	r3, [r7, #4]
 800bf78:	e010      	b.n	800bf9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <osKernelStart+0x48>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d109      	bne.n	800bf96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf82:	f7ff ff97 	bl	800beb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf86:	4b08      	ldr	r3, [pc, #32]	@ (800bfa8 <osKernelStart+0x48>)
 800bf88:	2202      	movs	r2, #2
 800bf8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf8c:	f002 f82e 	bl	800dfec <vTaskStartScheduler>
      stat = osOK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	e002      	b.n	800bf9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf96:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf9c:	687b      	ldr	r3, [r7, #4]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000087c 	.word	0x2000087c

0800bfac <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800bfac:	b480      	push	{r7}
 800bfae:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800bfb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800bfc4:	4b03      	ldr	r3, [pc, #12]	@ (800bfd4 <osKernelGetSysTimerFreq+0x14>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	2000022c 	.word	0x2000022c

0800bfd8 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08e      	sub	sp, #56	@ 0x38
 800bfdc:	af04      	add	r7, sp, #16
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfe8:	f3ef 8305 	mrs	r3, IPSR
 800bfec:	617b      	str	r3, [r7, #20]
  return(result);
 800bfee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d17e      	bne.n	800c0f2 <osThreadNew+0x11a>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d07b      	beq.n	800c0f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bffa:	2380      	movs	r3, #128	@ 0x80
 800bffc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bffe:	2318      	movs	r3, #24
 800c000:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
 800c00a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d045      	beq.n	800c09e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <osThreadNew+0x48>
        name = attr->name;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d008      	beq.n	800c046 <osThreadNew+0x6e>
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	2b38      	cmp	r3, #56	@ 0x38
 800c038:	d805      	bhi.n	800c046 <osThreadNew+0x6e>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <osThreadNew+0x72>
        return (NULL);
 800c046:	2300      	movs	r3, #0
 800c048:	e054      	b.n	800c0f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	089b      	lsrs	r3, r3, #2
 800c058:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00e      	beq.n	800c080 <osThreadNew+0xa8>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	2ba7      	cmp	r3, #167	@ 0xa7
 800c068:	d90a      	bls.n	800c080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d002      	beq.n	800c080 <osThreadNew+0xa8>
        mem = 1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	e010      	b.n	800c0a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10c      	bne.n	800c0a2 <osThreadNew+0xca>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d108      	bne.n	800c0a2 <osThreadNew+0xca>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d104      	bne.n	800c0a2 <osThreadNew+0xca>
          mem = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]
 800c09c:	e001      	b.n	800c0a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d110      	bne.n	800c0ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	6a3a      	ldr	r2, [r7, #32]
 800c0bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 fb1e 	bl	800d700 <xTaskCreateStatic>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	e013      	b.n	800c0f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d110      	bne.n	800c0f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	f107 0310 	add.w	r3, r7, #16
 800c0d8:	9301      	str	r3, [sp, #4]
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f001 fb6c 	bl	800d7c0 <xTaskCreate>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d001      	beq.n	800c0f2 <osThreadNew+0x11a>
            hTask = NULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c0f2:	693b      	ldr	r3, [r7, #16]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3728      	adds	r7, #40	@ 0x28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c104:	f3ef 8305 	mrs	r3, IPSR
 800c108:	60bb      	str	r3, [r7, #8]
  return(result);
 800c10a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <osDelay+0x1c>
    stat = osErrorISR;
 800c110:	f06f 0305 	mvn.w	r3, #5
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	e007      	b.n	800c128 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c118:	2300      	movs	r3, #0
 800c11a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f001 fd1e 	bl	800db64 <vTaskDelay>
    }
  }

  return (stat);
 800c128:	68fb      	ldr	r3, [r7, #12]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c132:	b580      	push	{r7, lr}
 800c134:	b08a      	sub	sp, #40	@ 0x28
 800c136:	af02      	add	r7, sp, #8
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c13e:	2300      	movs	r3, #0
 800c140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c142:	f3ef 8305 	mrs	r3, IPSR
 800c146:	613b      	str	r3, [r7, #16]
  return(result);
 800c148:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d15f      	bne.n	800c20e <osMessageQueueNew+0xdc>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d05c      	beq.n	800c20e <osMessageQueueNew+0xdc>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d059      	beq.n	800c20e <osMessageQueueNew+0xdc>
    mem = -1;
 800c15a:	f04f 33ff 	mov.w	r3, #4294967295
 800c15e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d029      	beq.n	800c1ba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d012      	beq.n	800c194 <osMessageQueueNew+0x62>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	2b4f      	cmp	r3, #79	@ 0x4f
 800c174:	d90e      	bls.n	800c194 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	695a      	ldr	r2, [r3, #20]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	fb01 f303 	mul.w	r3, r1, r3
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d302      	bcc.n	800c194 <osMessageQueueNew+0x62>
        mem = 1;
 800c18e:	2301      	movs	r3, #1
 800c190:	61bb      	str	r3, [r7, #24]
 800c192:	e014      	b.n	800c1be <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d110      	bne.n	800c1be <osMessageQueueNew+0x8c>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10c      	bne.n	800c1be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d108      	bne.n	800c1be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <osMessageQueueNew+0x8c>
          mem = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	e001      	b.n	800c1be <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d10b      	bne.n	800c1dc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	9100      	str	r1, [sp, #0]
 800c1d0:	68b9      	ldr	r1, [r7, #8]
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 fbec 	bl	800c9b0 <xQueueGenericCreateStatic>
 800c1d8:	61f8      	str	r0, [r7, #28]
 800c1da:	e008      	b.n	800c1ee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 fc5f 	bl	800caaa <xQueueGenericCreate>
 800c1ec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00c      	beq.n	800c20e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e001      	b.n	800c206 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c202:	2300      	movs	r3, #0
 800c204:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c206:	6979      	ldr	r1, [r7, #20]
 800c208:	69f8      	ldr	r0, [r7, #28]
 800c20a:	f001 fa1b 	bl	800d644 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c20e:	69fb      	ldr	r3, [r7, #28]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3720      	adds	r7, #32
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c230:	f3ef 8305 	mrs	r3, IPSR
 800c234:	617b      	str	r3, [r7, #20]
  return(result);
 800c236:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d028      	beq.n	800c28e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <osMessageQueuePut+0x36>
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <osMessageQueuePut+0x36>
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c24e:	f06f 0303 	mvn.w	r3, #3
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	e038      	b.n	800c2c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c256:	2300      	movs	r3, #0
 800c258:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c25a:	f107 0210 	add.w	r2, r7, #16
 800c25e:	2300      	movs	r3, #0
 800c260:	68b9      	ldr	r1, [r7, #8]
 800c262:	69b8      	ldr	r0, [r7, #24]
 800c264:	f000 fdb4 	bl	800cdd0 <xQueueGenericSendFromISR>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d003      	beq.n	800c276 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c26e:	f06f 0302 	mvn.w	r3, #2
 800c272:	61fb      	str	r3, [r7, #28]
 800c274:	e028      	b.n	800c2c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d025      	beq.n	800c2c8 <osMessageQueuePut+0xb0>
 800c27c:	4b15      	ldr	r3, [pc, #84]	@ (800c2d4 <osMessageQueuePut+0xbc>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	e01c      	b.n	800c2c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <osMessageQueuePut+0x82>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d103      	bne.n	800c2a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c29a:	f06f 0303 	mvn.w	r3, #3
 800c29e:	61fb      	str	r3, [r7, #28]
 800c2a0:	e012      	b.n	800c2c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	69b8      	ldr	r0, [r7, #24]
 800c2aa:	f000 fc8f 	bl	800cbcc <xQueueGenericSend>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d009      	beq.n	800c2c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c2ba:	f06f 0301 	mvn.w	r3, #1
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e002      	b.n	800c2c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c2c2:	f06f 0302 	mvn.w	r3, #2
 800c2c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	e000ed04 	.word	0xe000ed04

0800c2d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b088      	sub	sp, #32
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2ee:	f3ef 8305 	mrs	r3, IPSR
 800c2f2:	617b      	str	r3, [r7, #20]
  return(result);
 800c2f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d028      	beq.n	800c34c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <osMessageQueueGet+0x34>
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <osMessageQueueGet+0x34>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c30c:	f06f 0303 	mvn.w	r3, #3
 800c310:	61fb      	str	r3, [r7, #28]
 800c312:	e037      	b.n	800c384 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c314:	2300      	movs	r3, #0
 800c316:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c318:	f107 0310 	add.w	r3, r7, #16
 800c31c:	461a      	mov	r2, r3
 800c31e:	68b9      	ldr	r1, [r7, #8]
 800c320:	69b8      	ldr	r0, [r7, #24]
 800c322:	f000 ffe5 	bl	800d2f0 <xQueueReceiveFromISR>
 800c326:	4603      	mov	r3, r0
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d003      	beq.n	800c334 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c32c:	f06f 0302 	mvn.w	r3, #2
 800c330:	61fb      	str	r3, [r7, #28]
 800c332:	e027      	b.n	800c384 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d024      	beq.n	800c384 <osMessageQueueGet+0xac>
 800c33a:	4b15      	ldr	r3, [pc, #84]	@ (800c390 <osMessageQueueGet+0xb8>)
 800c33c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	e01b      	b.n	800c384 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d002      	beq.n	800c358 <osMessageQueueGet+0x80>
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c358:	f06f 0303 	mvn.w	r3, #3
 800c35c:	61fb      	str	r3, [r7, #28]
 800c35e:	e011      	b.n	800c384 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	68b9      	ldr	r1, [r7, #8]
 800c364:	69b8      	ldr	r0, [r7, #24]
 800c366:	f000 fdd1 	bl	800cf0c <xQueueReceive>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d009      	beq.n	800c384 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c376:	f06f 0301 	mvn.w	r3, #1
 800c37a:	61fb      	str	r3, [r7, #28]
 800c37c:	e002      	b.n	800c384 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c37e:	f06f 0302 	mvn.w	r3, #2
 800c382:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c384:	69fb      	ldr	r3, [r7, #28]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3720      	adds	r7, #32
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	e000ed04 	.word	0xe000ed04

0800c394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4a07      	ldr	r2, [pc, #28]	@ (800c3c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c3a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	4a06      	ldr	r2, [pc, #24]	@ (800c3c4 <vApplicationGetIdleTaskMemory+0x30>)
 800c3aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2280      	movs	r2, #128	@ 0x80
 800c3b0:	601a      	str	r2, [r3, #0]
}
 800c3b2:	bf00      	nop
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20000880 	.word	0x20000880
 800c3c4:	20000928 	.word	0x20000928

0800c3c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4a07      	ldr	r2, [pc, #28]	@ (800c3f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c3d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	4a06      	ldr	r2, [pc, #24]	@ (800c3f8 <vApplicationGetTimerTaskMemory+0x30>)
 800c3de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3e6:	601a      	str	r2, [r3, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20000b28 	.word	0x20000b28
 800c3f8:	20000bd0 	.word	0x20000bd0

0800c3fc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c402:	2020      	movs	r0, #32
 800c404:	f003 fdfa 	bl	800fffc <pvPortMalloc>
 800c408:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00a      	beq.n	800c426 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3304      	adds	r3, #4
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f9aa 	bl	800c774 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c426:	687b      	ldr	r3, [r7, #4]
	}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b090      	sub	sp, #64	@ 0x40
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c446:	2300      	movs	r3, #0
 800c448:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10b      	bne.n	800c468 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	e7fd      	b.n	800c464 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c46e:	d30b      	bcc.n	800c488 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	61fb      	str	r3, [r7, #28]
}
 800c482:	bf00      	nop
 800c484:	bf00      	nop
 800c486:	e7fd      	b.n	800c484 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <xEventGroupWaitBits+0x76>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	61bb      	str	r3, [r7, #24]
}
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
 800c4a4:	e7fd      	b.n	800c4a2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4a6:	f002 fc19 	bl	800ecdc <xTaskGetSchedulerState>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <xEventGroupWaitBits+0x86>
 800c4b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <xEventGroupWaitBits+0x8a>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e000      	b.n	800c4bc <xEventGroupWaitBits+0x8c>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10b      	bne.n	800c4d8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	617b      	str	r3, [r7, #20]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c4d8:	f001 fdf8 	bl	800e0cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	68b9      	ldr	r1, [r7, #8]
 800c4e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4e8:	f000 f90d 	bl	800c706 <prvTestWaitCondition>
 800c4ec:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00e      	beq.n	800c512 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d028      	beq.n	800c554 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	43db      	mvns	r3, r3
 800c50a:	401a      	ands	r2, r3
 800c50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	e020      	b.n	800c554 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c520:	e018      	b.n	800c554 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c52e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c538:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c53c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c540:	1d18      	adds	r0, r3, #4
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c546:	4313      	orrs	r3, r2
 800c548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c54a:	4619      	mov	r1, r3
 800c54c:	f002 f894 	bl	800e678 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c554:	f001 fdc8 	bl	800e0e8 <xTaskResumeAll>
 800c558:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c55a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d031      	beq.n	800c5c4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d107      	bne.n	800c576 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c566:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <xEventGroupWaitBits+0x1a0>)
 800c568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c576:	f002 fd2b 	bl	800efd0 <uxTaskResetEventItemValue>
 800c57a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d11a      	bne.n	800c5bc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c586:	f003 fc17 	bl	800fdb8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c596:	f000 f8b6 	bl	800c706 <prvTestWaitCondition>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d006      	beq.n	800c5b4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	43db      	mvns	r3, r3
 800c5ae:	401a      	ands	r2, r3
 800c5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c5b8:	f003 fc30 	bl	800fe1c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3740      	adds	r7, #64	@ 0x40
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	@ 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10b      	bne.n	800c608 <xEventGroupSetBits+0x34>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	613b      	str	r3, [r7, #16]
}
 800c602:	bf00      	nop
 800c604:	bf00      	nop
 800c606:	e7fd      	b.n	800c604 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c60e:	d30b      	bcc.n	800c628 <xEventGroupSetBits+0x54>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	60fb      	str	r3, [r7, #12]
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	e7fd      	b.n	800c624 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62a:	3304      	adds	r3, #4
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	3308      	adds	r3, #8
 800c632:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c634:	f001 fd4a 	bl	800e0cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	431a      	orrs	r2, r3
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c64a:	e03c      	b.n	800c6c6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c658:	2300      	movs	r3, #0
 800c65a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c662:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c66a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d108      	bne.n	800c688 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	4013      	ands	r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c682:	2301      	movs	r3, #1
 800c684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c686:	e008      	b.n	800c69a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	4013      	ands	r3, r2
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	429a      	cmp	r2, r3
 800c694:	d101      	bne.n	800c69a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c696:	2301      	movs	r3, #1
 800c698:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d010      	beq.n	800c6c2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c6be:	f002 f8a9 	bl	800e814 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c6c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d1be      	bne.n	800c64c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	43db      	mvns	r3, r3
 800c6d6:	401a      	ands	r2, r3
 800c6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c6dc:	f001 fd04 	bl	800e0e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e2:	681b      	ldr	r3, [r3, #0]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3738      	adds	r7, #56	@ 0x38
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff ff6b 	bl	800c5d4 <xEventGroupSetBits>
}
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c706:	b480      	push	{r7}
 800c708:	b087      	sub	sp, #28
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d107      	bne.n	800c72c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c726:	2301      	movs	r3, #1
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	e007      	b.n	800c73c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4013      	ands	r3, r2
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	429a      	cmp	r2, r3
 800c736:	d101      	bne.n	800c73c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c738:	2301      	movs	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c73c:	697b      	ldr	r3, [r7, #20]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
	...

0800c74c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	4804      	ldr	r0, [pc, #16]	@ (800c770 <xEventGroupSetBitsFromISR+0x24>)
 800c760:	f003 f9dc 	bl	800fb1c <xTimerPendFunctionCallFromISR>
 800c764:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c766:	697b      	ldr	r3, [r7, #20]
	}
 800c768:	4618      	mov	r0, r3
 800c76a:	3718      	adds	r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	0800c6ed 	.word	0x0800c6ed

0800c774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f103 0208 	add.w	r2, r3, #8
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f04f 32ff 	mov.w	r2, #4294967295
 800c78c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f103 0208 	add.w	r2, r3, #8
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f103 0208 	add.w	r2, r3, #8
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7c2:	bf00      	nop
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	1c5a      	adds	r2, r3, #1
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
}
 800c80a:	bf00      	nop
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c816:	b480      	push	{r7}
 800c818:	b085      	sub	sp, #20
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82c:	d103      	bne.n	800c836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	e00c      	b.n	800c850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3308      	adds	r3, #8
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e002      	b.n	800c844 <vListInsert+0x2e>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d2f6      	bcs.n	800c83e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	601a      	str	r2, [r3, #0]
}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	6892      	ldr	r2, [r2, #8]
 800c89e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	6852      	ldr	r2, [r2, #4]
 800c8a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d103      	bne.n	800c8bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	689a      	ldr	r2, [r3, #8]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	1e5a      	subs	r2, r3, #1
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <xQueueGenericReset+0x2c>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	60bb      	str	r3, [r7, #8]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c908:	f003 fa56 	bl	800fdb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c918:	fb01 f303 	mul.w	r3, r1, r3
 800c91c:	441a      	add	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c938:	3b01      	subs	r3, #1
 800c93a:	68f9      	ldr	r1, [r7, #12]
 800c93c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c93e:	fb01 f303 	mul.w	r3, r1, r3
 800c942:	441a      	add	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	22ff      	movs	r2, #255	@ 0xff
 800c94c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	22ff      	movs	r2, #255	@ 0xff
 800c954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d114      	bne.n	800c988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d01a      	beq.n	800c99c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3310      	adds	r3, #16
 800c96a:	4618      	mov	r0, r3
 800c96c:	f001 feee 	bl	800e74c <xTaskRemoveFromEventList>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d012      	beq.n	800c99c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <xQueueGenericReset+0xd0>)
 800c978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	e009      	b.n	800c99c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3310      	adds	r3, #16
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fef1 	bl	800c774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3324      	adds	r3, #36	@ 0x24
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff feec 	bl	800c774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c99c:	f003 fa3e 	bl	800fe1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9a0:	2301      	movs	r3, #1
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	e000ed04 	.word	0xe000ed04

0800c9b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08e      	sub	sp, #56	@ 0x38
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c9d6:	bf00      	nop
 800c9d8:	bf00      	nop
 800c9da:	e7fd      	b.n	800c9d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10b      	bne.n	800c9fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <xQueueGenericCreateStatic+0x56>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <xQueueGenericCreateStatic+0x5a>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <xQueueGenericCreateStatic+0x5c>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10b      	bne.n	800ca28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	623b      	str	r3, [r7, #32]
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	e7fd      	b.n	800ca24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <xQueueGenericCreateStatic+0x84>
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <xQueueGenericCreateStatic+0x88>
 800ca34:	2301      	movs	r3, #1
 800ca36:	e000      	b.n	800ca3a <xQueueGenericCreateStatic+0x8a>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10b      	bne.n	800ca56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	61fb      	str	r3, [r7, #28]
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	e7fd      	b.n	800ca52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca56:	2350      	movs	r3, #80	@ 0x50
 800ca58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b50      	cmp	r3, #80	@ 0x50
 800ca5e:	d00b      	beq.n	800ca78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	61bb      	str	r3, [r7, #24]
}
 800ca72:	bf00      	nop
 800ca74:	bf00      	nop
 800ca76:	e7fd      	b.n	800ca74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ca7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00d      	beq.n	800caa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ca90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	4613      	mov	r3, r2
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 f840 	bl	800cb20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3730      	adds	r7, #48	@ 0x30
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b08a      	sub	sp, #40	@ 0x28
 800caae:	af02      	add	r7, sp, #8
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	4613      	mov	r3, r2
 800cab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10b      	bne.n	800cad6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	613b      	str	r3, [r7, #16]
}
 800cad0:	bf00      	nop
 800cad2:	bf00      	nop
 800cad4:	e7fd      	b.n	800cad2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	fb02 f303 	mul.w	r3, r2, r3
 800cade:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	3350      	adds	r3, #80	@ 0x50
 800cae4:	4618      	mov	r0, r3
 800cae6:	f003 fa89 	bl	800fffc <pvPortMalloc>
 800caea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d011      	beq.n	800cb16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	3350      	adds	r3, #80	@ 0x50
 800cafa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb04:	79fa      	ldrb	r2, [r7, #7]
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	68b9      	ldr	r1, [r7, #8]
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 f805 	bl	800cb20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb16:	69bb      	ldr	r3, [r7, #24]
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d103      	bne.n	800cb3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e002      	b.n	800cb42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb4e:	2101      	movs	r1, #1
 800cb50:	69b8      	ldr	r0, [r7, #24]
 800cb52:	f7ff fec3 	bl	800c8dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	78fa      	ldrb	r2, [r7, #3]
 800cb5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb5e:	bf00      	nop
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00e      	beq.n	800cb92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb86:	2300      	movs	r3, #0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f81d 	bl	800cbcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b086      	sub	sp, #24
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	4603      	mov	r3, r0
 800cba2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cba4:	2301      	movs	r3, #1
 800cba6:	617b      	str	r3, [r7, #20]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cbac:	79fb      	ldrb	r3, [r7, #7]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6939      	ldr	r1, [r7, #16]
 800cbb2:	6978      	ldr	r0, [r7, #20]
 800cbb4:	f7ff ff79 	bl	800caaa <xQueueGenericCreate>
 800cbb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7ff ffd3 	bl	800cb66 <prvInitialiseMutex>

		return xNewQueue;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
	}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08e      	sub	sp, #56	@ 0x38
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10b      	bne.n	800cc00 <xQueueGenericSend+0x34>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cbfa:	bf00      	nop
 800cbfc:	bf00      	nop
 800cbfe:	e7fd      	b.n	800cbfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d103      	bne.n	800cc0e <xQueueGenericSend+0x42>
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <xQueueGenericSend+0x46>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e000      	b.n	800cc14 <xQueueGenericSend+0x48>
 800cc12:	2300      	movs	r3, #0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10b      	bne.n	800cc30 <xQueueGenericSend+0x64>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc2a:	bf00      	nop
 800cc2c:	bf00      	nop
 800cc2e:	e7fd      	b.n	800cc2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d103      	bne.n	800cc3e <xQueueGenericSend+0x72>
 800cc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d101      	bne.n	800cc42 <xQueueGenericSend+0x76>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e000      	b.n	800cc44 <xQueueGenericSend+0x78>
 800cc42:	2300      	movs	r3, #0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10b      	bne.n	800cc60 <xQueueGenericSend+0x94>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	623b      	str	r3, [r7, #32]
}
 800cc5a:	bf00      	nop
 800cc5c:	bf00      	nop
 800cc5e:	e7fd      	b.n	800cc5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc60:	f002 f83c 	bl	800ecdc <xTaskGetSchedulerState>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <xQueueGenericSend+0xa4>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <xQueueGenericSend+0xa8>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e000      	b.n	800cc76 <xQueueGenericSend+0xaa>
 800cc74:	2300      	movs	r3, #0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10b      	bne.n	800cc92 <xQueueGenericSend+0xc6>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	61fb      	str	r3, [r7, #28]
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	e7fd      	b.n	800cc8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc92:	f003 f891 	bl	800fdb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d302      	bcc.n	800cca8 <xQueueGenericSend+0xdc>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d129      	bne.n	800ccfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	68b9      	ldr	r1, [r7, #8]
 800ccac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccae:	f000 fbb9 	bl	800d424 <prvCopyDataToQueue>
 800ccb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d010      	beq.n	800ccde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbe:	3324      	adds	r3, #36	@ 0x24
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f001 fd43 	bl	800e74c <xTaskRemoveFromEventList>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d013      	beq.n	800ccf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cccc:	4b3f      	ldr	r3, [pc, #252]	@ (800cdcc <xQueueGenericSend+0x200>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	e00a      	b.n	800ccf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d007      	beq.n	800ccf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cce4:	4b39      	ldr	r3, [pc, #228]	@ (800cdcc <xQueueGenericSend+0x200>)
 800cce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccea:	601a      	str	r2, [r3, #0]
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccf4:	f003 f892 	bl	800fe1c <vPortExitCritical>
				return pdPASS;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e063      	b.n	800cdc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d103      	bne.n	800cd0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd02:	f003 f88b 	bl	800fe1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	e05c      	b.n	800cdc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d106      	bne.n	800cd1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd10:	f107 0314 	add.w	r3, r7, #20
 800cd14:	4618      	mov	r0, r3
 800cd16:	f001 fde1 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd1e:	f003 f87d 	bl	800fe1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd22:	f001 f9d3 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd26:	f003 f847 	bl	800fdb8 <vPortEnterCritical>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd30:	b25b      	sxtb	r3, r3
 800cd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd36:	d103      	bne.n	800cd40 <xQueueGenericSend+0x174>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd46:	b25b      	sxtb	r3, r3
 800cd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4c:	d103      	bne.n	800cd56 <xQueueGenericSend+0x18a>
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd56:	f003 f861 	bl	800fe1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd5a:	1d3a      	adds	r2, r7, #4
 800cd5c:	f107 0314 	add.w	r3, r7, #20
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fdd0 	bl	800e908 <xTaskCheckForTimeOut>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d124      	bne.n	800cdb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd70:	f000 fc50 	bl	800d614 <prvIsQueueFull>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d018      	beq.n	800cdac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7c:	3310      	adds	r3, #16
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	4611      	mov	r1, r2
 800cd82:	4618      	mov	r0, r3
 800cd84:	f001 fc52 	bl	800e62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd8a:	f000 fbdb 	bl	800d544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd8e:	f001 f9ab 	bl	800e0e8 <xTaskResumeAll>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f af7c 	bne.w	800cc92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cdcc <xQueueGenericSend+0x200>)
 800cd9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cda0:	601a      	str	r2, [r3, #0]
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	e772      	b.n	800cc92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdae:	f000 fbc9 	bl	800d544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdb2:	f001 f999 	bl	800e0e8 <xTaskResumeAll>
 800cdb6:	e76c      	b.n	800cc92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdba:	f000 fbc3 	bl	800d544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdbe:	f001 f993 	bl	800e0e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3738      	adds	r7, #56	@ 0x38
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	e000ed04 	.word	0xe000ed04

0800cdd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b090      	sub	sp, #64	@ 0x40
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10b      	bne.n	800ce00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	e7fd      	b.n	800cdfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d103      	bne.n	800ce0e <xQueueGenericSendFromISR+0x3e>
 800ce06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <xQueueGenericSendFromISR+0x42>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e000      	b.n	800ce14 <xQueueGenericSendFromISR+0x44>
 800ce12:	2300      	movs	r3, #0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10b      	bne.n	800ce30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce2a:	bf00      	nop
 800ce2c:	bf00      	nop
 800ce2e:	e7fd      	b.n	800ce2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d103      	bne.n	800ce3e <xQueueGenericSendFromISR+0x6e>
 800ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d101      	bne.n	800ce42 <xQueueGenericSendFromISR+0x72>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <xQueueGenericSendFromISR+0x74>
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10b      	bne.n	800ce60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	623b      	str	r3, [r7, #32]
}
 800ce5a:	bf00      	nop
 800ce5c:	bf00      	nop
 800ce5e:	e7fd      	b.n	800ce5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce60:	f003 f88a 	bl	800ff78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce64:	f3ef 8211 	mrs	r2, BASEPRI
 800ce68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	61fa      	str	r2, [r7, #28]
 800ce7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d302      	bcc.n	800ce92 <xQueueGenericSendFromISR+0xc2>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d12f      	bne.n	800cef2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	68b9      	ldr	r1, [r7, #8]
 800cea6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cea8:	f000 fabc 	bl	800d424 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ceac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d112      	bne.n	800cedc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d016      	beq.n	800ceec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	3324      	adds	r3, #36	@ 0x24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 fc42 	bl	800e74c <xTaskRemoveFromEventList>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00e      	beq.n	800ceec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00b      	beq.n	800ceec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	e007      	b.n	800ceec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cedc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cee0:	3301      	adds	r3, #1
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	b25a      	sxtb	r2, r3
 800cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ceec:	2301      	movs	r3, #1
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cef0:	e001      	b.n	800cef6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3740      	adds	r7, #64	@ 0x40
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08c      	sub	sp, #48	@ 0x30
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10b      	bne.n	800cf3e <xQueueReceive+0x32>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	623b      	str	r3, [r7, #32]
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d103      	bne.n	800cf4c <xQueueReceive+0x40>
 800cf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <xQueueReceive+0x44>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e000      	b.n	800cf52 <xQueueReceive+0x46>
 800cf50:	2300      	movs	r3, #0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10b      	bne.n	800cf6e <xQueueReceive+0x62>
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	61fb      	str	r3, [r7, #28]
}
 800cf68:	bf00      	nop
 800cf6a:	bf00      	nop
 800cf6c:	e7fd      	b.n	800cf6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf6e:	f001 feb5 	bl	800ecdc <xTaskGetSchedulerState>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d102      	bne.n	800cf7e <xQueueReceive+0x72>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <xQueueReceive+0x76>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <xQueueReceive+0x78>
 800cf82:	2300      	movs	r3, #0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10b      	bne.n	800cfa0 <xQueueReceive+0x94>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	61bb      	str	r3, [r7, #24]
}
 800cf9a:	bf00      	nop
 800cf9c:	bf00      	nop
 800cf9e:	e7fd      	b.n	800cf9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfa0:	f002 ff0a 	bl	800fdb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01f      	beq.n	800cff0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfb4:	f000 faa0 	bl	800d4f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfba:	1e5a      	subs	r2, r3, #1
 800cfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00f      	beq.n	800cfe8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	3310      	adds	r3, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 fbbd 	bl	800e74c <xTaskRemoveFromEventList>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfd8:	4b3c      	ldr	r3, [pc, #240]	@ (800d0cc <xQueueReceive+0x1c0>)
 800cfda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfe8:	f002 ff18 	bl	800fe1c <vPortExitCritical>
				return pdPASS;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e069      	b.n	800d0c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d103      	bne.n	800cffe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cff6:	f002 ff11 	bl	800fe1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e062      	b.n	800d0c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d004:	f107 0310 	add.w	r3, r7, #16
 800d008:	4618      	mov	r0, r3
 800d00a:	f001 fc67 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d00e:	2301      	movs	r3, #1
 800d010:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d012:	f002 ff03 	bl	800fe1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d016:	f001 f859 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d01a:	f002 fecd 	bl	800fdb8 <vPortEnterCritical>
 800d01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d024:	b25b      	sxtb	r3, r3
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02a:	d103      	bne.n	800d034 <xQueueReceive+0x128>
 800d02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d03a:	b25b      	sxtb	r3, r3
 800d03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d040:	d103      	bne.n	800d04a <xQueueReceive+0x13e>
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d04a:	f002 fee7 	bl	800fe1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d04e:	1d3a      	adds	r2, r7, #4
 800d050:	f107 0310 	add.w	r3, r7, #16
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f001 fc56 	bl	800e908 <xTaskCheckForTimeOut>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d123      	bne.n	800d0aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d064:	f000 fac0 	bl	800d5e8 <prvIsQueueEmpty>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d017      	beq.n	800d09e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d070:	3324      	adds	r3, #36	@ 0x24
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4611      	mov	r1, r2
 800d076:	4618      	mov	r0, r3
 800d078:	f001 fad8 	bl	800e62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d07e:	f000 fa61 	bl	800d544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d082:	f001 f831 	bl	800e0e8 <xTaskResumeAll>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d189      	bne.n	800cfa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d08c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0cc <xQueueReceive+0x1c0>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	e780      	b.n	800cfa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0a0:	f000 fa50 	bl	800d544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0a4:	f001 f820 	bl	800e0e8 <xTaskResumeAll>
 800d0a8:	e77a      	b.n	800cfa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0ac:	f000 fa4a 	bl	800d544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0b0:	f001 f81a 	bl	800e0e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0b6:	f000 fa97 	bl	800d5e8 <prvIsQueueEmpty>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f43f af6f 	beq.w	800cfa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3730      	adds	r7, #48	@ 0x30
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08e      	sub	sp, #56	@ 0x38
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10b      	bne.n	800d104 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	623b      	str	r3, [r7, #32]
}
 800d0fe:	bf00      	nop
 800d100:	bf00      	nop
 800d102:	e7fd      	b.n	800d100 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	61fb      	str	r3, [r7, #28]
}
 800d11e:	bf00      	nop
 800d120:	bf00      	nop
 800d122:	e7fd      	b.n	800d120 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d124:	f001 fdda 	bl	800ecdc <xTaskGetSchedulerState>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d102      	bne.n	800d134 <xQueueSemaphoreTake+0x64>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <xQueueSemaphoreTake+0x68>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <xQueueSemaphoreTake+0x6a>
 800d138:	2300      	movs	r3, #0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10b      	bne.n	800d156 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	61bb      	str	r3, [r7, #24]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d156:	f002 fe2f 	bl	800fdb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d15e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	2b00      	cmp	r3, #0
 800d164:	d024      	beq.n	800d1b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d168:	1e5a      	subs	r2, r3, #1
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d176:	f001 ff43 	bl	800f000 <pvTaskIncrementMutexHeldCount>
 800d17a:	4602      	mov	r2, r0
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00f      	beq.n	800d1a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18a:	3310      	adds	r3, #16
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 fadd 	bl	800e74c <xTaskRemoveFromEventList>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d007      	beq.n	800d1a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d198:	4b54      	ldr	r3, [pc, #336]	@ (800d2ec <xQueueSemaphoreTake+0x21c>)
 800d19a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1a8:	f002 fe38 	bl	800fe1c <vPortExitCritical>
				return pdPASS;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e098      	b.n	800d2e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d112      	bne.n	800d1dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00b      	beq.n	800d1d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	617b      	str	r3, [r7, #20]
}
 800d1ce:	bf00      	nop
 800d1d0:	bf00      	nop
 800d1d2:	e7fd      	b.n	800d1d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d1d4:	f002 fe22 	bl	800fe1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e082      	b.n	800d2e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1e2:	f107 030c 	add.w	r3, r7, #12
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f001 fb78 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1f0:	f002 fe14 	bl	800fe1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1f4:	f000 ff6a 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1f8:	f002 fdde 	bl	800fdb8 <vPortEnterCritical>
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d202:	b25b      	sxtb	r3, r3
 800d204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d208:	d103      	bne.n	800d212 <xQueueSemaphoreTake+0x142>
 800d20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d218:	b25b      	sxtb	r3, r3
 800d21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21e:	d103      	bne.n	800d228 <xQueueSemaphoreTake+0x158>
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d228:	f002 fdf8 	bl	800fe1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d22c:	463a      	mov	r2, r7
 800d22e:	f107 030c 	add.w	r3, r7, #12
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f001 fb67 	bl	800e908 <xTaskCheckForTimeOut>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d132      	bne.n	800d2a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d242:	f000 f9d1 	bl	800d5e8 <prvIsQueueEmpty>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d026      	beq.n	800d29a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d109      	bne.n	800d268 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d254:	f002 fdb0 	bl	800fdb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 fd5b 	bl	800ed18 <xTaskPriorityInherit>
 800d262:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d264:	f002 fdda 	bl	800fe1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26a:	3324      	adds	r3, #36	@ 0x24
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f001 f9db 	bl	800e62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d278:	f000 f964 	bl	800d544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d27c:	f000 ff34 	bl	800e0e8 <xTaskResumeAll>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	f47f af67 	bne.w	800d156 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d288:	4b18      	ldr	r3, [pc, #96]	@ (800d2ec <xQueueSemaphoreTake+0x21c>)
 800d28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	e75d      	b.n	800d156 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d29a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d29c:	f000 f952 	bl	800d544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2a0:	f000 ff22 	bl	800e0e8 <xTaskResumeAll>
 800d2a4:	e757      	b.n	800d156 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d2a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2a8:	f000 f94c 	bl	800d544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2ac:	f000 ff1c 	bl	800e0e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2b2:	f000 f999 	bl	800d5e8 <prvIsQueueEmpty>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f43f af4c 	beq.w	800d156 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00d      	beq.n	800d2e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d2c4:	f002 fd78 	bl	800fdb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d2c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2ca:	f000 f893 	bl	800d3f4 <prvGetDisinheritPriorityAfterTimeout>
 800d2ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 fdf6 	bl	800eec8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d2dc:	f002 fd9e 	bl	800fe1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3738      	adds	r7, #56	@ 0x38
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	e000ed04 	.word	0xe000ed04

0800d2f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b08e      	sub	sp, #56	@ 0x38
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10b      	bne.n	800d31e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	623b      	str	r3, [r7, #32]
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	e7fd      	b.n	800d31a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d103      	bne.n	800d32c <xQueueReceiveFromISR+0x3c>
 800d324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d101      	bne.n	800d330 <xQueueReceiveFromISR+0x40>
 800d32c:	2301      	movs	r3, #1
 800d32e:	e000      	b.n	800d332 <xQueueReceiveFromISR+0x42>
 800d330:	2300      	movs	r3, #0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10b      	bne.n	800d34e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	61fb      	str	r3, [r7, #28]
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	e7fd      	b.n	800d34a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d34e:	f002 fe13 	bl	800ff78 <vPortValidateInterruptPriority>
	__asm volatile
 800d352:	f3ef 8211 	mrs	r2, BASEPRI
 800d356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	61ba      	str	r2, [r7, #24]
 800d368:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d36a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d372:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d376:	2b00      	cmp	r3, #0
 800d378:	d02f      	beq.n	800d3da <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d384:	68b9      	ldr	r1, [r7, #8]
 800d386:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d388:	f000 f8b6 	bl	800d4f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	1e5a      	subs	r2, r3, #1
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d394:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39c:	d112      	bne.n	800d3c4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d016      	beq.n	800d3d4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 f9ce 	bl	800e74c <xTaskRemoveFromEventList>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00e      	beq.n	800d3d4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00b      	beq.n	800d3d4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	e007      	b.n	800d3d4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	b25a      	sxtb	r2, r3
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d8:	e001      	b.n	800d3de <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	f383 8811 	msr	BASEPRI, r3
}
 800d3e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3738      	adds	r7, #56	@ 0x38
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d006      	beq.n	800d412 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	e001      	b.n	800d416 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d416:	68fb      	ldr	r3, [r7, #12]
	}
 800d418:	4618      	mov	r0, r3
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d430:	2300      	movs	r3, #0
 800d432:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d438:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d14d      	bne.n	800d4e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f001 fcca 	bl	800ede8 <xTaskPriorityDisinherit>
 800d454:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	609a      	str	r2, [r3, #8]
 800d45c:	e043      	b.n	800d4e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d119      	bne.n	800d498 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6858      	ldr	r0, [r3, #4]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d46c:	461a      	mov	r2, r3
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	f005 f929 	bl	80126c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	685a      	ldr	r2, [r3, #4]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47c:	441a      	add	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d32b      	bcc.n	800d4e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	605a      	str	r2, [r3, #4]
 800d496:	e026      	b.n	800d4e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	68d8      	ldr	r0, [r3, #12]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	f005 f90f 	bl	80126c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b0:	425b      	negs	r3, r3
 800d4b2:	441a      	add	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68da      	ldr	r2, [r3, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d207      	bcs.n	800d4d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4cc:	425b      	negs	r3, r3
 800d4ce:	441a      	add	r2, r3
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d105      	bne.n	800d4e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d4ee:	697b      	ldr	r3, [r7, #20]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d018      	beq.n	800d53c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d512:	441a      	add	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	429a      	cmp	r2, r3
 800d522:	d303      	bcc.n	800d52c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68d9      	ldr	r1, [r3, #12]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d534:	461a      	mov	r2, r3
 800d536:	6838      	ldr	r0, [r7, #0]
 800d538:	f005 f8c5 	bl	80126c6 <memcpy>
	}
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d54c:	f002 fc34 	bl	800fdb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d556:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d558:	e011      	b.n	800d57e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d012      	beq.n	800d588 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3324      	adds	r3, #36	@ 0x24
 800d566:	4618      	mov	r0, r3
 800d568:	f001 f8f0 	bl	800e74c <xTaskRemoveFromEventList>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d572:	f001 fa2d 	bl	800e9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	3b01      	subs	r3, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d582:	2b00      	cmp	r3, #0
 800d584:	dce9      	bgt.n	800d55a <prvUnlockQueue+0x16>
 800d586:	e000      	b.n	800d58a <prvUnlockQueue+0x46>
					break;
 800d588:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	22ff      	movs	r2, #255	@ 0xff
 800d58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d592:	f002 fc43 	bl	800fe1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d596:	f002 fc0f 	bl	800fdb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5a2:	e011      	b.n	800d5c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d012      	beq.n	800d5d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3310      	adds	r3, #16
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f001 f8cb 	bl	800e74c <xTaskRemoveFromEventList>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d001      	beq.n	800d5c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5bc:	f001 fa08 	bl	800e9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5c0:	7bbb      	ldrb	r3, [r7, #14]
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	dce9      	bgt.n	800d5a4 <prvUnlockQueue+0x60>
 800d5d0:	e000      	b.n	800d5d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	22ff      	movs	r2, #255	@ 0xff
 800d5d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d5dc:	f002 fc1e 	bl	800fe1c <vPortExitCritical>
}
 800d5e0:	bf00      	nop
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5f0:	f002 fbe2 	bl	800fdb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	60fb      	str	r3, [r7, #12]
 800d600:	e001      	b.n	800d606 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d602:	2300      	movs	r3, #0
 800d604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d606:	f002 fc09 	bl	800fe1c <vPortExitCritical>

	return xReturn;
 800d60a:	68fb      	ldr	r3, [r7, #12]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d61c:	f002 fbcc 	bl	800fdb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d628:	429a      	cmp	r2, r3
 800d62a:	d102      	bne.n	800d632 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d62c:	2301      	movs	r3, #1
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	e001      	b.n	800d636 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d632:	2300      	movs	r3, #0
 800d634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d636:	f002 fbf1 	bl	800fe1c <vPortExitCritical>

	return xReturn;
 800d63a:	68fb      	ldr	r3, [r7, #12]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d64e:	2300      	movs	r3, #0
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	e014      	b.n	800d67e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d654:	4a0f      	ldr	r2, [pc, #60]	@ (800d694 <vQueueAddToRegistry+0x50>)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10b      	bne.n	800d678 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d660:	490c      	ldr	r1, [pc, #48]	@ (800d694 <vQueueAddToRegistry+0x50>)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	683a      	ldr	r2, [r7, #0]
 800d666:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d66a:	4a0a      	ldr	r2, [pc, #40]	@ (800d694 <vQueueAddToRegistry+0x50>)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	4413      	add	r3, r2
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d676:	e006      	b.n	800d686 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b07      	cmp	r3, #7
 800d682:	d9e7      	bls.n	800d654 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	20000fd0 	.word	0x20000fd0

0800d698 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6a8:	f002 fb86 	bl	800fdb8 <vPortEnterCritical>
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6b2:	b25b      	sxtb	r3, r3
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b8:	d103      	bne.n	800d6c2 <vQueueWaitForMessageRestricted+0x2a>
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6c8:	b25b      	sxtb	r3, r3
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	d103      	bne.n	800d6d8 <vQueueWaitForMessageRestricted+0x40>
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6d8:	f002 fba0 	bl	800fe1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	3324      	adds	r3, #36	@ 0x24
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f001 f801 	bl	800e6f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6f2:	6978      	ldr	r0, [r7, #20]
 800d6f4:	f7ff ff26 	bl	800d544 <prvUnlockQueue>
	}
 800d6f8:	bf00      	nop
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08e      	sub	sp, #56	@ 0x38
 800d704:	af04      	add	r7, sp, #16
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10b      	bne.n	800d72c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	623b      	str	r3, [r7, #32]
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	61fb      	str	r3, [r7, #28]
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d74a:	23a8      	movs	r3, #168	@ 0xa8
 800d74c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	2ba8      	cmp	r3, #168	@ 0xa8
 800d752:	d00b      	beq.n	800d76c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	61bb      	str	r3, [r7, #24]
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	e7fd      	b.n	800d768 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d76c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	2b00      	cmp	r3, #0
 800d772:	d01e      	beq.n	800d7b2 <xTaskCreateStatic+0xb2>
 800d774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d776:	2b00      	cmp	r3, #0
 800d778:	d01b      	beq.n	800d7b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d782:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d786:	2202      	movs	r2, #2
 800d788:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d78c:	2300      	movs	r3, #0
 800d78e:	9303      	str	r3, [sp, #12]
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	9302      	str	r3, [sp, #8]
 800d794:	f107 0314 	add.w	r3, r7, #20
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f851 	bl	800d84c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7ac:	f000 f8f6 	bl	800d99c <prvAddNewTaskToReadyList>
 800d7b0:	e001      	b.n	800d7b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7b6:	697b      	ldr	r3, [r7, #20]
	}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3728      	adds	r7, #40	@ 0x28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08c      	sub	sp, #48	@ 0x30
 800d7c4:	af04      	add	r7, sp, #16
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	603b      	str	r3, [r7, #0]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f002 fc11 	bl	800fffc <pvPortMalloc>
 800d7da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00e      	beq.n	800d800 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7e2:	20a8      	movs	r0, #168	@ 0xa8
 800d7e4:	f002 fc0a 	bl	800fffc <pvPortMalloc>
 800d7e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7f6:	e005      	b.n	800d804 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7f8:	6978      	ldr	r0, [r7, #20]
 800d7fa:	f002 fccd 	bl	8010198 <vPortFree>
 800d7fe:	e001      	b.n	800d804 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d017      	beq.n	800d83a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d812:	88fa      	ldrh	r2, [r7, #6]
 800d814:	2300      	movs	r3, #0
 800d816:	9303      	str	r3, [sp, #12]
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	9302      	str	r3, [sp, #8]
 800d81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f80f 	bl	800d84c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d82e:	69f8      	ldr	r0, [r7, #28]
 800d830:	f000 f8b4 	bl	800d99c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d834:	2301      	movs	r3, #1
 800d836:	61bb      	str	r3, [r7, #24]
 800d838:	e002      	b.n	800d840 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295
 800d83e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d840:	69bb      	ldr	r3, [r7, #24]
	}
 800d842:	4618      	mov	r0, r3
 800d844:	3720      	adds	r7, #32
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
	...

0800d84c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	461a      	mov	r2, r3
 800d864:	21a5      	movs	r1, #165	@ 0xa5
 800d866:	f004 fdc5 	bl	80123f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d874:	3b01      	subs	r3, #1
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	f023 0307 	bic.w	r3, r3, #7
 800d882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00b      	beq.n	800d8a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	617b      	str	r3, [r7, #20]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01f      	beq.n	800d8ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	61fb      	str	r3, [r7, #28]
 800d8b0:	e012      	b.n	800d8d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	7819      	ldrb	r1, [r3, #0]
 800d8ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4413      	add	r3, r2
 800d8c0:	3334      	adds	r3, #52	@ 0x34
 800d8c2:	460a      	mov	r2, r1
 800d8c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d006      	beq.n	800d8e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	2b0f      	cmp	r3, #15
 800d8dc:	d9e9      	bls.n	800d8b2 <prvInitialiseNewTask+0x66>
 800d8de:	e000      	b.n	800d8e2 <prvInitialiseNewTask+0x96>
			{
				break;
 800d8e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8ea:	e003      	b.n	800d8f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	2b37      	cmp	r3, #55	@ 0x37
 800d8f8:	d901      	bls.n	800d8fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8fa:	2337      	movs	r3, #55	@ 0x37
 800d8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d902:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d908:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90c:	2200      	movs	r2, #0
 800d90e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d912:	3304      	adds	r3, #4
 800d914:	4618      	mov	r0, r3
 800d916:	f7fe ff4d 	bl	800c7b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91c:	3318      	adds	r3, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe ff48 	bl	800c7b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d938:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	2200      	movs	r2, #0
 800d93e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	2200      	movs	r2, #0
 800d946:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	3354      	adds	r3, #84	@ 0x54
 800d94e:	224c      	movs	r2, #76	@ 0x4c
 800d950:	2100      	movs	r1, #0
 800d952:	4618      	mov	r0, r3
 800d954:	f004 fd4e 	bl	80123f4 <memset>
 800d958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95a:	4a0d      	ldr	r2, [pc, #52]	@ (800d990 <prvInitialiseNewTask+0x144>)
 800d95c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d960:	4a0c      	ldr	r2, [pc, #48]	@ (800d994 <prvInitialiseNewTask+0x148>)
 800d962:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d966:	4a0c      	ldr	r2, [pc, #48]	@ (800d998 <prvInitialiseNewTask+0x14c>)
 800d968:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	68f9      	ldr	r1, [r7, #12]
 800d96e:	69b8      	ldr	r0, [r7, #24]
 800d970:	f002 f8f4 	bl	800fb5c <pxPortInitialiseStack>
 800d974:	4602      	mov	r2, r0
 800d976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d986:	bf00      	nop
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	20005958 	.word	0x20005958
 800d994:	200059c0 	.word	0x200059c0
 800d998:	20005a28 	.word	0x20005a28

0800d99c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9a4:	f002 fa08 	bl	800fdb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9a8:	4b2d      	ldr	r3, [pc, #180]	@ (800da60 <prvAddNewTaskToReadyList+0xc4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	4a2c      	ldr	r2, [pc, #176]	@ (800da60 <prvAddNewTaskToReadyList+0xc4>)
 800d9b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9b2:	4b2c      	ldr	r3, [pc, #176]	@ (800da64 <prvAddNewTaskToReadyList+0xc8>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d109      	bne.n	800d9ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9ba:	4a2a      	ldr	r2, [pc, #168]	@ (800da64 <prvAddNewTaskToReadyList+0xc8>)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9c0:	4b27      	ldr	r3, [pc, #156]	@ (800da60 <prvAddNewTaskToReadyList+0xc4>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d110      	bne.n	800d9ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9c8:	f001 f826 	bl	800ea18 <prvInitialiseTaskLists>
 800d9cc:	e00d      	b.n	800d9ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9ce:	4b26      	ldr	r3, [pc, #152]	@ (800da68 <prvAddNewTaskToReadyList+0xcc>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d109      	bne.n	800d9ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9d6:	4b23      	ldr	r3, [pc, #140]	@ (800da64 <prvAddNewTaskToReadyList+0xc8>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d802      	bhi.n	800d9ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9e4:	4a1f      	ldr	r2, [pc, #124]	@ (800da64 <prvAddNewTaskToReadyList+0xc8>)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9ea:	4b20      	ldr	r3, [pc, #128]	@ (800da6c <prvAddNewTaskToReadyList+0xd0>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	4a1e      	ldr	r2, [pc, #120]	@ (800da6c <prvAddNewTaskToReadyList+0xd0>)
 800d9f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9f4:	4b1d      	ldr	r3, [pc, #116]	@ (800da6c <prvAddNewTaskToReadyList+0xd0>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da00:	4b1b      	ldr	r3, [pc, #108]	@ (800da70 <prvAddNewTaskToReadyList+0xd4>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	429a      	cmp	r2, r3
 800da06:	d903      	bls.n	800da10 <prvAddNewTaskToReadyList+0x74>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da0c:	4a18      	ldr	r2, [pc, #96]	@ (800da70 <prvAddNewTaskToReadyList+0xd4>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4a15      	ldr	r2, [pc, #84]	@ (800da74 <prvAddNewTaskToReadyList+0xd8>)
 800da1e:	441a      	add	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3304      	adds	r3, #4
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7fe fed1 	bl	800c7ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da2c:	f002 f9f6 	bl	800fe1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da30:	4b0d      	ldr	r3, [pc, #52]	@ (800da68 <prvAddNewTaskToReadyList+0xcc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00e      	beq.n	800da56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da38:	4b0a      	ldr	r3, [pc, #40]	@ (800da64 <prvAddNewTaskToReadyList+0xc8>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da42:	429a      	cmp	r2, r3
 800da44:	d207      	bcs.n	800da56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da46:	4b0c      	ldr	r3, [pc, #48]	@ (800da78 <prvAddNewTaskToReadyList+0xdc>)
 800da48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da56:	bf00      	nop
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200014e4 	.word	0x200014e4
 800da64:	20001010 	.word	0x20001010
 800da68:	200014f0 	.word	0x200014f0
 800da6c:	20001500 	.word	0x20001500
 800da70:	200014ec 	.word	0x200014ec
 800da74:	20001014 	.word	0x20001014
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da84:	f002 f998 	bl	800fdb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d102      	bne.n	800da94 <vTaskDelete+0x18>
 800da8e:	4b2d      	ldr	r3, [pc, #180]	@ (800db44 <vTaskDelete+0xc8>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	e000      	b.n	800da96 <vTaskDelete+0x1a>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fef3 	bl	800c888 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d004      	beq.n	800dab4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3318      	adds	r3, #24
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe feea 	bl	800c888 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dab4:	4b24      	ldr	r3, [pc, #144]	@ (800db48 <vTaskDelete+0xcc>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3301      	adds	r3, #1
 800daba:	4a23      	ldr	r2, [pc, #140]	@ (800db48 <vTaskDelete+0xcc>)
 800dabc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dabe:	4b21      	ldr	r3, [pc, #132]	@ (800db44 <vTaskDelete+0xc8>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d10b      	bne.n	800dae0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3304      	adds	r3, #4
 800dacc:	4619      	mov	r1, r3
 800dace:	481f      	ldr	r0, [pc, #124]	@ (800db4c <vTaskDelete+0xd0>)
 800dad0:	f7fe fe7d 	bl	800c7ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dad4:	4b1e      	ldr	r3, [pc, #120]	@ (800db50 <vTaskDelete+0xd4>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	4a1d      	ldr	r2, [pc, #116]	@ (800db50 <vTaskDelete+0xd4>)
 800dadc:	6013      	str	r3, [r2, #0]
 800dade:	e009      	b.n	800daf4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800dae0:	4b1c      	ldr	r3, [pc, #112]	@ (800db54 <vTaskDelete+0xd8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	4a1b      	ldr	r2, [pc, #108]	@ (800db54 <vTaskDelete+0xd8>)
 800dae8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f001 f8a0 	bl	800ec30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800daf0:	f001 f8d4 	bl	800ec9c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800daf4:	f002 f992 	bl	800fe1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800daf8:	4b17      	ldr	r3, [pc, #92]	@ (800db58 <vTaskDelete+0xdc>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01c      	beq.n	800db3a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800db00:	4b10      	ldr	r3, [pc, #64]	@ (800db44 <vTaskDelete+0xc8>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	429a      	cmp	r2, r3
 800db08:	d117      	bne.n	800db3a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800db0a:	4b14      	ldr	r3, [pc, #80]	@ (800db5c <vTaskDelete+0xe0>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00b      	beq.n	800db2a <vTaskDelete+0xae>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60bb      	str	r3, [r7, #8]
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	e7fd      	b.n	800db26 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800db2a:	4b0d      	ldr	r3, [pc, #52]	@ (800db60 <vTaskDelete+0xe4>)
 800db2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db30:	601a      	str	r2, [r3, #0]
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	20001010 	.word	0x20001010
 800db48:	20001500 	.word	0x20001500
 800db4c:	200014b8 	.word	0x200014b8
 800db50:	200014cc 	.word	0x200014cc
 800db54:	200014e4 	.word	0x200014e4
 800db58:	200014f0 	.word	0x200014f0
 800db5c:	2000150c 	.word	0x2000150c
 800db60:	e000ed04 	.word	0xe000ed04

0800db64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d018      	beq.n	800dba8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db76:	4b14      	ldr	r3, [pc, #80]	@ (800dbc8 <vTaskDelay+0x64>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00b      	beq.n	800db96 <vTaskDelay+0x32>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	60bb      	str	r3, [r7, #8]
}
 800db90:	bf00      	nop
 800db92:	bf00      	nop
 800db94:	e7fd      	b.n	800db92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db96:	f000 fa99 	bl	800e0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db9a:	2100      	movs	r1, #0
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f001 fbb1 	bl	800f304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dba2:	f000 faa1 	bl	800e0e8 <xTaskResumeAll>
 800dba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d107      	bne.n	800dbbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dbae:	4b07      	ldr	r3, [pc, #28]	@ (800dbcc <vTaskDelay+0x68>)
 800dbb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbbe:	bf00      	nop
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	2000150c 	.word	0x2000150c
 800dbcc:	e000ed04 	.word	0xe000ed04

0800dbd0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10b      	bne.n	800dbfa <eTaskGetState+0x2a>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	60bb      	str	r3, [r7, #8]
}
 800dbf4:	bf00      	nop
 800dbf6:	bf00      	nop
 800dbf8:	e7fd      	b.n	800dbf6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800dbfa:	4b24      	ldr	r3, [pc, #144]	@ (800dc8c <eTaskGetState+0xbc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	69ba      	ldr	r2, [r7, #24]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d102      	bne.n	800dc0a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800dc04:	2300      	movs	r3, #0
 800dc06:	77fb      	strb	r3, [r7, #31]
 800dc08:	e03a      	b.n	800dc80 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800dc0a:	f002 f8d5 	bl	800fdb8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800dc14:	4b1e      	ldr	r3, [pc, #120]	@ (800dc90 <eTaskGetState+0xc0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800dc1a:	4b1e      	ldr	r3, [pc, #120]	@ (800dc94 <eTaskGetState+0xc4>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800dc20:	f002 f8fc 	bl	800fe1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d003      	beq.n	800dc34 <eTaskGetState+0x64>
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d102      	bne.n	800dc3a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800dc34:	2302      	movs	r3, #2
 800dc36:	77fb      	strb	r3, [r7, #31]
 800dc38:	e022      	b.n	800dc80 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	4a16      	ldr	r2, [pc, #88]	@ (800dc98 <eTaskGetState+0xc8>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d112      	bne.n	800dc68 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10b      	bne.n	800dc62 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d102      	bne.n	800dc5c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800dc56:	2302      	movs	r3, #2
 800dc58:	77fb      	strb	r3, [r7, #31]
 800dc5a:	e011      	b.n	800dc80 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	77fb      	strb	r3, [r7, #31]
 800dc60:	e00e      	b.n	800dc80 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dc62:	2302      	movs	r3, #2
 800dc64:	77fb      	strb	r3, [r7, #31]
 800dc66:	e00b      	b.n	800dc80 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc9c <eTaskGetState+0xcc>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d002      	beq.n	800dc76 <eTaskGetState+0xa6>
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d102      	bne.n	800dc7c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dc76:	2304      	movs	r3, #4
 800dc78:	77fb      	strb	r3, [r7, #31]
 800dc7a:	e001      	b.n	800dc80 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dc80:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20001010 	.word	0x20001010
 800dc90:	2000149c 	.word	0x2000149c
 800dc94:	200014a0 	.word	0x200014a0
 800dc98:	200014d0 	.word	0x200014d0
 800dc9c:	200014b8 	.word	0x200014b8

0800dca0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b37      	cmp	r3, #55	@ 0x37
 800dcb2:	d90b      	bls.n	800dccc <vTaskPrioritySet+0x2c>
	__asm volatile
 800dcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb8:	f383 8811 	msr	BASEPRI, r3
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	60fb      	str	r3, [r7, #12]
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	e7fd      	b.n	800dcc8 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2b37      	cmp	r3, #55	@ 0x37
 800dcd0:	d901      	bls.n	800dcd6 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcd2:	2337      	movs	r3, #55	@ 0x37
 800dcd4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dcd6:	f002 f86f 	bl	800fdb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d102      	bne.n	800dce6 <vTaskPrioritySet+0x46>
 800dce0:	4b3a      	ldr	r3, [pc, #232]	@ (800ddcc <vTaskPrioritySet+0x12c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	e000      	b.n	800dce8 <vTaskPrioritySet+0x48>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcee:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d063      	beq.n	800ddc0 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d90d      	bls.n	800dd1c <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dd00:	4b32      	ldr	r3, [pc, #200]	@ (800ddcc <vTaskPrioritySet+0x12c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d00f      	beq.n	800dd2a <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dd0a:	4b30      	ldr	r3, [pc, #192]	@ (800ddcc <vTaskPrioritySet+0x12c>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d309      	bcc.n	800dd2a <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dd16:	2301      	movs	r3, #1
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	e006      	b.n	800dd2a <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dd1c:	4b2b      	ldr	r3, [pc, #172]	@ (800ddcc <vTaskPrioritySet+0x12c>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	69ba      	ldr	r2, [r7, #24]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d101      	bne.n	800dd2a <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dd26:	2301      	movs	r3, #1
 800dd28:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd2e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d102      	bne.n	800dd42 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	699b      	ldr	r3, [r3, #24]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	db04      	blt.n	800dd5a <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	6959      	ldr	r1, [r3, #20]
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	4613      	mov	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4413      	add	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4a19      	ldr	r2, [pc, #100]	@ (800ddd0 <vTaskPrioritySet+0x130>)
 800dd6a:	4413      	add	r3, r2
 800dd6c:	4299      	cmp	r1, r3
 800dd6e:	d11c      	bne.n	800ddaa <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	3304      	adds	r3, #4
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fd87 	bl	800c888 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7e:	4b15      	ldr	r3, [pc, #84]	@ (800ddd4 <vTaskPrioritySet+0x134>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d903      	bls.n	800dd8e <vTaskPrioritySet+0xee>
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd8a:	4a12      	ldr	r2, [pc, #72]	@ (800ddd4 <vTaskPrioritySet+0x134>)
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd92:	4613      	mov	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4a0d      	ldr	r2, [pc, #52]	@ (800ddd0 <vTaskPrioritySet+0x130>)
 800dd9c:	441a      	add	r2, r3
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	3304      	adds	r3, #4
 800dda2:	4619      	mov	r1, r3
 800dda4:	4610      	mov	r0, r2
 800dda6:	f7fe fd12 	bl	800c7ce <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d007      	beq.n	800ddc0 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800ddb0:	4b09      	ldr	r3, [pc, #36]	@ (800ddd8 <vTaskPrioritySet+0x138>)
 800ddb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddb6:	601a      	str	r2, [r3, #0]
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800ddc0:	f002 f82c 	bl	800fe1c <vPortExitCritical>
	}
 800ddc4:	bf00      	nop
 800ddc6:	3720      	adds	r7, #32
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20001010 	.word	0x20001010
 800ddd0:	20001014 	.word	0x20001014
 800ddd4:	200014ec 	.word	0x200014ec
 800ddd8:	e000ed04 	.word	0xe000ed04

0800dddc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dde4:	f001 ffe8 	bl	800fdb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <vTaskSuspend+0x18>
 800ddee:	4b30      	ldr	r3, [pc, #192]	@ (800deb0 <vTaskSuspend+0xd4>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	e000      	b.n	800ddf6 <vTaskSuspend+0x1a>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe fd43 	bl	800c888 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de06:	2b00      	cmp	r3, #0
 800de08:	d004      	beq.n	800de14 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3318      	adds	r3, #24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fd3a 	bl	800c888 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4826      	ldr	r0, [pc, #152]	@ (800deb4 <vTaskSuspend+0xd8>)
 800de1c:	f7fe fcd7 	bl	800c7ce <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d103      	bne.n	800de34 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800de34:	f001 fff2 	bl	800fe1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800de38:	4b1f      	ldr	r3, [pc, #124]	@ (800deb8 <vTaskSuspend+0xdc>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800de40:	f001 ffba 	bl	800fdb8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800de44:	f000 ff2a 	bl	800ec9c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800de48:	f001 ffe8 	bl	800fe1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800de4c:	4b18      	ldr	r3, [pc, #96]	@ (800deb0 <vTaskSuspend+0xd4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	429a      	cmp	r2, r3
 800de54:	d128      	bne.n	800dea8 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800de56:	4b18      	ldr	r3, [pc, #96]	@ (800deb8 <vTaskSuspend+0xdc>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d018      	beq.n	800de90 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800de5e:	4b17      	ldr	r3, [pc, #92]	@ (800debc <vTaskSuspend+0xe0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00b      	beq.n	800de7e <vTaskSuspend+0xa2>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	60bb      	str	r3, [r7, #8]
}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	e7fd      	b.n	800de7a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800de7e:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <vTaskSuspend+0xe4>)
 800de80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de8e:	e00b      	b.n	800dea8 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800de90:	4b08      	ldr	r3, [pc, #32]	@ (800deb4 <vTaskSuspend+0xd8>)
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	4b0b      	ldr	r3, [pc, #44]	@ (800dec4 <vTaskSuspend+0xe8>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d103      	bne.n	800dea4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800de9c:	4b04      	ldr	r3, [pc, #16]	@ (800deb0 <vTaskSuspend+0xd4>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
	}
 800dea2:	e001      	b.n	800dea8 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800dea4:	f000 fb5c 	bl	800e560 <vTaskSwitchContext>
	}
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20001010 	.word	0x20001010
 800deb4:	200014d0 	.word	0x200014d0
 800deb8:	200014f0 	.word	0x200014f0
 800debc:	2000150c 	.word	0x2000150c
 800dec0:	e000ed04 	.word	0xe000ed04
 800dec4:	200014e4 	.word	0x200014e4

0800dec8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ded0:	2300      	movs	r3, #0
 800ded2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10b      	bne.n	800def6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	60fb      	str	r3, [r7, #12]
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	e7fd      	b.n	800def2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	4a0a      	ldr	r2, [pc, #40]	@ (800df24 <prvTaskIsTaskSuspended+0x5c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d10a      	bne.n	800df16 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df04:	4a08      	ldr	r2, [pc, #32]	@ (800df28 <prvTaskIsTaskSuspended+0x60>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d005      	beq.n	800df16 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d101      	bne.n	800df16 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800df12:	2301      	movs	r3, #1
 800df14:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df16:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800df18:	4618      	mov	r0, r3
 800df1a:	371c      	adds	r7, #28
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	200014d0 	.word	0x200014d0
 800df28:	200014a4 	.word	0x200014a4

0800df2c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10b      	bne.n	800df56 <vTaskResume+0x2a>
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	60bb      	str	r3, [r7, #8]
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	e7fd      	b.n	800df52 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800df56:	4b21      	ldr	r3, [pc, #132]	@ (800dfdc <vTaskResume+0xb0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d038      	beq.n	800dfd2 <vTaskResume+0xa6>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d035      	beq.n	800dfd2 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800df66:	f001 ff27 	bl	800fdb8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff ffac 	bl	800dec8 <prvTaskIsTaskSuspended>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d02b      	beq.n	800dfce <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3304      	adds	r3, #4
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fc84 	bl	800c888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df84:	4b16      	ldr	r3, [pc, #88]	@ (800dfe0 <vTaskResume+0xb4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d903      	bls.n	800df94 <vTaskResume+0x68>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df90:	4a13      	ldr	r2, [pc, #76]	@ (800dfe0 <vTaskResume+0xb4>)
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df98:	4613      	mov	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4a10      	ldr	r2, [pc, #64]	@ (800dfe4 <vTaskResume+0xb8>)
 800dfa2:	441a      	add	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4610      	mov	r0, r2
 800dfac:	f7fe fc0f 	bl	800c7ce <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb4:	4b09      	ldr	r3, [pc, #36]	@ (800dfdc <vTaskResume+0xb0>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d307      	bcc.n	800dfce <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe8 <vTaskResume+0xbc>)
 800dfc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dfce:	f001 ff25 	bl	800fe1c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfd2:	bf00      	nop
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20001010 	.word	0x20001010
 800dfe0:	200014ec 	.word	0x200014ec
 800dfe4:	20001014 	.word	0x20001014
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08a      	sub	sp, #40	@ 0x28
 800dff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dffa:	463a      	mov	r2, r7
 800dffc:	1d39      	adds	r1, r7, #4
 800dffe:	f107 0308 	add.w	r3, r7, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe f9c6 	bl	800c394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	9202      	str	r2, [sp, #8]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	2300      	movs	r3, #0
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	2300      	movs	r3, #0
 800e018:	460a      	mov	r2, r1
 800e01a:	4924      	ldr	r1, [pc, #144]	@ (800e0ac <vTaskStartScheduler+0xc0>)
 800e01c:	4824      	ldr	r0, [pc, #144]	@ (800e0b0 <vTaskStartScheduler+0xc4>)
 800e01e:	f7ff fb6f 	bl	800d700 <xTaskCreateStatic>
 800e022:	4603      	mov	r3, r0
 800e024:	4a23      	ldr	r2, [pc, #140]	@ (800e0b4 <vTaskStartScheduler+0xc8>)
 800e026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e028:	4b22      	ldr	r3, [pc, #136]	@ (800e0b4 <vTaskStartScheduler+0xc8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e030:	2301      	movs	r3, #1
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e001      	b.n	800e03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d102      	bne.n	800e046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e040:	f001 f9b4 	bl	800f3ac <xTimerCreateTimerTask>
 800e044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d11b      	bne.n	800e084 <vTaskStartScheduler+0x98>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	613b      	str	r3, [r7, #16]
}
 800e05e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e060:	4b15      	ldr	r3, [pc, #84]	@ (800e0b8 <vTaskStartScheduler+0xcc>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3354      	adds	r3, #84	@ 0x54
 800e066:	4a15      	ldr	r2, [pc, #84]	@ (800e0bc <vTaskStartScheduler+0xd0>)
 800e068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e06a:	4b15      	ldr	r3, [pc, #84]	@ (800e0c0 <vTaskStartScheduler+0xd4>)
 800e06c:	f04f 32ff 	mov.w	r2, #4294967295
 800e070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e072:	4b14      	ldr	r3, [pc, #80]	@ (800e0c4 <vTaskStartScheduler+0xd8>)
 800e074:	2201      	movs	r2, #1
 800e076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e078:	4b13      	ldr	r3, [pc, #76]	@ (800e0c8 <vTaskStartScheduler+0xdc>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e07e:	f001 fdf7 	bl	800fc70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e082:	e00f      	b.n	800e0a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08a:	d10b      	bne.n	800e0a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	60fb      	str	r3, [r7, #12]
}
 800e09e:	bf00      	nop
 800e0a0:	bf00      	nop
 800e0a2:	e7fd      	b.n	800e0a0 <vTaskStartScheduler+0xb4>
}
 800e0a4:	bf00      	nop
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	08015840 	.word	0x08015840
 800e0b0:	0800e9e9 	.word	0x0800e9e9
 800e0b4:	20001508 	.word	0x20001508
 800e0b8:	20001010 	.word	0x20001010
 800e0bc:	200003d4 	.word	0x200003d4
 800e0c0:	20001504 	.word	0x20001504
 800e0c4:	200014f0 	.word	0x200014f0
 800e0c8:	200014e8 	.word	0x200014e8

0800e0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0d0:	4b04      	ldr	r3, [pc, #16]	@ (800e0e4 <vTaskSuspendAll+0x18>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	4a03      	ldr	r2, [pc, #12]	@ (800e0e4 <vTaskSuspendAll+0x18>)
 800e0d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0da:	bf00      	nop
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr
 800e0e4:	2000150c 	.word	0x2000150c

0800e0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0f6:	4b42      	ldr	r3, [pc, #264]	@ (800e200 <xTaskResumeAll+0x118>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10b      	bne.n	800e116 <xTaskResumeAll+0x2e>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	603b      	str	r3, [r7, #0]
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	e7fd      	b.n	800e112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e116:	f001 fe4f 	bl	800fdb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e11a:	4b39      	ldr	r3, [pc, #228]	@ (800e200 <xTaskResumeAll+0x118>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3b01      	subs	r3, #1
 800e120:	4a37      	ldr	r2, [pc, #220]	@ (800e200 <xTaskResumeAll+0x118>)
 800e122:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e124:	4b36      	ldr	r3, [pc, #216]	@ (800e200 <xTaskResumeAll+0x118>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d162      	bne.n	800e1f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e12c:	4b35      	ldr	r3, [pc, #212]	@ (800e204 <xTaskResumeAll+0x11c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d05e      	beq.n	800e1f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e134:	e02f      	b.n	800e196 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e136:	4b34      	ldr	r3, [pc, #208]	@ (800e208 <xTaskResumeAll+0x120>)
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3318      	adds	r3, #24
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fba0 	bl	800c888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fb9b 	bl	800c888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e156:	4b2d      	ldr	r3, [pc, #180]	@ (800e20c <xTaskResumeAll+0x124>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d903      	bls.n	800e166 <xTaskResumeAll+0x7e>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e162:	4a2a      	ldr	r2, [pc, #168]	@ (800e20c <xTaskResumeAll+0x124>)
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16a:	4613      	mov	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4a27      	ldr	r2, [pc, #156]	@ (800e210 <xTaskResumeAll+0x128>)
 800e174:	441a      	add	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	3304      	adds	r3, #4
 800e17a:	4619      	mov	r1, r3
 800e17c:	4610      	mov	r0, r2
 800e17e:	f7fe fb26 	bl	800c7ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e186:	4b23      	ldr	r3, [pc, #140]	@ (800e214 <xTaskResumeAll+0x12c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d302      	bcc.n	800e196 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e190:	4b21      	ldr	r3, [pc, #132]	@ (800e218 <xTaskResumeAll+0x130>)
 800e192:	2201      	movs	r2, #1
 800e194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e196:	4b1c      	ldr	r3, [pc, #112]	@ (800e208 <xTaskResumeAll+0x120>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1cb      	bne.n	800e136 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d001      	beq.n	800e1a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1a4:	f000 fd7a 	bl	800ec9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e21c <xTaskResumeAll+0x134>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d010      	beq.n	800e1d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1b4:	f000 f91a 	bl	800e3ec <xTaskIncrementTick>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e1be:	4b16      	ldr	r3, [pc, #88]	@ (800e218 <xTaskResumeAll+0x130>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1f1      	bne.n	800e1b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e1d0:	4b12      	ldr	r3, [pc, #72]	@ (800e21c <xTaskResumeAll+0x134>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1d6:	4b10      	ldr	r3, [pc, #64]	@ (800e218 <xTaskResumeAll+0x130>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e220 <xTaskResumeAll+0x138>)
 800e1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1f2:	f001 fe13 	bl	800fe1c <vPortExitCritical>

	return xAlreadyYielded;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	2000150c 	.word	0x2000150c
 800e204:	200014e4 	.word	0x200014e4
 800e208:	200014a4 	.word	0x200014a4
 800e20c:	200014ec 	.word	0x200014ec
 800e210:	20001014 	.word	0x20001014
 800e214:	20001010 	.word	0x20001010
 800e218:	200014f8 	.word	0x200014f8
 800e21c:	200014f4 	.word	0x200014f4
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e22a:	4b05      	ldr	r3, [pc, #20]	@ (800e240 <xTaskGetTickCount+0x1c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e230:	687b      	ldr	r3, [r7, #4]
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	200014e8 	.word	0x200014e8

0800e244 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e244:	b480      	push	{r7}
 800e246:	b08b      	sub	sp, #44	@ 0x2c
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d05b      	beq.n	800e312 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	61bb      	str	r3, [r7, #24]
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	605a      	str	r2, [r3, #4]
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	3308      	adds	r3, #8
 800e270:	429a      	cmp	r2, r3
 800e272:	d104      	bne.n	800e27e <prvSearchForNameWithinSingleList+0x3a>
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	605a      	str	r2, [r3, #4]
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	613b      	str	r3, [r7, #16]
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	605a      	str	r2, [r3, #4]
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	3308      	adds	r3, #8
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d104      	bne.n	800e2aa <prvSearchForNameWithinSingleList+0x66>
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	605a      	str	r2, [r3, #4]
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	623b      	str	r3, [r7, #32]
 800e2ba:	e01c      	b.n	800e2f6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	3334      	adds	r3, #52	@ 0x34
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	6a3b      	ldr	r3, [r7, #32]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	7afa      	ldrb	r2, [r7, #11]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d002      	beq.n	800e2dc <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	61fb      	str	r3, [r7, #28]
 800e2da:	e006      	b.n	800e2ea <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e2dc:	7afb      	ldrb	r3, [r7, #11]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d103      	bne.n	800e2ea <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d106      	bne.n	800e2fe <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	623b      	str	r3, [r7, #32]
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	2b0f      	cmp	r3, #15
 800e2fa:	d9df      	bls.n	800e2bc <prvSearchForNameWithinSingleList+0x78>
 800e2fc:	e000      	b.n	800e300 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e2fe:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d104      	bne.n	800e310 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d1bb      	bne.n	800e286 <prvSearchForNameWithinSingleList+0x42>
 800e30e:	e000      	b.n	800e312 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e310:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e314:	4618      	mov	r0, r3
 800e316:	372c      	adds	r7, #44	@ 0x2c
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e328:	2338      	movs	r3, #56	@ 0x38
 800e32a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7f1 ff9f 	bl	8000270 <strlen>
 800e332:	4603      	mov	r3, r0
 800e334:	2b0f      	cmp	r3, #15
 800e336:	d90b      	bls.n	800e350 <xTaskGetHandle+0x30>
	__asm volatile
 800e338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33c:	f383 8811 	msr	BASEPRI, r3
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	60fb      	str	r3, [r7, #12]
}
 800e34a:	bf00      	nop
 800e34c:	bf00      	nop
 800e34e:	e7fd      	b.n	800e34c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e350:	f7ff febc 	bl	800e0cc <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	3b01      	subs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d8 <xTaskGetHandle+0xb8>)
 800e366:	4413      	add	r3, r2
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff ff6a 	bl	800e244 <prvSearchForNameWithinSingleList>
 800e370:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d103      	bne.n	800e380 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1ea      	bne.n	800e354 <xTaskGetHandle+0x34>
 800e37e:	e000      	b.n	800e382 <xTaskGetHandle+0x62>
					break;
 800e380:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d106      	bne.n	800e396 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e388:	4b14      	ldr	r3, [pc, #80]	@ (800e3dc <xTaskGetHandle+0xbc>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7ff ff58 	bl	800e244 <prvSearchForNameWithinSingleList>
 800e394:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d106      	bne.n	800e3aa <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e39c:	4b10      	ldr	r3, [pc, #64]	@ (800e3e0 <xTaskGetHandle+0xc0>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6879      	ldr	r1, [r7, #4]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff ff4e 	bl	800e244 <prvSearchForNameWithinSingleList>
 800e3a8:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d104      	bne.n	800e3ba <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	480c      	ldr	r0, [pc, #48]	@ (800e3e4 <xTaskGetHandle+0xc4>)
 800e3b4:	f7ff ff46 	bl	800e244 <prvSearchForNameWithinSingleList>
 800e3b8:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d104      	bne.n	800e3ca <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e3c0:	6879      	ldr	r1, [r7, #4]
 800e3c2:	4809      	ldr	r0, [pc, #36]	@ (800e3e8 <xTaskGetHandle+0xc8>)
 800e3c4:	f7ff ff3e 	bl	800e244 <prvSearchForNameWithinSingleList>
 800e3c8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e3ca:	f7ff fe8d 	bl	800e0e8 <xTaskResumeAll>

		return pxTCB;
 800e3ce:	693b      	ldr	r3, [r7, #16]
	}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	20001014 	.word	0x20001014
 800e3dc:	2000149c 	.word	0x2000149c
 800e3e0:	200014a0 	.word	0x200014a0
 800e3e4:	200014d0 	.word	0x200014d0
 800e3e8:	200014b8 	.word	0x200014b8

0800e3ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3f6:	4b4f      	ldr	r3, [pc, #316]	@ (800e534 <xTaskIncrementTick+0x148>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f040 8090 	bne.w	800e520 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e400:	4b4d      	ldr	r3, [pc, #308]	@ (800e538 <xTaskIncrementTick+0x14c>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3301      	adds	r3, #1
 800e406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e408:	4a4b      	ldr	r2, [pc, #300]	@ (800e538 <xTaskIncrementTick+0x14c>)
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d121      	bne.n	800e458 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e414:	4b49      	ldr	r3, [pc, #292]	@ (800e53c <xTaskIncrementTick+0x150>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00b      	beq.n	800e436 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	603b      	str	r3, [r7, #0]
}
 800e430:	bf00      	nop
 800e432:	bf00      	nop
 800e434:	e7fd      	b.n	800e432 <xTaskIncrementTick+0x46>
 800e436:	4b41      	ldr	r3, [pc, #260]	@ (800e53c <xTaskIncrementTick+0x150>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	60fb      	str	r3, [r7, #12]
 800e43c:	4b40      	ldr	r3, [pc, #256]	@ (800e540 <xTaskIncrementTick+0x154>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a3e      	ldr	r2, [pc, #248]	@ (800e53c <xTaskIncrementTick+0x150>)
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	4a3e      	ldr	r2, [pc, #248]	@ (800e540 <xTaskIncrementTick+0x154>)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6013      	str	r3, [r2, #0]
 800e44a:	4b3e      	ldr	r3, [pc, #248]	@ (800e544 <xTaskIncrementTick+0x158>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3301      	adds	r3, #1
 800e450:	4a3c      	ldr	r2, [pc, #240]	@ (800e544 <xTaskIncrementTick+0x158>)
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	f000 fc22 	bl	800ec9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e458:	4b3b      	ldr	r3, [pc, #236]	@ (800e548 <xTaskIncrementTick+0x15c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d349      	bcc.n	800e4f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e462:	4b36      	ldr	r3, [pc, #216]	@ (800e53c <xTaskIncrementTick+0x150>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d104      	bne.n	800e476 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e46c:	4b36      	ldr	r3, [pc, #216]	@ (800e548 <xTaskIncrementTick+0x15c>)
 800e46e:	f04f 32ff 	mov.w	r2, #4294967295
 800e472:	601a      	str	r2, [r3, #0]
					break;
 800e474:	e03f      	b.n	800e4f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e476:	4b31      	ldr	r3, [pc, #196]	@ (800e53c <xTaskIncrementTick+0x150>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d203      	bcs.n	800e496 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e48e:	4a2e      	ldr	r2, [pc, #184]	@ (800e548 <xTaskIncrementTick+0x15c>)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e494:	e02f      	b.n	800e4f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	3304      	adds	r3, #4
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe f9f4 	bl	800c888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	3318      	adds	r3, #24
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe f9eb 	bl	800c888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b6:	4b25      	ldr	r3, [pc, #148]	@ (800e54c <xTaskIncrementTick+0x160>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d903      	bls.n	800e4c6 <xTaskIncrementTick+0xda>
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c2:	4a22      	ldr	r2, [pc, #136]	@ (800e54c <xTaskIncrementTick+0x160>)
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4413      	add	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4a1f      	ldr	r2, [pc, #124]	@ (800e550 <xTaskIncrementTick+0x164>)
 800e4d4:	441a      	add	r2, r3
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f7fe f976 	bl	800c7ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e554 <xTaskIncrementTick+0x168>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d3b8      	bcc.n	800e462 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f4:	e7b5      	b.n	800e462 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4f6:	4b17      	ldr	r3, [pc, #92]	@ (800e554 <xTaskIncrementTick+0x168>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fc:	4914      	ldr	r1, [pc, #80]	@ (800e550 <xTaskIncrementTick+0x164>)
 800e4fe:	4613      	mov	r3, r2
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	4413      	add	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	440b      	add	r3, r1
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d901      	bls.n	800e512 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e50e:	2301      	movs	r3, #1
 800e510:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e512:	4b11      	ldr	r3, [pc, #68]	@ (800e558 <xTaskIncrementTick+0x16c>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e51a:	2301      	movs	r3, #1
 800e51c:	617b      	str	r3, [r7, #20]
 800e51e:	e004      	b.n	800e52a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e520:	4b0e      	ldr	r3, [pc, #56]	@ (800e55c <xTaskIncrementTick+0x170>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3301      	adds	r3, #1
 800e526:	4a0d      	ldr	r2, [pc, #52]	@ (800e55c <xTaskIncrementTick+0x170>)
 800e528:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e52a:	697b      	ldr	r3, [r7, #20]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	2000150c 	.word	0x2000150c
 800e538:	200014e8 	.word	0x200014e8
 800e53c:	2000149c 	.word	0x2000149c
 800e540:	200014a0 	.word	0x200014a0
 800e544:	200014fc 	.word	0x200014fc
 800e548:	20001504 	.word	0x20001504
 800e54c:	200014ec 	.word	0x200014ec
 800e550:	20001014 	.word	0x20001014
 800e554:	20001010 	.word	0x20001010
 800e558:	200014f8 	.word	0x200014f8
 800e55c:	200014f4 	.word	0x200014f4

0800e560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e566:	4b2b      	ldr	r3, [pc, #172]	@ (800e614 <vTaskSwitchContext+0xb4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d003      	beq.n	800e576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e56e:	4b2a      	ldr	r3, [pc, #168]	@ (800e618 <vTaskSwitchContext+0xb8>)
 800e570:	2201      	movs	r2, #1
 800e572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e574:	e047      	b.n	800e606 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e576:	4b28      	ldr	r3, [pc, #160]	@ (800e618 <vTaskSwitchContext+0xb8>)
 800e578:	2200      	movs	r2, #0
 800e57a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e57c:	4b27      	ldr	r3, [pc, #156]	@ (800e61c <vTaskSwitchContext+0xbc>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	60fb      	str	r3, [r7, #12]
 800e582:	e011      	b.n	800e5a8 <vTaskSwitchContext+0x48>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d10b      	bne.n	800e5a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	607b      	str	r3, [r7, #4]
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	e7fd      	b.n	800e59e <vTaskSwitchContext+0x3e>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	491d      	ldr	r1, [pc, #116]	@ (800e620 <vTaskSwitchContext+0xc0>)
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	440b      	add	r3, r1
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0e3      	beq.n	800e584 <vTaskSwitchContext+0x24>
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a16      	ldr	r2, [pc, #88]	@ (800e620 <vTaskSwitchContext+0xc0>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	60bb      	str	r3, [r7, #8]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	605a      	str	r2, [r3, #4]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	3308      	adds	r3, #8
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d104      	bne.n	800e5ec <vTaskSwitchContext+0x8c>
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	605a      	str	r2, [r3, #4]
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e624 <vTaskSwitchContext+0xc4>)
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	4a09      	ldr	r2, [pc, #36]	@ (800e61c <vTaskSwitchContext+0xbc>)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5fc:	4b09      	ldr	r3, [pc, #36]	@ (800e624 <vTaskSwitchContext+0xc4>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3354      	adds	r3, #84	@ 0x54
 800e602:	4a09      	ldr	r2, [pc, #36]	@ (800e628 <vTaskSwitchContext+0xc8>)
 800e604:	6013      	str	r3, [r2, #0]
}
 800e606:	bf00      	nop
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	2000150c 	.word	0x2000150c
 800e618:	200014f8 	.word	0x200014f8
 800e61c:	200014ec 	.word	0x200014ec
 800e620:	20001014 	.word	0x20001014
 800e624:	20001010 	.word	0x20001010
 800e628:	200003d4 	.word	0x200003d4

0800e62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10b      	bne.n	800e654 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	60fb      	str	r3, [r7, #12]
}
 800e64e:	bf00      	nop
 800e650:	bf00      	nop
 800e652:	e7fd      	b.n	800e650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e654:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <vTaskPlaceOnEventList+0x48>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3318      	adds	r3, #24
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7fe f8da 	bl	800c816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e662:	2101      	movs	r1, #1
 800e664:	6838      	ldr	r0, [r7, #0]
 800e666:	f000 fe4d 	bl	800f304 <prvAddCurrentTaskToDelayedList>
}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20001010 	.word	0x20001010

0800e678 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10b      	bne.n	800e6a2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	617b      	str	r3, [r7, #20]
}
 800e69c:	bf00      	nop
 800e69e:	bf00      	nop
 800e6a0:	e7fd      	b.n	800e69e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e6a2:	4b12      	ldr	r3, [pc, #72]	@ (800e6ec <vTaskPlaceOnUnorderedEventList+0x74>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10b      	bne.n	800e6c2 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	613b      	str	r3, [r7, #16]
}
 800e6bc:	bf00      	nop
 800e6be:	bf00      	nop
 800e6c0:	e7fd      	b.n	800e6be <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e6cc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6ce:	4b08      	ldr	r3, [pc, #32]	@ (800e6f0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3318      	adds	r3, #24
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f7fe f879 	bl	800c7ce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6dc:	2101      	movs	r1, #1
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 fe10 	bl	800f304 <prvAddCurrentTaskToDelayedList>
}
 800e6e4:	bf00      	nop
 800e6e6:	3718      	adds	r7, #24
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	2000150c 	.word	0x2000150c
 800e6f0:	20001010 	.word	0x20001010

0800e6f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10b      	bne.n	800e71e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70a:	f383 8811 	msr	BASEPRI, r3
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f3bf 8f4f 	dsb	sy
 800e716:	617b      	str	r3, [r7, #20]
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	e7fd      	b.n	800e71a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e71e:	4b0a      	ldr	r3, [pc, #40]	@ (800e748 <vTaskPlaceOnEventListRestricted+0x54>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3318      	adds	r3, #24
 800e724:	4619      	mov	r1, r3
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7fe f851 	bl	800c7ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d002      	beq.n	800e738 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e732:	f04f 33ff 	mov.w	r3, #4294967295
 800e736:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e738:	6879      	ldr	r1, [r7, #4]
 800e73a:	68b8      	ldr	r0, [r7, #8]
 800e73c:	f000 fde2 	bl	800f304 <prvAddCurrentTaskToDelayedList>
	}
 800e740:	bf00      	nop
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20001010 	.word	0x20001010

0800e74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10b      	bne.n	800e77a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	60fb      	str	r3, [r7, #12]
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	e7fd      	b.n	800e776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	3318      	adds	r3, #24
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe f882 	bl	800c888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e784:	4b1d      	ldr	r3, [pc, #116]	@ (800e7fc <xTaskRemoveFromEventList+0xb0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d11d      	bne.n	800e7c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	3304      	adds	r3, #4
 800e790:	4618      	mov	r0, r3
 800e792:	f7fe f879 	bl	800c888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79a:	4b19      	ldr	r3, [pc, #100]	@ (800e800 <xTaskRemoveFromEventList+0xb4>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d903      	bls.n	800e7aa <xTaskRemoveFromEventList+0x5e>
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a6:	4a16      	ldr	r2, [pc, #88]	@ (800e800 <xTaskRemoveFromEventList+0xb4>)
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4a13      	ldr	r2, [pc, #76]	@ (800e804 <xTaskRemoveFromEventList+0xb8>)
 800e7b8:	441a      	add	r2, r3
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f7fe f804 	bl	800c7ce <vListInsertEnd>
 800e7c6:	e005      	b.n	800e7d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	3318      	adds	r3, #24
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	480e      	ldr	r0, [pc, #56]	@ (800e808 <xTaskRemoveFromEventList+0xbc>)
 800e7d0:	f7fd fffd 	bl	800c7ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e80c <xTaskRemoveFromEventList+0xc0>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d905      	bls.n	800e7ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800e810 <xTaskRemoveFromEventList+0xc4>)
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	e001      	b.n	800e7f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7f2:	697b      	ldr	r3, [r7, #20]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	2000150c 	.word	0x2000150c
 800e800:	200014ec 	.word	0x200014ec
 800e804:	20001014 	.word	0x20001014
 800e808:	200014a4 	.word	0x200014a4
 800e80c:	20001010 	.word	0x20001010
 800e810:	200014f8 	.word	0x200014f8

0800e814 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e81e:	4b2a      	ldr	r3, [pc, #168]	@ (800e8c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10b      	bne.n	800e83e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	613b      	str	r3, [r7, #16]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10b      	bne.n	800e86c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	60fb      	str	r3, [r7, #12]
}
 800e866:	bf00      	nop
 800e868:	bf00      	nop
 800e86a:	e7fd      	b.n	800e868 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe f80b 	bl	800c888 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	3304      	adds	r3, #4
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe f806 	bl	800c888 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e880:	4b12      	ldr	r3, [pc, #72]	@ (800e8cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	429a      	cmp	r2, r3
 800e886:	d903      	bls.n	800e890 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88c:	4a0f      	ldr	r2, [pc, #60]	@ (800e8cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e88e:	6013      	str	r3, [r2, #0]
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e89e:	441a      	add	r2, r3
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7fd ff91 	bl	800c7ce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8b0:	4b08      	ldr	r3, [pc, #32]	@ (800e8d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d902      	bls.n	800e8c0 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e8ba:	4b07      	ldr	r3, [pc, #28]	@ (800e8d8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e8bc:	2201      	movs	r2, #1
 800e8be:	601a      	str	r2, [r3, #0]
	}
}
 800e8c0:	bf00      	nop
 800e8c2:	3718      	adds	r7, #24
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	2000150c 	.word	0x2000150c
 800e8cc:	200014ec 	.word	0x200014ec
 800e8d0:	20001014 	.word	0x20001014
 800e8d4:	20001010 	.word	0x20001010
 800e8d8:	200014f8 	.word	0x200014f8

0800e8dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <vTaskInternalSetTimeOutState+0x24>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8ec:	4b05      	ldr	r3, [pc, #20]	@ (800e904 <vTaskInternalSetTimeOutState+0x28>)
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	605a      	str	r2, [r3, #4]
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	200014fc 	.word	0x200014fc
 800e904:	200014e8 	.word	0x200014e8

0800e908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10b      	bne.n	800e930 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	613b      	str	r3, [r7, #16]
}
 800e92a:	bf00      	nop
 800e92c:	bf00      	nop
 800e92e:	e7fd      	b.n	800e92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d10b      	bne.n	800e94e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93a:	f383 8811 	msr	BASEPRI, r3
 800e93e:	f3bf 8f6f 	isb	sy
 800e942:	f3bf 8f4f 	dsb	sy
 800e946:	60fb      	str	r3, [r7, #12]
}
 800e948:	bf00      	nop
 800e94a:	bf00      	nop
 800e94c:	e7fd      	b.n	800e94a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e94e:	f001 fa33 	bl	800fdb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e952:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c8 <xTaskCheckForTimeOut+0xc0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	69ba      	ldr	r2, [r7, #24]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96a:	d102      	bne.n	800e972 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	e023      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b15      	ldr	r3, [pc, #84]	@ (800e9cc <xTaskCheckForTimeOut+0xc4>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d007      	beq.n	800e98e <xTaskCheckForTimeOut+0x86>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	69ba      	ldr	r2, [r7, #24]
 800e984:	429a      	cmp	r2, r3
 800e986:	d302      	bcc.n	800e98e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e988:	2301      	movs	r3, #1
 800e98a:	61fb      	str	r3, [r7, #28]
 800e98c:	e015      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	429a      	cmp	r2, r3
 800e996:	d20b      	bcs.n	800e9b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	1ad2      	subs	r2, r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ff99 	bl	800e8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	61fb      	str	r3, [r7, #28]
 800e9ae:	e004      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9ba:	f001 fa2f 	bl	800fe1c <vPortExitCritical>

	return xReturn;
 800e9be:	69fb      	ldr	r3, [r7, #28]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3720      	adds	r7, #32
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	200014e8 	.word	0x200014e8
 800e9cc:	200014fc 	.word	0x200014fc

0800e9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9d4:	4b03      	ldr	r3, [pc, #12]	@ (800e9e4 <vTaskMissedYield+0x14>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	601a      	str	r2, [r3, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	200014f8 	.word	0x200014f8

0800e9e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9f0:	f000 f852 	bl	800ea98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ea10 <prvIdleTask+0x28>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d9f9      	bls.n	800e9f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ea14 <prvIdleTask+0x2c>)
 800e9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea0c:	e7f0      	b.n	800e9f0 <prvIdleTask+0x8>
 800ea0e:	bf00      	nop
 800ea10:	20001014 	.word	0x20001014
 800ea14:	e000ed04 	.word	0xe000ed04

0800ea18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea1e:	2300      	movs	r3, #0
 800ea20:	607b      	str	r3, [r7, #4]
 800ea22:	e00c      	b.n	800ea3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	4613      	mov	r3, r2
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4413      	add	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4a12      	ldr	r2, [pc, #72]	@ (800ea78 <prvInitialiseTaskLists+0x60>)
 800ea30:	4413      	add	r3, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fd fe9e 	bl	800c774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	607b      	str	r3, [r7, #4]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2b37      	cmp	r3, #55	@ 0x37
 800ea42:	d9ef      	bls.n	800ea24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea44:	480d      	ldr	r0, [pc, #52]	@ (800ea7c <prvInitialiseTaskLists+0x64>)
 800ea46:	f7fd fe95 	bl	800c774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea4a:	480d      	ldr	r0, [pc, #52]	@ (800ea80 <prvInitialiseTaskLists+0x68>)
 800ea4c:	f7fd fe92 	bl	800c774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea50:	480c      	ldr	r0, [pc, #48]	@ (800ea84 <prvInitialiseTaskLists+0x6c>)
 800ea52:	f7fd fe8f 	bl	800c774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea56:	480c      	ldr	r0, [pc, #48]	@ (800ea88 <prvInitialiseTaskLists+0x70>)
 800ea58:	f7fd fe8c 	bl	800c774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea5c:	480b      	ldr	r0, [pc, #44]	@ (800ea8c <prvInitialiseTaskLists+0x74>)
 800ea5e:	f7fd fe89 	bl	800c774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea62:	4b0b      	ldr	r3, [pc, #44]	@ (800ea90 <prvInitialiseTaskLists+0x78>)
 800ea64:	4a05      	ldr	r2, [pc, #20]	@ (800ea7c <prvInitialiseTaskLists+0x64>)
 800ea66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea68:	4b0a      	ldr	r3, [pc, #40]	@ (800ea94 <prvInitialiseTaskLists+0x7c>)
 800ea6a:	4a05      	ldr	r2, [pc, #20]	@ (800ea80 <prvInitialiseTaskLists+0x68>)
 800ea6c:	601a      	str	r2, [r3, #0]
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20001014 	.word	0x20001014
 800ea7c:	20001474 	.word	0x20001474
 800ea80:	20001488 	.word	0x20001488
 800ea84:	200014a4 	.word	0x200014a4
 800ea88:	200014b8 	.word	0x200014b8
 800ea8c:	200014d0 	.word	0x200014d0
 800ea90:	2000149c 	.word	0x2000149c
 800ea94:	200014a0 	.word	0x200014a0

0800ea98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea9e:	e019      	b.n	800ead4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eaa0:	f001 f98a 	bl	800fdb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaa4:	4b10      	ldr	r3, [pc, #64]	@ (800eae8 <prvCheckTasksWaitingTermination+0x50>)
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3304      	adds	r3, #4
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fee9 	bl	800c888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eab6:	4b0d      	ldr	r3, [pc, #52]	@ (800eaec <prvCheckTasksWaitingTermination+0x54>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	4a0b      	ldr	r2, [pc, #44]	@ (800eaec <prvCheckTasksWaitingTermination+0x54>)
 800eabe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eac0:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf0 <prvCheckTasksWaitingTermination+0x58>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	4a0a      	ldr	r2, [pc, #40]	@ (800eaf0 <prvCheckTasksWaitingTermination+0x58>)
 800eac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eaca:	f001 f9a7 	bl	800fe1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f8ae 	bl	800ec30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ead4:	4b06      	ldr	r3, [pc, #24]	@ (800eaf0 <prvCheckTasksWaitingTermination+0x58>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e1      	bne.n	800eaa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eadc:	bf00      	nop
 800eade:	bf00      	nop
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	200014b8 	.word	0x200014b8
 800eaec:	200014e4 	.word	0x200014e4
 800eaf0:	200014cc 	.word	0x200014cc

0800eaf4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
 800eb00:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d102      	bne.n	800eb0e <vTaskGetInfo+0x1a>
 800eb08:	4b2c      	ldr	r3, [pc, #176]	@ (800ebbc <vTaskGetInfo+0xc8>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	e000      	b.n	800eb10 <vTaskGetInfo+0x1c>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	697a      	ldr	r2, [r7, #20]
 800eb16:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2200      	movs	r2, #0
 800eb46:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eb48:	78fb      	ldrb	r3, [r7, #3]
 800eb4a:	2b05      	cmp	r3, #5
 800eb4c:	d01a      	beq.n	800eb84 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800eb4e:	4b1b      	ldr	r3, [pc, #108]	@ (800ebbc <vTaskGetInfo+0xc8>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d103      	bne.n	800eb60 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	731a      	strb	r2, [r3, #12]
 800eb5e:	e018      	b.n	800eb92 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eb66:	78fb      	ldrb	r3, [r7, #3]
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d112      	bne.n	800eb92 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800eb6c:	f7ff faae 	bl	800e0cc <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eb7e:	f7ff fab3 	bl	800e0e8 <xTaskResumeAll>
 800eb82:	e006      	b.n	800eb92 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eb84:	6978      	ldr	r0, [r7, #20]
 800eb86:	f7ff f823 	bl	800dbd0 <eTaskGetState>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d009      	beq.n	800ebac <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 f80f 	bl	800ebc0 <prvTaskCheckFreeStackSpace>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ebaa:	e002      	b.n	800ebb2 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	841a      	strh	r2, [r3, #32]
	}
 800ebb2:	bf00      	nop
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	20001010 	.word	0x20001010

0800ebc0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebcc:	e005      	b.n	800ebda <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2ba5      	cmp	r3, #165	@ 0xa5
 800ebe0:	d0f5      	beq.n	800ebce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	089b      	lsrs	r3, r3, #2
 800ebe6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	b29b      	uxth	r3, r3
	}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d102      	bne.n	800ec0c <uxTaskGetStackHighWaterMark+0x14>
 800ec06:	4b09      	ldr	r3, [pc, #36]	@ (800ec2c <uxTaskGetStackHighWaterMark+0x34>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	e000      	b.n	800ec0e <uxTaskGetStackHighWaterMark+0x16>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec14:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ec16:	6938      	ldr	r0, [r7, #16]
 800ec18:	f7ff ffd2 	bl	800ebc0 <prvTaskCheckFreeStackSpace>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ec20:	68fb      	ldr	r3, [r7, #12]
	}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20001010 	.word	0x20001010

0800ec30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	3354      	adds	r3, #84	@ 0x54
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f003 fc71 	bl	8012524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d108      	bne.n	800ec5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec50:	4618      	mov	r0, r3
 800ec52:	f001 faa1 	bl	8010198 <vPortFree>
				vPortFree( pxTCB );
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f001 fa9e 	bl	8010198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec5c:	e019      	b.n	800ec92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d103      	bne.n	800ec70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f001 fa95 	bl	8010198 <vPortFree>
	}
 800ec6e:	e010      	b.n	800ec92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	d00b      	beq.n	800ec92 <prvDeleteTCB+0x62>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	60fb      	str	r3, [r7, #12]
}
 800ec8c:	bf00      	nop
 800ec8e:	bf00      	nop
 800ec90:	e7fd      	b.n	800ec8e <prvDeleteTCB+0x5e>
	}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
	...

0800ec9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eca2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <prvResetNextTaskUnblockTime+0x38>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d104      	bne.n	800ecb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecac:	4b0a      	ldr	r3, [pc, #40]	@ (800ecd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ecae:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecb4:	e008      	b.n	800ecc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecb6:	4b07      	ldr	r3, [pc, #28]	@ (800ecd4 <prvResetNextTaskUnblockTime+0x38>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	4a04      	ldr	r2, [pc, #16]	@ (800ecd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ecc6:	6013      	str	r3, [r2, #0]
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr
 800ecd4:	2000149c 	.word	0x2000149c
 800ecd8:	20001504 	.word	0x20001504

0800ecdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ece2:	4b0b      	ldr	r3, [pc, #44]	@ (800ed10 <xTaskGetSchedulerState+0x34>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d102      	bne.n	800ecf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecea:	2301      	movs	r3, #1
 800ecec:	607b      	str	r3, [r7, #4]
 800ecee:	e008      	b.n	800ed02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecf0:	4b08      	ldr	r3, [pc, #32]	@ (800ed14 <xTaskGetSchedulerState+0x38>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d102      	bne.n	800ecfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	607b      	str	r3, [r7, #4]
 800ecfc:	e001      	b.n	800ed02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed02:	687b      	ldr	r3, [r7, #4]
	}
 800ed04:	4618      	mov	r0, r3
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	200014f0 	.word	0x200014f0
 800ed14:	2000150c 	.word	0x2000150c

0800ed18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed24:	2300      	movs	r3, #0
 800ed26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d051      	beq.n	800edd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed32:	4b2a      	ldr	r3, [pc, #168]	@ (800eddc <xTaskPriorityInherit+0xc4>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d241      	bcs.n	800edc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	db06      	blt.n	800ed52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed44:	4b25      	ldr	r3, [pc, #148]	@ (800eddc <xTaskPriorityInherit+0xc4>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	6959      	ldr	r1, [r3, #20]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4a1f      	ldr	r2, [pc, #124]	@ (800ede0 <xTaskPriorityInherit+0xc8>)
 800ed64:	4413      	add	r3, r2
 800ed66:	4299      	cmp	r1, r3
 800ed68:	d122      	bne.n	800edb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd fd8a 	bl	800c888 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed74:	4b19      	ldr	r3, [pc, #100]	@ (800eddc <xTaskPriorityInherit+0xc4>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed82:	4b18      	ldr	r3, [pc, #96]	@ (800ede4 <xTaskPriorityInherit+0xcc>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d903      	bls.n	800ed92 <xTaskPriorityInherit+0x7a>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8e:	4a15      	ldr	r2, [pc, #84]	@ (800ede4 <xTaskPriorityInherit+0xcc>)
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed96:	4613      	mov	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4413      	add	r3, r2
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4a10      	ldr	r2, [pc, #64]	@ (800ede0 <xTaskPriorityInherit+0xc8>)
 800eda0:	441a      	add	r2, r3
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	3304      	adds	r3, #4
 800eda6:	4619      	mov	r1, r3
 800eda8:	4610      	mov	r0, r2
 800edaa:	f7fd fd10 	bl	800c7ce <vListInsertEnd>
 800edae:	e004      	b.n	800edba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edb0:	4b0a      	ldr	r3, [pc, #40]	@ (800eddc <xTaskPriorityInherit+0xc4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800edba:	2301      	movs	r3, #1
 800edbc:	60fb      	str	r3, [r7, #12]
 800edbe:	e008      	b.n	800edd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edc4:	4b05      	ldr	r3, [pc, #20]	@ (800eddc <xTaskPriorityInherit+0xc4>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edca:	429a      	cmp	r2, r3
 800edcc:	d201      	bcs.n	800edd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800edce:	2301      	movs	r3, #1
 800edd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edd2:	68fb      	ldr	r3, [r7, #12]
	}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20001010 	.word	0x20001010
 800ede0:	20001014 	.word	0x20001014
 800ede4:	200014ec 	.word	0x200014ec

0800ede8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d058      	beq.n	800eeb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edfe:	4b2f      	ldr	r3, [pc, #188]	@ (800eebc <xTaskPriorityDisinherit+0xd4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	693a      	ldr	r2, [r7, #16]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d00b      	beq.n	800ee20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	60fb      	str	r3, [r7, #12]
}
 800ee1a:	bf00      	nop
 800ee1c:	bf00      	nop
 800ee1e:	e7fd      	b.n	800ee1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10b      	bne.n	800ee40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	60bb      	str	r3, [r7, #8]
}
 800ee3a:	bf00      	nop
 800ee3c:	bf00      	nop
 800ee3e:	e7fd      	b.n	800ee3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee44:	1e5a      	subs	r2, r3, #1
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d02c      	beq.n	800eeb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d128      	bne.n	800eeb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	3304      	adds	r3, #4
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fd fd10 	bl	800c888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee80:	4b0f      	ldr	r3, [pc, #60]	@ (800eec0 <xTaskPriorityDisinherit+0xd8>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d903      	bls.n	800ee90 <xTaskPriorityDisinherit+0xa8>
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8c:	4a0c      	ldr	r2, [pc, #48]	@ (800eec0 <xTaskPriorityDisinherit+0xd8>)
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee94:	4613      	mov	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4413      	add	r3, r2
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	4a09      	ldr	r2, [pc, #36]	@ (800eec4 <xTaskPriorityDisinherit+0xdc>)
 800ee9e:	441a      	add	r2, r3
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	3304      	adds	r3, #4
 800eea4:	4619      	mov	r1, r3
 800eea6:	4610      	mov	r0, r2
 800eea8:	f7fd fc91 	bl	800c7ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eeac:	2301      	movs	r3, #1
 800eeae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eeb0:	697b      	ldr	r3, [r7, #20]
	}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20001010 	.word	0x20001010
 800eec0:	200014ec 	.word	0x200014ec
 800eec4:	20001014 	.word	0x20001014

0800eec8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eed6:	2301      	movs	r3, #1
 800eed8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d06c      	beq.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10b      	bne.n	800ef00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeec:	f383 8811 	msr	BASEPRI, r3
 800eef0:	f3bf 8f6f 	isb	sy
 800eef4:	f3bf 8f4f 	dsb	sy
 800eef8:	60fb      	str	r3, [r7, #12]
}
 800eefa:	bf00      	nop
 800eefc:	bf00      	nop
 800eefe:	e7fd      	b.n	800eefc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d902      	bls.n	800ef10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	61fb      	str	r3, [r7, #28]
 800ef0e:	e002      	b.n	800ef16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d04c      	beq.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef24:	697a      	ldr	r2, [r7, #20]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d147      	bne.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef2a:	4b26      	ldr	r3, [pc, #152]	@ (800efc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d10b      	bne.n	800ef4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ef34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	60bb      	str	r3, [r7, #8]
}
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	e7fd      	b.n	800ef48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	69fa      	ldr	r2, [r7, #28]
 800ef56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	db04      	blt.n	800ef6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	6959      	ldr	r1, [r3, #20]
 800ef6e:	693a      	ldr	r2, [r7, #16]
 800ef70:	4613      	mov	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4413      	add	r3, r2
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	4a13      	ldr	r2, [pc, #76]	@ (800efc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef7a:	4413      	add	r3, r2
 800ef7c:	4299      	cmp	r1, r3
 800ef7e:	d11c      	bne.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	3304      	adds	r3, #4
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7fd fc7f 	bl	800c888 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	@ (800efcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d903      	bls.n	800ef9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9a:	4a0c      	ldr	r2, [pc, #48]	@ (800efcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa2:	4613      	mov	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	4a07      	ldr	r2, [pc, #28]	@ (800efc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800efac:	441a      	add	r2, r3
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4619      	mov	r1, r3
 800efb4:	4610      	mov	r0, r2
 800efb6:	f7fd fc0a 	bl	800c7ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efba:	bf00      	nop
 800efbc:	3720      	adds	r7, #32
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20001010 	.word	0x20001010
 800efc8:	20001014 	.word	0x20001014
 800efcc:	200014ec 	.word	0x200014ec

0800efd0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800efd6:	4b09      	ldr	r3, [pc, #36]	@ (800effc <uxTaskResetEventItemValue+0x2c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	699b      	ldr	r3, [r3, #24]
 800efdc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efde:	4b07      	ldr	r3, [pc, #28]	@ (800effc <uxTaskResetEventItemValue+0x2c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efe4:	4b05      	ldr	r3, [pc, #20]	@ (800effc <uxTaskResetEventItemValue+0x2c>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800efec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800efee:	687b      	ldr	r3, [r7, #4]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	20001010 	.word	0x20001010

0800f000 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f000:	b480      	push	{r7}
 800f002:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f004:	4b07      	ldr	r3, [pc, #28]	@ (800f024 <pvTaskIncrementMutexHeldCount+0x24>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f00c:	4b05      	ldr	r3, [pc, #20]	@ (800f024 <pvTaskIncrementMutexHeldCount+0x24>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f012:	3201      	adds	r2, #1
 800f014:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f016:	4b03      	ldr	r3, [pc, #12]	@ (800f024 <pvTaskIncrementMutexHeldCount+0x24>)
 800f018:	681b      	ldr	r3, [r3, #0]
	}
 800f01a:	4618      	mov	r0, r3
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr
 800f024:	20001010 	.word	0x20001010

0800f028 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f032:	f000 fec1 	bl	800fdb8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f036:	4b20      	ldr	r3, [pc, #128]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d113      	bne.n	800f06a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f042:	4b1d      	ldr	r3, [pc, #116]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00b      	beq.n	800f06a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f052:	2101      	movs	r1, #1
 800f054:	6838      	ldr	r0, [r7, #0]
 800f056:	f000 f955 	bl	800f304 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f05a:	4b18      	ldr	r3, [pc, #96]	@ (800f0bc <ulTaskNotifyTake+0x94>)
 800f05c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f060:	601a      	str	r2, [r3, #0]
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f06a:	f000 fed7 	bl	800fe1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f06e:	f000 fea3 	bl	800fdb8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f072:	4b11      	ldr	r3, [pc, #68]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f07a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00e      	beq.n	800f0a0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f088:	4b0b      	ldr	r3, [pc, #44]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f092:	e005      	b.n	800f0a0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f094:	4b08      	ldr	r3, [pc, #32]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	3a01      	subs	r2, #1
 800f09c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0a0:	4b05      	ldr	r3, [pc, #20]	@ (800f0b8 <ulTaskNotifyTake+0x90>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f0aa:	f000 feb7 	bl	800fe1c <vPortExitCritical>

		return ulReturn;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
	}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	20001010 	.word	0x20001010
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f0ce:	f000 fe73 	bl	800fdb8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f0d2:	4b29      	ldr	r3, [pc, #164]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d01c      	beq.n	800f11a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f0e0:	4b25      	ldr	r3, [pc, #148]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	43d2      	mvns	r2, r2
 800f0ec:	400a      	ands	r2, r1
 800f0ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f0f2:	4b21      	ldr	r3, [pc, #132]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00b      	beq.n	800f11a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f102:	2101      	movs	r1, #1
 800f104:	6838      	ldr	r0, [r7, #0]
 800f106:	f000 f8fd 	bl	800f304 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f10a:	4b1c      	ldr	r3, [pc, #112]	@ (800f17c <xTaskNotifyWait+0xbc>)
 800f10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f11a:	f000 fe7f 	bl	800fe1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f11e:	f000 fe4b 	bl	800fdb8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d005      	beq.n	800f134 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f128:	4b13      	ldr	r3, [pc, #76]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f134:	4b10      	ldr	r3, [pc, #64]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d002      	beq.n	800f148 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f142:	2300      	movs	r3, #0
 800f144:	617b      	str	r3, [r7, #20]
 800f146:	e00a      	b.n	800f15e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f148:	4b0b      	ldr	r3, [pc, #44]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	43d2      	mvns	r2, r2
 800f154:	400a      	ands	r2, r1
 800f156:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f15a:	2301      	movs	r3, #1
 800f15c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f15e:	4b06      	ldr	r3, [pc, #24]	@ (800f178 <xTaskNotifyWait+0xb8>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2200      	movs	r2, #0
 800f164:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f168:	f000 fe58 	bl	800fe1c <vPortExitCritical>

		return xReturn;
 800f16c:	697b      	ldr	r3, [r7, #20]
	}
 800f16e:	4618      	mov	r0, r3
 800f170:	3718      	adds	r7, #24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20001010 	.word	0x20001010
 800f17c:	e000ed04 	.word	0xe000ed04

0800f180 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08a      	sub	sp, #40	@ 0x28
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	603b      	str	r3, [r7, #0]
 800f18c:	4613      	mov	r3, r2
 800f18e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f190:	2301      	movs	r3, #1
 800f192:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10b      	bne.n	800f1b2 <xTaskGenericNotify+0x32>
	__asm volatile
 800f19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	61bb      	str	r3, [r7, #24]
}
 800f1ac:	bf00      	nop
 800f1ae:	bf00      	nop
 800f1b0:	e7fd      	b.n	800f1ae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f1b6:	f000 fdff 	bl	800fdb8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d004      	beq.n	800f1ca <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f1ca:	6a3b      	ldr	r3, [r7, #32]
 800f1cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f1d0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	2202      	movs	r2, #2
 800f1d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f1da:	79fb      	ldrb	r3, [r7, #7]
 800f1dc:	2b04      	cmp	r3, #4
 800f1de:	d82e      	bhi.n	800f23e <xTaskGenericNotify+0xbe>
 800f1e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e8 <xTaskGenericNotify+0x68>)
 800f1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e6:	bf00      	nop
 800f1e8:	0800f263 	.word	0x0800f263
 800f1ec:	0800f1fd 	.word	0x0800f1fd
 800f1f0:	0800f20f 	.word	0x0800f20f
 800f1f4:	0800f21f 	.word	0x0800f21f
 800f1f8:	0800f229 	.word	0x0800f229
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	431a      	orrs	r2, r3
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f20c:	e02c      	b.n	800f268 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f21c:	e024      	b.n	800f268 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f21e:	6a3b      	ldr	r3, [r7, #32]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f226:	e01f      	b.n	800f268 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f228:	7ffb      	ldrb	r3, [r7, #31]
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d004      	beq.n	800f238 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f236:	e017      	b.n	800f268 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f238:	2300      	movs	r3, #0
 800f23a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f23c:	e014      	b.n	800f268 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f23e:	6a3b      	ldr	r3, [r7, #32]
 800f240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f248:	d00d      	beq.n	800f266 <xTaskGenericNotify+0xe6>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	617b      	str	r3, [r7, #20]
}
 800f25c:	bf00      	nop
 800f25e:	bf00      	nop
 800f260:	e7fd      	b.n	800f25e <xTaskGenericNotify+0xde>
					break;
 800f262:	bf00      	nop
 800f264:	e000      	b.n	800f268 <xTaskGenericNotify+0xe8>

					break;
 800f266:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f268:	7ffb      	ldrb	r3, [r7, #31]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d13b      	bne.n	800f2e6 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	3304      	adds	r3, #4
 800f272:	4618      	mov	r0, r3
 800f274:	f7fd fb08 	bl	800c888 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f278:	6a3b      	ldr	r3, [r7, #32]
 800f27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27c:	4b1d      	ldr	r3, [pc, #116]	@ (800f2f4 <xTaskGenericNotify+0x174>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d903      	bls.n	800f28c <xTaskGenericNotify+0x10c>
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f288:	4a1a      	ldr	r2, [pc, #104]	@ (800f2f4 <xTaskGenericNotify+0x174>)
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	6a3b      	ldr	r3, [r7, #32]
 800f28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f290:	4613      	mov	r3, r2
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	4413      	add	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4a17      	ldr	r2, [pc, #92]	@ (800f2f8 <xTaskGenericNotify+0x178>)
 800f29a:	441a      	add	r2, r3
 800f29c:	6a3b      	ldr	r3, [r7, #32]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	f7fd fa93 	bl	800c7ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00b      	beq.n	800f2c8 <xTaskGenericNotify+0x148>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	613b      	str	r3, [r7, #16]
}
 800f2c2:	bf00      	nop
 800f2c4:	bf00      	nop
 800f2c6:	e7fd      	b.n	800f2c4 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f2fc <xTaskGenericNotify+0x17c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d907      	bls.n	800f2e6 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f300 <xTaskGenericNotify+0x180>)
 800f2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2e6:	f000 fd99 	bl	800fe1c <vPortExitCritical>

		return xReturn;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3728      	adds	r7, #40	@ 0x28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	200014ec 	.word	0x200014ec
 800f2f8:	20001014 	.word	0x20001014
 800f2fc:	20001010 	.word	0x20001010
 800f300:	e000ed04 	.word	0xe000ed04

0800f304 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f30e:	4b21      	ldr	r3, [pc, #132]	@ (800f394 <prvAddCurrentTaskToDelayedList+0x90>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f314:	4b20      	ldr	r3, [pc, #128]	@ (800f398 <prvAddCurrentTaskToDelayedList+0x94>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	3304      	adds	r3, #4
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fd fab4 	bl	800c888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f326:	d10a      	bne.n	800f33e <prvAddCurrentTaskToDelayedList+0x3a>
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d007      	beq.n	800f33e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f32e:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <prvAddCurrentTaskToDelayedList+0x94>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3304      	adds	r3, #4
 800f334:	4619      	mov	r1, r3
 800f336:	4819      	ldr	r0, [pc, #100]	@ (800f39c <prvAddCurrentTaskToDelayedList+0x98>)
 800f338:	f7fd fa49 	bl	800c7ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f33c:	e026      	b.n	800f38c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4413      	add	r3, r2
 800f344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f346:	4b14      	ldr	r3, [pc, #80]	@ (800f398 <prvAddCurrentTaskToDelayedList+0x94>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	429a      	cmp	r2, r3
 800f354:	d209      	bcs.n	800f36a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f356:	4b12      	ldr	r3, [pc, #72]	@ (800f3a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	4b0f      	ldr	r3, [pc, #60]	@ (800f398 <prvAddCurrentTaskToDelayedList+0x94>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3304      	adds	r3, #4
 800f360:	4619      	mov	r1, r3
 800f362:	4610      	mov	r0, r2
 800f364:	f7fd fa57 	bl	800c816 <vListInsert>
}
 800f368:	e010      	b.n	800f38c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f36a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	4b0a      	ldr	r3, [pc, #40]	@ (800f398 <prvAddCurrentTaskToDelayedList+0x94>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3304      	adds	r3, #4
 800f374:	4619      	mov	r1, r3
 800f376:	4610      	mov	r0, r2
 800f378:	f7fd fa4d 	bl	800c816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f37c:	4b0a      	ldr	r3, [pc, #40]	@ (800f3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	429a      	cmp	r2, r3
 800f384:	d202      	bcs.n	800f38c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f386:	4a08      	ldr	r2, [pc, #32]	@ (800f3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	6013      	str	r3, [r2, #0]
}
 800f38c:	bf00      	nop
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	200014e8 	.word	0x200014e8
 800f398:	20001010 	.word	0x20001010
 800f39c:	200014d0 	.word	0x200014d0
 800f3a0:	200014a0 	.word	0x200014a0
 800f3a4:	2000149c 	.word	0x2000149c
 800f3a8:	20001504 	.word	0x20001504

0800f3ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08a      	sub	sp, #40	@ 0x28
 800f3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f3b6:	f000 fb71 	bl	800fa9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800f430 <xTimerCreateTimerTask+0x84>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d021      	beq.n	800f406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f3ca:	1d3a      	adds	r2, r7, #4
 800f3cc:	f107 0108 	add.w	r1, r7, #8
 800f3d0:	f107 030c 	add.w	r3, r7, #12
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fc fff7 	bl	800c3c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f3da:	6879      	ldr	r1, [r7, #4]
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	9202      	str	r2, [sp, #8]
 800f3e2:	9301      	str	r3, [sp, #4]
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	460a      	mov	r2, r1
 800f3ec:	4911      	ldr	r1, [pc, #68]	@ (800f434 <xTimerCreateTimerTask+0x88>)
 800f3ee:	4812      	ldr	r0, [pc, #72]	@ (800f438 <xTimerCreateTimerTask+0x8c>)
 800f3f0:	f7fe f986 	bl	800d700 <xTaskCreateStatic>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	4a11      	ldr	r2, [pc, #68]	@ (800f43c <xTimerCreateTimerTask+0x90>)
 800f3f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f3fa:	4b10      	ldr	r3, [pc, #64]	@ (800f43c <xTimerCreateTimerTask+0x90>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f402:	2301      	movs	r3, #1
 800f404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10b      	bne.n	800f424 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	613b      	str	r3, [r7, #16]
}
 800f41e:	bf00      	nop
 800f420:	bf00      	nop
 800f422:	e7fd      	b.n	800f420 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f424:	697b      	ldr	r3, [r7, #20]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3718      	adds	r7, #24
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	20001540 	.word	0x20001540
 800f434:	08015848 	.word	0x08015848
 800f438:	0800f635 	.word	0x0800f635
 800f43c:	20001544 	.word	0x20001544

0800f440 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f440:	b580      	push	{r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af02      	add	r7, sp, #8
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f44e:	202c      	movs	r0, #44	@ 0x2c
 800f450:	f000 fdd4 	bl	800fffc <pvPortMalloc>
 800f454:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00d      	beq.n	800f478 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	9301      	str	r3, [sp, #4]
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 f805 	bl	800f482 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f478:	697b      	ldr	r3, [r7, #20]
	}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b086      	sub	sp, #24
 800f486:	af00      	add	r7, sp, #0
 800f488:	60f8      	str	r0, [r7, #12]
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	607a      	str	r2, [r7, #4]
 800f48e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10b      	bne.n	800f4ae <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
 800f4a6:	617b      	str	r3, [r7, #20]
}
 800f4a8:	bf00      	nop
 800f4aa:	bf00      	nop
 800f4ac:	e7fd      	b.n	800f4aa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01e      	beq.n	800f4f2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f4b4:	f000 faf2 	bl	800fa9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4cc:	6a3a      	ldr	r2, [r7, #32]
 800f4ce:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd f96d 	bl	800c7b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d008      	beq.n	800f4f2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4e6:	f043 0304 	orr.w	r3, r3, #4
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f4f2:	bf00      	nop
 800f4f4:	3718      	adds	r7, #24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08a      	sub	sp, #40	@ 0x28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10b      	bne.n	800f52c <xTimerGenericCommand+0x30>
	__asm volatile
 800f514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	623b      	str	r3, [r7, #32]
}
 800f526:	bf00      	nop
 800f528:	bf00      	nop
 800f52a:	e7fd      	b.n	800f528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f52c:	4b19      	ldr	r3, [pc, #100]	@ (800f594 <xTimerGenericCommand+0x98>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d02a      	beq.n	800f58a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2b05      	cmp	r3, #5
 800f544:	dc18      	bgt.n	800f578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f546:	f7ff fbc9 	bl	800ecdc <xTaskGetSchedulerState>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d109      	bne.n	800f564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f550:	4b10      	ldr	r3, [pc, #64]	@ (800f594 <xTimerGenericCommand+0x98>)
 800f552:	6818      	ldr	r0, [r3, #0]
 800f554:	f107 0110 	add.w	r1, r7, #16
 800f558:	2300      	movs	r3, #0
 800f55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f55c:	f7fd fb36 	bl	800cbcc <xQueueGenericSend>
 800f560:	6278      	str	r0, [r7, #36]	@ 0x24
 800f562:	e012      	b.n	800f58a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f564:	4b0b      	ldr	r3, [pc, #44]	@ (800f594 <xTimerGenericCommand+0x98>)
 800f566:	6818      	ldr	r0, [r3, #0]
 800f568:	f107 0110 	add.w	r1, r7, #16
 800f56c:	2300      	movs	r3, #0
 800f56e:	2200      	movs	r2, #0
 800f570:	f7fd fb2c 	bl	800cbcc <xQueueGenericSend>
 800f574:	6278      	str	r0, [r7, #36]	@ 0x24
 800f576:	e008      	b.n	800f58a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f578:	4b06      	ldr	r3, [pc, #24]	@ (800f594 <xTimerGenericCommand+0x98>)
 800f57a:	6818      	ldr	r0, [r3, #0]
 800f57c:	f107 0110 	add.w	r1, r7, #16
 800f580:	2300      	movs	r3, #0
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	f7fd fc24 	bl	800cdd0 <xQueueGenericSendFromISR>
 800f588:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3728      	adds	r7, #40	@ 0x28
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20001540 	.word	0x20001540

0800f598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5a2:	4b23      	ldr	r3, [pc, #140]	@ (800f630 <prvProcessExpiredTimer+0x98>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fd f969 	bl	800c888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5bc:	f003 0304 	and.w	r3, r3, #4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d023      	beq.n	800f60c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	699a      	ldr	r2, [r3, #24]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	18d1      	adds	r1, r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	683a      	ldr	r2, [r7, #0]
 800f5d0:	6978      	ldr	r0, [r7, #20]
 800f5d2:	f000 f8d5 	bl	800f780 <prvInsertTimerInActiveList>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d020      	beq.n	800f61e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5dc:	2300      	movs	r3, #0
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	6978      	ldr	r0, [r7, #20]
 800f5e8:	f7ff ff88 	bl	800f4fc <xTimerGenericCommand>
 800f5ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d114      	bne.n	800f61e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	60fb      	str	r3, [r7, #12]
}
 800f606:	bf00      	nop
 800f608:	bf00      	nop
 800f60a:	e7fd      	b.n	800f608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f612:	f023 0301 	bic.w	r3, r3, #1
 800f616:	b2da      	uxtb	r2, r3
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	6978      	ldr	r0, [r7, #20]
 800f624:	4798      	blx	r3
}
 800f626:	bf00      	nop
 800f628:	3718      	adds	r7, #24
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20001538 	.word	0x20001538

0800f634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f63c:	f107 0308 	add.w	r3, r7, #8
 800f640:	4618      	mov	r0, r3
 800f642:	f000 f859 	bl	800f6f8 <prvGetNextExpireTime>
 800f646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	4619      	mov	r1, r3
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 f805 	bl	800f65c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f652:	f000 f8d7 	bl	800f804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f656:	bf00      	nop
 800f658:	e7f0      	b.n	800f63c <prvTimerTask+0x8>
	...

0800f65c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f666:	f7fe fd31 	bl	800e0cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f66a:	f107 0308 	add.w	r3, r7, #8
 800f66e:	4618      	mov	r0, r3
 800f670:	f000 f866 	bl	800f740 <prvSampleTimeNow>
 800f674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d130      	bne.n	800f6de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10a      	bne.n	800f698 <prvProcessTimerOrBlockTask+0x3c>
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	429a      	cmp	r2, r3
 800f688:	d806      	bhi.n	800f698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f68a:	f7fe fd2d 	bl	800e0e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f68e:	68f9      	ldr	r1, [r7, #12]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7ff ff81 	bl	800f598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f696:	e024      	b.n	800f6e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d008      	beq.n	800f6b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f69e:	4b13      	ldr	r3, [pc, #76]	@ (800f6ec <prvProcessTimerOrBlockTask+0x90>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d101      	bne.n	800f6ac <prvProcessTimerOrBlockTask+0x50>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e000      	b.n	800f6ae <prvProcessTimerOrBlockTask+0x52>
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f6b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f0 <prvProcessTimerOrBlockTask+0x94>)
 800f6b2:	6818      	ldr	r0, [r3, #0]
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	f7fd ffeb 	bl	800d698 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6c2:	f7fe fd11 	bl	800e0e8 <xTaskResumeAll>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d10a      	bne.n	800f6e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6cc:	4b09      	ldr	r3, [pc, #36]	@ (800f6f4 <prvProcessTimerOrBlockTask+0x98>)
 800f6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6d2:	601a      	str	r2, [r3, #0]
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	f3bf 8f6f 	isb	sy
}
 800f6dc:	e001      	b.n	800f6e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6de:	f7fe fd03 	bl	800e0e8 <xTaskResumeAll>
}
 800f6e2:	bf00      	nop
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2000153c 	.word	0x2000153c
 800f6f0:	20001540 	.word	0x20001540
 800f6f4:	e000ed04 	.word	0xe000ed04

0800f6f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f700:	4b0e      	ldr	r3, [pc, #56]	@ (800f73c <prvGetNextExpireTime+0x44>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d101      	bne.n	800f70e <prvGetNextExpireTime+0x16>
 800f70a:	2201      	movs	r2, #1
 800f70c:	e000      	b.n	800f710 <prvGetNextExpireTime+0x18>
 800f70e:	2200      	movs	r2, #0
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d105      	bne.n	800f728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f71c:	4b07      	ldr	r3, [pc, #28]	@ (800f73c <prvGetNextExpireTime+0x44>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	60fb      	str	r3, [r7, #12]
 800f726:	e001      	b.n	800f72c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f728:	2300      	movs	r3, #0
 800f72a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f72c:	68fb      	ldr	r3, [r7, #12]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	20001538 	.word	0x20001538

0800f740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f748:	f7fe fd6c 	bl	800e224 <xTaskGetTickCount>
 800f74c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f74e:	4b0b      	ldr	r3, [pc, #44]	@ (800f77c <prvSampleTimeNow+0x3c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	429a      	cmp	r2, r3
 800f756:	d205      	bcs.n	800f764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f758:	f000 f93a 	bl	800f9d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2201      	movs	r2, #1
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	e002      	b.n	800f76a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f76a:	4a04      	ldr	r2, [pc, #16]	@ (800f77c <prvSampleTimeNow+0x3c>)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f770:	68fb      	ldr	r3, [r7, #12]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20001548 	.word	0x20001548

0800f780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f78e:	2300      	movs	r3, #0
 800f790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d812      	bhi.n	800f7cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	1ad2      	subs	r2, r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d302      	bcc.n	800f7ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	617b      	str	r3, [r7, #20]
 800f7b8:	e01b      	b.n	800f7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7ba:	4b10      	ldr	r3, [pc, #64]	@ (800f7fc <prvInsertTimerInActiveList+0x7c>)
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	f7fd f826 	bl	800c816 <vListInsert>
 800f7ca:	e012      	b.n	800f7f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d206      	bcs.n	800f7e2 <prvInsertTimerInActiveList+0x62>
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d302      	bcc.n	800f7e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e007      	b.n	800f7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7e2:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <prvInsertTimerInActiveList+0x80>)
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	f7fd f812 	bl	800c816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7f2:	697b      	ldr	r3, [r7, #20]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	2000153c 	.word	0x2000153c
 800f800:	20001538 	.word	0x20001538

0800f804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08e      	sub	sp, #56	@ 0x38
 800f808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f80a:	e0ce      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	da19      	bge.n	800f846 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f812:	1d3b      	adds	r3, r7, #4
 800f814:	3304      	adds	r3, #4
 800f816:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10b      	bne.n	800f836 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	61fb      	str	r3, [r7, #28]
}
 800f830:	bf00      	nop
 800f832:	bf00      	nop
 800f834:	e7fd      	b.n	800f832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f83c:	6850      	ldr	r0, [r2, #4]
 800f83e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f840:	6892      	ldr	r2, [r2, #8]
 800f842:	4611      	mov	r1, r2
 800f844:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f2c0 80ae 	blt.w	800f9aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f854:	695b      	ldr	r3, [r3, #20]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d004      	beq.n	800f864 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f85c:	3304      	adds	r3, #4
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fd f812 	bl	800c888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f864:	463b      	mov	r3, r7
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff ff6a 	bl	800f740 <prvSampleTimeNow>
 800f86c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b09      	cmp	r3, #9
 800f872:	f200 8097 	bhi.w	800f9a4 <prvProcessReceivedCommands+0x1a0>
 800f876:	a201      	add	r2, pc, #4	@ (adr r2, 800f87c <prvProcessReceivedCommands+0x78>)
 800f878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f87c:	0800f8a5 	.word	0x0800f8a5
 800f880:	0800f8a5 	.word	0x0800f8a5
 800f884:	0800f8a5 	.word	0x0800f8a5
 800f888:	0800f91b 	.word	0x0800f91b
 800f88c:	0800f92f 	.word	0x0800f92f
 800f890:	0800f97b 	.word	0x0800f97b
 800f894:	0800f8a5 	.word	0x0800f8a5
 800f898:	0800f8a5 	.word	0x0800f8a5
 800f89c:	0800f91b 	.word	0x0800f91b
 800f8a0:	0800f92f 	.word	0x0800f92f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	b2da      	uxtb	r2, r3
 800f8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	18d1      	adds	r1, r2, r3
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8c4:	f7ff ff5c 	bl	800f780 <prvInsertTimerInActiveList>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d06c      	beq.n	800f9a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8dc:	f003 0304 	and.w	r3, r3, #4
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d061      	beq.n	800f9a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e8:	699b      	ldr	r3, [r3, #24]
 800f8ea:	441a      	add	r2, r3
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8f6:	f7ff fe01 	bl	800f4fc <xTimerGenericCommand>
 800f8fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d152      	bne.n	800f9a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f906:	f383 8811 	msr	BASEPRI, r3
 800f90a:	f3bf 8f6f 	isb	sy
 800f90e:	f3bf 8f4f 	dsb	sy
 800f912:	61bb      	str	r3, [r7, #24]
}
 800f914:	bf00      	nop
 800f916:	bf00      	nop
 800f918:	e7fd      	b.n	800f916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f920:	f023 0301 	bic.w	r3, r3, #1
 800f924:	b2da      	uxtb	r2, r3
 800f926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f92c:	e03d      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f934:	f043 0301 	orr.w	r3, r3, #1
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f940:	68ba      	ldr	r2, [r7, #8]
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10b      	bne.n	800f966 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	617b      	str	r3, [r7, #20]
}
 800f960:	bf00      	nop
 800f962:	bf00      	nop
 800f964:	e7fd      	b.n	800f962 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f968:	699a      	ldr	r2, [r3, #24]
 800f96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96c:	18d1      	adds	r1, r2, r3
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f974:	f7ff ff04 	bl	800f780 <prvInsertTimerInActiveList>
					break;
 800f978:	e017      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f980:	f003 0302 	and.w	r3, r3, #2
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f98a:	f000 fc05 	bl	8010198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f98e:	e00c      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f996:	f023 0301 	bic.w	r3, r3, #1
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f9a2:	e002      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f9a4:	bf00      	nop
 800f9a6:	e000      	b.n	800f9aa <prvProcessReceivedCommands+0x1a6>
					break;
 800f9a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9aa:	4b08      	ldr	r3, [pc, #32]	@ (800f9cc <prvProcessReceivedCommands+0x1c8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	1d39      	adds	r1, r7, #4
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fd faaa 	bl	800cf0c <xQueueReceive>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f47f af26 	bne.w	800f80c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f9c0:	bf00      	nop
 800f9c2:	bf00      	nop
 800f9c4:	3730      	adds	r7, #48	@ 0x30
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	20001540 	.word	0x20001540

0800f9d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b088      	sub	sp, #32
 800f9d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9d6:	e049      	b.n	800fa6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9d8:	4b2e      	ldr	r3, [pc, #184]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9e2:	4b2c      	ldr	r3, [pc, #176]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fc ff49 	bl	800c888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa04:	f003 0304 	and.w	r3, r3, #4
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d02f      	beq.n	800fa6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	4413      	add	r3, r2
 800fa14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d90e      	bls.n	800fa3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa2a:	4b1a      	ldr	r3, [pc, #104]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3304      	adds	r3, #4
 800fa32:	4619      	mov	r1, r3
 800fa34:	4610      	mov	r0, r2
 800fa36:	f7fc feee 	bl	800c816 <vListInsert>
 800fa3a:	e017      	b.n	800fa6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2300      	movs	r3, #0
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	2100      	movs	r1, #0
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7ff fd58 	bl	800f4fc <xTimerGenericCommand>
 800fa4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10b      	bne.n	800fa6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa58:	f383 8811 	msr	BASEPRI, r3
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	603b      	str	r3, [r7, #0]
}
 800fa66:	bf00      	nop
 800fa68:	bf00      	nop
 800fa6a:	e7fd      	b.n	800fa68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa6c:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1b0      	bne.n	800f9d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa76:	4b07      	ldr	r3, [pc, #28]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa7c:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <prvSwitchTimerLists+0xc8>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a04      	ldr	r2, [pc, #16]	@ (800fa94 <prvSwitchTimerLists+0xc4>)
 800fa82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa84:	4a04      	ldr	r2, [pc, #16]	@ (800fa98 <prvSwitchTimerLists+0xc8>)
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	6013      	str	r3, [r2, #0]
}
 800fa8a:	bf00      	nop
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	20001538 	.word	0x20001538
 800fa98:	2000153c 	.word	0x2000153c

0800fa9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800faa2:	f000 f989 	bl	800fdb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800faa6:	4b15      	ldr	r3, [pc, #84]	@ (800fafc <prvCheckForValidListAndQueue+0x60>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d120      	bne.n	800faf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800faae:	4814      	ldr	r0, [pc, #80]	@ (800fb00 <prvCheckForValidListAndQueue+0x64>)
 800fab0:	f7fc fe60 	bl	800c774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fab4:	4813      	ldr	r0, [pc, #76]	@ (800fb04 <prvCheckForValidListAndQueue+0x68>)
 800fab6:	f7fc fe5d 	bl	800c774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800faba:	4b13      	ldr	r3, [pc, #76]	@ (800fb08 <prvCheckForValidListAndQueue+0x6c>)
 800fabc:	4a10      	ldr	r2, [pc, #64]	@ (800fb00 <prvCheckForValidListAndQueue+0x64>)
 800fabe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fac0:	4b12      	ldr	r3, [pc, #72]	@ (800fb0c <prvCheckForValidListAndQueue+0x70>)
 800fac2:	4a10      	ldr	r2, [pc, #64]	@ (800fb04 <prvCheckForValidListAndQueue+0x68>)
 800fac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fac6:	2300      	movs	r3, #0
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	4b11      	ldr	r3, [pc, #68]	@ (800fb10 <prvCheckForValidListAndQueue+0x74>)
 800facc:	4a11      	ldr	r2, [pc, #68]	@ (800fb14 <prvCheckForValidListAndQueue+0x78>)
 800face:	2110      	movs	r1, #16
 800fad0:	200a      	movs	r0, #10
 800fad2:	f7fc ff6d 	bl	800c9b0 <xQueueGenericCreateStatic>
 800fad6:	4603      	mov	r3, r0
 800fad8:	4a08      	ldr	r2, [pc, #32]	@ (800fafc <prvCheckForValidListAndQueue+0x60>)
 800fada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fadc:	4b07      	ldr	r3, [pc, #28]	@ (800fafc <prvCheckForValidListAndQueue+0x60>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d005      	beq.n	800faf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fae4:	4b05      	ldr	r3, [pc, #20]	@ (800fafc <prvCheckForValidListAndQueue+0x60>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	490b      	ldr	r1, [pc, #44]	@ (800fb18 <prvCheckForValidListAndQueue+0x7c>)
 800faea:	4618      	mov	r0, r3
 800faec:	f7fd fdaa 	bl	800d644 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800faf0:	f000 f994 	bl	800fe1c <vPortExitCritical>
}
 800faf4:	bf00      	nop
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20001540 	.word	0x20001540
 800fb00:	20001510 	.word	0x20001510
 800fb04:	20001524 	.word	0x20001524
 800fb08:	20001538 	.word	0x20001538
 800fb0c:	2000153c 	.word	0x2000153c
 800fb10:	200015ec 	.word	0x200015ec
 800fb14:	2000154c 	.word	0x2000154c
 800fb18:	08015850 	.word	0x08015850

0800fb1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08a      	sub	sp, #40	@ 0x28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
 800fb28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fb2a:	f06f 0301 	mvn.w	r3, #1
 800fb2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb3c:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <xTimerPendFunctionCallFromISR+0x3c>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	f107 0114 	add.w	r1, r7, #20
 800fb44:	2300      	movs	r3, #0
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	f7fd f942 	bl	800cdd0 <xQueueGenericSendFromISR>
 800fb4c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3728      	adds	r7, #40	@ 0x28
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	20001540 	.word	0x20001540

0800fb5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3b04      	subs	r3, #4
 800fb6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	3b04      	subs	r3, #4
 800fb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	f023 0201 	bic.w	r2, r3, #1
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3b04      	subs	r3, #4
 800fb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fbc0 <pxPortInitialiseStack+0x64>)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3b14      	subs	r3, #20
 800fb96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	3b04      	subs	r3, #4
 800fba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f06f 0202 	mvn.w	r2, #2
 800fbaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	3b20      	subs	r3, #32
 800fbb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	0800fbc5 	.word	0x0800fbc5

0800fbc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fbce:	4b13      	ldr	r3, [pc, #76]	@ (800fc1c <prvTaskExitError+0x58>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd6:	d00b      	beq.n	800fbf0 <prvTaskExitError+0x2c>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	60fb      	str	r3, [r7, #12]
}
 800fbea:	bf00      	nop
 800fbec:	bf00      	nop
 800fbee:	e7fd      	b.n	800fbec <prvTaskExitError+0x28>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	60bb      	str	r3, [r7, #8]
}
 800fc02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc04:	bf00      	nop
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d0fc      	beq.n	800fc06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc0c:	bf00      	nop
 800fc0e:	bf00      	nop
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	20000258 	.word	0x20000258

0800fc20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc20:	4b07      	ldr	r3, [pc, #28]	@ (800fc40 <pxCurrentTCBConst2>)
 800fc22:	6819      	ldr	r1, [r3, #0]
 800fc24:	6808      	ldr	r0, [r1, #0]
 800fc26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2a:	f380 8809 	msr	PSP, r0
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f04f 0000 	mov.w	r0, #0
 800fc36:	f380 8811 	msr	BASEPRI, r0
 800fc3a:	4770      	bx	lr
 800fc3c:	f3af 8000 	nop.w

0800fc40 <pxCurrentTCBConst2>:
 800fc40:	20001010 	.word	0x20001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc44:	bf00      	nop
 800fc46:	bf00      	nop

0800fc48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc48:	4808      	ldr	r0, [pc, #32]	@ (800fc6c <prvPortStartFirstTask+0x24>)
 800fc4a:	6800      	ldr	r0, [r0, #0]
 800fc4c:	6800      	ldr	r0, [r0, #0]
 800fc4e:	f380 8808 	msr	MSP, r0
 800fc52:	f04f 0000 	mov.w	r0, #0
 800fc56:	f380 8814 	msr	CONTROL, r0
 800fc5a:	b662      	cpsie	i
 800fc5c:	b661      	cpsie	f
 800fc5e:	f3bf 8f4f 	dsb	sy
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	df00      	svc	0
 800fc68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc6a:	bf00      	nop
 800fc6c:	e000ed08 	.word	0xe000ed08

0800fc70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc76:	4b47      	ldr	r3, [pc, #284]	@ (800fd94 <xPortStartScheduler+0x124>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a47      	ldr	r2, [pc, #284]	@ (800fd98 <xPortStartScheduler+0x128>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d10b      	bne.n	800fc98 <xPortStartScheduler+0x28>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	613b      	str	r3, [r7, #16]
}
 800fc92:	bf00      	nop
 800fc94:	bf00      	nop
 800fc96:	e7fd      	b.n	800fc94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc98:	4b3e      	ldr	r3, [pc, #248]	@ (800fd94 <xPortStartScheduler+0x124>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd9c <xPortStartScheduler+0x12c>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d10b      	bne.n	800fcba <xPortStartScheduler+0x4a>
	__asm volatile
 800fca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca6:	f383 8811 	msr	BASEPRI, r3
 800fcaa:	f3bf 8f6f 	isb	sy
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	60fb      	str	r3, [r7, #12]
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop
 800fcb8:	e7fd      	b.n	800fcb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fcba:	4b39      	ldr	r3, [pc, #228]	@ (800fda0 <xPortStartScheduler+0x130>)
 800fcbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	22ff      	movs	r2, #255	@ 0xff
 800fcca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fcd4:	78fb      	ldrb	r3, [r7, #3]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	4b31      	ldr	r3, [pc, #196]	@ (800fda4 <xPortStartScheduler+0x134>)
 800fce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fce2:	4b31      	ldr	r3, [pc, #196]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fce4:	2207      	movs	r2, #7
 800fce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fce8:	e009      	b.n	800fcfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fcea:	4b2f      	ldr	r3, [pc, #188]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	4a2d      	ldr	r2, [pc, #180]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fcf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcf4:	78fb      	ldrb	r3, [r7, #3]
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcfe:	78fb      	ldrb	r3, [r7, #3]
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd06:	2b80      	cmp	r3, #128	@ 0x80
 800fd08:	d0ef      	beq.n	800fcea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd0a:	4b27      	ldr	r3, [pc, #156]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f1c3 0307 	rsb	r3, r3, #7
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	d00b      	beq.n	800fd2e <xPortStartScheduler+0xbe>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	60bb      	str	r3, [r7, #8]
}
 800fd28:	bf00      	nop
 800fd2a:	bf00      	nop
 800fd2c:	e7fd      	b.n	800fd2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd2e:	4b1e      	ldr	r3, [pc, #120]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	021b      	lsls	r3, r3, #8
 800fd34:	4a1c      	ldr	r2, [pc, #112]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fd36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd38:	4b1b      	ldr	r3, [pc, #108]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd40:	4a19      	ldr	r2, [pc, #100]	@ (800fda8 <xPortStartScheduler+0x138>)
 800fd42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd4c:	4b17      	ldr	r3, [pc, #92]	@ (800fdac <xPortStartScheduler+0x13c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a16      	ldr	r2, [pc, #88]	@ (800fdac <xPortStartScheduler+0x13c>)
 800fd52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd58:	4b14      	ldr	r3, [pc, #80]	@ (800fdac <xPortStartScheduler+0x13c>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a13      	ldr	r2, [pc, #76]	@ (800fdac <xPortStartScheduler+0x13c>)
 800fd5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd64:	f000 f8da 	bl	800ff1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd68:	4b11      	ldr	r3, [pc, #68]	@ (800fdb0 <xPortStartScheduler+0x140>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd6e:	f000 f8f9 	bl	800ff64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd72:	4b10      	ldr	r3, [pc, #64]	@ (800fdb4 <xPortStartScheduler+0x144>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4a0f      	ldr	r2, [pc, #60]	@ (800fdb4 <xPortStartScheduler+0x144>)
 800fd78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fd7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd7e:	f7ff ff63 	bl	800fc48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd82:	f7fe fbed 	bl	800e560 <vTaskSwitchContext>
	prvTaskExitError();
 800fd86:	f7ff ff1d 	bl	800fbc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	e000ed00 	.word	0xe000ed00
 800fd98:	410fc271 	.word	0x410fc271
 800fd9c:	410fc270 	.word	0x410fc270
 800fda0:	e000e400 	.word	0xe000e400
 800fda4:	2000163c 	.word	0x2000163c
 800fda8:	20001640 	.word	0x20001640
 800fdac:	e000ed20 	.word	0xe000ed20
 800fdb0:	20000258 	.word	0x20000258
 800fdb4:	e000ef34 	.word	0xe000ef34

0800fdb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	607b      	str	r3, [r7, #4]
}
 800fdd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fdd2:	4b10      	ldr	r3, [pc, #64]	@ (800fe14 <vPortEnterCritical+0x5c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	4a0e      	ldr	r2, [pc, #56]	@ (800fe14 <vPortEnterCritical+0x5c>)
 800fdda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fddc:	4b0d      	ldr	r3, [pc, #52]	@ (800fe14 <vPortEnterCritical+0x5c>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d110      	bne.n	800fe06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fde4:	4b0c      	ldr	r3, [pc, #48]	@ (800fe18 <vPortEnterCritical+0x60>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00b      	beq.n	800fe06 <vPortEnterCritical+0x4e>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	603b      	str	r3, [r7, #0]
}
 800fe00:	bf00      	nop
 800fe02:	bf00      	nop
 800fe04:	e7fd      	b.n	800fe02 <vPortEnterCritical+0x4a>
	}
}
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	20000258 	.word	0x20000258
 800fe18:	e000ed04 	.word	0xe000ed04

0800fe1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe22:	4b12      	ldr	r3, [pc, #72]	@ (800fe6c <vPortExitCritical+0x50>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10b      	bne.n	800fe42 <vPortExitCritical+0x26>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	607b      	str	r3, [r7, #4]
}
 800fe3c:	bf00      	nop
 800fe3e:	bf00      	nop
 800fe40:	e7fd      	b.n	800fe3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe42:	4b0a      	ldr	r3, [pc, #40]	@ (800fe6c <vPortExitCritical+0x50>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3b01      	subs	r3, #1
 800fe48:	4a08      	ldr	r2, [pc, #32]	@ (800fe6c <vPortExitCritical+0x50>)
 800fe4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe4c:	4b07      	ldr	r3, [pc, #28]	@ (800fe6c <vPortExitCritical+0x50>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d105      	bne.n	800fe60 <vPortExitCritical+0x44>
 800fe54:	2300      	movs	r3, #0
 800fe56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	f383 8811 	msr	BASEPRI, r3
}
 800fe5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe60:	bf00      	nop
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	20000258 	.word	0x20000258

0800fe70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe70:	f3ef 8009 	mrs	r0, PSP
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	4b15      	ldr	r3, [pc, #84]	@ (800fed0 <pxCurrentTCBConst>)
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	f01e 0f10 	tst.w	lr, #16
 800fe80:	bf08      	it	eq
 800fe82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8a:	6010      	str	r0, [r2, #0]
 800fe8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe94:	f380 8811 	msr	BASEPRI, r0
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	f3bf 8f6f 	isb	sy
 800fea0:	f7fe fb5e 	bl	800e560 <vTaskSwitchContext>
 800fea4:	f04f 0000 	mov.w	r0, #0
 800fea8:	f380 8811 	msr	BASEPRI, r0
 800feac:	bc09      	pop	{r0, r3}
 800feae:	6819      	ldr	r1, [r3, #0]
 800feb0:	6808      	ldr	r0, [r1, #0]
 800feb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb6:	f01e 0f10 	tst.w	lr, #16
 800feba:	bf08      	it	eq
 800febc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fec0:	f380 8809 	msr	PSP, r0
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	f3af 8000 	nop.w

0800fed0 <pxCurrentTCBConst>:
 800fed0:	20001010 	.word	0x20001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fed4:	bf00      	nop
 800fed6:	bf00      	nop

0800fed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	607b      	str	r3, [r7, #4]
}
 800fef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fef2:	f7fe fa7b 	bl	800e3ec <xTaskIncrementTick>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d003      	beq.n	800ff04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fefc:	4b06      	ldr	r3, [pc, #24]	@ (800ff18 <xPortSysTickHandler+0x40>)
 800fefe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	2300      	movs	r3, #0
 800ff06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	f383 8811 	msr	BASEPRI, r3
}
 800ff0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff10:	bf00      	nop
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	e000ed04 	.word	0xe000ed04

0800ff1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff20:	4b0b      	ldr	r3, [pc, #44]	@ (800ff50 <vPortSetupTimerInterrupt+0x34>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff26:	4b0b      	ldr	r3, [pc, #44]	@ (800ff54 <vPortSetupTimerInterrupt+0x38>)
 800ff28:	2200      	movs	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff58 <vPortSetupTimerInterrupt+0x3c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a0a      	ldr	r2, [pc, #40]	@ (800ff5c <vPortSetupTimerInterrupt+0x40>)
 800ff32:	fba2 2303 	umull	r2, r3, r2, r3
 800ff36:	099b      	lsrs	r3, r3, #6
 800ff38:	4a09      	ldr	r2, [pc, #36]	@ (800ff60 <vPortSetupTimerInterrupt+0x44>)
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff3e:	4b04      	ldr	r3, [pc, #16]	@ (800ff50 <vPortSetupTimerInterrupt+0x34>)
 800ff40:	2207      	movs	r2, #7
 800ff42:	601a      	str	r2, [r3, #0]
}
 800ff44:	bf00      	nop
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	e000e010 	.word	0xe000e010
 800ff54:	e000e018 	.word	0xe000e018
 800ff58:	2000022c 	.word	0x2000022c
 800ff5c:	10624dd3 	.word	0x10624dd3
 800ff60:	e000e014 	.word	0xe000e014

0800ff64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ff74 <vPortEnableVFP+0x10>
 800ff68:	6801      	ldr	r1, [r0, #0]
 800ff6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ff6e:	6001      	str	r1, [r0, #0]
 800ff70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff72:	bf00      	nop
 800ff74:	e000ed88 	.word	0xe000ed88

0800ff78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff7e:	f3ef 8305 	mrs	r3, IPSR
 800ff82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b0f      	cmp	r3, #15
 800ff88:	d915      	bls.n	800ffb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff8a:	4a18      	ldr	r2, [pc, #96]	@ (800ffec <vPortValidateInterruptPriority+0x74>)
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	4413      	add	r3, r2
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff94:	4b16      	ldr	r3, [pc, #88]	@ (800fff0 <vPortValidateInterruptPriority+0x78>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	7afa      	ldrb	r2, [r7, #11]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d20b      	bcs.n	800ffb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	607b      	str	r3, [r7, #4]
}
 800ffb0:	bf00      	nop
 800ffb2:	bf00      	nop
 800ffb4:	e7fd      	b.n	800ffb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ffb6:	4b0f      	ldr	r3, [pc, #60]	@ (800fff4 <vPortValidateInterruptPriority+0x7c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ffbe:	4b0e      	ldr	r3, [pc, #56]	@ (800fff8 <vPortValidateInterruptPriority+0x80>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d90b      	bls.n	800ffde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ffc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffca:	f383 8811 	msr	BASEPRI, r3
 800ffce:	f3bf 8f6f 	isb	sy
 800ffd2:	f3bf 8f4f 	dsb	sy
 800ffd6:	603b      	str	r3, [r7, #0]
}
 800ffd8:	bf00      	nop
 800ffda:	bf00      	nop
 800ffdc:	e7fd      	b.n	800ffda <vPortValidateInterruptPriority+0x62>
	}
 800ffde:	bf00      	nop
 800ffe0:	3714      	adds	r7, #20
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	e000e3f0 	.word	0xe000e3f0
 800fff0:	2000163c 	.word	0x2000163c
 800fff4:	e000ed0c 	.word	0xe000ed0c
 800fff8:	20001640 	.word	0x20001640

0800fffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08a      	sub	sp, #40	@ 0x28
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010004:	2300      	movs	r3, #0
 8010006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010008:	f7fe f860 	bl	800e0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801000c:	4b5c      	ldr	r3, [pc, #368]	@ (8010180 <pvPortMalloc+0x184>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d101      	bne.n	8010018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010014:	f000 f924 	bl	8010260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010018:	4b5a      	ldr	r3, [pc, #360]	@ (8010184 <pvPortMalloc+0x188>)
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4013      	ands	r3, r2
 8010020:	2b00      	cmp	r3, #0
 8010022:	f040 8095 	bne.w	8010150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d01e      	beq.n	801006a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801002c:	2208      	movs	r2, #8
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4413      	add	r3, r2
 8010032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f003 0307 	and.w	r3, r3, #7
 801003a:	2b00      	cmp	r3, #0
 801003c:	d015      	beq.n	801006a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f023 0307 	bic.w	r3, r3, #7
 8010044:	3308      	adds	r3, #8
 8010046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f003 0307 	and.w	r3, r3, #7
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00b      	beq.n	801006a <pvPortMalloc+0x6e>
	__asm volatile
 8010052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	617b      	str	r3, [r7, #20]
}
 8010064:	bf00      	nop
 8010066:	bf00      	nop
 8010068:	e7fd      	b.n	8010066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d06f      	beq.n	8010150 <pvPortMalloc+0x154>
 8010070:	4b45      	ldr	r3, [pc, #276]	@ (8010188 <pvPortMalloc+0x18c>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	429a      	cmp	r2, r3
 8010078:	d86a      	bhi.n	8010150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801007a:	4b44      	ldr	r3, [pc, #272]	@ (801018c <pvPortMalloc+0x190>)
 801007c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801007e:	4b43      	ldr	r3, [pc, #268]	@ (801018c <pvPortMalloc+0x190>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010084:	e004      	b.n	8010090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801008a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	429a      	cmp	r2, r3
 8010098:	d903      	bls.n	80100a2 <pvPortMalloc+0xa6>
 801009a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1f1      	bne.n	8010086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100a2:	4b37      	ldr	r3, [pc, #220]	@ (8010180 <pvPortMalloc+0x184>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d051      	beq.n	8010150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2208      	movs	r2, #8
 80100b2:	4413      	add	r3, r2
 80100b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c0:	685a      	ldr	r2, [r3, #4]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	1ad2      	subs	r2, r2, r3
 80100c6:	2308      	movs	r3, #8
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d920      	bls.n	8010110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4413      	add	r3, r2
 80100d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	f003 0307 	and.w	r3, r3, #7
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00b      	beq.n	80100f8 <pvPortMalloc+0xfc>
	__asm volatile
 80100e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	613b      	str	r3, [r7, #16]
}
 80100f2:	bf00      	nop
 80100f4:	bf00      	nop
 80100f6:	e7fd      	b.n	80100f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fa:	685a      	ldr	r2, [r3, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	1ad2      	subs	r2, r2, r3
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801010a:	69b8      	ldr	r0, [r7, #24]
 801010c:	f000 f90a 	bl	8010324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010110:	4b1d      	ldr	r3, [pc, #116]	@ (8010188 <pvPortMalloc+0x18c>)
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	4a1b      	ldr	r2, [pc, #108]	@ (8010188 <pvPortMalloc+0x18c>)
 801011c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801011e:	4b1a      	ldr	r3, [pc, #104]	@ (8010188 <pvPortMalloc+0x18c>)
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	4b1b      	ldr	r3, [pc, #108]	@ (8010190 <pvPortMalloc+0x194>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	429a      	cmp	r2, r3
 8010128:	d203      	bcs.n	8010132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801012a:	4b17      	ldr	r3, [pc, #92]	@ (8010188 <pvPortMalloc+0x18c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a18      	ldr	r2, [pc, #96]	@ (8010190 <pvPortMalloc+0x194>)
 8010130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010134:	685a      	ldr	r2, [r3, #4]
 8010136:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <pvPortMalloc+0x188>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	431a      	orrs	r2, r3
 801013c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010142:	2200      	movs	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010146:	4b13      	ldr	r3, [pc, #76]	@ (8010194 <pvPortMalloc+0x198>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	4a11      	ldr	r2, [pc, #68]	@ (8010194 <pvPortMalloc+0x198>)
 801014e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010150:	f7fd ffca 	bl	800e0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	f003 0307 	and.w	r3, r3, #7
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00b      	beq.n	8010176 <pvPortMalloc+0x17a>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60fb      	str	r3, [r7, #12]
}
 8010170:	bf00      	nop
 8010172:	bf00      	nop
 8010174:	e7fd      	b.n	8010172 <pvPortMalloc+0x176>
	return pvReturn;
 8010176:	69fb      	ldr	r3, [r7, #28]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3728      	adds	r7, #40	@ 0x28
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	2000524c 	.word	0x2000524c
 8010184:	20005260 	.word	0x20005260
 8010188:	20005250 	.word	0x20005250
 801018c:	20005244 	.word	0x20005244
 8010190:	20005254 	.word	0x20005254
 8010194:	20005258 	.word	0x20005258

08010198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d04f      	beq.n	801024a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101aa:	2308      	movs	r3, #8
 80101ac:	425b      	negs	r3, r3
 80101ae:	697a      	ldr	r2, [r7, #20]
 80101b0:	4413      	add	r3, r2
 80101b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	685a      	ldr	r2, [r3, #4]
 80101bc:	4b25      	ldr	r3, [pc, #148]	@ (8010254 <vPortFree+0xbc>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4013      	ands	r3, r2
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d10b      	bne.n	80101de <vPortFree+0x46>
	__asm volatile
 80101c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	60fb      	str	r3, [r7, #12]
}
 80101d8:	bf00      	nop
 80101da:	bf00      	nop
 80101dc:	e7fd      	b.n	80101da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00b      	beq.n	80101fe <vPortFree+0x66>
	__asm volatile
 80101e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ea:	f383 8811 	msr	BASEPRI, r3
 80101ee:	f3bf 8f6f 	isb	sy
 80101f2:	f3bf 8f4f 	dsb	sy
 80101f6:	60bb      	str	r3, [r7, #8]
}
 80101f8:	bf00      	nop
 80101fa:	bf00      	nop
 80101fc:	e7fd      	b.n	80101fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	685a      	ldr	r2, [r3, #4]
 8010202:	4b14      	ldr	r3, [pc, #80]	@ (8010254 <vPortFree+0xbc>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4013      	ands	r3, r2
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01e      	beq.n	801024a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d11a      	bne.n	801024a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	4b0e      	ldr	r3, [pc, #56]	@ (8010254 <vPortFree+0xbc>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	43db      	mvns	r3, r3
 801021e:	401a      	ands	r2, r3
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010224:	f7fd ff52 	bl	800e0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	685a      	ldr	r2, [r3, #4]
 801022c:	4b0a      	ldr	r3, [pc, #40]	@ (8010258 <vPortFree+0xc0>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4413      	add	r3, r2
 8010232:	4a09      	ldr	r2, [pc, #36]	@ (8010258 <vPortFree+0xc0>)
 8010234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010236:	6938      	ldr	r0, [r7, #16]
 8010238:	f000 f874 	bl	8010324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801023c:	4b07      	ldr	r3, [pc, #28]	@ (801025c <vPortFree+0xc4>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	3301      	adds	r3, #1
 8010242:	4a06      	ldr	r2, [pc, #24]	@ (801025c <vPortFree+0xc4>)
 8010244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010246:	f7fd ff4f 	bl	800e0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801024a:	bf00      	nop
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	20005260 	.word	0x20005260
 8010258:	20005250 	.word	0x20005250
 801025c:	2000525c 	.word	0x2000525c

08010260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010266:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801026a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801026c:	4b27      	ldr	r3, [pc, #156]	@ (801030c <prvHeapInit+0xac>)
 801026e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f003 0307 	and.w	r3, r3, #7
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00c      	beq.n	8010294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3307      	adds	r3, #7
 801027e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f023 0307 	bic.w	r3, r3, #7
 8010286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	4a1f      	ldr	r2, [pc, #124]	@ (801030c <prvHeapInit+0xac>)
 8010290:	4413      	add	r3, r2
 8010292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010298:	4a1d      	ldr	r2, [pc, #116]	@ (8010310 <prvHeapInit+0xb0>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801029e:	4b1c      	ldr	r3, [pc, #112]	@ (8010310 <prvHeapInit+0xb0>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	4413      	add	r3, r2
 80102aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102ac:	2208      	movs	r2, #8
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	1a9b      	subs	r3, r3, r2
 80102b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f023 0307 	bic.w	r3, r3, #7
 80102ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4a15      	ldr	r2, [pc, #84]	@ (8010314 <prvHeapInit+0xb4>)
 80102c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80102c2:	4b14      	ldr	r3, [pc, #80]	@ (8010314 <prvHeapInit+0xb4>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2200      	movs	r2, #0
 80102c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102ca:	4b12      	ldr	r3, [pc, #72]	@ (8010314 <prvHeapInit+0xb4>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010314 <prvHeapInit+0xb4>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	4a0a      	ldr	r2, [pc, #40]	@ (8010318 <prvHeapInit+0xb8>)
 80102ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	4a09      	ldr	r2, [pc, #36]	@ (801031c <prvHeapInit+0xbc>)
 80102f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102f8:	4b09      	ldr	r3, [pc, #36]	@ (8010320 <prvHeapInit+0xc0>)
 80102fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80102fe:	601a      	str	r2, [r3, #0]
}
 8010300:	bf00      	nop
 8010302:	3714      	adds	r7, #20
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20001644 	.word	0x20001644
 8010310:	20005244 	.word	0x20005244
 8010314:	2000524c 	.word	0x2000524c
 8010318:	20005254 	.word	0x20005254
 801031c:	20005250 	.word	0x20005250
 8010320:	20005260 	.word	0x20005260

08010324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801032c:	4b28      	ldr	r3, [pc, #160]	@ (80103d0 <prvInsertBlockIntoFreeList+0xac>)
 801032e:	60fb      	str	r3, [r7, #12]
 8010330:	e002      	b.n	8010338 <prvInsertBlockIntoFreeList+0x14>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	429a      	cmp	r2, r3
 8010340:	d8f7      	bhi.n	8010332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	4413      	add	r3, r2
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d108      	bne.n	8010366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	441a      	add	r2, r3
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	441a      	add	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	429a      	cmp	r2, r3
 8010378:	d118      	bne.n	80103ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	4b15      	ldr	r3, [pc, #84]	@ (80103d4 <prvInsertBlockIntoFreeList+0xb0>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d00d      	beq.n	80103a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	685a      	ldr	r2, [r3, #4]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	441a      	add	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e008      	b.n	80103b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103a2:	4b0c      	ldr	r3, [pc, #48]	@ (80103d4 <prvInsertBlockIntoFreeList+0xb0>)
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	e003      	b.n	80103b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d002      	beq.n	80103c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	20005244 	.word	0x20005244
 80103d4:	2000524c 	.word	0x2000524c

080103d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80103dc:	2201      	movs	r2, #1
 80103de:	490e      	ldr	r1, [pc, #56]	@ (8010418 <MX_USB_HOST_Init+0x40>)
 80103e0:	480e      	ldr	r0, [pc, #56]	@ (801041c <MX_USB_HOST_Init+0x44>)
 80103e2:	f7f9 febb 	bl	800a15c <USBH_Init>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80103ec:	f7f2 ffc6 	bl	800337c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80103f0:	490b      	ldr	r1, [pc, #44]	@ (8010420 <MX_USB_HOST_Init+0x48>)
 80103f2:	480a      	ldr	r0, [pc, #40]	@ (801041c <MX_USB_HOST_Init+0x44>)
 80103f4:	f7f9 ff62 	bl	800a2bc <USBH_RegisterClass>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80103fe:	f7f2 ffbd 	bl	800337c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010402:	4806      	ldr	r0, [pc, #24]	@ (801041c <MX_USB_HOST_Init+0x44>)
 8010404:	f7f9 ffe6 	bl	800a3d4 <USBH_Start>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801040e:	f7f2 ffb5 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010412:	bf00      	nop
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08010425 	.word	0x08010425
 801041c:	20005264 	.word	0x20005264
 8010420:	20000238 	.word	0x20000238

08010424 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	460b      	mov	r3, r1
 801042e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010430:	78fb      	ldrb	r3, [r7, #3]
 8010432:	3b01      	subs	r3, #1
 8010434:	2b04      	cmp	r3, #4
 8010436:	d819      	bhi.n	801046c <USBH_UserProcess+0x48>
 8010438:	a201      	add	r2, pc, #4	@ (adr r2, 8010440 <USBH_UserProcess+0x1c>)
 801043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801043e:	bf00      	nop
 8010440:	0801046d 	.word	0x0801046d
 8010444:	0801045d 	.word	0x0801045d
 8010448:	0801046d 	.word	0x0801046d
 801044c:	08010465 	.word	0x08010465
 8010450:	08010455 	.word	0x08010455
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010454:	4b09      	ldr	r3, [pc, #36]	@ (801047c <USBH_UserProcess+0x58>)
 8010456:	2203      	movs	r2, #3
 8010458:	701a      	strb	r2, [r3, #0]
  break;
 801045a:	e008      	b.n	801046e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801045c:	4b07      	ldr	r3, [pc, #28]	@ (801047c <USBH_UserProcess+0x58>)
 801045e:	2202      	movs	r2, #2
 8010460:	701a      	strb	r2, [r3, #0]
  break;
 8010462:	e004      	b.n	801046e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010464:	4b05      	ldr	r3, [pc, #20]	@ (801047c <USBH_UserProcess+0x58>)
 8010466:	2201      	movs	r2, #1
 8010468:	701a      	strb	r2, [r3, #0]
  break;
 801046a:	e000      	b.n	801046e <USBH_UserProcess+0x4a>

  default:
  break;
 801046c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801046e:	bf00      	nop
 8010470:	370c      	adds	r7, #12
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	20005648 	.word	0x20005648

08010480 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b08a      	sub	sp, #40	@ 0x28
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010488:	f107 0314 	add.w	r3, r7, #20
 801048c:	2200      	movs	r2, #0
 801048e:	601a      	str	r2, [r3, #0]
 8010490:	605a      	str	r2, [r3, #4]
 8010492:	609a      	str	r2, [r3, #8]
 8010494:	60da      	str	r2, [r3, #12]
 8010496:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80104a0:	d147      	bne.n	8010532 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104a2:	2300      	movs	r3, #0
 80104a4:	613b      	str	r3, [r7, #16]
 80104a6:	4b25      	ldr	r3, [pc, #148]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 80104a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104aa:	4a24      	ldr	r2, [pc, #144]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 80104ac:	f043 0301 	orr.w	r3, r3, #1
 80104b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80104b2:	4b22      	ldr	r3, [pc, #136]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 80104b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104b6:	f003 0301 	and.w	r3, r3, #1
 80104ba:	613b      	str	r3, [r7, #16]
 80104bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80104be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80104c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80104c4:	2300      	movs	r3, #0
 80104c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104c8:	2300      	movs	r3, #0
 80104ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80104cc:	f107 0314 	add.w	r3, r7, #20
 80104d0:	4619      	mov	r1, r3
 80104d2:	481b      	ldr	r0, [pc, #108]	@ (8010540 <HAL_HCD_MspInit+0xc0>)
 80104d4:	f7f3 fce4 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80104d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80104dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104de:	2302      	movs	r3, #2
 80104e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104e2:	2300      	movs	r3, #0
 80104e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80104e6:	2300      	movs	r3, #0
 80104e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104ea:	230a      	movs	r3, #10
 80104ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104ee:	f107 0314 	add.w	r3, r7, #20
 80104f2:	4619      	mov	r1, r3
 80104f4:	4812      	ldr	r0, [pc, #72]	@ (8010540 <HAL_HCD_MspInit+0xc0>)
 80104f6:	f7f3 fcd3 	bl	8003ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104fa:	4b10      	ldr	r3, [pc, #64]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 80104fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104fe:	4a0f      	ldr	r2, [pc, #60]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 8010500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010504:	6353      	str	r3, [r2, #52]	@ 0x34
 8010506:	2300      	movs	r3, #0
 8010508:	60fb      	str	r3, [r7, #12]
 801050a:	4b0c      	ldr	r3, [pc, #48]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 801050c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801050e:	4a0b      	ldr	r2, [pc, #44]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 8010510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010514:	6453      	str	r3, [r2, #68]	@ 0x44
 8010516:	4b09      	ldr	r3, [pc, #36]	@ (801053c <HAL_HCD_MspInit+0xbc>)
 8010518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801051a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801051e:	60fb      	str	r3, [r7, #12]
 8010520:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010522:	2200      	movs	r2, #0
 8010524:	2105      	movs	r1, #5
 8010526:	2043      	movs	r0, #67	@ 0x43
 8010528:	f7f3 fbfe 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801052c:	2043      	movs	r0, #67	@ 0x43
 801052e:	f7f3 fc17 	bl	8003d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010532:	bf00      	nop
 8010534:	3728      	adds	r7, #40	@ 0x28
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	40023800 	.word	0x40023800
 8010540:	40020000 	.word	0x40020000

08010544 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010552:	4618      	mov	r0, r3
 8010554:	f7fa fbef 	bl	800ad36 <USBH_LL_IncTimer>
}
 8010558:	bf00      	nop
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801056e:	4618      	mov	r0, r3
 8010570:	f7fa fc33 	bl	800adda <USBH_LL_Connect>
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801058a:	4618      	mov	r0, r3
 801058c:	f7fa fc48 	bl	800ae20 <USBH_LL_Disconnect>
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
 80105a4:	4613      	mov	r3, r2
 80105a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fa fc7f 	bl	800aeb2 <USBH_LL_NotifyURBChange>
#endif
}
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fa fbdd 	bl	800ad8a <USBH_LL_PortEnabled>
}
 80105d0:	bf00      	nop
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fa fbe9 	bl	800adbe <USBH_LL_PortDisabled>
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010602:	2b01      	cmp	r3, #1
 8010604:	d12a      	bne.n	801065c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010606:	4a18      	ldr	r2, [pc, #96]	@ (8010668 <USBH_LL_Init+0x74>)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4a15      	ldr	r2, [pc, #84]	@ (8010668 <USBH_LL_Init+0x74>)
 8010612:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010616:	4b14      	ldr	r3, [pc, #80]	@ (8010668 <USBH_LL_Init+0x74>)
 8010618:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801061c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801061e:	4b12      	ldr	r3, [pc, #72]	@ (8010668 <USBH_LL_Init+0x74>)
 8010620:	2208      	movs	r2, #8
 8010622:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010624:	4b10      	ldr	r3, [pc, #64]	@ (8010668 <USBH_LL_Init+0x74>)
 8010626:	2201      	movs	r2, #1
 8010628:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801062a:	4b0f      	ldr	r3, [pc, #60]	@ (8010668 <USBH_LL_Init+0x74>)
 801062c:	2200      	movs	r2, #0
 801062e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010630:	4b0d      	ldr	r3, [pc, #52]	@ (8010668 <USBH_LL_Init+0x74>)
 8010632:	2202      	movs	r2, #2
 8010634:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010636:	4b0c      	ldr	r3, [pc, #48]	@ (8010668 <USBH_LL_Init+0x74>)
 8010638:	2200      	movs	r2, #0
 801063a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801063c:	480a      	ldr	r0, [pc, #40]	@ (8010668 <USBH_LL_Init+0x74>)
 801063e:	f7f3 fe3a 	bl	80042b6 <HAL_HCD_Init>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010648:	f7f2 fe98 	bl	800337c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801064c:	4806      	ldr	r0, [pc, #24]	@ (8010668 <USBH_LL_Init+0x74>)
 801064e:	f7f4 fa1e 	bl	8004a8e <HAL_HCD_GetCurrentFrame>
 8010652:	4603      	mov	r3, r0
 8010654:	4619      	mov	r1, r3
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f7fa fb5e 	bl	800ad18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801065c:	2300      	movs	r3, #0
}
 801065e:	4618      	mov	r0, r3
 8010660:	3708      	adds	r7, #8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2000564c 	.word	0x2000564c

0801066c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010682:	4618      	mov	r0, r3
 8010684:	f7f4 f98d 	bl	80049a2 <HAL_HCD_Start>
 8010688:	4603      	mov	r3, r0
 801068a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801068c:	7bfb      	ldrb	r3, [r7, #15]
 801068e:	4618      	mov	r0, r3
 8010690:	f000 f95c 	bl	801094c <USBH_Get_USB_Status>
 8010694:	4603      	mov	r3, r0
 8010696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010698:	7bbb      	ldrb	r3, [r7, #14]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b084      	sub	sp, #16
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f4 f995 	bl	80049e8 <HAL_HCD_Stop>
 80106be:	4603      	mov	r3, r0
 80106c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106c2:	7bfb      	ldrb	r3, [r7, #15]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 f941 	bl	801094c <USBH_Get_USB_Status>
 80106ca:	4603      	mov	r3, r0
 80106cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3710      	adds	r7, #16
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80106e0:	2301      	movs	r3, #1
 80106e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f4 f9dd 	bl	8004aaa <HAL_HCD_GetCurrentSpeed>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d00c      	beq.n	8010710 <USBH_LL_GetSpeed+0x38>
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	d80d      	bhi.n	8010716 <USBH_LL_GetSpeed+0x3e>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d002      	beq.n	8010704 <USBH_LL_GetSpeed+0x2c>
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d003      	beq.n	801070a <USBH_LL_GetSpeed+0x32>
 8010702:	e008      	b.n	8010716 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010704:	2300      	movs	r3, #0
 8010706:	73fb      	strb	r3, [r7, #15]
    break;
 8010708:	e008      	b.n	801071c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801070a:	2301      	movs	r3, #1
 801070c:	73fb      	strb	r3, [r7, #15]
    break;
 801070e:	e005      	b.n	801071c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010710:	2302      	movs	r3, #2
 8010712:	73fb      	strb	r3, [r7, #15]
    break;
 8010714:	e002      	b.n	801071c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010716:	2301      	movs	r3, #1
 8010718:	73fb      	strb	r3, [r7, #15]
    break;
 801071a:	bf00      	nop
  }
  return  speed;
 801071c:	7bfb      	ldrb	r3, [r7, #15]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b084      	sub	sp, #16
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801073c:	4618      	mov	r0, r3
 801073e:	f7f4 f970 	bl	8004a22 <HAL_HCD_ResetPort>
 8010742:	4603      	mov	r3, r0
 8010744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010746:	7bfb      	ldrb	r3, [r7, #15]
 8010748:	4618      	mov	r0, r3
 801074a:	f000 f8ff 	bl	801094c <USBH_Get_USB_Status>
 801074e:	4603      	mov	r3, r0
 8010750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010752:	7bbb      	ldrb	r3, [r7, #14]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3710      	adds	r7, #16
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	460b      	mov	r3, r1
 8010766:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801076e:	78fa      	ldrb	r2, [r7, #3]
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f7f4 f977 	bl	8004a66 <HAL_HCD_HC_GetXferCount>
 8010778:	4603      	mov	r3, r0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010782:	b590      	push	{r4, r7, lr}
 8010784:	b089      	sub	sp, #36	@ 0x24
 8010786:	af04      	add	r7, sp, #16
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	4608      	mov	r0, r1
 801078c:	4611      	mov	r1, r2
 801078e:	461a      	mov	r2, r3
 8010790:	4603      	mov	r3, r0
 8010792:	70fb      	strb	r3, [r7, #3]
 8010794:	460b      	mov	r3, r1
 8010796:	70bb      	strb	r3, [r7, #2]
 8010798:	4613      	mov	r3, r2
 801079a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80107aa:	787c      	ldrb	r4, [r7, #1]
 80107ac:	78ba      	ldrb	r2, [r7, #2]
 80107ae:	78f9      	ldrb	r1, [r7, #3]
 80107b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107b2:	9302      	str	r3, [sp, #8]
 80107b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80107b8:	9301      	str	r3, [sp, #4]
 80107ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	4623      	mov	r3, r4
 80107c2:	f7f3 fdda 	bl	800437a <HAL_HCD_HC_Init>
 80107c6:	4603      	mov	r3, r0
 80107c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 f8bd 	bl	801094c <USBH_Get_USB_Status>
 80107d2:	4603      	mov	r3, r0
 80107d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3714      	adds	r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd90      	pop	{r4, r7, pc}

080107e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107fa:	78fa      	ldrb	r2, [r7, #3]
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f3 fe4a 	bl	8004498 <HAL_HCD_HC_Halt>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010808:	7bfb      	ldrb	r3, [r7, #15]
 801080a:	4618      	mov	r0, r3
 801080c:	f000 f89e 	bl	801094c <USBH_Get_USB_Status>
 8010810:	4603      	mov	r3, r0
 8010812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010814:	7bbb      	ldrb	r3, [r7, #14]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801081e:	b590      	push	{r4, r7, lr}
 8010820:	b089      	sub	sp, #36	@ 0x24
 8010822:	af04      	add	r7, sp, #16
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	4608      	mov	r0, r1
 8010828:	4611      	mov	r1, r2
 801082a:	461a      	mov	r2, r3
 801082c:	4603      	mov	r3, r0
 801082e:	70fb      	strb	r3, [r7, #3]
 8010830:	460b      	mov	r3, r1
 8010832:	70bb      	strb	r3, [r7, #2]
 8010834:	4613      	mov	r3, r2
 8010836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010846:	787c      	ldrb	r4, [r7, #1]
 8010848:	78ba      	ldrb	r2, [r7, #2]
 801084a:	78f9      	ldrb	r1, [r7, #3]
 801084c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010850:	9303      	str	r3, [sp, #12]
 8010852:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010854:	9302      	str	r3, [sp, #8]
 8010856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010858:	9301      	str	r3, [sp, #4]
 801085a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	4623      	mov	r3, r4
 8010862:	f7f3 fe3d 	bl	80044e0 <HAL_HCD_HC_SubmitRequest>
 8010866:	4603      	mov	r3, r0
 8010868:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801086a:	7bfb      	ldrb	r3, [r7, #15]
 801086c:	4618      	mov	r0, r3
 801086e:	f000 f86d 	bl	801094c <USBH_Get_USB_Status>
 8010872:	4603      	mov	r3, r0
 8010874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010876:	7bbb      	ldrb	r3, [r7, #14]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	bd90      	pop	{r4, r7, pc}

08010880 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010892:	78fa      	ldrb	r2, [r7, #3]
 8010894:	4611      	mov	r1, r2
 8010896:	4618      	mov	r0, r3
 8010898:	f7f4 f8d1 	bl	8004a3e <HAL_HCD_HC_GetURBState>
 801089c:	4603      	mov	r3, r0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b082      	sub	sp, #8
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	460b      	mov	r3, r1
 80108b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d103      	bne.n	80108c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80108bc:	78fb      	ldrb	r3, [r7, #3]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 f870 	bl	80109a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80108c4:	20c8      	movs	r0, #200	@ 0xc8
 80108c6:	f7f3 f953 	bl	8003b70 <HAL_Delay>
  return USBH_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	460b      	mov	r3, r1
 80108de:	70fb      	strb	r3, [r7, #3]
 80108e0:	4613      	mov	r3, r2
 80108e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80108ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	212c      	movs	r1, #44	@ 0x2c
 80108f2:	fb01 f303 	mul.w	r3, r1, r3
 80108f6:	4413      	add	r3, r2
 80108f8:	333b      	adds	r3, #59	@ 0x3b
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d009      	beq.n	8010914 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010900:	78fb      	ldrb	r3, [r7, #3]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	212c      	movs	r1, #44	@ 0x2c
 8010906:	fb01 f303 	mul.w	r3, r1, r3
 801090a:	4413      	add	r3, r2
 801090c:	3354      	adds	r3, #84	@ 0x54
 801090e:	78ba      	ldrb	r2, [r7, #2]
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	e008      	b.n	8010926 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010914:	78fb      	ldrb	r3, [r7, #3]
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	212c      	movs	r1, #44	@ 0x2c
 801091a:	fb01 f303 	mul.w	r3, r1, r3
 801091e:	4413      	add	r3, r2
 8010920:	3355      	adds	r3, #85	@ 0x55
 8010922:	78ba      	ldrb	r2, [r7, #2]
 8010924:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010926:	2300      	movs	r3, #0
}
 8010928:	4618      	mov	r0, r3
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7f3 f917 	bl	8003b70 <HAL_Delay>
}
 8010942:	bf00      	nop
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
	...

0801094c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010956:	2300      	movs	r3, #0
 8010958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	2b03      	cmp	r3, #3
 801095e:	d817      	bhi.n	8010990 <USBH_Get_USB_Status+0x44>
 8010960:	a201      	add	r2, pc, #4	@ (adr r2, 8010968 <USBH_Get_USB_Status+0x1c>)
 8010962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010966:	bf00      	nop
 8010968:	08010979 	.word	0x08010979
 801096c:	0801097f 	.word	0x0801097f
 8010970:	08010985 	.word	0x08010985
 8010974:	0801098b 	.word	0x0801098b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
    break;
 801097c:	e00b      	b.n	8010996 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801097e:	2302      	movs	r3, #2
 8010980:	73fb      	strb	r3, [r7, #15]
    break;
 8010982:	e008      	b.n	8010996 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010984:	2301      	movs	r3, #1
 8010986:	73fb      	strb	r3, [r7, #15]
    break;
 8010988:	e005      	b.n	8010996 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801098a:	2302      	movs	r3, #2
 801098c:	73fb      	strb	r3, [r7, #15]
    break;
 801098e:	e002      	b.n	8010996 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010990:	2302      	movs	r3, #2
 8010992:	73fb      	strb	r3, [r7, #15]
    break;
 8010994:	bf00      	nop
  }
  return usb_status;
 8010996:	7bfb      	ldrb	r3, [r7, #15]
}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80109ae:	79fb      	ldrb	r3, [r7, #7]
 80109b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d102      	bne.n	80109be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80109b8:	2301      	movs	r3, #1
 80109ba:	73fb      	strb	r3, [r7, #15]
 80109bc:	e001      	b.n	80109c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80109be:	2300      	movs	r3, #0
 80109c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	461a      	mov	r2, r3
 80109c6:	2101      	movs	r1, #1
 80109c8:	4803      	ldr	r0, [pc, #12]	@ (80109d8 <MX_DriverVbusFS+0x34>)
 80109ca:	f7f3 fc1d 	bl	8004208 <HAL_GPIO_WritePin>
}
 80109ce:	bf00      	nop
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	40020800 	.word	0x40020800

080109dc <atoi>:
 80109dc:	220a      	movs	r2, #10
 80109de:	2100      	movs	r1, #0
 80109e0:	f000 bf48 	b.w	8011874 <strtol>

080109e4 <malloc>:
 80109e4:	4b02      	ldr	r3, [pc, #8]	@ (80109f0 <malloc+0xc>)
 80109e6:	4601      	mov	r1, r0
 80109e8:	6818      	ldr	r0, [r3, #0]
 80109ea:	f000 b82d 	b.w	8010a48 <_malloc_r>
 80109ee:	bf00      	nop
 80109f0:	200003d4 	.word	0x200003d4

080109f4 <free>:
 80109f4:	4b02      	ldr	r3, [pc, #8]	@ (8010a00 <free+0xc>)
 80109f6:	4601      	mov	r1, r0
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	f002 bce9 	b.w	80133d0 <_free_r>
 80109fe:	bf00      	nop
 8010a00:	200003d4 	.word	0x200003d4

08010a04 <sbrk_aligned>:
 8010a04:	b570      	push	{r4, r5, r6, lr}
 8010a06:	4e0f      	ldr	r6, [pc, #60]	@ (8010a44 <sbrk_aligned+0x40>)
 8010a08:	460c      	mov	r4, r1
 8010a0a:	6831      	ldr	r1, [r6, #0]
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	b911      	cbnz	r1, 8010a16 <sbrk_aligned+0x12>
 8010a10:	f001 fe02 	bl	8012618 <_sbrk_r>
 8010a14:	6030      	str	r0, [r6, #0]
 8010a16:	4621      	mov	r1, r4
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f001 fdfd 	bl	8012618 <_sbrk_r>
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	d103      	bne.n	8010a2a <sbrk_aligned+0x26>
 8010a22:	f04f 34ff 	mov.w	r4, #4294967295
 8010a26:	4620      	mov	r0, r4
 8010a28:	bd70      	pop	{r4, r5, r6, pc}
 8010a2a:	1cc4      	adds	r4, r0, #3
 8010a2c:	f024 0403 	bic.w	r4, r4, #3
 8010a30:	42a0      	cmp	r0, r4
 8010a32:	d0f8      	beq.n	8010a26 <sbrk_aligned+0x22>
 8010a34:	1a21      	subs	r1, r4, r0
 8010a36:	4628      	mov	r0, r5
 8010a38:	f001 fdee 	bl	8012618 <_sbrk_r>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d1f2      	bne.n	8010a26 <sbrk_aligned+0x22>
 8010a40:	e7ef      	b.n	8010a22 <sbrk_aligned+0x1e>
 8010a42:	bf00      	nop
 8010a44:	20005950 	.word	0x20005950

08010a48 <_malloc_r>:
 8010a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a4c:	1ccd      	adds	r5, r1, #3
 8010a4e:	f025 0503 	bic.w	r5, r5, #3
 8010a52:	3508      	adds	r5, #8
 8010a54:	2d0c      	cmp	r5, #12
 8010a56:	bf38      	it	cc
 8010a58:	250c      	movcc	r5, #12
 8010a5a:	2d00      	cmp	r5, #0
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	db01      	blt.n	8010a64 <_malloc_r+0x1c>
 8010a60:	42a9      	cmp	r1, r5
 8010a62:	d904      	bls.n	8010a6e <_malloc_r+0x26>
 8010a64:	230c      	movs	r3, #12
 8010a66:	6033      	str	r3, [r6, #0]
 8010a68:	2000      	movs	r0, #0
 8010a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b44 <_malloc_r+0xfc>
 8010a72:	f000 f869 	bl	8010b48 <__malloc_lock>
 8010a76:	f8d8 3000 	ldr.w	r3, [r8]
 8010a7a:	461c      	mov	r4, r3
 8010a7c:	bb44      	cbnz	r4, 8010ad0 <_malloc_r+0x88>
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4630      	mov	r0, r6
 8010a82:	f7ff ffbf 	bl	8010a04 <sbrk_aligned>
 8010a86:	1c43      	adds	r3, r0, #1
 8010a88:	4604      	mov	r4, r0
 8010a8a:	d158      	bne.n	8010b3e <_malloc_r+0xf6>
 8010a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8010a90:	4627      	mov	r7, r4
 8010a92:	2f00      	cmp	r7, #0
 8010a94:	d143      	bne.n	8010b1e <_malloc_r+0xd6>
 8010a96:	2c00      	cmp	r4, #0
 8010a98:	d04b      	beq.n	8010b32 <_malloc_r+0xea>
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	4639      	mov	r1, r7
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	eb04 0903 	add.w	r9, r4, r3
 8010aa4:	f001 fdb8 	bl	8012618 <_sbrk_r>
 8010aa8:	4581      	cmp	r9, r0
 8010aaa:	d142      	bne.n	8010b32 <_malloc_r+0xea>
 8010aac:	6821      	ldr	r1, [r4, #0]
 8010aae:	1a6d      	subs	r5, r5, r1
 8010ab0:	4629      	mov	r1, r5
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7ff ffa6 	bl	8010a04 <sbrk_aligned>
 8010ab8:	3001      	adds	r0, #1
 8010aba:	d03a      	beq.n	8010b32 <_malloc_r+0xea>
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	442b      	add	r3, r5
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8010ac6:	685a      	ldr	r2, [r3, #4]
 8010ac8:	bb62      	cbnz	r2, 8010b24 <_malloc_r+0xdc>
 8010aca:	f8c8 7000 	str.w	r7, [r8]
 8010ace:	e00f      	b.n	8010af0 <_malloc_r+0xa8>
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	1b52      	subs	r2, r2, r5
 8010ad4:	d420      	bmi.n	8010b18 <_malloc_r+0xd0>
 8010ad6:	2a0b      	cmp	r2, #11
 8010ad8:	d917      	bls.n	8010b0a <_malloc_r+0xc2>
 8010ada:	1961      	adds	r1, r4, r5
 8010adc:	42a3      	cmp	r3, r4
 8010ade:	6025      	str	r5, [r4, #0]
 8010ae0:	bf18      	it	ne
 8010ae2:	6059      	strne	r1, [r3, #4]
 8010ae4:	6863      	ldr	r3, [r4, #4]
 8010ae6:	bf08      	it	eq
 8010ae8:	f8c8 1000 	streq.w	r1, [r8]
 8010aec:	5162      	str	r2, [r4, r5]
 8010aee:	604b      	str	r3, [r1, #4]
 8010af0:	4630      	mov	r0, r6
 8010af2:	f000 f82f 	bl	8010b54 <__malloc_unlock>
 8010af6:	f104 000b 	add.w	r0, r4, #11
 8010afa:	1d23      	adds	r3, r4, #4
 8010afc:	f020 0007 	bic.w	r0, r0, #7
 8010b00:	1ac2      	subs	r2, r0, r3
 8010b02:	bf1c      	itt	ne
 8010b04:	1a1b      	subne	r3, r3, r0
 8010b06:	50a3      	strne	r3, [r4, r2]
 8010b08:	e7af      	b.n	8010a6a <_malloc_r+0x22>
 8010b0a:	6862      	ldr	r2, [r4, #4]
 8010b0c:	42a3      	cmp	r3, r4
 8010b0e:	bf0c      	ite	eq
 8010b10:	f8c8 2000 	streq.w	r2, [r8]
 8010b14:	605a      	strne	r2, [r3, #4]
 8010b16:	e7eb      	b.n	8010af0 <_malloc_r+0xa8>
 8010b18:	4623      	mov	r3, r4
 8010b1a:	6864      	ldr	r4, [r4, #4]
 8010b1c:	e7ae      	b.n	8010a7c <_malloc_r+0x34>
 8010b1e:	463c      	mov	r4, r7
 8010b20:	687f      	ldr	r7, [r7, #4]
 8010b22:	e7b6      	b.n	8010a92 <_malloc_r+0x4a>
 8010b24:	461a      	mov	r2, r3
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	42a3      	cmp	r3, r4
 8010b2a:	d1fb      	bne.n	8010b24 <_malloc_r+0xdc>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	6053      	str	r3, [r2, #4]
 8010b30:	e7de      	b.n	8010af0 <_malloc_r+0xa8>
 8010b32:	230c      	movs	r3, #12
 8010b34:	6033      	str	r3, [r6, #0]
 8010b36:	4630      	mov	r0, r6
 8010b38:	f000 f80c 	bl	8010b54 <__malloc_unlock>
 8010b3c:	e794      	b.n	8010a68 <_malloc_r+0x20>
 8010b3e:	6005      	str	r5, [r0, #0]
 8010b40:	e7d6      	b.n	8010af0 <_malloc_r+0xa8>
 8010b42:	bf00      	nop
 8010b44:	20005954 	.word	0x20005954

08010b48 <__malloc_lock>:
 8010b48:	4801      	ldr	r0, [pc, #4]	@ (8010b50 <__malloc_lock+0x8>)
 8010b4a:	f001 bdb2 	b.w	80126b2 <__retarget_lock_acquire_recursive>
 8010b4e:	bf00      	nop
 8010b50:	20005a98 	.word	0x20005a98

08010b54 <__malloc_unlock>:
 8010b54:	4801      	ldr	r0, [pc, #4]	@ (8010b5c <__malloc_unlock+0x8>)
 8010b56:	f001 bdad 	b.w	80126b4 <__retarget_lock_release_recursive>
 8010b5a:	bf00      	nop
 8010b5c:	20005a98 	.word	0x20005a98

08010b60 <sulp>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	4604      	mov	r4, r0
 8010b64:	460d      	mov	r5, r1
 8010b66:	ec45 4b10 	vmov	d0, r4, r5
 8010b6a:	4616      	mov	r6, r2
 8010b6c:	f003 fb3a 	bl	80141e4 <__ulp>
 8010b70:	ec51 0b10 	vmov	r0, r1, d0
 8010b74:	b17e      	cbz	r6, 8010b96 <sulp+0x36>
 8010b76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010b7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	dd09      	ble.n	8010b96 <sulp+0x36>
 8010b82:	051b      	lsls	r3, r3, #20
 8010b84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010b88:	2400      	movs	r4, #0
 8010b8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010b8e:	4622      	mov	r2, r4
 8010b90:	462b      	mov	r3, r5
 8010b92:	f7ef fd31 	bl	80005f8 <__aeabi_dmul>
 8010b96:	ec41 0b10 	vmov	d0, r0, r1
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	0000      	movs	r0, r0
	...

08010ba0 <_strtod_l>:
 8010ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba4:	b09f      	sub	sp, #124	@ 0x7c
 8010ba6:	460c      	mov	r4, r1
 8010ba8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010baa:	2200      	movs	r2, #0
 8010bac:	921a      	str	r2, [sp, #104]	@ 0x68
 8010bae:	9005      	str	r0, [sp, #20]
 8010bb0:	f04f 0a00 	mov.w	sl, #0
 8010bb4:	f04f 0b00 	mov.w	fp, #0
 8010bb8:	460a      	mov	r2, r1
 8010bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8010bbc:	7811      	ldrb	r1, [r2, #0]
 8010bbe:	292b      	cmp	r1, #43	@ 0x2b
 8010bc0:	d04a      	beq.n	8010c58 <_strtod_l+0xb8>
 8010bc2:	d838      	bhi.n	8010c36 <_strtod_l+0x96>
 8010bc4:	290d      	cmp	r1, #13
 8010bc6:	d832      	bhi.n	8010c2e <_strtod_l+0x8e>
 8010bc8:	2908      	cmp	r1, #8
 8010bca:	d832      	bhi.n	8010c32 <_strtod_l+0x92>
 8010bcc:	2900      	cmp	r1, #0
 8010bce:	d03b      	beq.n	8010c48 <_strtod_l+0xa8>
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010bd6:	782a      	ldrb	r2, [r5, #0]
 8010bd8:	2a30      	cmp	r2, #48	@ 0x30
 8010bda:	f040 80b3 	bne.w	8010d44 <_strtod_l+0x1a4>
 8010bde:	786a      	ldrb	r2, [r5, #1]
 8010be0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010be4:	2a58      	cmp	r2, #88	@ 0x58
 8010be6:	d16e      	bne.n	8010cc6 <_strtod_l+0x126>
 8010be8:	9302      	str	r3, [sp, #8]
 8010bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bec:	9301      	str	r3, [sp, #4]
 8010bee:	ab1a      	add	r3, sp, #104	@ 0x68
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	4a8e      	ldr	r2, [pc, #568]	@ (8010e2c <_strtod_l+0x28c>)
 8010bf4:	9805      	ldr	r0, [sp, #20]
 8010bf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010bf8:	a919      	add	r1, sp, #100	@ 0x64
 8010bfa:	f002 fc9b 	bl	8013534 <__gethex>
 8010bfe:	f010 060f 	ands.w	r6, r0, #15
 8010c02:	4604      	mov	r4, r0
 8010c04:	d005      	beq.n	8010c12 <_strtod_l+0x72>
 8010c06:	2e06      	cmp	r6, #6
 8010c08:	d128      	bne.n	8010c5c <_strtod_l+0xbc>
 8010c0a:	3501      	adds	r5, #1
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f040 858e 	bne.w	8011736 <_strtod_l+0xb96>
 8010c1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c1c:	b1cb      	cbz	r3, 8010c52 <_strtod_l+0xb2>
 8010c1e:	4652      	mov	r2, sl
 8010c20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010c24:	ec43 2b10 	vmov	d0, r2, r3
 8010c28:	b01f      	add	sp, #124	@ 0x7c
 8010c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c2e:	2920      	cmp	r1, #32
 8010c30:	d1ce      	bne.n	8010bd0 <_strtod_l+0x30>
 8010c32:	3201      	adds	r2, #1
 8010c34:	e7c1      	b.n	8010bba <_strtod_l+0x1a>
 8010c36:	292d      	cmp	r1, #45	@ 0x2d
 8010c38:	d1ca      	bne.n	8010bd0 <_strtod_l+0x30>
 8010c3a:	2101      	movs	r1, #1
 8010c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010c3e:	1c51      	adds	r1, r2, #1
 8010c40:	9119      	str	r1, [sp, #100]	@ 0x64
 8010c42:	7852      	ldrb	r2, [r2, #1]
 8010c44:	2a00      	cmp	r2, #0
 8010c46:	d1c5      	bne.n	8010bd4 <_strtod_l+0x34>
 8010c48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f040 8570 	bne.w	8011732 <_strtod_l+0xb92>
 8010c52:	4652      	mov	r2, sl
 8010c54:	465b      	mov	r3, fp
 8010c56:	e7e5      	b.n	8010c24 <_strtod_l+0x84>
 8010c58:	2100      	movs	r1, #0
 8010c5a:	e7ef      	b.n	8010c3c <_strtod_l+0x9c>
 8010c5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010c5e:	b13a      	cbz	r2, 8010c70 <_strtod_l+0xd0>
 8010c60:	2135      	movs	r1, #53	@ 0x35
 8010c62:	a81c      	add	r0, sp, #112	@ 0x70
 8010c64:	f003 fbb8 	bl	80143d8 <__copybits>
 8010c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c6a:	9805      	ldr	r0, [sp, #20]
 8010c6c:	f002 ff86 	bl	8013b7c <_Bfree>
 8010c70:	3e01      	subs	r6, #1
 8010c72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010c74:	2e04      	cmp	r6, #4
 8010c76:	d806      	bhi.n	8010c86 <_strtod_l+0xe6>
 8010c78:	e8df f006 	tbb	[pc, r6]
 8010c7c:	201d0314 	.word	0x201d0314
 8010c80:	14          	.byte	0x14
 8010c81:	00          	.byte	0x00
 8010c82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010c86:	05e1      	lsls	r1, r4, #23
 8010c88:	bf48      	it	mi
 8010c8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010c8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c92:	0d1b      	lsrs	r3, r3, #20
 8010c94:	051b      	lsls	r3, r3, #20
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d1bb      	bne.n	8010c12 <_strtod_l+0x72>
 8010c9a:	f001 fcdf 	bl	801265c <__errno>
 8010c9e:	2322      	movs	r3, #34	@ 0x22
 8010ca0:	6003      	str	r3, [r0, #0]
 8010ca2:	e7b6      	b.n	8010c12 <_strtod_l+0x72>
 8010ca4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010ca8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010cac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010cb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010cb4:	e7e7      	b.n	8010c86 <_strtod_l+0xe6>
 8010cb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010e34 <_strtod_l+0x294>
 8010cba:	e7e4      	b.n	8010c86 <_strtod_l+0xe6>
 8010cbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8010cc4:	e7df      	b.n	8010c86 <_strtod_l+0xe6>
 8010cc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ccc:	785b      	ldrb	r3, [r3, #1]
 8010cce:	2b30      	cmp	r3, #48	@ 0x30
 8010cd0:	d0f9      	beq.n	8010cc6 <_strtod_l+0x126>
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d09d      	beq.n	8010c12 <_strtod_l+0x72>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cde:	2300      	movs	r3, #0
 8010ce0:	9308      	str	r3, [sp, #32]
 8010ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ce4:	461f      	mov	r7, r3
 8010ce6:	220a      	movs	r2, #10
 8010ce8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010cea:	7805      	ldrb	r5, [r0, #0]
 8010cec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010cf0:	b2d9      	uxtb	r1, r3
 8010cf2:	2909      	cmp	r1, #9
 8010cf4:	d928      	bls.n	8010d48 <_strtod_l+0x1a8>
 8010cf6:	494e      	ldr	r1, [pc, #312]	@ (8010e30 <_strtod_l+0x290>)
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	f001 fb90 	bl	801241e <strncmp>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d032      	beq.n	8010d68 <_strtod_l+0x1c8>
 8010d02:	2000      	movs	r0, #0
 8010d04:	462a      	mov	r2, r5
 8010d06:	4681      	mov	r9, r0
 8010d08:	463d      	mov	r5, r7
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2a65      	cmp	r2, #101	@ 0x65
 8010d0e:	d001      	beq.n	8010d14 <_strtod_l+0x174>
 8010d10:	2a45      	cmp	r2, #69	@ 0x45
 8010d12:	d114      	bne.n	8010d3e <_strtod_l+0x19e>
 8010d14:	b91d      	cbnz	r5, 8010d1e <_strtod_l+0x17e>
 8010d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d18:	4302      	orrs	r2, r0
 8010d1a:	d095      	beq.n	8010c48 <_strtod_l+0xa8>
 8010d1c:	2500      	movs	r5, #0
 8010d1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010d20:	1c62      	adds	r2, r4, #1
 8010d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d24:	7862      	ldrb	r2, [r4, #1]
 8010d26:	2a2b      	cmp	r2, #43	@ 0x2b
 8010d28:	d077      	beq.n	8010e1a <_strtod_l+0x27a>
 8010d2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010d2c:	d07b      	beq.n	8010e26 <_strtod_l+0x286>
 8010d2e:	f04f 0c00 	mov.w	ip, #0
 8010d32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010d36:	2909      	cmp	r1, #9
 8010d38:	f240 8082 	bls.w	8010e40 <_strtod_l+0x2a0>
 8010d3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010d3e:	f04f 0800 	mov.w	r8, #0
 8010d42:	e0a2      	b.n	8010e8a <_strtod_l+0x2ea>
 8010d44:	2300      	movs	r3, #0
 8010d46:	e7c7      	b.n	8010cd8 <_strtod_l+0x138>
 8010d48:	2f08      	cmp	r7, #8
 8010d4a:	bfd5      	itete	le
 8010d4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010d4e:	9908      	ldrgt	r1, [sp, #32]
 8010d50:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010d58:	f100 0001 	add.w	r0, r0, #1
 8010d5c:	bfd4      	ite	le
 8010d5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010d60:	9308      	strgt	r3, [sp, #32]
 8010d62:	3701      	adds	r7, #1
 8010d64:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d66:	e7bf      	b.n	8010ce8 <_strtod_l+0x148>
 8010d68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d6e:	785a      	ldrb	r2, [r3, #1]
 8010d70:	b37f      	cbz	r7, 8010dd2 <_strtod_l+0x232>
 8010d72:	4681      	mov	r9, r0
 8010d74:	463d      	mov	r5, r7
 8010d76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010d7a:	2b09      	cmp	r3, #9
 8010d7c:	d912      	bls.n	8010da4 <_strtod_l+0x204>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e7c4      	b.n	8010d0c <_strtod_l+0x16c>
 8010d82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d88:	785a      	ldrb	r2, [r3, #1]
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	2a30      	cmp	r2, #48	@ 0x30
 8010d8e:	d0f8      	beq.n	8010d82 <_strtod_l+0x1e2>
 8010d90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010d94:	2b08      	cmp	r3, #8
 8010d96:	f200 84d3 	bhi.w	8011740 <_strtod_l+0xba0>
 8010d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d9e:	4681      	mov	r9, r0
 8010da0:	2000      	movs	r0, #0
 8010da2:	4605      	mov	r5, r0
 8010da4:	3a30      	subs	r2, #48	@ 0x30
 8010da6:	f100 0301 	add.w	r3, r0, #1
 8010daa:	d02a      	beq.n	8010e02 <_strtod_l+0x262>
 8010dac:	4499      	add	r9, r3
 8010dae:	eb00 0c05 	add.w	ip, r0, r5
 8010db2:	462b      	mov	r3, r5
 8010db4:	210a      	movs	r1, #10
 8010db6:	4563      	cmp	r3, ip
 8010db8:	d10d      	bne.n	8010dd6 <_strtod_l+0x236>
 8010dba:	1c69      	adds	r1, r5, #1
 8010dbc:	4401      	add	r1, r0
 8010dbe:	4428      	add	r0, r5
 8010dc0:	2808      	cmp	r0, #8
 8010dc2:	dc16      	bgt.n	8010df2 <_strtod_l+0x252>
 8010dc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010dc6:	230a      	movs	r3, #10
 8010dc8:	fb03 2300 	mla	r3, r3, r0, r2
 8010dcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8010dce:	2300      	movs	r3, #0
 8010dd0:	e018      	b.n	8010e04 <_strtod_l+0x264>
 8010dd2:	4638      	mov	r0, r7
 8010dd4:	e7da      	b.n	8010d8c <_strtod_l+0x1ec>
 8010dd6:	2b08      	cmp	r3, #8
 8010dd8:	f103 0301 	add.w	r3, r3, #1
 8010ddc:	dc03      	bgt.n	8010de6 <_strtod_l+0x246>
 8010dde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010de0:	434e      	muls	r6, r1
 8010de2:	960a      	str	r6, [sp, #40]	@ 0x28
 8010de4:	e7e7      	b.n	8010db6 <_strtod_l+0x216>
 8010de6:	2b10      	cmp	r3, #16
 8010de8:	bfde      	ittt	le
 8010dea:	9e08      	ldrle	r6, [sp, #32]
 8010dec:	434e      	mulle	r6, r1
 8010dee:	9608      	strle	r6, [sp, #32]
 8010df0:	e7e1      	b.n	8010db6 <_strtod_l+0x216>
 8010df2:	280f      	cmp	r0, #15
 8010df4:	dceb      	bgt.n	8010dce <_strtod_l+0x22e>
 8010df6:	9808      	ldr	r0, [sp, #32]
 8010df8:	230a      	movs	r3, #10
 8010dfa:	fb03 2300 	mla	r3, r3, r0, r2
 8010dfe:	9308      	str	r3, [sp, #32]
 8010e00:	e7e5      	b.n	8010dce <_strtod_l+0x22e>
 8010e02:	4629      	mov	r1, r5
 8010e04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e06:	1c50      	adds	r0, r2, #1
 8010e08:	9019      	str	r0, [sp, #100]	@ 0x64
 8010e0a:	7852      	ldrb	r2, [r2, #1]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	460d      	mov	r5, r1
 8010e10:	e7b1      	b.n	8010d76 <_strtod_l+0x1d6>
 8010e12:	f04f 0900 	mov.w	r9, #0
 8010e16:	2301      	movs	r3, #1
 8010e18:	e77d      	b.n	8010d16 <_strtod_l+0x176>
 8010e1a:	f04f 0c00 	mov.w	ip, #0
 8010e1e:	1ca2      	adds	r2, r4, #2
 8010e20:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e22:	78a2      	ldrb	r2, [r4, #2]
 8010e24:	e785      	b.n	8010d32 <_strtod_l+0x192>
 8010e26:	f04f 0c01 	mov.w	ip, #1
 8010e2a:	e7f8      	b.n	8010e1e <_strtod_l+0x27e>
 8010e2c:	08015924 	.word	0x08015924
 8010e30:	0801590c 	.word	0x0801590c
 8010e34:	7ff00000 	.word	0x7ff00000
 8010e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e3a:	1c51      	adds	r1, r2, #1
 8010e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010e3e:	7852      	ldrb	r2, [r2, #1]
 8010e40:	2a30      	cmp	r2, #48	@ 0x30
 8010e42:	d0f9      	beq.n	8010e38 <_strtod_l+0x298>
 8010e44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010e48:	2908      	cmp	r1, #8
 8010e4a:	f63f af78 	bhi.w	8010d3e <_strtod_l+0x19e>
 8010e4e:	3a30      	subs	r2, #48	@ 0x30
 8010e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010e56:	f04f 080a 	mov.w	r8, #10
 8010e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e5c:	1c56      	adds	r6, r2, #1
 8010e5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010e60:	7852      	ldrb	r2, [r2, #1]
 8010e62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010e66:	f1be 0f09 	cmp.w	lr, #9
 8010e6a:	d939      	bls.n	8010ee0 <_strtod_l+0x340>
 8010e6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010e6e:	1a76      	subs	r6, r6, r1
 8010e70:	2e08      	cmp	r6, #8
 8010e72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010e76:	dc03      	bgt.n	8010e80 <_strtod_l+0x2e0>
 8010e78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e7a:	4588      	cmp	r8, r1
 8010e7c:	bfa8      	it	ge
 8010e7e:	4688      	movge	r8, r1
 8010e80:	f1bc 0f00 	cmp.w	ip, #0
 8010e84:	d001      	beq.n	8010e8a <_strtod_l+0x2ea>
 8010e86:	f1c8 0800 	rsb	r8, r8, #0
 8010e8a:	2d00      	cmp	r5, #0
 8010e8c:	d14e      	bne.n	8010f2c <_strtod_l+0x38c>
 8010e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e90:	4308      	orrs	r0, r1
 8010e92:	f47f aebe 	bne.w	8010c12 <_strtod_l+0x72>
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f47f aed6 	bne.w	8010c48 <_strtod_l+0xa8>
 8010e9c:	2a69      	cmp	r2, #105	@ 0x69
 8010e9e:	d028      	beq.n	8010ef2 <_strtod_l+0x352>
 8010ea0:	dc25      	bgt.n	8010eee <_strtod_l+0x34e>
 8010ea2:	2a49      	cmp	r2, #73	@ 0x49
 8010ea4:	d025      	beq.n	8010ef2 <_strtod_l+0x352>
 8010ea6:	2a4e      	cmp	r2, #78	@ 0x4e
 8010ea8:	f47f aece 	bne.w	8010c48 <_strtod_l+0xa8>
 8010eac:	499b      	ldr	r1, [pc, #620]	@ (801111c <_strtod_l+0x57c>)
 8010eae:	a819      	add	r0, sp, #100	@ 0x64
 8010eb0:	f002 fd62 	bl	8013978 <__match>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	f43f aec7 	beq.w	8010c48 <_strtod_l+0xa8>
 8010eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	2b28      	cmp	r3, #40	@ 0x28
 8010ec0:	d12e      	bne.n	8010f20 <_strtod_l+0x380>
 8010ec2:	4997      	ldr	r1, [pc, #604]	@ (8011120 <_strtod_l+0x580>)
 8010ec4:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ec6:	a819      	add	r0, sp, #100	@ 0x64
 8010ec8:	f002 fd6a 	bl	80139a0 <__hexnan>
 8010ecc:	2805      	cmp	r0, #5
 8010ece:	d127      	bne.n	8010f20 <_strtod_l+0x380>
 8010ed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ed2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010ed6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010eda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010ede:	e698      	b.n	8010c12 <_strtod_l+0x72>
 8010ee0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010ee2:	fb08 2101 	mla	r1, r8, r1, r2
 8010ee6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8010eec:	e7b5      	b.n	8010e5a <_strtod_l+0x2ba>
 8010eee:	2a6e      	cmp	r2, #110	@ 0x6e
 8010ef0:	e7da      	b.n	8010ea8 <_strtod_l+0x308>
 8010ef2:	498c      	ldr	r1, [pc, #560]	@ (8011124 <_strtod_l+0x584>)
 8010ef4:	a819      	add	r0, sp, #100	@ 0x64
 8010ef6:	f002 fd3f 	bl	8013978 <__match>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	f43f aea4 	beq.w	8010c48 <_strtod_l+0xa8>
 8010f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f02:	4989      	ldr	r1, [pc, #548]	@ (8011128 <_strtod_l+0x588>)
 8010f04:	3b01      	subs	r3, #1
 8010f06:	a819      	add	r0, sp, #100	@ 0x64
 8010f08:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f0a:	f002 fd35 	bl	8013978 <__match>
 8010f0e:	b910      	cbnz	r0, 8010f16 <_strtod_l+0x376>
 8010f10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f12:	3301      	adds	r3, #1
 8010f14:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011138 <_strtod_l+0x598>
 8010f1a:	f04f 0a00 	mov.w	sl, #0
 8010f1e:	e678      	b.n	8010c12 <_strtod_l+0x72>
 8010f20:	4882      	ldr	r0, [pc, #520]	@ (801112c <_strtod_l+0x58c>)
 8010f22:	f001 fbe1 	bl	80126e8 <nan>
 8010f26:	ec5b ab10 	vmov	sl, fp, d0
 8010f2a:	e672      	b.n	8010c12 <_strtod_l+0x72>
 8010f2c:	eba8 0309 	sub.w	r3, r8, r9
 8010f30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	bf08      	it	eq
 8010f38:	462f      	moveq	r7, r5
 8010f3a:	2d10      	cmp	r5, #16
 8010f3c:	462c      	mov	r4, r5
 8010f3e:	bfa8      	it	ge
 8010f40:	2410      	movge	r4, #16
 8010f42:	f7ef fadf 	bl	8000504 <__aeabi_ui2d>
 8010f46:	2d09      	cmp	r5, #9
 8010f48:	4682      	mov	sl, r0
 8010f4a:	468b      	mov	fp, r1
 8010f4c:	dc13      	bgt.n	8010f76 <_strtod_l+0x3d6>
 8010f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f43f ae5e 	beq.w	8010c12 <_strtod_l+0x72>
 8010f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f58:	dd78      	ble.n	801104c <_strtod_l+0x4ac>
 8010f5a:	2b16      	cmp	r3, #22
 8010f5c:	dc5f      	bgt.n	801101e <_strtod_l+0x47e>
 8010f5e:	4974      	ldr	r1, [pc, #464]	@ (8011130 <_strtod_l+0x590>)
 8010f60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f68:	4652      	mov	r2, sl
 8010f6a:	465b      	mov	r3, fp
 8010f6c:	f7ef fb44 	bl	80005f8 <__aeabi_dmul>
 8010f70:	4682      	mov	sl, r0
 8010f72:	468b      	mov	fp, r1
 8010f74:	e64d      	b.n	8010c12 <_strtod_l+0x72>
 8010f76:	4b6e      	ldr	r3, [pc, #440]	@ (8011130 <_strtod_l+0x590>)
 8010f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010f80:	f7ef fb3a 	bl	80005f8 <__aeabi_dmul>
 8010f84:	4682      	mov	sl, r0
 8010f86:	9808      	ldr	r0, [sp, #32]
 8010f88:	468b      	mov	fp, r1
 8010f8a:	f7ef fabb 	bl	8000504 <__aeabi_ui2d>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	460b      	mov	r3, r1
 8010f92:	4650      	mov	r0, sl
 8010f94:	4659      	mov	r1, fp
 8010f96:	f7ef f979 	bl	800028c <__adddf3>
 8010f9a:	2d0f      	cmp	r5, #15
 8010f9c:	4682      	mov	sl, r0
 8010f9e:	468b      	mov	fp, r1
 8010fa0:	ddd5      	ble.n	8010f4e <_strtod_l+0x3ae>
 8010fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fa4:	1b2c      	subs	r4, r5, r4
 8010fa6:	441c      	add	r4, r3
 8010fa8:	2c00      	cmp	r4, #0
 8010faa:	f340 8096 	ble.w	80110da <_strtod_l+0x53a>
 8010fae:	f014 030f 	ands.w	r3, r4, #15
 8010fb2:	d00a      	beq.n	8010fca <_strtod_l+0x42a>
 8010fb4:	495e      	ldr	r1, [pc, #376]	@ (8011130 <_strtod_l+0x590>)
 8010fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fba:	4652      	mov	r2, sl
 8010fbc:	465b      	mov	r3, fp
 8010fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc2:	f7ef fb19 	bl	80005f8 <__aeabi_dmul>
 8010fc6:	4682      	mov	sl, r0
 8010fc8:	468b      	mov	fp, r1
 8010fca:	f034 040f 	bics.w	r4, r4, #15
 8010fce:	d073      	beq.n	80110b8 <_strtod_l+0x518>
 8010fd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010fd4:	dd48      	ble.n	8011068 <_strtod_l+0x4c8>
 8010fd6:	2400      	movs	r4, #0
 8010fd8:	46a0      	mov	r8, r4
 8010fda:	940a      	str	r4, [sp, #40]	@ 0x28
 8010fdc:	46a1      	mov	r9, r4
 8010fde:	9a05      	ldr	r2, [sp, #20]
 8010fe0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011138 <_strtod_l+0x598>
 8010fe4:	2322      	movs	r3, #34	@ 0x22
 8010fe6:	6013      	str	r3, [r2, #0]
 8010fe8:	f04f 0a00 	mov.w	sl, #0
 8010fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f43f ae0f 	beq.w	8010c12 <_strtod_l+0x72>
 8010ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ff6:	9805      	ldr	r0, [sp, #20]
 8010ff8:	f002 fdc0 	bl	8013b7c <_Bfree>
 8010ffc:	9805      	ldr	r0, [sp, #20]
 8010ffe:	4649      	mov	r1, r9
 8011000:	f002 fdbc 	bl	8013b7c <_Bfree>
 8011004:	9805      	ldr	r0, [sp, #20]
 8011006:	4641      	mov	r1, r8
 8011008:	f002 fdb8 	bl	8013b7c <_Bfree>
 801100c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801100e:	9805      	ldr	r0, [sp, #20]
 8011010:	f002 fdb4 	bl	8013b7c <_Bfree>
 8011014:	9805      	ldr	r0, [sp, #20]
 8011016:	4621      	mov	r1, r4
 8011018:	f002 fdb0 	bl	8013b7c <_Bfree>
 801101c:	e5f9      	b.n	8010c12 <_strtod_l+0x72>
 801101e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011024:	4293      	cmp	r3, r2
 8011026:	dbbc      	blt.n	8010fa2 <_strtod_l+0x402>
 8011028:	4c41      	ldr	r4, [pc, #260]	@ (8011130 <_strtod_l+0x590>)
 801102a:	f1c5 050f 	rsb	r5, r5, #15
 801102e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011032:	4652      	mov	r2, sl
 8011034:	465b      	mov	r3, fp
 8011036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801103a:	f7ef fadd 	bl	80005f8 <__aeabi_dmul>
 801103e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011040:	1b5d      	subs	r5, r3, r5
 8011042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011046:	e9d4 2300 	ldrd	r2, r3, [r4]
 801104a:	e78f      	b.n	8010f6c <_strtod_l+0x3cc>
 801104c:	3316      	adds	r3, #22
 801104e:	dba8      	blt.n	8010fa2 <_strtod_l+0x402>
 8011050:	4b37      	ldr	r3, [pc, #220]	@ (8011130 <_strtod_l+0x590>)
 8011052:	eba9 0808 	sub.w	r8, r9, r8
 8011056:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801105a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801105e:	4650      	mov	r0, sl
 8011060:	4659      	mov	r1, fp
 8011062:	f7ef fbf3 	bl	800084c <__aeabi_ddiv>
 8011066:	e783      	b.n	8010f70 <_strtod_l+0x3d0>
 8011068:	4b32      	ldr	r3, [pc, #200]	@ (8011134 <_strtod_l+0x594>)
 801106a:	9308      	str	r3, [sp, #32]
 801106c:	2300      	movs	r3, #0
 801106e:	1124      	asrs	r4, r4, #4
 8011070:	4650      	mov	r0, sl
 8011072:	4659      	mov	r1, fp
 8011074:	461e      	mov	r6, r3
 8011076:	2c01      	cmp	r4, #1
 8011078:	dc21      	bgt.n	80110be <_strtod_l+0x51e>
 801107a:	b10b      	cbz	r3, 8011080 <_strtod_l+0x4e0>
 801107c:	4682      	mov	sl, r0
 801107e:	468b      	mov	fp, r1
 8011080:	492c      	ldr	r1, [pc, #176]	@ (8011134 <_strtod_l+0x594>)
 8011082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801108a:	4652      	mov	r2, sl
 801108c:	465b      	mov	r3, fp
 801108e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011092:	f7ef fab1 	bl	80005f8 <__aeabi_dmul>
 8011096:	4b28      	ldr	r3, [pc, #160]	@ (8011138 <_strtod_l+0x598>)
 8011098:	460a      	mov	r2, r1
 801109a:	400b      	ands	r3, r1
 801109c:	4927      	ldr	r1, [pc, #156]	@ (801113c <_strtod_l+0x59c>)
 801109e:	428b      	cmp	r3, r1
 80110a0:	4682      	mov	sl, r0
 80110a2:	d898      	bhi.n	8010fd6 <_strtod_l+0x436>
 80110a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80110a8:	428b      	cmp	r3, r1
 80110aa:	bf86      	itte	hi
 80110ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011140 <_strtod_l+0x5a0>
 80110b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80110b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80110b8:	2300      	movs	r3, #0
 80110ba:	9308      	str	r3, [sp, #32]
 80110bc:	e07a      	b.n	80111b4 <_strtod_l+0x614>
 80110be:	07e2      	lsls	r2, r4, #31
 80110c0:	d505      	bpl.n	80110ce <_strtod_l+0x52e>
 80110c2:	9b08      	ldr	r3, [sp, #32]
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	f7ef fa96 	bl	80005f8 <__aeabi_dmul>
 80110cc:	2301      	movs	r3, #1
 80110ce:	9a08      	ldr	r2, [sp, #32]
 80110d0:	3208      	adds	r2, #8
 80110d2:	3601      	adds	r6, #1
 80110d4:	1064      	asrs	r4, r4, #1
 80110d6:	9208      	str	r2, [sp, #32]
 80110d8:	e7cd      	b.n	8011076 <_strtod_l+0x4d6>
 80110da:	d0ed      	beq.n	80110b8 <_strtod_l+0x518>
 80110dc:	4264      	negs	r4, r4
 80110de:	f014 020f 	ands.w	r2, r4, #15
 80110e2:	d00a      	beq.n	80110fa <_strtod_l+0x55a>
 80110e4:	4b12      	ldr	r3, [pc, #72]	@ (8011130 <_strtod_l+0x590>)
 80110e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110ea:	4650      	mov	r0, sl
 80110ec:	4659      	mov	r1, fp
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f7ef fbab 	bl	800084c <__aeabi_ddiv>
 80110f6:	4682      	mov	sl, r0
 80110f8:	468b      	mov	fp, r1
 80110fa:	1124      	asrs	r4, r4, #4
 80110fc:	d0dc      	beq.n	80110b8 <_strtod_l+0x518>
 80110fe:	2c1f      	cmp	r4, #31
 8011100:	dd20      	ble.n	8011144 <_strtod_l+0x5a4>
 8011102:	2400      	movs	r4, #0
 8011104:	46a0      	mov	r8, r4
 8011106:	940a      	str	r4, [sp, #40]	@ 0x28
 8011108:	46a1      	mov	r9, r4
 801110a:	9a05      	ldr	r2, [sp, #20]
 801110c:	2322      	movs	r3, #34	@ 0x22
 801110e:	f04f 0a00 	mov.w	sl, #0
 8011112:	f04f 0b00 	mov.w	fp, #0
 8011116:	6013      	str	r3, [r2, #0]
 8011118:	e768      	b.n	8010fec <_strtod_l+0x44c>
 801111a:	bf00      	nop
 801111c:	08015a6e 	.word	0x08015a6e
 8011120:	08015910 	.word	0x08015910
 8011124:	08015a66 	.word	0x08015a66
 8011128:	08015b4d 	.word	0x08015b4d
 801112c:	08015b49 	.word	0x08015b49
 8011130:	08015cb0 	.word	0x08015cb0
 8011134:	08015c88 	.word	0x08015c88
 8011138:	7ff00000 	.word	0x7ff00000
 801113c:	7ca00000 	.word	0x7ca00000
 8011140:	7fefffff 	.word	0x7fefffff
 8011144:	f014 0310 	ands.w	r3, r4, #16
 8011148:	bf18      	it	ne
 801114a:	236a      	movne	r3, #106	@ 0x6a
 801114c:	4ea9      	ldr	r6, [pc, #676]	@ (80113f4 <_strtod_l+0x854>)
 801114e:	9308      	str	r3, [sp, #32]
 8011150:	4650      	mov	r0, sl
 8011152:	4659      	mov	r1, fp
 8011154:	2300      	movs	r3, #0
 8011156:	07e2      	lsls	r2, r4, #31
 8011158:	d504      	bpl.n	8011164 <_strtod_l+0x5c4>
 801115a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801115e:	f7ef fa4b 	bl	80005f8 <__aeabi_dmul>
 8011162:	2301      	movs	r3, #1
 8011164:	1064      	asrs	r4, r4, #1
 8011166:	f106 0608 	add.w	r6, r6, #8
 801116a:	d1f4      	bne.n	8011156 <_strtod_l+0x5b6>
 801116c:	b10b      	cbz	r3, 8011172 <_strtod_l+0x5d2>
 801116e:	4682      	mov	sl, r0
 8011170:	468b      	mov	fp, r1
 8011172:	9b08      	ldr	r3, [sp, #32]
 8011174:	b1b3      	cbz	r3, 80111a4 <_strtod_l+0x604>
 8011176:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801117a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801117e:	2b00      	cmp	r3, #0
 8011180:	4659      	mov	r1, fp
 8011182:	dd0f      	ble.n	80111a4 <_strtod_l+0x604>
 8011184:	2b1f      	cmp	r3, #31
 8011186:	dd55      	ble.n	8011234 <_strtod_l+0x694>
 8011188:	2b34      	cmp	r3, #52	@ 0x34
 801118a:	bfde      	ittt	le
 801118c:	f04f 33ff 	movle.w	r3, #4294967295
 8011190:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011194:	4093      	lslle	r3, r2
 8011196:	f04f 0a00 	mov.w	sl, #0
 801119a:	bfcc      	ite	gt
 801119c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80111a0:	ea03 0b01 	andle.w	fp, r3, r1
 80111a4:	2200      	movs	r2, #0
 80111a6:	2300      	movs	r3, #0
 80111a8:	4650      	mov	r0, sl
 80111aa:	4659      	mov	r1, fp
 80111ac:	f7ef fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d1a6      	bne.n	8011102 <_strtod_l+0x562>
 80111b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80111ba:	9805      	ldr	r0, [sp, #20]
 80111bc:	462b      	mov	r3, r5
 80111be:	463a      	mov	r2, r7
 80111c0:	f002 fd44 	bl	8013c4c <__s2b>
 80111c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80111c6:	2800      	cmp	r0, #0
 80111c8:	f43f af05 	beq.w	8010fd6 <_strtod_l+0x436>
 80111cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	eba9 0308 	sub.w	r3, r9, r8
 80111d4:	bfa8      	it	ge
 80111d6:	2300      	movge	r3, #0
 80111d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80111da:	2400      	movs	r4, #0
 80111dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80111e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80111e2:	46a0      	mov	r8, r4
 80111e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111e6:	9805      	ldr	r0, [sp, #20]
 80111e8:	6859      	ldr	r1, [r3, #4]
 80111ea:	f002 fc87 	bl	8013afc <_Balloc>
 80111ee:	4681      	mov	r9, r0
 80111f0:	2800      	cmp	r0, #0
 80111f2:	f43f aef4 	beq.w	8010fde <_strtod_l+0x43e>
 80111f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111f8:	691a      	ldr	r2, [r3, #16]
 80111fa:	3202      	adds	r2, #2
 80111fc:	f103 010c 	add.w	r1, r3, #12
 8011200:	0092      	lsls	r2, r2, #2
 8011202:	300c      	adds	r0, #12
 8011204:	f001 fa5f 	bl	80126c6 <memcpy>
 8011208:	ec4b ab10 	vmov	d0, sl, fp
 801120c:	9805      	ldr	r0, [sp, #20]
 801120e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011210:	a91b      	add	r1, sp, #108	@ 0x6c
 8011212:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011216:	f003 f855 	bl	80142c4 <__d2b>
 801121a:	901a      	str	r0, [sp, #104]	@ 0x68
 801121c:	2800      	cmp	r0, #0
 801121e:	f43f aede 	beq.w	8010fde <_strtod_l+0x43e>
 8011222:	9805      	ldr	r0, [sp, #20]
 8011224:	2101      	movs	r1, #1
 8011226:	f002 fda7 	bl	8013d78 <__i2b>
 801122a:	4680      	mov	r8, r0
 801122c:	b948      	cbnz	r0, 8011242 <_strtod_l+0x6a2>
 801122e:	f04f 0800 	mov.w	r8, #0
 8011232:	e6d4      	b.n	8010fde <_strtod_l+0x43e>
 8011234:	f04f 32ff 	mov.w	r2, #4294967295
 8011238:	fa02 f303 	lsl.w	r3, r2, r3
 801123c:	ea03 0a0a 	and.w	sl, r3, sl
 8011240:	e7b0      	b.n	80111a4 <_strtod_l+0x604>
 8011242:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011244:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011246:	2d00      	cmp	r5, #0
 8011248:	bfab      	itete	ge
 801124a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801124c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801124e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011250:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011252:	bfac      	ite	ge
 8011254:	18ef      	addge	r7, r5, r3
 8011256:	1b5e      	sublt	r6, r3, r5
 8011258:	9b08      	ldr	r3, [sp, #32]
 801125a:	1aed      	subs	r5, r5, r3
 801125c:	4415      	add	r5, r2
 801125e:	4b66      	ldr	r3, [pc, #408]	@ (80113f8 <_strtod_l+0x858>)
 8011260:	3d01      	subs	r5, #1
 8011262:	429d      	cmp	r5, r3
 8011264:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011268:	da50      	bge.n	801130c <_strtod_l+0x76c>
 801126a:	1b5b      	subs	r3, r3, r5
 801126c:	2b1f      	cmp	r3, #31
 801126e:	eba2 0203 	sub.w	r2, r2, r3
 8011272:	f04f 0101 	mov.w	r1, #1
 8011276:	dc3d      	bgt.n	80112f4 <_strtod_l+0x754>
 8011278:	fa01 f303 	lsl.w	r3, r1, r3
 801127c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801127e:	2300      	movs	r3, #0
 8011280:	9310      	str	r3, [sp, #64]	@ 0x40
 8011282:	18bd      	adds	r5, r7, r2
 8011284:	9b08      	ldr	r3, [sp, #32]
 8011286:	42af      	cmp	r7, r5
 8011288:	4416      	add	r6, r2
 801128a:	441e      	add	r6, r3
 801128c:	463b      	mov	r3, r7
 801128e:	bfa8      	it	ge
 8011290:	462b      	movge	r3, r5
 8011292:	42b3      	cmp	r3, r6
 8011294:	bfa8      	it	ge
 8011296:	4633      	movge	r3, r6
 8011298:	2b00      	cmp	r3, #0
 801129a:	bfc2      	ittt	gt
 801129c:	1aed      	subgt	r5, r5, r3
 801129e:	1af6      	subgt	r6, r6, r3
 80112a0:	1aff      	subgt	r7, r7, r3
 80112a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	dd16      	ble.n	80112d6 <_strtod_l+0x736>
 80112a8:	4641      	mov	r1, r8
 80112aa:	9805      	ldr	r0, [sp, #20]
 80112ac:	461a      	mov	r2, r3
 80112ae:	f002 fe23 	bl	8013ef8 <__pow5mult>
 80112b2:	4680      	mov	r8, r0
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d0ba      	beq.n	801122e <_strtod_l+0x68e>
 80112b8:	4601      	mov	r1, r0
 80112ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112bc:	9805      	ldr	r0, [sp, #20]
 80112be:	f002 fd71 	bl	8013da4 <__multiply>
 80112c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80112c4:	2800      	cmp	r0, #0
 80112c6:	f43f ae8a 	beq.w	8010fde <_strtod_l+0x43e>
 80112ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112cc:	9805      	ldr	r0, [sp, #20]
 80112ce:	f002 fc55 	bl	8013b7c <_Bfree>
 80112d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80112d6:	2d00      	cmp	r5, #0
 80112d8:	dc1d      	bgt.n	8011316 <_strtod_l+0x776>
 80112da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112dc:	2b00      	cmp	r3, #0
 80112de:	dd23      	ble.n	8011328 <_strtod_l+0x788>
 80112e0:	4649      	mov	r1, r9
 80112e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80112e4:	9805      	ldr	r0, [sp, #20]
 80112e6:	f002 fe07 	bl	8013ef8 <__pow5mult>
 80112ea:	4681      	mov	r9, r0
 80112ec:	b9e0      	cbnz	r0, 8011328 <_strtod_l+0x788>
 80112ee:	f04f 0900 	mov.w	r9, #0
 80112f2:	e674      	b.n	8010fde <_strtod_l+0x43e>
 80112f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80112f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80112fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011300:	35e2      	adds	r5, #226	@ 0xe2
 8011302:	fa01 f305 	lsl.w	r3, r1, r5
 8011306:	9310      	str	r3, [sp, #64]	@ 0x40
 8011308:	9113      	str	r1, [sp, #76]	@ 0x4c
 801130a:	e7ba      	b.n	8011282 <_strtod_l+0x6e2>
 801130c:	2300      	movs	r3, #0
 801130e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011310:	2301      	movs	r3, #1
 8011312:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011314:	e7b5      	b.n	8011282 <_strtod_l+0x6e2>
 8011316:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011318:	9805      	ldr	r0, [sp, #20]
 801131a:	462a      	mov	r2, r5
 801131c:	f002 fe46 	bl	8013fac <__lshift>
 8011320:	901a      	str	r0, [sp, #104]	@ 0x68
 8011322:	2800      	cmp	r0, #0
 8011324:	d1d9      	bne.n	80112da <_strtod_l+0x73a>
 8011326:	e65a      	b.n	8010fde <_strtod_l+0x43e>
 8011328:	2e00      	cmp	r6, #0
 801132a:	dd07      	ble.n	801133c <_strtod_l+0x79c>
 801132c:	4649      	mov	r1, r9
 801132e:	9805      	ldr	r0, [sp, #20]
 8011330:	4632      	mov	r2, r6
 8011332:	f002 fe3b 	bl	8013fac <__lshift>
 8011336:	4681      	mov	r9, r0
 8011338:	2800      	cmp	r0, #0
 801133a:	d0d8      	beq.n	80112ee <_strtod_l+0x74e>
 801133c:	2f00      	cmp	r7, #0
 801133e:	dd08      	ble.n	8011352 <_strtod_l+0x7b2>
 8011340:	4641      	mov	r1, r8
 8011342:	9805      	ldr	r0, [sp, #20]
 8011344:	463a      	mov	r2, r7
 8011346:	f002 fe31 	bl	8013fac <__lshift>
 801134a:	4680      	mov	r8, r0
 801134c:	2800      	cmp	r0, #0
 801134e:	f43f ae46 	beq.w	8010fde <_strtod_l+0x43e>
 8011352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011354:	9805      	ldr	r0, [sp, #20]
 8011356:	464a      	mov	r2, r9
 8011358:	f002 feb0 	bl	80140bc <__mdiff>
 801135c:	4604      	mov	r4, r0
 801135e:	2800      	cmp	r0, #0
 8011360:	f43f ae3d 	beq.w	8010fde <_strtod_l+0x43e>
 8011364:	68c3      	ldr	r3, [r0, #12]
 8011366:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011368:	2300      	movs	r3, #0
 801136a:	60c3      	str	r3, [r0, #12]
 801136c:	4641      	mov	r1, r8
 801136e:	f002 fe89 	bl	8014084 <__mcmp>
 8011372:	2800      	cmp	r0, #0
 8011374:	da46      	bge.n	8011404 <_strtod_l+0x864>
 8011376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011378:	ea53 030a 	orrs.w	r3, r3, sl
 801137c:	d16c      	bne.n	8011458 <_strtod_l+0x8b8>
 801137e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011382:	2b00      	cmp	r3, #0
 8011384:	d168      	bne.n	8011458 <_strtod_l+0x8b8>
 8011386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801138a:	0d1b      	lsrs	r3, r3, #20
 801138c:	051b      	lsls	r3, r3, #20
 801138e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011392:	d961      	bls.n	8011458 <_strtod_l+0x8b8>
 8011394:	6963      	ldr	r3, [r4, #20]
 8011396:	b913      	cbnz	r3, 801139e <_strtod_l+0x7fe>
 8011398:	6923      	ldr	r3, [r4, #16]
 801139a:	2b01      	cmp	r3, #1
 801139c:	dd5c      	ble.n	8011458 <_strtod_l+0x8b8>
 801139e:	4621      	mov	r1, r4
 80113a0:	2201      	movs	r2, #1
 80113a2:	9805      	ldr	r0, [sp, #20]
 80113a4:	f002 fe02 	bl	8013fac <__lshift>
 80113a8:	4641      	mov	r1, r8
 80113aa:	4604      	mov	r4, r0
 80113ac:	f002 fe6a 	bl	8014084 <__mcmp>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	dd51      	ble.n	8011458 <_strtod_l+0x8b8>
 80113b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80113b8:	9a08      	ldr	r2, [sp, #32]
 80113ba:	0d1b      	lsrs	r3, r3, #20
 80113bc:	051b      	lsls	r3, r3, #20
 80113be:	2a00      	cmp	r2, #0
 80113c0:	d06b      	beq.n	801149a <_strtod_l+0x8fa>
 80113c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80113c6:	d868      	bhi.n	801149a <_strtod_l+0x8fa>
 80113c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80113cc:	f67f ae9d 	bls.w	801110a <_strtod_l+0x56a>
 80113d0:	4b0a      	ldr	r3, [pc, #40]	@ (80113fc <_strtod_l+0x85c>)
 80113d2:	4650      	mov	r0, sl
 80113d4:	4659      	mov	r1, fp
 80113d6:	2200      	movs	r2, #0
 80113d8:	f7ef f90e 	bl	80005f8 <__aeabi_dmul>
 80113dc:	4b08      	ldr	r3, [pc, #32]	@ (8011400 <_strtod_l+0x860>)
 80113de:	400b      	ands	r3, r1
 80113e0:	4682      	mov	sl, r0
 80113e2:	468b      	mov	fp, r1
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f47f ae05 	bne.w	8010ff4 <_strtod_l+0x454>
 80113ea:	9a05      	ldr	r2, [sp, #20]
 80113ec:	2322      	movs	r3, #34	@ 0x22
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	e600      	b.n	8010ff4 <_strtod_l+0x454>
 80113f2:	bf00      	nop
 80113f4:	08015938 	.word	0x08015938
 80113f8:	fffffc02 	.word	0xfffffc02
 80113fc:	39500000 	.word	0x39500000
 8011400:	7ff00000 	.word	0x7ff00000
 8011404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011408:	d165      	bne.n	80114d6 <_strtod_l+0x936>
 801140a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801140c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011410:	b35a      	cbz	r2, 801146a <_strtod_l+0x8ca>
 8011412:	4a9f      	ldr	r2, [pc, #636]	@ (8011690 <_strtod_l+0xaf0>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d12b      	bne.n	8011470 <_strtod_l+0x8d0>
 8011418:	9b08      	ldr	r3, [sp, #32]
 801141a:	4651      	mov	r1, sl
 801141c:	b303      	cbz	r3, 8011460 <_strtod_l+0x8c0>
 801141e:	4b9d      	ldr	r3, [pc, #628]	@ (8011694 <_strtod_l+0xaf4>)
 8011420:	465a      	mov	r2, fp
 8011422:	4013      	ands	r3, r2
 8011424:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011428:	f04f 32ff 	mov.w	r2, #4294967295
 801142c:	d81b      	bhi.n	8011466 <_strtod_l+0x8c6>
 801142e:	0d1b      	lsrs	r3, r3, #20
 8011430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011434:	fa02 f303 	lsl.w	r3, r2, r3
 8011438:	4299      	cmp	r1, r3
 801143a:	d119      	bne.n	8011470 <_strtod_l+0x8d0>
 801143c:	4b96      	ldr	r3, [pc, #600]	@ (8011698 <_strtod_l+0xaf8>)
 801143e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011440:	429a      	cmp	r2, r3
 8011442:	d102      	bne.n	801144a <_strtod_l+0x8aa>
 8011444:	3101      	adds	r1, #1
 8011446:	f43f adca 	beq.w	8010fde <_strtod_l+0x43e>
 801144a:	4b92      	ldr	r3, [pc, #584]	@ (8011694 <_strtod_l+0xaf4>)
 801144c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801144e:	401a      	ands	r2, r3
 8011450:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011454:	f04f 0a00 	mov.w	sl, #0
 8011458:	9b08      	ldr	r3, [sp, #32]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d1b8      	bne.n	80113d0 <_strtod_l+0x830>
 801145e:	e5c9      	b.n	8010ff4 <_strtod_l+0x454>
 8011460:	f04f 33ff 	mov.w	r3, #4294967295
 8011464:	e7e8      	b.n	8011438 <_strtod_l+0x898>
 8011466:	4613      	mov	r3, r2
 8011468:	e7e6      	b.n	8011438 <_strtod_l+0x898>
 801146a:	ea53 030a 	orrs.w	r3, r3, sl
 801146e:	d0a1      	beq.n	80113b4 <_strtod_l+0x814>
 8011470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011472:	b1db      	cbz	r3, 80114ac <_strtod_l+0x90c>
 8011474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011476:	4213      	tst	r3, r2
 8011478:	d0ee      	beq.n	8011458 <_strtod_l+0x8b8>
 801147a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801147c:	9a08      	ldr	r2, [sp, #32]
 801147e:	4650      	mov	r0, sl
 8011480:	4659      	mov	r1, fp
 8011482:	b1bb      	cbz	r3, 80114b4 <_strtod_l+0x914>
 8011484:	f7ff fb6c 	bl	8010b60 <sulp>
 8011488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801148c:	ec53 2b10 	vmov	r2, r3, d0
 8011490:	f7ee fefc 	bl	800028c <__adddf3>
 8011494:	4682      	mov	sl, r0
 8011496:	468b      	mov	fp, r1
 8011498:	e7de      	b.n	8011458 <_strtod_l+0x8b8>
 801149a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801149e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114a6:	f04f 3aff 	mov.w	sl, #4294967295
 80114aa:	e7d5      	b.n	8011458 <_strtod_l+0x8b8>
 80114ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114ae:	ea13 0f0a 	tst.w	r3, sl
 80114b2:	e7e1      	b.n	8011478 <_strtod_l+0x8d8>
 80114b4:	f7ff fb54 	bl	8010b60 <sulp>
 80114b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114bc:	ec53 2b10 	vmov	r2, r3, d0
 80114c0:	f7ee fee2 	bl	8000288 <__aeabi_dsub>
 80114c4:	2200      	movs	r2, #0
 80114c6:	2300      	movs	r3, #0
 80114c8:	4682      	mov	sl, r0
 80114ca:	468b      	mov	fp, r1
 80114cc:	f7ef fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d0c1      	beq.n	8011458 <_strtod_l+0x8b8>
 80114d4:	e619      	b.n	801110a <_strtod_l+0x56a>
 80114d6:	4641      	mov	r1, r8
 80114d8:	4620      	mov	r0, r4
 80114da:	f002 ff4b 	bl	8014374 <__ratio>
 80114de:	ec57 6b10 	vmov	r6, r7, d0
 80114e2:	2200      	movs	r2, #0
 80114e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80114e8:	4630      	mov	r0, r6
 80114ea:	4639      	mov	r1, r7
 80114ec:	f7ef fb00 	bl	8000af0 <__aeabi_dcmple>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	d06f      	beq.n	80115d4 <_strtod_l+0xa34>
 80114f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d17a      	bne.n	80115f0 <_strtod_l+0xa50>
 80114fa:	f1ba 0f00 	cmp.w	sl, #0
 80114fe:	d158      	bne.n	80115b2 <_strtod_l+0xa12>
 8011500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011506:	2b00      	cmp	r3, #0
 8011508:	d15a      	bne.n	80115c0 <_strtod_l+0xa20>
 801150a:	4b64      	ldr	r3, [pc, #400]	@ (801169c <_strtod_l+0xafc>)
 801150c:	2200      	movs	r2, #0
 801150e:	4630      	mov	r0, r6
 8011510:	4639      	mov	r1, r7
 8011512:	f7ef fae3 	bl	8000adc <__aeabi_dcmplt>
 8011516:	2800      	cmp	r0, #0
 8011518:	d159      	bne.n	80115ce <_strtod_l+0xa2e>
 801151a:	4630      	mov	r0, r6
 801151c:	4639      	mov	r1, r7
 801151e:	4b60      	ldr	r3, [pc, #384]	@ (80116a0 <_strtod_l+0xb00>)
 8011520:	2200      	movs	r2, #0
 8011522:	f7ef f869 	bl	80005f8 <__aeabi_dmul>
 8011526:	4606      	mov	r6, r0
 8011528:	460f      	mov	r7, r1
 801152a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801152e:	9606      	str	r6, [sp, #24]
 8011530:	9307      	str	r3, [sp, #28]
 8011532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011536:	4d57      	ldr	r5, [pc, #348]	@ (8011694 <_strtod_l+0xaf4>)
 8011538:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801153c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801153e:	401d      	ands	r5, r3
 8011540:	4b58      	ldr	r3, [pc, #352]	@ (80116a4 <_strtod_l+0xb04>)
 8011542:	429d      	cmp	r5, r3
 8011544:	f040 80b2 	bne.w	80116ac <_strtod_l+0xb0c>
 8011548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801154a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801154e:	ec4b ab10 	vmov	d0, sl, fp
 8011552:	f002 fe47 	bl	80141e4 <__ulp>
 8011556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801155a:	ec51 0b10 	vmov	r0, r1, d0
 801155e:	f7ef f84b 	bl	80005f8 <__aeabi_dmul>
 8011562:	4652      	mov	r2, sl
 8011564:	465b      	mov	r3, fp
 8011566:	f7ee fe91 	bl	800028c <__adddf3>
 801156a:	460b      	mov	r3, r1
 801156c:	4949      	ldr	r1, [pc, #292]	@ (8011694 <_strtod_l+0xaf4>)
 801156e:	4a4e      	ldr	r2, [pc, #312]	@ (80116a8 <_strtod_l+0xb08>)
 8011570:	4019      	ands	r1, r3
 8011572:	4291      	cmp	r1, r2
 8011574:	4682      	mov	sl, r0
 8011576:	d942      	bls.n	80115fe <_strtod_l+0xa5e>
 8011578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801157a:	4b47      	ldr	r3, [pc, #284]	@ (8011698 <_strtod_l+0xaf8>)
 801157c:	429a      	cmp	r2, r3
 801157e:	d103      	bne.n	8011588 <_strtod_l+0x9e8>
 8011580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011582:	3301      	adds	r3, #1
 8011584:	f43f ad2b 	beq.w	8010fde <_strtod_l+0x43e>
 8011588:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011698 <_strtod_l+0xaf8>
 801158c:	f04f 3aff 	mov.w	sl, #4294967295
 8011590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011592:	9805      	ldr	r0, [sp, #20]
 8011594:	f002 faf2 	bl	8013b7c <_Bfree>
 8011598:	9805      	ldr	r0, [sp, #20]
 801159a:	4649      	mov	r1, r9
 801159c:	f002 faee 	bl	8013b7c <_Bfree>
 80115a0:	9805      	ldr	r0, [sp, #20]
 80115a2:	4641      	mov	r1, r8
 80115a4:	f002 faea 	bl	8013b7c <_Bfree>
 80115a8:	9805      	ldr	r0, [sp, #20]
 80115aa:	4621      	mov	r1, r4
 80115ac:	f002 fae6 	bl	8013b7c <_Bfree>
 80115b0:	e618      	b.n	80111e4 <_strtod_l+0x644>
 80115b2:	f1ba 0f01 	cmp.w	sl, #1
 80115b6:	d103      	bne.n	80115c0 <_strtod_l+0xa20>
 80115b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f43f ada5 	beq.w	801110a <_strtod_l+0x56a>
 80115c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011670 <_strtod_l+0xad0>
 80115c4:	4f35      	ldr	r7, [pc, #212]	@ (801169c <_strtod_l+0xafc>)
 80115c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115ca:	2600      	movs	r6, #0
 80115cc:	e7b1      	b.n	8011532 <_strtod_l+0x992>
 80115ce:	4f34      	ldr	r7, [pc, #208]	@ (80116a0 <_strtod_l+0xb00>)
 80115d0:	2600      	movs	r6, #0
 80115d2:	e7aa      	b.n	801152a <_strtod_l+0x98a>
 80115d4:	4b32      	ldr	r3, [pc, #200]	@ (80116a0 <_strtod_l+0xb00>)
 80115d6:	4630      	mov	r0, r6
 80115d8:	4639      	mov	r1, r7
 80115da:	2200      	movs	r2, #0
 80115dc:	f7ef f80c 	bl	80005f8 <__aeabi_dmul>
 80115e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115e2:	4606      	mov	r6, r0
 80115e4:	460f      	mov	r7, r1
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d09f      	beq.n	801152a <_strtod_l+0x98a>
 80115ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80115ee:	e7a0      	b.n	8011532 <_strtod_l+0x992>
 80115f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011678 <_strtod_l+0xad8>
 80115f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115f8:	ec57 6b17 	vmov	r6, r7, d7
 80115fc:	e799      	b.n	8011532 <_strtod_l+0x992>
 80115fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011602:	9b08      	ldr	r3, [sp, #32]
 8011604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1c1      	bne.n	8011590 <_strtod_l+0x9f0>
 801160c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011610:	0d1b      	lsrs	r3, r3, #20
 8011612:	051b      	lsls	r3, r3, #20
 8011614:	429d      	cmp	r5, r3
 8011616:	d1bb      	bne.n	8011590 <_strtod_l+0x9f0>
 8011618:	4630      	mov	r0, r6
 801161a:	4639      	mov	r1, r7
 801161c:	f7ef fafc 	bl	8000c18 <__aeabi_d2lz>
 8011620:	f7ee ffbc 	bl	800059c <__aeabi_l2d>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4630      	mov	r0, r6
 801162a:	4639      	mov	r1, r7
 801162c:	f7ee fe2c 	bl	8000288 <__aeabi_dsub>
 8011630:	460b      	mov	r3, r1
 8011632:	4602      	mov	r2, r0
 8011634:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011638:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801163c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801163e:	ea46 060a 	orr.w	r6, r6, sl
 8011642:	431e      	orrs	r6, r3
 8011644:	d06f      	beq.n	8011726 <_strtod_l+0xb86>
 8011646:	a30e      	add	r3, pc, #56	@ (adr r3, 8011680 <_strtod_l+0xae0>)
 8011648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164c:	f7ef fa46 	bl	8000adc <__aeabi_dcmplt>
 8011650:	2800      	cmp	r0, #0
 8011652:	f47f accf 	bne.w	8010ff4 <_strtod_l+0x454>
 8011656:	a30c      	add	r3, pc, #48	@ (adr r3, 8011688 <_strtod_l+0xae8>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011660:	f7ef fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8011664:	2800      	cmp	r0, #0
 8011666:	d093      	beq.n	8011590 <_strtod_l+0x9f0>
 8011668:	e4c4      	b.n	8010ff4 <_strtod_l+0x454>
 801166a:	bf00      	nop
 801166c:	f3af 8000 	nop.w
 8011670:	00000000 	.word	0x00000000
 8011674:	bff00000 	.word	0xbff00000
 8011678:	00000000 	.word	0x00000000
 801167c:	3ff00000 	.word	0x3ff00000
 8011680:	94a03595 	.word	0x94a03595
 8011684:	3fdfffff 	.word	0x3fdfffff
 8011688:	35afe535 	.word	0x35afe535
 801168c:	3fe00000 	.word	0x3fe00000
 8011690:	000fffff 	.word	0x000fffff
 8011694:	7ff00000 	.word	0x7ff00000
 8011698:	7fefffff 	.word	0x7fefffff
 801169c:	3ff00000 	.word	0x3ff00000
 80116a0:	3fe00000 	.word	0x3fe00000
 80116a4:	7fe00000 	.word	0x7fe00000
 80116a8:	7c9fffff 	.word	0x7c9fffff
 80116ac:	9b08      	ldr	r3, [sp, #32]
 80116ae:	b323      	cbz	r3, 80116fa <_strtod_l+0xb5a>
 80116b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80116b4:	d821      	bhi.n	80116fa <_strtod_l+0xb5a>
 80116b6:	a328      	add	r3, pc, #160	@ (adr r3, 8011758 <_strtod_l+0xbb8>)
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	4630      	mov	r0, r6
 80116be:	4639      	mov	r1, r7
 80116c0:	f7ef fa16 	bl	8000af0 <__aeabi_dcmple>
 80116c4:	b1a0      	cbz	r0, 80116f0 <_strtod_l+0xb50>
 80116c6:	4639      	mov	r1, r7
 80116c8:	4630      	mov	r0, r6
 80116ca:	f7ef fa6d 	bl	8000ba8 <__aeabi_d2uiz>
 80116ce:	2801      	cmp	r0, #1
 80116d0:	bf38      	it	cc
 80116d2:	2001      	movcc	r0, #1
 80116d4:	f7ee ff16 	bl	8000504 <__aeabi_ui2d>
 80116d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116da:	4606      	mov	r6, r0
 80116dc:	460f      	mov	r7, r1
 80116de:	b9fb      	cbnz	r3, 8011720 <_strtod_l+0xb80>
 80116e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80116e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80116e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80116e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80116ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80116f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80116f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80116f6:	1b5b      	subs	r3, r3, r5
 80116f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80116fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80116fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011702:	f002 fd6f 	bl	80141e4 <__ulp>
 8011706:	4650      	mov	r0, sl
 8011708:	ec53 2b10 	vmov	r2, r3, d0
 801170c:	4659      	mov	r1, fp
 801170e:	f7ee ff73 	bl	80005f8 <__aeabi_dmul>
 8011712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011716:	f7ee fdb9 	bl	800028c <__adddf3>
 801171a:	4682      	mov	sl, r0
 801171c:	468b      	mov	fp, r1
 801171e:	e770      	b.n	8011602 <_strtod_l+0xa62>
 8011720:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011724:	e7e0      	b.n	80116e8 <_strtod_l+0xb48>
 8011726:	a30e      	add	r3, pc, #56	@ (adr r3, 8011760 <_strtod_l+0xbc0>)
 8011728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172c:	f7ef f9d6 	bl	8000adc <__aeabi_dcmplt>
 8011730:	e798      	b.n	8011664 <_strtod_l+0xac4>
 8011732:	2300      	movs	r3, #0
 8011734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011736:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801173a:	6013      	str	r3, [r2, #0]
 801173c:	f7ff ba6d 	b.w	8010c1a <_strtod_l+0x7a>
 8011740:	2a65      	cmp	r2, #101	@ 0x65
 8011742:	f43f ab66 	beq.w	8010e12 <_strtod_l+0x272>
 8011746:	2a45      	cmp	r2, #69	@ 0x45
 8011748:	f43f ab63 	beq.w	8010e12 <_strtod_l+0x272>
 801174c:	2301      	movs	r3, #1
 801174e:	f7ff bb9e 	b.w	8010e8e <_strtod_l+0x2ee>
 8011752:	bf00      	nop
 8011754:	f3af 8000 	nop.w
 8011758:	ffc00000 	.word	0xffc00000
 801175c:	41dfffff 	.word	0x41dfffff
 8011760:	94a03595 	.word	0x94a03595
 8011764:	3fcfffff 	.word	0x3fcfffff

08011768 <strtod>:
 8011768:	460a      	mov	r2, r1
 801176a:	4601      	mov	r1, r0
 801176c:	4802      	ldr	r0, [pc, #8]	@ (8011778 <strtod+0x10>)
 801176e:	4b03      	ldr	r3, [pc, #12]	@ (801177c <strtod+0x14>)
 8011770:	6800      	ldr	r0, [r0, #0]
 8011772:	f7ff ba15 	b.w	8010ba0 <_strtod_l>
 8011776:	bf00      	nop
 8011778:	200003d4 	.word	0x200003d4
 801177c:	20000268 	.word	0x20000268

08011780 <_strtol_l.constprop.0>:
 8011780:	2b24      	cmp	r3, #36	@ 0x24
 8011782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011786:	4686      	mov	lr, r0
 8011788:	4690      	mov	r8, r2
 801178a:	d801      	bhi.n	8011790 <_strtol_l.constprop.0+0x10>
 801178c:	2b01      	cmp	r3, #1
 801178e:	d106      	bne.n	801179e <_strtol_l.constprop.0+0x1e>
 8011790:	f000 ff64 	bl	801265c <__errno>
 8011794:	2316      	movs	r3, #22
 8011796:	6003      	str	r3, [r0, #0]
 8011798:	2000      	movs	r0, #0
 801179a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801179e:	4834      	ldr	r0, [pc, #208]	@ (8011870 <_strtol_l.constprop.0+0xf0>)
 80117a0:	460d      	mov	r5, r1
 80117a2:	462a      	mov	r2, r5
 80117a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117a8:	5d06      	ldrb	r6, [r0, r4]
 80117aa:	f016 0608 	ands.w	r6, r6, #8
 80117ae:	d1f8      	bne.n	80117a2 <_strtol_l.constprop.0+0x22>
 80117b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80117b2:	d12d      	bne.n	8011810 <_strtol_l.constprop.0+0x90>
 80117b4:	782c      	ldrb	r4, [r5, #0]
 80117b6:	2601      	movs	r6, #1
 80117b8:	1c95      	adds	r5, r2, #2
 80117ba:	f033 0210 	bics.w	r2, r3, #16
 80117be:	d109      	bne.n	80117d4 <_strtol_l.constprop.0+0x54>
 80117c0:	2c30      	cmp	r4, #48	@ 0x30
 80117c2:	d12a      	bne.n	801181a <_strtol_l.constprop.0+0x9a>
 80117c4:	782a      	ldrb	r2, [r5, #0]
 80117c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80117ca:	2a58      	cmp	r2, #88	@ 0x58
 80117cc:	d125      	bne.n	801181a <_strtol_l.constprop.0+0x9a>
 80117ce:	786c      	ldrb	r4, [r5, #1]
 80117d0:	2310      	movs	r3, #16
 80117d2:	3502      	adds	r5, #2
 80117d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80117d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80117dc:	2200      	movs	r2, #0
 80117de:	fbbc f9f3 	udiv	r9, ip, r3
 80117e2:	4610      	mov	r0, r2
 80117e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80117e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80117ec:	2f09      	cmp	r7, #9
 80117ee:	d81b      	bhi.n	8011828 <_strtol_l.constprop.0+0xa8>
 80117f0:	463c      	mov	r4, r7
 80117f2:	42a3      	cmp	r3, r4
 80117f4:	dd27      	ble.n	8011846 <_strtol_l.constprop.0+0xc6>
 80117f6:	1c57      	adds	r7, r2, #1
 80117f8:	d007      	beq.n	801180a <_strtol_l.constprop.0+0x8a>
 80117fa:	4581      	cmp	r9, r0
 80117fc:	d320      	bcc.n	8011840 <_strtol_l.constprop.0+0xc0>
 80117fe:	d101      	bne.n	8011804 <_strtol_l.constprop.0+0x84>
 8011800:	45a2      	cmp	sl, r4
 8011802:	db1d      	blt.n	8011840 <_strtol_l.constprop.0+0xc0>
 8011804:	fb00 4003 	mla	r0, r0, r3, r4
 8011808:	2201      	movs	r2, #1
 801180a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801180e:	e7eb      	b.n	80117e8 <_strtol_l.constprop.0+0x68>
 8011810:	2c2b      	cmp	r4, #43	@ 0x2b
 8011812:	bf04      	itt	eq
 8011814:	782c      	ldrbeq	r4, [r5, #0]
 8011816:	1c95      	addeq	r5, r2, #2
 8011818:	e7cf      	b.n	80117ba <_strtol_l.constprop.0+0x3a>
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1da      	bne.n	80117d4 <_strtol_l.constprop.0+0x54>
 801181e:	2c30      	cmp	r4, #48	@ 0x30
 8011820:	bf0c      	ite	eq
 8011822:	2308      	moveq	r3, #8
 8011824:	230a      	movne	r3, #10
 8011826:	e7d5      	b.n	80117d4 <_strtol_l.constprop.0+0x54>
 8011828:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801182c:	2f19      	cmp	r7, #25
 801182e:	d801      	bhi.n	8011834 <_strtol_l.constprop.0+0xb4>
 8011830:	3c37      	subs	r4, #55	@ 0x37
 8011832:	e7de      	b.n	80117f2 <_strtol_l.constprop.0+0x72>
 8011834:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011838:	2f19      	cmp	r7, #25
 801183a:	d804      	bhi.n	8011846 <_strtol_l.constprop.0+0xc6>
 801183c:	3c57      	subs	r4, #87	@ 0x57
 801183e:	e7d8      	b.n	80117f2 <_strtol_l.constprop.0+0x72>
 8011840:	f04f 32ff 	mov.w	r2, #4294967295
 8011844:	e7e1      	b.n	801180a <_strtol_l.constprop.0+0x8a>
 8011846:	1c53      	adds	r3, r2, #1
 8011848:	d108      	bne.n	801185c <_strtol_l.constprop.0+0xdc>
 801184a:	2322      	movs	r3, #34	@ 0x22
 801184c:	f8ce 3000 	str.w	r3, [lr]
 8011850:	4660      	mov	r0, ip
 8011852:	f1b8 0f00 	cmp.w	r8, #0
 8011856:	d0a0      	beq.n	801179a <_strtol_l.constprop.0+0x1a>
 8011858:	1e69      	subs	r1, r5, #1
 801185a:	e006      	b.n	801186a <_strtol_l.constprop.0+0xea>
 801185c:	b106      	cbz	r6, 8011860 <_strtol_l.constprop.0+0xe0>
 801185e:	4240      	negs	r0, r0
 8011860:	f1b8 0f00 	cmp.w	r8, #0
 8011864:	d099      	beq.n	801179a <_strtol_l.constprop.0+0x1a>
 8011866:	2a00      	cmp	r2, #0
 8011868:	d1f6      	bne.n	8011858 <_strtol_l.constprop.0+0xd8>
 801186a:	f8c8 1000 	str.w	r1, [r8]
 801186e:	e794      	b.n	801179a <_strtol_l.constprop.0+0x1a>
 8011870:	08015961 	.word	0x08015961

08011874 <strtol>:
 8011874:	4613      	mov	r3, r2
 8011876:	460a      	mov	r2, r1
 8011878:	4601      	mov	r1, r0
 801187a:	4802      	ldr	r0, [pc, #8]	@ (8011884 <strtol+0x10>)
 801187c:	6800      	ldr	r0, [r0, #0]
 801187e:	f7ff bf7f 	b.w	8011780 <_strtol_l.constprop.0>
 8011882:	bf00      	nop
 8011884:	200003d4 	.word	0x200003d4

08011888 <__cvt>:
 8011888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801188c:	ec57 6b10 	vmov	r6, r7, d0
 8011890:	2f00      	cmp	r7, #0
 8011892:	460c      	mov	r4, r1
 8011894:	4619      	mov	r1, r3
 8011896:	463b      	mov	r3, r7
 8011898:	bfbb      	ittet	lt
 801189a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801189e:	461f      	movlt	r7, r3
 80118a0:	2300      	movge	r3, #0
 80118a2:	232d      	movlt	r3, #45	@ 0x2d
 80118a4:	700b      	strb	r3, [r1, #0]
 80118a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80118ac:	4691      	mov	r9, r2
 80118ae:	f023 0820 	bic.w	r8, r3, #32
 80118b2:	bfbc      	itt	lt
 80118b4:	4632      	movlt	r2, r6
 80118b6:	4616      	movlt	r6, r2
 80118b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80118bc:	d005      	beq.n	80118ca <__cvt+0x42>
 80118be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80118c2:	d100      	bne.n	80118c6 <__cvt+0x3e>
 80118c4:	3401      	adds	r4, #1
 80118c6:	2102      	movs	r1, #2
 80118c8:	e000      	b.n	80118cc <__cvt+0x44>
 80118ca:	2103      	movs	r1, #3
 80118cc:	ab03      	add	r3, sp, #12
 80118ce:	9301      	str	r3, [sp, #4]
 80118d0:	ab02      	add	r3, sp, #8
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	ec47 6b10 	vmov	d0, r6, r7
 80118d8:	4653      	mov	r3, sl
 80118da:	4622      	mov	r2, r4
 80118dc:	f000 ffb4 	bl	8012848 <_dtoa_r>
 80118e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80118e4:	4605      	mov	r5, r0
 80118e6:	d119      	bne.n	801191c <__cvt+0x94>
 80118e8:	f019 0f01 	tst.w	r9, #1
 80118ec:	d00e      	beq.n	801190c <__cvt+0x84>
 80118ee:	eb00 0904 	add.w	r9, r0, r4
 80118f2:	2200      	movs	r2, #0
 80118f4:	2300      	movs	r3, #0
 80118f6:	4630      	mov	r0, r6
 80118f8:	4639      	mov	r1, r7
 80118fa:	f7ef f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80118fe:	b108      	cbz	r0, 8011904 <__cvt+0x7c>
 8011900:	f8cd 900c 	str.w	r9, [sp, #12]
 8011904:	2230      	movs	r2, #48	@ 0x30
 8011906:	9b03      	ldr	r3, [sp, #12]
 8011908:	454b      	cmp	r3, r9
 801190a:	d31e      	bcc.n	801194a <__cvt+0xc2>
 801190c:	9b03      	ldr	r3, [sp, #12]
 801190e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011910:	1b5b      	subs	r3, r3, r5
 8011912:	4628      	mov	r0, r5
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	b004      	add	sp, #16
 8011918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011920:	eb00 0904 	add.w	r9, r0, r4
 8011924:	d1e5      	bne.n	80118f2 <__cvt+0x6a>
 8011926:	7803      	ldrb	r3, [r0, #0]
 8011928:	2b30      	cmp	r3, #48	@ 0x30
 801192a:	d10a      	bne.n	8011942 <__cvt+0xba>
 801192c:	2200      	movs	r2, #0
 801192e:	2300      	movs	r3, #0
 8011930:	4630      	mov	r0, r6
 8011932:	4639      	mov	r1, r7
 8011934:	f7ef f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011938:	b918      	cbnz	r0, 8011942 <__cvt+0xba>
 801193a:	f1c4 0401 	rsb	r4, r4, #1
 801193e:	f8ca 4000 	str.w	r4, [sl]
 8011942:	f8da 3000 	ldr.w	r3, [sl]
 8011946:	4499      	add	r9, r3
 8011948:	e7d3      	b.n	80118f2 <__cvt+0x6a>
 801194a:	1c59      	adds	r1, r3, #1
 801194c:	9103      	str	r1, [sp, #12]
 801194e:	701a      	strb	r2, [r3, #0]
 8011950:	e7d9      	b.n	8011906 <__cvt+0x7e>

08011952 <__exponent>:
 8011952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011954:	2900      	cmp	r1, #0
 8011956:	bfba      	itte	lt
 8011958:	4249      	neglt	r1, r1
 801195a:	232d      	movlt	r3, #45	@ 0x2d
 801195c:	232b      	movge	r3, #43	@ 0x2b
 801195e:	2909      	cmp	r1, #9
 8011960:	7002      	strb	r2, [r0, #0]
 8011962:	7043      	strb	r3, [r0, #1]
 8011964:	dd29      	ble.n	80119ba <__exponent+0x68>
 8011966:	f10d 0307 	add.w	r3, sp, #7
 801196a:	461d      	mov	r5, r3
 801196c:	270a      	movs	r7, #10
 801196e:	461a      	mov	r2, r3
 8011970:	fbb1 f6f7 	udiv	r6, r1, r7
 8011974:	fb07 1416 	mls	r4, r7, r6, r1
 8011978:	3430      	adds	r4, #48	@ 0x30
 801197a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801197e:	460c      	mov	r4, r1
 8011980:	2c63      	cmp	r4, #99	@ 0x63
 8011982:	f103 33ff 	add.w	r3, r3, #4294967295
 8011986:	4631      	mov	r1, r6
 8011988:	dcf1      	bgt.n	801196e <__exponent+0x1c>
 801198a:	3130      	adds	r1, #48	@ 0x30
 801198c:	1e94      	subs	r4, r2, #2
 801198e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011992:	1c41      	adds	r1, r0, #1
 8011994:	4623      	mov	r3, r4
 8011996:	42ab      	cmp	r3, r5
 8011998:	d30a      	bcc.n	80119b0 <__exponent+0x5e>
 801199a:	f10d 0309 	add.w	r3, sp, #9
 801199e:	1a9b      	subs	r3, r3, r2
 80119a0:	42ac      	cmp	r4, r5
 80119a2:	bf88      	it	hi
 80119a4:	2300      	movhi	r3, #0
 80119a6:	3302      	adds	r3, #2
 80119a8:	4403      	add	r3, r0
 80119aa:	1a18      	subs	r0, r3, r0
 80119ac:	b003      	add	sp, #12
 80119ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80119b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80119b8:	e7ed      	b.n	8011996 <__exponent+0x44>
 80119ba:	2330      	movs	r3, #48	@ 0x30
 80119bc:	3130      	adds	r1, #48	@ 0x30
 80119be:	7083      	strb	r3, [r0, #2]
 80119c0:	70c1      	strb	r1, [r0, #3]
 80119c2:	1d03      	adds	r3, r0, #4
 80119c4:	e7f1      	b.n	80119aa <__exponent+0x58>
	...

080119c8 <_printf_float>:
 80119c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119cc:	b08d      	sub	sp, #52	@ 0x34
 80119ce:	460c      	mov	r4, r1
 80119d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80119d4:	4616      	mov	r6, r2
 80119d6:	461f      	mov	r7, r3
 80119d8:	4605      	mov	r5, r0
 80119da:	f000 fd8f 	bl	80124fc <_localeconv_r>
 80119de:	6803      	ldr	r3, [r0, #0]
 80119e0:	9304      	str	r3, [sp, #16]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ee fc44 	bl	8000270 <strlen>
 80119e8:	2300      	movs	r3, #0
 80119ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80119ec:	f8d8 3000 	ldr.w	r3, [r8]
 80119f0:	9005      	str	r0, [sp, #20]
 80119f2:	3307      	adds	r3, #7
 80119f4:	f023 0307 	bic.w	r3, r3, #7
 80119f8:	f103 0208 	add.w	r2, r3, #8
 80119fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011a00:	f8d4 b000 	ldr.w	fp, [r4]
 8011a04:	f8c8 2000 	str.w	r2, [r8]
 8011a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011a10:	9307      	str	r3, [sp, #28]
 8011a12:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8011c90 <_printf_float+0x2c8>)
 8011a20:	f04f 32ff 	mov.w	r2, #4294967295
 8011a24:	f7ef f882 	bl	8000b2c <__aeabi_dcmpun>
 8011a28:	bb70      	cbnz	r0, 8011a88 <_printf_float+0xc0>
 8011a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a2e:	4b98      	ldr	r3, [pc, #608]	@ (8011c90 <_printf_float+0x2c8>)
 8011a30:	f04f 32ff 	mov.w	r2, #4294967295
 8011a34:	f7ef f85c 	bl	8000af0 <__aeabi_dcmple>
 8011a38:	bb30      	cbnz	r0, 8011a88 <_printf_float+0xc0>
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ef f84b 	bl	8000adc <__aeabi_dcmplt>
 8011a46:	b110      	cbz	r0, 8011a4e <_printf_float+0x86>
 8011a48:	232d      	movs	r3, #45	@ 0x2d
 8011a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a4e:	4a91      	ldr	r2, [pc, #580]	@ (8011c94 <_printf_float+0x2cc>)
 8011a50:	4b91      	ldr	r3, [pc, #580]	@ (8011c98 <_printf_float+0x2d0>)
 8011a52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011a56:	bf94      	ite	ls
 8011a58:	4690      	movls	r8, r2
 8011a5a:	4698      	movhi	r8, r3
 8011a5c:	2303      	movs	r3, #3
 8011a5e:	6123      	str	r3, [r4, #16]
 8011a60:	f02b 0304 	bic.w	r3, fp, #4
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	f04f 0900 	mov.w	r9, #0
 8011a6a:	9700      	str	r7, [sp, #0]
 8011a6c:	4633      	mov	r3, r6
 8011a6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011a70:	4621      	mov	r1, r4
 8011a72:	4628      	mov	r0, r5
 8011a74:	f000 f9d2 	bl	8011e1c <_printf_common>
 8011a78:	3001      	adds	r0, #1
 8011a7a:	f040 808d 	bne.w	8011b98 <_printf_float+0x1d0>
 8011a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a82:	b00d      	add	sp, #52	@ 0x34
 8011a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a88:	4642      	mov	r2, r8
 8011a8a:	464b      	mov	r3, r9
 8011a8c:	4640      	mov	r0, r8
 8011a8e:	4649      	mov	r1, r9
 8011a90:	f7ef f84c 	bl	8000b2c <__aeabi_dcmpun>
 8011a94:	b140      	cbz	r0, 8011aa8 <_printf_float+0xe0>
 8011a96:	464b      	mov	r3, r9
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	bfbc      	itt	lt
 8011a9c:	232d      	movlt	r3, #45	@ 0x2d
 8011a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8011c9c <_printf_float+0x2d4>)
 8011aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8011ca0 <_printf_float+0x2d8>)
 8011aa6:	e7d4      	b.n	8011a52 <_printf_float+0x8a>
 8011aa8:	6863      	ldr	r3, [r4, #4]
 8011aaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011aae:	9206      	str	r2, [sp, #24]
 8011ab0:	1c5a      	adds	r2, r3, #1
 8011ab2:	d13b      	bne.n	8011b2c <_printf_float+0x164>
 8011ab4:	2306      	movs	r3, #6
 8011ab6:	6063      	str	r3, [r4, #4]
 8011ab8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011abc:	2300      	movs	r3, #0
 8011abe:	6022      	str	r2, [r4, #0]
 8011ac0:	9303      	str	r3, [sp, #12]
 8011ac2:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ac4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011ac8:	ab09      	add	r3, sp, #36	@ 0x24
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	6861      	ldr	r1, [r4, #4]
 8011ace:	ec49 8b10 	vmov	d0, r8, r9
 8011ad2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f7ff fed6 	bl	8011888 <__cvt>
 8011adc:	9b06      	ldr	r3, [sp, #24]
 8011ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ae0:	2b47      	cmp	r3, #71	@ 0x47
 8011ae2:	4680      	mov	r8, r0
 8011ae4:	d129      	bne.n	8011b3a <_printf_float+0x172>
 8011ae6:	1cc8      	adds	r0, r1, #3
 8011ae8:	db02      	blt.n	8011af0 <_printf_float+0x128>
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	4299      	cmp	r1, r3
 8011aee:	dd41      	ble.n	8011b74 <_printf_float+0x1ac>
 8011af0:	f1aa 0a02 	sub.w	sl, sl, #2
 8011af4:	fa5f fa8a 	uxtb.w	sl, sl
 8011af8:	3901      	subs	r1, #1
 8011afa:	4652      	mov	r2, sl
 8011afc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011b00:	9109      	str	r1, [sp, #36]	@ 0x24
 8011b02:	f7ff ff26 	bl	8011952 <__exponent>
 8011b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b08:	1813      	adds	r3, r2, r0
 8011b0a:	2a01      	cmp	r2, #1
 8011b0c:	4681      	mov	r9, r0
 8011b0e:	6123      	str	r3, [r4, #16]
 8011b10:	dc02      	bgt.n	8011b18 <_printf_float+0x150>
 8011b12:	6822      	ldr	r2, [r4, #0]
 8011b14:	07d2      	lsls	r2, r2, #31
 8011b16:	d501      	bpl.n	8011b1c <_printf_float+0x154>
 8011b18:	3301      	adds	r3, #1
 8011b1a:	6123      	str	r3, [r4, #16]
 8011b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d0a2      	beq.n	8011a6a <_printf_float+0xa2>
 8011b24:	232d      	movs	r3, #45	@ 0x2d
 8011b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b2a:	e79e      	b.n	8011a6a <_printf_float+0xa2>
 8011b2c:	9a06      	ldr	r2, [sp, #24]
 8011b2e:	2a47      	cmp	r2, #71	@ 0x47
 8011b30:	d1c2      	bne.n	8011ab8 <_printf_float+0xf0>
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d1c0      	bne.n	8011ab8 <_printf_float+0xf0>
 8011b36:	2301      	movs	r3, #1
 8011b38:	e7bd      	b.n	8011ab6 <_printf_float+0xee>
 8011b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011b3e:	d9db      	bls.n	8011af8 <_printf_float+0x130>
 8011b40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011b44:	d118      	bne.n	8011b78 <_printf_float+0x1b0>
 8011b46:	2900      	cmp	r1, #0
 8011b48:	6863      	ldr	r3, [r4, #4]
 8011b4a:	dd0b      	ble.n	8011b64 <_printf_float+0x19c>
 8011b4c:	6121      	str	r1, [r4, #16]
 8011b4e:	b913      	cbnz	r3, 8011b56 <_printf_float+0x18e>
 8011b50:	6822      	ldr	r2, [r4, #0]
 8011b52:	07d0      	lsls	r0, r2, #31
 8011b54:	d502      	bpl.n	8011b5c <_printf_float+0x194>
 8011b56:	3301      	adds	r3, #1
 8011b58:	440b      	add	r3, r1
 8011b5a:	6123      	str	r3, [r4, #16]
 8011b5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011b5e:	f04f 0900 	mov.w	r9, #0
 8011b62:	e7db      	b.n	8011b1c <_printf_float+0x154>
 8011b64:	b913      	cbnz	r3, 8011b6c <_printf_float+0x1a4>
 8011b66:	6822      	ldr	r2, [r4, #0]
 8011b68:	07d2      	lsls	r2, r2, #31
 8011b6a:	d501      	bpl.n	8011b70 <_printf_float+0x1a8>
 8011b6c:	3302      	adds	r3, #2
 8011b6e:	e7f4      	b.n	8011b5a <_printf_float+0x192>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e7f2      	b.n	8011b5a <_printf_float+0x192>
 8011b74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b7a:	4299      	cmp	r1, r3
 8011b7c:	db05      	blt.n	8011b8a <_printf_float+0x1c2>
 8011b7e:	6823      	ldr	r3, [r4, #0]
 8011b80:	6121      	str	r1, [r4, #16]
 8011b82:	07d8      	lsls	r0, r3, #31
 8011b84:	d5ea      	bpl.n	8011b5c <_printf_float+0x194>
 8011b86:	1c4b      	adds	r3, r1, #1
 8011b88:	e7e7      	b.n	8011b5a <_printf_float+0x192>
 8011b8a:	2900      	cmp	r1, #0
 8011b8c:	bfd4      	ite	le
 8011b8e:	f1c1 0202 	rsble	r2, r1, #2
 8011b92:	2201      	movgt	r2, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	e7e0      	b.n	8011b5a <_printf_float+0x192>
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	055a      	lsls	r2, r3, #21
 8011b9c:	d407      	bmi.n	8011bae <_printf_float+0x1e6>
 8011b9e:	6923      	ldr	r3, [r4, #16]
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	47b8      	blx	r7
 8011ba8:	3001      	adds	r0, #1
 8011baa:	d12b      	bne.n	8011c04 <_printf_float+0x23c>
 8011bac:	e767      	b.n	8011a7e <_printf_float+0xb6>
 8011bae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011bb2:	f240 80dd 	bls.w	8011d70 <_printf_float+0x3a8>
 8011bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011bba:	2200      	movs	r2, #0
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	f7ee ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d033      	beq.n	8011c2e <_printf_float+0x266>
 8011bc6:	4a37      	ldr	r2, [pc, #220]	@ (8011ca4 <_printf_float+0x2dc>)
 8011bc8:	2301      	movs	r3, #1
 8011bca:	4631      	mov	r1, r6
 8011bcc:	4628      	mov	r0, r5
 8011bce:	47b8      	blx	r7
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	f43f af54 	beq.w	8011a7e <_printf_float+0xb6>
 8011bd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011bda:	4543      	cmp	r3, r8
 8011bdc:	db02      	blt.n	8011be4 <_printf_float+0x21c>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	07d8      	lsls	r0, r3, #31
 8011be2:	d50f      	bpl.n	8011c04 <_printf_float+0x23c>
 8011be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011be8:	4631      	mov	r1, r6
 8011bea:	4628      	mov	r0, r5
 8011bec:	47b8      	blx	r7
 8011bee:	3001      	adds	r0, #1
 8011bf0:	f43f af45 	beq.w	8011a7e <_printf_float+0xb6>
 8011bf4:	f04f 0900 	mov.w	r9, #0
 8011bf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8011bfc:	f104 0a1a 	add.w	sl, r4, #26
 8011c00:	45c8      	cmp	r8, r9
 8011c02:	dc09      	bgt.n	8011c18 <_printf_float+0x250>
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	079b      	lsls	r3, r3, #30
 8011c08:	f100 8103 	bmi.w	8011e12 <_printf_float+0x44a>
 8011c0c:	68e0      	ldr	r0, [r4, #12]
 8011c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c10:	4298      	cmp	r0, r3
 8011c12:	bfb8      	it	lt
 8011c14:	4618      	movlt	r0, r3
 8011c16:	e734      	b.n	8011a82 <_printf_float+0xba>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	4652      	mov	r2, sl
 8011c1c:	4631      	mov	r1, r6
 8011c1e:	4628      	mov	r0, r5
 8011c20:	47b8      	blx	r7
 8011c22:	3001      	adds	r0, #1
 8011c24:	f43f af2b 	beq.w	8011a7e <_printf_float+0xb6>
 8011c28:	f109 0901 	add.w	r9, r9, #1
 8011c2c:	e7e8      	b.n	8011c00 <_printf_float+0x238>
 8011c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	dc39      	bgt.n	8011ca8 <_printf_float+0x2e0>
 8011c34:	4a1b      	ldr	r2, [pc, #108]	@ (8011ca4 <_printf_float+0x2dc>)
 8011c36:	2301      	movs	r3, #1
 8011c38:	4631      	mov	r1, r6
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	47b8      	blx	r7
 8011c3e:	3001      	adds	r0, #1
 8011c40:	f43f af1d 	beq.w	8011a7e <_printf_float+0xb6>
 8011c44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011c48:	ea59 0303 	orrs.w	r3, r9, r3
 8011c4c:	d102      	bne.n	8011c54 <_printf_float+0x28c>
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	07d9      	lsls	r1, r3, #31
 8011c52:	d5d7      	bpl.n	8011c04 <_printf_float+0x23c>
 8011c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c58:	4631      	mov	r1, r6
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	47b8      	blx	r7
 8011c5e:	3001      	adds	r0, #1
 8011c60:	f43f af0d 	beq.w	8011a7e <_printf_float+0xb6>
 8011c64:	f04f 0a00 	mov.w	sl, #0
 8011c68:	f104 0b1a 	add.w	fp, r4, #26
 8011c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c6e:	425b      	negs	r3, r3
 8011c70:	4553      	cmp	r3, sl
 8011c72:	dc01      	bgt.n	8011c78 <_printf_float+0x2b0>
 8011c74:	464b      	mov	r3, r9
 8011c76:	e793      	b.n	8011ba0 <_printf_float+0x1d8>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	465a      	mov	r2, fp
 8011c7c:	4631      	mov	r1, r6
 8011c7e:	4628      	mov	r0, r5
 8011c80:	47b8      	blx	r7
 8011c82:	3001      	adds	r0, #1
 8011c84:	f43f aefb 	beq.w	8011a7e <_printf_float+0xb6>
 8011c88:	f10a 0a01 	add.w	sl, sl, #1
 8011c8c:	e7ee      	b.n	8011c6c <_printf_float+0x2a4>
 8011c8e:	bf00      	nop
 8011c90:	7fefffff 	.word	0x7fefffff
 8011c94:	08015a61 	.word	0x08015a61
 8011c98:	08015a65 	.word	0x08015a65
 8011c9c:	08015a69 	.word	0x08015a69
 8011ca0:	08015a6d 	.word	0x08015a6d
 8011ca4:	08015a71 	.word	0x08015a71
 8011ca8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011caa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011cae:	4553      	cmp	r3, sl
 8011cb0:	bfa8      	it	ge
 8011cb2:	4653      	movge	r3, sl
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	4699      	mov	r9, r3
 8011cb8:	dc36      	bgt.n	8011d28 <_printf_float+0x360>
 8011cba:	f04f 0b00 	mov.w	fp, #0
 8011cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cc2:	f104 021a 	add.w	r2, r4, #26
 8011cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011cc8:	9306      	str	r3, [sp, #24]
 8011cca:	eba3 0309 	sub.w	r3, r3, r9
 8011cce:	455b      	cmp	r3, fp
 8011cd0:	dc31      	bgt.n	8011d36 <_printf_float+0x36e>
 8011cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd4:	459a      	cmp	sl, r3
 8011cd6:	dc3a      	bgt.n	8011d4e <_printf_float+0x386>
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	07da      	lsls	r2, r3, #31
 8011cdc:	d437      	bmi.n	8011d4e <_printf_float+0x386>
 8011cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce0:	ebaa 0903 	sub.w	r9, sl, r3
 8011ce4:	9b06      	ldr	r3, [sp, #24]
 8011ce6:	ebaa 0303 	sub.w	r3, sl, r3
 8011cea:	4599      	cmp	r9, r3
 8011cec:	bfa8      	it	ge
 8011cee:	4699      	movge	r9, r3
 8011cf0:	f1b9 0f00 	cmp.w	r9, #0
 8011cf4:	dc33      	bgt.n	8011d5e <_printf_float+0x396>
 8011cf6:	f04f 0800 	mov.w	r8, #0
 8011cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cfe:	f104 0b1a 	add.w	fp, r4, #26
 8011d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d04:	ebaa 0303 	sub.w	r3, sl, r3
 8011d08:	eba3 0309 	sub.w	r3, r3, r9
 8011d0c:	4543      	cmp	r3, r8
 8011d0e:	f77f af79 	ble.w	8011c04 <_printf_float+0x23c>
 8011d12:	2301      	movs	r3, #1
 8011d14:	465a      	mov	r2, fp
 8011d16:	4631      	mov	r1, r6
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b8      	blx	r7
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	f43f aeae 	beq.w	8011a7e <_printf_float+0xb6>
 8011d22:	f108 0801 	add.w	r8, r8, #1
 8011d26:	e7ec      	b.n	8011d02 <_printf_float+0x33a>
 8011d28:	4642      	mov	r2, r8
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	47b8      	blx	r7
 8011d30:	3001      	adds	r0, #1
 8011d32:	d1c2      	bne.n	8011cba <_printf_float+0x2f2>
 8011d34:	e6a3      	b.n	8011a7e <_printf_float+0xb6>
 8011d36:	2301      	movs	r3, #1
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	9206      	str	r2, [sp, #24]
 8011d3e:	47b8      	blx	r7
 8011d40:	3001      	adds	r0, #1
 8011d42:	f43f ae9c 	beq.w	8011a7e <_printf_float+0xb6>
 8011d46:	9a06      	ldr	r2, [sp, #24]
 8011d48:	f10b 0b01 	add.w	fp, fp, #1
 8011d4c:	e7bb      	b.n	8011cc6 <_printf_float+0x2fe>
 8011d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d52:	4631      	mov	r1, r6
 8011d54:	4628      	mov	r0, r5
 8011d56:	47b8      	blx	r7
 8011d58:	3001      	adds	r0, #1
 8011d5a:	d1c0      	bne.n	8011cde <_printf_float+0x316>
 8011d5c:	e68f      	b.n	8011a7e <_printf_float+0xb6>
 8011d5e:	9a06      	ldr	r2, [sp, #24]
 8011d60:	464b      	mov	r3, r9
 8011d62:	4442      	add	r2, r8
 8011d64:	4631      	mov	r1, r6
 8011d66:	4628      	mov	r0, r5
 8011d68:	47b8      	blx	r7
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	d1c3      	bne.n	8011cf6 <_printf_float+0x32e>
 8011d6e:	e686      	b.n	8011a7e <_printf_float+0xb6>
 8011d70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011d74:	f1ba 0f01 	cmp.w	sl, #1
 8011d78:	dc01      	bgt.n	8011d7e <_printf_float+0x3b6>
 8011d7a:	07db      	lsls	r3, r3, #31
 8011d7c:	d536      	bpl.n	8011dec <_printf_float+0x424>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	4642      	mov	r2, r8
 8011d82:	4631      	mov	r1, r6
 8011d84:	4628      	mov	r0, r5
 8011d86:	47b8      	blx	r7
 8011d88:	3001      	adds	r0, #1
 8011d8a:	f43f ae78 	beq.w	8011a7e <_printf_float+0xb6>
 8011d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d92:	4631      	mov	r1, r6
 8011d94:	4628      	mov	r0, r5
 8011d96:	47b8      	blx	r7
 8011d98:	3001      	adds	r0, #1
 8011d9a:	f43f ae70 	beq.w	8011a7e <_printf_float+0xb6>
 8011d9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011da2:	2200      	movs	r2, #0
 8011da4:	2300      	movs	r3, #0
 8011da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011daa:	f7ee fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8011dae:	b9c0      	cbnz	r0, 8011de2 <_printf_float+0x41a>
 8011db0:	4653      	mov	r3, sl
 8011db2:	f108 0201 	add.w	r2, r8, #1
 8011db6:	4631      	mov	r1, r6
 8011db8:	4628      	mov	r0, r5
 8011dba:	47b8      	blx	r7
 8011dbc:	3001      	adds	r0, #1
 8011dbe:	d10c      	bne.n	8011dda <_printf_float+0x412>
 8011dc0:	e65d      	b.n	8011a7e <_printf_float+0xb6>
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	465a      	mov	r2, fp
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47b8      	blx	r7
 8011dcc:	3001      	adds	r0, #1
 8011dce:	f43f ae56 	beq.w	8011a7e <_printf_float+0xb6>
 8011dd2:	f108 0801 	add.w	r8, r8, #1
 8011dd6:	45d0      	cmp	r8, sl
 8011dd8:	dbf3      	blt.n	8011dc2 <_printf_float+0x3fa>
 8011dda:	464b      	mov	r3, r9
 8011ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011de0:	e6df      	b.n	8011ba2 <_printf_float+0x1da>
 8011de2:	f04f 0800 	mov.w	r8, #0
 8011de6:	f104 0b1a 	add.w	fp, r4, #26
 8011dea:	e7f4      	b.n	8011dd6 <_printf_float+0x40e>
 8011dec:	2301      	movs	r3, #1
 8011dee:	4642      	mov	r2, r8
 8011df0:	e7e1      	b.n	8011db6 <_printf_float+0x3ee>
 8011df2:	2301      	movs	r3, #1
 8011df4:	464a      	mov	r2, r9
 8011df6:	4631      	mov	r1, r6
 8011df8:	4628      	mov	r0, r5
 8011dfa:	47b8      	blx	r7
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	f43f ae3e 	beq.w	8011a7e <_printf_float+0xb6>
 8011e02:	f108 0801 	add.w	r8, r8, #1
 8011e06:	68e3      	ldr	r3, [r4, #12]
 8011e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e0a:	1a5b      	subs	r3, r3, r1
 8011e0c:	4543      	cmp	r3, r8
 8011e0e:	dcf0      	bgt.n	8011df2 <_printf_float+0x42a>
 8011e10:	e6fc      	b.n	8011c0c <_printf_float+0x244>
 8011e12:	f04f 0800 	mov.w	r8, #0
 8011e16:	f104 0919 	add.w	r9, r4, #25
 8011e1a:	e7f4      	b.n	8011e06 <_printf_float+0x43e>

08011e1c <_printf_common>:
 8011e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	4616      	mov	r6, r2
 8011e22:	4698      	mov	r8, r3
 8011e24:	688a      	ldr	r2, [r1, #8]
 8011e26:	690b      	ldr	r3, [r1, #16]
 8011e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	bfb8      	it	lt
 8011e30:	4613      	movlt	r3, r2
 8011e32:	6033      	str	r3, [r6, #0]
 8011e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e38:	4607      	mov	r7, r0
 8011e3a:	460c      	mov	r4, r1
 8011e3c:	b10a      	cbz	r2, 8011e42 <_printf_common+0x26>
 8011e3e:	3301      	adds	r3, #1
 8011e40:	6033      	str	r3, [r6, #0]
 8011e42:	6823      	ldr	r3, [r4, #0]
 8011e44:	0699      	lsls	r1, r3, #26
 8011e46:	bf42      	ittt	mi
 8011e48:	6833      	ldrmi	r3, [r6, #0]
 8011e4a:	3302      	addmi	r3, #2
 8011e4c:	6033      	strmi	r3, [r6, #0]
 8011e4e:	6825      	ldr	r5, [r4, #0]
 8011e50:	f015 0506 	ands.w	r5, r5, #6
 8011e54:	d106      	bne.n	8011e64 <_printf_common+0x48>
 8011e56:	f104 0a19 	add.w	sl, r4, #25
 8011e5a:	68e3      	ldr	r3, [r4, #12]
 8011e5c:	6832      	ldr	r2, [r6, #0]
 8011e5e:	1a9b      	subs	r3, r3, r2
 8011e60:	42ab      	cmp	r3, r5
 8011e62:	dc26      	bgt.n	8011eb2 <_printf_common+0x96>
 8011e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e68:	6822      	ldr	r2, [r4, #0]
 8011e6a:	3b00      	subs	r3, #0
 8011e6c:	bf18      	it	ne
 8011e6e:	2301      	movne	r3, #1
 8011e70:	0692      	lsls	r2, r2, #26
 8011e72:	d42b      	bmi.n	8011ecc <_printf_common+0xb0>
 8011e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e78:	4641      	mov	r1, r8
 8011e7a:	4638      	mov	r0, r7
 8011e7c:	47c8      	blx	r9
 8011e7e:	3001      	adds	r0, #1
 8011e80:	d01e      	beq.n	8011ec0 <_printf_common+0xa4>
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	6922      	ldr	r2, [r4, #16]
 8011e86:	f003 0306 	and.w	r3, r3, #6
 8011e8a:	2b04      	cmp	r3, #4
 8011e8c:	bf02      	ittt	eq
 8011e8e:	68e5      	ldreq	r5, [r4, #12]
 8011e90:	6833      	ldreq	r3, [r6, #0]
 8011e92:	1aed      	subeq	r5, r5, r3
 8011e94:	68a3      	ldr	r3, [r4, #8]
 8011e96:	bf0c      	ite	eq
 8011e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e9c:	2500      	movne	r5, #0
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	bfc4      	itt	gt
 8011ea2:	1a9b      	subgt	r3, r3, r2
 8011ea4:	18ed      	addgt	r5, r5, r3
 8011ea6:	2600      	movs	r6, #0
 8011ea8:	341a      	adds	r4, #26
 8011eaa:	42b5      	cmp	r5, r6
 8011eac:	d11a      	bne.n	8011ee4 <_printf_common+0xc8>
 8011eae:	2000      	movs	r0, #0
 8011eb0:	e008      	b.n	8011ec4 <_printf_common+0xa8>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	4652      	mov	r2, sl
 8011eb6:	4641      	mov	r1, r8
 8011eb8:	4638      	mov	r0, r7
 8011eba:	47c8      	blx	r9
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	d103      	bne.n	8011ec8 <_printf_common+0xac>
 8011ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec8:	3501      	adds	r5, #1
 8011eca:	e7c6      	b.n	8011e5a <_printf_common+0x3e>
 8011ecc:	18e1      	adds	r1, r4, r3
 8011ece:	1c5a      	adds	r2, r3, #1
 8011ed0:	2030      	movs	r0, #48	@ 0x30
 8011ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011ed6:	4422      	add	r2, r4
 8011ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011ee0:	3302      	adds	r3, #2
 8011ee2:	e7c7      	b.n	8011e74 <_printf_common+0x58>
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	4622      	mov	r2, r4
 8011ee8:	4641      	mov	r1, r8
 8011eea:	4638      	mov	r0, r7
 8011eec:	47c8      	blx	r9
 8011eee:	3001      	adds	r0, #1
 8011ef0:	d0e6      	beq.n	8011ec0 <_printf_common+0xa4>
 8011ef2:	3601      	adds	r6, #1
 8011ef4:	e7d9      	b.n	8011eaa <_printf_common+0x8e>
	...

08011ef8 <_printf_i>:
 8011ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011efc:	7e0f      	ldrb	r7, [r1, #24]
 8011efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f00:	2f78      	cmp	r7, #120	@ 0x78
 8011f02:	4691      	mov	r9, r2
 8011f04:	4680      	mov	r8, r0
 8011f06:	460c      	mov	r4, r1
 8011f08:	469a      	mov	sl, r3
 8011f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f0e:	d807      	bhi.n	8011f20 <_printf_i+0x28>
 8011f10:	2f62      	cmp	r7, #98	@ 0x62
 8011f12:	d80a      	bhi.n	8011f2a <_printf_i+0x32>
 8011f14:	2f00      	cmp	r7, #0
 8011f16:	f000 80d2 	beq.w	80120be <_printf_i+0x1c6>
 8011f1a:	2f58      	cmp	r7, #88	@ 0x58
 8011f1c:	f000 80b9 	beq.w	8012092 <_printf_i+0x19a>
 8011f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f28:	e03a      	b.n	8011fa0 <_printf_i+0xa8>
 8011f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f2e:	2b15      	cmp	r3, #21
 8011f30:	d8f6      	bhi.n	8011f20 <_printf_i+0x28>
 8011f32:	a101      	add	r1, pc, #4	@ (adr r1, 8011f38 <_printf_i+0x40>)
 8011f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f38:	08011f91 	.word	0x08011f91
 8011f3c:	08011fa5 	.word	0x08011fa5
 8011f40:	08011f21 	.word	0x08011f21
 8011f44:	08011f21 	.word	0x08011f21
 8011f48:	08011f21 	.word	0x08011f21
 8011f4c:	08011f21 	.word	0x08011f21
 8011f50:	08011fa5 	.word	0x08011fa5
 8011f54:	08011f21 	.word	0x08011f21
 8011f58:	08011f21 	.word	0x08011f21
 8011f5c:	08011f21 	.word	0x08011f21
 8011f60:	08011f21 	.word	0x08011f21
 8011f64:	080120a5 	.word	0x080120a5
 8011f68:	08011fcf 	.word	0x08011fcf
 8011f6c:	0801205f 	.word	0x0801205f
 8011f70:	08011f21 	.word	0x08011f21
 8011f74:	08011f21 	.word	0x08011f21
 8011f78:	080120c7 	.word	0x080120c7
 8011f7c:	08011f21 	.word	0x08011f21
 8011f80:	08011fcf 	.word	0x08011fcf
 8011f84:	08011f21 	.word	0x08011f21
 8011f88:	08011f21 	.word	0x08011f21
 8011f8c:	08012067 	.word	0x08012067
 8011f90:	6833      	ldr	r3, [r6, #0]
 8011f92:	1d1a      	adds	r2, r3, #4
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	6032      	str	r2, [r6, #0]
 8011f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e09d      	b.n	80120e0 <_printf_i+0x1e8>
 8011fa4:	6833      	ldr	r3, [r6, #0]
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	1d19      	adds	r1, r3, #4
 8011faa:	6031      	str	r1, [r6, #0]
 8011fac:	0606      	lsls	r6, r0, #24
 8011fae:	d501      	bpl.n	8011fb4 <_printf_i+0xbc>
 8011fb0:	681d      	ldr	r5, [r3, #0]
 8011fb2:	e003      	b.n	8011fbc <_printf_i+0xc4>
 8011fb4:	0645      	lsls	r5, r0, #25
 8011fb6:	d5fb      	bpl.n	8011fb0 <_printf_i+0xb8>
 8011fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011fbc:	2d00      	cmp	r5, #0
 8011fbe:	da03      	bge.n	8011fc8 <_printf_i+0xd0>
 8011fc0:	232d      	movs	r3, #45	@ 0x2d
 8011fc2:	426d      	negs	r5, r5
 8011fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fc8:	4859      	ldr	r0, [pc, #356]	@ (8012130 <_printf_i+0x238>)
 8011fca:	230a      	movs	r3, #10
 8011fcc:	e011      	b.n	8011ff2 <_printf_i+0xfa>
 8011fce:	6821      	ldr	r1, [r4, #0]
 8011fd0:	6833      	ldr	r3, [r6, #0]
 8011fd2:	0608      	lsls	r0, r1, #24
 8011fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011fd8:	d402      	bmi.n	8011fe0 <_printf_i+0xe8>
 8011fda:	0649      	lsls	r1, r1, #25
 8011fdc:	bf48      	it	mi
 8011fde:	b2ad      	uxthmi	r5, r5
 8011fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011fe2:	4853      	ldr	r0, [pc, #332]	@ (8012130 <_printf_i+0x238>)
 8011fe4:	6033      	str	r3, [r6, #0]
 8011fe6:	bf14      	ite	ne
 8011fe8:	230a      	movne	r3, #10
 8011fea:	2308      	moveq	r3, #8
 8011fec:	2100      	movs	r1, #0
 8011fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011ff2:	6866      	ldr	r6, [r4, #4]
 8011ff4:	60a6      	str	r6, [r4, #8]
 8011ff6:	2e00      	cmp	r6, #0
 8011ff8:	bfa2      	ittt	ge
 8011ffa:	6821      	ldrge	r1, [r4, #0]
 8011ffc:	f021 0104 	bicge.w	r1, r1, #4
 8012000:	6021      	strge	r1, [r4, #0]
 8012002:	b90d      	cbnz	r5, 8012008 <_printf_i+0x110>
 8012004:	2e00      	cmp	r6, #0
 8012006:	d04b      	beq.n	80120a0 <_printf_i+0x1a8>
 8012008:	4616      	mov	r6, r2
 801200a:	fbb5 f1f3 	udiv	r1, r5, r3
 801200e:	fb03 5711 	mls	r7, r3, r1, r5
 8012012:	5dc7      	ldrb	r7, [r0, r7]
 8012014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012018:	462f      	mov	r7, r5
 801201a:	42bb      	cmp	r3, r7
 801201c:	460d      	mov	r5, r1
 801201e:	d9f4      	bls.n	801200a <_printf_i+0x112>
 8012020:	2b08      	cmp	r3, #8
 8012022:	d10b      	bne.n	801203c <_printf_i+0x144>
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	07df      	lsls	r7, r3, #31
 8012028:	d508      	bpl.n	801203c <_printf_i+0x144>
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	6861      	ldr	r1, [r4, #4]
 801202e:	4299      	cmp	r1, r3
 8012030:	bfde      	ittt	le
 8012032:	2330      	movle	r3, #48	@ 0x30
 8012034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012038:	f106 36ff 	addle.w	r6, r6, #4294967295
 801203c:	1b92      	subs	r2, r2, r6
 801203e:	6122      	str	r2, [r4, #16]
 8012040:	f8cd a000 	str.w	sl, [sp]
 8012044:	464b      	mov	r3, r9
 8012046:	aa03      	add	r2, sp, #12
 8012048:	4621      	mov	r1, r4
 801204a:	4640      	mov	r0, r8
 801204c:	f7ff fee6 	bl	8011e1c <_printf_common>
 8012050:	3001      	adds	r0, #1
 8012052:	d14a      	bne.n	80120ea <_printf_i+0x1f2>
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	b004      	add	sp, #16
 801205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	f043 0320 	orr.w	r3, r3, #32
 8012064:	6023      	str	r3, [r4, #0]
 8012066:	4833      	ldr	r0, [pc, #204]	@ (8012134 <_printf_i+0x23c>)
 8012068:	2778      	movs	r7, #120	@ 0x78
 801206a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	6831      	ldr	r1, [r6, #0]
 8012072:	061f      	lsls	r7, r3, #24
 8012074:	f851 5b04 	ldr.w	r5, [r1], #4
 8012078:	d402      	bmi.n	8012080 <_printf_i+0x188>
 801207a:	065f      	lsls	r7, r3, #25
 801207c:	bf48      	it	mi
 801207e:	b2ad      	uxthmi	r5, r5
 8012080:	6031      	str	r1, [r6, #0]
 8012082:	07d9      	lsls	r1, r3, #31
 8012084:	bf44      	itt	mi
 8012086:	f043 0320 	orrmi.w	r3, r3, #32
 801208a:	6023      	strmi	r3, [r4, #0]
 801208c:	b11d      	cbz	r5, 8012096 <_printf_i+0x19e>
 801208e:	2310      	movs	r3, #16
 8012090:	e7ac      	b.n	8011fec <_printf_i+0xf4>
 8012092:	4827      	ldr	r0, [pc, #156]	@ (8012130 <_printf_i+0x238>)
 8012094:	e7e9      	b.n	801206a <_printf_i+0x172>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f023 0320 	bic.w	r3, r3, #32
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	e7f6      	b.n	801208e <_printf_i+0x196>
 80120a0:	4616      	mov	r6, r2
 80120a2:	e7bd      	b.n	8012020 <_printf_i+0x128>
 80120a4:	6833      	ldr	r3, [r6, #0]
 80120a6:	6825      	ldr	r5, [r4, #0]
 80120a8:	6961      	ldr	r1, [r4, #20]
 80120aa:	1d18      	adds	r0, r3, #4
 80120ac:	6030      	str	r0, [r6, #0]
 80120ae:	062e      	lsls	r6, r5, #24
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	d501      	bpl.n	80120b8 <_printf_i+0x1c0>
 80120b4:	6019      	str	r1, [r3, #0]
 80120b6:	e002      	b.n	80120be <_printf_i+0x1c6>
 80120b8:	0668      	lsls	r0, r5, #25
 80120ba:	d5fb      	bpl.n	80120b4 <_printf_i+0x1bc>
 80120bc:	8019      	strh	r1, [r3, #0]
 80120be:	2300      	movs	r3, #0
 80120c0:	6123      	str	r3, [r4, #16]
 80120c2:	4616      	mov	r6, r2
 80120c4:	e7bc      	b.n	8012040 <_printf_i+0x148>
 80120c6:	6833      	ldr	r3, [r6, #0]
 80120c8:	1d1a      	adds	r2, r3, #4
 80120ca:	6032      	str	r2, [r6, #0]
 80120cc:	681e      	ldr	r6, [r3, #0]
 80120ce:	6862      	ldr	r2, [r4, #4]
 80120d0:	2100      	movs	r1, #0
 80120d2:	4630      	mov	r0, r6
 80120d4:	f7ee f87c 	bl	80001d0 <memchr>
 80120d8:	b108      	cbz	r0, 80120de <_printf_i+0x1e6>
 80120da:	1b80      	subs	r0, r0, r6
 80120dc:	6060      	str	r0, [r4, #4]
 80120de:	6863      	ldr	r3, [r4, #4]
 80120e0:	6123      	str	r3, [r4, #16]
 80120e2:	2300      	movs	r3, #0
 80120e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120e8:	e7aa      	b.n	8012040 <_printf_i+0x148>
 80120ea:	6923      	ldr	r3, [r4, #16]
 80120ec:	4632      	mov	r2, r6
 80120ee:	4649      	mov	r1, r9
 80120f0:	4640      	mov	r0, r8
 80120f2:	47d0      	blx	sl
 80120f4:	3001      	adds	r0, #1
 80120f6:	d0ad      	beq.n	8012054 <_printf_i+0x15c>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	079b      	lsls	r3, r3, #30
 80120fc:	d413      	bmi.n	8012126 <_printf_i+0x22e>
 80120fe:	68e0      	ldr	r0, [r4, #12]
 8012100:	9b03      	ldr	r3, [sp, #12]
 8012102:	4298      	cmp	r0, r3
 8012104:	bfb8      	it	lt
 8012106:	4618      	movlt	r0, r3
 8012108:	e7a6      	b.n	8012058 <_printf_i+0x160>
 801210a:	2301      	movs	r3, #1
 801210c:	4632      	mov	r2, r6
 801210e:	4649      	mov	r1, r9
 8012110:	4640      	mov	r0, r8
 8012112:	47d0      	blx	sl
 8012114:	3001      	adds	r0, #1
 8012116:	d09d      	beq.n	8012054 <_printf_i+0x15c>
 8012118:	3501      	adds	r5, #1
 801211a:	68e3      	ldr	r3, [r4, #12]
 801211c:	9903      	ldr	r1, [sp, #12]
 801211e:	1a5b      	subs	r3, r3, r1
 8012120:	42ab      	cmp	r3, r5
 8012122:	dcf2      	bgt.n	801210a <_printf_i+0x212>
 8012124:	e7eb      	b.n	80120fe <_printf_i+0x206>
 8012126:	2500      	movs	r5, #0
 8012128:	f104 0619 	add.w	r6, r4, #25
 801212c:	e7f5      	b.n	801211a <_printf_i+0x222>
 801212e:	bf00      	nop
 8012130:	08015a73 	.word	0x08015a73
 8012134:	08015a84 	.word	0x08015a84

08012138 <std>:
 8012138:	2300      	movs	r3, #0
 801213a:	b510      	push	{r4, lr}
 801213c:	4604      	mov	r4, r0
 801213e:	e9c0 3300 	strd	r3, r3, [r0]
 8012142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012146:	6083      	str	r3, [r0, #8]
 8012148:	8181      	strh	r1, [r0, #12]
 801214a:	6643      	str	r3, [r0, #100]	@ 0x64
 801214c:	81c2      	strh	r2, [r0, #14]
 801214e:	6183      	str	r3, [r0, #24]
 8012150:	4619      	mov	r1, r3
 8012152:	2208      	movs	r2, #8
 8012154:	305c      	adds	r0, #92	@ 0x5c
 8012156:	f000 f94d 	bl	80123f4 <memset>
 801215a:	4b0d      	ldr	r3, [pc, #52]	@ (8012190 <std+0x58>)
 801215c:	6263      	str	r3, [r4, #36]	@ 0x24
 801215e:	4b0d      	ldr	r3, [pc, #52]	@ (8012194 <std+0x5c>)
 8012160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012162:	4b0d      	ldr	r3, [pc, #52]	@ (8012198 <std+0x60>)
 8012164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012166:	4b0d      	ldr	r3, [pc, #52]	@ (801219c <std+0x64>)
 8012168:	6323      	str	r3, [r4, #48]	@ 0x30
 801216a:	4b0d      	ldr	r3, [pc, #52]	@ (80121a0 <std+0x68>)
 801216c:	6224      	str	r4, [r4, #32]
 801216e:	429c      	cmp	r4, r3
 8012170:	d006      	beq.n	8012180 <std+0x48>
 8012172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012176:	4294      	cmp	r4, r2
 8012178:	d002      	beq.n	8012180 <std+0x48>
 801217a:	33d0      	adds	r3, #208	@ 0xd0
 801217c:	429c      	cmp	r4, r3
 801217e:	d105      	bne.n	801218c <std+0x54>
 8012180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012188:	f000 ba92 	b.w	80126b0 <__retarget_lock_init_recursive>
 801218c:	bd10      	pop	{r4, pc}
 801218e:	bf00      	nop
 8012190:	080122fd 	.word	0x080122fd
 8012194:	0801231f 	.word	0x0801231f
 8012198:	08012357 	.word	0x08012357
 801219c:	0801237b 	.word	0x0801237b
 80121a0:	20005958 	.word	0x20005958

080121a4 <stdio_exit_handler>:
 80121a4:	4a02      	ldr	r2, [pc, #8]	@ (80121b0 <stdio_exit_handler+0xc>)
 80121a6:	4903      	ldr	r1, [pc, #12]	@ (80121b4 <stdio_exit_handler+0x10>)
 80121a8:	4803      	ldr	r0, [pc, #12]	@ (80121b8 <stdio_exit_handler+0x14>)
 80121aa:	f000 b869 	b.w	8012280 <_fwalk_sglue>
 80121ae:	bf00      	nop
 80121b0:	2000025c 	.word	0x2000025c
 80121b4:	08014831 	.word	0x08014831
 80121b8:	200003d8 	.word	0x200003d8

080121bc <cleanup_stdio>:
 80121bc:	6841      	ldr	r1, [r0, #4]
 80121be:	4b0c      	ldr	r3, [pc, #48]	@ (80121f0 <cleanup_stdio+0x34>)
 80121c0:	4299      	cmp	r1, r3
 80121c2:	b510      	push	{r4, lr}
 80121c4:	4604      	mov	r4, r0
 80121c6:	d001      	beq.n	80121cc <cleanup_stdio+0x10>
 80121c8:	f002 fb32 	bl	8014830 <_fflush_r>
 80121cc:	68a1      	ldr	r1, [r4, #8]
 80121ce:	4b09      	ldr	r3, [pc, #36]	@ (80121f4 <cleanup_stdio+0x38>)
 80121d0:	4299      	cmp	r1, r3
 80121d2:	d002      	beq.n	80121da <cleanup_stdio+0x1e>
 80121d4:	4620      	mov	r0, r4
 80121d6:	f002 fb2b 	bl	8014830 <_fflush_r>
 80121da:	68e1      	ldr	r1, [r4, #12]
 80121dc:	4b06      	ldr	r3, [pc, #24]	@ (80121f8 <cleanup_stdio+0x3c>)
 80121de:	4299      	cmp	r1, r3
 80121e0:	d004      	beq.n	80121ec <cleanup_stdio+0x30>
 80121e2:	4620      	mov	r0, r4
 80121e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e8:	f002 bb22 	b.w	8014830 <_fflush_r>
 80121ec:	bd10      	pop	{r4, pc}
 80121ee:	bf00      	nop
 80121f0:	20005958 	.word	0x20005958
 80121f4:	200059c0 	.word	0x200059c0
 80121f8:	20005a28 	.word	0x20005a28

080121fc <global_stdio_init.part.0>:
 80121fc:	b510      	push	{r4, lr}
 80121fe:	4b0b      	ldr	r3, [pc, #44]	@ (801222c <global_stdio_init.part.0+0x30>)
 8012200:	4c0b      	ldr	r4, [pc, #44]	@ (8012230 <global_stdio_init.part.0+0x34>)
 8012202:	4a0c      	ldr	r2, [pc, #48]	@ (8012234 <global_stdio_init.part.0+0x38>)
 8012204:	601a      	str	r2, [r3, #0]
 8012206:	4620      	mov	r0, r4
 8012208:	2200      	movs	r2, #0
 801220a:	2104      	movs	r1, #4
 801220c:	f7ff ff94 	bl	8012138 <std>
 8012210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012214:	2201      	movs	r2, #1
 8012216:	2109      	movs	r1, #9
 8012218:	f7ff ff8e 	bl	8012138 <std>
 801221c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012220:	2202      	movs	r2, #2
 8012222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012226:	2112      	movs	r1, #18
 8012228:	f7ff bf86 	b.w	8012138 <std>
 801222c:	20005a90 	.word	0x20005a90
 8012230:	20005958 	.word	0x20005958
 8012234:	080121a5 	.word	0x080121a5

08012238 <__sfp_lock_acquire>:
 8012238:	4801      	ldr	r0, [pc, #4]	@ (8012240 <__sfp_lock_acquire+0x8>)
 801223a:	f000 ba3a 	b.w	80126b2 <__retarget_lock_acquire_recursive>
 801223e:	bf00      	nop
 8012240:	20005a99 	.word	0x20005a99

08012244 <__sfp_lock_release>:
 8012244:	4801      	ldr	r0, [pc, #4]	@ (801224c <__sfp_lock_release+0x8>)
 8012246:	f000 ba35 	b.w	80126b4 <__retarget_lock_release_recursive>
 801224a:	bf00      	nop
 801224c:	20005a99 	.word	0x20005a99

08012250 <__sinit>:
 8012250:	b510      	push	{r4, lr}
 8012252:	4604      	mov	r4, r0
 8012254:	f7ff fff0 	bl	8012238 <__sfp_lock_acquire>
 8012258:	6a23      	ldr	r3, [r4, #32]
 801225a:	b11b      	cbz	r3, 8012264 <__sinit+0x14>
 801225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012260:	f7ff bff0 	b.w	8012244 <__sfp_lock_release>
 8012264:	4b04      	ldr	r3, [pc, #16]	@ (8012278 <__sinit+0x28>)
 8012266:	6223      	str	r3, [r4, #32]
 8012268:	4b04      	ldr	r3, [pc, #16]	@ (801227c <__sinit+0x2c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1f5      	bne.n	801225c <__sinit+0xc>
 8012270:	f7ff ffc4 	bl	80121fc <global_stdio_init.part.0>
 8012274:	e7f2      	b.n	801225c <__sinit+0xc>
 8012276:	bf00      	nop
 8012278:	080121bd 	.word	0x080121bd
 801227c:	20005a90 	.word	0x20005a90

08012280 <_fwalk_sglue>:
 8012280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012284:	4607      	mov	r7, r0
 8012286:	4688      	mov	r8, r1
 8012288:	4614      	mov	r4, r2
 801228a:	2600      	movs	r6, #0
 801228c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012290:	f1b9 0901 	subs.w	r9, r9, #1
 8012294:	d505      	bpl.n	80122a2 <_fwalk_sglue+0x22>
 8012296:	6824      	ldr	r4, [r4, #0]
 8012298:	2c00      	cmp	r4, #0
 801229a:	d1f7      	bne.n	801228c <_fwalk_sglue+0xc>
 801229c:	4630      	mov	r0, r6
 801229e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122a2:	89ab      	ldrh	r3, [r5, #12]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d907      	bls.n	80122b8 <_fwalk_sglue+0x38>
 80122a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122ac:	3301      	adds	r3, #1
 80122ae:	d003      	beq.n	80122b8 <_fwalk_sglue+0x38>
 80122b0:	4629      	mov	r1, r5
 80122b2:	4638      	mov	r0, r7
 80122b4:	47c0      	blx	r8
 80122b6:	4306      	orrs	r6, r0
 80122b8:	3568      	adds	r5, #104	@ 0x68
 80122ba:	e7e9      	b.n	8012290 <_fwalk_sglue+0x10>

080122bc <siprintf>:
 80122bc:	b40e      	push	{r1, r2, r3}
 80122be:	b500      	push	{lr}
 80122c0:	b09c      	sub	sp, #112	@ 0x70
 80122c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80122c4:	9002      	str	r0, [sp, #8]
 80122c6:	9006      	str	r0, [sp, #24]
 80122c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80122cc:	4809      	ldr	r0, [pc, #36]	@ (80122f4 <siprintf+0x38>)
 80122ce:	9107      	str	r1, [sp, #28]
 80122d0:	9104      	str	r1, [sp, #16]
 80122d2:	4909      	ldr	r1, [pc, #36]	@ (80122f8 <siprintf+0x3c>)
 80122d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80122d8:	9105      	str	r1, [sp, #20]
 80122da:	6800      	ldr	r0, [r0, #0]
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	a902      	add	r1, sp, #8
 80122e0:	f002 f926 	bl	8014530 <_svfiprintf_r>
 80122e4:	9b02      	ldr	r3, [sp, #8]
 80122e6:	2200      	movs	r2, #0
 80122e8:	701a      	strb	r2, [r3, #0]
 80122ea:	b01c      	add	sp, #112	@ 0x70
 80122ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80122f0:	b003      	add	sp, #12
 80122f2:	4770      	bx	lr
 80122f4:	200003d4 	.word	0x200003d4
 80122f8:	ffff0208 	.word	0xffff0208

080122fc <__sread>:
 80122fc:	b510      	push	{r4, lr}
 80122fe:	460c      	mov	r4, r1
 8012300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012304:	f000 f976 	bl	80125f4 <_read_r>
 8012308:	2800      	cmp	r0, #0
 801230a:	bfab      	itete	ge
 801230c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801230e:	89a3      	ldrhlt	r3, [r4, #12]
 8012310:	181b      	addge	r3, r3, r0
 8012312:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012316:	bfac      	ite	ge
 8012318:	6563      	strge	r3, [r4, #84]	@ 0x54
 801231a:	81a3      	strhlt	r3, [r4, #12]
 801231c:	bd10      	pop	{r4, pc}

0801231e <__swrite>:
 801231e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012322:	461f      	mov	r7, r3
 8012324:	898b      	ldrh	r3, [r1, #12]
 8012326:	05db      	lsls	r3, r3, #23
 8012328:	4605      	mov	r5, r0
 801232a:	460c      	mov	r4, r1
 801232c:	4616      	mov	r6, r2
 801232e:	d505      	bpl.n	801233c <__swrite+0x1e>
 8012330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012334:	2302      	movs	r3, #2
 8012336:	2200      	movs	r2, #0
 8012338:	f000 f94a 	bl	80125d0 <_lseek_r>
 801233c:	89a3      	ldrh	r3, [r4, #12]
 801233e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012346:	81a3      	strh	r3, [r4, #12]
 8012348:	4632      	mov	r2, r6
 801234a:	463b      	mov	r3, r7
 801234c:	4628      	mov	r0, r5
 801234e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012352:	f000 b971 	b.w	8012638 <_write_r>

08012356 <__sseek>:
 8012356:	b510      	push	{r4, lr}
 8012358:	460c      	mov	r4, r1
 801235a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801235e:	f000 f937 	bl	80125d0 <_lseek_r>
 8012362:	1c43      	adds	r3, r0, #1
 8012364:	89a3      	ldrh	r3, [r4, #12]
 8012366:	bf15      	itete	ne
 8012368:	6560      	strne	r0, [r4, #84]	@ 0x54
 801236a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801236e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012372:	81a3      	strheq	r3, [r4, #12]
 8012374:	bf18      	it	ne
 8012376:	81a3      	strhne	r3, [r4, #12]
 8012378:	bd10      	pop	{r4, pc}

0801237a <__sclose>:
 801237a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801237e:	f000 b8c1 	b.w	8012504 <_close_r>

08012382 <_vsniprintf_r>:
 8012382:	b530      	push	{r4, r5, lr}
 8012384:	4614      	mov	r4, r2
 8012386:	2c00      	cmp	r4, #0
 8012388:	b09b      	sub	sp, #108	@ 0x6c
 801238a:	4605      	mov	r5, r0
 801238c:	461a      	mov	r2, r3
 801238e:	da05      	bge.n	801239c <_vsniprintf_r+0x1a>
 8012390:	238b      	movs	r3, #139	@ 0x8b
 8012392:	6003      	str	r3, [r0, #0]
 8012394:	f04f 30ff 	mov.w	r0, #4294967295
 8012398:	b01b      	add	sp, #108	@ 0x6c
 801239a:	bd30      	pop	{r4, r5, pc}
 801239c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80123a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80123a4:	bf14      	ite	ne
 80123a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80123aa:	4623      	moveq	r3, r4
 80123ac:	9302      	str	r3, [sp, #8]
 80123ae:	9305      	str	r3, [sp, #20]
 80123b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80123b4:	9100      	str	r1, [sp, #0]
 80123b6:	9104      	str	r1, [sp, #16]
 80123b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80123bc:	4669      	mov	r1, sp
 80123be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80123c0:	f002 f8b6 	bl	8014530 <_svfiprintf_r>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	bfbc      	itt	lt
 80123c8:	238b      	movlt	r3, #139	@ 0x8b
 80123ca:	602b      	strlt	r3, [r5, #0]
 80123cc:	2c00      	cmp	r4, #0
 80123ce:	d0e3      	beq.n	8012398 <_vsniprintf_r+0x16>
 80123d0:	9b00      	ldr	r3, [sp, #0]
 80123d2:	2200      	movs	r2, #0
 80123d4:	701a      	strb	r2, [r3, #0]
 80123d6:	e7df      	b.n	8012398 <_vsniprintf_r+0x16>

080123d8 <vsniprintf>:
 80123d8:	b507      	push	{r0, r1, r2, lr}
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	4613      	mov	r3, r2
 80123de:	460a      	mov	r2, r1
 80123e0:	4601      	mov	r1, r0
 80123e2:	4803      	ldr	r0, [pc, #12]	@ (80123f0 <vsniprintf+0x18>)
 80123e4:	6800      	ldr	r0, [r0, #0]
 80123e6:	f7ff ffcc 	bl	8012382 <_vsniprintf_r>
 80123ea:	b003      	add	sp, #12
 80123ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80123f0:	200003d4 	.word	0x200003d4

080123f4 <memset>:
 80123f4:	4402      	add	r2, r0
 80123f6:	4603      	mov	r3, r0
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d100      	bne.n	80123fe <memset+0xa>
 80123fc:	4770      	bx	lr
 80123fe:	f803 1b01 	strb.w	r1, [r3], #1
 8012402:	e7f9      	b.n	80123f8 <memset+0x4>

08012404 <strchr>:
 8012404:	b2c9      	uxtb	r1, r1
 8012406:	4603      	mov	r3, r0
 8012408:	4618      	mov	r0, r3
 801240a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801240e:	b112      	cbz	r2, 8012416 <strchr+0x12>
 8012410:	428a      	cmp	r2, r1
 8012412:	d1f9      	bne.n	8012408 <strchr+0x4>
 8012414:	4770      	bx	lr
 8012416:	2900      	cmp	r1, #0
 8012418:	bf18      	it	ne
 801241a:	2000      	movne	r0, #0
 801241c:	4770      	bx	lr

0801241e <strncmp>:
 801241e:	b510      	push	{r4, lr}
 8012420:	b16a      	cbz	r2, 801243e <strncmp+0x20>
 8012422:	3901      	subs	r1, #1
 8012424:	1884      	adds	r4, r0, r2
 8012426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801242a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801242e:	429a      	cmp	r2, r3
 8012430:	d103      	bne.n	801243a <strncmp+0x1c>
 8012432:	42a0      	cmp	r0, r4
 8012434:	d001      	beq.n	801243a <strncmp+0x1c>
 8012436:	2a00      	cmp	r2, #0
 8012438:	d1f5      	bne.n	8012426 <strncmp+0x8>
 801243a:	1ad0      	subs	r0, r2, r3
 801243c:	bd10      	pop	{r4, pc}
 801243e:	4610      	mov	r0, r2
 8012440:	e7fc      	b.n	801243c <strncmp+0x1e>
	...

08012444 <strtok>:
 8012444:	4b16      	ldr	r3, [pc, #88]	@ (80124a0 <strtok+0x5c>)
 8012446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801244a:	681f      	ldr	r7, [r3, #0]
 801244c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801244e:	4605      	mov	r5, r0
 8012450:	460e      	mov	r6, r1
 8012452:	b9ec      	cbnz	r4, 8012490 <strtok+0x4c>
 8012454:	2050      	movs	r0, #80	@ 0x50
 8012456:	f7fe fac5 	bl	80109e4 <malloc>
 801245a:	4602      	mov	r2, r0
 801245c:	6478      	str	r0, [r7, #68]	@ 0x44
 801245e:	b920      	cbnz	r0, 801246a <strtok+0x26>
 8012460:	4b10      	ldr	r3, [pc, #64]	@ (80124a4 <strtok+0x60>)
 8012462:	4811      	ldr	r0, [pc, #68]	@ (80124a8 <strtok+0x64>)
 8012464:	215b      	movs	r1, #91	@ 0x5b
 8012466:	f000 f947 	bl	80126f8 <__assert_func>
 801246a:	e9c0 4400 	strd	r4, r4, [r0]
 801246e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012472:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012476:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801247a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801247e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8012482:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012486:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801248a:	6184      	str	r4, [r0, #24]
 801248c:	7704      	strb	r4, [r0, #28]
 801248e:	6244      	str	r4, [r0, #36]	@ 0x24
 8012490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012492:	4631      	mov	r1, r6
 8012494:	4628      	mov	r0, r5
 8012496:	2301      	movs	r3, #1
 8012498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	f000 b806 	b.w	80124ac <__strtok_r>
 80124a0:	200003d4 	.word	0x200003d4
 80124a4:	08015a95 	.word	0x08015a95
 80124a8:	08015aac 	.word	0x08015aac

080124ac <__strtok_r>:
 80124ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ae:	4604      	mov	r4, r0
 80124b0:	b908      	cbnz	r0, 80124b6 <__strtok_r+0xa>
 80124b2:	6814      	ldr	r4, [r2, #0]
 80124b4:	b144      	cbz	r4, 80124c8 <__strtok_r+0x1c>
 80124b6:	4620      	mov	r0, r4
 80124b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80124bc:	460f      	mov	r7, r1
 80124be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80124c2:	b91e      	cbnz	r6, 80124cc <__strtok_r+0x20>
 80124c4:	b965      	cbnz	r5, 80124e0 <__strtok_r+0x34>
 80124c6:	6015      	str	r5, [r2, #0]
 80124c8:	2000      	movs	r0, #0
 80124ca:	e005      	b.n	80124d8 <__strtok_r+0x2c>
 80124cc:	42b5      	cmp	r5, r6
 80124ce:	d1f6      	bne.n	80124be <__strtok_r+0x12>
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d1f0      	bne.n	80124b6 <__strtok_r+0xa>
 80124d4:	6014      	str	r4, [r2, #0]
 80124d6:	7003      	strb	r3, [r0, #0]
 80124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124da:	461c      	mov	r4, r3
 80124dc:	e00c      	b.n	80124f8 <__strtok_r+0x4c>
 80124de:	b915      	cbnz	r5, 80124e6 <__strtok_r+0x3a>
 80124e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124e4:	460e      	mov	r6, r1
 80124e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80124ea:	42ab      	cmp	r3, r5
 80124ec:	d1f7      	bne.n	80124de <__strtok_r+0x32>
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d0f3      	beq.n	80124da <__strtok_r+0x2e>
 80124f2:	2300      	movs	r3, #0
 80124f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80124f8:	6014      	str	r4, [r2, #0]
 80124fa:	e7ed      	b.n	80124d8 <__strtok_r+0x2c>

080124fc <_localeconv_r>:
 80124fc:	4800      	ldr	r0, [pc, #0]	@ (8012500 <_localeconv_r+0x4>)
 80124fe:	4770      	bx	lr
 8012500:	20000358 	.word	0x20000358

08012504 <_close_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d06      	ldr	r5, [pc, #24]	@ (8012520 <_close_r+0x1c>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	602b      	str	r3, [r5, #0]
 8012510:	f7f1 fa46 	bl	80039a0 <_close>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_close_r+0x1a>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_close_r+0x1a>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	20005a94 	.word	0x20005a94

08012524 <_reclaim_reent>:
 8012524:	4b29      	ldr	r3, [pc, #164]	@ (80125cc <_reclaim_reent+0xa8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4283      	cmp	r3, r0
 801252a:	b570      	push	{r4, r5, r6, lr}
 801252c:	4604      	mov	r4, r0
 801252e:	d04b      	beq.n	80125c8 <_reclaim_reent+0xa4>
 8012530:	69c3      	ldr	r3, [r0, #28]
 8012532:	b1ab      	cbz	r3, 8012560 <_reclaim_reent+0x3c>
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	b16b      	cbz	r3, 8012554 <_reclaim_reent+0x30>
 8012538:	2500      	movs	r5, #0
 801253a:	69e3      	ldr	r3, [r4, #28]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	5959      	ldr	r1, [r3, r5]
 8012540:	2900      	cmp	r1, #0
 8012542:	d13b      	bne.n	80125bc <_reclaim_reent+0x98>
 8012544:	3504      	adds	r5, #4
 8012546:	2d80      	cmp	r5, #128	@ 0x80
 8012548:	d1f7      	bne.n	801253a <_reclaim_reent+0x16>
 801254a:	69e3      	ldr	r3, [r4, #28]
 801254c:	4620      	mov	r0, r4
 801254e:	68d9      	ldr	r1, [r3, #12]
 8012550:	f000 ff3e 	bl	80133d0 <_free_r>
 8012554:	69e3      	ldr	r3, [r4, #28]
 8012556:	6819      	ldr	r1, [r3, #0]
 8012558:	b111      	cbz	r1, 8012560 <_reclaim_reent+0x3c>
 801255a:	4620      	mov	r0, r4
 801255c:	f000 ff38 	bl	80133d0 <_free_r>
 8012560:	6961      	ldr	r1, [r4, #20]
 8012562:	b111      	cbz	r1, 801256a <_reclaim_reent+0x46>
 8012564:	4620      	mov	r0, r4
 8012566:	f000 ff33 	bl	80133d0 <_free_r>
 801256a:	69e1      	ldr	r1, [r4, #28]
 801256c:	b111      	cbz	r1, 8012574 <_reclaim_reent+0x50>
 801256e:	4620      	mov	r0, r4
 8012570:	f000 ff2e 	bl	80133d0 <_free_r>
 8012574:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012576:	b111      	cbz	r1, 801257e <_reclaim_reent+0x5a>
 8012578:	4620      	mov	r0, r4
 801257a:	f000 ff29 	bl	80133d0 <_free_r>
 801257e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012580:	b111      	cbz	r1, 8012588 <_reclaim_reent+0x64>
 8012582:	4620      	mov	r0, r4
 8012584:	f000 ff24 	bl	80133d0 <_free_r>
 8012588:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801258a:	b111      	cbz	r1, 8012592 <_reclaim_reent+0x6e>
 801258c:	4620      	mov	r0, r4
 801258e:	f000 ff1f 	bl	80133d0 <_free_r>
 8012592:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012594:	b111      	cbz	r1, 801259c <_reclaim_reent+0x78>
 8012596:	4620      	mov	r0, r4
 8012598:	f000 ff1a 	bl	80133d0 <_free_r>
 801259c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801259e:	b111      	cbz	r1, 80125a6 <_reclaim_reent+0x82>
 80125a0:	4620      	mov	r0, r4
 80125a2:	f000 ff15 	bl	80133d0 <_free_r>
 80125a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80125a8:	b111      	cbz	r1, 80125b0 <_reclaim_reent+0x8c>
 80125aa:	4620      	mov	r0, r4
 80125ac:	f000 ff10 	bl	80133d0 <_free_r>
 80125b0:	6a23      	ldr	r3, [r4, #32]
 80125b2:	b14b      	cbz	r3, 80125c8 <_reclaim_reent+0xa4>
 80125b4:	4620      	mov	r0, r4
 80125b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125ba:	4718      	bx	r3
 80125bc:	680e      	ldr	r6, [r1, #0]
 80125be:	4620      	mov	r0, r4
 80125c0:	f000 ff06 	bl	80133d0 <_free_r>
 80125c4:	4631      	mov	r1, r6
 80125c6:	e7bb      	b.n	8012540 <_reclaim_reent+0x1c>
 80125c8:	bd70      	pop	{r4, r5, r6, pc}
 80125ca:	bf00      	nop
 80125cc:	200003d4 	.word	0x200003d4

080125d0 <_lseek_r>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	4d07      	ldr	r5, [pc, #28]	@ (80125f0 <_lseek_r+0x20>)
 80125d4:	4604      	mov	r4, r0
 80125d6:	4608      	mov	r0, r1
 80125d8:	4611      	mov	r1, r2
 80125da:	2200      	movs	r2, #0
 80125dc:	602a      	str	r2, [r5, #0]
 80125de:	461a      	mov	r2, r3
 80125e0:	f7f1 fa05 	bl	80039ee <_lseek>
 80125e4:	1c43      	adds	r3, r0, #1
 80125e6:	d102      	bne.n	80125ee <_lseek_r+0x1e>
 80125e8:	682b      	ldr	r3, [r5, #0]
 80125ea:	b103      	cbz	r3, 80125ee <_lseek_r+0x1e>
 80125ec:	6023      	str	r3, [r4, #0]
 80125ee:	bd38      	pop	{r3, r4, r5, pc}
 80125f0:	20005a94 	.word	0x20005a94

080125f4 <_read_r>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	4d07      	ldr	r5, [pc, #28]	@ (8012614 <_read_r+0x20>)
 80125f8:	4604      	mov	r4, r0
 80125fa:	4608      	mov	r0, r1
 80125fc:	4611      	mov	r1, r2
 80125fe:	2200      	movs	r2, #0
 8012600:	602a      	str	r2, [r5, #0]
 8012602:	461a      	mov	r2, r3
 8012604:	f7f1 f993 	bl	800392e <_read>
 8012608:	1c43      	adds	r3, r0, #1
 801260a:	d102      	bne.n	8012612 <_read_r+0x1e>
 801260c:	682b      	ldr	r3, [r5, #0]
 801260e:	b103      	cbz	r3, 8012612 <_read_r+0x1e>
 8012610:	6023      	str	r3, [r4, #0]
 8012612:	bd38      	pop	{r3, r4, r5, pc}
 8012614:	20005a94 	.word	0x20005a94

08012618 <_sbrk_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	4d06      	ldr	r5, [pc, #24]	@ (8012634 <_sbrk_r+0x1c>)
 801261c:	2300      	movs	r3, #0
 801261e:	4604      	mov	r4, r0
 8012620:	4608      	mov	r0, r1
 8012622:	602b      	str	r3, [r5, #0]
 8012624:	f7f1 f9f0 	bl	8003a08 <_sbrk>
 8012628:	1c43      	adds	r3, r0, #1
 801262a:	d102      	bne.n	8012632 <_sbrk_r+0x1a>
 801262c:	682b      	ldr	r3, [r5, #0]
 801262e:	b103      	cbz	r3, 8012632 <_sbrk_r+0x1a>
 8012630:	6023      	str	r3, [r4, #0]
 8012632:	bd38      	pop	{r3, r4, r5, pc}
 8012634:	20005a94 	.word	0x20005a94

08012638 <_write_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4d07      	ldr	r5, [pc, #28]	@ (8012658 <_write_r+0x20>)
 801263c:	4604      	mov	r4, r0
 801263e:	4608      	mov	r0, r1
 8012640:	4611      	mov	r1, r2
 8012642:	2200      	movs	r2, #0
 8012644:	602a      	str	r2, [r5, #0]
 8012646:	461a      	mov	r2, r3
 8012648:	f7f1 f98e 	bl	8003968 <_write>
 801264c:	1c43      	adds	r3, r0, #1
 801264e:	d102      	bne.n	8012656 <_write_r+0x1e>
 8012650:	682b      	ldr	r3, [r5, #0]
 8012652:	b103      	cbz	r3, 8012656 <_write_r+0x1e>
 8012654:	6023      	str	r3, [r4, #0]
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	20005a94 	.word	0x20005a94

0801265c <__errno>:
 801265c:	4b01      	ldr	r3, [pc, #4]	@ (8012664 <__errno+0x8>)
 801265e:	6818      	ldr	r0, [r3, #0]
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	200003d4 	.word	0x200003d4

08012668 <__libc_init_array>:
 8012668:	b570      	push	{r4, r5, r6, lr}
 801266a:	4d0d      	ldr	r5, [pc, #52]	@ (80126a0 <__libc_init_array+0x38>)
 801266c:	4c0d      	ldr	r4, [pc, #52]	@ (80126a4 <__libc_init_array+0x3c>)
 801266e:	1b64      	subs	r4, r4, r5
 8012670:	10a4      	asrs	r4, r4, #2
 8012672:	2600      	movs	r6, #0
 8012674:	42a6      	cmp	r6, r4
 8012676:	d109      	bne.n	801268c <__libc_init_array+0x24>
 8012678:	4d0b      	ldr	r5, [pc, #44]	@ (80126a8 <__libc_init_array+0x40>)
 801267a:	4c0c      	ldr	r4, [pc, #48]	@ (80126ac <__libc_init_array+0x44>)
 801267c:	f002 fc1a 	bl	8014eb4 <_init>
 8012680:	1b64      	subs	r4, r4, r5
 8012682:	10a4      	asrs	r4, r4, #2
 8012684:	2600      	movs	r6, #0
 8012686:	42a6      	cmp	r6, r4
 8012688:	d105      	bne.n	8012696 <__libc_init_array+0x2e>
 801268a:	bd70      	pop	{r4, r5, r6, pc}
 801268c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012690:	4798      	blx	r3
 8012692:	3601      	adds	r6, #1
 8012694:	e7ee      	b.n	8012674 <__libc_init_array+0xc>
 8012696:	f855 3b04 	ldr.w	r3, [r5], #4
 801269a:	4798      	blx	r3
 801269c:	3601      	adds	r6, #1
 801269e:	e7f2      	b.n	8012686 <__libc_init_array+0x1e>
 80126a0:	08015d94 	.word	0x08015d94
 80126a4:	08015d94 	.word	0x08015d94
 80126a8:	08015d94 	.word	0x08015d94
 80126ac:	08015d98 	.word	0x08015d98

080126b0 <__retarget_lock_init_recursive>:
 80126b0:	4770      	bx	lr

080126b2 <__retarget_lock_acquire_recursive>:
 80126b2:	4770      	bx	lr

080126b4 <__retarget_lock_release_recursive>:
 80126b4:	4770      	bx	lr

080126b6 <strcpy>:
 80126b6:	4603      	mov	r3, r0
 80126b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126bc:	f803 2b01 	strb.w	r2, [r3], #1
 80126c0:	2a00      	cmp	r2, #0
 80126c2:	d1f9      	bne.n	80126b8 <strcpy+0x2>
 80126c4:	4770      	bx	lr

080126c6 <memcpy>:
 80126c6:	440a      	add	r2, r1
 80126c8:	4291      	cmp	r1, r2
 80126ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80126ce:	d100      	bne.n	80126d2 <memcpy+0xc>
 80126d0:	4770      	bx	lr
 80126d2:	b510      	push	{r4, lr}
 80126d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126dc:	4291      	cmp	r1, r2
 80126de:	d1f9      	bne.n	80126d4 <memcpy+0xe>
 80126e0:	bd10      	pop	{r4, pc}
 80126e2:	0000      	movs	r0, r0
 80126e4:	0000      	movs	r0, r0
	...

080126e8 <nan>:
 80126e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80126f0 <nan+0x8>
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	00000000 	.word	0x00000000
 80126f4:	7ff80000 	.word	0x7ff80000

080126f8 <__assert_func>:
 80126f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126fa:	4614      	mov	r4, r2
 80126fc:	461a      	mov	r2, r3
 80126fe:	4b09      	ldr	r3, [pc, #36]	@ (8012724 <__assert_func+0x2c>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4605      	mov	r5, r0
 8012704:	68d8      	ldr	r0, [r3, #12]
 8012706:	b954      	cbnz	r4, 801271e <__assert_func+0x26>
 8012708:	4b07      	ldr	r3, [pc, #28]	@ (8012728 <__assert_func+0x30>)
 801270a:	461c      	mov	r4, r3
 801270c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012710:	9100      	str	r1, [sp, #0]
 8012712:	462b      	mov	r3, r5
 8012714:	4905      	ldr	r1, [pc, #20]	@ (801272c <__assert_func+0x34>)
 8012716:	f002 f8b3 	bl	8014880 <fiprintf>
 801271a:	f002 f8dd 	bl	80148d8 <abort>
 801271e:	4b04      	ldr	r3, [pc, #16]	@ (8012730 <__assert_func+0x38>)
 8012720:	e7f4      	b.n	801270c <__assert_func+0x14>
 8012722:	bf00      	nop
 8012724:	200003d4 	.word	0x200003d4
 8012728:	08015b49 	.word	0x08015b49
 801272c:	08015b1b 	.word	0x08015b1b
 8012730:	08015b0e 	.word	0x08015b0e

08012734 <quorem>:
 8012734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	6903      	ldr	r3, [r0, #16]
 801273a:	690c      	ldr	r4, [r1, #16]
 801273c:	42a3      	cmp	r3, r4
 801273e:	4607      	mov	r7, r0
 8012740:	db7e      	blt.n	8012840 <quorem+0x10c>
 8012742:	3c01      	subs	r4, #1
 8012744:	f101 0814 	add.w	r8, r1, #20
 8012748:	00a3      	lsls	r3, r4, #2
 801274a:	f100 0514 	add.w	r5, r0, #20
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801275a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801275e:	3301      	adds	r3, #1
 8012760:	429a      	cmp	r2, r3
 8012762:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012766:	fbb2 f6f3 	udiv	r6, r2, r3
 801276a:	d32e      	bcc.n	80127ca <quorem+0x96>
 801276c:	f04f 0a00 	mov.w	sl, #0
 8012770:	46c4      	mov	ip, r8
 8012772:	46ae      	mov	lr, r5
 8012774:	46d3      	mov	fp, sl
 8012776:	f85c 3b04 	ldr.w	r3, [ip], #4
 801277a:	b298      	uxth	r0, r3
 801277c:	fb06 a000 	mla	r0, r6, r0, sl
 8012780:	0c02      	lsrs	r2, r0, #16
 8012782:	0c1b      	lsrs	r3, r3, #16
 8012784:	fb06 2303 	mla	r3, r6, r3, r2
 8012788:	f8de 2000 	ldr.w	r2, [lr]
 801278c:	b280      	uxth	r0, r0
 801278e:	b292      	uxth	r2, r2
 8012790:	1a12      	subs	r2, r2, r0
 8012792:	445a      	add	r2, fp
 8012794:	f8de 0000 	ldr.w	r0, [lr]
 8012798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801279c:	b29b      	uxth	r3, r3
 801279e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80127a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80127a6:	b292      	uxth	r2, r2
 80127a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80127ac:	45e1      	cmp	r9, ip
 80127ae:	f84e 2b04 	str.w	r2, [lr], #4
 80127b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80127b6:	d2de      	bcs.n	8012776 <quorem+0x42>
 80127b8:	9b00      	ldr	r3, [sp, #0]
 80127ba:	58eb      	ldr	r3, [r5, r3]
 80127bc:	b92b      	cbnz	r3, 80127ca <quorem+0x96>
 80127be:	9b01      	ldr	r3, [sp, #4]
 80127c0:	3b04      	subs	r3, #4
 80127c2:	429d      	cmp	r5, r3
 80127c4:	461a      	mov	r2, r3
 80127c6:	d32f      	bcc.n	8012828 <quorem+0xf4>
 80127c8:	613c      	str	r4, [r7, #16]
 80127ca:	4638      	mov	r0, r7
 80127cc:	f001 fc5a 	bl	8014084 <__mcmp>
 80127d0:	2800      	cmp	r0, #0
 80127d2:	db25      	blt.n	8012820 <quorem+0xec>
 80127d4:	4629      	mov	r1, r5
 80127d6:	2000      	movs	r0, #0
 80127d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80127dc:	f8d1 c000 	ldr.w	ip, [r1]
 80127e0:	fa1f fe82 	uxth.w	lr, r2
 80127e4:	fa1f f38c 	uxth.w	r3, ip
 80127e8:	eba3 030e 	sub.w	r3, r3, lr
 80127ec:	4403      	add	r3, r0
 80127ee:	0c12      	lsrs	r2, r2, #16
 80127f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80127f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127fe:	45c1      	cmp	r9, r8
 8012800:	f841 3b04 	str.w	r3, [r1], #4
 8012804:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012808:	d2e6      	bcs.n	80127d8 <quorem+0xa4>
 801280a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801280e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012812:	b922      	cbnz	r2, 801281e <quorem+0xea>
 8012814:	3b04      	subs	r3, #4
 8012816:	429d      	cmp	r5, r3
 8012818:	461a      	mov	r2, r3
 801281a:	d30b      	bcc.n	8012834 <quorem+0x100>
 801281c:	613c      	str	r4, [r7, #16]
 801281e:	3601      	adds	r6, #1
 8012820:	4630      	mov	r0, r6
 8012822:	b003      	add	sp, #12
 8012824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012828:	6812      	ldr	r2, [r2, #0]
 801282a:	3b04      	subs	r3, #4
 801282c:	2a00      	cmp	r2, #0
 801282e:	d1cb      	bne.n	80127c8 <quorem+0x94>
 8012830:	3c01      	subs	r4, #1
 8012832:	e7c6      	b.n	80127c2 <quorem+0x8e>
 8012834:	6812      	ldr	r2, [r2, #0]
 8012836:	3b04      	subs	r3, #4
 8012838:	2a00      	cmp	r2, #0
 801283a:	d1ef      	bne.n	801281c <quorem+0xe8>
 801283c:	3c01      	subs	r4, #1
 801283e:	e7ea      	b.n	8012816 <quorem+0xe2>
 8012840:	2000      	movs	r0, #0
 8012842:	e7ee      	b.n	8012822 <quorem+0xee>
 8012844:	0000      	movs	r0, r0
	...

08012848 <_dtoa_r>:
 8012848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284c:	69c7      	ldr	r7, [r0, #28]
 801284e:	b099      	sub	sp, #100	@ 0x64
 8012850:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012854:	ec55 4b10 	vmov	r4, r5, d0
 8012858:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801285a:	9109      	str	r1, [sp, #36]	@ 0x24
 801285c:	4683      	mov	fp, r0
 801285e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012860:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012862:	b97f      	cbnz	r7, 8012884 <_dtoa_r+0x3c>
 8012864:	2010      	movs	r0, #16
 8012866:	f7fe f8bd 	bl	80109e4 <malloc>
 801286a:	4602      	mov	r2, r0
 801286c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012870:	b920      	cbnz	r0, 801287c <_dtoa_r+0x34>
 8012872:	4ba7      	ldr	r3, [pc, #668]	@ (8012b10 <_dtoa_r+0x2c8>)
 8012874:	21ef      	movs	r1, #239	@ 0xef
 8012876:	48a7      	ldr	r0, [pc, #668]	@ (8012b14 <_dtoa_r+0x2cc>)
 8012878:	f7ff ff3e 	bl	80126f8 <__assert_func>
 801287c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012880:	6007      	str	r7, [r0, #0]
 8012882:	60c7      	str	r7, [r0, #12]
 8012884:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012888:	6819      	ldr	r1, [r3, #0]
 801288a:	b159      	cbz	r1, 80128a4 <_dtoa_r+0x5c>
 801288c:	685a      	ldr	r2, [r3, #4]
 801288e:	604a      	str	r2, [r1, #4]
 8012890:	2301      	movs	r3, #1
 8012892:	4093      	lsls	r3, r2
 8012894:	608b      	str	r3, [r1, #8]
 8012896:	4658      	mov	r0, fp
 8012898:	f001 f970 	bl	8013b7c <_Bfree>
 801289c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80128a0:	2200      	movs	r2, #0
 80128a2:	601a      	str	r2, [r3, #0]
 80128a4:	1e2b      	subs	r3, r5, #0
 80128a6:	bfb9      	ittee	lt
 80128a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80128ac:	9303      	strlt	r3, [sp, #12]
 80128ae:	2300      	movge	r3, #0
 80128b0:	6033      	strge	r3, [r6, #0]
 80128b2:	9f03      	ldr	r7, [sp, #12]
 80128b4:	4b98      	ldr	r3, [pc, #608]	@ (8012b18 <_dtoa_r+0x2d0>)
 80128b6:	bfbc      	itt	lt
 80128b8:	2201      	movlt	r2, #1
 80128ba:	6032      	strlt	r2, [r6, #0]
 80128bc:	43bb      	bics	r3, r7
 80128be:	d112      	bne.n	80128e6 <_dtoa_r+0x9e>
 80128c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80128c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80128c6:	6013      	str	r3, [r2, #0]
 80128c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128cc:	4323      	orrs	r3, r4
 80128ce:	f000 854d 	beq.w	801336c <_dtoa_r+0xb24>
 80128d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80128d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012b2c <_dtoa_r+0x2e4>
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f000 854f 	beq.w	801337c <_dtoa_r+0xb34>
 80128de:	f10a 0303 	add.w	r3, sl, #3
 80128e2:	f000 bd49 	b.w	8013378 <_dtoa_r+0xb30>
 80128e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128ea:	2200      	movs	r2, #0
 80128ec:	ec51 0b17 	vmov	r0, r1, d7
 80128f0:	2300      	movs	r3, #0
 80128f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80128f6:	f7ee f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80128fa:	4680      	mov	r8, r0
 80128fc:	b158      	cbz	r0, 8012916 <_dtoa_r+0xce>
 80128fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012900:	2301      	movs	r3, #1
 8012902:	6013      	str	r3, [r2, #0]
 8012904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012906:	b113      	cbz	r3, 801290e <_dtoa_r+0xc6>
 8012908:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801290a:	4b84      	ldr	r3, [pc, #528]	@ (8012b1c <_dtoa_r+0x2d4>)
 801290c:	6013      	str	r3, [r2, #0]
 801290e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012b30 <_dtoa_r+0x2e8>
 8012912:	f000 bd33 	b.w	801337c <_dtoa_r+0xb34>
 8012916:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801291a:	aa16      	add	r2, sp, #88	@ 0x58
 801291c:	a917      	add	r1, sp, #92	@ 0x5c
 801291e:	4658      	mov	r0, fp
 8012920:	f001 fcd0 	bl	80142c4 <__d2b>
 8012924:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012928:	4681      	mov	r9, r0
 801292a:	2e00      	cmp	r6, #0
 801292c:	d077      	beq.n	8012a1e <_dtoa_r+0x1d6>
 801292e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012930:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801293c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012940:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012944:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012948:	4619      	mov	r1, r3
 801294a:	2200      	movs	r2, #0
 801294c:	4b74      	ldr	r3, [pc, #464]	@ (8012b20 <_dtoa_r+0x2d8>)
 801294e:	f7ed fc9b 	bl	8000288 <__aeabi_dsub>
 8012952:	a369      	add	r3, pc, #420	@ (adr r3, 8012af8 <_dtoa_r+0x2b0>)
 8012954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012958:	f7ed fe4e 	bl	80005f8 <__aeabi_dmul>
 801295c:	a368      	add	r3, pc, #416	@ (adr r3, 8012b00 <_dtoa_r+0x2b8>)
 801295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012962:	f7ed fc93 	bl	800028c <__adddf3>
 8012966:	4604      	mov	r4, r0
 8012968:	4630      	mov	r0, r6
 801296a:	460d      	mov	r5, r1
 801296c:	f7ed fdda 	bl	8000524 <__aeabi_i2d>
 8012970:	a365      	add	r3, pc, #404	@ (adr r3, 8012b08 <_dtoa_r+0x2c0>)
 8012972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012976:	f7ed fe3f 	bl	80005f8 <__aeabi_dmul>
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ed fc83 	bl	800028c <__adddf3>
 8012986:	4604      	mov	r4, r0
 8012988:	460d      	mov	r5, r1
 801298a:	f7ee f8e5 	bl	8000b58 <__aeabi_d2iz>
 801298e:	2200      	movs	r2, #0
 8012990:	4607      	mov	r7, r0
 8012992:	2300      	movs	r3, #0
 8012994:	4620      	mov	r0, r4
 8012996:	4629      	mov	r1, r5
 8012998:	f7ee f8a0 	bl	8000adc <__aeabi_dcmplt>
 801299c:	b140      	cbz	r0, 80129b0 <_dtoa_r+0x168>
 801299e:	4638      	mov	r0, r7
 80129a0:	f7ed fdc0 	bl	8000524 <__aeabi_i2d>
 80129a4:	4622      	mov	r2, r4
 80129a6:	462b      	mov	r3, r5
 80129a8:	f7ee f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80129ac:	b900      	cbnz	r0, 80129b0 <_dtoa_r+0x168>
 80129ae:	3f01      	subs	r7, #1
 80129b0:	2f16      	cmp	r7, #22
 80129b2:	d851      	bhi.n	8012a58 <_dtoa_r+0x210>
 80129b4:	4b5b      	ldr	r3, [pc, #364]	@ (8012b24 <_dtoa_r+0x2dc>)
 80129b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80129ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80129c2:	f7ee f88b 	bl	8000adc <__aeabi_dcmplt>
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d048      	beq.n	8012a5c <_dtoa_r+0x214>
 80129ca:	3f01      	subs	r7, #1
 80129cc:	2300      	movs	r3, #0
 80129ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80129d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80129d2:	1b9b      	subs	r3, r3, r6
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	bf44      	itt	mi
 80129d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80129dc:	2300      	movmi	r3, #0
 80129de:	9208      	str	r2, [sp, #32]
 80129e0:	bf54      	ite	pl
 80129e2:	f04f 0800 	movpl.w	r8, #0
 80129e6:	9308      	strmi	r3, [sp, #32]
 80129e8:	2f00      	cmp	r7, #0
 80129ea:	db39      	blt.n	8012a60 <_dtoa_r+0x218>
 80129ec:	9b08      	ldr	r3, [sp, #32]
 80129ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80129f0:	443b      	add	r3, r7
 80129f2:	9308      	str	r3, [sp, #32]
 80129f4:	2300      	movs	r3, #0
 80129f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80129f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129fa:	2b09      	cmp	r3, #9
 80129fc:	d864      	bhi.n	8012ac8 <_dtoa_r+0x280>
 80129fe:	2b05      	cmp	r3, #5
 8012a00:	bfc4      	itt	gt
 8012a02:	3b04      	subgt	r3, #4
 8012a04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a08:	f1a3 0302 	sub.w	r3, r3, #2
 8012a0c:	bfcc      	ite	gt
 8012a0e:	2400      	movgt	r4, #0
 8012a10:	2401      	movle	r4, #1
 8012a12:	2b03      	cmp	r3, #3
 8012a14:	d863      	bhi.n	8012ade <_dtoa_r+0x296>
 8012a16:	e8df f003 	tbb	[pc, r3]
 8012a1a:	372a      	.short	0x372a
 8012a1c:	5535      	.short	0x5535
 8012a1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012a22:	441e      	add	r6, r3
 8012a24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012a28:	2b20      	cmp	r3, #32
 8012a2a:	bfc1      	itttt	gt
 8012a2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012a30:	409f      	lslgt	r7, r3
 8012a32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012a36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012a3a:	bfd6      	itet	le
 8012a3c:	f1c3 0320 	rsble	r3, r3, #32
 8012a40:	ea47 0003 	orrgt.w	r0, r7, r3
 8012a44:	fa04 f003 	lslle.w	r0, r4, r3
 8012a48:	f7ed fd5c 	bl	8000504 <__aeabi_ui2d>
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012a52:	3e01      	subs	r6, #1
 8012a54:	9214      	str	r2, [sp, #80]	@ 0x50
 8012a56:	e777      	b.n	8012948 <_dtoa_r+0x100>
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e7b8      	b.n	80129ce <_dtoa_r+0x186>
 8012a5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012a5e:	e7b7      	b.n	80129d0 <_dtoa_r+0x188>
 8012a60:	427b      	negs	r3, r7
 8012a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a64:	2300      	movs	r3, #0
 8012a66:	eba8 0807 	sub.w	r8, r8, r7
 8012a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a6c:	e7c4      	b.n	80129f8 <_dtoa_r+0x1b0>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	dc35      	bgt.n	8012ae4 <_dtoa_r+0x29c>
 8012a78:	2301      	movs	r3, #1
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	9307      	str	r3, [sp, #28]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a82:	e00b      	b.n	8012a9c <_dtoa_r+0x254>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e7f3      	b.n	8012a70 <_dtoa_r+0x228>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a8e:	18fb      	adds	r3, r7, r3
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	3301      	adds	r3, #1
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	9307      	str	r3, [sp, #28]
 8012a98:	bfb8      	it	lt
 8012a9a:	2301      	movlt	r3, #1
 8012a9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	2204      	movs	r2, #4
 8012aa4:	f102 0514 	add.w	r5, r2, #20
 8012aa8:	429d      	cmp	r5, r3
 8012aaa:	d91f      	bls.n	8012aec <_dtoa_r+0x2a4>
 8012aac:	6041      	str	r1, [r0, #4]
 8012aae:	4658      	mov	r0, fp
 8012ab0:	f001 f824 	bl	8013afc <_Balloc>
 8012ab4:	4682      	mov	sl, r0
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d13c      	bne.n	8012b34 <_dtoa_r+0x2ec>
 8012aba:	4b1b      	ldr	r3, [pc, #108]	@ (8012b28 <_dtoa_r+0x2e0>)
 8012abc:	4602      	mov	r2, r0
 8012abe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012ac2:	e6d8      	b.n	8012876 <_dtoa_r+0x2e>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	e7e0      	b.n	8012a8a <_dtoa_r+0x242>
 8012ac8:	2401      	movs	r4, #1
 8012aca:	2300      	movs	r3, #0
 8012acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ace:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad4:	9300      	str	r3, [sp, #0]
 8012ad6:	9307      	str	r3, [sp, #28]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	2312      	movs	r3, #18
 8012adc:	e7d0      	b.n	8012a80 <_dtoa_r+0x238>
 8012ade:	2301      	movs	r3, #1
 8012ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ae2:	e7f5      	b.n	8012ad0 <_dtoa_r+0x288>
 8012ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	9307      	str	r3, [sp, #28]
 8012aea:	e7d7      	b.n	8012a9c <_dtoa_r+0x254>
 8012aec:	3101      	adds	r1, #1
 8012aee:	0052      	lsls	r2, r2, #1
 8012af0:	e7d8      	b.n	8012aa4 <_dtoa_r+0x25c>
 8012af2:	bf00      	nop
 8012af4:	f3af 8000 	nop.w
 8012af8:	636f4361 	.word	0x636f4361
 8012afc:	3fd287a7 	.word	0x3fd287a7
 8012b00:	8b60c8b3 	.word	0x8b60c8b3
 8012b04:	3fc68a28 	.word	0x3fc68a28
 8012b08:	509f79fb 	.word	0x509f79fb
 8012b0c:	3fd34413 	.word	0x3fd34413
 8012b10:	08015a95 	.word	0x08015a95
 8012b14:	08015b57 	.word	0x08015b57
 8012b18:	7ff00000 	.word	0x7ff00000
 8012b1c:	08015a72 	.word	0x08015a72
 8012b20:	3ff80000 	.word	0x3ff80000
 8012b24:	08015cb0 	.word	0x08015cb0
 8012b28:	08015baf 	.word	0x08015baf
 8012b2c:	08015b53 	.word	0x08015b53
 8012b30:	08015a71 	.word	0x08015a71
 8012b34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012b38:	6018      	str	r0, [r3, #0]
 8012b3a:	9b07      	ldr	r3, [sp, #28]
 8012b3c:	2b0e      	cmp	r3, #14
 8012b3e:	f200 80a4 	bhi.w	8012c8a <_dtoa_r+0x442>
 8012b42:	2c00      	cmp	r4, #0
 8012b44:	f000 80a1 	beq.w	8012c8a <_dtoa_r+0x442>
 8012b48:	2f00      	cmp	r7, #0
 8012b4a:	dd33      	ble.n	8012bb4 <_dtoa_r+0x36c>
 8012b4c:	4bad      	ldr	r3, [pc, #692]	@ (8012e04 <_dtoa_r+0x5bc>)
 8012b4e:	f007 020f 	and.w	r2, r7, #15
 8012b52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b56:	ed93 7b00 	vldr	d7, [r3]
 8012b5a:	05f8      	lsls	r0, r7, #23
 8012b5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012b64:	d516      	bpl.n	8012b94 <_dtoa_r+0x34c>
 8012b66:	4ba8      	ldr	r3, [pc, #672]	@ (8012e08 <_dtoa_r+0x5c0>)
 8012b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b70:	f7ed fe6c 	bl	800084c <__aeabi_ddiv>
 8012b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b78:	f004 040f 	and.w	r4, r4, #15
 8012b7c:	2603      	movs	r6, #3
 8012b7e:	4da2      	ldr	r5, [pc, #648]	@ (8012e08 <_dtoa_r+0x5c0>)
 8012b80:	b954      	cbnz	r4, 8012b98 <_dtoa_r+0x350>
 8012b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b8a:	f7ed fe5f 	bl	800084c <__aeabi_ddiv>
 8012b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b92:	e028      	b.n	8012be6 <_dtoa_r+0x39e>
 8012b94:	2602      	movs	r6, #2
 8012b96:	e7f2      	b.n	8012b7e <_dtoa_r+0x336>
 8012b98:	07e1      	lsls	r1, r4, #31
 8012b9a:	d508      	bpl.n	8012bae <_dtoa_r+0x366>
 8012b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ba4:	f7ed fd28 	bl	80005f8 <__aeabi_dmul>
 8012ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bac:	3601      	adds	r6, #1
 8012bae:	1064      	asrs	r4, r4, #1
 8012bb0:	3508      	adds	r5, #8
 8012bb2:	e7e5      	b.n	8012b80 <_dtoa_r+0x338>
 8012bb4:	f000 80d2 	beq.w	8012d5c <_dtoa_r+0x514>
 8012bb8:	427c      	negs	r4, r7
 8012bba:	4b92      	ldr	r3, [pc, #584]	@ (8012e04 <_dtoa_r+0x5bc>)
 8012bbc:	4d92      	ldr	r5, [pc, #584]	@ (8012e08 <_dtoa_r+0x5c0>)
 8012bbe:	f004 020f 	and.w	r2, r4, #15
 8012bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012bce:	f7ed fd13 	bl	80005f8 <__aeabi_dmul>
 8012bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bd6:	1124      	asrs	r4, r4, #4
 8012bd8:	2300      	movs	r3, #0
 8012bda:	2602      	movs	r6, #2
 8012bdc:	2c00      	cmp	r4, #0
 8012bde:	f040 80b2 	bne.w	8012d46 <_dtoa_r+0x4fe>
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1d3      	bne.n	8012b8e <_dtoa_r+0x346>
 8012be6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012be8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f000 80b7 	beq.w	8012d60 <_dtoa_r+0x518>
 8012bf2:	4b86      	ldr	r3, [pc, #536]	@ (8012e0c <_dtoa_r+0x5c4>)
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ed ff6f 	bl	8000adc <__aeabi_dcmplt>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	f000 80ae 	beq.w	8012d60 <_dtoa_r+0x518>
 8012c04:	9b07      	ldr	r3, [sp, #28]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 80aa 	beq.w	8012d60 <_dtoa_r+0x518>
 8012c0c:	9b00      	ldr	r3, [sp, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	dd37      	ble.n	8012c82 <_dtoa_r+0x43a>
 8012c12:	1e7b      	subs	r3, r7, #1
 8012c14:	9304      	str	r3, [sp, #16]
 8012c16:	4620      	mov	r0, r4
 8012c18:	4b7d      	ldr	r3, [pc, #500]	@ (8012e10 <_dtoa_r+0x5c8>)
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	f7ed fceb 	bl	80005f8 <__aeabi_dmul>
 8012c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c26:	9c00      	ldr	r4, [sp, #0]
 8012c28:	3601      	adds	r6, #1
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7ed fc7a 	bl	8000524 <__aeabi_i2d>
 8012c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c34:	f7ed fce0 	bl	80005f8 <__aeabi_dmul>
 8012c38:	4b76      	ldr	r3, [pc, #472]	@ (8012e14 <_dtoa_r+0x5cc>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f7ed fb26 	bl	800028c <__adddf3>
 8012c40:	4605      	mov	r5, r0
 8012c42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012c46:	2c00      	cmp	r4, #0
 8012c48:	f040 808d 	bne.w	8012d66 <_dtoa_r+0x51e>
 8012c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c50:	4b71      	ldr	r3, [pc, #452]	@ (8012e18 <_dtoa_r+0x5d0>)
 8012c52:	2200      	movs	r2, #0
 8012c54:	f7ed fb18 	bl	8000288 <__aeabi_dsub>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012c60:	462a      	mov	r2, r5
 8012c62:	4633      	mov	r3, r6
 8012c64:	f7ed ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8012c68:	2800      	cmp	r0, #0
 8012c6a:	f040 828b 	bne.w	8013184 <_dtoa_r+0x93c>
 8012c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c72:	462a      	mov	r2, r5
 8012c74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012c78:	f7ed ff30 	bl	8000adc <__aeabi_dcmplt>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	f040 8128 	bne.w	8012ed2 <_dtoa_r+0x68a>
 8012c82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012c86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f2c0 815a 	blt.w	8012f46 <_dtoa_r+0x6fe>
 8012c92:	2f0e      	cmp	r7, #14
 8012c94:	f300 8157 	bgt.w	8012f46 <_dtoa_r+0x6fe>
 8012c98:	4b5a      	ldr	r3, [pc, #360]	@ (8012e04 <_dtoa_r+0x5bc>)
 8012c9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012c9e:	ed93 7b00 	vldr	d7, [r3]
 8012ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	ed8d 7b00 	vstr	d7, [sp]
 8012caa:	da03      	bge.n	8012cb4 <_dtoa_r+0x46c>
 8012cac:	9b07      	ldr	r3, [sp, #28]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f340 8101 	ble.w	8012eb6 <_dtoa_r+0x66e>
 8012cb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012cb8:	4656      	mov	r6, sl
 8012cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	f7ed fdc3 	bl	800084c <__aeabi_ddiv>
 8012cc6:	f7ed ff47 	bl	8000b58 <__aeabi_d2iz>
 8012cca:	4680      	mov	r8, r0
 8012ccc:	f7ed fc2a 	bl	8000524 <__aeabi_i2d>
 8012cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cd4:	f7ed fc90 	bl	80005f8 <__aeabi_dmul>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	460b      	mov	r3, r1
 8012cdc:	4620      	mov	r0, r4
 8012cde:	4629      	mov	r1, r5
 8012ce0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012ce4:	f7ed fad0 	bl	8000288 <__aeabi_dsub>
 8012ce8:	f806 4b01 	strb.w	r4, [r6], #1
 8012cec:	9d07      	ldr	r5, [sp, #28]
 8012cee:	eba6 040a 	sub.w	r4, r6, sl
 8012cf2:	42a5      	cmp	r5, r4
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	f040 8117 	bne.w	8012f2a <_dtoa_r+0x6e2>
 8012cfc:	f7ed fac6 	bl	800028c <__adddf3>
 8012d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d04:	4604      	mov	r4, r0
 8012d06:	460d      	mov	r5, r1
 8012d08:	f7ed ff06 	bl	8000b18 <__aeabi_dcmpgt>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f040 80f9 	bne.w	8012f04 <_dtoa_r+0x6bc>
 8012d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d16:	4620      	mov	r0, r4
 8012d18:	4629      	mov	r1, r5
 8012d1a:	f7ed fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8012d1e:	b118      	cbz	r0, 8012d28 <_dtoa_r+0x4e0>
 8012d20:	f018 0f01 	tst.w	r8, #1
 8012d24:	f040 80ee 	bne.w	8012f04 <_dtoa_r+0x6bc>
 8012d28:	4649      	mov	r1, r9
 8012d2a:	4658      	mov	r0, fp
 8012d2c:	f000 ff26 	bl	8013b7c <_Bfree>
 8012d30:	2300      	movs	r3, #0
 8012d32:	7033      	strb	r3, [r6, #0]
 8012d34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012d36:	3701      	adds	r7, #1
 8012d38:	601f      	str	r7, [r3, #0]
 8012d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f000 831d 	beq.w	801337c <_dtoa_r+0xb34>
 8012d42:	601e      	str	r6, [r3, #0]
 8012d44:	e31a      	b.n	801337c <_dtoa_r+0xb34>
 8012d46:	07e2      	lsls	r2, r4, #31
 8012d48:	d505      	bpl.n	8012d56 <_dtoa_r+0x50e>
 8012d4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d4e:	f7ed fc53 	bl	80005f8 <__aeabi_dmul>
 8012d52:	3601      	adds	r6, #1
 8012d54:	2301      	movs	r3, #1
 8012d56:	1064      	asrs	r4, r4, #1
 8012d58:	3508      	adds	r5, #8
 8012d5a:	e73f      	b.n	8012bdc <_dtoa_r+0x394>
 8012d5c:	2602      	movs	r6, #2
 8012d5e:	e742      	b.n	8012be6 <_dtoa_r+0x39e>
 8012d60:	9c07      	ldr	r4, [sp, #28]
 8012d62:	9704      	str	r7, [sp, #16]
 8012d64:	e761      	b.n	8012c2a <_dtoa_r+0x3e2>
 8012d66:	4b27      	ldr	r3, [pc, #156]	@ (8012e04 <_dtoa_r+0x5bc>)
 8012d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012d6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012d6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012d72:	4454      	add	r4, sl
 8012d74:	2900      	cmp	r1, #0
 8012d76:	d053      	beq.n	8012e20 <_dtoa_r+0x5d8>
 8012d78:	4928      	ldr	r1, [pc, #160]	@ (8012e1c <_dtoa_r+0x5d4>)
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	f7ed fd66 	bl	800084c <__aeabi_ddiv>
 8012d80:	4633      	mov	r3, r6
 8012d82:	462a      	mov	r2, r5
 8012d84:	f7ed fa80 	bl	8000288 <__aeabi_dsub>
 8012d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012d8c:	4656      	mov	r6, sl
 8012d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d92:	f7ed fee1 	bl	8000b58 <__aeabi_d2iz>
 8012d96:	4605      	mov	r5, r0
 8012d98:	f7ed fbc4 	bl	8000524 <__aeabi_i2d>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	460b      	mov	r3, r1
 8012da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012da4:	f7ed fa70 	bl	8000288 <__aeabi_dsub>
 8012da8:	3530      	adds	r5, #48	@ 0x30
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012db2:	f806 5b01 	strb.w	r5, [r6], #1
 8012db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012dba:	f7ed fe8f 	bl	8000adc <__aeabi_dcmplt>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d171      	bne.n	8012ea6 <_dtoa_r+0x65e>
 8012dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012dc6:	4911      	ldr	r1, [pc, #68]	@ (8012e0c <_dtoa_r+0x5c4>)
 8012dc8:	2000      	movs	r0, #0
 8012dca:	f7ed fa5d 	bl	8000288 <__aeabi_dsub>
 8012dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012dd2:	f7ed fe83 	bl	8000adc <__aeabi_dcmplt>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	f040 8095 	bne.w	8012f06 <_dtoa_r+0x6be>
 8012ddc:	42a6      	cmp	r6, r4
 8012dde:	f43f af50 	beq.w	8012c82 <_dtoa_r+0x43a>
 8012de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012de6:	4b0a      	ldr	r3, [pc, #40]	@ (8012e10 <_dtoa_r+0x5c8>)
 8012de8:	2200      	movs	r2, #0
 8012dea:	f7ed fc05 	bl	80005f8 <__aeabi_dmul>
 8012dee:	4b08      	ldr	r3, [pc, #32]	@ (8012e10 <_dtoa_r+0x5c8>)
 8012df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012df4:	2200      	movs	r2, #0
 8012df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dfa:	f7ed fbfd 	bl	80005f8 <__aeabi_dmul>
 8012dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e02:	e7c4      	b.n	8012d8e <_dtoa_r+0x546>
 8012e04:	08015cb0 	.word	0x08015cb0
 8012e08:	08015c88 	.word	0x08015c88
 8012e0c:	3ff00000 	.word	0x3ff00000
 8012e10:	40240000 	.word	0x40240000
 8012e14:	401c0000 	.word	0x401c0000
 8012e18:	40140000 	.word	0x40140000
 8012e1c:	3fe00000 	.word	0x3fe00000
 8012e20:	4631      	mov	r1, r6
 8012e22:	4628      	mov	r0, r5
 8012e24:	f7ed fbe8 	bl	80005f8 <__aeabi_dmul>
 8012e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8012e2e:	4656      	mov	r6, sl
 8012e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e34:	f7ed fe90 	bl	8000b58 <__aeabi_d2iz>
 8012e38:	4605      	mov	r5, r0
 8012e3a:	f7ed fb73 	bl	8000524 <__aeabi_i2d>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e46:	f7ed fa1f 	bl	8000288 <__aeabi_dsub>
 8012e4a:	3530      	adds	r5, #48	@ 0x30
 8012e4c:	f806 5b01 	strb.w	r5, [r6], #1
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	42a6      	cmp	r6, r4
 8012e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e5a:	f04f 0200 	mov.w	r2, #0
 8012e5e:	d124      	bne.n	8012eaa <_dtoa_r+0x662>
 8012e60:	4bac      	ldr	r3, [pc, #688]	@ (8013114 <_dtoa_r+0x8cc>)
 8012e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012e66:	f7ed fa11 	bl	800028c <__adddf3>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e72:	f7ed fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d145      	bne.n	8012f06 <_dtoa_r+0x6be>
 8012e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012e7e:	49a5      	ldr	r1, [pc, #660]	@ (8013114 <_dtoa_r+0x8cc>)
 8012e80:	2000      	movs	r0, #0
 8012e82:	f7ed fa01 	bl	8000288 <__aeabi_dsub>
 8012e86:	4602      	mov	r2, r0
 8012e88:	460b      	mov	r3, r1
 8012e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e8e:	f7ed fe25 	bl	8000adc <__aeabi_dcmplt>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	f43f aef5 	beq.w	8012c82 <_dtoa_r+0x43a>
 8012e98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012e9a:	1e73      	subs	r3, r6, #1
 8012e9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8012e9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012ea2:	2b30      	cmp	r3, #48	@ 0x30
 8012ea4:	d0f8      	beq.n	8012e98 <_dtoa_r+0x650>
 8012ea6:	9f04      	ldr	r7, [sp, #16]
 8012ea8:	e73e      	b.n	8012d28 <_dtoa_r+0x4e0>
 8012eaa:	4b9b      	ldr	r3, [pc, #620]	@ (8013118 <_dtoa_r+0x8d0>)
 8012eac:	f7ed fba4 	bl	80005f8 <__aeabi_dmul>
 8012eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eb4:	e7bc      	b.n	8012e30 <_dtoa_r+0x5e8>
 8012eb6:	d10c      	bne.n	8012ed2 <_dtoa_r+0x68a>
 8012eb8:	4b98      	ldr	r3, [pc, #608]	@ (801311c <_dtoa_r+0x8d4>)
 8012eba:	2200      	movs	r2, #0
 8012ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ec0:	f7ed fb9a 	bl	80005f8 <__aeabi_dmul>
 8012ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ec8:	f7ed fe1c 	bl	8000b04 <__aeabi_dcmpge>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	f000 8157 	beq.w	8013180 <_dtoa_r+0x938>
 8012ed2:	2400      	movs	r4, #0
 8012ed4:	4625      	mov	r5, r4
 8012ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ed8:	43db      	mvns	r3, r3
 8012eda:	9304      	str	r3, [sp, #16]
 8012edc:	4656      	mov	r6, sl
 8012ede:	2700      	movs	r7, #0
 8012ee0:	4621      	mov	r1, r4
 8012ee2:	4658      	mov	r0, fp
 8012ee4:	f000 fe4a 	bl	8013b7c <_Bfree>
 8012ee8:	2d00      	cmp	r5, #0
 8012eea:	d0dc      	beq.n	8012ea6 <_dtoa_r+0x65e>
 8012eec:	b12f      	cbz	r7, 8012efa <_dtoa_r+0x6b2>
 8012eee:	42af      	cmp	r7, r5
 8012ef0:	d003      	beq.n	8012efa <_dtoa_r+0x6b2>
 8012ef2:	4639      	mov	r1, r7
 8012ef4:	4658      	mov	r0, fp
 8012ef6:	f000 fe41 	bl	8013b7c <_Bfree>
 8012efa:	4629      	mov	r1, r5
 8012efc:	4658      	mov	r0, fp
 8012efe:	f000 fe3d 	bl	8013b7c <_Bfree>
 8012f02:	e7d0      	b.n	8012ea6 <_dtoa_r+0x65e>
 8012f04:	9704      	str	r7, [sp, #16]
 8012f06:	4633      	mov	r3, r6
 8012f08:	461e      	mov	r6, r3
 8012f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f0e:	2a39      	cmp	r2, #57	@ 0x39
 8012f10:	d107      	bne.n	8012f22 <_dtoa_r+0x6da>
 8012f12:	459a      	cmp	sl, r3
 8012f14:	d1f8      	bne.n	8012f08 <_dtoa_r+0x6c0>
 8012f16:	9a04      	ldr	r2, [sp, #16]
 8012f18:	3201      	adds	r2, #1
 8012f1a:	9204      	str	r2, [sp, #16]
 8012f1c:	2230      	movs	r2, #48	@ 0x30
 8012f1e:	f88a 2000 	strb.w	r2, [sl]
 8012f22:	781a      	ldrb	r2, [r3, #0]
 8012f24:	3201      	adds	r2, #1
 8012f26:	701a      	strb	r2, [r3, #0]
 8012f28:	e7bd      	b.n	8012ea6 <_dtoa_r+0x65e>
 8012f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8013118 <_dtoa_r+0x8d0>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f7ed fb63 	bl	80005f8 <__aeabi_dmul>
 8012f32:	2200      	movs	r2, #0
 8012f34:	2300      	movs	r3, #0
 8012f36:	4604      	mov	r4, r0
 8012f38:	460d      	mov	r5, r1
 8012f3a:	f7ed fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f3e:	2800      	cmp	r0, #0
 8012f40:	f43f aebb 	beq.w	8012cba <_dtoa_r+0x472>
 8012f44:	e6f0      	b.n	8012d28 <_dtoa_r+0x4e0>
 8012f46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012f48:	2a00      	cmp	r2, #0
 8012f4a:	f000 80db 	beq.w	8013104 <_dtoa_r+0x8bc>
 8012f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f50:	2a01      	cmp	r2, #1
 8012f52:	f300 80bf 	bgt.w	80130d4 <_dtoa_r+0x88c>
 8012f56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	f000 80b7 	beq.w	80130cc <_dtoa_r+0x884>
 8012f5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012f62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012f64:	4646      	mov	r6, r8
 8012f66:	9a08      	ldr	r2, [sp, #32]
 8012f68:	2101      	movs	r1, #1
 8012f6a:	441a      	add	r2, r3
 8012f6c:	4658      	mov	r0, fp
 8012f6e:	4498      	add	r8, r3
 8012f70:	9208      	str	r2, [sp, #32]
 8012f72:	f000 ff01 	bl	8013d78 <__i2b>
 8012f76:	4605      	mov	r5, r0
 8012f78:	b15e      	cbz	r6, 8012f92 <_dtoa_r+0x74a>
 8012f7a:	9b08      	ldr	r3, [sp, #32]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	dd08      	ble.n	8012f92 <_dtoa_r+0x74a>
 8012f80:	42b3      	cmp	r3, r6
 8012f82:	9a08      	ldr	r2, [sp, #32]
 8012f84:	bfa8      	it	ge
 8012f86:	4633      	movge	r3, r6
 8012f88:	eba8 0803 	sub.w	r8, r8, r3
 8012f8c:	1af6      	subs	r6, r6, r3
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	9308      	str	r3, [sp, #32]
 8012f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f94:	b1f3      	cbz	r3, 8012fd4 <_dtoa_r+0x78c>
 8012f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 80b7 	beq.w	801310c <_dtoa_r+0x8c4>
 8012f9e:	b18c      	cbz	r4, 8012fc4 <_dtoa_r+0x77c>
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4622      	mov	r2, r4
 8012fa4:	4658      	mov	r0, fp
 8012fa6:	f000 ffa7 	bl	8013ef8 <__pow5mult>
 8012faa:	464a      	mov	r2, r9
 8012fac:	4601      	mov	r1, r0
 8012fae:	4605      	mov	r5, r0
 8012fb0:	4658      	mov	r0, fp
 8012fb2:	f000 fef7 	bl	8013da4 <__multiply>
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	9004      	str	r0, [sp, #16]
 8012fba:	4658      	mov	r0, fp
 8012fbc:	f000 fdde 	bl	8013b7c <_Bfree>
 8012fc0:	9b04      	ldr	r3, [sp, #16]
 8012fc2:	4699      	mov	r9, r3
 8012fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fc6:	1b1a      	subs	r2, r3, r4
 8012fc8:	d004      	beq.n	8012fd4 <_dtoa_r+0x78c>
 8012fca:	4649      	mov	r1, r9
 8012fcc:	4658      	mov	r0, fp
 8012fce:	f000 ff93 	bl	8013ef8 <__pow5mult>
 8012fd2:	4681      	mov	r9, r0
 8012fd4:	2101      	movs	r1, #1
 8012fd6:	4658      	mov	r0, fp
 8012fd8:	f000 fece 	bl	8013d78 <__i2b>
 8012fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fde:	4604      	mov	r4, r0
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f000 81cf 	beq.w	8013384 <_dtoa_r+0xb3c>
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	4601      	mov	r1, r0
 8012fea:	4658      	mov	r0, fp
 8012fec:	f000 ff84 	bl	8013ef8 <__pow5mult>
 8012ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	f300 8095 	bgt.w	8013124 <_dtoa_r+0x8dc>
 8012ffa:	9b02      	ldr	r3, [sp, #8]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f040 8087 	bne.w	8013110 <_dtoa_r+0x8c8>
 8013002:	9b03      	ldr	r3, [sp, #12]
 8013004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013008:	2b00      	cmp	r3, #0
 801300a:	f040 8089 	bne.w	8013120 <_dtoa_r+0x8d8>
 801300e:	9b03      	ldr	r3, [sp, #12]
 8013010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013014:	0d1b      	lsrs	r3, r3, #20
 8013016:	051b      	lsls	r3, r3, #20
 8013018:	b12b      	cbz	r3, 8013026 <_dtoa_r+0x7de>
 801301a:	9b08      	ldr	r3, [sp, #32]
 801301c:	3301      	adds	r3, #1
 801301e:	9308      	str	r3, [sp, #32]
 8013020:	f108 0801 	add.w	r8, r8, #1
 8013024:	2301      	movs	r3, #1
 8013026:	930a      	str	r3, [sp, #40]	@ 0x28
 8013028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 81b0 	beq.w	8013390 <_dtoa_r+0xb48>
 8013030:	6923      	ldr	r3, [r4, #16]
 8013032:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013036:	6918      	ldr	r0, [r3, #16]
 8013038:	f000 fe52 	bl	8013ce0 <__hi0bits>
 801303c:	f1c0 0020 	rsb	r0, r0, #32
 8013040:	9b08      	ldr	r3, [sp, #32]
 8013042:	4418      	add	r0, r3
 8013044:	f010 001f 	ands.w	r0, r0, #31
 8013048:	d077      	beq.n	801313a <_dtoa_r+0x8f2>
 801304a:	f1c0 0320 	rsb	r3, r0, #32
 801304e:	2b04      	cmp	r3, #4
 8013050:	dd6b      	ble.n	801312a <_dtoa_r+0x8e2>
 8013052:	9b08      	ldr	r3, [sp, #32]
 8013054:	f1c0 001c 	rsb	r0, r0, #28
 8013058:	4403      	add	r3, r0
 801305a:	4480      	add	r8, r0
 801305c:	4406      	add	r6, r0
 801305e:	9308      	str	r3, [sp, #32]
 8013060:	f1b8 0f00 	cmp.w	r8, #0
 8013064:	dd05      	ble.n	8013072 <_dtoa_r+0x82a>
 8013066:	4649      	mov	r1, r9
 8013068:	4642      	mov	r2, r8
 801306a:	4658      	mov	r0, fp
 801306c:	f000 ff9e 	bl	8013fac <__lshift>
 8013070:	4681      	mov	r9, r0
 8013072:	9b08      	ldr	r3, [sp, #32]
 8013074:	2b00      	cmp	r3, #0
 8013076:	dd05      	ble.n	8013084 <_dtoa_r+0x83c>
 8013078:	4621      	mov	r1, r4
 801307a:	461a      	mov	r2, r3
 801307c:	4658      	mov	r0, fp
 801307e:	f000 ff95 	bl	8013fac <__lshift>
 8013082:	4604      	mov	r4, r0
 8013084:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013086:	2b00      	cmp	r3, #0
 8013088:	d059      	beq.n	801313e <_dtoa_r+0x8f6>
 801308a:	4621      	mov	r1, r4
 801308c:	4648      	mov	r0, r9
 801308e:	f000 fff9 	bl	8014084 <__mcmp>
 8013092:	2800      	cmp	r0, #0
 8013094:	da53      	bge.n	801313e <_dtoa_r+0x8f6>
 8013096:	1e7b      	subs	r3, r7, #1
 8013098:	9304      	str	r3, [sp, #16]
 801309a:	4649      	mov	r1, r9
 801309c:	2300      	movs	r3, #0
 801309e:	220a      	movs	r2, #10
 80130a0:	4658      	mov	r0, fp
 80130a2:	f000 fd8d 	bl	8013bc0 <__multadd>
 80130a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80130a8:	4681      	mov	r9, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 8172 	beq.w	8013394 <_dtoa_r+0xb4c>
 80130b0:	2300      	movs	r3, #0
 80130b2:	4629      	mov	r1, r5
 80130b4:	220a      	movs	r2, #10
 80130b6:	4658      	mov	r0, fp
 80130b8:	f000 fd82 	bl	8013bc0 <__multadd>
 80130bc:	9b00      	ldr	r3, [sp, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	4605      	mov	r5, r0
 80130c2:	dc67      	bgt.n	8013194 <_dtoa_r+0x94c>
 80130c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130c6:	2b02      	cmp	r3, #2
 80130c8:	dc41      	bgt.n	801314e <_dtoa_r+0x906>
 80130ca:	e063      	b.n	8013194 <_dtoa_r+0x94c>
 80130cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80130ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80130d2:	e746      	b.n	8012f62 <_dtoa_r+0x71a>
 80130d4:	9b07      	ldr	r3, [sp, #28]
 80130d6:	1e5c      	subs	r4, r3, #1
 80130d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130da:	42a3      	cmp	r3, r4
 80130dc:	bfbf      	itttt	lt
 80130de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80130e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80130e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80130e4:	1ae3      	sublt	r3, r4, r3
 80130e6:	bfb4      	ite	lt
 80130e8:	18d2      	addlt	r2, r2, r3
 80130ea:	1b1c      	subge	r4, r3, r4
 80130ec:	9b07      	ldr	r3, [sp, #28]
 80130ee:	bfbc      	itt	lt
 80130f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80130f2:	2400      	movlt	r4, #0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	bfb5      	itete	lt
 80130f8:	eba8 0603 	sublt.w	r6, r8, r3
 80130fc:	9b07      	ldrge	r3, [sp, #28]
 80130fe:	2300      	movlt	r3, #0
 8013100:	4646      	movge	r6, r8
 8013102:	e730      	b.n	8012f66 <_dtoa_r+0x71e>
 8013104:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013106:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013108:	4646      	mov	r6, r8
 801310a:	e735      	b.n	8012f78 <_dtoa_r+0x730>
 801310c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801310e:	e75c      	b.n	8012fca <_dtoa_r+0x782>
 8013110:	2300      	movs	r3, #0
 8013112:	e788      	b.n	8013026 <_dtoa_r+0x7de>
 8013114:	3fe00000 	.word	0x3fe00000
 8013118:	40240000 	.word	0x40240000
 801311c:	40140000 	.word	0x40140000
 8013120:	9b02      	ldr	r3, [sp, #8]
 8013122:	e780      	b.n	8013026 <_dtoa_r+0x7de>
 8013124:	2300      	movs	r3, #0
 8013126:	930a      	str	r3, [sp, #40]	@ 0x28
 8013128:	e782      	b.n	8013030 <_dtoa_r+0x7e8>
 801312a:	d099      	beq.n	8013060 <_dtoa_r+0x818>
 801312c:	9a08      	ldr	r2, [sp, #32]
 801312e:	331c      	adds	r3, #28
 8013130:	441a      	add	r2, r3
 8013132:	4498      	add	r8, r3
 8013134:	441e      	add	r6, r3
 8013136:	9208      	str	r2, [sp, #32]
 8013138:	e792      	b.n	8013060 <_dtoa_r+0x818>
 801313a:	4603      	mov	r3, r0
 801313c:	e7f6      	b.n	801312c <_dtoa_r+0x8e4>
 801313e:	9b07      	ldr	r3, [sp, #28]
 8013140:	9704      	str	r7, [sp, #16]
 8013142:	2b00      	cmp	r3, #0
 8013144:	dc20      	bgt.n	8013188 <_dtoa_r+0x940>
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801314a:	2b02      	cmp	r3, #2
 801314c:	dd1e      	ble.n	801318c <_dtoa_r+0x944>
 801314e:	9b00      	ldr	r3, [sp, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	f47f aec0 	bne.w	8012ed6 <_dtoa_r+0x68e>
 8013156:	4621      	mov	r1, r4
 8013158:	2205      	movs	r2, #5
 801315a:	4658      	mov	r0, fp
 801315c:	f000 fd30 	bl	8013bc0 <__multadd>
 8013160:	4601      	mov	r1, r0
 8013162:	4604      	mov	r4, r0
 8013164:	4648      	mov	r0, r9
 8013166:	f000 ff8d 	bl	8014084 <__mcmp>
 801316a:	2800      	cmp	r0, #0
 801316c:	f77f aeb3 	ble.w	8012ed6 <_dtoa_r+0x68e>
 8013170:	4656      	mov	r6, sl
 8013172:	2331      	movs	r3, #49	@ 0x31
 8013174:	f806 3b01 	strb.w	r3, [r6], #1
 8013178:	9b04      	ldr	r3, [sp, #16]
 801317a:	3301      	adds	r3, #1
 801317c:	9304      	str	r3, [sp, #16]
 801317e:	e6ae      	b.n	8012ede <_dtoa_r+0x696>
 8013180:	9c07      	ldr	r4, [sp, #28]
 8013182:	9704      	str	r7, [sp, #16]
 8013184:	4625      	mov	r5, r4
 8013186:	e7f3      	b.n	8013170 <_dtoa_r+0x928>
 8013188:	9b07      	ldr	r3, [sp, #28]
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801318e:	2b00      	cmp	r3, #0
 8013190:	f000 8104 	beq.w	801339c <_dtoa_r+0xb54>
 8013194:	2e00      	cmp	r6, #0
 8013196:	dd05      	ble.n	80131a4 <_dtoa_r+0x95c>
 8013198:	4629      	mov	r1, r5
 801319a:	4632      	mov	r2, r6
 801319c:	4658      	mov	r0, fp
 801319e:	f000 ff05 	bl	8013fac <__lshift>
 80131a2:	4605      	mov	r5, r0
 80131a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d05a      	beq.n	8013260 <_dtoa_r+0xa18>
 80131aa:	6869      	ldr	r1, [r5, #4]
 80131ac:	4658      	mov	r0, fp
 80131ae:	f000 fca5 	bl	8013afc <_Balloc>
 80131b2:	4606      	mov	r6, r0
 80131b4:	b928      	cbnz	r0, 80131c2 <_dtoa_r+0x97a>
 80131b6:	4b84      	ldr	r3, [pc, #528]	@ (80133c8 <_dtoa_r+0xb80>)
 80131b8:	4602      	mov	r2, r0
 80131ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80131be:	f7ff bb5a 	b.w	8012876 <_dtoa_r+0x2e>
 80131c2:	692a      	ldr	r2, [r5, #16]
 80131c4:	3202      	adds	r2, #2
 80131c6:	0092      	lsls	r2, r2, #2
 80131c8:	f105 010c 	add.w	r1, r5, #12
 80131cc:	300c      	adds	r0, #12
 80131ce:	f7ff fa7a 	bl	80126c6 <memcpy>
 80131d2:	2201      	movs	r2, #1
 80131d4:	4631      	mov	r1, r6
 80131d6:	4658      	mov	r0, fp
 80131d8:	f000 fee8 	bl	8013fac <__lshift>
 80131dc:	f10a 0301 	add.w	r3, sl, #1
 80131e0:	9307      	str	r3, [sp, #28]
 80131e2:	9b00      	ldr	r3, [sp, #0]
 80131e4:	4453      	add	r3, sl
 80131e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131e8:	9b02      	ldr	r3, [sp, #8]
 80131ea:	f003 0301 	and.w	r3, r3, #1
 80131ee:	462f      	mov	r7, r5
 80131f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80131f2:	4605      	mov	r5, r0
 80131f4:	9b07      	ldr	r3, [sp, #28]
 80131f6:	4621      	mov	r1, r4
 80131f8:	3b01      	subs	r3, #1
 80131fa:	4648      	mov	r0, r9
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	f7ff fa99 	bl	8012734 <quorem>
 8013202:	4639      	mov	r1, r7
 8013204:	9002      	str	r0, [sp, #8]
 8013206:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801320a:	4648      	mov	r0, r9
 801320c:	f000 ff3a 	bl	8014084 <__mcmp>
 8013210:	462a      	mov	r2, r5
 8013212:	9008      	str	r0, [sp, #32]
 8013214:	4621      	mov	r1, r4
 8013216:	4658      	mov	r0, fp
 8013218:	f000 ff50 	bl	80140bc <__mdiff>
 801321c:	68c2      	ldr	r2, [r0, #12]
 801321e:	4606      	mov	r6, r0
 8013220:	bb02      	cbnz	r2, 8013264 <_dtoa_r+0xa1c>
 8013222:	4601      	mov	r1, r0
 8013224:	4648      	mov	r0, r9
 8013226:	f000 ff2d 	bl	8014084 <__mcmp>
 801322a:	4602      	mov	r2, r0
 801322c:	4631      	mov	r1, r6
 801322e:	4658      	mov	r0, fp
 8013230:	920e      	str	r2, [sp, #56]	@ 0x38
 8013232:	f000 fca3 	bl	8013b7c <_Bfree>
 8013236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801323a:	9e07      	ldr	r6, [sp, #28]
 801323c:	ea43 0102 	orr.w	r1, r3, r2
 8013240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013242:	4319      	orrs	r1, r3
 8013244:	d110      	bne.n	8013268 <_dtoa_r+0xa20>
 8013246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801324a:	d029      	beq.n	80132a0 <_dtoa_r+0xa58>
 801324c:	9b08      	ldr	r3, [sp, #32]
 801324e:	2b00      	cmp	r3, #0
 8013250:	dd02      	ble.n	8013258 <_dtoa_r+0xa10>
 8013252:	9b02      	ldr	r3, [sp, #8]
 8013254:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013258:	9b00      	ldr	r3, [sp, #0]
 801325a:	f883 8000 	strb.w	r8, [r3]
 801325e:	e63f      	b.n	8012ee0 <_dtoa_r+0x698>
 8013260:	4628      	mov	r0, r5
 8013262:	e7bb      	b.n	80131dc <_dtoa_r+0x994>
 8013264:	2201      	movs	r2, #1
 8013266:	e7e1      	b.n	801322c <_dtoa_r+0x9e4>
 8013268:	9b08      	ldr	r3, [sp, #32]
 801326a:	2b00      	cmp	r3, #0
 801326c:	db04      	blt.n	8013278 <_dtoa_r+0xa30>
 801326e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013270:	430b      	orrs	r3, r1
 8013272:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013274:	430b      	orrs	r3, r1
 8013276:	d120      	bne.n	80132ba <_dtoa_r+0xa72>
 8013278:	2a00      	cmp	r2, #0
 801327a:	dded      	ble.n	8013258 <_dtoa_r+0xa10>
 801327c:	4649      	mov	r1, r9
 801327e:	2201      	movs	r2, #1
 8013280:	4658      	mov	r0, fp
 8013282:	f000 fe93 	bl	8013fac <__lshift>
 8013286:	4621      	mov	r1, r4
 8013288:	4681      	mov	r9, r0
 801328a:	f000 fefb 	bl	8014084 <__mcmp>
 801328e:	2800      	cmp	r0, #0
 8013290:	dc03      	bgt.n	801329a <_dtoa_r+0xa52>
 8013292:	d1e1      	bne.n	8013258 <_dtoa_r+0xa10>
 8013294:	f018 0f01 	tst.w	r8, #1
 8013298:	d0de      	beq.n	8013258 <_dtoa_r+0xa10>
 801329a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801329e:	d1d8      	bne.n	8013252 <_dtoa_r+0xa0a>
 80132a0:	9a00      	ldr	r2, [sp, #0]
 80132a2:	2339      	movs	r3, #57	@ 0x39
 80132a4:	7013      	strb	r3, [r2, #0]
 80132a6:	4633      	mov	r3, r6
 80132a8:	461e      	mov	r6, r3
 80132aa:	3b01      	subs	r3, #1
 80132ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80132b0:	2a39      	cmp	r2, #57	@ 0x39
 80132b2:	d052      	beq.n	801335a <_dtoa_r+0xb12>
 80132b4:	3201      	adds	r2, #1
 80132b6:	701a      	strb	r2, [r3, #0]
 80132b8:	e612      	b.n	8012ee0 <_dtoa_r+0x698>
 80132ba:	2a00      	cmp	r2, #0
 80132bc:	dd07      	ble.n	80132ce <_dtoa_r+0xa86>
 80132be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80132c2:	d0ed      	beq.n	80132a0 <_dtoa_r+0xa58>
 80132c4:	9a00      	ldr	r2, [sp, #0]
 80132c6:	f108 0301 	add.w	r3, r8, #1
 80132ca:	7013      	strb	r3, [r2, #0]
 80132cc:	e608      	b.n	8012ee0 <_dtoa_r+0x698>
 80132ce:	9b07      	ldr	r3, [sp, #28]
 80132d0:	9a07      	ldr	r2, [sp, #28]
 80132d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80132d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132d8:	4293      	cmp	r3, r2
 80132da:	d028      	beq.n	801332e <_dtoa_r+0xae6>
 80132dc:	4649      	mov	r1, r9
 80132de:	2300      	movs	r3, #0
 80132e0:	220a      	movs	r2, #10
 80132e2:	4658      	mov	r0, fp
 80132e4:	f000 fc6c 	bl	8013bc0 <__multadd>
 80132e8:	42af      	cmp	r7, r5
 80132ea:	4681      	mov	r9, r0
 80132ec:	f04f 0300 	mov.w	r3, #0
 80132f0:	f04f 020a 	mov.w	r2, #10
 80132f4:	4639      	mov	r1, r7
 80132f6:	4658      	mov	r0, fp
 80132f8:	d107      	bne.n	801330a <_dtoa_r+0xac2>
 80132fa:	f000 fc61 	bl	8013bc0 <__multadd>
 80132fe:	4607      	mov	r7, r0
 8013300:	4605      	mov	r5, r0
 8013302:	9b07      	ldr	r3, [sp, #28]
 8013304:	3301      	adds	r3, #1
 8013306:	9307      	str	r3, [sp, #28]
 8013308:	e774      	b.n	80131f4 <_dtoa_r+0x9ac>
 801330a:	f000 fc59 	bl	8013bc0 <__multadd>
 801330e:	4629      	mov	r1, r5
 8013310:	4607      	mov	r7, r0
 8013312:	2300      	movs	r3, #0
 8013314:	220a      	movs	r2, #10
 8013316:	4658      	mov	r0, fp
 8013318:	f000 fc52 	bl	8013bc0 <__multadd>
 801331c:	4605      	mov	r5, r0
 801331e:	e7f0      	b.n	8013302 <_dtoa_r+0xaba>
 8013320:	9b00      	ldr	r3, [sp, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	bfcc      	ite	gt
 8013326:	461e      	movgt	r6, r3
 8013328:	2601      	movle	r6, #1
 801332a:	4456      	add	r6, sl
 801332c:	2700      	movs	r7, #0
 801332e:	4649      	mov	r1, r9
 8013330:	2201      	movs	r2, #1
 8013332:	4658      	mov	r0, fp
 8013334:	f000 fe3a 	bl	8013fac <__lshift>
 8013338:	4621      	mov	r1, r4
 801333a:	4681      	mov	r9, r0
 801333c:	f000 fea2 	bl	8014084 <__mcmp>
 8013340:	2800      	cmp	r0, #0
 8013342:	dcb0      	bgt.n	80132a6 <_dtoa_r+0xa5e>
 8013344:	d102      	bne.n	801334c <_dtoa_r+0xb04>
 8013346:	f018 0f01 	tst.w	r8, #1
 801334a:	d1ac      	bne.n	80132a6 <_dtoa_r+0xa5e>
 801334c:	4633      	mov	r3, r6
 801334e:	461e      	mov	r6, r3
 8013350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013354:	2a30      	cmp	r2, #48	@ 0x30
 8013356:	d0fa      	beq.n	801334e <_dtoa_r+0xb06>
 8013358:	e5c2      	b.n	8012ee0 <_dtoa_r+0x698>
 801335a:	459a      	cmp	sl, r3
 801335c:	d1a4      	bne.n	80132a8 <_dtoa_r+0xa60>
 801335e:	9b04      	ldr	r3, [sp, #16]
 8013360:	3301      	adds	r3, #1
 8013362:	9304      	str	r3, [sp, #16]
 8013364:	2331      	movs	r3, #49	@ 0x31
 8013366:	f88a 3000 	strb.w	r3, [sl]
 801336a:	e5b9      	b.n	8012ee0 <_dtoa_r+0x698>
 801336c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801336e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80133cc <_dtoa_r+0xb84>
 8013372:	b11b      	cbz	r3, 801337c <_dtoa_r+0xb34>
 8013374:	f10a 0308 	add.w	r3, sl, #8
 8013378:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801337a:	6013      	str	r3, [r2, #0]
 801337c:	4650      	mov	r0, sl
 801337e:	b019      	add	sp, #100	@ 0x64
 8013380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013386:	2b01      	cmp	r3, #1
 8013388:	f77f ae37 	ble.w	8012ffa <_dtoa_r+0x7b2>
 801338c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801338e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013390:	2001      	movs	r0, #1
 8013392:	e655      	b.n	8013040 <_dtoa_r+0x7f8>
 8013394:	9b00      	ldr	r3, [sp, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	f77f aed6 	ble.w	8013148 <_dtoa_r+0x900>
 801339c:	4656      	mov	r6, sl
 801339e:	4621      	mov	r1, r4
 80133a0:	4648      	mov	r0, r9
 80133a2:	f7ff f9c7 	bl	8012734 <quorem>
 80133a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80133aa:	f806 8b01 	strb.w	r8, [r6], #1
 80133ae:	9b00      	ldr	r3, [sp, #0]
 80133b0:	eba6 020a 	sub.w	r2, r6, sl
 80133b4:	4293      	cmp	r3, r2
 80133b6:	ddb3      	ble.n	8013320 <_dtoa_r+0xad8>
 80133b8:	4649      	mov	r1, r9
 80133ba:	2300      	movs	r3, #0
 80133bc:	220a      	movs	r2, #10
 80133be:	4658      	mov	r0, fp
 80133c0:	f000 fbfe 	bl	8013bc0 <__multadd>
 80133c4:	4681      	mov	r9, r0
 80133c6:	e7ea      	b.n	801339e <_dtoa_r+0xb56>
 80133c8:	08015baf 	.word	0x08015baf
 80133cc:	08015b4a 	.word	0x08015b4a

080133d0 <_free_r>:
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4605      	mov	r5, r0
 80133d4:	2900      	cmp	r1, #0
 80133d6:	d041      	beq.n	801345c <_free_r+0x8c>
 80133d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133dc:	1f0c      	subs	r4, r1, #4
 80133de:	2b00      	cmp	r3, #0
 80133e0:	bfb8      	it	lt
 80133e2:	18e4      	addlt	r4, r4, r3
 80133e4:	f7fd fbb0 	bl	8010b48 <__malloc_lock>
 80133e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013460 <_free_r+0x90>)
 80133ea:	6813      	ldr	r3, [r2, #0]
 80133ec:	b933      	cbnz	r3, 80133fc <_free_r+0x2c>
 80133ee:	6063      	str	r3, [r4, #4]
 80133f0:	6014      	str	r4, [r2, #0]
 80133f2:	4628      	mov	r0, r5
 80133f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133f8:	f7fd bbac 	b.w	8010b54 <__malloc_unlock>
 80133fc:	42a3      	cmp	r3, r4
 80133fe:	d908      	bls.n	8013412 <_free_r+0x42>
 8013400:	6820      	ldr	r0, [r4, #0]
 8013402:	1821      	adds	r1, r4, r0
 8013404:	428b      	cmp	r3, r1
 8013406:	bf01      	itttt	eq
 8013408:	6819      	ldreq	r1, [r3, #0]
 801340a:	685b      	ldreq	r3, [r3, #4]
 801340c:	1809      	addeq	r1, r1, r0
 801340e:	6021      	streq	r1, [r4, #0]
 8013410:	e7ed      	b.n	80133ee <_free_r+0x1e>
 8013412:	461a      	mov	r2, r3
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	b10b      	cbz	r3, 801341c <_free_r+0x4c>
 8013418:	42a3      	cmp	r3, r4
 801341a:	d9fa      	bls.n	8013412 <_free_r+0x42>
 801341c:	6811      	ldr	r1, [r2, #0]
 801341e:	1850      	adds	r0, r2, r1
 8013420:	42a0      	cmp	r0, r4
 8013422:	d10b      	bne.n	801343c <_free_r+0x6c>
 8013424:	6820      	ldr	r0, [r4, #0]
 8013426:	4401      	add	r1, r0
 8013428:	1850      	adds	r0, r2, r1
 801342a:	4283      	cmp	r3, r0
 801342c:	6011      	str	r1, [r2, #0]
 801342e:	d1e0      	bne.n	80133f2 <_free_r+0x22>
 8013430:	6818      	ldr	r0, [r3, #0]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	6053      	str	r3, [r2, #4]
 8013436:	4408      	add	r0, r1
 8013438:	6010      	str	r0, [r2, #0]
 801343a:	e7da      	b.n	80133f2 <_free_r+0x22>
 801343c:	d902      	bls.n	8013444 <_free_r+0x74>
 801343e:	230c      	movs	r3, #12
 8013440:	602b      	str	r3, [r5, #0]
 8013442:	e7d6      	b.n	80133f2 <_free_r+0x22>
 8013444:	6820      	ldr	r0, [r4, #0]
 8013446:	1821      	adds	r1, r4, r0
 8013448:	428b      	cmp	r3, r1
 801344a:	bf04      	itt	eq
 801344c:	6819      	ldreq	r1, [r3, #0]
 801344e:	685b      	ldreq	r3, [r3, #4]
 8013450:	6063      	str	r3, [r4, #4]
 8013452:	bf04      	itt	eq
 8013454:	1809      	addeq	r1, r1, r0
 8013456:	6021      	streq	r1, [r4, #0]
 8013458:	6054      	str	r4, [r2, #4]
 801345a:	e7ca      	b.n	80133f2 <_free_r+0x22>
 801345c:	bd38      	pop	{r3, r4, r5, pc}
 801345e:	bf00      	nop
 8013460:	20005954 	.word	0x20005954

08013464 <rshift>:
 8013464:	6903      	ldr	r3, [r0, #16]
 8013466:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801346a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801346e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013472:	f100 0414 	add.w	r4, r0, #20
 8013476:	dd45      	ble.n	8013504 <rshift+0xa0>
 8013478:	f011 011f 	ands.w	r1, r1, #31
 801347c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013480:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013484:	d10c      	bne.n	80134a0 <rshift+0x3c>
 8013486:	f100 0710 	add.w	r7, r0, #16
 801348a:	4629      	mov	r1, r5
 801348c:	42b1      	cmp	r1, r6
 801348e:	d334      	bcc.n	80134fa <rshift+0x96>
 8013490:	1a9b      	subs	r3, r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	1eea      	subs	r2, r5, #3
 8013496:	4296      	cmp	r6, r2
 8013498:	bf38      	it	cc
 801349a:	2300      	movcc	r3, #0
 801349c:	4423      	add	r3, r4
 801349e:	e015      	b.n	80134cc <rshift+0x68>
 80134a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80134a4:	f1c1 0820 	rsb	r8, r1, #32
 80134a8:	40cf      	lsrs	r7, r1
 80134aa:	f105 0e04 	add.w	lr, r5, #4
 80134ae:	46a1      	mov	r9, r4
 80134b0:	4576      	cmp	r6, lr
 80134b2:	46f4      	mov	ip, lr
 80134b4:	d815      	bhi.n	80134e2 <rshift+0x7e>
 80134b6:	1a9a      	subs	r2, r3, r2
 80134b8:	0092      	lsls	r2, r2, #2
 80134ba:	3a04      	subs	r2, #4
 80134bc:	3501      	adds	r5, #1
 80134be:	42ae      	cmp	r6, r5
 80134c0:	bf38      	it	cc
 80134c2:	2200      	movcc	r2, #0
 80134c4:	18a3      	adds	r3, r4, r2
 80134c6:	50a7      	str	r7, [r4, r2]
 80134c8:	b107      	cbz	r7, 80134cc <rshift+0x68>
 80134ca:	3304      	adds	r3, #4
 80134cc:	1b1a      	subs	r2, r3, r4
 80134ce:	42a3      	cmp	r3, r4
 80134d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80134d4:	bf08      	it	eq
 80134d6:	2300      	moveq	r3, #0
 80134d8:	6102      	str	r2, [r0, #16]
 80134da:	bf08      	it	eq
 80134dc:	6143      	streq	r3, [r0, #20]
 80134de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e2:	f8dc c000 	ldr.w	ip, [ip]
 80134e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80134ea:	ea4c 0707 	orr.w	r7, ip, r7
 80134ee:	f849 7b04 	str.w	r7, [r9], #4
 80134f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80134f6:	40cf      	lsrs	r7, r1
 80134f8:	e7da      	b.n	80134b0 <rshift+0x4c>
 80134fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80134fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8013502:	e7c3      	b.n	801348c <rshift+0x28>
 8013504:	4623      	mov	r3, r4
 8013506:	e7e1      	b.n	80134cc <rshift+0x68>

08013508 <__hexdig_fun>:
 8013508:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801350c:	2b09      	cmp	r3, #9
 801350e:	d802      	bhi.n	8013516 <__hexdig_fun+0xe>
 8013510:	3820      	subs	r0, #32
 8013512:	b2c0      	uxtb	r0, r0
 8013514:	4770      	bx	lr
 8013516:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801351a:	2b05      	cmp	r3, #5
 801351c:	d801      	bhi.n	8013522 <__hexdig_fun+0x1a>
 801351e:	3847      	subs	r0, #71	@ 0x47
 8013520:	e7f7      	b.n	8013512 <__hexdig_fun+0xa>
 8013522:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013526:	2b05      	cmp	r3, #5
 8013528:	d801      	bhi.n	801352e <__hexdig_fun+0x26>
 801352a:	3827      	subs	r0, #39	@ 0x27
 801352c:	e7f1      	b.n	8013512 <__hexdig_fun+0xa>
 801352e:	2000      	movs	r0, #0
 8013530:	4770      	bx	lr
	...

08013534 <__gethex>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	b085      	sub	sp, #20
 801353a:	468a      	mov	sl, r1
 801353c:	9302      	str	r3, [sp, #8]
 801353e:	680b      	ldr	r3, [r1, #0]
 8013540:	9001      	str	r0, [sp, #4]
 8013542:	4690      	mov	r8, r2
 8013544:	1c9c      	adds	r4, r3, #2
 8013546:	46a1      	mov	r9, r4
 8013548:	f814 0b01 	ldrb.w	r0, [r4], #1
 801354c:	2830      	cmp	r0, #48	@ 0x30
 801354e:	d0fa      	beq.n	8013546 <__gethex+0x12>
 8013550:	eba9 0303 	sub.w	r3, r9, r3
 8013554:	f1a3 0b02 	sub.w	fp, r3, #2
 8013558:	f7ff ffd6 	bl	8013508 <__hexdig_fun>
 801355c:	4605      	mov	r5, r0
 801355e:	2800      	cmp	r0, #0
 8013560:	d168      	bne.n	8013634 <__gethex+0x100>
 8013562:	49a0      	ldr	r1, [pc, #640]	@ (80137e4 <__gethex+0x2b0>)
 8013564:	2201      	movs	r2, #1
 8013566:	4648      	mov	r0, r9
 8013568:	f7fe ff59 	bl	801241e <strncmp>
 801356c:	4607      	mov	r7, r0
 801356e:	2800      	cmp	r0, #0
 8013570:	d167      	bne.n	8013642 <__gethex+0x10e>
 8013572:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013576:	4626      	mov	r6, r4
 8013578:	f7ff ffc6 	bl	8013508 <__hexdig_fun>
 801357c:	2800      	cmp	r0, #0
 801357e:	d062      	beq.n	8013646 <__gethex+0x112>
 8013580:	4623      	mov	r3, r4
 8013582:	7818      	ldrb	r0, [r3, #0]
 8013584:	2830      	cmp	r0, #48	@ 0x30
 8013586:	4699      	mov	r9, r3
 8013588:	f103 0301 	add.w	r3, r3, #1
 801358c:	d0f9      	beq.n	8013582 <__gethex+0x4e>
 801358e:	f7ff ffbb 	bl	8013508 <__hexdig_fun>
 8013592:	fab0 f580 	clz	r5, r0
 8013596:	096d      	lsrs	r5, r5, #5
 8013598:	f04f 0b01 	mov.w	fp, #1
 801359c:	464a      	mov	r2, r9
 801359e:	4616      	mov	r6, r2
 80135a0:	3201      	adds	r2, #1
 80135a2:	7830      	ldrb	r0, [r6, #0]
 80135a4:	f7ff ffb0 	bl	8013508 <__hexdig_fun>
 80135a8:	2800      	cmp	r0, #0
 80135aa:	d1f8      	bne.n	801359e <__gethex+0x6a>
 80135ac:	498d      	ldr	r1, [pc, #564]	@ (80137e4 <__gethex+0x2b0>)
 80135ae:	2201      	movs	r2, #1
 80135b0:	4630      	mov	r0, r6
 80135b2:	f7fe ff34 	bl	801241e <strncmp>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d13f      	bne.n	801363a <__gethex+0x106>
 80135ba:	b944      	cbnz	r4, 80135ce <__gethex+0x9a>
 80135bc:	1c74      	adds	r4, r6, #1
 80135be:	4622      	mov	r2, r4
 80135c0:	4616      	mov	r6, r2
 80135c2:	3201      	adds	r2, #1
 80135c4:	7830      	ldrb	r0, [r6, #0]
 80135c6:	f7ff ff9f 	bl	8013508 <__hexdig_fun>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d1f8      	bne.n	80135c0 <__gethex+0x8c>
 80135ce:	1ba4      	subs	r4, r4, r6
 80135d0:	00a7      	lsls	r7, r4, #2
 80135d2:	7833      	ldrb	r3, [r6, #0]
 80135d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80135d8:	2b50      	cmp	r3, #80	@ 0x50
 80135da:	d13e      	bne.n	801365a <__gethex+0x126>
 80135dc:	7873      	ldrb	r3, [r6, #1]
 80135de:	2b2b      	cmp	r3, #43	@ 0x2b
 80135e0:	d033      	beq.n	801364a <__gethex+0x116>
 80135e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80135e4:	d034      	beq.n	8013650 <__gethex+0x11c>
 80135e6:	1c71      	adds	r1, r6, #1
 80135e8:	2400      	movs	r4, #0
 80135ea:	7808      	ldrb	r0, [r1, #0]
 80135ec:	f7ff ff8c 	bl	8013508 <__hexdig_fun>
 80135f0:	1e43      	subs	r3, r0, #1
 80135f2:	b2db      	uxtb	r3, r3
 80135f4:	2b18      	cmp	r3, #24
 80135f6:	d830      	bhi.n	801365a <__gethex+0x126>
 80135f8:	f1a0 0210 	sub.w	r2, r0, #16
 80135fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013600:	f7ff ff82 	bl	8013508 <__hexdig_fun>
 8013604:	f100 3cff 	add.w	ip, r0, #4294967295
 8013608:	fa5f fc8c 	uxtb.w	ip, ip
 801360c:	f1bc 0f18 	cmp.w	ip, #24
 8013610:	f04f 030a 	mov.w	r3, #10
 8013614:	d91e      	bls.n	8013654 <__gethex+0x120>
 8013616:	b104      	cbz	r4, 801361a <__gethex+0xe6>
 8013618:	4252      	negs	r2, r2
 801361a:	4417      	add	r7, r2
 801361c:	f8ca 1000 	str.w	r1, [sl]
 8013620:	b1ed      	cbz	r5, 801365e <__gethex+0x12a>
 8013622:	f1bb 0f00 	cmp.w	fp, #0
 8013626:	bf0c      	ite	eq
 8013628:	2506      	moveq	r5, #6
 801362a:	2500      	movne	r5, #0
 801362c:	4628      	mov	r0, r5
 801362e:	b005      	add	sp, #20
 8013630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013634:	2500      	movs	r5, #0
 8013636:	462c      	mov	r4, r5
 8013638:	e7b0      	b.n	801359c <__gethex+0x68>
 801363a:	2c00      	cmp	r4, #0
 801363c:	d1c7      	bne.n	80135ce <__gethex+0x9a>
 801363e:	4627      	mov	r7, r4
 8013640:	e7c7      	b.n	80135d2 <__gethex+0x9e>
 8013642:	464e      	mov	r6, r9
 8013644:	462f      	mov	r7, r5
 8013646:	2501      	movs	r5, #1
 8013648:	e7c3      	b.n	80135d2 <__gethex+0x9e>
 801364a:	2400      	movs	r4, #0
 801364c:	1cb1      	adds	r1, r6, #2
 801364e:	e7cc      	b.n	80135ea <__gethex+0xb6>
 8013650:	2401      	movs	r4, #1
 8013652:	e7fb      	b.n	801364c <__gethex+0x118>
 8013654:	fb03 0002 	mla	r0, r3, r2, r0
 8013658:	e7ce      	b.n	80135f8 <__gethex+0xc4>
 801365a:	4631      	mov	r1, r6
 801365c:	e7de      	b.n	801361c <__gethex+0xe8>
 801365e:	eba6 0309 	sub.w	r3, r6, r9
 8013662:	3b01      	subs	r3, #1
 8013664:	4629      	mov	r1, r5
 8013666:	2b07      	cmp	r3, #7
 8013668:	dc0a      	bgt.n	8013680 <__gethex+0x14c>
 801366a:	9801      	ldr	r0, [sp, #4]
 801366c:	f000 fa46 	bl	8013afc <_Balloc>
 8013670:	4604      	mov	r4, r0
 8013672:	b940      	cbnz	r0, 8013686 <__gethex+0x152>
 8013674:	4b5c      	ldr	r3, [pc, #368]	@ (80137e8 <__gethex+0x2b4>)
 8013676:	4602      	mov	r2, r0
 8013678:	21e4      	movs	r1, #228	@ 0xe4
 801367a:	485c      	ldr	r0, [pc, #368]	@ (80137ec <__gethex+0x2b8>)
 801367c:	f7ff f83c 	bl	80126f8 <__assert_func>
 8013680:	3101      	adds	r1, #1
 8013682:	105b      	asrs	r3, r3, #1
 8013684:	e7ef      	b.n	8013666 <__gethex+0x132>
 8013686:	f100 0a14 	add.w	sl, r0, #20
 801368a:	2300      	movs	r3, #0
 801368c:	4655      	mov	r5, sl
 801368e:	469b      	mov	fp, r3
 8013690:	45b1      	cmp	r9, r6
 8013692:	d337      	bcc.n	8013704 <__gethex+0x1d0>
 8013694:	f845 bb04 	str.w	fp, [r5], #4
 8013698:	eba5 050a 	sub.w	r5, r5, sl
 801369c:	10ad      	asrs	r5, r5, #2
 801369e:	6125      	str	r5, [r4, #16]
 80136a0:	4658      	mov	r0, fp
 80136a2:	f000 fb1d 	bl	8013ce0 <__hi0bits>
 80136a6:	016d      	lsls	r5, r5, #5
 80136a8:	f8d8 6000 	ldr.w	r6, [r8]
 80136ac:	1a2d      	subs	r5, r5, r0
 80136ae:	42b5      	cmp	r5, r6
 80136b0:	dd54      	ble.n	801375c <__gethex+0x228>
 80136b2:	1bad      	subs	r5, r5, r6
 80136b4:	4629      	mov	r1, r5
 80136b6:	4620      	mov	r0, r4
 80136b8:	f000 feb1 	bl	801441e <__any_on>
 80136bc:	4681      	mov	r9, r0
 80136be:	b178      	cbz	r0, 80136e0 <__gethex+0x1ac>
 80136c0:	1e6b      	subs	r3, r5, #1
 80136c2:	1159      	asrs	r1, r3, #5
 80136c4:	f003 021f 	and.w	r2, r3, #31
 80136c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80136cc:	f04f 0901 	mov.w	r9, #1
 80136d0:	fa09 f202 	lsl.w	r2, r9, r2
 80136d4:	420a      	tst	r2, r1
 80136d6:	d003      	beq.n	80136e0 <__gethex+0x1ac>
 80136d8:	454b      	cmp	r3, r9
 80136da:	dc36      	bgt.n	801374a <__gethex+0x216>
 80136dc:	f04f 0902 	mov.w	r9, #2
 80136e0:	4629      	mov	r1, r5
 80136e2:	4620      	mov	r0, r4
 80136e4:	f7ff febe 	bl	8013464 <rshift>
 80136e8:	442f      	add	r7, r5
 80136ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80136ee:	42bb      	cmp	r3, r7
 80136f0:	da42      	bge.n	8013778 <__gethex+0x244>
 80136f2:	9801      	ldr	r0, [sp, #4]
 80136f4:	4621      	mov	r1, r4
 80136f6:	f000 fa41 	bl	8013b7c <_Bfree>
 80136fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136fc:	2300      	movs	r3, #0
 80136fe:	6013      	str	r3, [r2, #0]
 8013700:	25a3      	movs	r5, #163	@ 0xa3
 8013702:	e793      	b.n	801362c <__gethex+0xf8>
 8013704:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013708:	2a2e      	cmp	r2, #46	@ 0x2e
 801370a:	d012      	beq.n	8013732 <__gethex+0x1fe>
 801370c:	2b20      	cmp	r3, #32
 801370e:	d104      	bne.n	801371a <__gethex+0x1e6>
 8013710:	f845 bb04 	str.w	fp, [r5], #4
 8013714:	f04f 0b00 	mov.w	fp, #0
 8013718:	465b      	mov	r3, fp
 801371a:	7830      	ldrb	r0, [r6, #0]
 801371c:	9303      	str	r3, [sp, #12]
 801371e:	f7ff fef3 	bl	8013508 <__hexdig_fun>
 8013722:	9b03      	ldr	r3, [sp, #12]
 8013724:	f000 000f 	and.w	r0, r0, #15
 8013728:	4098      	lsls	r0, r3
 801372a:	ea4b 0b00 	orr.w	fp, fp, r0
 801372e:	3304      	adds	r3, #4
 8013730:	e7ae      	b.n	8013690 <__gethex+0x15c>
 8013732:	45b1      	cmp	r9, r6
 8013734:	d8ea      	bhi.n	801370c <__gethex+0x1d8>
 8013736:	492b      	ldr	r1, [pc, #172]	@ (80137e4 <__gethex+0x2b0>)
 8013738:	9303      	str	r3, [sp, #12]
 801373a:	2201      	movs	r2, #1
 801373c:	4630      	mov	r0, r6
 801373e:	f7fe fe6e 	bl	801241e <strncmp>
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	2800      	cmp	r0, #0
 8013746:	d1e1      	bne.n	801370c <__gethex+0x1d8>
 8013748:	e7a2      	b.n	8013690 <__gethex+0x15c>
 801374a:	1ea9      	subs	r1, r5, #2
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fe66 	bl	801441e <__any_on>
 8013752:	2800      	cmp	r0, #0
 8013754:	d0c2      	beq.n	80136dc <__gethex+0x1a8>
 8013756:	f04f 0903 	mov.w	r9, #3
 801375a:	e7c1      	b.n	80136e0 <__gethex+0x1ac>
 801375c:	da09      	bge.n	8013772 <__gethex+0x23e>
 801375e:	1b75      	subs	r5, r6, r5
 8013760:	4621      	mov	r1, r4
 8013762:	9801      	ldr	r0, [sp, #4]
 8013764:	462a      	mov	r2, r5
 8013766:	f000 fc21 	bl	8013fac <__lshift>
 801376a:	1b7f      	subs	r7, r7, r5
 801376c:	4604      	mov	r4, r0
 801376e:	f100 0a14 	add.w	sl, r0, #20
 8013772:	f04f 0900 	mov.w	r9, #0
 8013776:	e7b8      	b.n	80136ea <__gethex+0x1b6>
 8013778:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801377c:	42bd      	cmp	r5, r7
 801377e:	dd6f      	ble.n	8013860 <__gethex+0x32c>
 8013780:	1bed      	subs	r5, r5, r7
 8013782:	42ae      	cmp	r6, r5
 8013784:	dc34      	bgt.n	80137f0 <__gethex+0x2bc>
 8013786:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801378a:	2b02      	cmp	r3, #2
 801378c:	d022      	beq.n	80137d4 <__gethex+0x2a0>
 801378e:	2b03      	cmp	r3, #3
 8013790:	d024      	beq.n	80137dc <__gethex+0x2a8>
 8013792:	2b01      	cmp	r3, #1
 8013794:	d115      	bne.n	80137c2 <__gethex+0x28e>
 8013796:	42ae      	cmp	r6, r5
 8013798:	d113      	bne.n	80137c2 <__gethex+0x28e>
 801379a:	2e01      	cmp	r6, #1
 801379c:	d10b      	bne.n	80137b6 <__gethex+0x282>
 801379e:	9a02      	ldr	r2, [sp, #8]
 80137a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137a4:	6013      	str	r3, [r2, #0]
 80137a6:	2301      	movs	r3, #1
 80137a8:	6123      	str	r3, [r4, #16]
 80137aa:	f8ca 3000 	str.w	r3, [sl]
 80137ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137b0:	2562      	movs	r5, #98	@ 0x62
 80137b2:	601c      	str	r4, [r3, #0]
 80137b4:	e73a      	b.n	801362c <__gethex+0xf8>
 80137b6:	1e71      	subs	r1, r6, #1
 80137b8:	4620      	mov	r0, r4
 80137ba:	f000 fe30 	bl	801441e <__any_on>
 80137be:	2800      	cmp	r0, #0
 80137c0:	d1ed      	bne.n	801379e <__gethex+0x26a>
 80137c2:	9801      	ldr	r0, [sp, #4]
 80137c4:	4621      	mov	r1, r4
 80137c6:	f000 f9d9 	bl	8013b7c <_Bfree>
 80137ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137cc:	2300      	movs	r3, #0
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	2550      	movs	r5, #80	@ 0x50
 80137d2:	e72b      	b.n	801362c <__gethex+0xf8>
 80137d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1f3      	bne.n	80137c2 <__gethex+0x28e>
 80137da:	e7e0      	b.n	801379e <__gethex+0x26a>
 80137dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1dd      	bne.n	801379e <__gethex+0x26a>
 80137e2:	e7ee      	b.n	80137c2 <__gethex+0x28e>
 80137e4:	0801590c 	.word	0x0801590c
 80137e8:	08015baf 	.word	0x08015baf
 80137ec:	08015bc0 	.word	0x08015bc0
 80137f0:	1e6f      	subs	r7, r5, #1
 80137f2:	f1b9 0f00 	cmp.w	r9, #0
 80137f6:	d130      	bne.n	801385a <__gethex+0x326>
 80137f8:	b127      	cbz	r7, 8013804 <__gethex+0x2d0>
 80137fa:	4639      	mov	r1, r7
 80137fc:	4620      	mov	r0, r4
 80137fe:	f000 fe0e 	bl	801441e <__any_on>
 8013802:	4681      	mov	r9, r0
 8013804:	117a      	asrs	r2, r7, #5
 8013806:	2301      	movs	r3, #1
 8013808:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801380c:	f007 071f 	and.w	r7, r7, #31
 8013810:	40bb      	lsls	r3, r7
 8013812:	4213      	tst	r3, r2
 8013814:	4629      	mov	r1, r5
 8013816:	4620      	mov	r0, r4
 8013818:	bf18      	it	ne
 801381a:	f049 0902 	orrne.w	r9, r9, #2
 801381e:	f7ff fe21 	bl	8013464 <rshift>
 8013822:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013826:	1b76      	subs	r6, r6, r5
 8013828:	2502      	movs	r5, #2
 801382a:	f1b9 0f00 	cmp.w	r9, #0
 801382e:	d047      	beq.n	80138c0 <__gethex+0x38c>
 8013830:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013834:	2b02      	cmp	r3, #2
 8013836:	d015      	beq.n	8013864 <__gethex+0x330>
 8013838:	2b03      	cmp	r3, #3
 801383a:	d017      	beq.n	801386c <__gethex+0x338>
 801383c:	2b01      	cmp	r3, #1
 801383e:	d109      	bne.n	8013854 <__gethex+0x320>
 8013840:	f019 0f02 	tst.w	r9, #2
 8013844:	d006      	beq.n	8013854 <__gethex+0x320>
 8013846:	f8da 3000 	ldr.w	r3, [sl]
 801384a:	ea49 0903 	orr.w	r9, r9, r3
 801384e:	f019 0f01 	tst.w	r9, #1
 8013852:	d10e      	bne.n	8013872 <__gethex+0x33e>
 8013854:	f045 0510 	orr.w	r5, r5, #16
 8013858:	e032      	b.n	80138c0 <__gethex+0x38c>
 801385a:	f04f 0901 	mov.w	r9, #1
 801385e:	e7d1      	b.n	8013804 <__gethex+0x2d0>
 8013860:	2501      	movs	r5, #1
 8013862:	e7e2      	b.n	801382a <__gethex+0x2f6>
 8013864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013866:	f1c3 0301 	rsb	r3, r3, #1
 801386a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801386c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801386e:	2b00      	cmp	r3, #0
 8013870:	d0f0      	beq.n	8013854 <__gethex+0x320>
 8013872:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013876:	f104 0314 	add.w	r3, r4, #20
 801387a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801387e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013882:	f04f 0c00 	mov.w	ip, #0
 8013886:	4618      	mov	r0, r3
 8013888:	f853 2b04 	ldr.w	r2, [r3], #4
 801388c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013890:	d01b      	beq.n	80138ca <__gethex+0x396>
 8013892:	3201      	adds	r2, #1
 8013894:	6002      	str	r2, [r0, #0]
 8013896:	2d02      	cmp	r5, #2
 8013898:	f104 0314 	add.w	r3, r4, #20
 801389c:	d13c      	bne.n	8013918 <__gethex+0x3e4>
 801389e:	f8d8 2000 	ldr.w	r2, [r8]
 80138a2:	3a01      	subs	r2, #1
 80138a4:	42b2      	cmp	r2, r6
 80138a6:	d109      	bne.n	80138bc <__gethex+0x388>
 80138a8:	1171      	asrs	r1, r6, #5
 80138aa:	2201      	movs	r2, #1
 80138ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80138b0:	f006 061f 	and.w	r6, r6, #31
 80138b4:	fa02 f606 	lsl.w	r6, r2, r6
 80138b8:	421e      	tst	r6, r3
 80138ba:	d13a      	bne.n	8013932 <__gethex+0x3fe>
 80138bc:	f045 0520 	orr.w	r5, r5, #32
 80138c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138c2:	601c      	str	r4, [r3, #0]
 80138c4:	9b02      	ldr	r3, [sp, #8]
 80138c6:	601f      	str	r7, [r3, #0]
 80138c8:	e6b0      	b.n	801362c <__gethex+0xf8>
 80138ca:	4299      	cmp	r1, r3
 80138cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80138d0:	d8d9      	bhi.n	8013886 <__gethex+0x352>
 80138d2:	68a3      	ldr	r3, [r4, #8]
 80138d4:	459b      	cmp	fp, r3
 80138d6:	db17      	blt.n	8013908 <__gethex+0x3d4>
 80138d8:	6861      	ldr	r1, [r4, #4]
 80138da:	9801      	ldr	r0, [sp, #4]
 80138dc:	3101      	adds	r1, #1
 80138de:	f000 f90d 	bl	8013afc <_Balloc>
 80138e2:	4681      	mov	r9, r0
 80138e4:	b918      	cbnz	r0, 80138ee <__gethex+0x3ba>
 80138e6:	4b1a      	ldr	r3, [pc, #104]	@ (8013950 <__gethex+0x41c>)
 80138e8:	4602      	mov	r2, r0
 80138ea:	2184      	movs	r1, #132	@ 0x84
 80138ec:	e6c5      	b.n	801367a <__gethex+0x146>
 80138ee:	6922      	ldr	r2, [r4, #16]
 80138f0:	3202      	adds	r2, #2
 80138f2:	f104 010c 	add.w	r1, r4, #12
 80138f6:	0092      	lsls	r2, r2, #2
 80138f8:	300c      	adds	r0, #12
 80138fa:	f7fe fee4 	bl	80126c6 <memcpy>
 80138fe:	4621      	mov	r1, r4
 8013900:	9801      	ldr	r0, [sp, #4]
 8013902:	f000 f93b 	bl	8013b7c <_Bfree>
 8013906:	464c      	mov	r4, r9
 8013908:	6923      	ldr	r3, [r4, #16]
 801390a:	1c5a      	adds	r2, r3, #1
 801390c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013910:	6122      	str	r2, [r4, #16]
 8013912:	2201      	movs	r2, #1
 8013914:	615a      	str	r2, [r3, #20]
 8013916:	e7be      	b.n	8013896 <__gethex+0x362>
 8013918:	6922      	ldr	r2, [r4, #16]
 801391a:	455a      	cmp	r2, fp
 801391c:	dd0b      	ble.n	8013936 <__gethex+0x402>
 801391e:	2101      	movs	r1, #1
 8013920:	4620      	mov	r0, r4
 8013922:	f7ff fd9f 	bl	8013464 <rshift>
 8013926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801392a:	3701      	adds	r7, #1
 801392c:	42bb      	cmp	r3, r7
 801392e:	f6ff aee0 	blt.w	80136f2 <__gethex+0x1be>
 8013932:	2501      	movs	r5, #1
 8013934:	e7c2      	b.n	80138bc <__gethex+0x388>
 8013936:	f016 061f 	ands.w	r6, r6, #31
 801393a:	d0fa      	beq.n	8013932 <__gethex+0x3fe>
 801393c:	4453      	add	r3, sl
 801393e:	f1c6 0620 	rsb	r6, r6, #32
 8013942:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013946:	f000 f9cb 	bl	8013ce0 <__hi0bits>
 801394a:	42b0      	cmp	r0, r6
 801394c:	dbe7      	blt.n	801391e <__gethex+0x3ea>
 801394e:	e7f0      	b.n	8013932 <__gethex+0x3fe>
 8013950:	08015baf 	.word	0x08015baf

08013954 <L_shift>:
 8013954:	f1c2 0208 	rsb	r2, r2, #8
 8013958:	0092      	lsls	r2, r2, #2
 801395a:	b570      	push	{r4, r5, r6, lr}
 801395c:	f1c2 0620 	rsb	r6, r2, #32
 8013960:	6843      	ldr	r3, [r0, #4]
 8013962:	6804      	ldr	r4, [r0, #0]
 8013964:	fa03 f506 	lsl.w	r5, r3, r6
 8013968:	432c      	orrs	r4, r5
 801396a:	40d3      	lsrs	r3, r2
 801396c:	6004      	str	r4, [r0, #0]
 801396e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013972:	4288      	cmp	r0, r1
 8013974:	d3f4      	bcc.n	8013960 <L_shift+0xc>
 8013976:	bd70      	pop	{r4, r5, r6, pc}

08013978 <__match>:
 8013978:	b530      	push	{r4, r5, lr}
 801397a:	6803      	ldr	r3, [r0, #0]
 801397c:	3301      	adds	r3, #1
 801397e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013982:	b914      	cbnz	r4, 801398a <__match+0x12>
 8013984:	6003      	str	r3, [r0, #0]
 8013986:	2001      	movs	r0, #1
 8013988:	bd30      	pop	{r4, r5, pc}
 801398a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801398e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013992:	2d19      	cmp	r5, #25
 8013994:	bf98      	it	ls
 8013996:	3220      	addls	r2, #32
 8013998:	42a2      	cmp	r2, r4
 801399a:	d0f0      	beq.n	801397e <__match+0x6>
 801399c:	2000      	movs	r0, #0
 801399e:	e7f3      	b.n	8013988 <__match+0x10>

080139a0 <__hexnan>:
 80139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	680b      	ldr	r3, [r1, #0]
 80139a6:	6801      	ldr	r1, [r0, #0]
 80139a8:	115e      	asrs	r6, r3, #5
 80139aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80139ae:	f013 031f 	ands.w	r3, r3, #31
 80139b2:	b087      	sub	sp, #28
 80139b4:	bf18      	it	ne
 80139b6:	3604      	addne	r6, #4
 80139b8:	2500      	movs	r5, #0
 80139ba:	1f37      	subs	r7, r6, #4
 80139bc:	4682      	mov	sl, r0
 80139be:	4690      	mov	r8, r2
 80139c0:	9301      	str	r3, [sp, #4]
 80139c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80139c6:	46b9      	mov	r9, r7
 80139c8:	463c      	mov	r4, r7
 80139ca:	9502      	str	r5, [sp, #8]
 80139cc:	46ab      	mov	fp, r5
 80139ce:	784a      	ldrb	r2, [r1, #1]
 80139d0:	1c4b      	adds	r3, r1, #1
 80139d2:	9303      	str	r3, [sp, #12]
 80139d4:	b342      	cbz	r2, 8013a28 <__hexnan+0x88>
 80139d6:	4610      	mov	r0, r2
 80139d8:	9105      	str	r1, [sp, #20]
 80139da:	9204      	str	r2, [sp, #16]
 80139dc:	f7ff fd94 	bl	8013508 <__hexdig_fun>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d151      	bne.n	8013a88 <__hexnan+0xe8>
 80139e4:	9a04      	ldr	r2, [sp, #16]
 80139e6:	9905      	ldr	r1, [sp, #20]
 80139e8:	2a20      	cmp	r2, #32
 80139ea:	d818      	bhi.n	8013a1e <__hexnan+0x7e>
 80139ec:	9b02      	ldr	r3, [sp, #8]
 80139ee:	459b      	cmp	fp, r3
 80139f0:	dd13      	ble.n	8013a1a <__hexnan+0x7a>
 80139f2:	454c      	cmp	r4, r9
 80139f4:	d206      	bcs.n	8013a04 <__hexnan+0x64>
 80139f6:	2d07      	cmp	r5, #7
 80139f8:	dc04      	bgt.n	8013a04 <__hexnan+0x64>
 80139fa:	462a      	mov	r2, r5
 80139fc:	4649      	mov	r1, r9
 80139fe:	4620      	mov	r0, r4
 8013a00:	f7ff ffa8 	bl	8013954 <L_shift>
 8013a04:	4544      	cmp	r4, r8
 8013a06:	d952      	bls.n	8013aae <__hexnan+0x10e>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	f1a4 0904 	sub.w	r9, r4, #4
 8013a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a12:	f8cd b008 	str.w	fp, [sp, #8]
 8013a16:	464c      	mov	r4, r9
 8013a18:	461d      	mov	r5, r3
 8013a1a:	9903      	ldr	r1, [sp, #12]
 8013a1c:	e7d7      	b.n	80139ce <__hexnan+0x2e>
 8013a1e:	2a29      	cmp	r2, #41	@ 0x29
 8013a20:	d157      	bne.n	8013ad2 <__hexnan+0x132>
 8013a22:	3102      	adds	r1, #2
 8013a24:	f8ca 1000 	str.w	r1, [sl]
 8013a28:	f1bb 0f00 	cmp.w	fp, #0
 8013a2c:	d051      	beq.n	8013ad2 <__hexnan+0x132>
 8013a2e:	454c      	cmp	r4, r9
 8013a30:	d206      	bcs.n	8013a40 <__hexnan+0xa0>
 8013a32:	2d07      	cmp	r5, #7
 8013a34:	dc04      	bgt.n	8013a40 <__hexnan+0xa0>
 8013a36:	462a      	mov	r2, r5
 8013a38:	4649      	mov	r1, r9
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	f7ff ff8a 	bl	8013954 <L_shift>
 8013a40:	4544      	cmp	r4, r8
 8013a42:	d936      	bls.n	8013ab2 <__hexnan+0x112>
 8013a44:	f1a8 0204 	sub.w	r2, r8, #4
 8013a48:	4623      	mov	r3, r4
 8013a4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013a4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013a52:	429f      	cmp	r7, r3
 8013a54:	d2f9      	bcs.n	8013a4a <__hexnan+0xaa>
 8013a56:	1b3b      	subs	r3, r7, r4
 8013a58:	f023 0303 	bic.w	r3, r3, #3
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	3401      	adds	r4, #1
 8013a60:	3e03      	subs	r6, #3
 8013a62:	42b4      	cmp	r4, r6
 8013a64:	bf88      	it	hi
 8013a66:	2304      	movhi	r3, #4
 8013a68:	4443      	add	r3, r8
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f843 2b04 	str.w	r2, [r3], #4
 8013a70:	429f      	cmp	r7, r3
 8013a72:	d2fb      	bcs.n	8013a6c <__hexnan+0xcc>
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	b91b      	cbnz	r3, 8013a80 <__hexnan+0xe0>
 8013a78:	4547      	cmp	r7, r8
 8013a7a:	d128      	bne.n	8013ace <__hexnan+0x12e>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	603b      	str	r3, [r7, #0]
 8013a80:	2005      	movs	r0, #5
 8013a82:	b007      	add	sp, #28
 8013a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a88:	3501      	adds	r5, #1
 8013a8a:	2d08      	cmp	r5, #8
 8013a8c:	f10b 0b01 	add.w	fp, fp, #1
 8013a90:	dd06      	ble.n	8013aa0 <__hexnan+0x100>
 8013a92:	4544      	cmp	r4, r8
 8013a94:	d9c1      	bls.n	8013a1a <__hexnan+0x7a>
 8013a96:	2300      	movs	r3, #0
 8013a98:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a9c:	2501      	movs	r5, #1
 8013a9e:	3c04      	subs	r4, #4
 8013aa0:	6822      	ldr	r2, [r4, #0]
 8013aa2:	f000 000f 	and.w	r0, r0, #15
 8013aa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013aaa:	6020      	str	r0, [r4, #0]
 8013aac:	e7b5      	b.n	8013a1a <__hexnan+0x7a>
 8013aae:	2508      	movs	r5, #8
 8013ab0:	e7b3      	b.n	8013a1a <__hexnan+0x7a>
 8013ab2:	9b01      	ldr	r3, [sp, #4]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d0dd      	beq.n	8013a74 <__hexnan+0xd4>
 8013ab8:	f1c3 0320 	rsb	r3, r3, #32
 8013abc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac0:	40da      	lsrs	r2, r3
 8013ac2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	f846 3c04 	str.w	r3, [r6, #-4]
 8013acc:	e7d2      	b.n	8013a74 <__hexnan+0xd4>
 8013ace:	3f04      	subs	r7, #4
 8013ad0:	e7d0      	b.n	8013a74 <__hexnan+0xd4>
 8013ad2:	2004      	movs	r0, #4
 8013ad4:	e7d5      	b.n	8013a82 <__hexnan+0xe2>

08013ad6 <__ascii_mbtowc>:
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	b901      	cbnz	r1, 8013adc <__ascii_mbtowc+0x6>
 8013ada:	a901      	add	r1, sp, #4
 8013adc:	b142      	cbz	r2, 8013af0 <__ascii_mbtowc+0x1a>
 8013ade:	b14b      	cbz	r3, 8013af4 <__ascii_mbtowc+0x1e>
 8013ae0:	7813      	ldrb	r3, [r2, #0]
 8013ae2:	600b      	str	r3, [r1, #0]
 8013ae4:	7812      	ldrb	r2, [r2, #0]
 8013ae6:	1e10      	subs	r0, r2, #0
 8013ae8:	bf18      	it	ne
 8013aea:	2001      	movne	r0, #1
 8013aec:	b002      	add	sp, #8
 8013aee:	4770      	bx	lr
 8013af0:	4610      	mov	r0, r2
 8013af2:	e7fb      	b.n	8013aec <__ascii_mbtowc+0x16>
 8013af4:	f06f 0001 	mvn.w	r0, #1
 8013af8:	e7f8      	b.n	8013aec <__ascii_mbtowc+0x16>
	...

08013afc <_Balloc>:
 8013afc:	b570      	push	{r4, r5, r6, lr}
 8013afe:	69c6      	ldr	r6, [r0, #28]
 8013b00:	4604      	mov	r4, r0
 8013b02:	460d      	mov	r5, r1
 8013b04:	b976      	cbnz	r6, 8013b24 <_Balloc+0x28>
 8013b06:	2010      	movs	r0, #16
 8013b08:	f7fc ff6c 	bl	80109e4 <malloc>
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	61e0      	str	r0, [r4, #28]
 8013b10:	b920      	cbnz	r0, 8013b1c <_Balloc+0x20>
 8013b12:	4b18      	ldr	r3, [pc, #96]	@ (8013b74 <_Balloc+0x78>)
 8013b14:	4818      	ldr	r0, [pc, #96]	@ (8013b78 <_Balloc+0x7c>)
 8013b16:	216b      	movs	r1, #107	@ 0x6b
 8013b18:	f7fe fdee 	bl	80126f8 <__assert_func>
 8013b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b20:	6006      	str	r6, [r0, #0]
 8013b22:	60c6      	str	r6, [r0, #12]
 8013b24:	69e6      	ldr	r6, [r4, #28]
 8013b26:	68f3      	ldr	r3, [r6, #12]
 8013b28:	b183      	cbz	r3, 8013b4c <_Balloc+0x50>
 8013b2a:	69e3      	ldr	r3, [r4, #28]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b32:	b9b8      	cbnz	r0, 8013b64 <_Balloc+0x68>
 8013b34:	2101      	movs	r1, #1
 8013b36:	fa01 f605 	lsl.w	r6, r1, r5
 8013b3a:	1d72      	adds	r2, r6, #5
 8013b3c:	0092      	lsls	r2, r2, #2
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f000 fed1 	bl	80148e6 <_calloc_r>
 8013b44:	b160      	cbz	r0, 8013b60 <_Balloc+0x64>
 8013b46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b4a:	e00e      	b.n	8013b6a <_Balloc+0x6e>
 8013b4c:	2221      	movs	r2, #33	@ 0x21
 8013b4e:	2104      	movs	r1, #4
 8013b50:	4620      	mov	r0, r4
 8013b52:	f000 fec8 	bl	80148e6 <_calloc_r>
 8013b56:	69e3      	ldr	r3, [r4, #28]
 8013b58:	60f0      	str	r0, [r6, #12]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d1e4      	bne.n	8013b2a <_Balloc+0x2e>
 8013b60:	2000      	movs	r0, #0
 8013b62:	bd70      	pop	{r4, r5, r6, pc}
 8013b64:	6802      	ldr	r2, [r0, #0]
 8013b66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b70:	e7f7      	b.n	8013b62 <_Balloc+0x66>
 8013b72:	bf00      	nop
 8013b74:	08015a95 	.word	0x08015a95
 8013b78:	08015c20 	.word	0x08015c20

08013b7c <_Bfree>:
 8013b7c:	b570      	push	{r4, r5, r6, lr}
 8013b7e:	69c6      	ldr	r6, [r0, #28]
 8013b80:	4605      	mov	r5, r0
 8013b82:	460c      	mov	r4, r1
 8013b84:	b976      	cbnz	r6, 8013ba4 <_Bfree+0x28>
 8013b86:	2010      	movs	r0, #16
 8013b88:	f7fc ff2c 	bl	80109e4 <malloc>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	61e8      	str	r0, [r5, #28]
 8013b90:	b920      	cbnz	r0, 8013b9c <_Bfree+0x20>
 8013b92:	4b09      	ldr	r3, [pc, #36]	@ (8013bb8 <_Bfree+0x3c>)
 8013b94:	4809      	ldr	r0, [pc, #36]	@ (8013bbc <_Bfree+0x40>)
 8013b96:	218f      	movs	r1, #143	@ 0x8f
 8013b98:	f7fe fdae 	bl	80126f8 <__assert_func>
 8013b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ba0:	6006      	str	r6, [r0, #0]
 8013ba2:	60c6      	str	r6, [r0, #12]
 8013ba4:	b13c      	cbz	r4, 8013bb6 <_Bfree+0x3a>
 8013ba6:	69eb      	ldr	r3, [r5, #28]
 8013ba8:	6862      	ldr	r2, [r4, #4]
 8013baa:	68db      	ldr	r3, [r3, #12]
 8013bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013bb0:	6021      	str	r1, [r4, #0]
 8013bb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bb6:	bd70      	pop	{r4, r5, r6, pc}
 8013bb8:	08015a95 	.word	0x08015a95
 8013bbc:	08015c20 	.word	0x08015c20

08013bc0 <__multadd>:
 8013bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc4:	690d      	ldr	r5, [r1, #16]
 8013bc6:	4607      	mov	r7, r0
 8013bc8:	460c      	mov	r4, r1
 8013bca:	461e      	mov	r6, r3
 8013bcc:	f101 0c14 	add.w	ip, r1, #20
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	f8dc 3000 	ldr.w	r3, [ip]
 8013bd6:	b299      	uxth	r1, r3
 8013bd8:	fb02 6101 	mla	r1, r2, r1, r6
 8013bdc:	0c1e      	lsrs	r6, r3, #16
 8013bde:	0c0b      	lsrs	r3, r1, #16
 8013be0:	fb02 3306 	mla	r3, r2, r6, r3
 8013be4:	b289      	uxth	r1, r1
 8013be6:	3001      	adds	r0, #1
 8013be8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013bec:	4285      	cmp	r5, r0
 8013bee:	f84c 1b04 	str.w	r1, [ip], #4
 8013bf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bf6:	dcec      	bgt.n	8013bd2 <__multadd+0x12>
 8013bf8:	b30e      	cbz	r6, 8013c3e <__multadd+0x7e>
 8013bfa:	68a3      	ldr	r3, [r4, #8]
 8013bfc:	42ab      	cmp	r3, r5
 8013bfe:	dc19      	bgt.n	8013c34 <__multadd+0x74>
 8013c00:	6861      	ldr	r1, [r4, #4]
 8013c02:	4638      	mov	r0, r7
 8013c04:	3101      	adds	r1, #1
 8013c06:	f7ff ff79 	bl	8013afc <_Balloc>
 8013c0a:	4680      	mov	r8, r0
 8013c0c:	b928      	cbnz	r0, 8013c1a <__multadd+0x5a>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	4b0c      	ldr	r3, [pc, #48]	@ (8013c44 <__multadd+0x84>)
 8013c12:	480d      	ldr	r0, [pc, #52]	@ (8013c48 <__multadd+0x88>)
 8013c14:	21ba      	movs	r1, #186	@ 0xba
 8013c16:	f7fe fd6f 	bl	80126f8 <__assert_func>
 8013c1a:	6922      	ldr	r2, [r4, #16]
 8013c1c:	3202      	adds	r2, #2
 8013c1e:	f104 010c 	add.w	r1, r4, #12
 8013c22:	0092      	lsls	r2, r2, #2
 8013c24:	300c      	adds	r0, #12
 8013c26:	f7fe fd4e 	bl	80126c6 <memcpy>
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	4638      	mov	r0, r7
 8013c2e:	f7ff ffa5 	bl	8013b7c <_Bfree>
 8013c32:	4644      	mov	r4, r8
 8013c34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c38:	3501      	adds	r5, #1
 8013c3a:	615e      	str	r6, [r3, #20]
 8013c3c:	6125      	str	r5, [r4, #16]
 8013c3e:	4620      	mov	r0, r4
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c44:	08015baf 	.word	0x08015baf
 8013c48:	08015c20 	.word	0x08015c20

08013c4c <__s2b>:
 8013c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c50:	460c      	mov	r4, r1
 8013c52:	4615      	mov	r5, r2
 8013c54:	461f      	mov	r7, r3
 8013c56:	2209      	movs	r2, #9
 8013c58:	3308      	adds	r3, #8
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c60:	2100      	movs	r1, #0
 8013c62:	2201      	movs	r2, #1
 8013c64:	429a      	cmp	r2, r3
 8013c66:	db09      	blt.n	8013c7c <__s2b+0x30>
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f7ff ff47 	bl	8013afc <_Balloc>
 8013c6e:	b940      	cbnz	r0, 8013c82 <__s2b+0x36>
 8013c70:	4602      	mov	r2, r0
 8013c72:	4b19      	ldr	r3, [pc, #100]	@ (8013cd8 <__s2b+0x8c>)
 8013c74:	4819      	ldr	r0, [pc, #100]	@ (8013cdc <__s2b+0x90>)
 8013c76:	21d3      	movs	r1, #211	@ 0xd3
 8013c78:	f7fe fd3e 	bl	80126f8 <__assert_func>
 8013c7c:	0052      	lsls	r2, r2, #1
 8013c7e:	3101      	adds	r1, #1
 8013c80:	e7f0      	b.n	8013c64 <__s2b+0x18>
 8013c82:	9b08      	ldr	r3, [sp, #32]
 8013c84:	6143      	str	r3, [r0, #20]
 8013c86:	2d09      	cmp	r5, #9
 8013c88:	f04f 0301 	mov.w	r3, #1
 8013c8c:	6103      	str	r3, [r0, #16]
 8013c8e:	dd16      	ble.n	8013cbe <__s2b+0x72>
 8013c90:	f104 0909 	add.w	r9, r4, #9
 8013c94:	46c8      	mov	r8, r9
 8013c96:	442c      	add	r4, r5
 8013c98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013c9c:	4601      	mov	r1, r0
 8013c9e:	3b30      	subs	r3, #48	@ 0x30
 8013ca0:	220a      	movs	r2, #10
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7ff ff8c 	bl	8013bc0 <__multadd>
 8013ca8:	45a0      	cmp	r8, r4
 8013caa:	d1f5      	bne.n	8013c98 <__s2b+0x4c>
 8013cac:	f1a5 0408 	sub.w	r4, r5, #8
 8013cb0:	444c      	add	r4, r9
 8013cb2:	1b2d      	subs	r5, r5, r4
 8013cb4:	1963      	adds	r3, r4, r5
 8013cb6:	42bb      	cmp	r3, r7
 8013cb8:	db04      	blt.n	8013cc4 <__s2b+0x78>
 8013cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbe:	340a      	adds	r4, #10
 8013cc0:	2509      	movs	r5, #9
 8013cc2:	e7f6      	b.n	8013cb2 <__s2b+0x66>
 8013cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013cc8:	4601      	mov	r1, r0
 8013cca:	3b30      	subs	r3, #48	@ 0x30
 8013ccc:	220a      	movs	r2, #10
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f7ff ff76 	bl	8013bc0 <__multadd>
 8013cd4:	e7ee      	b.n	8013cb4 <__s2b+0x68>
 8013cd6:	bf00      	nop
 8013cd8:	08015baf 	.word	0x08015baf
 8013cdc:	08015c20 	.word	0x08015c20

08013ce0 <__hi0bits>:
 8013ce0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	bf36      	itet	cc
 8013ce8:	0403      	lslcc	r3, r0, #16
 8013cea:	2000      	movcs	r0, #0
 8013cec:	2010      	movcc	r0, #16
 8013cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013cf2:	bf3c      	itt	cc
 8013cf4:	021b      	lslcc	r3, r3, #8
 8013cf6:	3008      	addcc	r0, #8
 8013cf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013cfc:	bf3c      	itt	cc
 8013cfe:	011b      	lslcc	r3, r3, #4
 8013d00:	3004      	addcc	r0, #4
 8013d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d06:	bf3c      	itt	cc
 8013d08:	009b      	lslcc	r3, r3, #2
 8013d0a:	3002      	addcc	r0, #2
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	db05      	blt.n	8013d1c <__hi0bits+0x3c>
 8013d10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013d14:	f100 0001 	add.w	r0, r0, #1
 8013d18:	bf08      	it	eq
 8013d1a:	2020      	moveq	r0, #32
 8013d1c:	4770      	bx	lr

08013d1e <__lo0bits>:
 8013d1e:	6803      	ldr	r3, [r0, #0]
 8013d20:	4602      	mov	r2, r0
 8013d22:	f013 0007 	ands.w	r0, r3, #7
 8013d26:	d00b      	beq.n	8013d40 <__lo0bits+0x22>
 8013d28:	07d9      	lsls	r1, r3, #31
 8013d2a:	d421      	bmi.n	8013d70 <__lo0bits+0x52>
 8013d2c:	0798      	lsls	r0, r3, #30
 8013d2e:	bf49      	itett	mi
 8013d30:	085b      	lsrmi	r3, r3, #1
 8013d32:	089b      	lsrpl	r3, r3, #2
 8013d34:	2001      	movmi	r0, #1
 8013d36:	6013      	strmi	r3, [r2, #0]
 8013d38:	bf5c      	itt	pl
 8013d3a:	6013      	strpl	r3, [r2, #0]
 8013d3c:	2002      	movpl	r0, #2
 8013d3e:	4770      	bx	lr
 8013d40:	b299      	uxth	r1, r3
 8013d42:	b909      	cbnz	r1, 8013d48 <__lo0bits+0x2a>
 8013d44:	0c1b      	lsrs	r3, r3, #16
 8013d46:	2010      	movs	r0, #16
 8013d48:	b2d9      	uxtb	r1, r3
 8013d4a:	b909      	cbnz	r1, 8013d50 <__lo0bits+0x32>
 8013d4c:	3008      	adds	r0, #8
 8013d4e:	0a1b      	lsrs	r3, r3, #8
 8013d50:	0719      	lsls	r1, r3, #28
 8013d52:	bf04      	itt	eq
 8013d54:	091b      	lsreq	r3, r3, #4
 8013d56:	3004      	addeq	r0, #4
 8013d58:	0799      	lsls	r1, r3, #30
 8013d5a:	bf04      	itt	eq
 8013d5c:	089b      	lsreq	r3, r3, #2
 8013d5e:	3002      	addeq	r0, #2
 8013d60:	07d9      	lsls	r1, r3, #31
 8013d62:	d403      	bmi.n	8013d6c <__lo0bits+0x4e>
 8013d64:	085b      	lsrs	r3, r3, #1
 8013d66:	f100 0001 	add.w	r0, r0, #1
 8013d6a:	d003      	beq.n	8013d74 <__lo0bits+0x56>
 8013d6c:	6013      	str	r3, [r2, #0]
 8013d6e:	4770      	bx	lr
 8013d70:	2000      	movs	r0, #0
 8013d72:	4770      	bx	lr
 8013d74:	2020      	movs	r0, #32
 8013d76:	4770      	bx	lr

08013d78 <__i2b>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	460c      	mov	r4, r1
 8013d7c:	2101      	movs	r1, #1
 8013d7e:	f7ff febd 	bl	8013afc <_Balloc>
 8013d82:	4602      	mov	r2, r0
 8013d84:	b928      	cbnz	r0, 8013d92 <__i2b+0x1a>
 8013d86:	4b05      	ldr	r3, [pc, #20]	@ (8013d9c <__i2b+0x24>)
 8013d88:	4805      	ldr	r0, [pc, #20]	@ (8013da0 <__i2b+0x28>)
 8013d8a:	f240 1145 	movw	r1, #325	@ 0x145
 8013d8e:	f7fe fcb3 	bl	80126f8 <__assert_func>
 8013d92:	2301      	movs	r3, #1
 8013d94:	6144      	str	r4, [r0, #20]
 8013d96:	6103      	str	r3, [r0, #16]
 8013d98:	bd10      	pop	{r4, pc}
 8013d9a:	bf00      	nop
 8013d9c:	08015baf 	.word	0x08015baf
 8013da0:	08015c20 	.word	0x08015c20

08013da4 <__multiply>:
 8013da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da8:	4614      	mov	r4, r2
 8013daa:	690a      	ldr	r2, [r1, #16]
 8013dac:	6923      	ldr	r3, [r4, #16]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	bfa8      	it	ge
 8013db2:	4623      	movge	r3, r4
 8013db4:	460f      	mov	r7, r1
 8013db6:	bfa4      	itt	ge
 8013db8:	460c      	movge	r4, r1
 8013dba:	461f      	movge	r7, r3
 8013dbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013dc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013dc4:	68a3      	ldr	r3, [r4, #8]
 8013dc6:	6861      	ldr	r1, [r4, #4]
 8013dc8:	eb0a 0609 	add.w	r6, sl, r9
 8013dcc:	42b3      	cmp	r3, r6
 8013dce:	b085      	sub	sp, #20
 8013dd0:	bfb8      	it	lt
 8013dd2:	3101      	addlt	r1, #1
 8013dd4:	f7ff fe92 	bl	8013afc <_Balloc>
 8013dd8:	b930      	cbnz	r0, 8013de8 <__multiply+0x44>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4b44      	ldr	r3, [pc, #272]	@ (8013ef0 <__multiply+0x14c>)
 8013dde:	4845      	ldr	r0, [pc, #276]	@ (8013ef4 <__multiply+0x150>)
 8013de0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013de4:	f7fe fc88 	bl	80126f8 <__assert_func>
 8013de8:	f100 0514 	add.w	r5, r0, #20
 8013dec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013df0:	462b      	mov	r3, r5
 8013df2:	2200      	movs	r2, #0
 8013df4:	4543      	cmp	r3, r8
 8013df6:	d321      	bcc.n	8013e3c <__multiply+0x98>
 8013df8:	f107 0114 	add.w	r1, r7, #20
 8013dfc:	f104 0214 	add.w	r2, r4, #20
 8013e00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e08:	9302      	str	r3, [sp, #8]
 8013e0a:	1b13      	subs	r3, r2, r4
 8013e0c:	3b15      	subs	r3, #21
 8013e0e:	f023 0303 	bic.w	r3, r3, #3
 8013e12:	3304      	adds	r3, #4
 8013e14:	f104 0715 	add.w	r7, r4, #21
 8013e18:	42ba      	cmp	r2, r7
 8013e1a:	bf38      	it	cc
 8013e1c:	2304      	movcc	r3, #4
 8013e1e:	9301      	str	r3, [sp, #4]
 8013e20:	9b02      	ldr	r3, [sp, #8]
 8013e22:	9103      	str	r1, [sp, #12]
 8013e24:	428b      	cmp	r3, r1
 8013e26:	d80c      	bhi.n	8013e42 <__multiply+0x9e>
 8013e28:	2e00      	cmp	r6, #0
 8013e2a:	dd03      	ble.n	8013e34 <__multiply+0x90>
 8013e2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d05b      	beq.n	8013eec <__multiply+0x148>
 8013e34:	6106      	str	r6, [r0, #16]
 8013e36:	b005      	add	sp, #20
 8013e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3c:	f843 2b04 	str.w	r2, [r3], #4
 8013e40:	e7d8      	b.n	8013df4 <__multiply+0x50>
 8013e42:	f8b1 a000 	ldrh.w	sl, [r1]
 8013e46:	f1ba 0f00 	cmp.w	sl, #0
 8013e4a:	d024      	beq.n	8013e96 <__multiply+0xf2>
 8013e4c:	f104 0e14 	add.w	lr, r4, #20
 8013e50:	46a9      	mov	r9, r5
 8013e52:	f04f 0c00 	mov.w	ip, #0
 8013e56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e5a:	f8d9 3000 	ldr.w	r3, [r9]
 8013e5e:	fa1f fb87 	uxth.w	fp, r7
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	fb0a 330b 	mla	r3, sl, fp, r3
 8013e68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013e6c:	f8d9 7000 	ldr.w	r7, [r9]
 8013e70:	4463      	add	r3, ip
 8013e72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013e76:	fb0a c70b 	mla	r7, sl, fp, ip
 8013e7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013e84:	4572      	cmp	r2, lr
 8013e86:	f849 3b04 	str.w	r3, [r9], #4
 8013e8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013e8e:	d8e2      	bhi.n	8013e56 <__multiply+0xb2>
 8013e90:	9b01      	ldr	r3, [sp, #4]
 8013e92:	f845 c003 	str.w	ip, [r5, r3]
 8013e96:	9b03      	ldr	r3, [sp, #12]
 8013e98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013e9c:	3104      	adds	r1, #4
 8013e9e:	f1b9 0f00 	cmp.w	r9, #0
 8013ea2:	d021      	beq.n	8013ee8 <__multiply+0x144>
 8013ea4:	682b      	ldr	r3, [r5, #0]
 8013ea6:	f104 0c14 	add.w	ip, r4, #20
 8013eaa:	46ae      	mov	lr, r5
 8013eac:	f04f 0a00 	mov.w	sl, #0
 8013eb0:	f8bc b000 	ldrh.w	fp, [ip]
 8013eb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013eb8:	fb09 770b 	mla	r7, r9, fp, r7
 8013ebc:	4457      	add	r7, sl
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ec4:	f84e 3b04 	str.w	r3, [lr], #4
 8013ec8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ecc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ed0:	f8be 3000 	ldrh.w	r3, [lr]
 8013ed4:	fb09 330a 	mla	r3, r9, sl, r3
 8013ed8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013edc:	4562      	cmp	r2, ip
 8013ede:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ee2:	d8e5      	bhi.n	8013eb0 <__multiply+0x10c>
 8013ee4:	9f01      	ldr	r7, [sp, #4]
 8013ee6:	51eb      	str	r3, [r5, r7]
 8013ee8:	3504      	adds	r5, #4
 8013eea:	e799      	b.n	8013e20 <__multiply+0x7c>
 8013eec:	3e01      	subs	r6, #1
 8013eee:	e79b      	b.n	8013e28 <__multiply+0x84>
 8013ef0:	08015baf 	.word	0x08015baf
 8013ef4:	08015c20 	.word	0x08015c20

08013ef8 <__pow5mult>:
 8013ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013efc:	4615      	mov	r5, r2
 8013efe:	f012 0203 	ands.w	r2, r2, #3
 8013f02:	4607      	mov	r7, r0
 8013f04:	460e      	mov	r6, r1
 8013f06:	d007      	beq.n	8013f18 <__pow5mult+0x20>
 8013f08:	4c25      	ldr	r4, [pc, #148]	@ (8013fa0 <__pow5mult+0xa8>)
 8013f0a:	3a01      	subs	r2, #1
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f12:	f7ff fe55 	bl	8013bc0 <__multadd>
 8013f16:	4606      	mov	r6, r0
 8013f18:	10ad      	asrs	r5, r5, #2
 8013f1a:	d03d      	beq.n	8013f98 <__pow5mult+0xa0>
 8013f1c:	69fc      	ldr	r4, [r7, #28]
 8013f1e:	b97c      	cbnz	r4, 8013f40 <__pow5mult+0x48>
 8013f20:	2010      	movs	r0, #16
 8013f22:	f7fc fd5f 	bl	80109e4 <malloc>
 8013f26:	4602      	mov	r2, r0
 8013f28:	61f8      	str	r0, [r7, #28]
 8013f2a:	b928      	cbnz	r0, 8013f38 <__pow5mult+0x40>
 8013f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8013fa4 <__pow5mult+0xac>)
 8013f2e:	481e      	ldr	r0, [pc, #120]	@ (8013fa8 <__pow5mult+0xb0>)
 8013f30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013f34:	f7fe fbe0 	bl	80126f8 <__assert_func>
 8013f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f3c:	6004      	str	r4, [r0, #0]
 8013f3e:	60c4      	str	r4, [r0, #12]
 8013f40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f48:	b94c      	cbnz	r4, 8013f5e <__pow5mult+0x66>
 8013f4a:	f240 2171 	movw	r1, #625	@ 0x271
 8013f4e:	4638      	mov	r0, r7
 8013f50:	f7ff ff12 	bl	8013d78 <__i2b>
 8013f54:	2300      	movs	r3, #0
 8013f56:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	6003      	str	r3, [r0, #0]
 8013f5e:	f04f 0900 	mov.w	r9, #0
 8013f62:	07eb      	lsls	r3, r5, #31
 8013f64:	d50a      	bpl.n	8013f7c <__pow5mult+0x84>
 8013f66:	4631      	mov	r1, r6
 8013f68:	4622      	mov	r2, r4
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	f7ff ff1a 	bl	8013da4 <__multiply>
 8013f70:	4631      	mov	r1, r6
 8013f72:	4680      	mov	r8, r0
 8013f74:	4638      	mov	r0, r7
 8013f76:	f7ff fe01 	bl	8013b7c <_Bfree>
 8013f7a:	4646      	mov	r6, r8
 8013f7c:	106d      	asrs	r5, r5, #1
 8013f7e:	d00b      	beq.n	8013f98 <__pow5mult+0xa0>
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	b938      	cbnz	r0, 8013f94 <__pow5mult+0x9c>
 8013f84:	4622      	mov	r2, r4
 8013f86:	4621      	mov	r1, r4
 8013f88:	4638      	mov	r0, r7
 8013f8a:	f7ff ff0b 	bl	8013da4 <__multiply>
 8013f8e:	6020      	str	r0, [r4, #0]
 8013f90:	f8c0 9000 	str.w	r9, [r0]
 8013f94:	4604      	mov	r4, r0
 8013f96:	e7e4      	b.n	8013f62 <__pow5mult+0x6a>
 8013f98:	4630      	mov	r0, r6
 8013f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f9e:	bf00      	nop
 8013fa0:	08015c7c 	.word	0x08015c7c
 8013fa4:	08015a95 	.word	0x08015a95
 8013fa8:	08015c20 	.word	0x08015c20

08013fac <__lshift>:
 8013fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb0:	460c      	mov	r4, r1
 8013fb2:	6849      	ldr	r1, [r1, #4]
 8013fb4:	6923      	ldr	r3, [r4, #16]
 8013fb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013fba:	68a3      	ldr	r3, [r4, #8]
 8013fbc:	4607      	mov	r7, r0
 8013fbe:	4691      	mov	r9, r2
 8013fc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fc4:	f108 0601 	add.w	r6, r8, #1
 8013fc8:	42b3      	cmp	r3, r6
 8013fca:	db0b      	blt.n	8013fe4 <__lshift+0x38>
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f7ff fd95 	bl	8013afc <_Balloc>
 8013fd2:	4605      	mov	r5, r0
 8013fd4:	b948      	cbnz	r0, 8013fea <__lshift+0x3e>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	4b28      	ldr	r3, [pc, #160]	@ (801407c <__lshift+0xd0>)
 8013fda:	4829      	ldr	r0, [pc, #164]	@ (8014080 <__lshift+0xd4>)
 8013fdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013fe0:	f7fe fb8a 	bl	80126f8 <__assert_func>
 8013fe4:	3101      	adds	r1, #1
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	e7ee      	b.n	8013fc8 <__lshift+0x1c>
 8013fea:	2300      	movs	r3, #0
 8013fec:	f100 0114 	add.w	r1, r0, #20
 8013ff0:	f100 0210 	add.w	r2, r0, #16
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	4553      	cmp	r3, sl
 8013ff8:	db33      	blt.n	8014062 <__lshift+0xb6>
 8013ffa:	6920      	ldr	r0, [r4, #16]
 8013ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014000:	f104 0314 	add.w	r3, r4, #20
 8014004:	f019 091f 	ands.w	r9, r9, #31
 8014008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801400c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014010:	d02b      	beq.n	801406a <__lshift+0xbe>
 8014012:	f1c9 0e20 	rsb	lr, r9, #32
 8014016:	468a      	mov	sl, r1
 8014018:	2200      	movs	r2, #0
 801401a:	6818      	ldr	r0, [r3, #0]
 801401c:	fa00 f009 	lsl.w	r0, r0, r9
 8014020:	4310      	orrs	r0, r2
 8014022:	f84a 0b04 	str.w	r0, [sl], #4
 8014026:	f853 2b04 	ldr.w	r2, [r3], #4
 801402a:	459c      	cmp	ip, r3
 801402c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014030:	d8f3      	bhi.n	801401a <__lshift+0x6e>
 8014032:	ebac 0304 	sub.w	r3, ip, r4
 8014036:	3b15      	subs	r3, #21
 8014038:	f023 0303 	bic.w	r3, r3, #3
 801403c:	3304      	adds	r3, #4
 801403e:	f104 0015 	add.w	r0, r4, #21
 8014042:	4584      	cmp	ip, r0
 8014044:	bf38      	it	cc
 8014046:	2304      	movcc	r3, #4
 8014048:	50ca      	str	r2, [r1, r3]
 801404a:	b10a      	cbz	r2, 8014050 <__lshift+0xa4>
 801404c:	f108 0602 	add.w	r6, r8, #2
 8014050:	3e01      	subs	r6, #1
 8014052:	4638      	mov	r0, r7
 8014054:	612e      	str	r6, [r5, #16]
 8014056:	4621      	mov	r1, r4
 8014058:	f7ff fd90 	bl	8013b7c <_Bfree>
 801405c:	4628      	mov	r0, r5
 801405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014062:	f842 0f04 	str.w	r0, [r2, #4]!
 8014066:	3301      	adds	r3, #1
 8014068:	e7c5      	b.n	8013ff6 <__lshift+0x4a>
 801406a:	3904      	subs	r1, #4
 801406c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014070:	f841 2f04 	str.w	r2, [r1, #4]!
 8014074:	459c      	cmp	ip, r3
 8014076:	d8f9      	bhi.n	801406c <__lshift+0xc0>
 8014078:	e7ea      	b.n	8014050 <__lshift+0xa4>
 801407a:	bf00      	nop
 801407c:	08015baf 	.word	0x08015baf
 8014080:	08015c20 	.word	0x08015c20

08014084 <__mcmp>:
 8014084:	690a      	ldr	r2, [r1, #16]
 8014086:	4603      	mov	r3, r0
 8014088:	6900      	ldr	r0, [r0, #16]
 801408a:	1a80      	subs	r0, r0, r2
 801408c:	b530      	push	{r4, r5, lr}
 801408e:	d10e      	bne.n	80140ae <__mcmp+0x2a>
 8014090:	3314      	adds	r3, #20
 8014092:	3114      	adds	r1, #20
 8014094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801409c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80140a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80140a4:	4295      	cmp	r5, r2
 80140a6:	d003      	beq.n	80140b0 <__mcmp+0x2c>
 80140a8:	d205      	bcs.n	80140b6 <__mcmp+0x32>
 80140aa:	f04f 30ff 	mov.w	r0, #4294967295
 80140ae:	bd30      	pop	{r4, r5, pc}
 80140b0:	42a3      	cmp	r3, r4
 80140b2:	d3f3      	bcc.n	801409c <__mcmp+0x18>
 80140b4:	e7fb      	b.n	80140ae <__mcmp+0x2a>
 80140b6:	2001      	movs	r0, #1
 80140b8:	e7f9      	b.n	80140ae <__mcmp+0x2a>
	...

080140bc <__mdiff>:
 80140bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c0:	4689      	mov	r9, r1
 80140c2:	4606      	mov	r6, r0
 80140c4:	4611      	mov	r1, r2
 80140c6:	4648      	mov	r0, r9
 80140c8:	4614      	mov	r4, r2
 80140ca:	f7ff ffdb 	bl	8014084 <__mcmp>
 80140ce:	1e05      	subs	r5, r0, #0
 80140d0:	d112      	bne.n	80140f8 <__mdiff+0x3c>
 80140d2:	4629      	mov	r1, r5
 80140d4:	4630      	mov	r0, r6
 80140d6:	f7ff fd11 	bl	8013afc <_Balloc>
 80140da:	4602      	mov	r2, r0
 80140dc:	b928      	cbnz	r0, 80140ea <__mdiff+0x2e>
 80140de:	4b3f      	ldr	r3, [pc, #252]	@ (80141dc <__mdiff+0x120>)
 80140e0:	f240 2137 	movw	r1, #567	@ 0x237
 80140e4:	483e      	ldr	r0, [pc, #248]	@ (80141e0 <__mdiff+0x124>)
 80140e6:	f7fe fb07 	bl	80126f8 <__assert_func>
 80140ea:	2301      	movs	r3, #1
 80140ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80140f0:	4610      	mov	r0, r2
 80140f2:	b003      	add	sp, #12
 80140f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f8:	bfbc      	itt	lt
 80140fa:	464b      	movlt	r3, r9
 80140fc:	46a1      	movlt	r9, r4
 80140fe:	4630      	mov	r0, r6
 8014100:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014104:	bfba      	itte	lt
 8014106:	461c      	movlt	r4, r3
 8014108:	2501      	movlt	r5, #1
 801410a:	2500      	movge	r5, #0
 801410c:	f7ff fcf6 	bl	8013afc <_Balloc>
 8014110:	4602      	mov	r2, r0
 8014112:	b918      	cbnz	r0, 801411c <__mdiff+0x60>
 8014114:	4b31      	ldr	r3, [pc, #196]	@ (80141dc <__mdiff+0x120>)
 8014116:	f240 2145 	movw	r1, #581	@ 0x245
 801411a:	e7e3      	b.n	80140e4 <__mdiff+0x28>
 801411c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014120:	6926      	ldr	r6, [r4, #16]
 8014122:	60c5      	str	r5, [r0, #12]
 8014124:	f109 0310 	add.w	r3, r9, #16
 8014128:	f109 0514 	add.w	r5, r9, #20
 801412c:	f104 0e14 	add.w	lr, r4, #20
 8014130:	f100 0b14 	add.w	fp, r0, #20
 8014134:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014138:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801413c:	9301      	str	r3, [sp, #4]
 801413e:	46d9      	mov	r9, fp
 8014140:	f04f 0c00 	mov.w	ip, #0
 8014144:	9b01      	ldr	r3, [sp, #4]
 8014146:	f85e 0b04 	ldr.w	r0, [lr], #4
 801414a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801414e:	9301      	str	r3, [sp, #4]
 8014150:	fa1f f38a 	uxth.w	r3, sl
 8014154:	4619      	mov	r1, r3
 8014156:	b283      	uxth	r3, r0
 8014158:	1acb      	subs	r3, r1, r3
 801415a:	0c00      	lsrs	r0, r0, #16
 801415c:	4463      	add	r3, ip
 801415e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014162:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014166:	b29b      	uxth	r3, r3
 8014168:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801416c:	4576      	cmp	r6, lr
 801416e:	f849 3b04 	str.w	r3, [r9], #4
 8014172:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014176:	d8e5      	bhi.n	8014144 <__mdiff+0x88>
 8014178:	1b33      	subs	r3, r6, r4
 801417a:	3b15      	subs	r3, #21
 801417c:	f023 0303 	bic.w	r3, r3, #3
 8014180:	3415      	adds	r4, #21
 8014182:	3304      	adds	r3, #4
 8014184:	42a6      	cmp	r6, r4
 8014186:	bf38      	it	cc
 8014188:	2304      	movcc	r3, #4
 801418a:	441d      	add	r5, r3
 801418c:	445b      	add	r3, fp
 801418e:	461e      	mov	r6, r3
 8014190:	462c      	mov	r4, r5
 8014192:	4544      	cmp	r4, r8
 8014194:	d30e      	bcc.n	80141b4 <__mdiff+0xf8>
 8014196:	f108 0103 	add.w	r1, r8, #3
 801419a:	1b49      	subs	r1, r1, r5
 801419c:	f021 0103 	bic.w	r1, r1, #3
 80141a0:	3d03      	subs	r5, #3
 80141a2:	45a8      	cmp	r8, r5
 80141a4:	bf38      	it	cc
 80141a6:	2100      	movcc	r1, #0
 80141a8:	440b      	add	r3, r1
 80141aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141ae:	b191      	cbz	r1, 80141d6 <__mdiff+0x11a>
 80141b0:	6117      	str	r7, [r2, #16]
 80141b2:	e79d      	b.n	80140f0 <__mdiff+0x34>
 80141b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80141b8:	46e6      	mov	lr, ip
 80141ba:	0c08      	lsrs	r0, r1, #16
 80141bc:	fa1c fc81 	uxtah	ip, ip, r1
 80141c0:	4471      	add	r1, lr
 80141c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80141c6:	b289      	uxth	r1, r1
 80141c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80141cc:	f846 1b04 	str.w	r1, [r6], #4
 80141d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80141d4:	e7dd      	b.n	8014192 <__mdiff+0xd6>
 80141d6:	3f01      	subs	r7, #1
 80141d8:	e7e7      	b.n	80141aa <__mdiff+0xee>
 80141da:	bf00      	nop
 80141dc:	08015baf 	.word	0x08015baf
 80141e0:	08015c20 	.word	0x08015c20

080141e4 <__ulp>:
 80141e4:	b082      	sub	sp, #8
 80141e6:	ed8d 0b00 	vstr	d0, [sp]
 80141ea:	9a01      	ldr	r2, [sp, #4]
 80141ec:	4b0f      	ldr	r3, [pc, #60]	@ (801422c <__ulp+0x48>)
 80141ee:	4013      	ands	r3, r2
 80141f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	dc08      	bgt.n	801420a <__ulp+0x26>
 80141f8:	425b      	negs	r3, r3
 80141fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80141fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014202:	da04      	bge.n	801420e <__ulp+0x2a>
 8014204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014208:	4113      	asrs	r3, r2
 801420a:	2200      	movs	r2, #0
 801420c:	e008      	b.n	8014220 <__ulp+0x3c>
 801420e:	f1a2 0314 	sub.w	r3, r2, #20
 8014212:	2b1e      	cmp	r3, #30
 8014214:	bfda      	itte	le
 8014216:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801421a:	40da      	lsrle	r2, r3
 801421c:	2201      	movgt	r2, #1
 801421e:	2300      	movs	r3, #0
 8014220:	4619      	mov	r1, r3
 8014222:	4610      	mov	r0, r2
 8014224:	ec41 0b10 	vmov	d0, r0, r1
 8014228:	b002      	add	sp, #8
 801422a:	4770      	bx	lr
 801422c:	7ff00000 	.word	0x7ff00000

08014230 <__b2d>:
 8014230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014234:	6906      	ldr	r6, [r0, #16]
 8014236:	f100 0814 	add.w	r8, r0, #20
 801423a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801423e:	1f37      	subs	r7, r6, #4
 8014240:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014244:	4610      	mov	r0, r2
 8014246:	f7ff fd4b 	bl	8013ce0 <__hi0bits>
 801424a:	f1c0 0320 	rsb	r3, r0, #32
 801424e:	280a      	cmp	r0, #10
 8014250:	600b      	str	r3, [r1, #0]
 8014252:	491b      	ldr	r1, [pc, #108]	@ (80142c0 <__b2d+0x90>)
 8014254:	dc15      	bgt.n	8014282 <__b2d+0x52>
 8014256:	f1c0 0c0b 	rsb	ip, r0, #11
 801425a:	fa22 f30c 	lsr.w	r3, r2, ip
 801425e:	45b8      	cmp	r8, r7
 8014260:	ea43 0501 	orr.w	r5, r3, r1
 8014264:	bf34      	ite	cc
 8014266:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801426a:	2300      	movcs	r3, #0
 801426c:	3015      	adds	r0, #21
 801426e:	fa02 f000 	lsl.w	r0, r2, r0
 8014272:	fa23 f30c 	lsr.w	r3, r3, ip
 8014276:	4303      	orrs	r3, r0
 8014278:	461c      	mov	r4, r3
 801427a:	ec45 4b10 	vmov	d0, r4, r5
 801427e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014282:	45b8      	cmp	r8, r7
 8014284:	bf3a      	itte	cc
 8014286:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801428a:	f1a6 0708 	subcc.w	r7, r6, #8
 801428e:	2300      	movcs	r3, #0
 8014290:	380b      	subs	r0, #11
 8014292:	d012      	beq.n	80142ba <__b2d+0x8a>
 8014294:	f1c0 0120 	rsb	r1, r0, #32
 8014298:	fa23 f401 	lsr.w	r4, r3, r1
 801429c:	4082      	lsls	r2, r0
 801429e:	4322      	orrs	r2, r4
 80142a0:	4547      	cmp	r7, r8
 80142a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80142a6:	bf8c      	ite	hi
 80142a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80142ac:	2200      	movls	r2, #0
 80142ae:	4083      	lsls	r3, r0
 80142b0:	40ca      	lsrs	r2, r1
 80142b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80142b6:	4313      	orrs	r3, r2
 80142b8:	e7de      	b.n	8014278 <__b2d+0x48>
 80142ba:	ea42 0501 	orr.w	r5, r2, r1
 80142be:	e7db      	b.n	8014278 <__b2d+0x48>
 80142c0:	3ff00000 	.word	0x3ff00000

080142c4 <__d2b>:
 80142c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142c8:	460f      	mov	r7, r1
 80142ca:	2101      	movs	r1, #1
 80142cc:	ec59 8b10 	vmov	r8, r9, d0
 80142d0:	4616      	mov	r6, r2
 80142d2:	f7ff fc13 	bl	8013afc <_Balloc>
 80142d6:	4604      	mov	r4, r0
 80142d8:	b930      	cbnz	r0, 80142e8 <__d2b+0x24>
 80142da:	4602      	mov	r2, r0
 80142dc:	4b23      	ldr	r3, [pc, #140]	@ (801436c <__d2b+0xa8>)
 80142de:	4824      	ldr	r0, [pc, #144]	@ (8014370 <__d2b+0xac>)
 80142e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80142e4:	f7fe fa08 	bl	80126f8 <__assert_func>
 80142e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80142ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142f0:	b10d      	cbz	r5, 80142f6 <__d2b+0x32>
 80142f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	f1b8 0300 	subs.w	r3, r8, #0
 80142fc:	d023      	beq.n	8014346 <__d2b+0x82>
 80142fe:	4668      	mov	r0, sp
 8014300:	9300      	str	r3, [sp, #0]
 8014302:	f7ff fd0c 	bl	8013d1e <__lo0bits>
 8014306:	e9dd 1200 	ldrd	r1, r2, [sp]
 801430a:	b1d0      	cbz	r0, 8014342 <__d2b+0x7e>
 801430c:	f1c0 0320 	rsb	r3, r0, #32
 8014310:	fa02 f303 	lsl.w	r3, r2, r3
 8014314:	430b      	orrs	r3, r1
 8014316:	40c2      	lsrs	r2, r0
 8014318:	6163      	str	r3, [r4, #20]
 801431a:	9201      	str	r2, [sp, #4]
 801431c:	9b01      	ldr	r3, [sp, #4]
 801431e:	61a3      	str	r3, [r4, #24]
 8014320:	2b00      	cmp	r3, #0
 8014322:	bf0c      	ite	eq
 8014324:	2201      	moveq	r2, #1
 8014326:	2202      	movne	r2, #2
 8014328:	6122      	str	r2, [r4, #16]
 801432a:	b1a5      	cbz	r5, 8014356 <__d2b+0x92>
 801432c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014330:	4405      	add	r5, r0
 8014332:	603d      	str	r5, [r7, #0]
 8014334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014338:	6030      	str	r0, [r6, #0]
 801433a:	4620      	mov	r0, r4
 801433c:	b003      	add	sp, #12
 801433e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014342:	6161      	str	r1, [r4, #20]
 8014344:	e7ea      	b.n	801431c <__d2b+0x58>
 8014346:	a801      	add	r0, sp, #4
 8014348:	f7ff fce9 	bl	8013d1e <__lo0bits>
 801434c:	9b01      	ldr	r3, [sp, #4]
 801434e:	6163      	str	r3, [r4, #20]
 8014350:	3020      	adds	r0, #32
 8014352:	2201      	movs	r2, #1
 8014354:	e7e8      	b.n	8014328 <__d2b+0x64>
 8014356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801435a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801435e:	6038      	str	r0, [r7, #0]
 8014360:	6918      	ldr	r0, [r3, #16]
 8014362:	f7ff fcbd 	bl	8013ce0 <__hi0bits>
 8014366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801436a:	e7e5      	b.n	8014338 <__d2b+0x74>
 801436c:	08015baf 	.word	0x08015baf
 8014370:	08015c20 	.word	0x08015c20

08014374 <__ratio>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	b085      	sub	sp, #20
 801437a:	e9cd 1000 	strd	r1, r0, [sp]
 801437e:	a902      	add	r1, sp, #8
 8014380:	f7ff ff56 	bl	8014230 <__b2d>
 8014384:	9800      	ldr	r0, [sp, #0]
 8014386:	a903      	add	r1, sp, #12
 8014388:	ec55 4b10 	vmov	r4, r5, d0
 801438c:	f7ff ff50 	bl	8014230 <__b2d>
 8014390:	9b01      	ldr	r3, [sp, #4]
 8014392:	6919      	ldr	r1, [r3, #16]
 8014394:	9b00      	ldr	r3, [sp, #0]
 8014396:	691b      	ldr	r3, [r3, #16]
 8014398:	1ac9      	subs	r1, r1, r3
 801439a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801439e:	1a9b      	subs	r3, r3, r2
 80143a0:	ec5b ab10 	vmov	sl, fp, d0
 80143a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	bfce      	itee	gt
 80143ac:	462a      	movgt	r2, r5
 80143ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80143b2:	465a      	movle	r2, fp
 80143b4:	462f      	mov	r7, r5
 80143b6:	46d9      	mov	r9, fp
 80143b8:	bfcc      	ite	gt
 80143ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80143be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80143c2:	464b      	mov	r3, r9
 80143c4:	4652      	mov	r2, sl
 80143c6:	4620      	mov	r0, r4
 80143c8:	4639      	mov	r1, r7
 80143ca:	f7ec fa3f 	bl	800084c <__aeabi_ddiv>
 80143ce:	ec41 0b10 	vmov	d0, r0, r1
 80143d2:	b005      	add	sp, #20
 80143d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143d8 <__copybits>:
 80143d8:	3901      	subs	r1, #1
 80143da:	b570      	push	{r4, r5, r6, lr}
 80143dc:	1149      	asrs	r1, r1, #5
 80143de:	6914      	ldr	r4, [r2, #16]
 80143e0:	3101      	adds	r1, #1
 80143e2:	f102 0314 	add.w	r3, r2, #20
 80143e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80143ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80143ee:	1f05      	subs	r5, r0, #4
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	d30c      	bcc.n	801440e <__copybits+0x36>
 80143f4:	1aa3      	subs	r3, r4, r2
 80143f6:	3b11      	subs	r3, #17
 80143f8:	f023 0303 	bic.w	r3, r3, #3
 80143fc:	3211      	adds	r2, #17
 80143fe:	42a2      	cmp	r2, r4
 8014400:	bf88      	it	hi
 8014402:	2300      	movhi	r3, #0
 8014404:	4418      	add	r0, r3
 8014406:	2300      	movs	r3, #0
 8014408:	4288      	cmp	r0, r1
 801440a:	d305      	bcc.n	8014418 <__copybits+0x40>
 801440c:	bd70      	pop	{r4, r5, r6, pc}
 801440e:	f853 6b04 	ldr.w	r6, [r3], #4
 8014412:	f845 6f04 	str.w	r6, [r5, #4]!
 8014416:	e7eb      	b.n	80143f0 <__copybits+0x18>
 8014418:	f840 3b04 	str.w	r3, [r0], #4
 801441c:	e7f4      	b.n	8014408 <__copybits+0x30>

0801441e <__any_on>:
 801441e:	f100 0214 	add.w	r2, r0, #20
 8014422:	6900      	ldr	r0, [r0, #16]
 8014424:	114b      	asrs	r3, r1, #5
 8014426:	4298      	cmp	r0, r3
 8014428:	b510      	push	{r4, lr}
 801442a:	db11      	blt.n	8014450 <__any_on+0x32>
 801442c:	dd0a      	ble.n	8014444 <__any_on+0x26>
 801442e:	f011 011f 	ands.w	r1, r1, #31
 8014432:	d007      	beq.n	8014444 <__any_on+0x26>
 8014434:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014438:	fa24 f001 	lsr.w	r0, r4, r1
 801443c:	fa00 f101 	lsl.w	r1, r0, r1
 8014440:	428c      	cmp	r4, r1
 8014442:	d10b      	bne.n	801445c <__any_on+0x3e>
 8014444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014448:	4293      	cmp	r3, r2
 801444a:	d803      	bhi.n	8014454 <__any_on+0x36>
 801444c:	2000      	movs	r0, #0
 801444e:	bd10      	pop	{r4, pc}
 8014450:	4603      	mov	r3, r0
 8014452:	e7f7      	b.n	8014444 <__any_on+0x26>
 8014454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014458:	2900      	cmp	r1, #0
 801445a:	d0f5      	beq.n	8014448 <__any_on+0x2a>
 801445c:	2001      	movs	r0, #1
 801445e:	e7f6      	b.n	801444e <__any_on+0x30>

08014460 <__ascii_wctomb>:
 8014460:	4603      	mov	r3, r0
 8014462:	4608      	mov	r0, r1
 8014464:	b141      	cbz	r1, 8014478 <__ascii_wctomb+0x18>
 8014466:	2aff      	cmp	r2, #255	@ 0xff
 8014468:	d904      	bls.n	8014474 <__ascii_wctomb+0x14>
 801446a:	228a      	movs	r2, #138	@ 0x8a
 801446c:	601a      	str	r2, [r3, #0]
 801446e:	f04f 30ff 	mov.w	r0, #4294967295
 8014472:	4770      	bx	lr
 8014474:	700a      	strb	r2, [r1, #0]
 8014476:	2001      	movs	r0, #1
 8014478:	4770      	bx	lr

0801447a <__ssputs_r>:
 801447a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801447e:	688e      	ldr	r6, [r1, #8]
 8014480:	461f      	mov	r7, r3
 8014482:	42be      	cmp	r6, r7
 8014484:	680b      	ldr	r3, [r1, #0]
 8014486:	4682      	mov	sl, r0
 8014488:	460c      	mov	r4, r1
 801448a:	4690      	mov	r8, r2
 801448c:	d82d      	bhi.n	80144ea <__ssputs_r+0x70>
 801448e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014492:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014496:	d026      	beq.n	80144e6 <__ssputs_r+0x6c>
 8014498:	6965      	ldr	r5, [r4, #20]
 801449a:	6909      	ldr	r1, [r1, #16]
 801449c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144a0:	eba3 0901 	sub.w	r9, r3, r1
 80144a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144a8:	1c7b      	adds	r3, r7, #1
 80144aa:	444b      	add	r3, r9
 80144ac:	106d      	asrs	r5, r5, #1
 80144ae:	429d      	cmp	r5, r3
 80144b0:	bf38      	it	cc
 80144b2:	461d      	movcc	r5, r3
 80144b4:	0553      	lsls	r3, r2, #21
 80144b6:	d527      	bpl.n	8014508 <__ssputs_r+0x8e>
 80144b8:	4629      	mov	r1, r5
 80144ba:	f7fc fac5 	bl	8010a48 <_malloc_r>
 80144be:	4606      	mov	r6, r0
 80144c0:	b360      	cbz	r0, 801451c <__ssputs_r+0xa2>
 80144c2:	6921      	ldr	r1, [r4, #16]
 80144c4:	464a      	mov	r2, r9
 80144c6:	f7fe f8fe 	bl	80126c6 <memcpy>
 80144ca:	89a3      	ldrh	r3, [r4, #12]
 80144cc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80144d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144d4:	81a3      	strh	r3, [r4, #12]
 80144d6:	6126      	str	r6, [r4, #16]
 80144d8:	6165      	str	r5, [r4, #20]
 80144da:	444e      	add	r6, r9
 80144dc:	eba5 0509 	sub.w	r5, r5, r9
 80144e0:	6026      	str	r6, [r4, #0]
 80144e2:	60a5      	str	r5, [r4, #8]
 80144e4:	463e      	mov	r6, r7
 80144e6:	42be      	cmp	r6, r7
 80144e8:	d900      	bls.n	80144ec <__ssputs_r+0x72>
 80144ea:	463e      	mov	r6, r7
 80144ec:	6820      	ldr	r0, [r4, #0]
 80144ee:	4632      	mov	r2, r6
 80144f0:	4641      	mov	r1, r8
 80144f2:	f000 f9d7 	bl	80148a4 <memmove>
 80144f6:	68a3      	ldr	r3, [r4, #8]
 80144f8:	1b9b      	subs	r3, r3, r6
 80144fa:	60a3      	str	r3, [r4, #8]
 80144fc:	6823      	ldr	r3, [r4, #0]
 80144fe:	4433      	add	r3, r6
 8014500:	6023      	str	r3, [r4, #0]
 8014502:	2000      	movs	r0, #0
 8014504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014508:	462a      	mov	r2, r5
 801450a:	f000 fa00 	bl	801490e <_realloc_r>
 801450e:	4606      	mov	r6, r0
 8014510:	2800      	cmp	r0, #0
 8014512:	d1e0      	bne.n	80144d6 <__ssputs_r+0x5c>
 8014514:	6921      	ldr	r1, [r4, #16]
 8014516:	4650      	mov	r0, sl
 8014518:	f7fe ff5a 	bl	80133d0 <_free_r>
 801451c:	230c      	movs	r3, #12
 801451e:	f8ca 3000 	str.w	r3, [sl]
 8014522:	89a3      	ldrh	r3, [r4, #12]
 8014524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014528:	81a3      	strh	r3, [r4, #12]
 801452a:	f04f 30ff 	mov.w	r0, #4294967295
 801452e:	e7e9      	b.n	8014504 <__ssputs_r+0x8a>

08014530 <_svfiprintf_r>:
 8014530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014534:	4698      	mov	r8, r3
 8014536:	898b      	ldrh	r3, [r1, #12]
 8014538:	061b      	lsls	r3, r3, #24
 801453a:	b09d      	sub	sp, #116	@ 0x74
 801453c:	4607      	mov	r7, r0
 801453e:	460d      	mov	r5, r1
 8014540:	4614      	mov	r4, r2
 8014542:	d510      	bpl.n	8014566 <_svfiprintf_r+0x36>
 8014544:	690b      	ldr	r3, [r1, #16]
 8014546:	b973      	cbnz	r3, 8014566 <_svfiprintf_r+0x36>
 8014548:	2140      	movs	r1, #64	@ 0x40
 801454a:	f7fc fa7d 	bl	8010a48 <_malloc_r>
 801454e:	6028      	str	r0, [r5, #0]
 8014550:	6128      	str	r0, [r5, #16]
 8014552:	b930      	cbnz	r0, 8014562 <_svfiprintf_r+0x32>
 8014554:	230c      	movs	r3, #12
 8014556:	603b      	str	r3, [r7, #0]
 8014558:	f04f 30ff 	mov.w	r0, #4294967295
 801455c:	b01d      	add	sp, #116	@ 0x74
 801455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014562:	2340      	movs	r3, #64	@ 0x40
 8014564:	616b      	str	r3, [r5, #20]
 8014566:	2300      	movs	r3, #0
 8014568:	9309      	str	r3, [sp, #36]	@ 0x24
 801456a:	2320      	movs	r3, #32
 801456c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014570:	f8cd 800c 	str.w	r8, [sp, #12]
 8014574:	2330      	movs	r3, #48	@ 0x30
 8014576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014714 <_svfiprintf_r+0x1e4>
 801457a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801457e:	f04f 0901 	mov.w	r9, #1
 8014582:	4623      	mov	r3, r4
 8014584:	469a      	mov	sl, r3
 8014586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801458a:	b10a      	cbz	r2, 8014590 <_svfiprintf_r+0x60>
 801458c:	2a25      	cmp	r2, #37	@ 0x25
 801458e:	d1f9      	bne.n	8014584 <_svfiprintf_r+0x54>
 8014590:	ebba 0b04 	subs.w	fp, sl, r4
 8014594:	d00b      	beq.n	80145ae <_svfiprintf_r+0x7e>
 8014596:	465b      	mov	r3, fp
 8014598:	4622      	mov	r2, r4
 801459a:	4629      	mov	r1, r5
 801459c:	4638      	mov	r0, r7
 801459e:	f7ff ff6c 	bl	801447a <__ssputs_r>
 80145a2:	3001      	adds	r0, #1
 80145a4:	f000 80a7 	beq.w	80146f6 <_svfiprintf_r+0x1c6>
 80145a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145aa:	445a      	add	r2, fp
 80145ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80145ae:	f89a 3000 	ldrb.w	r3, [sl]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f000 809f 	beq.w	80146f6 <_svfiprintf_r+0x1c6>
 80145b8:	2300      	movs	r3, #0
 80145ba:	f04f 32ff 	mov.w	r2, #4294967295
 80145be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145c2:	f10a 0a01 	add.w	sl, sl, #1
 80145c6:	9304      	str	r3, [sp, #16]
 80145c8:	9307      	str	r3, [sp, #28]
 80145ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80145d0:	4654      	mov	r4, sl
 80145d2:	2205      	movs	r2, #5
 80145d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145d8:	484e      	ldr	r0, [pc, #312]	@ (8014714 <_svfiprintf_r+0x1e4>)
 80145da:	f7eb fdf9 	bl	80001d0 <memchr>
 80145de:	9a04      	ldr	r2, [sp, #16]
 80145e0:	b9d8      	cbnz	r0, 801461a <_svfiprintf_r+0xea>
 80145e2:	06d0      	lsls	r0, r2, #27
 80145e4:	bf44      	itt	mi
 80145e6:	2320      	movmi	r3, #32
 80145e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145ec:	0711      	lsls	r1, r2, #28
 80145ee:	bf44      	itt	mi
 80145f0:	232b      	movmi	r3, #43	@ 0x2b
 80145f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145f6:	f89a 3000 	ldrb.w	r3, [sl]
 80145fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80145fc:	d015      	beq.n	801462a <_svfiprintf_r+0xfa>
 80145fe:	9a07      	ldr	r2, [sp, #28]
 8014600:	4654      	mov	r4, sl
 8014602:	2000      	movs	r0, #0
 8014604:	f04f 0c0a 	mov.w	ip, #10
 8014608:	4621      	mov	r1, r4
 801460a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801460e:	3b30      	subs	r3, #48	@ 0x30
 8014610:	2b09      	cmp	r3, #9
 8014612:	d94b      	bls.n	80146ac <_svfiprintf_r+0x17c>
 8014614:	b1b0      	cbz	r0, 8014644 <_svfiprintf_r+0x114>
 8014616:	9207      	str	r2, [sp, #28]
 8014618:	e014      	b.n	8014644 <_svfiprintf_r+0x114>
 801461a:	eba0 0308 	sub.w	r3, r0, r8
 801461e:	fa09 f303 	lsl.w	r3, r9, r3
 8014622:	4313      	orrs	r3, r2
 8014624:	9304      	str	r3, [sp, #16]
 8014626:	46a2      	mov	sl, r4
 8014628:	e7d2      	b.n	80145d0 <_svfiprintf_r+0xa0>
 801462a:	9b03      	ldr	r3, [sp, #12]
 801462c:	1d19      	adds	r1, r3, #4
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	9103      	str	r1, [sp, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	bfbb      	ittet	lt
 8014636:	425b      	neglt	r3, r3
 8014638:	f042 0202 	orrlt.w	r2, r2, #2
 801463c:	9307      	strge	r3, [sp, #28]
 801463e:	9307      	strlt	r3, [sp, #28]
 8014640:	bfb8      	it	lt
 8014642:	9204      	strlt	r2, [sp, #16]
 8014644:	7823      	ldrb	r3, [r4, #0]
 8014646:	2b2e      	cmp	r3, #46	@ 0x2e
 8014648:	d10a      	bne.n	8014660 <_svfiprintf_r+0x130>
 801464a:	7863      	ldrb	r3, [r4, #1]
 801464c:	2b2a      	cmp	r3, #42	@ 0x2a
 801464e:	d132      	bne.n	80146b6 <_svfiprintf_r+0x186>
 8014650:	9b03      	ldr	r3, [sp, #12]
 8014652:	1d1a      	adds	r2, r3, #4
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	9203      	str	r2, [sp, #12]
 8014658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801465c:	3402      	adds	r4, #2
 801465e:	9305      	str	r3, [sp, #20]
 8014660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014724 <_svfiprintf_r+0x1f4>
 8014664:	7821      	ldrb	r1, [r4, #0]
 8014666:	2203      	movs	r2, #3
 8014668:	4650      	mov	r0, sl
 801466a:	f7eb fdb1 	bl	80001d0 <memchr>
 801466e:	b138      	cbz	r0, 8014680 <_svfiprintf_r+0x150>
 8014670:	9b04      	ldr	r3, [sp, #16]
 8014672:	eba0 000a 	sub.w	r0, r0, sl
 8014676:	2240      	movs	r2, #64	@ 0x40
 8014678:	4082      	lsls	r2, r0
 801467a:	4313      	orrs	r3, r2
 801467c:	3401      	adds	r4, #1
 801467e:	9304      	str	r3, [sp, #16]
 8014680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014684:	4824      	ldr	r0, [pc, #144]	@ (8014718 <_svfiprintf_r+0x1e8>)
 8014686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801468a:	2206      	movs	r2, #6
 801468c:	f7eb fda0 	bl	80001d0 <memchr>
 8014690:	2800      	cmp	r0, #0
 8014692:	d036      	beq.n	8014702 <_svfiprintf_r+0x1d2>
 8014694:	4b21      	ldr	r3, [pc, #132]	@ (801471c <_svfiprintf_r+0x1ec>)
 8014696:	bb1b      	cbnz	r3, 80146e0 <_svfiprintf_r+0x1b0>
 8014698:	9b03      	ldr	r3, [sp, #12]
 801469a:	3307      	adds	r3, #7
 801469c:	f023 0307 	bic.w	r3, r3, #7
 80146a0:	3308      	adds	r3, #8
 80146a2:	9303      	str	r3, [sp, #12]
 80146a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146a6:	4433      	add	r3, r6
 80146a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80146aa:	e76a      	b.n	8014582 <_svfiprintf_r+0x52>
 80146ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80146b0:	460c      	mov	r4, r1
 80146b2:	2001      	movs	r0, #1
 80146b4:	e7a8      	b.n	8014608 <_svfiprintf_r+0xd8>
 80146b6:	2300      	movs	r3, #0
 80146b8:	3401      	adds	r4, #1
 80146ba:	9305      	str	r3, [sp, #20]
 80146bc:	4619      	mov	r1, r3
 80146be:	f04f 0c0a 	mov.w	ip, #10
 80146c2:	4620      	mov	r0, r4
 80146c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146c8:	3a30      	subs	r2, #48	@ 0x30
 80146ca:	2a09      	cmp	r2, #9
 80146cc:	d903      	bls.n	80146d6 <_svfiprintf_r+0x1a6>
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d0c6      	beq.n	8014660 <_svfiprintf_r+0x130>
 80146d2:	9105      	str	r1, [sp, #20]
 80146d4:	e7c4      	b.n	8014660 <_svfiprintf_r+0x130>
 80146d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80146da:	4604      	mov	r4, r0
 80146dc:	2301      	movs	r3, #1
 80146de:	e7f0      	b.n	80146c2 <_svfiprintf_r+0x192>
 80146e0:	ab03      	add	r3, sp, #12
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	462a      	mov	r2, r5
 80146e6:	4b0e      	ldr	r3, [pc, #56]	@ (8014720 <_svfiprintf_r+0x1f0>)
 80146e8:	a904      	add	r1, sp, #16
 80146ea:	4638      	mov	r0, r7
 80146ec:	f7fd f96c 	bl	80119c8 <_printf_float>
 80146f0:	1c42      	adds	r2, r0, #1
 80146f2:	4606      	mov	r6, r0
 80146f4:	d1d6      	bne.n	80146a4 <_svfiprintf_r+0x174>
 80146f6:	89ab      	ldrh	r3, [r5, #12]
 80146f8:	065b      	lsls	r3, r3, #25
 80146fa:	f53f af2d 	bmi.w	8014558 <_svfiprintf_r+0x28>
 80146fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014700:	e72c      	b.n	801455c <_svfiprintf_r+0x2c>
 8014702:	ab03      	add	r3, sp, #12
 8014704:	9300      	str	r3, [sp, #0]
 8014706:	462a      	mov	r2, r5
 8014708:	4b05      	ldr	r3, [pc, #20]	@ (8014720 <_svfiprintf_r+0x1f0>)
 801470a:	a904      	add	r1, sp, #16
 801470c:	4638      	mov	r0, r7
 801470e:	f7fd fbf3 	bl	8011ef8 <_printf_i>
 8014712:	e7ed      	b.n	80146f0 <_svfiprintf_r+0x1c0>
 8014714:	08015d78 	.word	0x08015d78
 8014718:	08015d82 	.word	0x08015d82
 801471c:	080119c9 	.word	0x080119c9
 8014720:	0801447b 	.word	0x0801447b
 8014724:	08015d7e 	.word	0x08015d7e

08014728 <__sflush_r>:
 8014728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014730:	0716      	lsls	r6, r2, #28
 8014732:	4605      	mov	r5, r0
 8014734:	460c      	mov	r4, r1
 8014736:	d454      	bmi.n	80147e2 <__sflush_r+0xba>
 8014738:	684b      	ldr	r3, [r1, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	dc02      	bgt.n	8014744 <__sflush_r+0x1c>
 801473e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014740:	2b00      	cmp	r3, #0
 8014742:	dd48      	ble.n	80147d6 <__sflush_r+0xae>
 8014744:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014746:	2e00      	cmp	r6, #0
 8014748:	d045      	beq.n	80147d6 <__sflush_r+0xae>
 801474a:	2300      	movs	r3, #0
 801474c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014750:	682f      	ldr	r7, [r5, #0]
 8014752:	6a21      	ldr	r1, [r4, #32]
 8014754:	602b      	str	r3, [r5, #0]
 8014756:	d030      	beq.n	80147ba <__sflush_r+0x92>
 8014758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	0759      	lsls	r1, r3, #29
 801475e:	d505      	bpl.n	801476c <__sflush_r+0x44>
 8014760:	6863      	ldr	r3, [r4, #4]
 8014762:	1ad2      	subs	r2, r2, r3
 8014764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014766:	b10b      	cbz	r3, 801476c <__sflush_r+0x44>
 8014768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801476a:	1ad2      	subs	r2, r2, r3
 801476c:	2300      	movs	r3, #0
 801476e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014770:	6a21      	ldr	r1, [r4, #32]
 8014772:	4628      	mov	r0, r5
 8014774:	47b0      	blx	r6
 8014776:	1c43      	adds	r3, r0, #1
 8014778:	89a3      	ldrh	r3, [r4, #12]
 801477a:	d106      	bne.n	801478a <__sflush_r+0x62>
 801477c:	6829      	ldr	r1, [r5, #0]
 801477e:	291d      	cmp	r1, #29
 8014780:	d82b      	bhi.n	80147da <__sflush_r+0xb2>
 8014782:	4a2a      	ldr	r2, [pc, #168]	@ (801482c <__sflush_r+0x104>)
 8014784:	410a      	asrs	r2, r1
 8014786:	07d6      	lsls	r6, r2, #31
 8014788:	d427      	bmi.n	80147da <__sflush_r+0xb2>
 801478a:	2200      	movs	r2, #0
 801478c:	6062      	str	r2, [r4, #4]
 801478e:	04d9      	lsls	r1, r3, #19
 8014790:	6922      	ldr	r2, [r4, #16]
 8014792:	6022      	str	r2, [r4, #0]
 8014794:	d504      	bpl.n	80147a0 <__sflush_r+0x78>
 8014796:	1c42      	adds	r2, r0, #1
 8014798:	d101      	bne.n	801479e <__sflush_r+0x76>
 801479a:	682b      	ldr	r3, [r5, #0]
 801479c:	b903      	cbnz	r3, 80147a0 <__sflush_r+0x78>
 801479e:	6560      	str	r0, [r4, #84]	@ 0x54
 80147a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147a2:	602f      	str	r7, [r5, #0]
 80147a4:	b1b9      	cbz	r1, 80147d6 <__sflush_r+0xae>
 80147a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147aa:	4299      	cmp	r1, r3
 80147ac:	d002      	beq.n	80147b4 <__sflush_r+0x8c>
 80147ae:	4628      	mov	r0, r5
 80147b0:	f7fe fe0e 	bl	80133d0 <_free_r>
 80147b4:	2300      	movs	r3, #0
 80147b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80147b8:	e00d      	b.n	80147d6 <__sflush_r+0xae>
 80147ba:	2301      	movs	r3, #1
 80147bc:	4628      	mov	r0, r5
 80147be:	47b0      	blx	r6
 80147c0:	4602      	mov	r2, r0
 80147c2:	1c50      	adds	r0, r2, #1
 80147c4:	d1c9      	bne.n	801475a <__sflush_r+0x32>
 80147c6:	682b      	ldr	r3, [r5, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d0c6      	beq.n	801475a <__sflush_r+0x32>
 80147cc:	2b1d      	cmp	r3, #29
 80147ce:	d001      	beq.n	80147d4 <__sflush_r+0xac>
 80147d0:	2b16      	cmp	r3, #22
 80147d2:	d11e      	bne.n	8014812 <__sflush_r+0xea>
 80147d4:	602f      	str	r7, [r5, #0]
 80147d6:	2000      	movs	r0, #0
 80147d8:	e022      	b.n	8014820 <__sflush_r+0xf8>
 80147da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147de:	b21b      	sxth	r3, r3
 80147e0:	e01b      	b.n	801481a <__sflush_r+0xf2>
 80147e2:	690f      	ldr	r7, [r1, #16]
 80147e4:	2f00      	cmp	r7, #0
 80147e6:	d0f6      	beq.n	80147d6 <__sflush_r+0xae>
 80147e8:	0793      	lsls	r3, r2, #30
 80147ea:	680e      	ldr	r6, [r1, #0]
 80147ec:	bf08      	it	eq
 80147ee:	694b      	ldreq	r3, [r1, #20]
 80147f0:	600f      	str	r7, [r1, #0]
 80147f2:	bf18      	it	ne
 80147f4:	2300      	movne	r3, #0
 80147f6:	eba6 0807 	sub.w	r8, r6, r7
 80147fa:	608b      	str	r3, [r1, #8]
 80147fc:	f1b8 0f00 	cmp.w	r8, #0
 8014800:	dde9      	ble.n	80147d6 <__sflush_r+0xae>
 8014802:	6a21      	ldr	r1, [r4, #32]
 8014804:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014806:	4643      	mov	r3, r8
 8014808:	463a      	mov	r2, r7
 801480a:	4628      	mov	r0, r5
 801480c:	47b0      	blx	r6
 801480e:	2800      	cmp	r0, #0
 8014810:	dc08      	bgt.n	8014824 <__sflush_r+0xfc>
 8014812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801481a:	81a3      	strh	r3, [r4, #12]
 801481c:	f04f 30ff 	mov.w	r0, #4294967295
 8014820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014824:	4407      	add	r7, r0
 8014826:	eba8 0800 	sub.w	r8, r8, r0
 801482a:	e7e7      	b.n	80147fc <__sflush_r+0xd4>
 801482c:	dfbffffe 	.word	0xdfbffffe

08014830 <_fflush_r>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	690b      	ldr	r3, [r1, #16]
 8014834:	4605      	mov	r5, r0
 8014836:	460c      	mov	r4, r1
 8014838:	b913      	cbnz	r3, 8014840 <_fflush_r+0x10>
 801483a:	2500      	movs	r5, #0
 801483c:	4628      	mov	r0, r5
 801483e:	bd38      	pop	{r3, r4, r5, pc}
 8014840:	b118      	cbz	r0, 801484a <_fflush_r+0x1a>
 8014842:	6a03      	ldr	r3, [r0, #32]
 8014844:	b90b      	cbnz	r3, 801484a <_fflush_r+0x1a>
 8014846:	f7fd fd03 	bl	8012250 <__sinit>
 801484a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d0f3      	beq.n	801483a <_fflush_r+0xa>
 8014852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014854:	07d0      	lsls	r0, r2, #31
 8014856:	d404      	bmi.n	8014862 <_fflush_r+0x32>
 8014858:	0599      	lsls	r1, r3, #22
 801485a:	d402      	bmi.n	8014862 <_fflush_r+0x32>
 801485c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801485e:	f7fd ff28 	bl	80126b2 <__retarget_lock_acquire_recursive>
 8014862:	4628      	mov	r0, r5
 8014864:	4621      	mov	r1, r4
 8014866:	f7ff ff5f 	bl	8014728 <__sflush_r>
 801486a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801486c:	07da      	lsls	r2, r3, #31
 801486e:	4605      	mov	r5, r0
 8014870:	d4e4      	bmi.n	801483c <_fflush_r+0xc>
 8014872:	89a3      	ldrh	r3, [r4, #12]
 8014874:	059b      	lsls	r3, r3, #22
 8014876:	d4e1      	bmi.n	801483c <_fflush_r+0xc>
 8014878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801487a:	f7fd ff1b 	bl	80126b4 <__retarget_lock_release_recursive>
 801487e:	e7dd      	b.n	801483c <_fflush_r+0xc>

08014880 <fiprintf>:
 8014880:	b40e      	push	{r1, r2, r3}
 8014882:	b503      	push	{r0, r1, lr}
 8014884:	4601      	mov	r1, r0
 8014886:	ab03      	add	r3, sp, #12
 8014888:	4805      	ldr	r0, [pc, #20]	@ (80148a0 <fiprintf+0x20>)
 801488a:	f853 2b04 	ldr.w	r2, [r3], #4
 801488e:	6800      	ldr	r0, [r0, #0]
 8014890:	9301      	str	r3, [sp, #4]
 8014892:	f000 f893 	bl	80149bc <_vfiprintf_r>
 8014896:	b002      	add	sp, #8
 8014898:	f85d eb04 	ldr.w	lr, [sp], #4
 801489c:	b003      	add	sp, #12
 801489e:	4770      	bx	lr
 80148a0:	200003d4 	.word	0x200003d4

080148a4 <memmove>:
 80148a4:	4288      	cmp	r0, r1
 80148a6:	b510      	push	{r4, lr}
 80148a8:	eb01 0402 	add.w	r4, r1, r2
 80148ac:	d902      	bls.n	80148b4 <memmove+0x10>
 80148ae:	4284      	cmp	r4, r0
 80148b0:	4623      	mov	r3, r4
 80148b2:	d807      	bhi.n	80148c4 <memmove+0x20>
 80148b4:	1e43      	subs	r3, r0, #1
 80148b6:	42a1      	cmp	r1, r4
 80148b8:	d008      	beq.n	80148cc <memmove+0x28>
 80148ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148c2:	e7f8      	b.n	80148b6 <memmove+0x12>
 80148c4:	4402      	add	r2, r0
 80148c6:	4601      	mov	r1, r0
 80148c8:	428a      	cmp	r2, r1
 80148ca:	d100      	bne.n	80148ce <memmove+0x2a>
 80148cc:	bd10      	pop	{r4, pc}
 80148ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148d6:	e7f7      	b.n	80148c8 <memmove+0x24>

080148d8 <abort>:
 80148d8:	b508      	push	{r3, lr}
 80148da:	2006      	movs	r0, #6
 80148dc:	f000 fa42 	bl	8014d64 <raise>
 80148e0:	2001      	movs	r0, #1
 80148e2:	f7ef f819 	bl	8003918 <_exit>

080148e6 <_calloc_r>:
 80148e6:	b570      	push	{r4, r5, r6, lr}
 80148e8:	fba1 5402 	umull	r5, r4, r1, r2
 80148ec:	b93c      	cbnz	r4, 80148fe <_calloc_r+0x18>
 80148ee:	4629      	mov	r1, r5
 80148f0:	f7fc f8aa 	bl	8010a48 <_malloc_r>
 80148f4:	4606      	mov	r6, r0
 80148f6:	b928      	cbnz	r0, 8014904 <_calloc_r+0x1e>
 80148f8:	2600      	movs	r6, #0
 80148fa:	4630      	mov	r0, r6
 80148fc:	bd70      	pop	{r4, r5, r6, pc}
 80148fe:	220c      	movs	r2, #12
 8014900:	6002      	str	r2, [r0, #0]
 8014902:	e7f9      	b.n	80148f8 <_calloc_r+0x12>
 8014904:	462a      	mov	r2, r5
 8014906:	4621      	mov	r1, r4
 8014908:	f7fd fd74 	bl	80123f4 <memset>
 801490c:	e7f5      	b.n	80148fa <_calloc_r+0x14>

0801490e <_realloc_r>:
 801490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014912:	4680      	mov	r8, r0
 8014914:	4615      	mov	r5, r2
 8014916:	460c      	mov	r4, r1
 8014918:	b921      	cbnz	r1, 8014924 <_realloc_r+0x16>
 801491a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801491e:	4611      	mov	r1, r2
 8014920:	f7fc b892 	b.w	8010a48 <_malloc_r>
 8014924:	b92a      	cbnz	r2, 8014932 <_realloc_r+0x24>
 8014926:	f7fe fd53 	bl	80133d0 <_free_r>
 801492a:	2400      	movs	r4, #0
 801492c:	4620      	mov	r0, r4
 801492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014932:	f000 fa33 	bl	8014d9c <_malloc_usable_size_r>
 8014936:	4285      	cmp	r5, r0
 8014938:	4606      	mov	r6, r0
 801493a:	d802      	bhi.n	8014942 <_realloc_r+0x34>
 801493c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014940:	d8f4      	bhi.n	801492c <_realloc_r+0x1e>
 8014942:	4629      	mov	r1, r5
 8014944:	4640      	mov	r0, r8
 8014946:	f7fc f87f 	bl	8010a48 <_malloc_r>
 801494a:	4607      	mov	r7, r0
 801494c:	2800      	cmp	r0, #0
 801494e:	d0ec      	beq.n	801492a <_realloc_r+0x1c>
 8014950:	42b5      	cmp	r5, r6
 8014952:	462a      	mov	r2, r5
 8014954:	4621      	mov	r1, r4
 8014956:	bf28      	it	cs
 8014958:	4632      	movcs	r2, r6
 801495a:	f7fd feb4 	bl	80126c6 <memcpy>
 801495e:	4621      	mov	r1, r4
 8014960:	4640      	mov	r0, r8
 8014962:	f7fe fd35 	bl	80133d0 <_free_r>
 8014966:	463c      	mov	r4, r7
 8014968:	e7e0      	b.n	801492c <_realloc_r+0x1e>

0801496a <__sfputc_r>:
 801496a:	6893      	ldr	r3, [r2, #8]
 801496c:	3b01      	subs	r3, #1
 801496e:	2b00      	cmp	r3, #0
 8014970:	b410      	push	{r4}
 8014972:	6093      	str	r3, [r2, #8]
 8014974:	da08      	bge.n	8014988 <__sfputc_r+0x1e>
 8014976:	6994      	ldr	r4, [r2, #24]
 8014978:	42a3      	cmp	r3, r4
 801497a:	db01      	blt.n	8014980 <__sfputc_r+0x16>
 801497c:	290a      	cmp	r1, #10
 801497e:	d103      	bne.n	8014988 <__sfputc_r+0x1e>
 8014980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014984:	f000 b932 	b.w	8014bec <__swbuf_r>
 8014988:	6813      	ldr	r3, [r2, #0]
 801498a:	1c58      	adds	r0, r3, #1
 801498c:	6010      	str	r0, [r2, #0]
 801498e:	7019      	strb	r1, [r3, #0]
 8014990:	4608      	mov	r0, r1
 8014992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014996:	4770      	bx	lr

08014998 <__sfputs_r>:
 8014998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801499a:	4606      	mov	r6, r0
 801499c:	460f      	mov	r7, r1
 801499e:	4614      	mov	r4, r2
 80149a0:	18d5      	adds	r5, r2, r3
 80149a2:	42ac      	cmp	r4, r5
 80149a4:	d101      	bne.n	80149aa <__sfputs_r+0x12>
 80149a6:	2000      	movs	r0, #0
 80149a8:	e007      	b.n	80149ba <__sfputs_r+0x22>
 80149aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149ae:	463a      	mov	r2, r7
 80149b0:	4630      	mov	r0, r6
 80149b2:	f7ff ffda 	bl	801496a <__sfputc_r>
 80149b6:	1c43      	adds	r3, r0, #1
 80149b8:	d1f3      	bne.n	80149a2 <__sfputs_r+0xa>
 80149ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149bc <_vfiprintf_r>:
 80149bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149c0:	460d      	mov	r5, r1
 80149c2:	b09d      	sub	sp, #116	@ 0x74
 80149c4:	4614      	mov	r4, r2
 80149c6:	4698      	mov	r8, r3
 80149c8:	4606      	mov	r6, r0
 80149ca:	b118      	cbz	r0, 80149d4 <_vfiprintf_r+0x18>
 80149cc:	6a03      	ldr	r3, [r0, #32]
 80149ce:	b90b      	cbnz	r3, 80149d4 <_vfiprintf_r+0x18>
 80149d0:	f7fd fc3e 	bl	8012250 <__sinit>
 80149d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149d6:	07d9      	lsls	r1, r3, #31
 80149d8:	d405      	bmi.n	80149e6 <_vfiprintf_r+0x2a>
 80149da:	89ab      	ldrh	r3, [r5, #12]
 80149dc:	059a      	lsls	r2, r3, #22
 80149de:	d402      	bmi.n	80149e6 <_vfiprintf_r+0x2a>
 80149e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149e2:	f7fd fe66 	bl	80126b2 <__retarget_lock_acquire_recursive>
 80149e6:	89ab      	ldrh	r3, [r5, #12]
 80149e8:	071b      	lsls	r3, r3, #28
 80149ea:	d501      	bpl.n	80149f0 <_vfiprintf_r+0x34>
 80149ec:	692b      	ldr	r3, [r5, #16]
 80149ee:	b99b      	cbnz	r3, 8014a18 <_vfiprintf_r+0x5c>
 80149f0:	4629      	mov	r1, r5
 80149f2:	4630      	mov	r0, r6
 80149f4:	f000 f938 	bl	8014c68 <__swsetup_r>
 80149f8:	b170      	cbz	r0, 8014a18 <_vfiprintf_r+0x5c>
 80149fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149fc:	07dc      	lsls	r4, r3, #31
 80149fe:	d504      	bpl.n	8014a0a <_vfiprintf_r+0x4e>
 8014a00:	f04f 30ff 	mov.w	r0, #4294967295
 8014a04:	b01d      	add	sp, #116	@ 0x74
 8014a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	0598      	lsls	r0, r3, #22
 8014a0e:	d4f7      	bmi.n	8014a00 <_vfiprintf_r+0x44>
 8014a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a12:	f7fd fe4f 	bl	80126b4 <__retarget_lock_release_recursive>
 8014a16:	e7f3      	b.n	8014a00 <_vfiprintf_r+0x44>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a1c:	2320      	movs	r3, #32
 8014a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a26:	2330      	movs	r3, #48	@ 0x30
 8014a28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014bd8 <_vfiprintf_r+0x21c>
 8014a2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a30:	f04f 0901 	mov.w	r9, #1
 8014a34:	4623      	mov	r3, r4
 8014a36:	469a      	mov	sl, r3
 8014a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a3c:	b10a      	cbz	r2, 8014a42 <_vfiprintf_r+0x86>
 8014a3e:	2a25      	cmp	r2, #37	@ 0x25
 8014a40:	d1f9      	bne.n	8014a36 <_vfiprintf_r+0x7a>
 8014a42:	ebba 0b04 	subs.w	fp, sl, r4
 8014a46:	d00b      	beq.n	8014a60 <_vfiprintf_r+0xa4>
 8014a48:	465b      	mov	r3, fp
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	4630      	mov	r0, r6
 8014a50:	f7ff ffa2 	bl	8014998 <__sfputs_r>
 8014a54:	3001      	adds	r0, #1
 8014a56:	f000 80a7 	beq.w	8014ba8 <_vfiprintf_r+0x1ec>
 8014a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a5c:	445a      	add	r2, fp
 8014a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a60:	f89a 3000 	ldrb.w	r3, [sl]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f000 809f 	beq.w	8014ba8 <_vfiprintf_r+0x1ec>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a74:	f10a 0a01 	add.w	sl, sl, #1
 8014a78:	9304      	str	r3, [sp, #16]
 8014a7a:	9307      	str	r3, [sp, #28]
 8014a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a82:	4654      	mov	r4, sl
 8014a84:	2205      	movs	r2, #5
 8014a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8a:	4853      	ldr	r0, [pc, #332]	@ (8014bd8 <_vfiprintf_r+0x21c>)
 8014a8c:	f7eb fba0 	bl	80001d0 <memchr>
 8014a90:	9a04      	ldr	r2, [sp, #16]
 8014a92:	b9d8      	cbnz	r0, 8014acc <_vfiprintf_r+0x110>
 8014a94:	06d1      	lsls	r1, r2, #27
 8014a96:	bf44      	itt	mi
 8014a98:	2320      	movmi	r3, #32
 8014a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a9e:	0713      	lsls	r3, r2, #28
 8014aa0:	bf44      	itt	mi
 8014aa2:	232b      	movmi	r3, #43	@ 0x2b
 8014aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8014aae:	d015      	beq.n	8014adc <_vfiprintf_r+0x120>
 8014ab0:	9a07      	ldr	r2, [sp, #28]
 8014ab2:	4654      	mov	r4, sl
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	f04f 0c0a 	mov.w	ip, #10
 8014aba:	4621      	mov	r1, r4
 8014abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ac0:	3b30      	subs	r3, #48	@ 0x30
 8014ac2:	2b09      	cmp	r3, #9
 8014ac4:	d94b      	bls.n	8014b5e <_vfiprintf_r+0x1a2>
 8014ac6:	b1b0      	cbz	r0, 8014af6 <_vfiprintf_r+0x13a>
 8014ac8:	9207      	str	r2, [sp, #28]
 8014aca:	e014      	b.n	8014af6 <_vfiprintf_r+0x13a>
 8014acc:	eba0 0308 	sub.w	r3, r0, r8
 8014ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ad4:	4313      	orrs	r3, r2
 8014ad6:	9304      	str	r3, [sp, #16]
 8014ad8:	46a2      	mov	sl, r4
 8014ada:	e7d2      	b.n	8014a82 <_vfiprintf_r+0xc6>
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	1d19      	adds	r1, r3, #4
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	9103      	str	r1, [sp, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	bfbb      	ittet	lt
 8014ae8:	425b      	neglt	r3, r3
 8014aea:	f042 0202 	orrlt.w	r2, r2, #2
 8014aee:	9307      	strge	r3, [sp, #28]
 8014af0:	9307      	strlt	r3, [sp, #28]
 8014af2:	bfb8      	it	lt
 8014af4:	9204      	strlt	r2, [sp, #16]
 8014af6:	7823      	ldrb	r3, [r4, #0]
 8014af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014afa:	d10a      	bne.n	8014b12 <_vfiprintf_r+0x156>
 8014afc:	7863      	ldrb	r3, [r4, #1]
 8014afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b00:	d132      	bne.n	8014b68 <_vfiprintf_r+0x1ac>
 8014b02:	9b03      	ldr	r3, [sp, #12]
 8014b04:	1d1a      	adds	r2, r3, #4
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	9203      	str	r2, [sp, #12]
 8014b0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b0e:	3402      	adds	r4, #2
 8014b10:	9305      	str	r3, [sp, #20]
 8014b12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014be8 <_vfiprintf_r+0x22c>
 8014b16:	7821      	ldrb	r1, [r4, #0]
 8014b18:	2203      	movs	r2, #3
 8014b1a:	4650      	mov	r0, sl
 8014b1c:	f7eb fb58 	bl	80001d0 <memchr>
 8014b20:	b138      	cbz	r0, 8014b32 <_vfiprintf_r+0x176>
 8014b22:	9b04      	ldr	r3, [sp, #16]
 8014b24:	eba0 000a 	sub.w	r0, r0, sl
 8014b28:	2240      	movs	r2, #64	@ 0x40
 8014b2a:	4082      	lsls	r2, r0
 8014b2c:	4313      	orrs	r3, r2
 8014b2e:	3401      	adds	r4, #1
 8014b30:	9304      	str	r3, [sp, #16]
 8014b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b36:	4829      	ldr	r0, [pc, #164]	@ (8014bdc <_vfiprintf_r+0x220>)
 8014b38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b3c:	2206      	movs	r2, #6
 8014b3e:	f7eb fb47 	bl	80001d0 <memchr>
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d03f      	beq.n	8014bc6 <_vfiprintf_r+0x20a>
 8014b46:	4b26      	ldr	r3, [pc, #152]	@ (8014be0 <_vfiprintf_r+0x224>)
 8014b48:	bb1b      	cbnz	r3, 8014b92 <_vfiprintf_r+0x1d6>
 8014b4a:	9b03      	ldr	r3, [sp, #12]
 8014b4c:	3307      	adds	r3, #7
 8014b4e:	f023 0307 	bic.w	r3, r3, #7
 8014b52:	3308      	adds	r3, #8
 8014b54:	9303      	str	r3, [sp, #12]
 8014b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b58:	443b      	add	r3, r7
 8014b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b5c:	e76a      	b.n	8014a34 <_vfiprintf_r+0x78>
 8014b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b62:	460c      	mov	r4, r1
 8014b64:	2001      	movs	r0, #1
 8014b66:	e7a8      	b.n	8014aba <_vfiprintf_r+0xfe>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	3401      	adds	r4, #1
 8014b6c:	9305      	str	r3, [sp, #20]
 8014b6e:	4619      	mov	r1, r3
 8014b70:	f04f 0c0a 	mov.w	ip, #10
 8014b74:	4620      	mov	r0, r4
 8014b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b7a:	3a30      	subs	r2, #48	@ 0x30
 8014b7c:	2a09      	cmp	r2, #9
 8014b7e:	d903      	bls.n	8014b88 <_vfiprintf_r+0x1cc>
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d0c6      	beq.n	8014b12 <_vfiprintf_r+0x156>
 8014b84:	9105      	str	r1, [sp, #20]
 8014b86:	e7c4      	b.n	8014b12 <_vfiprintf_r+0x156>
 8014b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	2301      	movs	r3, #1
 8014b90:	e7f0      	b.n	8014b74 <_vfiprintf_r+0x1b8>
 8014b92:	ab03      	add	r3, sp, #12
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	462a      	mov	r2, r5
 8014b98:	4b12      	ldr	r3, [pc, #72]	@ (8014be4 <_vfiprintf_r+0x228>)
 8014b9a:	a904      	add	r1, sp, #16
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f7fc ff13 	bl	80119c8 <_printf_float>
 8014ba2:	4607      	mov	r7, r0
 8014ba4:	1c78      	adds	r0, r7, #1
 8014ba6:	d1d6      	bne.n	8014b56 <_vfiprintf_r+0x19a>
 8014ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014baa:	07d9      	lsls	r1, r3, #31
 8014bac:	d405      	bmi.n	8014bba <_vfiprintf_r+0x1fe>
 8014bae:	89ab      	ldrh	r3, [r5, #12]
 8014bb0:	059a      	lsls	r2, r3, #22
 8014bb2:	d402      	bmi.n	8014bba <_vfiprintf_r+0x1fe>
 8014bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bb6:	f7fd fd7d 	bl	80126b4 <__retarget_lock_release_recursive>
 8014bba:	89ab      	ldrh	r3, [r5, #12]
 8014bbc:	065b      	lsls	r3, r3, #25
 8014bbe:	f53f af1f 	bmi.w	8014a00 <_vfiprintf_r+0x44>
 8014bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014bc4:	e71e      	b.n	8014a04 <_vfiprintf_r+0x48>
 8014bc6:	ab03      	add	r3, sp, #12
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	462a      	mov	r2, r5
 8014bcc:	4b05      	ldr	r3, [pc, #20]	@ (8014be4 <_vfiprintf_r+0x228>)
 8014bce:	a904      	add	r1, sp, #16
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	f7fd f991 	bl	8011ef8 <_printf_i>
 8014bd6:	e7e4      	b.n	8014ba2 <_vfiprintf_r+0x1e6>
 8014bd8:	08015d78 	.word	0x08015d78
 8014bdc:	08015d82 	.word	0x08015d82
 8014be0:	080119c9 	.word	0x080119c9
 8014be4:	08014999 	.word	0x08014999
 8014be8:	08015d7e 	.word	0x08015d7e

08014bec <__swbuf_r>:
 8014bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bee:	460e      	mov	r6, r1
 8014bf0:	4614      	mov	r4, r2
 8014bf2:	4605      	mov	r5, r0
 8014bf4:	b118      	cbz	r0, 8014bfe <__swbuf_r+0x12>
 8014bf6:	6a03      	ldr	r3, [r0, #32]
 8014bf8:	b90b      	cbnz	r3, 8014bfe <__swbuf_r+0x12>
 8014bfa:	f7fd fb29 	bl	8012250 <__sinit>
 8014bfe:	69a3      	ldr	r3, [r4, #24]
 8014c00:	60a3      	str	r3, [r4, #8]
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	071a      	lsls	r2, r3, #28
 8014c06:	d501      	bpl.n	8014c0c <__swbuf_r+0x20>
 8014c08:	6923      	ldr	r3, [r4, #16]
 8014c0a:	b943      	cbnz	r3, 8014c1e <__swbuf_r+0x32>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 f82a 	bl	8014c68 <__swsetup_r>
 8014c14:	b118      	cbz	r0, 8014c1e <__swbuf_r+0x32>
 8014c16:	f04f 37ff 	mov.w	r7, #4294967295
 8014c1a:	4638      	mov	r0, r7
 8014c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c1e:	6823      	ldr	r3, [r4, #0]
 8014c20:	6922      	ldr	r2, [r4, #16]
 8014c22:	1a98      	subs	r0, r3, r2
 8014c24:	6963      	ldr	r3, [r4, #20]
 8014c26:	b2f6      	uxtb	r6, r6
 8014c28:	4283      	cmp	r3, r0
 8014c2a:	4637      	mov	r7, r6
 8014c2c:	dc05      	bgt.n	8014c3a <__swbuf_r+0x4e>
 8014c2e:	4621      	mov	r1, r4
 8014c30:	4628      	mov	r0, r5
 8014c32:	f7ff fdfd 	bl	8014830 <_fflush_r>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d1ed      	bne.n	8014c16 <__swbuf_r+0x2a>
 8014c3a:	68a3      	ldr	r3, [r4, #8]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	60a3      	str	r3, [r4, #8]
 8014c40:	6823      	ldr	r3, [r4, #0]
 8014c42:	1c5a      	adds	r2, r3, #1
 8014c44:	6022      	str	r2, [r4, #0]
 8014c46:	701e      	strb	r6, [r3, #0]
 8014c48:	6962      	ldr	r2, [r4, #20]
 8014c4a:	1c43      	adds	r3, r0, #1
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d004      	beq.n	8014c5a <__swbuf_r+0x6e>
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	07db      	lsls	r3, r3, #31
 8014c54:	d5e1      	bpl.n	8014c1a <__swbuf_r+0x2e>
 8014c56:	2e0a      	cmp	r6, #10
 8014c58:	d1df      	bne.n	8014c1a <__swbuf_r+0x2e>
 8014c5a:	4621      	mov	r1, r4
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	f7ff fde7 	bl	8014830 <_fflush_r>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d0d9      	beq.n	8014c1a <__swbuf_r+0x2e>
 8014c66:	e7d6      	b.n	8014c16 <__swbuf_r+0x2a>

08014c68 <__swsetup_r>:
 8014c68:	b538      	push	{r3, r4, r5, lr}
 8014c6a:	4b29      	ldr	r3, [pc, #164]	@ (8014d10 <__swsetup_r+0xa8>)
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	6818      	ldr	r0, [r3, #0]
 8014c70:	460c      	mov	r4, r1
 8014c72:	b118      	cbz	r0, 8014c7c <__swsetup_r+0x14>
 8014c74:	6a03      	ldr	r3, [r0, #32]
 8014c76:	b90b      	cbnz	r3, 8014c7c <__swsetup_r+0x14>
 8014c78:	f7fd faea 	bl	8012250 <__sinit>
 8014c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c80:	0719      	lsls	r1, r3, #28
 8014c82:	d422      	bmi.n	8014cca <__swsetup_r+0x62>
 8014c84:	06da      	lsls	r2, r3, #27
 8014c86:	d407      	bmi.n	8014c98 <__swsetup_r+0x30>
 8014c88:	2209      	movs	r2, #9
 8014c8a:	602a      	str	r2, [r5, #0]
 8014c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c90:	81a3      	strh	r3, [r4, #12]
 8014c92:	f04f 30ff 	mov.w	r0, #4294967295
 8014c96:	e033      	b.n	8014d00 <__swsetup_r+0x98>
 8014c98:	0758      	lsls	r0, r3, #29
 8014c9a:	d512      	bpl.n	8014cc2 <__swsetup_r+0x5a>
 8014c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c9e:	b141      	cbz	r1, 8014cb2 <__swsetup_r+0x4a>
 8014ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ca4:	4299      	cmp	r1, r3
 8014ca6:	d002      	beq.n	8014cae <__swsetup_r+0x46>
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f7fe fb91 	bl	80133d0 <_free_r>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8014cb2:	89a3      	ldrh	r3, [r4, #12]
 8014cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014cb8:	81a3      	strh	r3, [r4, #12]
 8014cba:	2300      	movs	r3, #0
 8014cbc:	6063      	str	r3, [r4, #4]
 8014cbe:	6923      	ldr	r3, [r4, #16]
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	89a3      	ldrh	r3, [r4, #12]
 8014cc4:	f043 0308 	orr.w	r3, r3, #8
 8014cc8:	81a3      	strh	r3, [r4, #12]
 8014cca:	6923      	ldr	r3, [r4, #16]
 8014ccc:	b94b      	cbnz	r3, 8014ce2 <__swsetup_r+0x7a>
 8014cce:	89a3      	ldrh	r3, [r4, #12]
 8014cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cd8:	d003      	beq.n	8014ce2 <__swsetup_r+0x7a>
 8014cda:	4621      	mov	r1, r4
 8014cdc:	4628      	mov	r0, r5
 8014cde:	f000 f88b 	bl	8014df8 <__smakebuf_r>
 8014ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ce6:	f013 0201 	ands.w	r2, r3, #1
 8014cea:	d00a      	beq.n	8014d02 <__swsetup_r+0x9a>
 8014cec:	2200      	movs	r2, #0
 8014cee:	60a2      	str	r2, [r4, #8]
 8014cf0:	6962      	ldr	r2, [r4, #20]
 8014cf2:	4252      	negs	r2, r2
 8014cf4:	61a2      	str	r2, [r4, #24]
 8014cf6:	6922      	ldr	r2, [r4, #16]
 8014cf8:	b942      	cbnz	r2, 8014d0c <__swsetup_r+0xa4>
 8014cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014cfe:	d1c5      	bne.n	8014c8c <__swsetup_r+0x24>
 8014d00:	bd38      	pop	{r3, r4, r5, pc}
 8014d02:	0799      	lsls	r1, r3, #30
 8014d04:	bf58      	it	pl
 8014d06:	6962      	ldrpl	r2, [r4, #20]
 8014d08:	60a2      	str	r2, [r4, #8]
 8014d0a:	e7f4      	b.n	8014cf6 <__swsetup_r+0x8e>
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	e7f7      	b.n	8014d00 <__swsetup_r+0x98>
 8014d10:	200003d4 	.word	0x200003d4

08014d14 <_raise_r>:
 8014d14:	291f      	cmp	r1, #31
 8014d16:	b538      	push	{r3, r4, r5, lr}
 8014d18:	4605      	mov	r5, r0
 8014d1a:	460c      	mov	r4, r1
 8014d1c:	d904      	bls.n	8014d28 <_raise_r+0x14>
 8014d1e:	2316      	movs	r3, #22
 8014d20:	6003      	str	r3, [r0, #0]
 8014d22:	f04f 30ff 	mov.w	r0, #4294967295
 8014d26:	bd38      	pop	{r3, r4, r5, pc}
 8014d28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014d2a:	b112      	cbz	r2, 8014d32 <_raise_r+0x1e>
 8014d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d30:	b94b      	cbnz	r3, 8014d46 <_raise_r+0x32>
 8014d32:	4628      	mov	r0, r5
 8014d34:	f000 f830 	bl	8014d98 <_getpid_r>
 8014d38:	4622      	mov	r2, r4
 8014d3a:	4601      	mov	r1, r0
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d42:	f000 b817 	b.w	8014d74 <_kill_r>
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d00a      	beq.n	8014d60 <_raise_r+0x4c>
 8014d4a:	1c59      	adds	r1, r3, #1
 8014d4c:	d103      	bne.n	8014d56 <_raise_r+0x42>
 8014d4e:	2316      	movs	r3, #22
 8014d50:	6003      	str	r3, [r0, #0]
 8014d52:	2001      	movs	r0, #1
 8014d54:	e7e7      	b.n	8014d26 <_raise_r+0x12>
 8014d56:	2100      	movs	r1, #0
 8014d58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	4798      	blx	r3
 8014d60:	2000      	movs	r0, #0
 8014d62:	e7e0      	b.n	8014d26 <_raise_r+0x12>

08014d64 <raise>:
 8014d64:	4b02      	ldr	r3, [pc, #8]	@ (8014d70 <raise+0xc>)
 8014d66:	4601      	mov	r1, r0
 8014d68:	6818      	ldr	r0, [r3, #0]
 8014d6a:	f7ff bfd3 	b.w	8014d14 <_raise_r>
 8014d6e:	bf00      	nop
 8014d70:	200003d4 	.word	0x200003d4

08014d74 <_kill_r>:
 8014d74:	b538      	push	{r3, r4, r5, lr}
 8014d76:	4d07      	ldr	r5, [pc, #28]	@ (8014d94 <_kill_r+0x20>)
 8014d78:	2300      	movs	r3, #0
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	4608      	mov	r0, r1
 8014d7e:	4611      	mov	r1, r2
 8014d80:	602b      	str	r3, [r5, #0]
 8014d82:	f7ee fdb9 	bl	80038f8 <_kill>
 8014d86:	1c43      	adds	r3, r0, #1
 8014d88:	d102      	bne.n	8014d90 <_kill_r+0x1c>
 8014d8a:	682b      	ldr	r3, [r5, #0]
 8014d8c:	b103      	cbz	r3, 8014d90 <_kill_r+0x1c>
 8014d8e:	6023      	str	r3, [r4, #0]
 8014d90:	bd38      	pop	{r3, r4, r5, pc}
 8014d92:	bf00      	nop
 8014d94:	20005a94 	.word	0x20005a94

08014d98 <_getpid_r>:
 8014d98:	f7ee bda6 	b.w	80038e8 <_getpid>

08014d9c <_malloc_usable_size_r>:
 8014d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014da0:	1f18      	subs	r0, r3, #4
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	bfbc      	itt	lt
 8014da6:	580b      	ldrlt	r3, [r1, r0]
 8014da8:	18c0      	addlt	r0, r0, r3
 8014daa:	4770      	bx	lr

08014dac <__swhatbuf_r>:
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	460c      	mov	r4, r1
 8014db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014db4:	2900      	cmp	r1, #0
 8014db6:	b096      	sub	sp, #88	@ 0x58
 8014db8:	4615      	mov	r5, r2
 8014dba:	461e      	mov	r6, r3
 8014dbc:	da0d      	bge.n	8014dda <__swhatbuf_r+0x2e>
 8014dbe:	89a3      	ldrh	r3, [r4, #12]
 8014dc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014dc4:	f04f 0100 	mov.w	r1, #0
 8014dc8:	bf14      	ite	ne
 8014dca:	2340      	movne	r3, #64	@ 0x40
 8014dcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	6031      	str	r1, [r6, #0]
 8014dd4:	602b      	str	r3, [r5, #0]
 8014dd6:	b016      	add	sp, #88	@ 0x58
 8014dd8:	bd70      	pop	{r4, r5, r6, pc}
 8014dda:	466a      	mov	r2, sp
 8014ddc:	f000 f848 	bl	8014e70 <_fstat_r>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	dbec      	blt.n	8014dbe <__swhatbuf_r+0x12>
 8014de4:	9901      	ldr	r1, [sp, #4]
 8014de6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014dea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014dee:	4259      	negs	r1, r3
 8014df0:	4159      	adcs	r1, r3
 8014df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014df6:	e7eb      	b.n	8014dd0 <__swhatbuf_r+0x24>

08014df8 <__smakebuf_r>:
 8014df8:	898b      	ldrh	r3, [r1, #12]
 8014dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dfc:	079d      	lsls	r5, r3, #30
 8014dfe:	4606      	mov	r6, r0
 8014e00:	460c      	mov	r4, r1
 8014e02:	d507      	bpl.n	8014e14 <__smakebuf_r+0x1c>
 8014e04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e08:	6023      	str	r3, [r4, #0]
 8014e0a:	6123      	str	r3, [r4, #16]
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	6163      	str	r3, [r4, #20]
 8014e10:	b003      	add	sp, #12
 8014e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e14:	ab01      	add	r3, sp, #4
 8014e16:	466a      	mov	r2, sp
 8014e18:	f7ff ffc8 	bl	8014dac <__swhatbuf_r>
 8014e1c:	9f00      	ldr	r7, [sp, #0]
 8014e1e:	4605      	mov	r5, r0
 8014e20:	4639      	mov	r1, r7
 8014e22:	4630      	mov	r0, r6
 8014e24:	f7fb fe10 	bl	8010a48 <_malloc_r>
 8014e28:	b948      	cbnz	r0, 8014e3e <__smakebuf_r+0x46>
 8014e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e2e:	059a      	lsls	r2, r3, #22
 8014e30:	d4ee      	bmi.n	8014e10 <__smakebuf_r+0x18>
 8014e32:	f023 0303 	bic.w	r3, r3, #3
 8014e36:	f043 0302 	orr.w	r3, r3, #2
 8014e3a:	81a3      	strh	r3, [r4, #12]
 8014e3c:	e7e2      	b.n	8014e04 <__smakebuf_r+0xc>
 8014e3e:	89a3      	ldrh	r3, [r4, #12]
 8014e40:	6020      	str	r0, [r4, #0]
 8014e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e46:	81a3      	strh	r3, [r4, #12]
 8014e48:	9b01      	ldr	r3, [sp, #4]
 8014e4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e4e:	b15b      	cbz	r3, 8014e68 <__smakebuf_r+0x70>
 8014e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e54:	4630      	mov	r0, r6
 8014e56:	f000 f81d 	bl	8014e94 <_isatty_r>
 8014e5a:	b128      	cbz	r0, 8014e68 <__smakebuf_r+0x70>
 8014e5c:	89a3      	ldrh	r3, [r4, #12]
 8014e5e:	f023 0303 	bic.w	r3, r3, #3
 8014e62:	f043 0301 	orr.w	r3, r3, #1
 8014e66:	81a3      	strh	r3, [r4, #12]
 8014e68:	89a3      	ldrh	r3, [r4, #12]
 8014e6a:	431d      	orrs	r5, r3
 8014e6c:	81a5      	strh	r5, [r4, #12]
 8014e6e:	e7cf      	b.n	8014e10 <__smakebuf_r+0x18>

08014e70 <_fstat_r>:
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	4d07      	ldr	r5, [pc, #28]	@ (8014e90 <_fstat_r+0x20>)
 8014e74:	2300      	movs	r3, #0
 8014e76:	4604      	mov	r4, r0
 8014e78:	4608      	mov	r0, r1
 8014e7a:	4611      	mov	r1, r2
 8014e7c:	602b      	str	r3, [r5, #0]
 8014e7e:	f7ee fd9b 	bl	80039b8 <_fstat>
 8014e82:	1c43      	adds	r3, r0, #1
 8014e84:	d102      	bne.n	8014e8c <_fstat_r+0x1c>
 8014e86:	682b      	ldr	r3, [r5, #0]
 8014e88:	b103      	cbz	r3, 8014e8c <_fstat_r+0x1c>
 8014e8a:	6023      	str	r3, [r4, #0]
 8014e8c:	bd38      	pop	{r3, r4, r5, pc}
 8014e8e:	bf00      	nop
 8014e90:	20005a94 	.word	0x20005a94

08014e94 <_isatty_r>:
 8014e94:	b538      	push	{r3, r4, r5, lr}
 8014e96:	4d06      	ldr	r5, [pc, #24]	@ (8014eb0 <_isatty_r+0x1c>)
 8014e98:	2300      	movs	r3, #0
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	4608      	mov	r0, r1
 8014e9e:	602b      	str	r3, [r5, #0]
 8014ea0:	f7ee fd9a 	bl	80039d8 <_isatty>
 8014ea4:	1c43      	adds	r3, r0, #1
 8014ea6:	d102      	bne.n	8014eae <_isatty_r+0x1a>
 8014ea8:	682b      	ldr	r3, [r5, #0]
 8014eaa:	b103      	cbz	r3, 8014eae <_isatty_r+0x1a>
 8014eac:	6023      	str	r3, [r4, #0]
 8014eae:	bd38      	pop	{r3, r4, r5, pc}
 8014eb0:	20005a94 	.word	0x20005a94

08014eb4 <_init>:
 8014eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eb6:	bf00      	nop
 8014eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eba:	bc08      	pop	{r3}
 8014ebc:	469e      	mov	lr, r3
 8014ebe:	4770      	bx	lr

08014ec0 <_fini>:
 8014ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ec2:	bf00      	nop
 8014ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ec6:	bc08      	pop	{r3}
 8014ec8:	469e      	mov	lr, r3
 8014eca:	4770      	bx	lr
